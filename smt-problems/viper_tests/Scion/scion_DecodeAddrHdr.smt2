(get-info :version)
; (:version "4.12.1")
; Started: 2023-10-31 14:10:30
; Silicon.version: 1.1-SNAPSHOT (46944a65@dspil_symbenchmarking)
; Input file: /home/pcorrect/repos/benchmarking_general/silicon_tests/scion_DecodeAddrHdr.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Tuple2<Ref~_Types>> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<Bool> 0)
(declare-sort Set<Slice<Ref>> 0)
(declare-sort Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Set<Tuple2<Ref~_Types>> 0)
(declare-sort Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> 0)
(declare-sort Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> 0)
(declare-sort Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> 0)
(declare-sort Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> 0)
(declare-sort Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Emb_1_Intbyte$$$_S_$$$ 0)
(declare-sort Equality<ShStruct0> 0)
(declare-sort Emb_4_Interfaceempty_interface$$$$_E_$$$ 0)
(declare-sort ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> 0)
(declare-sort Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> 0)
(declare-sort Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> 0)
(declare-sort Tuple0 0)
(declare-sort Equality<ShStruct2<Ref~_Ref>> 0)
(declare-sort Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort PolyAdditionalAxioms 0)
(declare-sort Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort ShStruct4<Ref~_Ref~_Ref~_Ref> 0)
(declare-sort Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> 0)
(declare-sort ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> 0)
(declare-sort ShStruct1<ShStruct2<Ref~_Ref>> 0)
(declare-sort Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> 0)
(declare-sort Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> 0)
(declare-sort Poly<Tuple0> 0)
(declare-sort Emb_6_Intbyte$$$_S_$$$ 0)
(declare-sort ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> 0)
(declare-sort ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> 0)
(declare-sort ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> 0)
(declare-sort Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort Emb_2_Intuint8$$$_S_$$$ 0)
(declare-sort ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> 0)
(declare-sort Poly<Slice<Ref>> 0)
(declare-sort ShStruct2<ShStruct2<Ref~_Ref>~_Ref> 0)
(declare-sort ShStruct0 0)
(declare-sort ShStruct3<Ref~_Ref~_Ref> 0)
(declare-sort Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$ 0)
(declare-sort ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> 0)
(declare-sort String_ 0)
(declare-sort Emb_3_Intuint8$$$_S_$$$ 0)
(declare-sort ShArray<Ref> 0)
(declare-sort Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> 0)
(declare-sort Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> 0)
(declare-sort Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> 0)
(declare-sort Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> 0)
(declare-sort Types 0)
(declare-sort Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> 0)
(declare-sort Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> 0)
(declare-sort Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> 0)
(declare-sort ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> 0)
(declare-sort ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> 0)
(declare-sort Poly<ShStruct1<ShStruct2<Ref~_Ref>>> 0)
(declare-sort Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> 0)
(declare-sort Slice<Ref> 0)
(declare-sort Poly<ShStruct0> 0)
(declare-sort Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Tuple2<Ref~_Types> 0)
(declare-sort ComparableInterfaceDomain 0)
(declare-sort Poly<Int> 0)
(declare-sort ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct1<ShStruct2<Ref~_Ref>>> 0)
(declare-sort Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> 0)
(declare-sort Emb_4_Interfaceempty_interface$$$_S_$$$ 0)
(declare-sort Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> 0)
(declare-sort ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> 0)
(declare-sort Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> 0)
(declare-sort Poly<ShStruct2<Ref~_Ref>> 0)
(declare-sort Poly<ShStruct3<Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct3<Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> 0)
(declare-sort ShStruct2<Ref~_Ref> 0)
(declare-sort $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> 0)
(declare-sort $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> 0)
(declare-sort $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> 0)
(declare-sort $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> 0)
(declare-sort $FVF<Intbyte$$$$_E_$$$> 0)
(declare-sort $FVF<Bool$$$$_E_$$$> 0)
(declare-sort $FVF<Intuint16$$$$_E_$$$> 0)
(declare-sort $FVF<Intuint32$$$$_E_$$$> 0)
(declare-sort $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> 0)
(declare-sort $FVF<Interfaceempty_interface$$$$_E_$$$> 0)
(declare-sort $PSF<Mem_840d9458_PMEndToEndOption> 0)
(declare-sort $PSF<Mem_840d9458_PMHopByHopOption> 0)
(declare-sort $PSF<Mem_a6ceb89d_PMHopField> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Tuple2<Ref~_Types>>To$Snap (Seq<Tuple2<Ref~_Types>>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Tuple2<Ref~_Types>> ($Snap) Seq<Tuple2<Ref~_Types>>)
(assert (forall ((x Seq<Tuple2<Ref~_Types>>)) (!
    (= x ($SortWrappers.$SnapToSeq<Tuple2<Ref~_Types>>($SortWrappers.Seq<Tuple2<Ref~_Types>>To$Snap x)))
    :pattern (($SortWrappers.Seq<Tuple2<Ref~_Types>>To$Snap x))
    :qid |$Snap.$SnapToSeq<Tuple2<Ref~_Types>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Tuple2<Ref~_Types>>To$Snap($SortWrappers.$SnapToSeq<Tuple2<Ref~_Types>> x)))
    :pattern (($SortWrappers.$SnapToSeq<Tuple2<Ref~_Types>> x))
    :qid |$Snap.Seq<Tuple2<Ref~_Types>>To$SnapToSeq<Tuple2<Ref~_Types>>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Slice<Ref>>To$Snap (Set<Slice<Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Slice<Ref>> ($Snap) Set<Slice<Ref>>)
(assert (forall ((x Set<Slice<Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Slice<Ref>>($SortWrappers.Set<Slice<Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Slice<Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Slice<Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Slice<Ref>>To$Snap($SortWrappers.$SnapToSet<Slice<Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Slice<Ref>> x))
    :qid |$Snap.Set<Slice<Ref>>To$SnapToSet<Slice<Ref>>|
    )))
(declare-fun $SortWrappers.Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Snap) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$SnapToSet<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap (Set<Tuple2<Ref~_Types>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Tuple2<Ref~_Types>> ($Snap) Set<Tuple2<Ref~_Types>>)
(assert (forall ((x Set<Tuple2<Ref~_Types>>)) (!
    (= x ($SortWrappers.$SnapToSet<Tuple2<Ref~_Types>>($SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap x)))
    :pattern (($SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap x))
    :qid |$Snap.$SnapToSet<Tuple2<Ref~_Types>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap($SortWrappers.$SnapToSet<Tuple2<Ref~_Types>> x)))
    :pattern (($SortWrappers.$SnapToSet<Tuple2<Ref~_Types>> x))
    :qid |$Snap.Set<Tuple2<Ref~_Types>>To$SnapToSet<Tuple2<Ref~_Types>>|
    )))
(declare-fun $SortWrappers.Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Snap) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>($SortWrappers.Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$SnapToSet<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($Snap) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(assert (forall ((x Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
    (= x ($SortWrappers.$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>($SortWrappers.Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x)))
    :pattern (($SortWrappers.Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x))
    :qid |$Snap.$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap($SortWrappers.$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x)))
    :pattern (($SortWrappers.$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x))
    :qid |$Snap.Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$SnapToSet<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>|
    )))
(declare-fun $SortWrappers.Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Snap) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(assert (forall ((x Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>($SortWrappers.Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap($SortWrappers.$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> x))
    :qid |$Snap.Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$SnapToSet<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$Snap (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($Snap) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(assert (forall ((x Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>($SortWrappers.Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$Snap($SortWrappers.$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> x))
    :qid |$Snap.Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>To$SnapToSet<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> ($Snap) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>($SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Emb_1_Intbyte$$$_S_$$$To$Snap (Emb_1_Intbyte$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_1_Intbyte$$$_S_$$$ ($Snap) Emb_1_Intbyte$$$_S_$$$)
(assert (forall ((x Emb_1_Intbyte$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_1_Intbyte$$$_S_$$$($SortWrappers.Emb_1_Intbyte$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_1_Intbyte$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_1_Intbyte$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_1_Intbyte$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_1_Intbyte$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_1_Intbyte$$$_S_$$$ x))
    :qid |$Snap.Emb_1_Intbyte$$$_S_$$$To$SnapToEmb_1_Intbyte$$$_S_$$$|
    )))
(declare-fun $SortWrappers.Equality<ShStruct0>To$Snap (Equality<ShStruct0>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct0> ($Snap) Equality<ShStruct0>)
(assert (forall ((x Equality<ShStruct0>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct0>($SortWrappers.Equality<ShStruct0>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct0>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct0>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct0>To$Snap($SortWrappers.$SnapToEquality<ShStruct0> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct0> x))
    :qid |$Snap.Equality<ShStruct0>To$SnapToEquality<ShStruct0>|
    )))
(declare-fun $SortWrappers.Emb_4_Interfaceempty_interface$$$$_E_$$$To$Snap (Emb_4_Interfaceempty_interface$$$$_E_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$ ($Snap) Emb_4_Interfaceempty_interface$$$$_E_$$$)
(assert (forall ((x Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$($SortWrappers.Emb_4_Interfaceempty_interface$$$$_E_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_4_Interfaceempty_interface$$$$_E_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_4_Interfaceempty_interface$$$$_E_$$$To$Snap($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$ x))
    :qid |$Snap.Emb_4_Interfaceempty_interface$$$$_E_$$$To$SnapToEmb_4_Interfaceempty_interface$$$$_E_$$$|
    )))
(declare-fun $SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> ($Snap) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>($SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> x))
    :qid |$Snap.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap (Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> ($Snap) Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap) Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(assert (forall ((x Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>($SortWrappers.Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    :qid |$Snap.Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.Tuple0To$Snap (Tuple0) $Snap)
(declare-fun $SortWrappers.$SnapToTuple0 ($Snap) Tuple0)
(assert (forall ((x Tuple0)) (!
    (= x ($SortWrappers.$SnapToTuple0($SortWrappers.Tuple0To$Snap x)))
    :pattern (($SortWrappers.Tuple0To$Snap x))
    :qid |$Snap.$SnapToTuple0To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Tuple0To$Snap($SortWrappers.$SnapToTuple0 x)))
    :pattern (($SortWrappers.$SnapToTuple0 x))
    :qid |$Snap.Tuple0To$SnapToTuple0|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap (Equality<ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> ($Snap) Equality<ShStruct2<Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>>($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<Ref~_Ref>>To$SnapToEquality<ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.PolyAdditionalAxiomsTo$Snap (PolyAdditionalAxioms) $Snap)
(declare-fun $SortWrappers.$SnapToPolyAdditionalAxioms ($Snap) PolyAdditionalAxioms)
(assert (forall ((x PolyAdditionalAxioms)) (!
    (= x ($SortWrappers.$SnapToPolyAdditionalAxioms($SortWrappers.PolyAdditionalAxiomsTo$Snap x)))
    :pattern (($SortWrappers.PolyAdditionalAxiomsTo$Snap x))
    :qid |$Snap.$SnapToPolyAdditionalAxiomsTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PolyAdditionalAxiomsTo$Snap($SortWrappers.$SnapToPolyAdditionalAxioms x)))
    :pattern (($SortWrappers.$SnapToPolyAdditionalAxioms x))
    :qid |$Snap.PolyAdditionalAxiomsTo$SnapToPolyAdditionalAxioms|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap (Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Snap) Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref> ($Snap) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref>($SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct4<Ref~_Ref~_Ref~_Ref>To$SnapToShStruct4<Ref~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap (Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> ($Snap) Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>)
(assert (forall ((x Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x))
    :qid |$Snap.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> ($Snap) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>($SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap (ShStruct1<ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>> ($Snap) ShStruct1<ShStruct2<Ref~_Ref>>)
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>>($SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToShStruct1<ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.ShStruct1<ShStruct2<Ref~_Ref>>To$SnapToShStruct1<ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap (Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> ($Snap) Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)
(assert (forall ((x Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>($SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap($SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x))
    :qid |$Snap.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap (Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Snap) Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>($SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<Tuple0>To$Snap (Poly<Tuple0>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<Tuple0> ($Snap) Poly<Tuple0>)
(assert (forall ((x Poly<Tuple0>)) (!
    (= x ($SortWrappers.$SnapToPoly<Tuple0>($SortWrappers.Poly<Tuple0>To$Snap x)))
    :pattern (($SortWrappers.Poly<Tuple0>To$Snap x))
    :qid |$Snap.$SnapToPoly<Tuple0>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<Tuple0>To$Snap($SortWrappers.$SnapToPoly<Tuple0> x)))
    :pattern (($SortWrappers.$SnapToPoly<Tuple0> x))
    :qid |$Snap.Poly<Tuple0>To$SnapToPoly<Tuple0>|
    )))
(declare-fun $SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap (Emb_6_Intbyte$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$ ($Snap) Emb_6_Intbyte$$$_S_$$$)
(assert (forall ((x Emb_6_Intbyte$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$($SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_6_Intbyte$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$ x))
    :qid |$Snap.Emb_6_Intbyte$$$_S_$$$To$SnapToEmb_6_Intbyte$$$_S_$$$|
    )))
(declare-fun $SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>($SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> x))
    :qid |$Snap.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> ($Snap) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>($SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Snap) ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>($SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap (Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Snap) Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(assert (forall ((x Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>($SortWrappers.Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$Snap($SortWrappers.$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> x))
    :qid |$Snap.Equality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>To$SnapToEquality<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap (Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Snap) Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Emb_2_Intuint8$$$_S_$$$To$Snap (Emb_2_Intuint8$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_2_Intuint8$$$_S_$$$ ($Snap) Emb_2_Intuint8$$$_S_$$$)
(assert (forall ((x Emb_2_Intuint8$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_2_Intuint8$$$_S_$$$($SortWrappers.Emb_2_Intuint8$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_2_Intuint8$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_2_Intuint8$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_2_Intuint8$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_2_Intuint8$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_2_Intuint8$$$_S_$$$ x))
    :qid |$Snap.Emb_2_Intuint8$$$_S_$$$To$SnapToEmb_2_Intuint8$$$_S_$$$|
    )))
(declare-fun $SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> ($Snap) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>($SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Poly<Slice<Ref>>To$Snap (Poly<Slice<Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<Slice<Ref>> ($Snap) Poly<Slice<Ref>>)
(assert (forall ((x Poly<Slice<Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<Slice<Ref>>($SortWrappers.Poly<Slice<Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<Slice<Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<Slice<Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<Slice<Ref>>To$Snap($SortWrappers.$SnapToPoly<Slice<Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<Slice<Ref>> x))
    :qid |$Snap.Poly<Slice<Ref>>To$SnapToPoly<Slice<Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref> ($Snap) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref>($SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref> x))
    :qid |$Snap.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct0To$Snap (ShStruct0) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct0 ($Snap) ShStruct0)
(assert (forall ((x ShStruct0)) (!
    (= x ($SortWrappers.$SnapToShStruct0($SortWrappers.ShStruct0To$Snap x)))
    :pattern (($SortWrappers.ShStruct0To$Snap x))
    :qid |$Snap.$SnapToShStruct0To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct0To$Snap($SortWrappers.$SnapToShStruct0 x)))
    :pattern (($SortWrappers.$SnapToShStruct0 x))
    :qid |$Snap.ShStruct0To$SnapToShStruct0|
    )))
(declare-fun $SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap (ShStruct3<Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap) ShStruct3<Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref>($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<Ref~_Ref~_Ref>To$SnapToShStruct3<Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap (Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Snap) Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$Snap (Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$ ($Snap) Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)
(assert (forall ((x Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$($SortWrappers.Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$ x))
    :qid |$Snap.Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$To$SnapToEmb_1_DefinedPath_a6ceb89d_T$$$_S_$$$|
    )))
(declare-fun $SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> ($Snap) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>($SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> x))
    :qid |$Snap.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>|
    )))
(declare-fun $SortWrappers.String_To$Snap (String_) $Snap)
(declare-fun $SortWrappers.$SnapToString_ ($Snap) String_)
(assert (forall ((x String_)) (!
    (= x ($SortWrappers.$SnapToString_($SortWrappers.String_To$Snap x)))
    :pattern (($SortWrappers.String_To$Snap x))
    :qid |$Snap.$SnapToString_To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.String_To$Snap($SortWrappers.$SnapToString_ x)))
    :pattern (($SortWrappers.$SnapToString_ x))
    :qid |$Snap.String_To$SnapToString_|
    )))
(declare-fun $SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap (Emb_3_Intuint8$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$ ($Snap) Emb_3_Intuint8$$$_S_$$$)
(assert (forall ((x Emb_3_Intuint8$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$($SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_3_Intuint8$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$ x))
    :qid |$Snap.Emb_3_Intuint8$$$_S_$$$To$SnapToEmb_3_Intuint8$$$_S_$$$|
    )))
(declare-fun $SortWrappers.ShArray<Ref>To$Snap (ShArray<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShArray<Ref> ($Snap) ShArray<Ref>)
(assert (forall ((x ShArray<Ref>)) (!
    (= x ($SortWrappers.$SnapToShArray<Ref>($SortWrappers.ShArray<Ref>To$Snap x)))
    :pattern (($SortWrappers.ShArray<Ref>To$Snap x))
    :qid |$Snap.$SnapToShArray<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShArray<Ref>To$Snap($SortWrappers.$SnapToShArray<Ref> x)))
    :pattern (($SortWrappers.$SnapToShArray<Ref> x))
    :qid |$Snap.ShArray<Ref>To$SnapToShArray<Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> ($Snap) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>($SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap (Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap) Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(assert (forall ((x Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>($SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap($SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    :qid |$Snap.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap (Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Snap) Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)
(assert (forall ((x Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>($SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap (Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Snap) Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>($SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.TypesTo$Snap (Types) $Snap)
(declare-fun $SortWrappers.$SnapToTypes ($Snap) Types)
(assert (forall ((x Types)) (!
    (= x ($SortWrappers.$SnapToTypes($SortWrappers.TypesTo$Snap x)))
    :pattern (($SortWrappers.TypesTo$Snap x))
    :qid |$Snap.$SnapToTypesTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TypesTo$Snap($SortWrappers.$SnapToTypes x)))
    :pattern (($SortWrappers.$SnapToTypes x))
    :qid |$Snap.TypesTo$SnapToTypes|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap (Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($Snap) Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(assert (forall ((x Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>($SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x))
    :qid |$Snap.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap (Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Snap) Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>($SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap (Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Snap) Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>($SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>($SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    :qid |$Snap.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$Snap (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> ($Snap) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
    (= x ($SortWrappers.$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>($SortWrappers.ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$Snap x)))
    :pattern (($SortWrappers.ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$Snap x))
    :qid |$Snap.$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$Snap($SortWrappers.$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> x)))
    :pattern (($SortWrappers.$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> x))
    :qid |$Snap.ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>To$SnapToShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap (Poly<ShStruct1<ShStruct2<Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>> ($Snap) Poly<ShStruct1<ShStruct2<Ref~_Ref>>>)
(assert (forall ((x Poly<ShStruct1<ShStruct2<Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>>($SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap($SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>> x))
    :qid |$Snap.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap (Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Snap) Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)
(assert (forall ((x Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>($SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Slice<Ref>To$Snap (Slice<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSlice<Ref> ($Snap) Slice<Ref>)
(assert (forall ((x Slice<Ref>)) (!
    (= x ($SortWrappers.$SnapToSlice<Ref>($SortWrappers.Slice<Ref>To$Snap x)))
    :pattern (($SortWrappers.Slice<Ref>To$Snap x))
    :qid |$Snap.$SnapToSlice<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Slice<Ref>To$Snap($SortWrappers.$SnapToSlice<Ref> x)))
    :pattern (($SortWrappers.$SnapToSlice<Ref> x))
    :qid |$Snap.Slice<Ref>To$SnapToSlice<Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct0>To$Snap (Poly<ShStruct0>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct0> ($Snap) Poly<ShStruct0>)
(assert (forall ((x Poly<ShStruct0>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct0>($SortWrappers.Poly<ShStruct0>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct0>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct0>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct0>To$Snap($SortWrappers.$SnapToPoly<ShStruct0> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct0> x))
    :qid |$Snap.Poly<ShStruct0>To$SnapToPoly<ShStruct0>|
    )))
(declare-fun $SortWrappers.Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap) Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>>($SortWrappers.Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Tuple2<Ref~_Types>To$Snap (Tuple2<Ref~_Types>) $Snap)
(declare-fun $SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap) Tuple2<Ref~_Types>)
(assert (forall ((x Tuple2<Ref~_Types>)) (!
    (= x ($SortWrappers.$SnapToTuple2<Ref~_Types>($SortWrappers.Tuple2<Ref~_Types>To$Snap x)))
    :pattern (($SortWrappers.Tuple2<Ref~_Types>To$Snap x))
    :qid |$Snap.$SnapToTuple2<Ref~_Types>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Tuple2<Ref~_Types>To$Snap($SortWrappers.$SnapToTuple2<Ref~_Types> x)))
    :pattern (($SortWrappers.$SnapToTuple2<Ref~_Types> x))
    :qid |$Snap.Tuple2<Ref~_Types>To$SnapToTuple2<Ref~_Types>|
    )))
(declare-fun $SortWrappers.ComparableInterfaceDomainTo$Snap (ComparableInterfaceDomain) $Snap)
(declare-fun $SortWrappers.$SnapToComparableInterfaceDomain ($Snap) ComparableInterfaceDomain)
(assert (forall ((x ComparableInterfaceDomain)) (!
    (= x ($SortWrappers.$SnapToComparableInterfaceDomain($SortWrappers.ComparableInterfaceDomainTo$Snap x)))
    :pattern (($SortWrappers.ComparableInterfaceDomainTo$Snap x))
    :qid |$Snap.$SnapToComparableInterfaceDomainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ComparableInterfaceDomainTo$Snap($SortWrappers.$SnapToComparableInterfaceDomain x)))
    :pattern (($SortWrappers.$SnapToComparableInterfaceDomain x))
    :qid |$Snap.ComparableInterfaceDomainTo$SnapToComparableInterfaceDomain|
    )))
(declare-fun $SortWrappers.Poly<Int>To$Snap (Poly<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<Int> ($Snap) Poly<Int>)
(assert (forall ((x Poly<Int>)) (!
    (= x ($SortWrappers.$SnapToPoly<Int>($SortWrappers.Poly<Int>To$Snap x)))
    :pattern (($SortWrappers.Poly<Int>To$Snap x))
    :qid |$Snap.$SnapToPoly<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<Int>To$Snap($SortWrappers.$SnapToPoly<Int> x)))
    :pattern (($SortWrappers.$SnapToPoly<Int> x))
    :qid |$Snap.Poly<Int>To$SnapToPoly<Int>|
    )))
(declare-fun $SortWrappers.ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap (ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap) ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>($SortWrappers.ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$SnapToShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap (Equality<ShStruct1<ShStruct2<Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>> ($Snap) Equality<ShStruct1<ShStruct2<Ref~_Ref>>>)
(assert (forall ((x Equality<ShStruct1<ShStruct2<Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>>($SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap($SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>> x))
    :qid |$Snap.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap (Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($Snap) Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(assert (forall ((x Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>($SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>|
    )))
(declare-fun $SortWrappers.Emb_4_Interfaceempty_interface$$$_S_$$$To$Snap (Emb_4_Interfaceempty_interface$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$ ($Snap) Emb_4_Interfaceempty_interface$$$_S_$$$)
(assert (forall ((x Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$($SortWrappers.Emb_4_Interfaceempty_interface$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_4_Interfaceempty_interface$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_4_Interfaceempty_interface$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$ x))
    :qid |$Snap.Emb_4_Interfaceempty_interface$$$_S_$$$To$SnapToEmb_4_Interfaceempty_interface$$$_S_$$$|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap (Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Snap) Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> ($Snap) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>($SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap (ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap) ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(assert (forall ((x ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>($SortWrappers.ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap($SortWrappers.$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    :qid |$Snap.ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$SnapToShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> ($Snap) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
    (= x ($SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>($SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap x)))
    :pattern (($SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap x))
    :qid |$Snap.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap($SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> x)))
    :pattern (($SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> x))
    :qid |$Snap.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap (Poly<ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>> ($Snap) Poly<ShStruct2<Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>>($SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<Ref~_Ref>>To$SnapToPoly<ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct3<Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct3<Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct3<Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct3<Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct3<Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct3<Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap (Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> ($Snap) Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)
(assert (forall ((x Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>($SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap($SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x))
    :qid |$Snap.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.ShStruct2<Ref~_Ref>To$Snap (ShStruct2<Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap) ShStruct2<Ref~_Ref>)
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<Ref~_Ref>($SortWrappers.ShStruct2<Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<Ref~_Ref> x))
    :qid |$Snap.ShStruct2<Ref~_Ref>To$SnapToShStruct2<Ref~_Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap ($FVF<Intbyte$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap) $FVF<Intbyte$$$$_E_$$$>)
(assert (forall ((x $FVF<Intbyte$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$>($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Intbyte$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Intbyte$$$$_E_$$$>To$SnapTo$FVF<Intbyte$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap ($FVF<Bool$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Bool$$$$_E_$$$> ($Snap) $FVF<Bool$$$$_E_$$$>)
(assert (forall ((x $FVF<Bool$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Bool$$$$_E_$$$>($SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Bool$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Bool$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Bool$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Bool$$$$_E_$$$>To$SnapTo$FVF<Bool$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap ($FVF<Intuint16$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Intuint16$$$$_E_$$$> ($Snap) $FVF<Intuint16$$$$_E_$$$>)
(assert (forall ((x $FVF<Intuint16$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Intuint16$$$$_E_$$$>($SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Intuint16$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Intuint16$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Intuint16$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Intuint16$$$$_E_$$$>To$SnapTo$FVF<Intuint16$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap ($FVF<Intuint32$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Intuint32$$$$_E_$$$> ($Snap) $FVF<Intuint32$$$$_E_$$$>)
(assert (forall ((x $FVF<Intuint32$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Intuint32$$$$_E_$$$>($SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Intuint32$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Intuint32$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Intuint32$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Intuint32$$$$_E_$$$>To$SnapTo$FVF<Intuint32$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap ($FVF<Interfaceempty_interface$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> ($Snap) $FVF<Interfaceempty_interface$$$$_E_$$$>)
(assert (forall ((x $FVF<Interfaceempty_interface$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$>($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Interfaceempty_interface$$$$_E_$$$>To$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap ($PSF<Mem_840d9458_PMEndToEndOption>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<Mem_840d9458_PMEndToEndOption> ($Snap) $PSF<Mem_840d9458_PMEndToEndOption>)
(assert (forall ((x $PSF<Mem_840d9458_PMEndToEndOption>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMEndToEndOption>($SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap x)))
    :pattern (($SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<Mem_840d9458_PMEndToEndOption>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMEndToEndOption> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMEndToEndOption> x))
    :qid |$Snap.$PSF<Mem_840d9458_PMEndToEndOption>To$SnapTo$PSF<Mem_840d9458_PMEndToEndOption>|
    )))
(declare-fun $SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap ($PSF<Mem_840d9458_PMHopByHopOption>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<Mem_840d9458_PMHopByHopOption> ($Snap) $PSF<Mem_840d9458_PMHopByHopOption>)
(assert (forall ((x $PSF<Mem_840d9458_PMHopByHopOption>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMHopByHopOption>($SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap x)))
    :pattern (($SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<Mem_840d9458_PMHopByHopOption>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMHopByHopOption> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<Mem_840d9458_PMHopByHopOption> x))
    :qid |$Snap.$PSF<Mem_840d9458_PMHopByHopOption>To$SnapTo$PSF<Mem_840d9458_PMHopByHopOption>|
    )))
(declare-fun $SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap ($PSF<Mem_a6ceb89d_PMHopField>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<Mem_a6ceb89d_PMHopField> ($Snap) $PSF<Mem_a6ceb89d_PMHopField>)
(assert (forall ((x $PSF<Mem_a6ceb89d_PMHopField>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<Mem_a6ceb89d_PMHopField>($SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap x)))
    :pattern (($SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<Mem_a6ceb89d_PMHopField>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap($SortWrappers.$SnapTo$PSF<Mem_a6ceb89d_PMHopField> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<Mem_a6ceb89d_PMHopField> x))
    :qid |$Snap.$PSF<Mem_a6ceb89d_PMHopField>To$SnapTo$PSF<Mem_a6ceb89d_PMHopField>|
    )))
; ////////// Symbols
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Slice<Ref> Set<Slice<Ref>>) Bool)
(declare-fun Set_card (Set<Slice<Ref>>) Int)
(declare-const Set_empty Set<Slice<Ref>>)
(declare-fun Set_singleton (Slice<Ref>) Set<Slice<Ref>>)
(declare-fun Set_unionone (Set<Slice<Ref>> Slice<Ref>) Set<Slice<Ref>>)
(declare-fun Set_union (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_disjoint (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_difference (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_intersection (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_subset (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_equal (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_in (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_card (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Int)
(declare-const Set_empty Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_singleton (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_unionone (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_union (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_disjoint (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_difference (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_intersection (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(declare-fun Set_subset (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_equal (Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_in (Tuple2<Ref~_Types> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_card (Set<Tuple2<Ref~_Types>>) Int)
(declare-const Set_empty Set<Tuple2<Ref~_Types>>)
(declare-fun Set_singleton (Tuple2<Ref~_Types>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_unionone (Set<Tuple2<Ref~_Types>> Tuple2<Ref~_Types>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_union (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_disjoint (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_difference (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_intersection (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_subset (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_equal (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_in (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Bool)
(declare-fun Set_card (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Int)
(declare-const Set_empty Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_singleton (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_unionone (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_union (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_disjoint (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Bool)
(declare-fun Set_difference (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_intersection (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(declare-fun Set_subset (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Bool)
(declare-fun Set_equal (Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) Bool)
(declare-fun Set_in (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Bool)
(declare-fun Set_card (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Int)
(declare-const Set_empty Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_singleton (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_unionone (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_union (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_disjoint (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Bool)
(declare-fun Set_difference (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_intersection (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(declare-fun Set_subset (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Bool)
(declare-fun Set_equal (Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) Bool)
(declare-fun Set_in (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Bool)
(declare-fun Set_card (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Int)
(declare-const Set_empty Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_singleton (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_unionone (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_union (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_disjoint (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Bool)
(declare-fun Set_difference (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_intersection (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)
(declare-fun Set_subset (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Bool)
(declare-fun Set_equal (Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) Bool)
(declare-fun Set_in (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Bool)
(declare-fun Set_card (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Int)
(declare-const Set_empty Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_singleton (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_unionone (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_union (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_disjoint (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Bool)
(declare-fun Set_difference (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_intersection (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)
(declare-fun Set_subset (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Bool)
(declare-fun Set_equal (Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) Bool)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Tuple2<Ref~_Types>>) Int)
(declare-const Seq_empty Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_singleton (Tuple2<Ref~_Types>) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_build (Seq<Tuple2<Ref~_Types>> Tuple2<Ref~_Types>) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_index (Seq<Tuple2<Ref~_Types>> Int) Tuple2<Ref~_Types>)
(declare-fun Seq_append (Seq<Tuple2<Ref~_Types>> Seq<Tuple2<Ref~_Types>>) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_update (Seq<Tuple2<Ref~_Types>> Int Tuple2<Ref~_Types>) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_contains (Seq<Tuple2<Ref~_Types>> Tuple2<Ref~_Types>) Bool)
(declare-fun Seq_take (Seq<Tuple2<Ref~_Types>> Int) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_drop (Seq<Tuple2<Ref~_Types>> Int) Seq<Tuple2<Ref~_Types>>)
(declare-fun Seq_equal (Seq<Tuple2<Ref~_Types>> Seq<Tuple2<Ref~_Types>>) Bool)
(declare-fun Seq_sameuntil (Seq<Tuple2<Ref~_Types>> Seq<Tuple2<Ref~_Types>> Int) Bool)
(declare-fun eq<Bool> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) Bool)
(declare-fun ShStructget4of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget0of5<ShStruct2<Ref~_Ref>> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev3of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev1of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev4of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev2of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget3of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget2of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun eq<Bool> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) Bool)
(declare-fun ShStructrev1of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructget0of4<ShStruct2<Ref~_Ref>> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructget2of4<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget3of4<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev3of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of4<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructget4of5<Emb_2_Intuint8$$$_S_$$$> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) Emb_2_Intuint8$$$_S_$$$)
(declare-fun ShStructget0of5<Ref> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructrev3of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun ShStructrev1of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun ShStructrev4of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (Emb_2_Intuint8$$$_S_$$$) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun ShStructget1of5<Ref> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructrev2of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun ShStructget3of5<Ref> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructrev0of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> ($Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun ShStructget2of5<Ref> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) $Ref)
(declare-fun box_Poly<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Bool)
(declare-fun ShStructget1of2<Ref> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) $Ref)
(declare-fun ShStructget0of2<ShStruct2<Ref~_Ref>> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev1of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(declare-fun box_Poly<Ref> (Tuple0) $Ref)
(declare-fun unbox_Poly<Tuple0> ($Ref) Tuple0)
(declare-fun box_Poly<Ref> (Slice<Ref>) $Ref)
(declare-fun unbox_Poly<Slice<Ref>> ($Ref) Slice<Ref>)
(declare-fun box_Poly<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct4<Ref~_Ref~_Ref~_Ref> ShStruct4<Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun box_Poly<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct2<Ref~_Ref> ShStruct2<Ref~_Ref>) Bool)
(declare-fun tuple2<Tuple2<Ref~_Types>> ($Ref Types) Tuple2<Ref~_Types>)
(declare-fun get0of2<Ref> (Tuple2<Ref~_Types>) $Ref)
(declare-fun get1of2<Types> (Tuple2<Ref~_Types>) Types)
(declare-fun eq<Bool> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref> ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct1<ShStruct2<Ref~_Ref>> ShStruct1<ShStruct2<Ref~_Ref>>) Bool)
(declare-fun ShStructget1of2<Ref> (ShStruct2<Ref~_Ref>) $Ref)
(declare-fun ShStructget0of2<Ref> (ShStruct2<Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of2<ShStruct2<Ref~_Ref>> ($Ref) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<Ref~_Ref>> ($Ref) ShStruct2<Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct0 ShStruct0) Bool)
(declare-fun ShStructget2of3<Ref> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun ShStructget1of3<Ref> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun sarray<ShArray<Ref>> (Slice<Ref>) ShArray<Ref>)
(declare-fun scap<Int> (Slice<Ref>) Int)
(declare-fun soffset<Int> (Slice<Ref>) Int)
(declare-fun smake<Slice<Ref>> (ShArray<Ref> Int Int Int) Slice<Ref>)
(declare-fun slen<Int> (Slice<Ref>) Int)
(declare-fun eq<Bool> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun ShStructget4of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget10of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev4of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev10of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev13of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget5of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev1of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget6of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev15of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget7of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev14of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget8of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev7of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget2of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget11of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev12of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget3of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev11of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev9of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev8of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev5of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev3of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget16of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget14of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget13of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev16of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev6of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget9of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget12of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget0of17<ShStruct2<Ref~_Ref>> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructget1of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget15of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShArrayloc<Ref> (ShArray<Ref> Int) $Ref)
(declare-fun ShArraysecond<Int> ($Ref) Int)
(declare-fun ShArrayfirst<ShArray<Ref>> ($Ref) ShArray<Ref>)
(declare-fun ShArraylen<Int> (ShArray<Ref>) Int)
(declare-fun ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) Emb_3_Intuint8$$$_S_$$$)
(declare-fun ShStructrev1of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> ($Ref) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun ShStructrev2of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (Emb_3_Intuint8$$$_S_$$$) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun ShStructget0of3<Ref> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructget1of3<Ref> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> ($Ref) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun comparableInterface<Bool> (Tuple2<Ref~_Types>) Bool)
(declare-fun box_Poly<Ref> (ShStruct2<Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<Ref~_Ref>> ($Ref) ShStruct2<Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) Bool)
(declare-fun eq<Bool> (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) Bool)
(declare-fun ShStructget2of3<Ref> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructget1of3<Ref> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct1<ShStruct2<Ref~_Ref>>) $Ref)
(declare-fun unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> ($Ref) ShStruct1<ShStruct2<Ref~_Ref>>)
(declare-fun eq<Bool> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Bool)
(declare-fun box_Poly<Ref> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(declare-fun ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Int) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShArraysecond<Int> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Int)
(declare-fun ShArrayfirst<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun ShArraylen<Int> (ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Int)
(declare-fun ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStruct4<Ref~_Ref~_Ref~_Ref>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun eq<Bool> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) Bool)
(declare-fun ShStructget1of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructget0of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructrev3of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev4of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Emb_6_Intbyte$$$_S_$$$)
(declare-fun ShStructget3of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructget2of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructrev0of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev2of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev1of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev5of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (Emb_6_Intbyte$$$_S_$$$) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructget4of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-const Y$60c7bddc_b41831d7__Types_tag<Int> Int)
(declare-const IPAddr_5c610647_T_Types<Types> Types)
(declare-const Payload_b41831d7_T_Types<Types> Types)
(declare-fun tag_Types<Int> (Types) Int)
(declare-const L4ProtocolType_840d9458_T_Types<Types> Types)
(declare-const integer_Types<Types> Types)
(declare-const Y$febd64e7_b41831d7__Types_tag<Int> Int)
(declare-const SCION_840d9458_T_Types_tag<Int> Int)
(declare-const Y$35202e5_cd675838__Types_tag<Int> Int)
(declare-const SCMPDestinationUnreachable_840d9458_T_Types_tag<Int> Int)
(declare-const BFD_6416454f_T_Types_tag<Int> Int)
(declare-const SCMP_840d9458_T_Types_tag<Int> Int)
(declare-const HostIPv6_cd675838_T_Types<Types> Types)
(declare-const byte_Types<Types> Types)
(declare-const UDPAddr_5c610647_T_Types_tag<Int> Int)
(declare-const Y$60c7bddc_b41831d7__Types<Types> Types)
(declare-const Y$3191b69e_b41831d7__Types_tag<Int> Int)
(declare-const EndToEndExtnSkipper_840d9458_T_Types<Types> Types)
(declare-fun slice_Types<Types> (Types) Types)
(declare-const SCMPPacketTooBig_840d9458_T_Types_tag<Int> Int)
(declare-const Path_c6e60a1d_T_Types_tag<Int> Int)
(declare-const HostIPv6_cd675838_T_Types_tag<Int> Int)
(declare-const Y$53a71dc3_5c610647__Types_tag<Int> Int)
(declare-const Raw_daeaf66a_T_Types<Types> Types)
(declare-const SCMPTypeCode_840d9458_T_Types_tag<Int> Int)
(declare-const Y$9127f611_b41831d7__Types_tag<Int> Int)
(declare-const BFD_6416454f_T_Types<Types> Types)
(declare-const IA_cd675838_T_Types_tag<Int> Int)
(declare-const integer_Types_tag<Int> Int)
(declare-const EndToEndExtnSkipper_840d9458_T_Types_tag<Int> Int)
(declare-const int_Types_tag<Int> Int)
(declare-const Path_c385169_T_Types<Types> Types)
(declare-const nil_Types_tag<Int> Int)
(declare-const SCMPType_840d9458_T_Types<Types> Types)
(declare-const Y$c2e55be_72f0d887__Types<Types> Types)
(declare-const SCMPInternalConnectivityDown_840d9458_T_Types<Types> Types)
(declare-const nil_Types<Types> Types)
(declare-const SCMPCode_840d9458_T_Types_tag<Int> Int)
(declare-const Y$9c78df5f_b41831d7__Types_tag<Int> Int)
(declare-const HostIPv4_cd675838_T_Types_tag<Int> Int)
(declare-const HostNone_cd675838_T_Types<Types> Types)
(declare-const Y$9127f611_b41831d7__Types<Types> Types)
(declare-const AS_cd675838_T_Types_tag<Int> Int)
(declare-const SCMPPacketTooBig_840d9458_T_Types<Types> Types)
(declare-const Decoded_daeaf66a_T_Types_tag<Int> Int)
(declare-const LayerType_b41831d7_T_Types<Types> Types)
(declare-const SCMPInternalConnectivityDown_840d9458_T_Types_tag<Int> Int)
(declare-const HopByHopExtnSkipper_840d9458_T_Types<Types> Types)
(declare-const Y$53a71dc3_5c610647__Types<Types> Types)
(declare-const slice_Types_tag<Int> Int)
(declare-const Y$9c78df5f_b41831d7__Types<Types> Types)
(declare-const string_Types_tag<Int> Int)
(declare-const bigEndian_72f0d887_T_Types<Types> Types)
(declare-fun get_0_pointer_Types<Types> (Types) Types)
(declare-const Y$558431e4_a6ceb89d__Types_tag<Int> Int)
(declare-const Y$b28ae4_ac87dd1d__Types<Types> Types)
(declare-const SCMPTraceroute_840d9458_T_Types_tag<Int> Int)
(declare-const uint16_Types<Types> Types)
(declare-const SCMPParameterProblem_840d9458_T_Types<Types> Types)
(declare-const Y$49c4c25f_d3743b4f__Types_tag<Int> Int)
(declare-const Y$b28ae4_ac87dd1d__Types_tag<Int> Int)
(declare-const Path_4cddb96f_T_Types<Types> Types)
(declare-const SCMPCode_840d9458_T_Types<Types> Types)
(declare-const empty_interface_Types<Types> Types)
(declare-const SCMPExternalInterfaceDown_840d9458_T_Types_tag<Int> Int)
(declare-const nilDecodeFeedback_b41831d7_T_Types<Types> Types)
(declare-const string_Types<Types> Types)
(declare-const Y$68d3cee9_b41831d7__Types<Types> Types)
(declare-const LayerType_b41831d7_T_Types_tag<Int> Int)
(declare-const Y$68d3cee9_b41831d7__Types_tag<Int> Int)
(declare-const AddrType_840d9458_T_Types<Types> Types)
(declare-const Payload_b41831d7_T_Types_tag<Int> Int)
(declare-const AddrType_840d9458_T_Types_tag<Int> Int)
(declare-const SCION_840d9458_T_Types<Types> Types)
(declare-const HopByHopExtn_840d9458_T_Types<Types> Types)
(declare-const SCMPType_840d9458_T_Types_tag<Int> Int)
(declare-const IPAddr_5c610647_T_Types_tag<Int> Int)
(declare-const uint16_Types_tag<Int> Int)
(declare-const L4ProtocolType_840d9458_T_Types_tag<Int> Int)
(declare-const nilDecodeFeedback_b41831d7_T_Types_tag<Int> Int)
(declare-fun comparableType_Types<Bool> (Types) Bool)
(declare-const Path_c6e60a1d_T_Types<Types> Types)
(declare-const Y$35202e5_cd675838__Types<Types> Types)
(declare-const byte_Types_tag<Int> Int)
(declare-const SCMPTraceroute_840d9458_T_Types<Types> Types)
(declare-const Y$6914870a_b41831d7__Types<Types> Types)
(declare-const SCMPExternalInterfaceDown_840d9458_T_Types<Types> Types)
(declare-const HostSVC_cd675838_T_Types<Types> Types)
(declare-const Raw_daeaf66a_T_Types_tag<Int> Int)
(declare-fun pointer_Types<Types> (Types) Types)
(declare-const HostNone_cd675838_T_Types_tag<Int> Int)
(declare-const IA_cd675838_T_Types<Types> Types)
(declare-const Y$17800ab4_b41831d7__Types_tag<Int> Int)
(declare-const pointer_Types_tag<Int> Int)
(declare-const AS_cd675838_T_Types<Types> Types)
(declare-const empty_interface_Types_tag<Int> Int)
(declare-const Y$febd64e7_b41831d7__Types<Types> Types)
(declare-const EndToEndExtn_840d9458_T_Types<Types> Types)
(declare-const Y$8f734176_14a7fb6d__Types_tag<Int> Int)
(declare-const Path_4cddb96f_T_Types_tag<Int> Int)
(declare-const littleEndian_72f0d887_T_Types_tag<Int> Int)
(declare-const HostIPv4_cd675838_T_Types<Types> Types)
(declare-const SCMPEcho_840d9458_T_Types_tag<Int> Int)
(declare-const SCMPTypeCode_840d9458_T_Types<Types> Types)
(declare-const littleEndian_72f0d887_T_Types<Types> Types)
(declare-fun behavioral_subtype_Types<Bool> (Types Types) Bool)
(declare-const Y$6914870a_b41831d7__Types_tag<Int> Int)
(declare-const rawPath_a6ceb89d_T_Types_tag<Int> Int)
(declare-const HopByHopExtnSkipper_840d9458_T_Types_tag<Int> Int)
(declare-const SCMPDestinationUnreachable_840d9458_T_Types<Types> Types)
(declare-const Y$17800ab4_b41831d7__Types<Types> Types)
(declare-const rawPath_a6ceb89d_T_Types<Types> Types)
(declare-const Y$8f734176_14a7fb6d__Types<Types> Types)
(declare-const Path_c385169_T_Types_tag<Int> Int)
(declare-const EndToEndExtn_840d9458_T_Types_tag<Int> Int)
(declare-const SCMP_840d9458_T_Types<Types> Types)
(declare-const SCMPEcho_840d9458_T_Types<Types> Types)
(declare-const Y$3191b69e_b41831d7__Types<Types> Types)
(declare-const Y$49c4c25f_d3743b4f__Types<Types> Types)
(declare-const UDPAddr_5c610647_T_Types<Types> Types)
(declare-const int_Types<Types> Types)
(declare-const Decoded_daeaf66a_T_Types<Types> Types)
(declare-const HostSVC_cd675838_T_Types_tag<Int> Int)
(declare-const bigEndian_72f0d887_T_Types_tag<Int> Int)
(declare-const SCMPParameterProblem_840d9458_T_Types_tag<Int> Int)
(declare-const HopByHopExtn_840d9458_T_Types_tag<Int> Int)
(declare-const Y$558431e4_a6ceb89d__Types<Types> Types)
(declare-const Y$c2e55be_72f0d887__Types_tag<Int> Int)
(declare-fun box_Poly<Ref> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct0) $Ref)
(declare-fun unbox_Poly<ShStruct0> ($Ref) ShStruct0)
(declare-fun box_Poly<Ref> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Ref)
(declare-fun unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> ($Ref) ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(declare-fun sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(declare-fun scap<Int> (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Int)
(declare-fun soffset<Int> (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Int)
(declare-fun smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> Int Int Int) Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(declare-fun slen<Int> (Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Int)
(declare-fun box_Poly<Ref> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Ref)
(declare-fun unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($Ref) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-const stringLit61646472<Int> Int)
(declare-const stringLit65326520657874656e73696f6e206d757374206e6f7420636f6d65206265666f7265207468652048424820657874656e73696f6e<Int> Int)
(declare-const stringLit5468757273646179<Int> Int)
(declare-const stringLit5765646e6573646179<Int> Int)
(declare-const stringLit556e6b6e6f776e4e65787448647254797065<Int> Int)
(declare-const stringLit496e76616c6964536f7572636541646472657373<Int> Int)
(declare-const stringLit45787465726e616c496e74657266616365446f776e<Int> Int)
(declare-const stringLit736f757263652061646472657373206d697373696e67<Int> Int)
(declare-const stringLit756e737570706f72746564206164647265737320747970652f6c656e67746820636f6d62696e6174696f6e<Int> Int)
(declare-const stringLit556e6b6e6f776e486f704279486f704f7074696f6e<Int> Int)
(declare-const stringLit6970<Int> Int)
(declare-const stringLit7061636b65742069732073686f72746572207468616e2074686520636f6d6d6f6e20686561646572206c656e677468<Int> Int)
(declare-const stringLit44657374696e6174696f6e556e726561636861626c65<Int> Int)
(declare-const stringLit62756666657220746f6f2073686f7274<Int> Int)
(declare-const stringLit5472616365726f7574655265706c79<Int> Int)
(declare-const stringLit696e76616c696420657874656e73696f6e206865616465722e20<Int> Int)
(declare-const stringLit496e76616c6964457874656e73696f6e486561646572<Int> Int)
(declare-const stringLit5343494f4e20686561646572206d697373696e67<Int> Int)
(declare-const stringLit616464724864724c656e<Int> Int)
(declare-const stringLit6d696e696e756d5f6c65677468<Int> Int)
(declare-const stringLit4e6f6e65<Int> Int)
(declare-const stringLit4f63746f626572<Int> Int)
(declare-const stringLit5061746845787069726564<Int> Int)
(declare-const stringLit4563686f5265706c79<Int> Int)
(declare-const stringLit6864724279746573<Int> Int)
(declare-const stringLit496e76616c6964486f704669656c644d4143<Int> Int)
(declare-const stringLit65326520657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> Int)
(declare-const stringLit496e76616c69645365676d656e744368616e6765<Int> Int)
(declare-const stringLit62696e6172792e4c6974746c65456e6469616e<Int> Int)
(declare-const stringLit5061636b6574546f6f426967<Int> Int)
(declare-const stringLit424644<Int> Int)
(declare-const stringLit696e76616c696420657874656e73696f6e206865616465722e204c656e677468202564206c657373207468616e2032<Int> Int)
(declare-const stringLit556e6b6e6f776e486f704669656c64456772657373496e74657266616365<Int> Int)
(declare-const stringLit496e76616c69645061636b657453697a65<Int> Int)
(declare-const stringLit5472616365726f75746552657175657374<Int> Int)
(declare-const stringLit556e6b6e6f776e5061746854797065<Int> Int)
(declare-const stringLit257328257329<Int> Int)
(declare-const stringLit696e76616c6964206865616465722c206e6567617469766520706174684c656e<Int> Int)
(declare-fun strLen<Int> (Int) Int)
(declare-fun strConcat<Int> (Int Int) Int)
(declare-const stringLit456e6432456e64<Int> Int)
(declare-const stringLit4c6974746c65456e6469616e<Int> Int)
(declare-const stringLit4d6179<Int> Int)
(declare-const stringLit486f704279486f70<Int> Int)
(declare-const stringLit6d6178<Int> Int)
(declare-const stringLit4a616e75617279<Int> Int)
(declare-const stringLit686561646572206c656e6774682065786365656473206d6178696d756d<Int> Int)
(declare-const stringLit417072696c<Int> Int)
(declare-const stringLit4c656e677468202564206c657373207468616e20737065636966696564206c656e677468202564<Int> Int)
(declare-const stringLit256428256429<Int> Int)
(declare-const stringLit4a756e65<Int> Int)
(declare-const stringLit467269646179<Int> Int)
(declare-const stringLit506172616d6574657250726f626c656d<Int> Int)
(declare-const stringLit63616e206e6f742063616c63756c61746520636865636b73756d20776974686f7574205343494f4e20686561646572<Int> Int)
(declare-const stringLit53657074656d626572<Int> Int)
(declare-const stringLit64657374696e6174696f6e2061646472657373206d697373696e67<Int> Int)
(declare-const stringLit496e7465726e616c436f6e6e6563746976697479446f776e<Int> Int)
(declare-const stringLit68626820657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> Int)
(declare-const stringLit426967456e6469616e<Int> Int)
(declare-const stringLit417567757374<Int> Int)
(declare-const stringLit4665627275617279<Int> Int)
(declare-const stringLit446563656d626572<Int> Int)
(declare-const stringLit5343494f4e20657874656e73696f6e2061637475616c206c656e677468206d757374206265206d756c7469706c65206f662034<Int> Int)
(declare-const stringLit556e6b6e6f776e41646472657373466f726d6174<Int> Int)
(declare-const stringLit496e76616c6964436f6d6d6f6e486561646572<Int> Int)
(declare-const stringLit6c656e<Int> Int)
(declare-const stringLit53756e646179<Int> Int)
(declare-const stringLit556e6b6e6f776e5343494f4e56657273696f6e<Int> Int)
(declare-const stringLit6d696e696d756d<Int> Int)
(declare-const stringLit554e4b4e4f574e2028256429<Int> Int)
(declare-const stringLit4e6f6e4c6f63616c44656c6976657279<Int> Int)
(declare-const stringLit436d644864724c656e<Int> Int)
(declare-const stringLit5361747572646179<Int> Int)
(declare-const stringLit6578706563746564<Int> Int)
(declare-const stringLit686561646572206c656e677468206973206e6f7420616e20696e7465676572206d756c7469706c65206f66206c696e65206c656e677468<Int> Int)
(declare-const stringLit257328436f64653a20256429<Int> Int)
(declare-const stringLit6d696e<Int> Int)
(declare-const stringLit70726f76696465642062756666657220697320746f6f20736d616c6c<Int> Int)
(declare-const stringLit4572726f6e656f75734865616465724669656c64<Int> Int)
(declare-const stringLit466c6f7749445265717569726564<Int> Int)
(declare-const stringLit4d6f6e646179<Int> Int)
(declare-const stringLit4a756c79<Int> Int)
(declare-const stringLit756470<Int> Int)
(declare-const stringLit4563686f52657175657374<Int> Int)
(declare-const stringLit<Int> Int)
(declare-const stringLit756e737570706f727465642061646472657373<Int> Int)
(declare-const stringLit496e76616c696450617468<Int> Int)
(declare-const stringLit54756573646179<Int> Int)
(declare-const stringLit544350<Int> Int)
(declare-const stringLit4e6f76656d626572<Int> Int)
(declare-const stringLit556e6b6e6f776e456e64546f456e644f7074696f6e<Int> Int)
(declare-const stringLit74797065<Int> Int)
(declare-const stringLit496e76616c696441646472657373486561646572<Int> Int)
(declare-const stringLit2573282564295c6e5061796c6f61643a202573<Int> Int)
(declare-const stringLit53434d50<Int> Int)
(declare-const stringLit556e6b6e6f776e486f704669656c64496e6772657373496e74657266616365<Int> Int)
(declare-const stringLit4d61726368<Int> Int)
(declare-const stringLit4f7074696f6e206e6f7420666f756e64<Int> Int)
(declare-const stringLit53434d50206c61796572206c656e677468206973206c657373207468656e2034206279746573<Int> Int)
(declare-const stringLit61637475616c<Int> Int)
(declare-const stringLit62696e6172792e426967456e6469616e<Int> Int)
(declare-const stringLit554450<Int> Int)
(declare-const stringLit496e76616c696444657374696e6174696f6e41646472657373<Int> Int)
(declare-fun ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShArraysecond<Int> (ShStruct4<Ref~_Ref~_Ref~_Ref>) Int)
(declare-fun ShArrayfirst<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (ShStruct4<Ref~_Ref~_Ref~_Ref>) ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(declare-fun ShArraylen<Int> (ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) Int)
(declare-fun ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev0of1<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(declare-fun ShStructget2of3<Ref> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructget0of3<ShStruct2<Ref~_Ref>> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructget1of3<Ref> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun scap<Int> (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Int)
(declare-fun soffset<Int> (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Int)
(declare-fun smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Int Int Int) Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun slen<Int> (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Int)
(declare-fun ShStructget1of2<Ref> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructrev1of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun box_Poly<Ref> (Int) $Ref)
(declare-fun unbox_Poly<Int> ($Ref) Int)
(declare-fun eq<Bool> (ShStruct3<Ref~_Ref~_Ref> ShStruct3<Ref~_Ref~_Ref>) Bool)
(declare-fun ShStructrev1of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget0of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget2of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget3of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev3of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget0of1<ShStruct2<Ref~_Ref>> (ShStruct1<ShStruct2<Ref~_Ref>>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev0of1<ShStruct1<ShStruct2<Ref~_Ref>>> (ShStruct2<Ref~_Ref>) ShStruct1<ShStruct2<Ref~_Ref>>)
(declare-fun box_Poly<Ref> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructget1of2<Ref> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev1of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(declare-fun eq<Bool> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) Bool)
(declare-fun ShStructget2of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun ShStructget0of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget1of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun eq<Bool> (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) Bool)
; /field_value_functions_declarations.smt2 [PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$: ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]
(declare-fun $FVF.domain_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> $Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun $FVF.after_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$> $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> $Ref) Bool)
(declare-fun $FVF.perm_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(declare-fun $FVF.domain_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> $Ref) Slice<Ref>)
(declare-fun $FVF.after_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ (Slice<Ref> $Ref) Bool)
(declare-fun $FVF.perm_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$: ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]
(declare-fun $FVF.domain_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> $Ref) ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)
(declare-fun $FVF.after_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$> $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ (ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> $Ref) Bool)
(declare-fun $FVF.perm_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(declare-fun $FVF.domain_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> $Ref) Slice<Ref>)
(declare-fun $FVF.after_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$> $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ (Slice<Ref> $Ref) Bool)
(declare-fun $FVF.perm_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Intbyte$$$$_E_$$$: Int]
(declare-fun $FVF.domain_Intbyte$$$$_E_$$$ ($FVF<Intbyte$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Intbyte$$$$_E_$$$ ($FVF<Intbyte$$$$_E_$$$> $Ref) Int)
(declare-fun $FVF.after_Intbyte$$$$_E_$$$ ($FVF<Intbyte$$$$_E_$$$> $FVF<Intbyte$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Intbyte$$$$_E_$$$ (Int $Ref) Bool)
(declare-fun $FVF.perm_Intbyte$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Intbyte$$$$_E_$$$ $FVF<Intbyte$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Bool$$$$_E_$$$: Bool]
(declare-fun $FVF.domain_Bool$$$$_E_$$$ ($FVF<Bool$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Bool$$$$_E_$$$ ($FVF<Bool$$$$_E_$$$> $Ref) Bool)
(declare-fun $FVF.after_Bool$$$$_E_$$$ ($FVF<Bool$$$$_E_$$$> $FVF<Bool$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Bool$$$$_E_$$$ (Bool $Ref) Bool)
(declare-fun $FVF.perm_Bool$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Bool$$$$_E_$$$ $FVF<Bool$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Intuint16$$$$_E_$$$: Int]
(declare-fun $FVF.domain_Intuint16$$$$_E_$$$ ($FVF<Intuint16$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Intuint16$$$$_E_$$$ ($FVF<Intuint16$$$$_E_$$$> $Ref) Int)
(declare-fun $FVF.after_Intuint16$$$$_E_$$$ ($FVF<Intuint16$$$$_E_$$$> $FVF<Intuint16$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Intuint16$$$$_E_$$$ (Int $Ref) Bool)
(declare-fun $FVF.perm_Intuint16$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Intuint16$$$$_E_$$$ $FVF<Intuint16$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Intuint32$$$$_E_$$$: Int]
(declare-fun $FVF.domain_Intuint32$$$$_E_$$$ ($FVF<Intuint32$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Intuint32$$$$_E_$$$ ($FVF<Intuint32$$$$_E_$$$> $Ref) Int)
(declare-fun $FVF.after_Intuint32$$$$_E_$$$ ($FVF<Intuint32$$$$_E_$$$> $FVF<Intuint32$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Intuint32$$$$_E_$$$ (Int $Ref) Bool)
(declare-fun $FVF.perm_Intuint32$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Intuint32$$$$_E_$$$ $FVF<Intuint32$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$: Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]
(declare-fun $FVF.domain_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ($FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ($FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> $Ref) Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun $FVF.after_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ($FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$> $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ (Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> $Ref) Bool)
(declare-fun $FVF.perm_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Interfaceempty_interface$$$$_E_$$$: Tuple2[Ref, Types]]
(declare-fun $FVF.domain_Interfaceempty_interface$$$$_E_$$$ ($FVF<Interfaceempty_interface$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ($FVF<Interfaceempty_interface$$$$_E_$$$> $Ref) Tuple2<Ref~_Types>)
(declare-fun $FVF.after_Interfaceempty_interface$$$$_E_$$$ ($FVF<Interfaceempty_interface$$$$_E_$$$> $FVF<Interfaceempty_interface$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Interfaceempty_interface$$$$_E_$$$ (Tuple2<Ref~_Types> $Ref) Bool)
(declare-fun $FVF.perm_Interfaceempty_interface$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Interfaceempty_interface$$$$_E_$$$ $FVF<Interfaceempty_interface$$$$_E_$$$>)
; /predicate_snap_functions_declarations.smt2 [Mem_840d9458_PMEndToEndOption: Snap]
(declare-fun $PSF.domain_Mem_840d9458_PMEndToEndOption ($PSF<Mem_840d9458_PMEndToEndOption>) Set<$Snap>)
(declare-fun $PSF.lookup_Mem_840d9458_PMEndToEndOption ($PSF<Mem_840d9458_PMEndToEndOption> $Snap) $Snap)
(declare-fun $PSF.after_Mem_840d9458_PMEndToEndOption ($PSF<Mem_840d9458_PMEndToEndOption> $PSF<Mem_840d9458_PMEndToEndOption>) Bool)
(declare-fun $PSF.loc_Mem_840d9458_PMEndToEndOption ($Snap $Snap) Bool)
(declare-fun $PSF.perm_Mem_840d9458_PMEndToEndOption ($PPM $Snap) $Perm)
(declare-const $psfTOP_Mem_840d9458_PMEndToEndOption $PSF<Mem_840d9458_PMEndToEndOption>)
; /predicate_snap_functions_declarations.smt2 [Mem_840d9458_PMHopByHopOption: Snap]
(declare-fun $PSF.domain_Mem_840d9458_PMHopByHopOption ($PSF<Mem_840d9458_PMHopByHopOption>) Set<$Snap>)
(declare-fun $PSF.lookup_Mem_840d9458_PMHopByHopOption ($PSF<Mem_840d9458_PMHopByHopOption> $Snap) $Snap)
(declare-fun $PSF.after_Mem_840d9458_PMHopByHopOption ($PSF<Mem_840d9458_PMHopByHopOption> $PSF<Mem_840d9458_PMHopByHopOption>) Bool)
(declare-fun $PSF.loc_Mem_840d9458_PMHopByHopOption ($Snap $Snap) Bool)
(declare-fun $PSF.perm_Mem_840d9458_PMHopByHopOption ($PPM $Snap) $Perm)
(declare-const $psfTOP_Mem_840d9458_PMHopByHopOption $PSF<Mem_840d9458_PMHopByHopOption>)
; /predicate_snap_functions_declarations.smt2 [Mem_a6ceb89d_PMHopField: Snap]
(declare-fun $PSF.domain_Mem_a6ceb89d_PMHopField ($PSF<Mem_a6ceb89d_PMHopField>) Set<$Snap>)
(declare-fun $PSF.lookup_Mem_a6ceb89d_PMHopField ($PSF<Mem_a6ceb89d_PMHopField> $Snap) $Snap)
(declare-fun $PSF.after_Mem_a6ceb89d_PMHopField ($PSF<Mem_a6ceb89d_PMHopField> $PSF<Mem_a6ceb89d_PMHopField>) Bool)
(declare-fun $PSF.loc_Mem_a6ceb89d_PMHopField ($Snap $Snap) Bool)
(declare-fun $PSF.perm_Mem_a6ceb89d_PMHopField ($PPM $Snap) $Perm)
(declare-const $psfTOP_Mem_a6ceb89d_PMHopField $PSF<Mem_a6ceb89d_PMHopField>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun arrayNil_3_Intuint8$$$_S_$$$ ($Snap) ShArray<Ref>)
(declare-fun arrayNil_3_Intuint8$$$_S_$$$%limited ($Snap) ShArray<Ref>)
(declare-const arrayNil_3_Intuint8$$$_S_$$$%stateless Bool)
(declare-fun arrayNil_3_Intuint8$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref ($Snap Emb_3_Intuint8$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited ($Snap Emb_3_Intuint8$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%stateless (Emb_3_Intuint8$$$_S_$$$) Bool)
(declare-fun unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition ($Snap Emb_3_Intuint8$$$_S_$$$) Bool)
(declare-fun box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref ($Snap ShArray<Ref>) Emb_3_Intuint8$$$_S_$$$)
(declare-fun box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited ($Snap ShArray<Ref>) Emb_3_Intuint8$$$_S_$$$)
(declare-fun box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%stateless (ShArray<Ref>) Bool)
(declare-fun box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition ($Snap ShArray<Ref>) Bool)
(declare-fun shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$ ($Snap) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited ($Snap) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-const shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$ ($Snap) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited ($Snap) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-const shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun Len_daeaf66a_PMBase ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun Len_daeaf66a_PMBase%limited ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun Len_daeaf66a_PMBase%stateless (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun Len_daeaf66a_PMBase%precondition ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ ($Snap) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited ($Snap) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-const shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun ssliceFromSlice_Ref ($Snap Slice<Ref> Int Int) Slice<Ref>)
(declare-fun ssliceFromSlice_Ref%limited ($Snap Slice<Ref> Int Int) Slice<Ref>)
(declare-fun ssliceFromSlice_Ref%stateless (Slice<Ref> Int Int) Bool)
(declare-fun ssliceFromSlice_Ref%precondition ($Snap Slice<Ref> Int Int) Bool)
(declare-fun Len_daeaf66a_PMRaw ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Int)
(declare-fun Len_daeaf66a_PMRaw%limited ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Int)
(declare-fun Len_daeaf66a_PMRaw%stateless (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Bool)
(declare-fun Len_daeaf66a_PMRaw%precondition ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Bool)
(declare-fun hasScionPath_c6e60a1d_PMPath ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun hasScionPath_c6e60a1d_PMPath%limited ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun hasScionPath_c6e60a1d_PMPath%stateless (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun hasScionPath_c6e60a1d_PMPath%precondition ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun intBitwiseAnd ($Snap Int Int) Int)
(declare-fun intBitwiseAnd%limited ($Snap Int Int) Int)
(declare-fun intBitwiseAnd%stateless (Int Int) Bool)
(declare-fun intBitwiseAnd%precondition ($Snap Int Int) Bool)
(declare-fun Len_a6ceb89d_PMrawPath ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_PMrawPath%limited ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_PMrawPath%stateless (ShStruct2<Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_a6ceb89d_PMrawPath%precondition ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_c6e60a1d_PMPath ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_c6e60a1d_PMPath%limited ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_c6e60a1d_PMPath%stateless (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_c6e60a1d_PMPath%precondition ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_c385169_PMPath ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Int)
(declare-fun Len_c385169_PMPath%limited ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Int)
(declare-fun Len_c385169_PMPath%stateless (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Bool)
(declare-fun Len_c385169_PMPath%precondition ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Bool)
(declare-fun Len_daeaf66a_PMDecoded ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_daeaf66a_PMDecoded%limited ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun Len_daeaf66a_PMDecoded%stateless (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_daeaf66a_PMDecoded%precondition ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Len_4cddb96f_MPath ($Snap Tuple0 Slice<Ref>) Int)
(declare-fun Len_4cddb96f_MPath%limited ($Snap Tuple0 Slice<Ref>) Int)
(declare-fun Len_4cddb96f_MPath%stateless (Tuple0 Slice<Ref>) Bool)
(declare-fun Len_4cddb96f_MPath%precondition ($Snap Tuple0 Slice<Ref>) Bool)
(declare-fun arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ ($Snap) ShArray<Ref>)
(declare-fun arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited ($Snap) ShArray<Ref>)
(declare-const arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%stateless Bool)
(declare-fun arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun BitAnd3_ca158f5e_F ($Snap Int) Int)
(declare-fun BitAnd3_ca158f5e_F%limited ($Snap Int) Int)
(declare-fun BitAnd3_ca158f5e_F%stateless (Int) Bool)
(declare-fun BitAnd3_ca158f5e_F%precondition ($Snap Int) Bool)
(declare-fun PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (ShStruct2<Ref~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap ShStruct2<Ref~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Int)
(declare-fun PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Int)
(declare-fun PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Bool)
(declare-fun PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> Slice<Ref>) Bool)
(declare-fun PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap Tuple0 Slice<Ref>) Int)
(declare-fun DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited ($Snap Tuple0 Slice<Ref>) Int)
(declare-fun DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless (Tuple0 Slice<Ref>) Bool)
(declare-fun DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap Tuple0 Slice<Ref>) Bool)
(declare-fun unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref ($Snap Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited ($Snap Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%stateless (Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$) Bool)
(declare-fun unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition ($Snap Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$) Bool)
(declare-fun box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref ($Snap ShArray<Ref>) Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)
(declare-fun box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited ($Snap ShArray<Ref>) Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)
(declare-fun box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%stateless (ShArray<Ref>) Bool)
(declare-fun box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition ($Snap ShArray<Ref>) Bool)
(declare-fun arrayNil_1_Intbyte$$$_S_$$$ ($Snap) ShArray<Ref>)
(declare-fun arrayNil_1_Intbyte$$$_S_$$$%limited ($Snap) ShArray<Ref>)
(declare-const arrayNil_1_Intbyte$$$_S_$$$%stateless Bool)
(declare-fun arrayNil_1_Intbyte$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun Length_840d9458_MAddrType ($Snap Int) Int)
(declare-fun Length_840d9458_MAddrType%limited ($Snap Int) Int)
(declare-fun Length_840d9458_MAddrType%stateless (Int) Bool)
(declare-fun Length_840d9458_MAddrType%precondition ($Snap Int) Bool)
(declare-fun Has3Bits_840d9458_MAddrType ($Snap Int) Bool)
(declare-fun Has3Bits_840d9458_MAddrType%limited ($Snap Int) Bool)
(declare-fun Has3Bits_840d9458_MAddrType%stateless (Int) Bool)
(declare-fun Has3Bits_840d9458_MAddrType%precondition ($Snap Int) Bool)
(declare-fun assertArg2_Tuple0 ($Snap Bool Tuple0) Tuple0)
(declare-fun assertArg2_Tuple0%limited ($Snap Bool Tuple0) Tuple0)
(declare-fun assertArg2_Tuple0%stateless (Bool Tuple0) Bool)
(declare-fun assertArg2_Tuple0%precondition ($Snap Bool Tuple0) Bool)
(declare-fun assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef ($Snap Bool ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%limited ($Snap Bool ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%stateless (Bool ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) Bool)
(declare-fun assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%precondition ($Snap Bool ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) Bool)
(declare-fun assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ ($Snap Bool ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%limited ($Snap Bool ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%stateless (Bool ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Bool)
(declare-fun assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%precondition ($Snap Bool ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Bool)
(declare-fun assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef ($Snap Bool ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%limited ($Snap Bool ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%stateless (Bool ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) Bool)
(declare-fun assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%precondition ($Snap Bool ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) Bool)
(declare-fun assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef ($Snap Bool ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%limited ($Snap Bool ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%stateless (Bool ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) Bool)
(declare-fun assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%precondition ($Snap Bool ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) Bool)
(declare-fun assertArg2_ShStruct2_RefRef ($Snap Bool ShStruct2<Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun assertArg2_ShStruct2_RefRef%limited ($Snap Bool ShStruct2<Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun assertArg2_ShStruct2_RefRef%stateless (Bool ShStruct2<Ref~_Ref>) Bool)
(declare-fun assertArg2_ShStruct2_RefRef%precondition ($Snap Bool ShStruct2<Ref~_Ref>) Bool)
(declare-fun typeOfInterface_Y$558431e4_a6ceb89d_ ($Snap Tuple2<Ref~_Types>) Types)
(declare-fun typeOfInterface_Y$558431e4_a6ceb89d_%limited ($Snap Tuple2<Ref~_Types>) Types)
(declare-fun typeOfInterface_Y$558431e4_a6ceb89d_%stateless (Tuple2<Ref~_Types>) Bool)
(declare-fun typeOfInterface_Y$558431e4_a6ceb89d_%precondition ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback ($Snap Tuple2<Ref~_Types> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited ($Snap Tuple2<Ref~_Types> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%stateless (Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun arrayNil_4_Interfaceempty_interface$$$_S_$$$ ($Snap) ShArray<Ref>)
(declare-fun arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited ($Snap) ShArray<Ref>)
(declare-const arrayNil_4_Interfaceempty_interface$$$_S_$$$%stateless Bool)
(declare-fun arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun sadd ($Snap Int Int) Int)
(declare-fun sadd%limited ($Snap Int Int) Int)
(declare-fun sadd%stateless (Int Int) Bool)
(declare-fun sadd%precondition ($Snap Int Int) Bool)
(declare-fun sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ ($Snap) Slice<Ref>)
(declare-fun sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited ($Snap) Slice<Ref>)
(declare-const sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%stateless Bool)
(declare-fun sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref ($Snap ShArray<Ref>) Emb_1_Intbyte$$$_S_$$$)
(declare-fun box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited ($Snap ShArray<Ref>) Emb_1_Intbyte$$$_S_$$$)
(declare-fun box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%stateless (ShArray<Ref>) Bool)
(declare-fun box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition ($Snap ShArray<Ref>) Bool)
(declare-fun unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref ($Snap Emb_1_Intbyte$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited ($Snap Emb_1_Intbyte$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%stateless (Emb_1_Intbyte$$$_S_$$$) Bool)
(declare-fun unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition ($Snap Emb_1_Intbyte$$$_S_$$$) Bool)
(declare-fun shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ ($Snap) ShStruct2<Ref~_Ref>)
(declare-fun shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited ($Snap) ShStruct2<Ref~_Ref>)
(declare-const shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun AddrHdrLenNoAbstractionLeak_840d9458_PMSCION ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%stateless (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Int)
(declare-fun addrHdrLenAbstractionLeak_840d9458_PMSCION%limited ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Int)
(declare-fun addrHdrLenAbstractionLeak_840d9458_PMSCION%stateless (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%limited ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%stateless (Tuple2<Ref~_Types>) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_ ($Snap Tuple2<Ref~_Types> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited ($Snap Tuple2<Ref~_Types> Slice<Ref>) Int)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_%stateless (Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes ($Snap Seq<Tuple2<Ref~_Types>>) Emb_4_Interfaceempty_interface$$$$_E_$$$)
(declare-fun box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited ($Snap Seq<Tuple2<Ref~_Types>>) Emb_4_Interfaceempty_interface$$$$_E_$$$)
(declare-fun box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless (Seq<Tuple2<Ref~_Types>>) Bool)
(declare-fun box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition ($Snap Seq<Tuple2<Ref~_Types>>) Bool)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes ($Snap Emb_4_Interfaceempty_interface$$$$_E_$$$) Seq<Tuple2<Ref~_Types>>)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited ($Snap Emb_4_Interfaceempty_interface$$$$_E_$$$) Seq<Tuple2<Ref~_Types>>)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless (Emb_4_Interfaceempty_interface$$$$_E_$$$) Bool)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition ($Snap Emb_4_Interfaceempty_interface$$$$_E_$$$) Bool)
(declare-fun box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref ($Snap ShArray<Ref>) Emb_4_Interfaceempty_interface$$$_S_$$$)
(declare-fun box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited ($Snap ShArray<Ref>) Emb_4_Interfaceempty_interface$$$_S_$$$)
(declare-fun box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless (ShArray<Ref>) Bool)
(declare-fun box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition ($Snap ShArray<Ref>) Bool)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref ($Snap Emb_4_Interfaceempty_interface$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited ($Snap Emb_4_Interfaceempty_interface$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless (Emb_4_Interfaceempty_interface$$$_S_$$$) Bool)
(declare-fun unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition ($Snap Emb_4_Interfaceempty_interface$$$_S_$$$) Bool)
(declare-fun getNumINF_daeaf66a_PMBase ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun getNumINF_daeaf66a_PMBase%limited ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun getNumINF_daeaf66a_PMBase%stateless (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun getNumINF_daeaf66a_PMBase%precondition ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun getPathPure_840d9458_PMSCION ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Int) Tuple2<Ref~_Types>)
(declare-fun getPathPure_840d9458_PMSCION%limited ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Int) Tuple2<Ref~_Types>)
(declare-fun getPathPure_840d9458_PMSCION%stateless (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Int) Bool)
(declare-fun getPathPure_840d9458_PMSCION%precondition ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Int) Bool)
(declare-fun pathPoolInitialized_840d9458_PMSCION ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun pathPoolInitialized_840d9458_PMSCION%limited ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun pathPoolInitialized_840d9458_PMSCION%stateless (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun pathPoolInitialized_840d9458_PMSCION%precondition ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun sliceDefault_Intbyte$$$_S_$$$ ($Snap) Slice<Ref>)
(declare-fun sliceDefault_Intbyte$$$_S_$$$%limited ($Snap) Slice<Ref>)
(declare-const sliceDefault_Intbyte$$$_S_$$$%stateless Bool)
(declare-fun sliceDefault_Intbyte$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun getNumHops_daeaf66a_PMBase ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun getNumHops_daeaf66a_PMBase%limited ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Int)
(declare-fun getNumHops_daeaf66a_PMBase%stateless (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun getNumHops_daeaf66a_PMBase%precondition ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun Uint64_72f0d887_MbigEndian ($Snap Int Slice<Ref>) Int)
(declare-fun Uint64_72f0d887_MbigEndian%limited ($Snap Int Slice<Ref>) Int)
(declare-fun Uint64_72f0d887_MbigEndian%stateless (Int Slice<Ref>) Bool)
(declare-fun Uint64_72f0d887_MbigEndian%precondition ($Snap Int Slice<Ref>) Bool)
(declare-fun shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ ($Snap) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited ($Snap) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun ssliceFromArray_Ref ($Snap ShArray<Ref> Int Int) Slice<Ref>)
(declare-fun ssliceFromArray_Ref%limited ($Snap ShArray<Ref> Int Int) Slice<Ref>)
(declare-fun ssliceFromArray_Ref%stateless (ShArray<Ref> Int Int) Bool)
(declare-fun ssliceFromArray_Ref%precondition ($Snap ShArray<Ref> Int Int) Bool)
(declare-fun AddrHdrLen_840d9458_PMSCION ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref> Bool) Int)
(declare-fun AddrHdrLen_840d9458_PMSCION%limited ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref> Bool) Int)
(declare-fun AddrHdrLen_840d9458_PMSCION%stateless (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref> Bool) Bool)
(declare-fun AddrHdrLen_840d9458_PMSCION%precondition ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref> Bool) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun dynamic_pred_0%trigger ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun Mem_daeaf66a_PMBase%trigger ($Snap ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-fun HeaderMem_840d9458_PMSCION%trigger ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun AbsSlice_Bytes_e630ae22_F%trigger ($Snap Slice<Ref> Int Int) Bool)
(declare-fun PathPoolMemExceptOne_840d9458_F%trigger ($Snap Slice<Ref> Tuple2<Ref~_Types> Int) Bool)
(declare-fun dynamic_pred_6%trigger ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun dynamic_pred_0_unknown%trigger ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun ChecksumMem_840d9458_PMSCION%trigger ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun Mem_840d9458_PMHopByHopOption%trigger ($Snap ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> Int) Bool)
(declare-fun Mem_840d9458_PMextnBase%trigger ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) Bool)
(declare-fun Mem_a6ceb89d_PMHopField%trigger ($Snap ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Bool)
(declare-fun Mem_840d9458_PMEndToEndOption%trigger ($Snap ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$> Int) Bool)
(declare-fun PathPoolMem_840d9458_F%trigger ($Snap Slice<Ref> Tuple2<Ref~_Types>) Bool)
(declare-fun ErrorMem_a4af0e5e_SY$c04328b0_a4af0e5e_%trigger ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun Mem_840d9458_PMBaseLayer%trigger ($Snap ShStruct2<Ref~_Ref> Slice<Ref> Int) Bool)
(declare-fun dynamic_pred_6_unknown%trigger ($Snap Tuple2<Ref~_Types> Slice<Ref>) Bool)
(declare-fun dynamic_pred_2%trigger ($Snap Tuple2<Ref~_Types>) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct Y$17800ab4_b41831d7__Types_tag<Int> stringLit556e6b6e6f776e4e65787448647254797065<Int> stringLit6c656e<Int> stringLit496e76616c696441646472657373486561646572<Int> stringLit64657374696e6174696f6e2061646472657373206d697373696e67<Int> stringLit68626820657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> stringLit496e76616c696450617468<Int> HopByHopExtn_840d9458_T_Types_tag<Int> stringLit4665627275617279<Int> stringLit5361747572646179<Int> Y$9c78df5f_b41831d7__Types_tag<Int> stringLit65326520657874656e73696f6e206d757374206e6f7420636f6d65206265666f7265207468652048424820657874656e73696f6e<Int> nil_Types_tag<Int> stringLit61646472<Int> stringLit496e76616c69645061636b657453697a65<Int> stringLit456e6432456e64<Int> stringLit257328436f64653a20256429<Int> stringLit4563686f5265706c79<Int> L4ProtocolType_840d9458_T_Types_tag<Int> stringLit6864724279746573<Int> stringLit5061636b6574546f6f426967<Int> Raw_daeaf66a_T_Types_tag<Int> stringLit556e6b6e6f776e456e64546f456e644f7074696f6e<Int> stringLit496e76616c696444657374696e6174696f6e41646472657373<Int> stringLit696e76616c696420657874656e73696f6e206865616465722e20<Int> Payload_b41831d7_T_Types_tag<Int> stringLit53657074656d626572<Int> Path_c385169_T_Types_tag<Int> AddrType_840d9458_T_Types_tag<Int> stringLit5468757273646179<Int> stringLit756e737570706f727465642061646472657373<Int> stringLit446563656d626572<Int> SCMPInternalConnectivityDown_840d9458_T_Types_tag<Int> AS_cd675838_T_Types_tag<Int> Y$c2e55be_72f0d887__Types_tag<Int> pointer_Types_tag<Int> stringLit6d696e696e756d5f6c65677468<Int> stringLit686561646572206c656e6774682065786365656473206d6178696d756d<Int> SCMP_840d9458_T_Types_tag<Int> stringLit496e7465726e616c436f6e6e6563746976697479446f776e<Int> EndToEndExtnSkipper_840d9458_T_Types_tag<Int> stringLit4a756c79<Int> rawPath_a6ceb89d_T_Types_tag<Int> stringLit256428256429<Int> stringLit4d6179<Int> Y$68d3cee9_b41831d7__Types_tag<Int> SCION_840d9458_T_Types_tag<Int> stringLit4e6f6e4c6f63616c44656c6976657279<Int> IPAddr_5c610647_T_Types_tag<Int> slice_Types_tag<Int> stringLit4f7074696f6e206e6f7420666f756e64<Int> SCMPDestinationUnreachable_840d9458_T_Types_tag<Int> LayerType_b41831d7_T_Types_tag<Int> SCMPPacketTooBig_840d9458_T_Types_tag<Int> SCMPType_840d9458_T_Types_tag<Int> stringLit54756573646179<Int> stringLit467269646179<Int> stringLit53434d50206c61796572206c656e677468206973206c657373207468656e2034206279746573<Int> SCMPTraceroute_840d9458_T_Types_tag<Int> BFD_6416454f_T_Types_tag<Int> stringLit4c6974746c65456e6469616e<Int> stringLit506172616d6574657250726f626c656d<Int> stringLit4e6f76656d626572<Int> stringLit496e76616c6964486f704669656c644d4143<Int> stringLit2573282564295c6e5061796c6f61643a202573<Int> stringLit4d6f6e646179<Int> Y$53a71dc3_5c610647__Types_tag<Int> stringLit44657374696e6174696f6e556e726561636861626c65<Int> stringLit4a616e75617279<Int> stringLit486f704279486f70<Int> stringLit4e6f6e65<Int> SCMPExternalInterfaceDown_840d9458_T_Types_tag<Int> Path_c6e60a1d_T_Types_tag<Int> int_Types_tag<Int> uint16_Types_tag<Int> stringLit53434d50<Int> stringLit417072696c<Int> stringLit6578706563746564<Int> stringLit4f63746f626572<Int> HostSVC_cd675838_T_Types_tag<Int> bigEndian_72f0d887_T_Types_tag<Int> stringLit616464724864724c656e<Int> stringLit556e6b6e6f776e486f704669656c64496e6772657373496e74657266616365<Int> HostNone_cd675838_T_Types_tag<Int> stringLit544350<Int> stringLit6970<Int> stringLit736f757263652061646472657373206d697373696e67<Int> stringLit65326520657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> string_Types_tag<Int> Y$558431e4_a6ceb89d__Types_tag<Int> stringLit496e76616c69645365676d656e744368616e6765<Int> UDPAddr_5c610647_T_Types_tag<Int> Path_4cddb96f_T_Types_tag<Int> stringLit496e76616c6964536f7572636541646472657373<Int> stringLit496e76616c6964436f6d6d6f6e486561646572<Int> empty_interface_Types_tag<Int> Y$3191b69e_b41831d7__Types_tag<Int> integer_Types_tag<Int> stringLit556e6b6e6f776e5061746854797065<Int> Decoded_daeaf66a_T_Types_tag<Int> Y$49c4c25f_d3743b4f__Types_tag<Int> stringLit61637475616c<Int> HopByHopExtnSkipper_840d9458_T_Types_tag<Int> stringLit5061746845787069726564<Int> stringLit4d61726368<Int> Y$9127f611_b41831d7__Types_tag<Int> Y$b28ae4_ac87dd1d__Types_tag<Int> stringLit4a756e65<Int> stringLit5472616365726f75746552657175657374<Int> stringLit257328257329<Int> stringLit63616e206e6f742063616c63756c61746520636865636b73756d20776974686f7574205343494f4e20686561646572<Int> stringLit6d6178<Int> stringLit62696e6172792e4c6974746c65456e6469616e<Int> stringLit6d696e<Int> nilDecodeFeedback_b41831d7_T_Types_tag<Int> stringLit4563686f52657175657374<Int> stringLit<Int> EndToEndExtn_840d9458_T_Types_tag<Int> SCMPCode_840d9458_T_Types_tag<Int> Y$60c7bddc_b41831d7__Types_tag<Int> stringLit4572726f6e656f75734865616465724669656c64<Int> stringLit5472616365726f7574655265706c79<Int> Y$6914870a_b41831d7__Types_tag<Int> stringLit7061636b65742069732073686f72746572207468616e2074686520636f6d6d6f6e20686561646572206c656e677468<Int> stringLit5343494f4e20657874656e73696f6e2061637475616c206c656e677468206d757374206265206d756c7469706c65206f662034<Int> stringLit466c6f7749445265717569726564<Int> stringLit554e4b4e4f574e2028256429<Int> SCMPParameterProblem_840d9458_T_Types_tag<Int> stringLit62756666657220746f6f2073686f7274<Int> stringLit45787465726e616c496e74657266616365446f776e<Int> stringLit556e6b6e6f776e41646472657373466f726d6174<Int> stringLit554450<Int> stringLit53756e646179<Int> stringLit696e76616c696420657874656e73696f6e206865616465722e204c656e677468202564206c657373207468616e2032<Int> stringLit74797065<Int> stringLit686561646572206c656e677468206973206e6f7420616e20696e7465676572206d756c7469706c65206f66206c696e65206c656e677468<Int> stringLit436d644864724c656e<Int> stringLit556e6b6e6f776e486f704669656c64456772657373496e74657266616365<Int> stringLit556e6b6e6f776e5343494f4e56657273696f6e<Int> IA_cd675838_T_Types_tag<Int> stringLit4c656e677468202564206c657373207468616e20737065636966696564206c656e677468202564<Int> stringLit426967456e6469616e<Int> stringLit417567757374<Int> stringLit62696e6172792e426967456e6469616e<Int> stringLit70726f76696465642062756666657220697320746f6f20736d616c6c<Int> stringLit696e76616c6964206865616465722c206e6567617469766520706174684c656e<Int> littleEndian_72f0d887_T_Types_tag<Int> SCMPTypeCode_840d9458_T_Types_tag<Int> byte_Types_tag<Int> stringLit496e76616c6964457874656e73696f6e486561646572<Int> stringLit5343494f4e20686561646572206d697373696e67<Int> stringLit556e6b6e6f776e486f704279486f704f7074696f6e<Int> HostIPv4_cd675838_T_Types_tag<Int> Y$8f734176_14a7fb6d__Types_tag<Int> stringLit6d696e696d756d<Int> SCMPEcho_840d9458_T_Types_tag<Int> stringLit756e737570706f72746564206164647265737320747970652f6c656e67746820636f6d62696e6174696f6e<Int> HostIPv6_cd675838_T_Types_tag<Int> stringLit424644<Int> Y$35202e5_cd675838__Types_tag<Int> Y$febd64e7_b41831d7__Types_tag<Int> stringLit756470<Int> stringLit5765646e6573646179<Int>))
; ////////// Axioms
(assert (forall ((s Seq<Tuple2<Ref~_Types>>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Tuple2<Ref~_Types>>)) 0))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Tuple2<Ref~_Types>>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>)) (!
  (=>
    (and
      (not (= s1 (as Seq_empty  Seq<Tuple2<Ref~_Types>>)))
      (not (= s2 (as Seq_empty  Seq<Tuple2<Ref~_Types>>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_length_over_append|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>)) (!
  (= (Seq_append (as Seq_empty  Seq<Tuple2<Ref~_Types>>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Tuple2<Ref~_Types>>) s))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Tuple2<Ref~_Types>>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Tuple2<Ref~_Types>>)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>) (i Int)) (!
  (=>
    (and
      (not (= s1 (as Seq_empty  Seq<Tuple2<Ref~_Types>>)))
      (not (= s2 (as Seq_empty  Seq<Tuple2<Ref~_Types>>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>) (j Int)) (!
  (ite
    (=> (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (not (Seq_contains (as Seq_empty  Seq<Tuple2<Ref~_Types>>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Tuple2<Ref~_Types>>) e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Tuple2<Ref~_Types>>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int) (e Tuple2<Ref~_Types>)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int) (e Tuple2<Ref~_Types>)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (=>
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>)) (!
  (=> (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Tuple2<Ref~_Types>>) (s2 Seq<Tuple2<Ref~_Types>>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (=> (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int)) (!
  (=>
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int)) (!
  (=>
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>) (n Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>) (n Int)) (!
  (=>
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>) (n Int)) (!
  (=>
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (i Int) (e Tuple2<Ref~_Types>) (n Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>) (n Int)) (!
  (=>
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Tuple2[Ref, Types]]_prog.seq_drop_over_build|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Slice<Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Slice[Ref]]_prog.card_non_negative|)))
(assert (forall ((e Slice<Ref>)) (!
  (not (Set_in e (as Set_empty  Set<Slice<Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<Slice<Ref>>)))
  :qid |$Set[Slice[Ref]]_prog.in_empty_set|)))
(assert (forall ((s Set<Slice<Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Slice<Ref>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Slice<Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Slice[Ref]]_prog.empty_set_cardinality|)))
(assert (forall ((e Slice<Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Slice[Ref]]_prog.in_singleton_set|)))
(assert (forall ((e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Slice[Ref]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Slice<Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Slice[Ref]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Slice[Ref]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Slice<Ref>>) (e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Slice[Ref]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Slice<Ref>>) (e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Slice[Ref]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[Ref]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[Ref]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Slice[Ref]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Slice[Ref]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Slice[Ref]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Slice[Ref]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Slice[Ref]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.in_difference|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Slice[Ref]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Slice<Ref>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Slice[Ref]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Slice<Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[Ref]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[Ref]]_prog.native_equality|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Slice<Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Slice[Ref]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.cardinality_difference|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.card_non_negative|)))
(assert (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (not
    (Set_in e (as Set_empty  Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_empty_set|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (and
    (=
      (= (Set_card s) 0)
      (=
        s
        (as Set_empty  Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.empty_set_cardinality|)))
(assert (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_singleton_set|)))
(assert (forall ((e1 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (e2 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_singleton_set_equality|)))
(assert (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_unionone_same|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e1 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (e2 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_unionone_other|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e1 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (e2 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.in_difference|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.subset_definition|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.equality_definition|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.native_equality|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) (s2 Set<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]]_prog.cardinality_difference|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Tuple2[Ref, Types]]_prog.card_non_negative|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (not (Set_in e (as Set_empty  Set<Tuple2<Ref~_Types>>)))
  :pattern ((Set_in e (as Set_empty  Set<Tuple2<Ref~_Types>>)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_empty_set|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Tuple2<Ref~_Types>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Tuple2<Ref~_Types>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Tuple2[Ref, Types]]_prog.empty_set_cardinality|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_singleton_set|)))
(assert (forall ((e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_difference|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Tuple2<Ref~_Types>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Tuple2<Ref~_Types>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.native_equality|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Tuple2<Ref~_Types>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.cardinality_difference|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.card_non_negative|)))
(assert (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (not
    (Set_in e (as Set_empty  Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_empty_set|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (and
    (=
      (= (Set_card s) 0)
      (=
        s
        (as Set_empty  Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.empty_set_cardinality|)))
(assert (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_singleton_set|)))
(assert (forall ((e1 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (e2 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_singleton_set_equality|)))
(assert (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_unionone_same|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e1 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (e2 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_unionone_other|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e1 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (e2 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.in_difference|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.subset_definition|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.equality_definition|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.native_equality|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) (s2 Set<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[ShStruct2[ShStruct3[ShStruct3[Ref, Ref, Emb_3_Intuint8$$$_S_$$$], Ref, Ref], Ref]]_prog.cardinality_difference|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.card_non_negative|)))
(assert (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (not
    (Set_in e (as Set_empty  Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)))
  :pattern ((Set_in e (as Set_empty  Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_empty_set|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (and
    (=
      (= (Set_card s) 0)
      (=
        s
        (as Set_empty  Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.empty_set_cardinality|)))
(assert (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_singleton_set|)))
(assert (forall ((e1 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (e2 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e1 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (e2 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e1 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (e2 Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.in_difference|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.native_equality|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) (s2 Set<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]_prog.cardinality_difference|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.card_non_negative|)))
(assert (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (not
    (Set_in e (as Set_empty  Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)))
  :pattern ((Set_in e (as Set_empty  Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_empty_set|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (and
    (=
      (= (Set_card s) 0)
      (=
        s
        (as Set_empty  Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.empty_set_cardinality|)))
(assert (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_singleton_set|)))
(assert (forall ((e1 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (e2 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_singleton_set_equality|)))
(assert (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_unionone_same|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e1 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (e2 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_unionone_other|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e1 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (e2 ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.in_difference|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.subset_definition|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.equality_definition|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.native_equality|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>) (s2 Set<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]_prog.cardinality_difference|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.card_non_negative|)))
(assert (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (not (Set_in e (as Set_empty  Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)))
  :pattern ((Set_in e (as Set_empty  Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_empty_set|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (and
    (=
      (= (Set_card s) 0)
      (= s (as Set_empty  Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.empty_set_cardinality|)))
(assert (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_singleton_set|)))
(assert (forall ((e1 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (e2 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e1 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (e2 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e1 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (e2 Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.in_difference|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.native_equality|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>) (s2 Set<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Slice[ShStruct4[Ref, Ref, Ref, Ref]]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((l ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (r ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) (y ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of5<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of5<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of5<Ref> x) (ShStructget1of5<Ref> y))
        (and
          (= (ShStructget2of5<Ref> x) (ShStructget2of5<Ref> y))
          (and
            (= (ShStructget3of5<Ref> x) (ShStructget3of5<Ref> y))
            (= (ShStructget4of5<Ref> x) (ShStructget4of5<Ref> y)))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev4of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget4of5<Ref> x))
    x)
  :pattern ((ShStructget4of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget1of5<Ref> x))
    x)
  :pattern ((ShStructget1of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev3of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget3of5<Ref> x))
    x)
  :pattern ((ShStructget3of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget2of5<Ref> x))
    x)
  :pattern ((ShStructget2of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget0of5<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of5<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((l ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) (r ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (r ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget1of4<Ref> x))
    x)
  :pattern ((ShStructget1of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev3of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget3of4<Ref> x))
    x)
  :pattern ((ShStructget3of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget0of4<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of4<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (y ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of4<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of4<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of4<Ref> x) (ShStructget1of4<Ref> y))
        (and
          (= (ShStructget2of4<Ref> x) (ShStructget2of4<Ref> y))
          (= (ShStructget3of4<Ref> x) (ShStructget3of4<Ref> y))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget2of4<Ref> x))
    x)
  :pattern ((ShStructget2of4<Ref> x))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (y ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of5<Ref> x) (ShStructget0of5<Ref> y))
      (and
        (= (ShStructget1of5<Ref> x) (ShStructget1of5<Ref> y))
        (and
          (= (ShStructget2of5<Ref> x) (ShStructget2of5<Ref> y))
          (and
            (= (ShStructget3of5<Ref> x) (ShStructget3of5<Ref> y))
            (=
              (ShStructget4of5<Emb_2_Intuint8$$$_S_$$$> x)
              (ShStructget4of5<Emb_2_Intuint8$$$_S_$$$> y)))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev4of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (ShStructget4of5<Emb_2_Intuint8$$$_S_$$$> x))
    x)
  :pattern ((ShStructget4of5<Emb_2_Intuint8$$$_S_$$$> x))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev1of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (ShStructget1of5<Ref> x))
    x)
  :pattern ((ShStructget1of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev3of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (ShStructget3of5<Ref> x))
    x)
  :pattern ((ShStructget3of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev2of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (ShStructget2of5<Ref> x))
    x)
  :pattern ((ShStructget2of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev0of5<ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>> (ShStructget0of5<Ref> x))
    x)
  :pattern ((ShStructget0of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (r ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev1of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (ShStructget1of2<Ref> x))
    x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) (y ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of2<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of2<ShStruct2<Ref~_Ref>> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev0of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (ShStructget0of2<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of2<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x Tuple0)) (!
  (= (unbox_Poly<Tuple0> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x Slice<Ref>)) (!
  (= (unbox_Poly<Slice<Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct4<Ref~_Ref~_Ref~_Ref>) (r ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct2<Ref~_Ref>) (r ShStruct2<Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((t0 $Ref) (t1 Types)) (!
  (and
    (= (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> t0 t1)) t0)
    (= (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> t0 t1)) t1))
  :pattern ((tuple2<Tuple2<Ref~_Types>> t0 t1))
  :qid |prog.getter_over_tuple2|)))
(assert (forall ((p Tuple2<Ref~_Types>)) (!
  (= (tuple2<Tuple2<Ref~_Types>> (get0of2<Ref> p) (get1of2<Types> p)) p)
  :pattern ((get0of2<Ref> p))
  :pattern ((get1of2<Types> p))
  :qid |prog.tuple2_over_getter|)))
(assert (forall ((l ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) (r ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) (r ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct1<ShStruct2<Ref~_Ref>>) (r ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
  (= (ShStructrev1of2<ShStruct2<Ref~_Ref>> (ShStructget1of2<Ref> x)) x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>) (y ShStruct2<Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of2<Ref> x) (ShStructget0of2<Ref> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
  (= (ShStructrev0of2<ShStruct2<Ref~_Ref>> (ShStructget0of2<Ref> x)) x)
  :pattern ((ShStructget0of2<Ref> x))
  )))
(assert (forall ((l ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) (r ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct0) (r ShStruct0)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) (y ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x)
        (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStructget2of3<Ref> x))
    x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (sarray<ShArray<Ref>> (smake<Slice<Ref>> a o l c)) a))
  :pattern ((sarray<ShArray<Ref>> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_array|)))
(assert (forall ((s Slice<Ref>)) (!
  (<=
    (+ (soffset<Int> s) (scap<Int> s))
    (ShArraylen<Int> (sarray<ShArray<Ref>> s)))
  :pattern ((soffset<Int> s) (scap<Int> s))
  :pattern ((ShArraylen<Int> (sarray<ShArray<Ref>> s)))
  )))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (slen<Int> (smake<Slice<Ref>> a o l c)) l))
  :pattern ((slen<Int> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_len|)))
(assert (forall ((s Slice<Ref>)) (!
  (<= 0 (slen<Int> s))
  :pattern ((slen<Int> s))
  )))
(assert (forall ((s Slice<Ref>)) (!
  (<= (slen<Int> s) (scap<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((s Slice<Ref>)) (!
  (<= 0 (soffset<Int> s))
  :pattern ((soffset<Int> s))
  )))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (soffset<Int> (smake<Slice<Ref>> a o l c)) o))
  :pattern ((soffset<Int> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_offset|)))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (scap<Int> (smake<Slice<Ref>> a o l c)) c))
  :pattern ((scap<Int> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_cap|)))
(assert (forall ((s Slice<Ref>)) (!
  (=
    s
    (smake<Slice<Ref>> (sarray<ShArray<Ref>> s) (soffset<Int> s) (slen<Int> s) (scap<Int> s)))
  :pattern ((sarray<ShArray<Ref>> s))
  :pattern ((soffset<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((l ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (r ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct2<Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<Slice<Ref>> y)) y)
  :pattern ((unbox_Poly<Slice<Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<Int> y)) y)
  :pattern ((unbox_Poly<Int> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct0> y)) y)
  :pattern ((unbox_Poly<ShStruct0> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> y)) y)
  :pattern ((unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> y))
    y)
  :pattern ((unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> y))
  )))
(assert (forall ((y Tuple2<Ref~_Types>)) (!
  (=>
    (= (get1of2<Types> y) (as Path_4cddb96f_T_Types<Types>  Types))
    (= (box_Poly<Ref> (unbox_Poly<Tuple0> (get0of2<Ref> y))) (get0of2<Ref> y)))
  :pattern ((unbox_Poly<Tuple0> (get0of2<Ref> y)))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> y))
    y)
  :pattern ((unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((y Tuple2<Ref~_Types>)) (!
  (=>
    (= (get1of2<Types> y) (as nilDecodeFeedback_b41831d7_T_Types<Types>  Types))
    (= (box_Poly<Ref> (unbox_Poly<Tuple0> (get0of2<Ref> y))) (get0of2<Ref> y)))
  :pattern ((unbox_Poly<Tuple0> (get0of2<Ref> y)))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> y))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev10of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget10of17<Ref> x))
    x)
  :pattern ((ShStructget10of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget1of17<Ref> x))
    x)
  :pattern ((ShStructget1of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget2of17<Ref> x))
    x)
  :pattern ((ShStructget2of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev16of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget16of17<Ref> x))
    x)
  :pattern ((ShStructget16of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev8of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget8of17<Ref> x))
    x)
  :pattern ((ShStructget8of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev3of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget3of17<Ref> x))
    x)
  :pattern ((ShStructget3of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev12of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget12of17<Ref> x))
    x)
  :pattern ((ShStructget12of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev7of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget7of17<Ref> x))
    x)
  :pattern ((ShStructget7of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev11of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget11of17<Ref> x))
    x)
  :pattern ((ShStructget11of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (y ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of17<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of17<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of17<Ref> x) (ShStructget1of17<Ref> y))
        (and
          (= (ShStructget2of17<Ref> x) (ShStructget2of17<Ref> y))
          (and
            (= (ShStructget3of17<Ref> x) (ShStructget3of17<Ref> y))
            (and
              (= (ShStructget4of17<Ref> x) (ShStructget4of17<Ref> y))
              (and
                (= (ShStructget5of17<Ref> x) (ShStructget5of17<Ref> y))
                (and
                  (= (ShStructget6of17<Ref> x) (ShStructget6of17<Ref> y))
                  (and
                    (= (ShStructget7of17<Ref> x) (ShStructget7of17<Ref> y))
                    (and
                      (= (ShStructget8of17<Ref> x) (ShStructget8of17<Ref> y))
                      (and
                        (= (ShStructget9of17<Ref> x) (ShStructget9of17<Ref> y))
                        (and
                          (=
                            (ShStructget10of17<Ref> x)
                            (ShStructget10of17<Ref> y))
                          (and
                            (=
                              (ShStructget11of17<Ref> x)
                              (ShStructget11of17<Ref> y))
                            (and
                              (=
                                (ShStructget12of17<Ref> x)
                                (ShStructget12of17<Ref> y))
                              (and
                                (=
                                  (ShStructget13of17<Ref> x)
                                  (ShStructget13of17<Ref> y))
                                (and
                                  (=
                                    (ShStructget14of17<Ref> x)
                                    (ShStructget14of17<Ref> y))
                                  (and
                                    (=
                                      (ShStructget15of17<Ref> x)
                                      (ShStructget15of17<Ref> y))
                                    (=
                                      (ShStructget16of17<Ref> x)
                                      (ShStructget16of17<Ref> y)))))))))))))))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev4of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget4of17<Ref> x))
    x)
  :pattern ((ShStructget4of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev5of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget5of17<Ref> x))
    x)
  :pattern ((ShStructget5of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev15of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget15of17<Ref> x))
    x)
  :pattern ((ShStructget15of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev6of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget6of17<Ref> x))
    x)
  :pattern ((ShStructget6of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev9of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget9of17<Ref> x))
    x)
  :pattern ((ShStructget9of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget0of17<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of17<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev14of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget14of17<Ref> x))
    x)
  :pattern ((ShStructget14of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev13of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget13of17<Ref> x))
    x)
  :pattern ((ShStructget13of17<Ref> x))
  )))
(assert (forall ((a ShArray<Ref>)) (!
  (>= (ShArraylen<Int> a) 0)
  :pattern ((ShArraylen<Int> a))
  )))
(assert (forall ((a ShArray<Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (ShArraylen<Int> a)))
    (and
      (= (ShArrayfirst<ShArray<Ref>> (ShArrayloc<Ref> a i)) a)
      (= (ShArraysecond<Int> (ShArrayloc<Ref> a i)) i)))
  :pattern ((ShArrayloc<Ref> a i))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) (y ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of3<Ref> x) (ShStructget0of3<Ref> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (=
          (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> x)
          (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev1of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStructget0of3<Ref> x))
    x)
  :pattern ((ShStructget0of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev2of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> x))
    x)
  :pattern ((ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> x))
  )))
(assert (forall ((i Tuple2<Ref~_Types>)) (!
  (=>
    (comparableType_Types<Bool> (get1of2<Types> i))
    (comparableInterface<Bool> i))
  :pattern ((comparableInterface<Bool> i))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
  (= (unbox_Poly<ShStruct2<Ref~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) (r ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>) (r ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (y ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x)
        (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStructget2of3<Ref> x))
    x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((x ShStruct0) (y ShStruct0)) (!
  (= (eq<Bool> x y) true)
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (= (unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) (r ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (= (unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (>= (ShArraylen<Int> a) 0)
  :pattern ((ShArraylen<Int> a))
  )))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (ShArraylen<Int> a)))
    (and
      (=
        (ShArrayfirst<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> a i))
        a)
      (=
        (ShArraysecond<Int> (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> a i))
        i)))
  :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> a i))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (y ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> x)
        (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> y))
      (and
        (=
          (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)
          (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> y))
        (=
          (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)
          (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    x)
  :pattern ((ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    x)
  :pattern ((ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
  )))
(assert (forall ((l ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) (r ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev3of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget3of6<Ref> x))
    x)
  :pattern ((ShStructget3of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev1of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget1of6<Ref> x))
    x)
  :pattern ((ShStructget1of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) (y ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of6<Ref> x) (ShStructget0of6<Ref> y))
      (and
        (= (ShStructget1of6<Ref> x) (ShStructget1of6<Ref> y))
        (and
          (= (ShStructget2of6<Ref> x) (ShStructget2of6<Ref> y))
          (and
            (= (ShStructget3of6<Ref> x) (ShStructget3of6<Ref> y))
            (and
              (= (ShStructget4of6<Ref> x) (ShStructget4of6<Ref> y))
              (=
                (ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> x)
                (ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> y))))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev0of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget0of6<Ref> x))
    x)
  :pattern ((ShStructget0of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev2of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget2of6<Ref> x))
    x)
  :pattern ((ShStructget2of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev5of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> x))
    x)
  :pattern ((ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev4of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget4of6<Ref> x))
    x)
  :pattern ((ShStructget4of6<Ref> x))
  )))
(assert (=
  (tag_Types<Int> (as SCMPDestinationUnreachable_840d9458_T_Types<Types>  Types))
  (as SCMPDestinationUnreachable_840d9458_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as Path_c385169_T_Types<Types>  Types)) true))
(assert (= (comparableType_Types<Bool> (as Raw_daeaf66a_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as Y$17800ab4_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as Y$53a71dc3_5c610647__Types<Types>  Types))
  (as Y$53a71dc3_5c610647__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as int_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as SCMPCode_840d9458_T_Types<Types>  Types))
  (as SCMPCode_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as SCION_840d9458_T_Types<Types>  Types))
  (as SCION_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as HostIPv6_cd675838_T_Types<Types>  Types))
  (as HostIPv6_cd675838_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as AS_cd675838_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as SCMPInternalConnectivityDown_840d9458_T_Types<Types>  Types))
  (as SCMPInternalConnectivityDown_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$3191b69e_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as SCMPPacketTooBig_840d9458_T_Types<Types>  Types))
  (as SCMPPacketTooBig_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as EndToEndExtn_840d9458_T_Types<Types>  Types))
  (as EndToEndExtn_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as LayerType_b41831d7_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))
  (as HopByHopExtnSkipper_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$558431e4_a6ceb89d__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as littleEndian_72f0d887_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Y$53a71dc3_5c610647__Types<Types>  Types))
  false))
(assert (forall ((p0 Types)) (!
  (= (tag_Types<Int> (slice_Types<Types> p0)) (as slice_Types_tag<Int>  Int))
  :pattern ((slice_Types<Types> p0))
  )))
(assert (=
  (tag_Types<Int> (as BFD_6416454f_T_Types<Types>  Types))
  (as BFD_6416454f_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Path_c6e60a1d_T_Types<Types>  Types))
  (as Path_c6e60a1d_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as SCION_840d9458_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as uint16_Types<Types>  Types))
  (as uint16_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as HostSVC_cd675838_T_Types<Types>  Types))
  (as HostSVC_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as IPAddr_5c610647_T_Types<Types>  Types))
  (as IPAddr_5c610647_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPInternalConnectivityDown_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as nilDecodeFeedback_b41831d7_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as Y$9c78df5f_b41831d7__Types<Types>  Types))
  (as Y$9c78df5f_b41831d7__Types_tag<Int>  Int)))
(assert (forall ((a Types)) (!
  (behavioral_subtype_Types<Bool> a a)
  :pattern ((behavioral_subtype_Types<Bool> a a))
  )))
(assert (=
  (comparableType_Types<Bool> (as HostIPv4_cd675838_T_Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as SCMPParameterProblem_840d9458_T_Types<Types>  Types))
  (as SCMPParameterProblem_840d9458_T_Types_tag<Int>  Int)))
(assert (forall ((p0 Types)) (!
  (= (comparableType_Types<Bool> (slice_Types<Types> p0)) false)
  :pattern ((comparableType_Types<Bool> (slice_Types<Types> p0)))
  )))
(assert (forall ((x0 Types)) (!
  (= (get_0_pointer_Types<Types> (pointer_Types<Types> x0)) x0)
  :pattern ((pointer_Types<Types> x0))
  )))
(assert (= (comparableType_Types<Bool> (as uint16_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Y$68d3cee9_b41831d7__Types<Types>  Types))
  (as Y$68d3cee9_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as integer_Types<Types>  Types))
  (as integer_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPExternalInterfaceDown_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as SCMPEcho_840d9458_T_Types<Types>  Types))
  (as SCMPEcho_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$c2e55be_72f0d887__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as AddrType_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as EndToEndExtn_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as string_Types<Types>  Types))
  (as string_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as empty_interface_Types<Types>  Types)) false))
(assert (=
  (tag_Types<Int> (as Y$6914870a_b41831d7__Types<Types>  Types))
  (as Y$6914870a_b41831d7__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as rawPath_a6ceb89d_T_Types<Types>  Types)) true))
(assert (forall ((a Types)) (!
  (behavioral_subtype_Types<Bool> a (as empty_interface_Types<Types>  Types))
  :pattern ((behavioral_subtype_Types<Bool> a (as empty_interface_Types<Types>  Types)))
  )))
(assert (=
  (comparableType_Types<Bool> (as Y$9127f611_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as Y$49c4c25f_d3743b4f__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as SCMPType_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as Y$60c7bddc_b41831d7__Types<Types>  Types))
  (as Y$60c7bddc_b41831d7__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as SCMP_840d9458_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as HostNone_cd675838_T_Types<Types>  Types))
  (as HostNone_cd675838_T_Types_tag<Int>  Int)))
(assert (forall ((p0 Types)) (!
  (= (comparableType_Types<Bool> (pointer_Types<Types> p0)) true)
  :pattern ((comparableType_Types<Bool> (pointer_Types<Types> p0)))
  )))
(assert (=
  (comparableType_Types<Bool> (as SCMPParameterProblem_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as UDPAddr_5c610647_T_Types<Types>  Types))
  (as UDPAddr_5c610647_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Payload_b41831d7_T_Types<Types>  Types))
  (as Payload_b41831d7_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Path_4cddb96f_T_Types<Types>  Types))
  (as Path_4cddb96f_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as bigEndian_72f0d887_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Y$6914870a_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as Y$35202e5_cd675838__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as Y$35202e5_cd675838__Types<Types>  Types))
  (as Y$35202e5_cd675838__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as integer_Types<Types>  Types)) true))
(assert (= (comparableType_Types<Bool> (as byte_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as SCMPType_840d9458_T_Types<Types>  Types))
  (as SCMPType_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as L4ProtocolType_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as empty_interface_Types<Types>  Types))
  (as empty_interface_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as nilDecodeFeedback_b41831d7_T_Types<Types>  Types))
  (as nilDecodeFeedback_b41831d7_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as SCMPExternalInterfaceDown_840d9458_T_Types<Types>  Types))
  (as SCMPExternalInterfaceDown_840d9458_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as BFD_6416454f_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Y$9127f611_b41831d7__Types<Types>  Types))
  (as Y$9127f611_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as AS_cd675838_T_Types<Types>  Types))
  (as AS_cd675838_T_Types_tag<Int>  Int)))
(assert (= (tag_Types<Int> (as nil_Types<Types>  Types)) (as nil_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as LayerType_b41831d7_T_Types<Types>  Types))
  (as LayerType_b41831d7_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as Path_c6e60a1d_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as HopByHopExtn_840d9458_T_Types<Types>  Types))
  (as HopByHopExtn_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as rawPath_a6ceb89d_T_Types<Types>  Types))
  (as rawPath_a6ceb89d_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as IA_cd675838_T_Types<Types>  Types))
  (as IA_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$60c7bddc_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as SCMPTraceroute_840d9458_T_Types<Types>  Types))
  (as SCMPTraceroute_840d9458_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as Decoded_daeaf66a_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Y$b28ae4_ac87dd1d__Types<Types>  Types))
  (as Y$b28ae4_ac87dd1d__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as SCMP_840d9458_T_Types<Types>  Types))
  (as SCMP_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPTraceroute_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Y$9c78df5f_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as Y$c2e55be_72f0d887__Types<Types>  Types))
  (as Y$c2e55be_72f0d887__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as IPAddr_5c610647_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))
  (as EndToEndExtnSkipper_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Path_c385169_T_Types<Types>  Types))
  (as Path_c385169_T_Types_tag<Int>  Int)))
(assert (= (tag_Types<Int> (as int_Types<Types>  Types)) (as int_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as SCMPTypeCode_840d9458_T_Types<Types>  Types))
  (as SCMPTypeCode_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as HostIPv6_cd675838_T_Types<Types>  Types))
  false))
(assert (= (comparableType_Types<Bool> (as nil_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Y$febd64e7_b41831d7__Types<Types>  Types))
  (as Y$febd64e7_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$8f734176_14a7fb6d__Types<Types>  Types))
  (as Y$8f734176_14a7fb6d__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as UDPAddr_5c610647_T_Types<Types>  Types)) true))
(assert (forall ((p0 Types)) (!
  (= (tag_Types<Int> (pointer_Types<Types> p0)) (as pointer_Types_tag<Int>  Int))
  :pattern ((pointer_Types<Types> p0))
  )))
(assert (=
  (comparableType_Types<Bool> (as Y$68d3cee9_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as AddrType_840d9458_T_Types<Types>  Types))
  (as AddrType_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as HostIPv4_cd675838_T_Types<Types>  Types))
  (as HostIPv4_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$558431e4_a6ceb89d__Types<Types>  Types))
  (as Y$558431e4_a6ceb89d__Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPCode_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as L4ProtocolType_840d9458_T_Types<Types>  Types))
  (as L4ProtocolType_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Payload_b41831d7_T_Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as Y$b28ae4_ac87dd1d__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as littleEndian_72f0d887_T_Types<Types>  Types))
  (as littleEndian_72f0d887_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPEcho_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as Y$3191b69e_b41831d7__Types<Types>  Types))
  (as Y$3191b69e_b41831d7__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as string_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as bigEndian_72f0d887_T_Types<Types>  Types))
  (as bigEndian_72f0d887_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as HostSVC_cd675838_T_Types<Types>  Types)) true))
(assert (= (comparableType_Types<Bool> (as IA_cd675838_T_Types<Types>  Types)) true))
(assert (forall ((a Types) (b Types) (c Types)) (!
  (=>
    (and
      (behavioral_subtype_Types<Bool> a b)
      (behavioral_subtype_Types<Bool> b c))
    (behavioral_subtype_Types<Bool> a c))
  :pattern ((behavioral_subtype_Types<Bool> a b) (behavioral_subtype_Types<Bool> b c))
  )))
(assert (=
  (comparableType_Types<Bool> (as Y$febd64e7_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as SCMPTypeCode_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as HostNone_cd675838_T_Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as Raw_daeaf66a_T_Types<Types>  Types))
  (as Raw_daeaf66a_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as HopByHopExtn_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as Y$49c4c25f_d3743b4f__Types<Types>  Types))
  (as Y$49c4c25f_d3743b4f__Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPPacketTooBig_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Y$8f734176_14a7fb6d__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as SCMPDestinationUnreachable_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as Y$17800ab4_b41831d7__Types<Types>  Types))
  (as Y$17800ab4_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Decoded_daeaf66a_T_Types<Types>  Types))
  (as Decoded_daeaf66a_T_Types_tag<Int>  Int)))
(assert (= (tag_Types<Int> (as byte_Types<Types>  Types)) (as byte_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as Path_4cddb96f_T_Types<Types>  Types)) true))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (= (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct0)) (!
  (= (unbox_Poly<ShStruct0> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (=
    (unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (=
      (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c))
      a))
  :pattern ((sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_array|)))
(assert (forall ((s Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (<=
    (+ (soffset<Int> s) (scap<Int> s))
    (ShArraylen<Int> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> s)))
  :pattern ((soffset<Int> s) (scap<Int> s))
  :pattern ((ShArraylen<Int> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> s)))
  )))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (slen<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)) l))
  :pattern ((slen<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_len|)))
(assert (forall ((s Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (<= 0 (slen<Int> s))
  :pattern ((slen<Int> s))
  )))
(assert (forall ((s Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (<= (slen<Int> s) (scap<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((s Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (<= 0 (soffset<Int> s))
  :pattern ((soffset<Int> s))
  )))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (soffset<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)) o))
  :pattern ((soffset<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_offset|)))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (scap<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)) c))
  :pattern ((scap<Int> (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_cap|)))
(assert (forall ((s Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (=
    s
    (smake<Slice<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> s) (soffset<Int> s) (slen<Int> s) (scap<Int> s)))
  :pattern ((sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> s))
  :pattern ((soffset<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (= (strLen<Int> (as stringLit5061746845787069726564<Int>  Int)) 11))
(assert (= (strLen<Int> (as stringLit6578706563746564<Int>  Int)) 8))
(assert (= (strLen<Int> (as stringLit756470<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit74797065<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit436d644864724c656e<Int>  Int)) 9))
(assert (= (strLen<Int> (as stringLit62696e6172792e426967456e6469616e<Int>  Int)) 16))
(assert (=
  (strLen<Int> (as stringLit496e76616c696441646472657373486561646572<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit257328436f64653a20256429<Int>  Int)) 12))
(assert (=
  (strLen<Int> (as stringLit65326520657874656e73696f6e206d757374206e6f74206265207265706561746564<Int>  Int))
  34))
(assert (=
  (strLen<Int> (as stringLit686561646572206c656e6774682065786365656473206d6178696d756d<Int>  Int))
  29))
(assert (=
  (strLen<Int> (as stringLit496e76616c6964457874656e73696f6e486561646572<Int>  Int))
  22))
(assert (= (strLen<Int> (as stringLit4563686f52657175657374<Int>  Int)) 11))
(assert (= (strLen<Int> (as stringLit61637475616c<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit62696e6172792e4c6974746c65456e6469616e<Int>  Int))
  19))
(assert (= (strLen<Int> (as stringLit467269646179<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit696e76616c696420657874656e73696f6e206865616465722e204c656e677468202564206c657373207468616e2032<Int>  Int))
  47))
(assert (= (strLen<Int> (as stringLit4d61726368<Int>  Int)) 5))
(assert (=
  (strLen<Int> (as stringLit70726f76696465642062756666657220697320746f6f20736d616c6c<Int>  Int))
  28))
(assert (= (strLen<Int> (as stringLit554450<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit426967456e6469616e<Int>  Int)) 9))
(assert (=
  (strLen<Int> (as stringLit696e76616c6964206865616465722c206e6567617469766520706174684c656e<Int>  Int))
  32))
(assert (=
  (strLen<Int> (as stringLit63616e206e6f742063616c63756c61746520636865636b73756d20776974686f7574205343494f4e20686561646572<Int>  Int))
  47))
(assert (=
  (strLen<Int> (as stringLit53434d50206c61796572206c656e677468206973206c657373207468656e2034206279746573<Int>  Int))
  38))
(assert (= (strLen<Int> (as stringLit4a616e75617279<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit4d6179<Int>  Int)) 3))
(assert (=
  (strLen<Int> (as stringLit4c656e677468202564206c657373207468616e20737065636966696564206c656e677468202564<Int>  Int))
  39))
(assert (=
  (strLen<Int> (as stringLit756e737570706f727465642061646472657373<Int>  Int))
  19))
(assert (= (strLen<Int> (as stringLit4f63746f626572<Int>  Int)) 7))
(assert (=
  (strLen<Int> (as stringLit44657374696e6174696f6e556e726561636861626c65<Int>  Int))
  22))
(assert (=
  (strLen<Int> (as stringLit496e7465726e616c436f6e6e6563746976697479446f776e<Int>  Int))
  24))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e486f704669656c64456772657373496e74657266616365<Int>  Int))
  30))
(assert (= (strLen<Int> (as stringLit466c6f7749445265717569726564<Int>  Int)) 14))
(assert (= (strLen<Int> (as stringLit4a756c79<Int>  Int)) 4))
(assert (=
  (strLen<Int> (as stringLit5343494f4e20657874656e73696f6e2061637475616c206c656e677468206d757374206265206d756c7469706c65206f662034<Int>  Int))
  51))
(assert (= (strLen<Int> (as stringLit424644<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit486f704279486f70<Int>  Int)) 8))
(assert (= (strLen<Int> (as stringLit53434d50<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit556e6b6e6f776e5061746854797065<Int>  Int)) 15))
(assert (= (strLen<Int> (as stringLit456e6432456e64<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit5361747572646179<Int>  Int)) 8))
(assert (=
  (strLen<Int> (as stringLit496e76616c6964436f6d6d6f6e486561646572<Int>  Int))
  19))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e5343494f4e56657273696f6e<Int>  Int))
  19))
(assert (= (strLen<Int> (as stringLit446563656d626572<Int>  Int)) 8))
(assert (forall ((l Int) (r Int)) (!
  (= (strLen<Int> (strConcat<Int> l r)) (+ (strLen<Int> l) (strLen<Int> r)))
  :pattern ((strLen<Int> (strConcat<Int> l r)))
  )))
(assert (= (strLen<Int> (as stringLit5468757273646179<Int>  Int)) 8))
(assert (=
  (strLen<Int> (as stringLit68626820657874656e73696f6e206d757374206e6f74206265207265706561746564<Int>  Int))
  34))
(assert (= (strLen<Int> (as stringLit62756666657220746f6f2073686f7274<Int>  Int)) 16))
(assert (= (strLen<Int> (as stringLit554e4b4e4f574e2028256429<Int>  Int)) 12))
(assert (= (strLen<Int> (as stringLit6970<Int>  Int)) 2))
(assert (= (strLen<Int> (as stringLit5472616365726f7574655265706c79<Int>  Int)) 15))
(assert (=
  (strLen<Int> (as stringLit64657374696e6174696f6e2061646472657373206d697373696e67<Int>  Int))
  27))
(assert (= (strLen<Int> (as stringLit256428256429<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit7061636b65742069732073686f72746572207468616e2074686520636f6d6d6f6e20686561646572206c656e677468<Int>  Int))
  47))
(assert (=
  (strLen<Int> (as stringLit65326520657874656e73696f6e206d757374206e6f7420636f6d65206265666f7265207468652048424820657874656e73696f6e<Int>  Int))
  52))
(assert (= (strLen<Int> (as stringLit53657074656d626572<Int>  Int)) 9))
(assert (= (strLen<Int> (as stringLit4563686f5265706c79<Int>  Int)) 9))
(assert (= (strLen<Int> (as stringLit5061636b6574546f6f426967<Int>  Int)) 12))
(assert (= (strLen<Int> (as stringLit496e76616c696450617468<Int>  Int)) 11))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e486f704669656c64496e6772657373496e74657266616365<Int>  Int))
  31))
(assert (=
  (strLen<Int> (as stringLit2573282564295c6e5061796c6f61643a202573<Int>  Int))
  19))
(assert (= (strLen<Int> (as stringLit257328257329<Int>  Int)) 6))
(assert (= (strLen<Int> (as stringLit417072696c<Int>  Int)) 5))
(assert (= (strLen<Int> (as stringLit4665627275617279<Int>  Int)) 8))
(assert (= (strLen<Int> (as stringLit53756e646179<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit696e76616c696420657874656e73696f6e206865616465722e20<Int>  Int))
  26))
(assert (= (strLen<Int> (as stringLit4f7074696f6e206e6f7420666f756e64<Int>  Int)) 16))
(assert (=
  (strLen<Int> (as stringLit686561646572206c656e677468206973206e6f7420616e20696e7465676572206d756c7469706c65206f66206c696e65206c656e677468<Int>  Int))
  55))
(assert (=
  (strLen<Int> (as stringLit45787465726e616c496e74657266616365446f776e<Int>  Int))
  21))
(assert (= (strLen<Int> (as stringLit4e6f76656d626572<Int>  Int)) 8))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e41646472657373466f726d6174<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit54756573646179<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit4d6f6e646179<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e456e64546f456e644f7074696f6e<Int>  Int))
  21))
(assert (=
  (strLen<Int> (as stringLit496e76616c696444657374696e6174696f6e41646472657373<Int>  Int))
  25))
(assert (= (strLen<Int> (as stringLit6d696e<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit6d6178<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit616464724864724c656e<Int>  Int)) 10))
(assert (= (strLen<Int> (as stringLit4e6f6e4c6f63616c44656c6976657279<Int>  Int)) 16))
(assert (= (strLen<Int> (as stringLit5472616365726f75746552657175657374<Int>  Int)) 17))
(assert (=
  (strLen<Int> (as stringLit496e76616c6964536f7572636541646472657373<Int>  Int))
  20))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e486f704279486f704f7074696f6e<Int>  Int))
  21))
(assert (= (strLen<Int> (as stringLit<Int>  Int)) 0))
(assert (=
  (strLen<Int> (as stringLit4572726f6e656f75734865616465724669656c64<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit4a756e65<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit417567757374<Int>  Int)) 6))
(assert (= (strLen<Int> (as stringLit61646472<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit4c6974746c65456e6469616e<Int>  Int)) 12))
(assert (= (strLen<Int> (as stringLit4e6f6e65<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit6d696e696d756d<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit496e76616c69645061636b657453697a65<Int>  Int)) 17))
(assert (=
  (strLen<Int> (as stringLit736f757263652061646472657373206d697373696e67<Int>  Int))
  22))
(assert (= (strLen<Int> (as stringLit6c656e<Int>  Int)) 3))
(assert (=
  (strLen<Int> (as stringLit756e737570706f72746564206164647265737320747970652f6c656e67746820636f6d62696e6174696f6e<Int>  Int))
  43))
(assert (forall ((str Int)) (!
  (<= 0 (strLen<Int> str))
  :pattern ((strLen<Int> str))
  )))
(assert (=
  (strLen<Int> (as stringLit5343494f4e20686561646572206d697373696e67<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit496e76616c6964486f704669656c644d4143<Int>  Int)) 18))
(assert (= (strLen<Int> (as stringLit556e6b6e6f776e4e65787448647254797065<Int>  Int)) 18))
(assert (= (strLen<Int> (as stringLit5765646e6573646179<Int>  Int)) 9))
(assert (= (strLen<Int> (as stringLit544350<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit6d696e696e756d5f6c65677468<Int>  Int)) 13))
(assert (=
  (strLen<Int> (as stringLit496e76616c69645365676d656e744368616e6765<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit506172616d6574657250726f626c656d<Int>  Int)) 16))
(assert (= (strLen<Int> (as stringLit6864724279746573<Int>  Int)) 8))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
  (>= (ShArraylen<Int> a) 0)
  :pattern ((ShArraylen<Int> a))
  )))
(assert (forall ((a ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (ShArraylen<Int> a)))
    (and
      (=
        (ShArrayfirst<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> a i))
        a)
      (= (ShArraysecond<Int> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> a i)) i)))
  :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> a i))
  )))
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (=
    (ShStructrev0of1<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> (ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) (y ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (=
    (eq<Bool> x y)
    (=
      (ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)
      (ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y)))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) (y ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of3<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStructget0of3<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStructget2of3<Ref> x))
    x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (=
      (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c))
      a))
  :pattern ((sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_array|)))
(assert (forall ((s Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (<=
    (+ (soffset<Int> s) (scap<Int> s))
    (ShArraylen<Int> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> s)))
  :pattern ((soffset<Int> s) (scap<Int> s))
  :pattern ((ShArraylen<Int> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> s)))
  )))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (=
      (slen<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c))
      l))
  :pattern ((slen<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_len|)))
(assert (forall ((s Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (<= 0 (slen<Int> s))
  :pattern ((slen<Int> s))
  )))
(assert (forall ((s Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (<= (slen<Int> s) (scap<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((s Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (<= 0 (soffset<Int> s))
  :pattern ((soffset<Int> s))
  )))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (=
      (soffset<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c))
      o))
  :pattern ((soffset<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_offset|)))
(assert (forall ((a ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (=
      (scap<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c))
      c))
  :pattern ((scap<Int> (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> a o l c)))
  :qid |prog.deconstructor_over_constructor_cap|)))
(assert (forall ((s Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    s
    (smake<Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> s) (soffset<Int> s) (slen<Int> s) (scap<Int> s)))
  :pattern ((sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> s))
  :pattern ((soffset<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev1of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (ShStructget1of2<Ref> x))
    x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (y ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x)
        (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev0of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
  )))
(assert (forall ((x Int)) (!
  (= (unbox_Poly<Int> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct3<Ref~_Ref~_Ref>) (r ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev1of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget1of4<Ref> x)) x)
  :pattern ((ShStructget1of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev3of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget3of4<Ref> x)) x)
  :pattern ((ShStructget3of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev0of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget0of4<Ref> x)) x)
  :pattern ((ShStructget0of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>) (y ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of4<Ref> x) (ShStructget0of4<Ref> y))
      (and
        (= (ShStructget1of4<Ref> x) (ShStructget1of4<Ref> y))
        (and
          (= (ShStructget2of4<Ref> x) (ShStructget2of4<Ref> y))
          (= (ShStructget3of4<Ref> x) (ShStructget3of4<Ref> y))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev2of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget2of4<Ref> x)) x)
  :pattern ((ShStructget2of4<Ref> x))
  )))
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (=
    (ShStructrev0of1<ShStruct1<ShStruct2<Ref~_Ref>>> (ShStructget0of1<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of1<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>) (y ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (=
    (eq<Bool> x y)
    (=
      (ShStructget0of1<ShStruct2<Ref~_Ref>> x)
      (ShStructget0of1<ShStruct2<Ref~_Ref>> y)))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev1of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (ShStructget1of2<Ref> x))
    x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) (y ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)
        (ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev0of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
  )))
(assert (forall ((l ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (r ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>) (y ShStruct3<Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of3<Ref> x) (ShStructget0of3<Ref> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev1of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget1of3<Ref> x)) x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev0of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget0of3<Ref> x)) x)
  :pattern ((ShStructget0of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev2of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget2of3<Ref> x)) x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) (r ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
; /field_value_functions_axioms.smt2 [PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$: ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]
(assert (forall ((vs $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) (ws $FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
    (= ($FVF.loc_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_PointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(assert (forall ((vs $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) (ws $FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Slice<Ref>)) (!
    (= ($FVF.loc_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_SlicePointerDefinedEndToEndOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$: ShStruct5[Ref, Ref, Ref, Ref, Emb_2_Intuint8$$$_S_$$$]]
(assert (forall ((vs $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>) (ws $FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f ShStruct5<Ref~_Ref~_Ref~_Ref~_Emb_2_Intuint8$$$_S_$$$>)) (!
    (= ($FVF.loc_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_PointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(assert (forall ((vs $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) (ws $FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Slice<Ref>)) (!
    (= ($FVF.loc_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_SlicePointerDefinedHopByHopOption_840d9458_T$$$_S_$$$$$$_S_$$$$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Intbyte$$$$_E_$$$: Int]
(assert (forall ((vs $FVF<Intbyte$$$$_E_$$$>) (ws $FVF<Intbyte$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Intbyte$$$$_E_$$$ vs) ($FVF.domain_Intbyte$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Intbyte$$$$_E_$$$ vs))
            (= ($FVF.lookup_Intbyte$$$$_E_$$$ vs x) ($FVF.lookup_Intbyte$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ vs x) ($FVF.lookup_Intbyte$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Intbyte$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Intbyte$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Intbyte$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Intbyte$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_Intbyte$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Intbyte$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Bool$$$$_E_$$$: Bool]
(assert (forall ((vs $FVF<Bool$$$$_E_$$$>) (ws $FVF<Bool$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Bool$$$$_E_$$$ vs) ($FVF.domain_Bool$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Bool$$$$_E_$$$ vs))
            (= ($FVF.lookup_Bool$$$$_E_$$$ vs x) ($FVF.lookup_Bool$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Bool$$$$_E_$$$ vs x) ($FVF.lookup_Bool$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Bool$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Bool$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Bool$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Bool$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Bool$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Bool)) (!
    (= ($FVF.loc_Bool$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Bool$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Intuint16$$$$_E_$$$: Int]
(assert (forall ((vs $FVF<Intuint16$$$$_E_$$$>) (ws $FVF<Intuint16$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Intuint16$$$$_E_$$$ vs) ($FVF.domain_Intuint16$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Intuint16$$$$_E_$$$ vs))
            (= ($FVF.lookup_Intuint16$$$$_E_$$$ vs x) ($FVF.lookup_Intuint16$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Intuint16$$$$_E_$$$ vs x) ($FVF.lookup_Intuint16$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Intuint16$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Intuint16$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Intuint16$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Intuint16$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Intuint16$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_Intuint16$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Intuint16$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Intuint32$$$$_E_$$$: Int]
(assert (forall ((vs $FVF<Intuint32$$$$_E_$$$>) (ws $FVF<Intuint32$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Intuint32$$$$_E_$$$ vs) ($FVF.domain_Intuint32$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Intuint32$$$$_E_$$$ vs))
            (= ($FVF.lookup_Intuint32$$$$_E_$$$ vs x) ($FVF.lookup_Intuint32$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Intuint32$$$$_E_$$$ vs x) ($FVF.lookup_Intuint32$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Intuint32$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Intuint32$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Intuint32$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Intuint32$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Intuint32$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_Intuint32$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Intuint32$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$: Slice[ShStruct6[Ref, Ref, Ref, Ref, Ref, Emb_6_Intbyte$$$_S_$$$]]]
(assert (forall ((vs $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>) (ws $FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Slice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= ($FVF.loc_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_SliceDefinedHopField_a6ceb89d_T$$$_S_$$$$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Interfaceempty_interface$$$$_E_$$$: Tuple2[Ref, Types]]
(assert (forall ((vs $FVF<Interfaceempty_interface$$$$_E_$$$>) (ws $FVF<Interfaceempty_interface$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Interfaceempty_interface$$$$_E_$$$ vs) ($FVF.domain_Interfaceempty_interface$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Interfaceempty_interface$$$$_E_$$$ vs))
            (= ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ vs x) ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ vs x) ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Interfaceempty_interface$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Interfaceempty_interface$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Interfaceempty_interface$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Interfaceempty_interface$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Tuple2<Ref~_Types>)) (!
    (= ($FVF.loc_Interfaceempty_interface$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Interfaceempty_interface$$$$_E_$$$ f r)))))
; /predicate_snap_functions_axioms.smt2 [Mem_840d9458_PMEndToEndOption: Snap]
(assert (forall ((vs $PSF<Mem_840d9458_PMEndToEndOption>) (ws $PSF<Mem_840d9458_PMEndToEndOption>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_Mem_840d9458_PMEndToEndOption vs) ($PSF.domain_Mem_840d9458_PMEndToEndOption ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_Mem_840d9458_PMEndToEndOption vs))
            (= ($PSF.lookup_Mem_840d9458_PMEndToEndOption vs x) ($PSF.lookup_Mem_840d9458_PMEndToEndOption ws x)))
          :pattern (($PSF.lookup_Mem_840d9458_PMEndToEndOption vs x) ($PSF.lookup_Mem_840d9458_PMEndToEndOption ws x))
          :qid |qp.$PSF<Mem_840d9458_PMEndToEndOption>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap vs)
              ($SortWrappers.$PSF<Mem_840d9458_PMEndToEndOption>To$Snap ws)
              )
    :qid |qp.$PSF<Mem_840d9458_PMEndToEndOption>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_Mem_840d9458_PMEndToEndOption pm s))
    :pattern (($PSF.perm_Mem_840d9458_PMEndToEndOption pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_Mem_840d9458_PMEndToEndOption f s) true)
    :pattern (($PSF.loc_Mem_840d9458_PMEndToEndOption f s)))))
; /predicate_snap_functions_axioms.smt2 [Mem_840d9458_PMHopByHopOption: Snap]
(assert (forall ((vs $PSF<Mem_840d9458_PMHopByHopOption>) (ws $PSF<Mem_840d9458_PMHopByHopOption>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_Mem_840d9458_PMHopByHopOption vs) ($PSF.domain_Mem_840d9458_PMHopByHopOption ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_Mem_840d9458_PMHopByHopOption vs))
            (= ($PSF.lookup_Mem_840d9458_PMHopByHopOption vs x) ($PSF.lookup_Mem_840d9458_PMHopByHopOption ws x)))
          :pattern (($PSF.lookup_Mem_840d9458_PMHopByHopOption vs x) ($PSF.lookup_Mem_840d9458_PMHopByHopOption ws x))
          :qid |qp.$PSF<Mem_840d9458_PMHopByHopOption>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap vs)
              ($SortWrappers.$PSF<Mem_840d9458_PMHopByHopOption>To$Snap ws)
              )
    :qid |qp.$PSF<Mem_840d9458_PMHopByHopOption>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_Mem_840d9458_PMHopByHopOption pm s))
    :pattern (($PSF.perm_Mem_840d9458_PMHopByHopOption pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_Mem_840d9458_PMHopByHopOption f s) true)
    :pattern (($PSF.loc_Mem_840d9458_PMHopByHopOption f s)))))
; /predicate_snap_functions_axioms.smt2 [Mem_a6ceb89d_PMHopField: Snap]
(assert (forall ((vs $PSF<Mem_a6ceb89d_PMHopField>) (ws $PSF<Mem_a6ceb89d_PMHopField>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_Mem_a6ceb89d_PMHopField vs) ($PSF.domain_Mem_a6ceb89d_PMHopField ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_Mem_a6ceb89d_PMHopField vs))
            (= ($PSF.lookup_Mem_a6ceb89d_PMHopField vs x) ($PSF.lookup_Mem_a6ceb89d_PMHopField ws x)))
          :pattern (($PSF.lookup_Mem_a6ceb89d_PMHopField vs x) ($PSF.lookup_Mem_a6ceb89d_PMHopField ws x))
          :qid |qp.$PSF<Mem_a6ceb89d_PMHopField>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap vs)
              ($SortWrappers.$PSF<Mem_a6ceb89d_PMHopField>To$Snap ws)
              )
    :qid |qp.$PSF<Mem_a6ceb89d_PMHopField>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_Mem_a6ceb89d_PMHopField pm s))
    :pattern (($PSF.perm_Mem_a6ceb89d_PMHopField pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_Mem_a6ceb89d_PMHopField f s) true)
    :pattern (($PSF.loc_Mem_a6ceb89d_PMHopField f s)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@147@00 () $Perm)
(declare-fun $k@149@00 () $Perm)
(declare-fun $k@150@00 () $Perm)
(declare-fun $k@151@00 () $Perm)
(declare-fun $k@152@00 () $Perm)
(declare-fun $k@153@00 () $Perm)
(declare-fun $k@154@00 () $Perm)
(declare-fun $k@157@00 () $Perm)
(declare-fun $k@159@00 () $Perm)
(declare-fun $k@160@00 () $Perm)
(declare-fun $k@161@00 () $Perm)
(declare-fun $k@162@00 () $Perm)
(declare-fun $k@163@00 () $Perm)
(declare-fun $k@164@00 () $Perm)
(declare-fun $k@165@00 () $Perm)
(declare-fun $k@166@00 () $Perm)
(declare-fun $k@167@00 () $Perm)
(declare-fun $k@168@00 () $Perm)
(declare-fun $k@169@00 () $Perm)
(declare-fun $k@170@00 () $Perm)
(declare-fun $k@171@00 () $Perm)
(declare-fun $k@173@00 () $Perm)
(declare-fun $k@174@00 () $Perm)
(declare-fun sm@175@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
(declare-fun sm@176@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
(declare-fun $k@177@00 () $Perm)
(declare-fun $k@178@00 () $Perm)
(declare-fun $k@181@00 () $Perm)
(declare-fun $k@182@00 () $Perm)
(declare-fun sm@179@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
(declare-fun sm@180@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
(declare-fun sm@183@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
(declare-fun sm@184@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
(declare-fun $k@185@00 () $Perm)
(declare-fun $k@187@00 () $Perm)
(declare-fun $k@188@00 () $Perm)
(declare-fun $k@189@00 () $Perm)
(declare-fun $k@191@00 () $Perm)
(declare-fun $k@192@00 () $Perm)
(declare-fun $k@193@00 () $Perm)
(declare-fun $k@194@00 () $Perm)
(declare-fun $k@197@00 () $Perm)
(declare-fun sm@195@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
(declare-fun sm@196@00 ($Snap ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> Slice<Ref>) $FVF<Intuint32$$$$_E_$$$>)
(declare-fun $k@199@00 () $Perm)
(declare-fun $k@201@00 () $Perm)
(declare-fun $k@202@00 () $Perm)
(declare-fun $k@203@00 () $Perm)
(declare-fun $k@204@00 () $Perm)
(declare-fun $k@217@00 () $Perm)
(declare-fun $k@220@00 () $Perm)
(declare-fun letvar@206@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun letvar@209@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun letvar@212@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun letvar@215@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun inv@207@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@210@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@213@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@216@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@219@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Int)
(declare-fun $k@221@00 () $Perm)
(declare-fun $k@222@00 () $Perm)
(declare-fun $k@223@00 () $Perm)
(declare-fun $k@224@00 () $Perm)
(declare-fun $k@237@00 () $Perm)
(declare-fun $k@240@00 () $Perm)
(declare-fun $k@241@00 () $Perm)
(declare-fun $k@242@00 () $Perm)
(declare-fun $k@243@00 () $Perm)
(declare-fun $k@244@00 () $Perm)
(declare-fun $k@257@00 () $Perm)
(declare-fun $k@260@00 () $Perm)
(declare-fun letvar@226@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun letvar@229@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun letvar@232@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun letvar@235@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun letvar@246@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun letvar@249@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun letvar@252@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun letvar@255@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> Int) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun inv@227@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@230@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@233@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@236@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@239@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Int)
(declare-fun inv@247@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@250@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@253@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@256@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> $Ref) Int)
(declare-fun inv@259@00 ($Snap ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> Slice<Ref> ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Int)
(declare-fun $k@265@00 () $Perm)
(declare-fun $k@267@00 () $Perm)
(declare-fun $k@268@00 () $Perm)
(declare-fun $k@270@00 () $Perm)
(declare-fun $k@271@00 () $Perm)
(declare-fun $k@273@00 () $Perm)
(declare-fun $k@274@00 () $Perm)
(declare-fun $k@276@00 () $Perm)
(declare-fun $k@278@00 () $Perm)
(declare-fun $k@279@00 () $Perm)
(declare-fun $k@287@00 () $Perm)
(declare-fun $k@289@00 () $Perm)
(declare-fun $k@290@00 () $Perm)
(declare-fun $k@291@00 () $Perm)
(declare-fun $k@292@00 () $Perm)
(declare-fun $k@293@00 () $Perm)
(declare-fun $k@294@00 () $Perm)
(declare-fun $k@302@00 () $Perm)
(declare-fun joined_unfolding@352@00 ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Slice<Ref>) Int)
(declare-fun $k@304@00 () $Perm)
(declare-fun $k@305@00 () $Perm)
(declare-fun $k@306@00 () $Perm)
(declare-fun $k@307@00 () $Perm)
(declare-fun $k@308@00 () $Perm)
(declare-fun $k@309@00 () $Perm)
(declare-fun $k@310@00 () $Perm)
(declare-fun $k@311@00 () $Perm)
(declare-fun $k@312@00 () $Perm)
(declare-fun $k@313@00 () $Perm)
(declare-fun $k@314@00 () $Perm)
(declare-fun $k@315@00 () $Perm)
(declare-fun $k@316@00 () $Perm)
(declare-fun $k@317@00 () $Perm)
(declare-fun $k@318@00 () $Perm)
(declare-fun $k@319@00 () $Perm)
(declare-fun $k@320@00 () $Perm)
(declare-fun $k@323@00 () $Perm)
(declare-fun $k@324@00 () $Perm)
(declare-fun $k@325@00 () $Perm)
(declare-fun $k@326@00 () $Perm)
(declare-fun $k@327@00 () $Perm)
(declare-fun $k@328@00 () $Perm)
(declare-fun $k@329@00 () $Perm)
(declare-fun $k@330@00 () $Perm)
(declare-fun $k@331@00 () $Perm)
(declare-fun $k@332@00 () $Perm)
(declare-fun $k@333@00 () $Perm)
(declare-fun $k@334@00 () $Perm)
(declare-fun $k@335@00 () $Perm)
(declare-fun $k@336@00 () $Perm)
(declare-fun $k@337@00 () $Perm)
(declare-fun $k@338@00 () $Perm)
(declare-fun $k@339@00 () $Perm)
(declare-fun $k@340@00 () $Perm)
(declare-fun $k@341@00 () $Perm)
(declare-fun $k@344@00 () $Perm)
(declare-fun $k@345@00 () $Perm)
(declare-fun $k@346@00 () $Perm)
(declare-fun $k@347@00 () $Perm)
(declare-fun $k@348@00 () $Perm)
(declare-fun $k@349@00 () $Perm)
(declare-fun $k@350@00 () $Perm)
(declare-fun $k@351@00 () $Perm)
(declare-fun $t@321@00 () Int)
(declare-fun $t@322@00 () Int)
(declare-fun $t@342@00 () Int)
(declare-fun $t@343@00 () Int)
(declare-fun $k@353@00 () $Perm)
(declare-fun $k@354@00 () $Perm)
(declare-fun $k@356@00 () $Perm)
(declare-fun $k@357@00 () $Perm)
(declare-fun $k@359@00 () $Perm)
(declare-fun $k@360@00 () $Perm)
(declare-fun $k@361@00 () $Perm)
(declare-fun $k@362@00 () $Perm)
(declare-fun $k@363@00 () $Perm)
(declare-fun $k@364@00 () $Perm)
(declare-fun $k@365@00 () $Perm)
(declare-fun $k@366@00 () $Perm)
(declare-fun $k@367@00 () $Perm)
(declare-fun $k@368@00 () $Perm)
(declare-fun $k@369@00 () $Perm)
(declare-fun $k@370@00 () $Perm)
(declare-fun $k@371@00 () $Perm)
(declare-fun $k@400@00 () $Perm)
(declare-fun $k@402@00 () $Perm)
(declare-fun $k@403@00 () $Perm)
(declare-fun $k@404@00 () $Perm)
(declare-fun $k@405@00 () $Perm)
(declare-fun $k@406@00 () $Perm)
(declare-fun joined_unfolding@409@00 ($Snap ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> Int) Tuple2<Ref~_Types>)
(declare-fun $k@407@00 () $Perm)
(declare-fun $k@408@00 () $Perm)
(declare-fun $k@410@00 () $Perm)
(declare-fun $k@412@00 () $Perm)
(declare-fun $k@414@00 () $Perm)
(declare-fun $k@415@00 () $Perm)
(declare-fun $k@416@00 () $Perm)
(declare-fun $k@417@00 () $Perm)
(declare-fun $k@418@00 () $Perm)
(declare-fun $k@419@00 () $Perm)
(declare-fun $k@420@00 () $Perm)
(declare-fun $k@421@00 () $Perm)
(declare-fun $k@422@00 () $Perm)
(declare-fun $k@423@00 () $Perm)
(declare-fun $k@427@00 () $Perm)
(declare-fun $k@428@00 () $Perm)
(declare-fun $k@430@00 () $Perm)
(declare-fun $k@431@00 () $Perm)
(declare-fun $k@432@00 () $Perm)
(declare-fun $k@434@00 () $Perm)
(declare-fun $unresolved@372@00 () $Snap)
(declare-fun $unresolved@373@00 () $Snap)
(declare-fun $unresolved@374@00 () $Snap)
(declare-fun $unresolved@375@00 () $Snap)
(declare-fun $unresolved@376@00 () $Snap)
(declare-fun $unresolved@377@00 () $Snap)
(declare-fun $unresolved@378@00 () $Snap)
(declare-fun $unresolved@379@00 () $Snap)
(declare-fun $unresolved@380@00 () $Snap)
(declare-fun $unresolved@381@00 () $Snap)
(declare-fun $unresolved@382@00 () $Snap)
(declare-fun $unresolved@383@00 () $Snap)
(declare-fun $unresolved@384@00 () $Snap)
(declare-fun $unresolved@385@00 () $Snap)
(declare-fun $unresolved@386@00 () $Snap)
(declare-fun $unresolved@387@00 () $Snap)
(declare-fun $unresolved@388@00 () $Snap)
(declare-fun $unresolved@389@00 () $Snap)
(declare-fun $unresolved@390@00 () $Snap)
(declare-fun $unresolved@391@00 () $Snap)
(declare-fun $unresolved@392@00 () $Snap)
(declare-fun $unresolved@393@00 () $Snap)
(declare-fun $unresolved@394@00 () $Snap)
(declare-fun $unresolved@395@00 () $Snap)
(assert (forall ((s@$ $Snap)) (!
  (=
    (arrayNil_3_Intuint8$$$_S_$$$%limited s@$)
    (arrayNil_3_Intuint8$$$_S_$$$ s@$))
  :pattern ((arrayNil_3_Intuint8$$$_S_$$$ s@$))
  :qid |quant-u-0|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayNil_3_Intuint8$$$_S_$$$%stateless  Bool)
  :pattern ((arrayNil_3_Intuint8$$$_S_$$$%limited s@$))
  :qid |quant-u-1|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (arrayNil_3_Intuint8$$$_S_$$$%limited s@$))) (=>
    (arrayNil_3_Intuint8$$$_S_$$$%precondition s@$)
    (and
      (= (ShArraylen<Int> result@0@00) 1)
      (forall ((idx Int)) (!
        (= (ShArrayloc<Ref> result@0@00 idx) $Ref.null)
        :pattern ((ShArrayloc<Ref> result@0@00 idx))
        )))))
  :pattern ((arrayNil_3_Intuint8$$$_S_$$$%limited s@$))
  :qid |quant-u-120|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (arrayNil_3_Intuint8$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_3_Intuint8$$$_S_$$$%limited s@$))
  :qid |quant-u-121|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (arrayNil_3_Intuint8$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_3_Intuint8$$$_S_$$$%limited s@$))
  :qid |quant-u-122|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_3_Intuint8$$$_S_$$$)) (!
  (=
    (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00)
    (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref s@$ y@1@00))
  :pattern ((unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref s@$ y@1@00))
  :qid |quant-u-2|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_3_Intuint8$$$_S_$$$)) (!
  (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%stateless y@1@00)
  :pattern ((unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))
  :qid |quant-u-3|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_3_Intuint8$$$_S_$$$)) (!
  (let ((result@2@00 (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))) (=>
    (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition s@$ y@1@00)
    (and
      (or
        (= (ShArraylen<Int> result@2@00) 3)
        (= result@2@00 (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)))
      (=
        (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@2@00)
        y@1@00))))
  :pattern ((unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))
  :qid |quant-u-123|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_3_Intuint8$$$_S_$$$)) (!
  (let ((result@2@00 (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))) (=>
    (and
      (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition s@$ y@1@00)
      (not (= (ShArraylen<Int> result@2@00) 3)))
    (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit)))
  :pattern ((unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))
  :qid |quant-u-124|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_3_Intuint8$$$_S_$$$)) (!
  (let ((result@2@00 (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))) (=>
    (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition s@$ y@1@00)
    (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@2@00)))
  :pattern ((unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ y@1@00))
  :qid |quant-u-125|)))
(assert (forall ((s@$ $Snap) (x@3@00 ShArray<Ref>)) (!
  (=
    (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00)
    (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref s@$ x@3@00))
  :pattern ((box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref s@$ x@3@00))
  :qid |quant-u-4|)))
(assert (forall ((s@$ $Snap) (x@3@00 ShArray<Ref>)) (!
  (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%stateless x@3@00)
  :pattern ((box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00))
  :qid |quant-u-5|)))
(assert (forall ((s@$ $Snap) (x@3@00 ShArray<Ref>)) (!
  (let ((result@4@00 (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00))) (=>
    (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition s@$ x@3@00)
    (=
      (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@4@00)
      x@3@00)))
  :pattern ((box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00))
  :qid |quant-u-126|)))
(assert (forall ((s@$ $Snap) (x@3@00 ShArray<Ref>)) (!
  (let ((result@4@00 (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00))) (=>
    (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition s@$ x@3@00)
    (unbox_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@4@00)))
  :pattern ((box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%limited s@$ x@3@00))
  :qid |quant-u-127|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$)
    (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$ s@$))
  :qid |quant-u-6|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-7|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@5@00 (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (and
      (= (ShStructget0of3<Ref> result@5@00) $Ref.null)
      (and
        (= (ShStructget1of3<Ref> result@5@00) $Ref.null)
        (=
          (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> result@5@00)
          (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)))))))
  :pattern ((shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-128|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@5@00 (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (and
      (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%precondition s@$)
      (and
        (= (ShStructget0of3<Ref> result@5@00) $Ref.null)
        (= (ShStructget1of3<Ref> result@5@00) $Ref.null)))
    (and
      (arrayNil_3_Intuint8$$$_S_$$$%precondition $Snap.unit)
      (box_Emb_3_Intuint8$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_3_Intuint8$$$_S_$$$ $Snap.unit)))))
  :pattern ((shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-129|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$)
    (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$ s@$))
  :qid |quant-u-8|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$))
  :qid |quant-u-9|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@6@00 (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%precondition s@$)
    (and
      (=
        (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> result@6@00)
        (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$ $Snap.unit))
      (and
        (= (ShStructget1of3<Ref> result@6@00) $Ref.null)
        (= (ShStructget2of3<Ref> result@6@00) $Ref.null)))))
  :pattern ((shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$))
  :qid |quant-u-130|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@6@00 (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%precondition s@$)
    (shStructDefault_$CurrINFA_Intuint8$$$_S_$$$_CurrHFA_Intuint8$$$_S_$$$_SegLenA_Array3Intuint8$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)))
  :pattern ((shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%limited s@$))
  :qid |quant-u-131|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (Len_daeaf66a_PMBase%limited s@$ s_V0@7@00)
    (Len_daeaf66a_PMBase s@$ s_V0@7@00))
  :pattern ((Len_daeaf66a_PMBase s@$ s_V0@7@00))
  :qid |quant-u-10|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (Len_daeaf66a_PMBase%stateless s_V0@7@00)
  :pattern ((Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))
  :qid |quant-u-11|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@8@00 (Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))) (and
    ($Perm.isReadVar $k@147@00)
    ($Perm.isReadVar $k@149@00)
    ($Perm.isReadVar $k@150@00)
    (=>
      (Len_daeaf66a_PMBase%precondition s@$ s_V0@7@00)
      (and
        (>= result@8@00 4)
        (=
          result@8@00
          (+
            (+ 4 (* ($SortWrappers.$SnapToInt ($Snap.first s@$)) 8))
            (* ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))) 12)))))))
  :pattern ((Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))
  :qid |quant-u-132|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@8@00 (Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))) true)
  :pattern ((Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))
  :qid |quant-u-133|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@8@00 (Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))) true)
  :pattern ((Len_daeaf66a_PMBase%limited s@$ s_V0@7@00))
  :qid |quant-u-134|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (and
    ($Perm.isReadVar $k@147@00)
    ($Perm.isReadVar $k@151@00)
    ($Perm.isReadVar $k@152@00)
    ($Perm.isReadVar $k@153@00)
    ($Perm.isReadVar $k@154@00)
    (=>
      (Len_daeaf66a_PMBase%precondition s@$ s_V0@7@00)
      (=
        (Len_daeaf66a_PMBase s@$ s_V0@7@00)
        (+
          (+ 4 (* ($SortWrappers.$SnapToInt ($Snap.first s@$)) 8))
          (* ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))) 12)))))
  :pattern ((Len_daeaf66a_PMBase s@$ s_V0@7@00))
  :qid |quant-u-135|)))
(assert (forall ((s@$ $Snap) (s_V0@7@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  true
  :pattern ((Len_daeaf66a_PMBase s@$ s_V0@7@00))
  :qid |quant-u-136|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$)
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ s@$))
  :qid |quant-u-12|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-13|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@9@00 (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (and
      (=
        (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> result@9@00)
        (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$ $Snap.unit))
      (= (ShStructget1of2<Ref> result@9@00) $Ref.null))))
  :pattern ((shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-137|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@9@00 (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (shStructDefault_$PathMetaA_DefinedMetaHdr_daeaf66a_T$$$_S_$$$_NumINFA_Intint$$$_S_$$$_NumHopsA_Intint$$$_S_$$$$%precondition $Snap.unit)))
  :pattern ((shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-138|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (=
    (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00)
    (ssliceFromSlice_Ref s@$ s@10@00 i@11@00 j@12@00))
  :pattern ((ssliceFromSlice_Ref s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-14|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (ssliceFromSlice_Ref%stateless s@10@00 i@11@00 j@12@00)
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-15|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (let ((result@13@00 (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))) (=>
    (ssliceFromSlice_Ref%precondition s@$ s@10@00 i@11@00 j@12@00)
    (and
      (= (soffset<Int> result@13@00) (+ (soffset<Int> s@10@00) i@11@00))
      (= (slen<Int> result@13@00) (- j@12@00 i@11@00))
      (= (scap<Int> result@13@00) (- (scap<Int> s@10@00) i@11@00))
      (= (sarray<ShArray<Ref>> result@13@00) (sarray<ShArray<Ref>> s@10@00)))))
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-139|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (let ((result@13@00 (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))) true)
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-140|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (let ((result@13@00 (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))) true)
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-141|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (let ((result@13@00 (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))) true)
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-142|)))
(assert (forall ((s@$ $Snap) (s@10@00 Slice<Ref>) (i@11@00 Int) (j@12@00 Int)) (!
  (let ((result@13@00 (ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))) true)
  :pattern ((ssliceFromSlice_Ref%limited s@$ s@10@00 i@11@00 j@12@00))
  :qid |quant-u-143|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (=
    (Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00)
    (Len_daeaf66a_PMRaw s@$ s_V0@14@00 buf_V0@15@00))
  :pattern ((Len_daeaf66a_PMRaw s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-16|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (Len_daeaf66a_PMRaw%stateless s_V0@14@00 buf_V0@15@00)
  :pattern ((Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-17|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (let ((result@16@00 (Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))) (and
    ($Perm.isReadVar $k@157@00)
    ($Perm.isReadVar $k@159@00)
    ($Perm.isReadVar $k@160@00)
    ($Perm.isReadVar $k@161@00)
    ($Perm.isReadVar $k@162@00)
    (=>
      (Len_daeaf66a_PMRaw%precondition s@$ s_V0@14@00 buf_V0@15@00)
      (and
        (=
          result@16@00
          (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))
        (>= result@16@00 0)))))
  :pattern ((Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-144|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (let ((result@16@00 (Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))) (=>
    (Len_daeaf66a_PMRaw%precondition s@$ s_V0@14@00 buf_V0@15@00)
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00))))
  :pattern ((Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-145|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (let ((result@16@00 (Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))) true)
  :pattern ((Len_daeaf66a_PMRaw%limited s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-146|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@157@00)
    ($Perm.isReadVar $k@163@00)
    ($Perm.isReadVar $k@164@00)
    ($Perm.isReadVar $k@165@00)
    ($Perm.isReadVar $k@166@00)
    ($Perm.isReadVar $k@167@00)
    ($Perm.isReadVar $k@168@00)
    ($Perm.isReadVar $k@169@00)
    ($Perm.isReadVar $k@170@00)
    (=>
      (Len_daeaf66a_PMRaw%precondition s@$ s_V0@14@00 buf_V0@15@00)
      (=
        (Len_daeaf66a_PMRaw s@$ s_V0@14@00 buf_V0@15@00)
        (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))))
  :pattern ((Len_daeaf66a_PMRaw s@$ s_V0@14@00 buf_V0@15@00))
  :pattern ((Len_daeaf66a_PMRaw%stateless s_V0@14@00 buf_V0@15@00) (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@14@00) (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))) buf_V0@15@00))
  :qid |quant-u-147|)))
(assert (forall ((s@$ $Snap) (s_V0@14@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@15@00 Slice<Ref>)) (!
  (=>
    (Len_daeaf66a_PMRaw%precondition s@$ s_V0@14@00 buf_V0@15@00)
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> s_V0@14@00)))
  :pattern ((Len_daeaf66a_PMRaw s@$ s_V0@14@00 buf_V0@15@00))
  :qid |quant-u-148|)))
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (=
    (hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00)
    (hasScionPath_c6e60a1d_PMPath s@$ p_V0@17@00 buf_V0@18@00))
  :pattern ((hasScionPath_c6e60a1d_PMPath s@$ p_V0@17@00 buf_V0@18@00))
  :qid |quant-u-18|)))
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (hasScionPath_c6e60a1d_PMPath%stateless p_V0@17@00 buf_V0@18@00)
  :pattern ((hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00))
  :qid |quant-u-19|)))
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (let ((result@19@00 (hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00))) (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@175@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@176@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    ($Perm.isReadVar $k@171@00)
    ($Perm.isReadVar $k@173@00)
    ($Perm.isReadVar $k@174@00)
    (=>
      (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@17@00 buf_V0@18@00)
      (=
        result@19@00
        (not
          (=
            ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
            (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))))
  :pattern ((hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00))
  :qid |quant-u-149|)))
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (let ((result@19@00 (hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00))) (=>
    (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@17@00 buf_V0@18@00)
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)))
  :pattern ((hasScionPath_c6e60a1d_PMPath%limited s@$ p_V0@17@00 buf_V0@18@00))
  :qid |quant-u-150|)))
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@179@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@180@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@183@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@184@00 s@$ p_V0@17@00 buf_V0@18@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    ($Perm.isReadVar $k@171@00)
    ($Perm.isReadVar $k@177@00)
    ($Perm.isReadVar $k@178@00)
    ($Perm.isReadVar $k@181@00)
    ($Perm.isReadVar $k@182@00)
    (=>
      (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@17@00 buf_V0@18@00)
      (=
        (hasScionPath_c6e60a1d_PMPath s@$ p_V0@17@00 buf_V0@18@00)
        (not
          (=
            ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))
            (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
  :pattern ((hasScionPath_c6e60a1d_PMPath s@$ p_V0@17@00 buf_V0@18@00))
  :pattern ((hasScionPath_c6e60a1d_PMPath%stateless p_V0@17@00 buf_V0@18@00) (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@17@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))) buf_V0@18@00))
  :qid |quant-u-151|)))
(assert (forall ((s@$ $Snap) (p_V0@17@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (buf_V0@18@00 Slice<Ref>)) (!
  (=>
    (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@17@00 buf_V0@18@00)
    (shStructDefault_$BaseA_DefinedBase_daeaf66a_T$$$_S_$$$_RawA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
  :pattern ((hasScionPath_c6e60a1d_PMPath s@$ p_V0@17@00 buf_V0@18@00))
  :qid |quant-u-152|)))
(assert (forall ((s@$ $Snap) (left@20@00 Int) (right@21@00 Int)) (!
  (=
    (intBitwiseAnd%limited s@$ left@20@00 right@21@00)
    (intBitwiseAnd s@$ left@20@00 right@21@00))
  :pattern ((intBitwiseAnd s@$ left@20@00 right@21@00))
  :qid |quant-u-20|)))
(assert (forall ((s@$ $Snap) (left@20@00 Int) (right@21@00 Int)) (!
  (intBitwiseAnd%stateless left@20@00 right@21@00)
  :pattern ((intBitwiseAnd%limited s@$ left@20@00 right@21@00))
  :qid |quant-u-21|)))
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  (=
    (Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00)
    (Len_a6ceb89d_PMrawPath s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :pattern ((Len_a6ceb89d_PMrawPath s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-22|)))
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  (Len_a6ceb89d_PMrawPath%stateless p_V0@23@00 underlyingBuf_V0@24@00)
  :pattern ((Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-23|)))
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  (let ((result@25@00 (Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00))) (and
    ($Perm.isReadVar $k@185@00)
    (=>
      (Len_a6ceb89d_PMrawPath%precondition s@$ p_V0@23@00 underlyingBuf_V0@24@00)
      (>= result@25@00 0))))
  :pattern ((Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-153|)))
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  (let ((result@25@00 (Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00))) true)
  :pattern ((Len_a6ceb89d_PMrawPath%limited s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-154|)))
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@185@00)
    ($Perm.isReadVar $k@187@00)
    ($Perm.isReadVar $k@188@00)
    (=>
      (Len_a6ceb89d_PMrawPath%precondition s@$ p_V0@23@00 underlyingBuf_V0@24@00)
      (=
        (Len_a6ceb89d_PMrawPath s@$ p_V0@23@00 underlyingBuf_V0@24@00)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))))
  :pattern ((Len_a6ceb89d_PMrawPath s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-155|)))
(assert (forall ((s@$ $Snap) (p_V0@23@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@24@00 Slice<Ref>)) (!
  true
  :pattern ((Len_a6ceb89d_PMrawPath s@$ p_V0@23@00 underlyingBuf_V0@24@00))
  :qid |quant-u-156|)))
(assert (forall ((s@$ $Snap) (p_V0@26@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@27@00 Slice<Ref>)) (!
  (=
    (Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00)
    (Len_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))
  :pattern ((Len_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))
  :qid |quant-u-24|)))
(assert (forall ((s@$ $Snap) (p_V0@26@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@27@00 Slice<Ref>)) (!
  (Len_c6e60a1d_PMPath%stateless p_V0@26@00 ubuf_V0@27@00)
  :pattern ((Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))
  :qid |quant-u-25|)))
(assert (forall ((s@$ $Snap) (p_V0@26@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@27@00 Slice<Ref>)) (!
  (let ((result@28@00 (Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))) (and
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@195@00 s@$ p_V0@26@00 ubuf_V0@27@00) (ShStructget0of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))
    (=
      ($FVF.lookup_Intuint32$$$$_E_$$$ (sm@196@00 s@$ p_V0@26@00 ubuf_V0@27@00) (ShStructget1of2<Ref> (ShStructget0of4<ShStruct2<Ref~_Ref>> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> p_V0@26@00) (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@$))))
    ($Perm.isReadVar $k@189@00)
    ($Perm.isReadVar $k@191@00)
    ($Perm.isReadVar $k@192@00)
    ($Perm.isReadVar $k@193@00)
    ($Perm.isReadVar $k@194@00)
    ($Perm.isReadVar $k@197@00)
    (=>
      (Len_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00)
      (and
        (=>
          (not (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00))
          (= result@28@00 16))
        (=>
          (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)
          (=
            result@28@00
            (+
              16
              (Len_daeaf66a_PMRaw ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))))))))))
  :pattern ((Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))
  :qid |quant-u-157|)))
(assert (forall ((s@$ $Snap) (p_V0@26@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@27@00 Slice<Ref>)) (!
  (let ((result@28@00 (Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))) (=>
    (Len_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00)
    (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00)))
  :pattern ((Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))
  :qid |quant-u-158|)))
(assert (forall ((s@$ $Snap) (p_V0@26@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@27@00 Slice<Ref>)) (!
  (let ((result@28@00 (Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))) (=>
    (Len_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00)
    (and
      (hasScionPath_c6e60a1d_PMPath%precondition s@$ p_V0@26@00 ubuf_V0@27@00)
      (=>
        (hasScionPath_c6e60a1d_PMPath s@$ p_V0@26@00 ubuf_V0@27@00)
        (and
          (ssliceFromSlice_Ref%precondition ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))
          (Len_daeaf66a_PMRaw%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) ubuf_V0@27@00 16 (slen<Int> ubuf_V0@27@00))))))))
  :pattern ((Len_c6e60a1d_PMPath%limited s@$ p_V0@26@00 ubuf_V0@27@00))
  :qid |quant-u-159|)))
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  (=
    (Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00)
    (Len_c385169_PMPath s@$ o_V0@29@00 ubuf_V0@30@00))
  :pattern ((Len_c385169_PMPath s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-26|)))
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  (Len_c385169_PMPath%stateless o_V0@29@00 ubuf_V0@30@00)
  :pattern ((Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-27|)))
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  (let ((result@31@00 (Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00))) (=>
    (Len_c385169_PMPath%precondition s@$ o_V0@29@00 ubuf_V0@30@00)
    (= result@31@00 32)))
  :pattern ((Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-160|)))
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  (let ((result@31@00 (Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00))) true)
  :pattern ((Len_c385169_PMPath%limited s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-161|)))
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  (=>
    (Len_c385169_PMPath%precondition s@$ o_V0@29@00 ubuf_V0@30@00)
    (= (Len_c385169_PMPath s@$ o_V0@29@00 ubuf_V0@30@00) 32))
  :pattern ((Len_c385169_PMPath s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-162|)))
(assert (forall ((s@$ $Snap) (o_V0@29@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@30@00 Slice<Ref>)) (!
  true
  :pattern ((Len_c385169_PMPath s@$ o_V0@29@00 ubuf_V0@30@00))
  :qid |quant-u-163|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (=
    (Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00)
    (Len_daeaf66a_PMDecoded s@$ d_V0@32@00 ubuf_V0@33@00))
  :pattern ((Len_daeaf66a_PMDecoded s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-28|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (Len_daeaf66a_PMDecoded%stateless d_V0@32@00 ubuf_V0@33@00)
  :pattern ((Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-29|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (let ((result@34@00 (Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))) (and
    (forall ((i_V1@205@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@205@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@205@00))
          (< $Perm.No $k@201@00))
        (=
          (inv@207@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@205@00))))
          i_V1@205@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@205@00)))
      :qid |quant-u-165|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@207@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@207@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@201@00))
        (=
          (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@207@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@207@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@208@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@208@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@208@00))
          (< $Perm.No $k@201@00))
        (=
          (inv@210@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@208@00))))
          i_V1@208@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@208@00)))
      :qid |quant-u-167|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@210@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@210@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@201@00))
        (=
          (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@210@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@210@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@211@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@211@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@211@00))
          (< $Perm.No $k@201@00))
        (=
          (inv@213@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@211@00))))
          i_V1@211@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@211@00)))
      :qid |quant-u-169|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@213@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@213@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@201@00))
        (=
          (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@213@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@213@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint16$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@214@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@214@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@214@00))
          (< $Perm.No $k@201@00))
        (=
          (inv@216@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@214@00))))
          i_V1@214@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@214@00)))
      :qid |quant-u-171|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@216@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@216@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@201@00))
        (=
          (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@216@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@216@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint32$$$$_E_$$$-fctOfInv|))
    (forall ((i_V2@218@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@218@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@218@00))
          (< $Perm.No $k@201@00))
        (=
          (inv@219@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@218@00)))
          i_V2@218@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@218@00)))
      :qid |quant-u-173|))
    (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
      (=>
        (and
          (and
            (<
              (inv@219@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 (inv@219@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          (< $Perm.No $k@201@00))
        (=
          (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@219@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          h_V0))
      :pattern ((inv@219@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
      :qid |Mem_a6ceb89d_PMHopField-fctOfInv|))
    ($Perm.isReadVar $k@199@00)
    ($Perm.isReadVar $k@201@00)
    ($Perm.isReadVar $k@202@00)
    ($Perm.isReadVar $k@203@00)
    ($Perm.isReadVar $k@204@00)
    ($Perm.isReadVar $k@217@00)
    ($Perm.isReadVar $k@220@00)
    (=>
      (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@32@00 ubuf_V0@33@00)
      (and
        (=
          result@34@00
          (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))
        (>= result@34@00 0)))))
  :pattern ((Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-174|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (let ((result@34@00 (Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))) (=>
    (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@32@00 ubuf_V0@33@00)
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00))))
  :pattern ((Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-175|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (let ((result@34@00 (Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))) true)
  :pattern ((Len_daeaf66a_PMDecoded%limited s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-176|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (and
    (forall ((i_V1@225@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@225@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@225@00))
          (< $Perm.No $k@221@00))
        (=
          (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00))))
          i_V1@225@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@225@00)))
      :qid |quant-u-178|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@221@00))
        (=
          (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@227@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@228@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@228@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@228@00))
          (< $Perm.No $k@221@00))
        (=
          (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00))))
          i_V1@228@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@228@00)))
      :qid |quant-u-180|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@221@00))
        (=
          (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@230@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@231@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@231@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@231@00))
          (< $Perm.No $k@221@00))
        (=
          (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00))))
          i_V1@231@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@231@00)))
      :qid |quant-u-182|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@221@00))
        (=
          (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@233@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint16$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@234@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@234@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@234@00))
          (< $Perm.No $k@221@00))
        (=
          (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@234@00))))
          i_V1@234@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@234@00)))
      :qid |quant-u-184|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@221@00))
        (=
          (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@236@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint32$$$$_E_$$$-fctOfInv|))
    (forall ((i_V2@238@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@238@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@238@00))
          (< $Perm.No $k@221@00))
        (=
          (inv@239@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@238@00)))
          i_V2@238@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@238@00)))
      :qid |quant-u-186|))
    (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
      (=>
        (and
          (and
            (<
              (inv@239@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 (inv@239@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          (< $Perm.No $k@221@00))
        (=
          (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@239@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          h_V0))
      :pattern ((inv@239@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
      :qid |Mem_a6ceb89d_PMHopField-fctOfInv|))
    (forall ((i_V1@245@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@245@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@245@00))
          (< $Perm.No $k@241@00))
        (=
          (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00))))
          i_V1@245@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@245@00)))
      :qid |quant-u-188|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@241@00))
        (=
          (ShStructget0of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@247@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@248@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@248@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@248@00))
          (< $Perm.No $k@241@00))
        (=
          (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00))))
          i_V1@248@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@248@00)))
      :qid |quant-u-190|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@241@00))
        (=
          (ShStructget1of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@250@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Bool$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@251@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@251@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@251@00))
          (< $Perm.No $k@241@00))
        (=
          (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00))))
          i_V1@251@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@251@00)))
      :qid |quant-u-192|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@241@00))
        (=
          (ShStructget2of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@253@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint16$$$$_E_$$$-fctOfInv|))
    (forall ((i_V1@254@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@254@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 i_V1@254@00))
          (< $Perm.No $k@241@00))
        (=
          (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@254@00))))
          i_V1@254@00))
      :pattern ((ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) i_V1@254@00)))
      :qid |quant-u-194|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))))
            (<= 0 (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 r)))
          (< $Perm.No $k@241@00))
        (=
          (ShStructget3of4<Ref> (ShArrayloc<ShStruct4<Ref~_Ref~_Ref~_Ref>> (sarray<ShArray<ShStruct4<Ref~_Ref~_Ref~_Ref>>> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap.first ($Snap.second s@$)))) (inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))))
          r))
      :pattern ((inv@256@00 s@$ d_V0@32@00 ubuf_V0@33@00 r))
      :qid |Intuint32$$$$_E_$$$-fctOfInv|))
    (forall ((i_V2@258@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V2@258@00
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 i_V2@258@00))
          (< $Perm.No $k@241@00))
        (=
          (inv@259@00 s@$ d_V0@32@00 ubuf_V0@33@00 (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@258@00)))
          i_V2@258@00))
      :pattern ((ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) i_V2@258@00)))
      :qid |quant-u-196|))
    (forall ((h_V0 ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
      (=>
        (and
          (and
            (<
              (inv@259@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)
              (slen<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (<= 0 (inv@259@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          (< $Perm.No $k@241@00))
        (=
          (ShArrayloc<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (sarray<ShArray<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (sadd $Snap.unit (soffset<Int> ($SortWrappers.$SnapToSlice<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) (inv@259@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0)))
          h_V0))
      :pattern ((inv@259@00 s@$ d_V0@32@00 ubuf_V0@33@00 h_V0))
      :qid |Mem_a6ceb89d_PMHopField-fctOfInv|))
    ($Perm.isReadVar $k@199@00)
    ($Perm.isReadVar $k@221@00)
    ($Perm.isReadVar $k@222@00)
    ($Perm.isReadVar $k@223@00)
    ($Perm.isReadVar $k@224@00)
    ($Perm.isReadVar $k@237@00)
    ($Perm.isReadVar $k@240@00)
    ($Perm.isReadVar $k@241@00)
    ($Perm.isReadVar $k@242@00)
    ($Perm.isReadVar $k@243@00)
    ($Perm.isReadVar $k@244@00)
    ($Perm.isReadVar $k@257@00)
    ($Perm.isReadVar $k@260@00)
    (=>
      (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@32@00 ubuf_V0@33@00)
      (=
        (Len_daeaf66a_PMDecoded s@$ d_V0@32@00 ubuf_V0@33@00)
        (Len_daeaf66a_PMBase ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))))
  :pattern ((Len_daeaf66a_PMDecoded s@$ d_V0@32@00 ubuf_V0@33@00))
  :pattern ((Len_daeaf66a_PMDecoded%stateless d_V0@32@00 ubuf_V0@33@00) (dynamic_pred_6%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> d_V0@32@00) (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))) ubuf_V0@33@00))
  :qid |quant-u-197|)))
(assert (forall ((s@$ $Snap) (d_V0@32@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@33@00 Slice<Ref>)) (!
  (=>
    (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@32@00 ubuf_V0@33@00)
    (Len_daeaf66a_PMBase%precondition ($Snap.first s@$) (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> d_V0@32@00)))
  :pattern ((Len_daeaf66a_PMDecoded s@$ d_V0@32@00 ubuf_V0@33@00))
  :qid |quant-u-198|)))
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  (=
    (Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00)
    (Len_4cddb96f_MPath s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :pattern ((Len_4cddb96f_MPath s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-30|)))
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  (Len_4cddb96f_MPath%stateless o_V0@35@00 underlyingBuf_V0@36@00)
  :pattern ((Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-31|)))
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  (let ((result@37@00 (Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00))) (=>
    (Len_4cddb96f_MPath%precondition s@$ o_V0@35@00 underlyingBuf_V0@36@00)
    (<= 0 result@37@00)))
  :pattern ((Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-199|)))
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  (let ((result@37@00 (Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00))) true)
  :pattern ((Len_4cddb96f_MPath%limited s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-200|)))
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  (=>
    (Len_4cddb96f_MPath%precondition s@$ o_V0@35@00 underlyingBuf_V0@36@00)
    (= (Len_4cddb96f_MPath s@$ o_V0@35@00 underlyingBuf_V0@36@00) 0))
  :pattern ((Len_4cddb96f_MPath s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-201|)))
(assert (forall ((s@$ $Snap) (o_V0@35@00 Tuple0) (underlyingBuf_V0@36@00 Slice<Ref>)) (!
  true
  :pattern ((Len_4cddb96f_MPath s@$ o_V0@35@00 underlyingBuf_V0@36@00))
  :qid |quant-u-202|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$)
    (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ s@$))
  :pattern ((arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ s@$))
  :qid |quant-u-32|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%stateless  Bool)
  :pattern ((arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-33|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@38@00 (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) (=>
    (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition s@$)
    (and
      (= (ShArraylen<Int> result@38@00) 1)
      (forall ((idx Int)) (!
        (= (ShArrayloc<Ref> result@38@00 idx) $Ref.null)
        :pattern ((ShArrayloc<Ref> result@38@00 idx))
        )))))
  :pattern ((arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-203|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@38@00 (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-204|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@38@00 (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-205|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (=
    (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00)
    (BitAnd3_ca158f5e_F s@$ b_V0@39@00))
  :pattern ((BitAnd3_ca158f5e_F s@$ b_V0@39@00))
  :qid |quant-u-34|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (BitAnd3_ca158f5e_F%stateless b_V0@39@00)
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-35|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) (=>
    (BitAnd3_ca158f5e_F%precondition s@$ b_V0@39@00)
    (and
      (and
        (<= 0 (intBitwiseAnd $Snap.unit b_V0@39@00 3))
        (<= (intBitwiseAnd $Snap.unit b_V0@39@00 3) 3))
      (=> (= b_V0@39@00 0) (= result@40@00 0))
      (=> (= b_V0@39@00 3) (= result@40@00 3))
      (=> (= b_V0@39@00 4) (= result@40@00 0))
      (= result@40@00 (intBitwiseAnd $Snap.unit b_V0@39@00 3)))))
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-206|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) (=>
    (BitAnd3_ca158f5e_F%precondition s@$ b_V0@39@00)
    (and
      (intBitwiseAnd%precondition $Snap.unit b_V0@39@00 3)
      (=>
        (<= 0 (intBitwiseAnd $Snap.unit b_V0@39@00 3))
        (intBitwiseAnd%precondition $Snap.unit b_V0@39@00 3)))))
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-207|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) true)
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-208|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) true)
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-209|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) true)
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-210|)))
(assert (forall ((s@$ $Snap) (b_V0@39@00 Int)) (!
  (let ((result@40@00 (BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))) (=>
    (BitAnd3_ca158f5e_F%precondition s@$ b_V0@39@00)
    (intBitwiseAnd%precondition $Snap.unit b_V0@39@00 3)))
  :pattern ((BitAnd3_ca158f5e_F%limited s@$ b_V0@39@00))
  :qid |quant-u-211|)))
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (=
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00)
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-36|)))
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless p_V0@41@00 underlyingBuf_V0@42@00)
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-37|)))
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (let ((result@43@00 (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00))) (and
    ($Perm.isReadVar $k@265@00)
    (=>
      (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@41@00 underlyingBuf_V0@42@00)
      (>= result@43@00 0))))
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-212|)))
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (let ((result@43@00 (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00))) true)
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-213|)))
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@265@00)
    ($Perm.isReadVar $k@267@00)
    (=>
      (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@41@00 underlyingBuf_V0@42@00)
      (=
        (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@41@00 underlyingBuf_V0@42@00)
        (Len_a6ceb89d_PMrawPath s@$ p_V0@41@00 underlyingBuf_V0@42@00))))
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-214|)))
(assert (forall ((s@$ $Snap) (p_V0@41@00 ShStruct2<Ref~_Ref>) (underlyingBuf_V0@42@00 Slice<Ref>)) (!
  (=>
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@41@00 underlyingBuf_V0@42@00)
    (Len_a6ceb89d_PMrawPath%precondition s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :pattern ((PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@41@00 underlyingBuf_V0@42@00))
  :qid |quant-u-215|)))
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (=
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00)
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ s_V0@44@00 buf_V0@45@00))
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-38|)))
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless s_V0@44@00 buf_V0@45@00)
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-39|)))
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (let ((result@46@00 (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00))) (and
    ($Perm.isReadVar $k@268@00)
    (=>
      (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ s_V0@44@00 buf_V0@45@00)
      (>= result@46@00 0))))
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-216|)))
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (let ((result@46@00 (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00))) true)
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-217|)))
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@268@00)
    ($Perm.isReadVar $k@270@00)
    (=>
      (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ s_V0@44@00 buf_V0@45@00)
      (=
        (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ s_V0@44@00 buf_V0@45@00)
        (Len_daeaf66a_PMRaw s@$ s_V0@44@00 buf_V0@45@00))))
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-218|)))
(assert (forall ((s@$ $Snap) (s_V0@44@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (buf_V0@45@00 Slice<Ref>)) (!
  (=>
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ s_V0@44@00 buf_V0@45@00)
    (Len_daeaf66a_PMRaw%precondition s@$ s_V0@44@00 buf_V0@45@00))
  :pattern ((PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ s_V0@44@00 buf_V0@45@00))
  :qid |quant-u-219|)))
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (=
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00)
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@47@00 ubuf_V0@48@00))
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-40|)))
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless p_V0@47@00 ubuf_V0@48@00)
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-41|)))
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (let ((result@49@00 (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00))) (and
    ($Perm.isReadVar $k@271@00)
    (=>
      (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@47@00 ubuf_V0@48@00)
      (>= result@49@00 0))))
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-220|)))
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (let ((result@49@00 (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00))) true)
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-221|)))
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@271@00)
    ($Perm.isReadVar $k@273@00)
    (=>
      (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@47@00 ubuf_V0@48@00)
      (=
        (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@47@00 ubuf_V0@48@00)
        (Len_c6e60a1d_PMPath s@$ p_V0@47@00 ubuf_V0@48@00))))
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-222|)))
(assert (forall ((s@$ $Snap) (p_V0@47@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (ubuf_V0@48@00 Slice<Ref>)) (!
  (=>
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ p_V0@47@00 ubuf_V0@48@00)
    (Len_c6e60a1d_PMPath%precondition s@$ p_V0@47@00 ubuf_V0@48@00))
  :pattern ((PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ p_V0@47@00 ubuf_V0@48@00))
  :qid |quant-u-223|)))
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (=
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00)
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@50@00 ubuf_V0@51@00))
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-42|)))
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless o_V0@50@00 ubuf_V0@51@00)
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-43|)))
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (let ((result@52@00 (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00))) (and
    ($Perm.isReadVar $k@274@00)
    (=>
      (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@50@00 ubuf_V0@51@00)
      (>= result@52@00 0))))
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-224|)))
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (let ((result@52@00 (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00))) true)
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-225|)))
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@274@00)
    (=>
      (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@50@00 ubuf_V0@51@00)
      (=
        (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@50@00 ubuf_V0@51@00)
        (Len_c385169_PMPath $Snap.unit o_V0@50@00 ubuf_V0@51@00))))
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-226|)))
(assert (forall ((s@$ $Snap) (o_V0@50@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (ubuf_V0@51@00 Slice<Ref>)) (!
  (=>
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@50@00 ubuf_V0@51@00)
    (Len_c385169_PMPath%precondition $Snap.unit o_V0@50@00 ubuf_V0@51@00))
  :pattern ((PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@50@00 ubuf_V0@51@00))
  :qid |quant-u-227|)))
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (=
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00)
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ d_V0@53@00 ubuf_V0@54@00))
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-44|)))
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless d_V0@53@00 ubuf_V0@54@00)
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-45|)))
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (let ((result@55@00 (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00))) (and
    ($Perm.isReadVar $k@276@00)
    (=>
      (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ d_V0@53@00 ubuf_V0@54@00)
      (>= result@55@00 0))))
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-228|)))
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (let ((result@55@00 (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00))) true)
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-229|)))
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@276@00)
    ($Perm.isReadVar $k@278@00)
    (=>
      (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ d_V0@53@00 ubuf_V0@54@00)
      (=
        (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ d_V0@53@00 ubuf_V0@54@00)
        (Len_daeaf66a_PMDecoded s@$ d_V0@53@00 ubuf_V0@54@00))))
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-230|)))
(assert (forall ((s@$ $Snap) (d_V0@53@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (ubuf_V0@54@00 Slice<Ref>)) (!
  (=>
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ d_V0@53@00 ubuf_V0@54@00)
    (Len_daeaf66a_PMDecoded%precondition s@$ d_V0@53@00 ubuf_V0@54@00))
  :pattern ((PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ d_V0@53@00 ubuf_V0@54@00))
  :qid |quant-u-231|)))
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (=
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00)
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-46|)))
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%stateless o_V0@56@00 underlyingBuf_V0@57@00)
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-47|)))
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (let ((result@58@00 (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00))) (and
    ($Perm.isReadVar $k@279@00)
    (=>
      (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@56@00 underlyingBuf_V0@57@00)
      (>= result@58@00 0))))
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-232|)))
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (let ((result@58@00 (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00))) true)
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%limited s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-233|)))
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@279@00)
    (=>
      (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@56@00 underlyingBuf_V0@57@00)
      (=
        (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@56@00 underlyingBuf_V0@57@00)
        (Len_4cddb96f_MPath $Snap.unit o_V0@56@00 underlyingBuf_V0@57@00))))
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-234|)))
(assert (forall ((s@$ $Snap) (o_V0@56@00 Tuple0) (underlyingBuf_V0@57@00 Slice<Ref>)) (!
  (=>
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition s@$ o_V0@56@00 underlyingBuf_V0@57@00)
    (Len_4cddb96f_MPath%precondition $Snap.unit o_V0@56@00 underlyingBuf_V0@57@00))
  :pattern ((DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof s@$ o_V0@56@00 underlyingBuf_V0@57@00))
  :qid |quant-u-235|)))
(assert (forall ((s@$ $Snap) (y@59@00 Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
  (=
    (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@59@00)
    (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref s@$ y@59@00))
  :pattern ((unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref s@$ y@59@00))
  :qid |quant-u-48|)))
(assert (forall ((s@$ $Snap) (y@59@00 Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
  (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%stateless y@59@00)
  :pattern ((unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@59@00))
  :qid |quant-u-49|)))
(assert (forall ((s@$ $Snap) (y@59@00 Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
  (let ((result@60@00 (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@59@00))) (=>
    (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition s@$ y@59@00)
    (and
      (or
        (= (ShArraylen<Int> result@60@00) 1)
        (= result@60@00 (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)))
      (=
        (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@60@00)
        y@59@00))))
  :pattern ((unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@59@00))
  :qid |quant-u-236|)))
(assert (forall ((s@$ $Snap) (y@59@00 Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
  (let ((result@60@00 (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@59@00))) (=>
    (and
      (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition s@$ y@59@00)
      (not (= (ShArraylen<Int> result@60@00) 1)))
    (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit)))
  :pattern ((unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@59@00))
  :qid |quant-u-237|)))
(assert (forall ((s@$ $Snap) (y@59@00 Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$)) (!
  (let ((result@60@00 (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@59@00))) (=>
    (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition s@$ y@59@00)
    (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@60@00)))
  :pattern ((unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ y@59@00))
  :qid |quant-u-238|)))
(assert (forall ((s@$ $Snap) (x@61@00 ShArray<Ref>)) (!
  (=
    (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@61@00)
    (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref s@$ x@61@00))
  :pattern ((box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref s@$ x@61@00))
  :qid |quant-u-50|)))
(assert (forall ((s@$ $Snap) (x@61@00 ShArray<Ref>)) (!
  (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%stateless x@61@00)
  :pattern ((box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@61@00))
  :qid |quant-u-51|)))
(assert (forall ((s@$ $Snap) (x@61@00 ShArray<Ref>)) (!
  (let ((result@62@00 (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@61@00))) (=>
    (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition s@$ x@61@00)
    (=
      (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@62@00)
      x@61@00)))
  :pattern ((box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@61@00))
  :qid |quant-u-239|)))
(assert (forall ((s@$ $Snap) (x@61@00 ShArray<Ref>)) (!
  (let ((result@62@00 (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@61@00))) (=>
    (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition s@$ x@61@00)
    (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@62@00)))
  :pattern ((box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%limited s@$ x@61@00))
  :qid |quant-u-240|)))
(assert (forall ((s@$ $Snap)) (!
  (= (arrayNil_1_Intbyte$$$_S_$$$%limited s@$) (arrayNil_1_Intbyte$$$_S_$$$ s@$))
  :pattern ((arrayNil_1_Intbyte$$$_S_$$$ s@$))
  :qid |quant-u-52|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayNil_1_Intbyte$$$_S_$$$%stateless  Bool)
  :pattern ((arrayNil_1_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-53|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@63@00 (arrayNil_1_Intbyte$$$_S_$$$%limited s@$))) (=>
    (arrayNil_1_Intbyte$$$_S_$$$%precondition s@$)
    (and
      (= (ShArraylen<Int> result@63@00) 1)
      (forall ((idx Int)) (!
        (= (ShArrayloc<Ref> result@63@00 idx) $Ref.null)
        :pattern ((ShArrayloc<Ref> result@63@00 idx))
        )))))
  :pattern ((arrayNil_1_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-241|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@63@00 (arrayNil_1_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_1_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-242|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@63@00 (arrayNil_1_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_1_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-243|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (=
    (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00)
    (Length_840d9458_MAddrType s@$ tl_V0@64@00))
  :pattern ((Length_840d9458_MAddrType s@$ tl_V0@64@00))
  :qid |quant-u-54|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (Length_840d9458_MAddrType%stateless tl_V0@64@00)
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-55|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (let ((result@65@00 (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))) (=>
    (Length_840d9458_MAddrType%precondition s@$ tl_V0@64@00)
    (and
      (= result@65@00 (* 4 (+ 1 (BitAnd3_ca158f5e_F $Snap.unit tl_V0@64@00))))
      (=> (= tl_V0@64@00 0) (= result@65@00 4))
      (=> (= tl_V0@64@00 4) (= result@65@00 4))
      (=> (= tl_V0@64@00 3) (= result@65@00 16)))))
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-244|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (let ((result@65@00 (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))) (=>
    (Length_840d9458_MAddrType%precondition s@$ tl_V0@64@00)
    (BitAnd3_ca158f5e_F%precondition $Snap.unit tl_V0@64@00)))
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-245|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (let ((result@65@00 (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))) true)
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-246|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (let ((result@65@00 (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))) true)
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-247|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (let ((result@65@00 (Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))) true)
  :pattern ((Length_840d9458_MAddrType%limited s@$ tl_V0@64@00))
  :qid |quant-u-248|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (=>
    (Length_840d9458_MAddrType%precondition s@$ tl_V0@64@00)
    (=
      (Length_840d9458_MAddrType s@$ tl_V0@64@00)
      (* 4 (+ 1 (intBitwiseAnd $Snap.unit tl_V0@64@00 3)))))
  :pattern ((Length_840d9458_MAddrType s@$ tl_V0@64@00))
  :qid |quant-u-249|)))
(assert (forall ((s@$ $Snap) (tl_V0@64@00 Int)) (!
  (=>
    (Length_840d9458_MAddrType%precondition s@$ tl_V0@64@00)
    (intBitwiseAnd%precondition $Snap.unit tl_V0@64@00 3))
  :pattern ((Length_840d9458_MAddrType s@$ tl_V0@64@00))
  :qid |quant-u-250|)))
(assert (forall ((s@$ $Snap) (a_V0@66@00 Int)) (!
  (=
    (Has3Bits_840d9458_MAddrType%limited s@$ a_V0@66@00)
    (Has3Bits_840d9458_MAddrType s@$ a_V0@66@00))
  :pattern ((Has3Bits_840d9458_MAddrType s@$ a_V0@66@00))
  :qid |quant-u-56|)))
(assert (forall ((s@$ $Snap) (a_V0@66@00 Int)) (!
  (Has3Bits_840d9458_MAddrType%stateless a_V0@66@00)
  :pattern ((Has3Bits_840d9458_MAddrType%limited s@$ a_V0@66@00))
  :qid |quant-u-57|)))
(assert (forall ((s@$ $Snap) (a_V0@66@00 Int)) (!
  (=>
    (Has3Bits_840d9458_MAddrType%precondition s@$ a_V0@66@00)
    (=
      (Has3Bits_840d9458_MAddrType s@$ a_V0@66@00)
      (and (<= 0 a_V0@66@00) (<= a_V0@66@00 7))))
  :pattern ((Has3Bits_840d9458_MAddrType s@$ a_V0@66@00))
  :qid |quant-u-251|)))
(assert (forall ((s@$ $Snap) (a_V0@66@00 Int)) (!
  true
  :pattern ((Has3Bits_840d9458_MAddrType s@$ a_V0@66@00))
  :qid |quant-u-252|)))
(assert (forall ((s@$ $Snap) (b@68@00 Bool) (y@69@00 Tuple0)) (!
  (=
    (assertArg2_Tuple0%limited s@$ b@68@00 y@69@00)
    (assertArg2_Tuple0 s@$ b@68@00 y@69@00))
  :pattern ((assertArg2_Tuple0 s@$ b@68@00 y@69@00))
  :qid |quant-u-58|)))
(assert (forall ((s@$ $Snap) (b@68@00 Bool) (y@69@00 Tuple0)) (!
  (assertArg2_Tuple0%stateless b@68@00 y@69@00)
  :pattern ((assertArg2_Tuple0%limited s@$ b@68@00 y@69@00))
  :qid |quant-u-59|)))
(assert (forall ((s@$ $Snap) (b@68@00 Bool) (y@69@00 Tuple0)) (!
  (=>
    (assertArg2_Tuple0%precondition s@$ b@68@00 y@69@00)
    (= (assertArg2_Tuple0 s@$ b@68@00 y@69@00) y@69@00))
  :pattern ((assertArg2_Tuple0 s@$ b@68@00 y@69@00))
  :qid |quant-u-253|)))
(assert (forall ((s@$ $Snap) (b@68@00 Bool) (y@69@00 Tuple0)) (!
  true
  :pattern ((assertArg2_Tuple0 s@$ b@68@00 y@69@00))
  :qid |quant-u-254|)))
(assert (forall ((s@$ $Snap) (b@71@00 Bool) (y@72@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%limited s@$ b@71@00 y@72@00)
    (assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef s@$ b@71@00 y@72@00))
  :pattern ((assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef s@$ b@71@00 y@72@00))
  :qid |quant-u-60|)))
(assert (forall ((s@$ $Snap) (b@71@00 Bool) (y@72@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%stateless b@71@00 y@72@00)
  :pattern ((assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%limited s@$ b@71@00 y@72@00))
  :qid |quant-u-61|)))
(assert (forall ((s@$ $Snap) (b@71@00 Bool) (y@72@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=>
    (assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef%precondition s@$ b@71@00 y@72@00)
    (=
      (assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef s@$ b@71@00 y@72@00)
      y@72@00))
  :pattern ((assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef s@$ b@71@00 y@72@00))
  :qid |quant-u-255|)))
(assert (forall ((s@$ $Snap) (b@71@00 Bool) (y@72@00 ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  true
  :pattern ((assertArg2_ShStruct3_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRefRef s@$ b@71@00 y@72@00))
  :qid |quant-u-256|)))
(assert (forall ((s@$ $Snap) (b@74@00 Bool) (y@75@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%limited s@$ b@74@00 y@75@00)
    (assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ s@$ b@74@00 y@75@00))
  :pattern ((assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ s@$ b@74@00 y@75@00))
  :qid |quant-u-62|)))
(assert (forall ((s@$ $Snap) (b@74@00 Bool) (y@75@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%stateless b@74@00 y@75@00)
  :pattern ((assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%limited s@$ b@74@00 y@75@00))
  :qid |quant-u-63|)))
(assert (forall ((s@$ $Snap) (b@74@00 Bool) (y@75@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=>
    (assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$%precondition s@$ b@74@00 y@75@00)
    (=
      (assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ s@$ b@74@00 y@75@00)
      y@75@00))
  :pattern ((assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ s@$ b@74@00 y@75@00))
  :qid |quant-u-257|)))
(assert (forall ((s@$ $Snap) (b@74@00 Bool) (y@75@00 ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  true
  :pattern ((assertArg2_ShStruct3_ShStruct4_RefRefRefRefShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ShStruct6_RefRefRefRefRefEmb_6_Intbyte$$$_S_$$$ s@$ b@74@00 y@75@00))
  :qid |quant-u-258|)))
(assert (forall ((s@$ $Snap) (b@77@00 Bool) (y@78@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%limited s@$ b@77@00 y@78@00)
    (assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef s@$ b@77@00 y@78@00))
  :pattern ((assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef s@$ b@77@00 y@78@00))
  :qid |quant-u-64|)))
(assert (forall ((s@$ $Snap) (b@77@00 Bool) (y@78@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%stateless b@77@00 y@78@00)
  :pattern ((assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%limited s@$ b@77@00 y@78@00))
  :qid |quant-u-65|)))
(assert (forall ((s@$ $Snap) (b@77@00 Bool) (y@78@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=>
    (assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef%precondition s@$ b@77@00 y@78@00)
    (=
      (assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef s@$ b@77@00 y@78@00)
      y@78@00))
  :pattern ((assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef s@$ b@77@00 y@78@00))
  :qid |quant-u-259|)))
(assert (forall ((s@$ $Snap) (b@77@00 Bool) (y@78@00 ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  true
  :pattern ((assertArg2_ShStruct4_ShStruct2_RefRefRefRefRef s@$ b@77@00 y@78@00))
  :qid |quant-u-260|)))
(assert (forall ((s@$ $Snap) (b@80@00 Bool) (y@81@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%limited s@$ b@80@00 y@81@00)
    (assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef s@$ b@80@00 y@81@00))
  :pattern ((assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef s@$ b@80@00 y@81@00))
  :qid |quant-u-66|)))
(assert (forall ((s@$ $Snap) (b@80@00 Bool) (y@81@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%stateless b@80@00 y@81@00)
  :pattern ((assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%limited s@$ b@80@00 y@81@00))
  :qid |quant-u-67|)))
(assert (forall ((s@$ $Snap) (b@80@00 Bool) (y@81@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=>
    (assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef%precondition s@$ b@80@00 y@81@00)
    (=
      (assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef s@$ b@80@00 y@81@00)
      y@81@00))
  :pattern ((assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef s@$ b@80@00 y@81@00))
  :qid |quant-u-261|)))
(assert (forall ((s@$ $Snap) (b@80@00 Bool) (y@81@00 ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  true
  :pattern ((assertArg2_ShStruct2_ShStruct3_ShStruct3_RefRefEmb_3_Intuint8$$$_S_$$$RefRefRef s@$ b@80@00 y@81@00))
  :qid |quant-u-262|)))
(assert (forall ((s@$ $Snap) (b@83@00 Bool) (y@84@00 ShStruct2<Ref~_Ref>)) (!
  (=
    (assertArg2_ShStruct2_RefRef%limited s@$ b@83@00 y@84@00)
    (assertArg2_ShStruct2_RefRef s@$ b@83@00 y@84@00))
  :pattern ((assertArg2_ShStruct2_RefRef s@$ b@83@00 y@84@00))
  :qid |quant-u-68|)))
(assert (forall ((s@$ $Snap) (b@83@00 Bool) (y@84@00 ShStruct2<Ref~_Ref>)) (!
  (assertArg2_ShStruct2_RefRef%stateless b@83@00 y@84@00)
  :pattern ((assertArg2_ShStruct2_RefRef%limited s@$ b@83@00 y@84@00))
  :qid |quant-u-69|)))
(assert (forall ((s@$ $Snap) (b@83@00 Bool) (y@84@00 ShStruct2<Ref~_Ref>)) (!
  (=>
    (assertArg2_ShStruct2_RefRef%precondition s@$ b@83@00 y@84@00)
    (= (assertArg2_ShStruct2_RefRef s@$ b@83@00 y@84@00) y@84@00))
  :pattern ((assertArg2_ShStruct2_RefRef s@$ b@83@00 y@84@00))
  :qid |quant-u-263|)))
(assert (forall ((s@$ $Snap) (b@83@00 Bool) (y@84@00 ShStruct2<Ref~_Ref>)) (!
  true
  :pattern ((assertArg2_ShStruct2_RefRef s@$ b@83@00 y@84@00))
  :qid |quant-u-264|)))
(assert (forall ((s@$ $Snap) (itf@86@00 Tuple2<Ref~_Types>)) (!
  (=
    (typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00)
    (typeOfInterface_Y$558431e4_a6ceb89d_ s@$ itf@86@00))
  :pattern ((typeOfInterface_Y$558431e4_a6ceb89d_ s@$ itf@86@00))
  :qid |quant-u-70|)))
(assert (forall ((s@$ $Snap) (itf@86@00 Tuple2<Ref~_Types>)) (!
  (typeOfInterface_Y$558431e4_a6ceb89d_%stateless itf@86@00)
  :pattern ((typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))
  :qid |quant-u-71|)))
(assert (forall ((s@$ $Snap) (itf@86@00 Tuple2<Ref~_Types>)) (!
  (let ((result@87@00 (typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))) (=>
    (typeOfInterface_Y$558431e4_a6ceb89d_%precondition s@$ itf@86@00)
    (and
      (= result@87@00 (get1of2<Types> itf@86@00))
      (behavioral_subtype_Types<Bool> result@87@00 (as Y$558431e4_a6ceb89d__Types<Types>  Types)))))
  :pattern ((typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))
  :qid |quant-u-265|)))
(assert (forall ((s@$ $Snap) (itf@86@00 Tuple2<Ref~_Types>)) (!
  (let ((result@87@00 (typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))) true)
  :pattern ((typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))
  :qid |quant-u-266|)))
(assert (forall ((s@$ $Snap) (itf@86@00 Tuple2<Ref~_Types>)) (!
  (let ((result@87@00 (typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))) true)
  :pattern ((typeOfInterface_Y$558431e4_a6ceb89d_%limited s@$ itf@86@00))
  :qid |quant-u-267|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (=
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00)
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-72|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%stateless thisItf@88@00 underlyingBuf_V0@89@00)
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-73|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (and
    ($Perm.isReadVar $k@287@00)
    ($Perm.isReadVar $k@289@00)
    ($Perm.isReadVar $k@290@00)
    ($Perm.isReadVar $k@291@00)
    ($Perm.isReadVar $k@292@00)
    ($Perm.isReadVar $k@293@00)
    ($Perm.isReadVar $k@294@00)
    (=>
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (and
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (as Path_4cddb96f_T_Types<Types>  Types))
          (=
            result@90@00
            (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
          (=
            result@90@00
            (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
          (=
            result@90@00
            (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
          (=
            result@90@00
            (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
          (=
            result@90@00
            (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (=>
          (=
            (get1of2<Types> thisItf@88@00)
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
          (=
            result@90@00
            (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
        (>= result@90@00 0)))))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-268|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (= (get1of2<Types> thisItf@88@00) (as Path_4cddb96f_T_Types<Types>  Types)))
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-269|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (=
        (get1of2<Types> thisItf@88@00)
        (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-270|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (=
        (get1of2<Types> thisItf@88@00)
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-271|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (=
        (get1of2<Types> thisItf@88@00)
        (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-272|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (=
        (get1of2<Types> thisItf@88@00)
        (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-273|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition s@$ thisItf@88@00 underlyingBuf_V0@89@00)
      (=
        (get1of2<Types> thisItf@88@00)
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@88@00)) underlyingBuf_V0@89@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-274|)))
(assert (forall ((s@$ $Snap) (thisItf@88@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@89@00 Slice<Ref>)) (!
  (let ((result@90@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))) true)
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%limited s@$ thisItf@88@00 underlyingBuf_V0@89@00))
  :qid |quant-u-275|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$)
    (arrayNil_4_Interfaceempty_interface$$$_S_$$$ s@$))
  :pattern ((arrayNil_4_Interfaceempty_interface$$$_S_$$$ s@$))
  :qid |quant-u-74|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayNil_4_Interfaceempty_interface$$$_S_$$$%stateless  Bool)
  :pattern ((arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-75|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@91@00 (arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))) (=>
    (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition s@$)
    (and
      (= (ShArraylen<Int> result@91@00) 1)
      (forall ((idx Int)) (!
        (= (ShArrayloc<Ref> result@91@00 idx) $Ref.null)
        :pattern ((ShArrayloc<Ref> result@91@00 idx))
        )))))
  :pattern ((arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-276|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@91@00 (arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-277|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@91@00 (arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_4_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-278|)))
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  (= (sadd%limited s@$ left@92@00 right@93@00) (sadd s@$ left@92@00 right@93@00))
  :pattern ((sadd s@$ left@92@00 right@93@00))
  :qid |quant-u-76|)))
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  (sadd%stateless left@92@00 right@93@00)
  :pattern ((sadd%limited s@$ left@92@00 right@93@00))
  :qid |quant-u-77|)))
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  (let ((result@94@00 (sadd%limited s@$ left@92@00 right@93@00))) (=>
    (sadd%precondition s@$ left@92@00 right@93@00)
    (= result@94@00 (+ left@92@00 right@93@00))))
  :pattern ((sadd%limited s@$ left@92@00 right@93@00))
  :qid |quant-u-279|)))
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  (let ((result@94@00 (sadd%limited s@$ left@92@00 right@93@00))) true)
  :pattern ((sadd%limited s@$ left@92@00 right@93@00))
  :qid |quant-u-280|)))
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  (=>
    (sadd%precondition s@$ left@92@00 right@93@00)
    (= (sadd s@$ left@92@00 right@93@00) (+ left@92@00 right@93@00)))
  :pattern ((sadd s@$ left@92@00 right@93@00))
  :qid |quant-u-281|)))
(assert (forall ((s@$ $Snap) (left@92@00 Int) (right@93@00 Int)) (!
  true
  :pattern ((sadd s@$ left@92@00 right@93@00))
  :qid |quant-u-282|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$)
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ s@$))
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ s@$))
  :qid |quant-u-78|)))
(assert (forall ((s@$ $Snap)) (!
  (as sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%stateless  Bool)
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-79|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@95@00 (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) (=>
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition s@$)
    (and
      (= (soffset<Int> result@95@00) 0)
      (= (slen<Int> result@95@00) 0)
      (= (scap<Int> result@95@00) 0)
      (=
        (sarray<ShArray<Ref>> result@95@00)
        (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)))))))
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-283|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@95@00 (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-284|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@95@00 (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-285|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@95@00 (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-286|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@95@00 (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))) (=>
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition s@$)
    (and
      (and
        (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit)
        (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit)))
      (unbox_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (box_Emb_1_DefinedPath_a6ceb89d_T$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))))
  :pattern ((sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%limited s@$))
  :qid |quant-u-287|)))
(assert (forall ((s@$ $Snap) (x@96@00 ShArray<Ref>)) (!
  (=
    (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@96@00)
    (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref s@$ x@96@00))
  :pattern ((box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref s@$ x@96@00))
  :qid |quant-u-80|)))
(assert (forall ((s@$ $Snap) (x@96@00 ShArray<Ref>)) (!
  (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%stateless x@96@00)
  :pattern ((box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@96@00))
  :qid |quant-u-81|)))
(assert (forall ((s@$ $Snap) (x@96@00 ShArray<Ref>)) (!
  (let ((result@97@00 (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@96@00))) (=>
    (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ x@96@00)
    (=
      (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@97@00)
      x@96@00)))
  :pattern ((box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@96@00))
  :qid |quant-u-288|)))
(assert (forall ((s@$ $Snap) (x@96@00 ShArray<Ref>)) (!
  (let ((result@97@00 (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@96@00))) (=>
    (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ x@96@00)
    (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@97@00)))
  :pattern ((box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@96@00))
  :qid |quant-u-289|)))
(assert (forall ((s@$ $Snap) (y@98@00 Emb_1_Intbyte$$$_S_$$$)) (!
  (=
    (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@98@00)
    (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref s@$ y@98@00))
  :pattern ((unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref s@$ y@98@00))
  :qid |quant-u-82|)))
(assert (forall ((s@$ $Snap) (y@98@00 Emb_1_Intbyte$$$_S_$$$)) (!
  (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%stateless y@98@00)
  :pattern ((unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@98@00))
  :qid |quant-u-83|)))
(assert (forall ((s@$ $Snap) (y@98@00 Emb_1_Intbyte$$$_S_$$$)) (!
  (let ((result@99@00 (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@98@00))) (=>
    (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ y@98@00)
    (and
      (or
        (= (ShArraylen<Int> result@99@00) 1)
        (= result@99@00 (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)))
      (=
        (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@99@00)
        y@98@00))))
  :pattern ((unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@98@00))
  :qid |quant-u-290|)))
(assert (forall ((s@$ $Snap) (y@98@00 Emb_1_Intbyte$$$_S_$$$)) (!
  (let ((result@99@00 (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@98@00))) (=>
    (and
      (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ y@98@00)
      (not (= (ShArraylen<Int> result@99@00) 1)))
    (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit)))
  :pattern ((unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@98@00))
  :qid |quant-u-291|)))
(assert (forall ((s@$ $Snap) (y@98@00 Emb_1_Intbyte$$$_S_$$$)) (!
  (let ((result@99@00 (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@98@00))) (=>
    (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ y@98@00)
    (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@99@00)))
  :pattern ((unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@98@00))
  :qid |quant-u-292|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$)
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ s@$))
  :qid |quant-u-84|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-85|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@100@00 (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (and
      (= (ShStructget0of2<Ref> result@100@00) $Ref.null)
      (= (ShStructget1of2<Ref> result@100@00) $Ref.null))))
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-293|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@100@00 (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))) true)
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-294|)))
(assert (forall ((s@$ $Snap) (s_V0@101@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@102@00 Slice<Ref>)) (!
  (=
    (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@101@00 ubuf_V0@102@00)
    (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION s@$ s_V0@101@00 ubuf_V0@102@00))
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION s@$ s_V0@101@00 ubuf_V0@102@00))
  :qid |quant-u-86|)))
(assert (forall ((s@$ $Snap) (s_V0@101@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@102@00 Slice<Ref>)) (!
  (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%stateless s_V0@101@00 ubuf_V0@102@00)
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@101@00 ubuf_V0@102@00))
  :qid |quant-u-87|)))
(assert (forall ((s@$ $Snap) (s_V0@101@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@102@00 Slice<Ref>)) (!
  (let ((result@103@00 (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@101@00 ubuf_V0@102@00))) (and
    ($Perm.isReadVar $k@302@00)
    (=>
      (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@101@00 ubuf_V0@102@00)
      (<= 0 result@103@00))))
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@101@00 ubuf_V0@102@00))
  :qid |quant-u-295|)))
(assert (forall ((s@$ $Snap) (s_V0@101@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@102@00 Slice<Ref>)) (!
  (let ((result@103@00 (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@101@00 ubuf_V0@102@00))) true)
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@101@00 ubuf_V0@102@00))
  :qid |quant-u-296|)))
(assert (forall ((s@$ $Snap) (s_V0@101@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@102@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@302@00)
    ($Perm.isReadVar $k@304@00)
    ($Perm.isReadVar $k@305@00)
    ($Perm.isReadVar $k@306@00)
    ($Perm.isReadVar $k@307@00)
    ($Perm.isReadVar $k@308@00)
    ($Perm.isReadVar $k@309@00)
    ($Perm.isReadVar $k@310@00)
    ($Perm.isReadVar $k@311@00)
    ($Perm.isReadVar $k@312@00)
    ($Perm.isReadVar $k@313@00)
    ($Perm.isReadVar $k@314@00)
    ($Perm.isReadVar $k@315@00)
    ($Perm.isReadVar $k@316@00)
    ($Perm.isReadVar $k@317@00)
    ($Perm.isReadVar $k@318@00)
    ($Perm.isReadVar $k@319@00)
    ($Perm.isReadVar $k@320@00)
    ($Perm.isReadVar $k@323@00)
    ($Perm.isReadVar $k@324@00)
    ($Perm.isReadVar $k@325@00)
    ($Perm.isReadVar $k@326@00)
    ($Perm.isReadVar $k@327@00)
    ($Perm.isReadVar $k@328@00)
    ($Perm.isReadVar $k@329@00)
    ($Perm.isReadVar $k@330@00)
    ($Perm.isReadVar $k@331@00)
    ($Perm.isReadVar $k@332@00)
    ($Perm.isReadVar $k@333@00)
    ($Perm.isReadVar $k@334@00)
    ($Perm.isReadVar $k@335@00)
    ($Perm.isReadVar $k@336@00)
    ($Perm.isReadVar $k@337@00)
    ($Perm.isReadVar $k@338@00)
    ($Perm.isReadVar $k@339@00)
    ($Perm.isReadVar $k@340@00)
    ($Perm.isReadVar $k@341@00)
    ($Perm.isReadVar $k@344@00)
    ($Perm.isReadVar $k@345@00)
    ($Perm.isReadVar $k@346@00)
    ($Perm.isReadVar $k@347@00)
    ($Perm.isReadVar $k@348@00)
    ($Perm.isReadVar $k@349@00)
    ($Perm.isReadVar $k@350@00)
    ($Perm.isReadVar $k@351@00)
    (=>
      (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@101@00 ubuf_V0@102@00)
      (=
        (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION s@$ s_V0@101@00 ubuf_V0@102@00)
        (+
          (+
            16
            (Length_840d9458_MAddrType $Snap.unit (ite
              (and
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
                (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
              $t@342@00
              $t@321@00)))
          (Length_840d9458_MAddrType $Snap.unit (ite
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
              (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
            $t@343@00
            $t@322@00))))))
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION s@$ s_V0@101@00 ubuf_V0@102@00))
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%stateless s_V0@101@00 ubuf_V0@102@00) (dynamic_pred_0%trigger s@$ (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))) ubuf_V0@102@00))
  :qid |quant-u-297|)))
(assert (forall ((s@$ $Snap) (s_V0@101@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@102@00 Slice<Ref>)) (!
  (=>
    (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@101@00 ubuf_V0@102@00)
    (and
      (and
        (=>
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
              (and
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
                (and
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
                  (not
                    (=
                      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                      (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))))))
          (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
        (Length_840d9458_MAddrType%precondition $Snap.unit (ite
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
            (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
          $t@342@00
          $t@321@00)))
      (and
        (=>
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
            (and
              (not
                (=
                  (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                  (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
              (and
                (not
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
                (and
                  (=
                    (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                    (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
                  (not
                    (=
                      (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                      (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))))))
          (pathPoolInitialized_840d9458_PMSCION%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
        (Length_840d9458_MAddrType%precondition $Snap.unit (ite
          (and
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtn_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtn_840d9458_T_Types<Types>  Types))))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))))
            (=
              (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
              (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))
            (not
              (=
                (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types))))
                (pointer_Types<Types> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))))
            (pathPoolInitialized_840d9458_PMSCION ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))))))))) (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> s_V0@101@00) (pointer_Types<Types> (as SCION_840d9458_T_Types<Types>  Types)))))))
          $t@343@00
          $t@322@00)))))
  :pattern ((AddrHdrLenNoAbstractionLeak_840d9458_PMSCION s@$ s_V0@101@00 ubuf_V0@102@00))
  :qid |quant-u-298|)))
(assert (forall ((s@$ $Snap) (s_V0@104@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@104@00)
    (addrHdrLenAbstractionLeak_840d9458_PMSCION s@$ s_V0@104@00))
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION s@$ s_V0@104@00))
  :qid |quant-u-88|)))
(assert (forall ((s@$ $Snap) (s_V0@104@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (addrHdrLenAbstractionLeak_840d9458_PMSCION%stateless s_V0@104@00)
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@104@00))
  :qid |quant-u-89|)))
(assert (forall ((s@$ $Snap) (s_V0@104@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (let ((result@105@00 (addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@104@00))) (and
    ($Perm.isReadVar $k@353@00)
    ($Perm.isReadVar $k@354@00)
    (=>
      (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@104@00)
      (<= 0 result@105@00))))
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@104@00))
  :qid |quant-u-299|)))
(assert (forall ((s@$ $Snap) (s_V0@104@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (let ((result@105@00 (addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@104@00))) true)
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION%limited s@$ s_V0@104@00))
  :qid |quant-u-300|)))
(assert (forall ((s@$ $Snap) (s_V0@104@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (and
    ($Perm.isReadVar $k@353@00)
    ($Perm.isReadVar $k@354@00)
    (=>
      (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@104@00)
      (=
        (addrHdrLenAbstractionLeak_840d9458_PMSCION s@$ s_V0@104@00)
        (+
          (+
            16
            (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$))))
          (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))))))
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION s@$ s_V0@104@00))
  :qid |quant-u-301|)))
(assert (forall ((s@$ $Snap) (s_V0@104@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=>
    (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition s@$ s_V0@104@00)
    (and
      (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first s@$)))
      (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))))
  :pattern ((addrHdrLenAbstractionLeak_840d9458_PMSCION s@$ s_V0@104@00))
  :qid |quant-u-302|)))
(assert (forall ((s@$ $Snap) (thisItf@106@00 Tuple2<Ref~_Types>)) (!
  (=
    (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%limited s@$ thisItf@106@00)
    (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ s@$ thisItf@106@00))
  :pattern ((IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ s@$ thisItf@106@00))
  :qid |quant-u-90|)))
(assert (forall ((s@$ $Snap) (thisItf@106@00 Tuple2<Ref~_Types>)) (!
  (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%stateless thisItf@106@00)
  :pattern ((IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%limited s@$ thisItf@106@00))
  :qid |quant-u-91|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (=
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00)
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_ s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_ s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-92|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (Len_a6ceb89d_SY$558431e4_a6ceb89d_%stateless thisItf@108@00 underlyingBuf_V0@109@00)
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-93|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (let ((result@110@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))) (and
    ($Perm.isReadVar $k@357@00)
    ($Perm.isReadVar $k@359@00)
    ($Perm.isReadVar $k@360@00)
    ($Perm.isReadVar $k@361@00)
    ($Perm.isReadVar $k@362@00)
    ($Perm.isReadVar $k@363@00)
    ($Perm.isReadVar $k@364@00)
    (=>
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@108@00 underlyingBuf_V0@109@00)
      (and
        (=>
          (=
            (get1of2<Types> thisItf@108@00)
            (as Path_4cddb96f_T_Types<Types>  Types))
          (=
            result@110@00
            (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
        (=>
          (=
            (get1of2<Types> thisItf@108@00)
            (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types)))
          (=
            result@110@00
            (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
        (=>
          (=
            (get1of2<Types> thisItf@108@00)
            (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types)))
          (=
            result@110@00
            (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
        (=>
          (=
            (get1of2<Types> thisItf@108@00)
            (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types)))
          (=
            result@110@00
            (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
        (=>
          (=
            (get1of2<Types> thisItf@108@00)
            (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types)))
          (=
            result@110@00
            (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
        (=>
          (=
            (get1of2<Types> thisItf@108@00)
            (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types)))
          (=
            result@110@00
            (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
        (>= result@110@00 0)))))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-303|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (let ((result@110@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@108@00 underlyingBuf_V0@109@00)
      (=
        (get1of2<Types> thisItf@108@00)
        (as Path_4cddb96f_T_Types<Types>  Types)))
    (DefinedPath_4cddb96f_T$$$$_E_$$$_Len_4cddb96f_MPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<Tuple0> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-304|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (let ((result@110@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@108@00 underlyingBuf_V0@109@00)
      (=
        (get1of2<Types> thisItf@108@00)
        (pointer_Types<Types> (as Decoded_daeaf66a_T_Types<Types>  Types))))
    (PointerDefinedDecoded_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMDecoded_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-305|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (let ((result@110@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@108@00 underlyingBuf_V0@109@00)
      (=
        (get1of2<Types> thisItf@108@00)
        (pointer_Types<Types> (as Path_c385169_T_Types<Types>  Types))))
    (PointerDefinedPath_c385169_T$$$_S_$$$$$$$_E_$$$_Len_c385169_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-306|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (let ((result@110@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@108@00 underlyingBuf_V0@109@00)
      (=
        (get1of2<Types> thisItf@108@00)
        (pointer_Types<Types> (as Path_c6e60a1d_T_Types<Types>  Types))))
    (PointerDefinedPath_c6e60a1d_T$$$_S_$$$$$$$_E_$$$_Len_c6e60a1d_PMPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-307|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (let ((result@110@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@108@00 underlyingBuf_V0@109@00)
      (=
        (get1of2<Types> thisItf@108@00)
        (pointer_Types<Types> (as Raw_daeaf66a_T_Types<Types>  Types))))
    (PointerDefinedRaw_daeaf66a_T$$$_S_$$$$$$$_E_$$$_Len_daeaf66a_PMRaw_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-308|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (let ((result@110@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))) (=>
    (and
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@108@00 underlyingBuf_V0@109@00)
      (=
        (get1of2<Types> thisItf@108@00)
        (pointer_Types<Types> (as rawPath_a6ceb89d_T_Types<Types>  Types))))
    (PointerDefinedrawPath_a6ceb89d_T$$$_S_$$$$$$$_E_$$$_Len_a6ceb89d_PMrawPath_Len_a6ceb89d_SY$558431e4_a6ceb89d__proof%precondition ($Snap.second s@$) (unbox_Poly<ShStruct2<Ref~_Ref>> (get0of2<Ref> thisItf@108@00)) underlyingBuf_V0@109@00)))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-309|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (let ((result@110@00 (Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))) true)
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_%limited s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-310|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (and
    ($Perm.isReadVar $k@357@00)
    ($Perm.isReadVar $k@365@00)
    ($Perm.isReadVar $k@366@00)
    ($Perm.isReadVar $k@367@00)
    ($Perm.isReadVar $k@368@00)
    ($Perm.isReadVar $k@369@00)
    ($Perm.isReadVar $k@370@00)
    ($Perm.isReadVar $k@371@00)
    (=>
      (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@108@00 underlyingBuf_V0@109@00)
      (=
        (Len_a6ceb89d_SY$558431e4_a6ceb89d_ s@$ thisItf@108@00 underlyingBuf_V0@109@00)
        (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback ($Snap.combine
          $Snap.unit
          ($Snap.second s@$)) thisItf@108@00 underlyingBuf_V0@109@00))))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_ s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-311|)))
(assert (forall ((s@$ $Snap) (thisItf@108@00 Tuple2<Ref~_Types>) (underlyingBuf_V0@109@00 Slice<Ref>)) (!
  (=>
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_%precondition s@$ thisItf@108@00 underlyingBuf_V0@109@00)
    (Len_a6ceb89d_SY$558431e4_a6ceb89d_$itfcopy$fallback%precondition ($Snap.combine
      $Snap.unit
      ($Snap.second s@$)) thisItf@108@00 underlyingBuf_V0@109@00))
  :pattern ((Len_a6ceb89d_SY$558431e4_a6ceb89d_ s@$ thisItf@108@00 underlyingBuf_V0@109@00))
  :qid |quant-u-312|)))
(assert (forall ((s@$ $Snap) (x@111@00 Seq<Tuple2<Ref~_Types>>)) (!
  (=
    (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@111@00)
    (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ x@111@00))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ x@111@00))
  :qid |quant-u-94|)))
(assert (forall ((s@$ $Snap) (x@111@00 Seq<Tuple2<Ref~_Types>>)) (!
  (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless x@111@00)
  :pattern ((box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@111@00))
  :qid |quant-u-95|)))
(assert (forall ((s@$ $Snap) (x@111@00 Seq<Tuple2<Ref~_Types>>)) (!
  (let ((result@112@00 (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@111@00))) (=>
    (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ x@111@00)
    (Seq_equal
      (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited $Snap.unit result@112@00)
      x@111@00)))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@111@00))
  :qid |quant-u-313|)))
(assert (forall ((s@$ $Snap) (x@111@00 Seq<Tuple2<Ref~_Types>>)) (!
  (let ((result@112@00 (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@111@00))) (=>
    (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ x@111@00)
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@112@00)))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ x@111@00))
  :qid |quant-u-314|)))
(assert (forall ((s@$ $Snap) (y@113@00 Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
  (Seq_equal
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@113@00)
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ y@113@00))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes s@$ y@113@00))
  :qid |quant-u-96|)))
(assert (forall ((s@$ $Snap) (y@113@00 Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
  (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%stateless y@113@00)
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@113@00))
  :qid |quant-u-97|)))
(assert (forall ((s@$ $Snap) (y@113@00 Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
  (let ((result@114@00 (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@113@00))) (=>
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ y@113@00)
    (and
      (= (Seq_length result@114@00) 4)
      (=
        (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited $Snap.unit result@114@00)
        y@113@00))))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@113@00))
  :qid |quant-u-315|)))
(assert (forall ((s@$ $Snap) (y@113@00 Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
  (let ((result@114@00 (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@113@00))) true)
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@113@00))
  :qid |quant-u-316|)))
(assert (forall ((s@$ $Snap) (y@113@00 Emb_4_Interfaceempty_interface$$$$_E_$$$)) (!
  (let ((result@114@00 (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@113@00))) (=>
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition s@$ y@113@00)
    (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit result@114@00)))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%limited s@$ y@113@00))
  :qid |quant-u-317|)))
(assert (forall ((s@$ $Snap) (x@115@00 ShArray<Ref>)) (!
  (=
    (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@115@00)
    (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ x@115@00))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ x@115@00))
  :qid |quant-u-98|)))
(assert (forall ((s@$ $Snap) (x@115@00 ShArray<Ref>)) (!
  (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless x@115@00)
  :pattern ((box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@115@00))
  :qid |quant-u-99|)))
(assert (forall ((s@$ $Snap) (x@115@00 ShArray<Ref>)) (!
  (let ((result@116@00 (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@115@00))) (=>
    (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ x@115@00)
    (=
      (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@116@00)
      x@115@00)))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@115@00))
  :qid |quant-u-318|)))
(assert (forall ((s@$ $Snap) (x@115@00 ShArray<Ref>)) (!
  (let ((result@116@00 (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@115@00))) (=>
    (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ x@115@00)
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@116@00)))
  :pattern ((box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@115@00))
  :qid |quant-u-319|)))
(assert (forall ((s@$ $Snap) (y@117@00 Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
  (=
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@117@00)
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ y@117@00))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ y@117@00))
  :qid |quant-u-100|)))
(assert (forall ((s@$ $Snap) (y@117@00 Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
  (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless y@117@00)
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@117@00))
  :qid |quant-u-101|)))
(assert (forall ((s@$ $Snap) (y@117@00 Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@118@00 (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@117@00))) (=>
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@117@00)
    (and
      (or
        (= (ShArraylen<Int> result@118@00) 4)
        (=
          result@118@00
          (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (=
        (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@118@00)
        y@117@00))))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@117@00))
  :qid |quant-u-320|)))
(assert (forall ((s@$ $Snap) (y@117@00 Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@118@00 (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@117@00))) (=>
    (and
      (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@117@00)
      (not (= (ShArraylen<Int> result@118@00) 4)))
    (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@117@00))
  :qid |quant-u-321|)))
(assert (forall ((s@$ $Snap) (y@117@00 Emb_4_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@118@00 (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@117@00))) (=>
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@117@00)
    (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@118@00)))
  :pattern ((unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@117@00))
  :qid |quant-u-322|)))
(assert (forall ((s@$ $Snap) (b_V0@119@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (getNumINF_daeaf66a_PMBase%limited s@$ b_V0@119@00)
    (getNumINF_daeaf66a_PMBase s@$ b_V0@119@00))
  :pattern ((getNumINF_daeaf66a_PMBase s@$ b_V0@119@00))
  :qid |quant-u-102|)))
(assert (forall ((s@$ $Snap) (b_V0@119@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (getNumINF_daeaf66a_PMBase%stateless b_V0@119@00)
  :pattern ((getNumINF_daeaf66a_PMBase%limited s@$ b_V0@119@00))
  :qid |quant-u-103|)))
(assert (forall ((s@$ $Snap) (b_V0@119@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@120@00 (getNumINF_daeaf66a_PMBase%limited s@$ b_V0@119@00))) (and
    ($Perm.isReadVar $k@400@00)
    (=>
      (getNumINF_daeaf66a_PMBase%precondition s@$ b_V0@119@00)
      (and (<= 0 result@120@00) (<= result@120@00 3)))))
  :pattern ((getNumINF_daeaf66a_PMBase%limited s@$ b_V0@119@00))
  :qid |quant-u-323|)))
(assert (forall ((s@$ $Snap) (b_V0@119@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@120@00 (getNumINF_daeaf66a_PMBase%limited s@$ b_V0@119@00))) true)
  :pattern ((getNumINF_daeaf66a_PMBase%limited s@$ b_V0@119@00))
  :qid |quant-u-324|)))
(assert (forall ((s@$ $Snap) (b_V0@119@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (and
    ($Perm.isReadVar $k@400@00)
    ($Perm.isReadVar $k@402@00)
    ($Perm.isReadVar $k@403@00)
    (=>
      (getNumINF_daeaf66a_PMBase%precondition s@$ b_V0@119@00)
      (=
        (getNumINF_daeaf66a_PMBase s@$ b_V0@119@00)
        ($SortWrappers.$SnapToInt ($Snap.first s@$)))))
  :pattern ((getNumINF_daeaf66a_PMBase s@$ b_V0@119@00))
  :qid |quant-u-325|)))
(assert (forall ((s@$ $Snap) (b_V0@119@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  true
  :pattern ((getNumINF_daeaf66a_PMBase s@$ b_V0@119@00))
  :qid |quant-u-326|)))
(assert (forall ((s@$ $Snap) (s_V0@121@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (pathType_V0@122@00 Int)) (!
  (=
    (getPathPure_840d9458_PMSCION%limited s@$ s_V0@121@00 pathType_V0@122@00)
    (getPathPure_840d9458_PMSCION s@$ s_V0@121@00 pathType_V0@122@00))
  :pattern ((getPathPure_840d9458_PMSCION s@$ s_V0@121@00 pathType_V0@122@00))
  :qid |quant-u-104|)))
(assert (forall ((s@$ $Snap) (s_V0@121@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (pathType_V0@122@00 Int)) (!
  (getPathPure_840d9458_PMSCION%stateless s_V0@121@00 pathType_V0@122@00)
  :pattern ((getPathPure_840d9458_PMSCION%limited s@$ s_V0@121@00 pathType_V0@122@00))
  :qid |quant-u-105|)))
(assert (forall ((s@$ $Snap) (s_V0@121@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (pathType_V0@122@00 Int)) (!
  (and
    ($Perm.isReadVar $k@404@00)
    ($Perm.isReadVar $k@405@00)
    ($Perm.isReadVar $k@406@00)
    ($Perm.isReadVar $k@407@00)
    ($Perm.isReadVar $k@408@00)
    (=>
      (getPathPure_840d9458_PMSCION%precondition s@$ s_V0@121@00 pathType_V0@122@00)
      (=
        (getPathPure_840d9458_PMSCION s@$ s_V0@121@00 pathType_V0@122@00)
        (ite
          (<
            pathType_V0@122@00
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))))
          (ite
            (and
              (= pathType_V0@122@00 2)
              (not (= pathType_V0@122@00 3))
              (not (= pathType_V0@122@00 1))
              (<
                pathType_V0@122@00
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
            ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
            (ite
              (and
                (not (= pathType_V0@122@00 2))
                (not (= pathType_V0@122@00 3))
                (= pathType_V0@122@00 1)
                (<
                  pathType_V0@122@00
                  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
              ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
              (ite
                (and
                  (not (= pathType_V0@122@00 2))
                  (= pathType_V0@122@00 3)
                  (not (= pathType_V0@122@00 1))
                  (<
                    pathType_V0@122@00
                    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))))))
                ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))))))
                ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
          ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))))))))
  :pattern ((getPathPure_840d9458_PMSCION s@$ s_V0@121@00 pathType_V0@122@00))
  :pattern ((getPathPure_840d9458_PMSCION%stateless s_V0@121@00 pathType_V0@122@00) (PathPoolMemExceptOne_840d9458_F%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))) ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$))))) pathType_V0@122@00))
  :qid |quant-u-327|)))
(assert (forall ((s@$ $Snap) (s_V0@121@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (pathType_V0@122@00 Int)) (!
  true
  :pattern ((getPathPure_840d9458_PMSCION s@$ s_V0@121@00 pathType_V0@122@00))
  :qid |quant-u-328|)))
(assert (forall ((s@$ $Snap) (s_V0@124@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (pathPoolInitialized_840d9458_PMSCION%limited s@$ s_V0@124@00)
    (pathPoolInitialized_840d9458_PMSCION s@$ s_V0@124@00))
  :pattern ((pathPoolInitialized_840d9458_PMSCION s@$ s_V0@124@00))
  :qid |quant-u-106|)))
(assert (forall ((s@$ $Snap) (s_V0@124@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (pathPoolInitialized_840d9458_PMSCION%stateless s_V0@124@00)
  :pattern ((pathPoolInitialized_840d9458_PMSCION%limited s@$ s_V0@124@00))
  :qid |quant-u-107|)))
(assert (forall ((s@$ $Snap) (s_V0@124@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (and
    ($Perm.isReadVar $k@410@00)
    (=>
      (pathPoolInitialized_840d9458_PMSCION%precondition s@$ s_V0@124@00)
      (=
        (pathPoolInitialized_840d9458_PMSCION s@$ s_V0@124@00)
        (not
          (=
            ($SortWrappers.$SnapToSlice<Ref> s@$)
            (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$ $Snap.unit))))))
  :pattern ((pathPoolInitialized_840d9458_PMSCION s@$ s_V0@124@00))
  :qid |quant-u-329|)))
(assert (forall ((s@$ $Snap) (s_V0@124@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=>
    (pathPoolInitialized_840d9458_PMSCION%precondition s@$ s_V0@124@00)
    (sliceDefault_DefinedPath_a6ceb89d_T$$$_S_$$$%precondition $Snap.unit))
  :pattern ((pathPoolInitialized_840d9458_PMSCION s@$ s_V0@124@00))
  :qid |quant-u-330|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (sliceDefault_Intbyte$$$_S_$$$%limited s@$)
    (sliceDefault_Intbyte$$$_S_$$$ s@$))
  :pattern ((sliceDefault_Intbyte$$$_S_$$$ s@$))
  :qid |quant-u-108|)))
(assert (forall ((s@$ $Snap)) (!
  (as sliceDefault_Intbyte$$$_S_$$$%stateless  Bool)
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-109|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@126@00 (sliceDefault_Intbyte$$$_S_$$$%limited s@$))) (=>
    (sliceDefault_Intbyte$$$_S_$$$%precondition s@$)
    (and
      (= (soffset<Int> result@126@00) 0)
      (= (slen<Int> result@126@00) 0)
      (= (scap<Int> result@126@00) 0)
      (=
        (sarray<ShArray<Ref>> result@126@00)
        (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)))))))
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-331|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@126@00 (sliceDefault_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-332|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@126@00 (sliceDefault_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-333|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@126@00 (sliceDefault_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-334|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@126@00 (sliceDefault_Intbyte$$$_S_$$$%limited s@$))) (=>
    (sliceDefault_Intbyte$$$_S_$$$%precondition s@$)
    (and
      (and
        (arrayNil_1_Intbyte$$$_S_$$$%precondition $Snap.unit)
        (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit)))
      (unbox_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (box_Emb_1_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_Intbyte$$$_S_$$$ $Snap.unit))))))
  :pattern ((sliceDefault_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-335|)))
(assert (forall ((s@$ $Snap) (b_V0@127@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (getNumHops_daeaf66a_PMBase%limited s@$ b_V0@127@00)
    (getNumHops_daeaf66a_PMBase s@$ b_V0@127@00))
  :pattern ((getNumHops_daeaf66a_PMBase s@$ b_V0@127@00))
  :qid |quant-u-110|)))
(assert (forall ((s@$ $Snap) (b_V0@127@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (getNumHops_daeaf66a_PMBase%stateless b_V0@127@00)
  :pattern ((getNumHops_daeaf66a_PMBase%limited s@$ b_V0@127@00))
  :qid |quant-u-111|)))
(assert (forall ((s@$ $Snap) (b_V0@127@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@128@00 (getNumHops_daeaf66a_PMBase%limited s@$ b_V0@127@00))) (and
    ($Perm.isReadVar $k@412@00)
    (=>
      (getNumHops_daeaf66a_PMBase%precondition s@$ b_V0@127@00)
      (<= 0 result@128@00))))
  :pattern ((getNumHops_daeaf66a_PMBase%limited s@$ b_V0@127@00))
  :qid |quant-u-336|)))
(assert (forall ((s@$ $Snap) (b_V0@127@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (let ((result@128@00 (getNumHops_daeaf66a_PMBase%limited s@$ b_V0@127@00))) true)
  :pattern ((getNumHops_daeaf66a_PMBase%limited s@$ b_V0@127@00))
  :qid |quant-u-337|)))
(assert (forall ((s@$ $Snap) (b_V0@127@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (and
    ($Perm.isReadVar $k@412@00)
    ($Perm.isReadVar $k@414@00)
    ($Perm.isReadVar $k@415@00)
    (=>
      (getNumHops_daeaf66a_PMBase%precondition s@$ b_V0@127@00)
      (=
        (getNumHops_daeaf66a_PMBase s@$ b_V0@127@00)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second s@$))))))
  :pattern ((getNumHops_daeaf66a_PMBase s@$ b_V0@127@00))
  :qid |quant-u-338|)))
(assert (forall ((s@$ $Snap) (b_V0@127@00 ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  true
  :pattern ((getNumHops_daeaf66a_PMBase s@$ b_V0@127@00))
  :qid |quant-u-339|)))
(assert (forall ((s@$ $Snap) (e_V0@129@00 Int) (b_V0@130@00 Slice<Ref>)) (!
  (=
    (Uint64_72f0d887_MbigEndian%limited s@$ e_V0@129@00 b_V0@130@00)
    (Uint64_72f0d887_MbigEndian s@$ e_V0@129@00 b_V0@130@00))
  :pattern ((Uint64_72f0d887_MbigEndian s@$ e_V0@129@00 b_V0@130@00))
  :qid |quant-u-112|)))
(assert (forall ((s@$ $Snap) (e_V0@129@00 Int) (b_V0@130@00 Slice<Ref>)) (!
  (Uint64_72f0d887_MbigEndian%stateless e_V0@129@00 b_V0@130@00)
  :pattern ((Uint64_72f0d887_MbigEndian%limited s@$ e_V0@129@00 b_V0@130@00))
  :qid |quant-u-113|)))
(assert (forall ((s@$ $Snap) (e_V0@129@00 Int) (b_V0@130@00 Slice<Ref>)) (!
  (let ((result@131@00 (Uint64_72f0d887_MbigEndian%limited s@$ e_V0@129@00 b_V0@130@00))) (and
    ($Perm.isReadVar $k@416@00)
    ($Perm.isReadVar $k@417@00)
    ($Perm.isReadVar $k@418@00)
    ($Perm.isReadVar $k@419@00)
    ($Perm.isReadVar $k@420@00)
    ($Perm.isReadVar $k@421@00)
    ($Perm.isReadVar $k@422@00)
    ($Perm.isReadVar $k@423@00)
    (=>
      (Uint64_72f0d887_MbigEndian%precondition s@$ e_V0@129@00 b_V0@130@00)
      (>= result@131@00 0))))
  :pattern ((Uint64_72f0d887_MbigEndian%limited s@$ e_V0@129@00 b_V0@130@00))
  :qid |quant-u-340|)))
(assert (forall ((s@$ $Snap) (e_V0@129@00 Int) (b_V0@130@00 Slice<Ref>)) (!
  (let ((result@131@00 (Uint64_72f0d887_MbigEndian%limited s@$ e_V0@129@00 b_V0@130@00))) true)
  :pattern ((Uint64_72f0d887_MbigEndian%limited s@$ e_V0@129@00 b_V0@130@00))
  :qid |quant-u-341|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$)
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ s@$))
  :qid |quant-u-114|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))
  :qid |quant-u-115|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@132@00 (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition s@$)
    (and
      (=
        (ShStructget0of17<ShStruct2<Ref~_Ref>> result@132@00)
        (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit))
      (and
        (= (ShStructget1of17<Ref> result@132@00) $Ref.null)
        (and
          (= (ShStructget2of17<Ref> result@132@00) $Ref.null)
          (and
            (= (ShStructget3of17<Ref> result@132@00) $Ref.null)
            (and
              (= (ShStructget4of17<Ref> result@132@00) $Ref.null)
              (and
                (= (ShStructget5of17<Ref> result@132@00) $Ref.null)
                (and
                  (= (ShStructget6of17<Ref> result@132@00) $Ref.null)
                  (and
                    (= (ShStructget7of17<Ref> result@132@00) $Ref.null)
                    (and
                      (= (ShStructget8of17<Ref> result@132@00) $Ref.null)
                      (and
                        (= (ShStructget9of17<Ref> result@132@00) $Ref.null)
                        (and
                          (= (ShStructget10of17<Ref> result@132@00) $Ref.null)
                          (and
                            (= (ShStructget11of17<Ref> result@132@00) $Ref.null)
                            (and
                              (=
                                (ShStructget12of17<Ref> result@132@00)
                                $Ref.null)
                              (and
                                (=
                                  (ShStructget13of17<Ref> result@132@00)
                                  $Ref.null)
                                (and
                                  (=
                                    (ShStructget14of17<Ref> result@132@00)
                                    $Ref.null)
                                  (and
                                    (=
                                      (ShStructget15of17<Ref> result@132@00)
                                      $Ref.null)
                                    (=
                                      (ShStructget16of17<Ref> result@132@00)
                                      $Ref.null)))))))))))))))))))
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))
  :qid |quant-u-342|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@132@00 (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition s@$)
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)))
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))
  :qid |quant-u-343|)))
(assert (forall ((s@$ $Snap) (a@133@00 ShArray<Ref>) (i@134@00 Int) (j@135@00 Int)) (!
  (=
    (ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00)
    (ssliceFromArray_Ref s@$ a@133@00 i@134@00 j@135@00))
  :pattern ((ssliceFromArray_Ref s@$ a@133@00 i@134@00 j@135@00))
  :qid |quant-u-116|)))
(assert (forall ((s@$ $Snap) (a@133@00 ShArray<Ref>) (i@134@00 Int) (j@135@00 Int)) (!
  (ssliceFromArray_Ref%stateless a@133@00 i@134@00 j@135@00)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00))
  :qid |quant-u-117|)))
(assert (forall ((s@$ $Snap) (a@133@00 ShArray<Ref>) (i@134@00 Int) (j@135@00 Int)) (!
  (let ((result@136@00 (ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00))) (=>
    (ssliceFromArray_Ref%precondition s@$ a@133@00 i@134@00 j@135@00)
    (and
      (= (soffset<Int> result@136@00) i@134@00)
      (= (slen<Int> result@136@00) (- j@135@00 i@134@00))
      (= (scap<Int> result@136@00) (- (ShArraylen<Int> a@133@00) i@134@00))
      (= (sarray<ShArray<Ref>> result@136@00) a@133@00))))
  :pattern ((ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00))
  :qid |quant-u-344|)))
(assert (forall ((s@$ $Snap) (a@133@00 ShArray<Ref>) (i@134@00 Int) (j@135@00 Int)) (!
  (let ((result@136@00 (ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00))
  :qid |quant-u-345|)))
(assert (forall ((s@$ $Snap) (a@133@00 ShArray<Ref>) (i@134@00 Int) (j@135@00 Int)) (!
  (let ((result@136@00 (ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00))
  :qid |quant-u-346|)))
(assert (forall ((s@$ $Snap) (a@133@00 ShArray<Ref>) (i@134@00 Int) (j@135@00 Int)) (!
  (let ((result@136@00 (ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00))
  :qid |quant-u-347|)))
(assert (forall ((s@$ $Snap) (a@133@00 ShArray<Ref>) (i@134@00 Int) (j@135@00 Int)) (!
  (let ((result@136@00 (ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@133@00 i@134@00 j@135@00))
  :qid |quant-u-348|)))
(assert (forall ((s@$ $Snap) (s_V0@137@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@138@00 Slice<Ref>) (insideSlayers_V0@139@00 Bool)) (!
  (=
    (AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00)
    (AddrHdrLen_840d9458_PMSCION s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00))
  :pattern ((AddrHdrLen_840d9458_PMSCION s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00))
  :qid |quant-u-118|)))
(assert (forall ((s@$ $Snap) (s_V0@137@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@138@00 Slice<Ref>) (insideSlayers_V0@139@00 Bool)) (!
  (AddrHdrLen_840d9458_PMSCION%stateless s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00)
  :pattern ((AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00))
  :qid |quant-u-119|)))
(assert (forall ((s@$ $Snap) (s_V0@137@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@138@00 Slice<Ref>) (insideSlayers_V0@139@00 Bool)) (!
  (let ((result@140@00 (AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00))) (and
    ($Perm.isReadVar $k@427@00)
    ($Perm.isReadVar $k@428@00)
    ($Perm.isReadVar $k@430@00)
    ($Perm.isReadVar $k@431@00)
    ($Perm.isReadVar $k@432@00)
    ($Perm.isReadVar $k@434@00)
    (=>
      (AddrHdrLen_840d9458_PMSCION%precondition s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00)
      (and
        (=>
          insideSlayers_V0@139@00
          (=
            result@140@00
            (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
              ($Snap.first ($Snap.first s@$))
              ($Snap.combine
                ($Snap.second ($Snap.first s@$))
                ($Snap.combine $Snap.unit $Snap.unit))) s_V0@137@00)))
        (=>
          (not insideSlayers_V0@139@00)
          (=
            result@140@00
            (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION ($Snap.second ($Snap.second s@$)) s_V0@137@00 ubuf_V0@138@00)))
        (<= 0 result@140@00)))))
  :pattern ((AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00))
  :qid |quant-u-349|)))
(assert (forall ((s@$ $Snap) (s_V0@137@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@138@00 Slice<Ref>) (insideSlayers_V0@139@00 Bool)) (!
  (let ((result@140@00 (AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00))) (=>
    (and
      (AddrHdrLen_840d9458_PMSCION%precondition s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00)
      insideSlayers_V0@139@00)
    (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
      ($Snap.first ($Snap.first s@$))
      ($Snap.combine
        ($Snap.second ($Snap.first s@$))
        ($Snap.combine $Snap.unit $Snap.unit))) s_V0@137@00)))
  :pattern ((AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00))
  :qid |quant-u-350|)))
(assert (forall ((s@$ $Snap) (s_V0@137@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@138@00 Slice<Ref>) (insideSlayers_V0@139@00 Bool)) (!
  (let ((result@140@00 (AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00))) (=>
    (and
      (AddrHdrLen_840d9458_PMSCION%precondition s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00)
      (not insideSlayers_V0@139@00))
    (AddrHdrLenNoAbstractionLeak_840d9458_PMSCION%precondition ($Snap.second ($Snap.second s@$)) s_V0@137@00 ubuf_V0@138@00)))
  :pattern ((AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00))
  :qid |quant-u-351|)))
(assert (forall ((s@$ $Snap) (s_V0@137@00 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (ubuf_V0@138@00 Slice<Ref>) (insideSlayers_V0@139@00 Bool)) (!
  (let ((result@140@00 (AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00))) true)
  :pattern ((AddrHdrLen_840d9458_PMSCION%limited s@$ s_V0@137@00 ubuf_V0@138@00 insideSlayers_V0@139@00))
  :qid |quant-u-352|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- DecodeAddrHdr_840d9458_PMSCION ----------
(declare-const s_V0@0@01 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const data_V0@1@01 Slice<Ref>)
(declare-const res_V0@2@01 Tuple2<Ref~_Types>)
(declare-const s_V0@3@01 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const data_V0@4@01 Slice<Ref>)
(declare-const res_V0@5@01 Tuple2<Ref~_Types>)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@6@01 $Snap)
(assert (= $t@6@01 ($Snap.combine ($Snap.first $t@6@01) ($Snap.second $t@6@01))))
; [eval] (ShStructget11of17(s_V0): Ref)
(assert (not (= (ShStructget11of17<Ref> s_V0@3@01) $Ref.null)))
(assert (=
  ($Snap.second $t@6@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@6@01))
    ($Snap.second ($Snap.second $t@6@01)))))
; [eval] (ShStructget10of17(s_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (= (ShStructget11of17<Ref> s_V0@3@01) (ShStructget10of17<Ref> s_V0@3@01))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget10of17<Ref> s_V0@3@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@6@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@6@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@01)))) $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))
(pop) ; 2
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (= (ShStructget9of17<Ref> s_V0@3@01) (ShStructget8of17<Ref> s_V0@3@01))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
  $Snap.unit))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
(pop) ; 2
; Joined path conditions
(assert (Has3Bits_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
; [eval] (ShStructget13of17(s_V0): Ref)
(assert (not (= (ShStructget13of17<Ref> s_V0@3@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))
; [eval] (ShStructget12of17(s_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (= (ShStructget13of17<Ref> s_V0@3@01) (ShStructget12of17<Ref> s_V0@3@01))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget12of17<Ref> s_V0@3@01) $Ref.null)))
; [eval] (slen(data_V0): Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@7@01 $Snap)
(assert (= $t@7@01 ($Snap.combine ($Snap.first $t@7@01) ($Snap.second $t@7@01))))
; [eval] (slen(data_V0): Int)
(assert (=
  ($Snap.second $t@7@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@7@01))
    ($Snap.second ($Snap.second $t@7@01)))))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0@5@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  res_V0@5@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | res_V0@5@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
; [else-branch: 0 | res_V0@5@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | res_V0@5@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
(assert (=
  res_V0@5@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
(assert (=
  ($Snap.second ($Snap.second $t@7@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@7@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@7@01))))))
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
; [then-branch: 1 | res_V0@5@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
; [else-branch: 1 | res_V0@5@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
(push) ; 4
; [else-branch: 1 | res_V0@5@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@7@01))) $Snap.unit))
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
; [then-branch: 2 | res_V0@5@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
; [else-branch: 2 | res_V0@5@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
(push) ; 5
; [else-branch: 2 | res_V0@5@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@7@01))) $Snap.unit))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 0 | res_V0@5@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
(assert (not
  (=
    res_V0@5@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (= ($Snap.first ($Snap.second $t@7@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@7@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@7@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@7@01))))))
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  res_V0@5@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | res_V0@5@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
; [else-branch: 3 | res_V0@5@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 3 | res_V0@5@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  res_V0@5@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | res_V0@5@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
; [else-branch: 4 | res_V0@5@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4 | res_V0@5@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@7@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@7@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01)))))))
; [eval] (ShStructget11of17(s_V0): Ref)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01))))))))
; [eval] (ShStructget10of17(s_V0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (= (ShStructget11of17<Ref> s_V0@3@01) (ShStructget10of17<Ref> s_V0@3@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01)))))))))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01))))))))))
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= (ShStructget9of17<Ref> s_V0@3@01) (ShStructget8of17<Ref> s_V0@3@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@7@01)))))))))))
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (ShStructget12of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= (ShStructget13of17<Ref> s_V0@3@01) (ShStructget12of17<Ref> s_V0@3@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; var res_V0_CN2: Tuple2[Ref, Types]
(declare-const res_V0_CN2@8@01 Tuple2<Ref~_Types>)
; [exec]
; var data_V0_CN1: Slice[Ref]
(declare-const data_V0_CN1@9@01 Slice<Ref>)
; [exec]
; var s_V0_CN0: ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]
(declare-const s_V0_CN0@10@01 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
; [exec]
; var srcAddrBytes_V1: Int
(declare-const srcAddrBytes_V1@11@01 Int)
; [exec]
; var dstAddrBytes_V1: Int
(declare-const dstAddrBytes_V1@12@01 Int)
; [exec]
; var offset_V1: Int
(declare-const offset_V1@13@01 Int)
; [exec]
; var l_V1: Int
(declare-const l_V1@14@01 Int)
; [exec]
; inhale res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
(declare-const $t@15@01 $Snap)
(assert (= $t@15@01 $Snap.unit))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (=
  res_V0@5@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale s_V0_CN0 ==
;   shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$()
(declare-const $t@16@01 $Snap)
(assert (= $t@16@01 $Snap.unit))
; [eval] s_V0_CN0 == shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$()
; [eval] shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(assert (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  s_V0_CN0@10@01
  (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale data_V0_CN1 == sliceDefault_Intbyte$$$_S_$$$()
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 $Snap.unit))
; [eval] data_V0_CN1 == sliceDefault_Intbyte$$$_S_$$$()
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 3
(assert (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (sliceDefault_Intbyte$$$_S_$$$%precondition $Snap.unit))
(assert (= data_V0_CN1@9@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale res_V0_CN2 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
(declare-const $t@18@01 $Snap)
(assert (= $t@18@01 $Snap.unit))
; [eval] res_V0_CN2 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (=
  res_V0_CN2@8@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; s_V0_CN0 := s_V0
; [exec]
; data_V0_CN1 := data_V0
; [exec]
; inhale l_V1 == 0
(declare-const $t@19@01 $Snap)
(assert (= $t@19@01 $Snap.unit))
; [eval] l_V1 == 0
(assert (= l_V1@14@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l_V1 := AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(),
;   true)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | True | live]
; [else-branch: 5 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5 | True]
(declare-const $k@20@01 $Perm)
(assert ($Perm.isReadVar $k@20@01))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@20@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@20@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@20@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@20@01))
  (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null))))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@21@01 $Perm)
(assert ($Perm.isReadVar $k@21@01))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@21@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@21@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@21@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@21@01))
  (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | True | live]
; [else-branch: 6 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 6 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 7 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))) | live]
; [else-branch: 7 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))) | live]
(push) ; 8
; [then-branch: 7 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 7 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (or
  (not
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(push) ; 5
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] !insideSlayers_V0
; [then-branch: 8 | False | dead]
; [else-branch: 8 | True | live]
(push) ; 5
; [else-branch: 8 | True]
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
  ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
(pop) ; 5
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@20@01))
(assert ($Perm.isReadVar $k@21@01))
(assert (and
  (< $k@20@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@20@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@20@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@20@01))
    (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null)))
  (< $k@21@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@21@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@21@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@21@01))
    (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null)))
  (or
    (not
      (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(assert (AddrHdrLen_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
  ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))
(declare-const l_V1@22@01 Int)
(assert (=
  l_V1@22@01
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
      ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)))
; [eval] (slen(data_V0_CN1): Int) < AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (slen(data_V0_CN1): Int)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 9 | True | live]
; [else-branch: 9 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 9 | True]
(declare-const $k@23@01 $Perm)
(assert ($Perm.isReadVar $k@23@01))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@23@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@23@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@23@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@23@01))
  (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null))))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@24@01 $Perm)
(assert ($Perm.isReadVar $k@24@01))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@24@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@24@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@24@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@24@01))
  (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@24@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | True | live]
; [else-branch: 10 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 10 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 11 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))) | live]
; [else-branch: 11 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))) | live]
(push) ; 8
; [then-branch: 11 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 11 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] !insideSlayers_V0
; [then-branch: 12 | False | dead]
; [else-branch: 12 | True | live]
(push) ; 5
; [else-branch: 12 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@23@01))
(assert ($Perm.isReadVar $k@24@01))
(assert (and
  (< $k@23@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@23@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@23@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@23@01))
    (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null)))
  (< $k@24@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@24@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@24@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@24@01))
    (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    (slen<Int> data_V0@4@01)
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
        ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
      ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  (slen<Int> data_V0@4@01)
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
      ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 13 | slen[Int](data_V0@4@01) < AddrHdrLen_840d9458_PMSCION(((First:(Second:(Second:(Second:(Second:($t@6@01))))), First:(Second:(Second:($t@6@01)))), (_, _)), s_V0@3@01, sliceDefault_Intbyte$$$_S_$$$(_), True) | live]
; [else-branch: 13 | !(slen[Int](data_V0@4@01) < AddrHdrLen_840d9458_PMSCION(((First:(Second:(Second:(Second:(Second:($t@6@01))))), First:(Second:(Second:($t@6@01)))), (_, _)), s_V0@3@01, sliceDefault_Intbyte$$$_S_$$$(_), True)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 13 | slen[Int](data_V0@4@01) < AddrHdrLen_840d9458_PMSCION(((First:(Second:(Second:(Second:(Second:($t@6@01))))), First:(Second:(Second:($t@6@01)))), (_, _)), s_V0@3@01, sliceDefault_Intbyte$$$_S_$$$(_), True)]
(assert (<
  (slen<Int> data_V0@4@01)
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
      ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)))
; [exec]
; var N9: Tuple2[Ref, Types]
(declare-const N9@25@01 Tuple2<Ref~_Types>)
; [exec]
; var N8: Slice[Ref]
(declare-const N8@26@01 Slice<Ref>)
; [exec]
; var fn$$0: Emb_4_Interfaceempty_interface$$$_S_$$$
(declare-const fn$$0@27@01 Emb_4_Interfaceempty_interface$$$_S_$$$)
; [exec]
; var fn$$2: Emb_4_Interfaceempty_interface$$$_S_$$$
(declare-const fn$$2@28@01 Emb_4_Interfaceempty_interface$$$_S_$$$)
; [exec]
; var fn$$3: Emb_4_Interfaceempty_interface$$$$_E_$$$
(declare-const fn$$3@29@01 Emb_4_Interfaceempty_interface$$$$_E_$$$)
; [exec]
; inhale (forall fn$$1: Int ::
;     { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0),
;     fn$$1): Ref) }
;     0 <= fn$$1 && fn$$1 < 4 ==>
;     acc((ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0),
;     fn$$1): Ref).Interfaceempty_interface$$$$_E_$$$, write)) &&
;   !(fn$$0 ==
;   box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_4_Interfaceempty_interface$$$_S_$$$()))
(declare-const $t@30@01 $Snap)
(assert (= $t@30@01 ($Snap.combine ($Snap.first $t@30@01) ($Snap.second $t@30@01))))
(declare-const fn$$1@31@01 Int)
(push) ; 4
; [eval] 0 <= fn$$1 && fn$$1 < 4
; [eval] 0 <= fn$$1
(push) ; 5
; [then-branch: 14 | 0 <= fn$$1@31@01 | live]
; [else-branch: 14 | !(0 <= fn$$1@31@01) | live]
(push) ; 6
; [then-branch: 14 | 0 <= fn$$1@31@01]
(assert (<= 0 fn$$1@31@01))
; [eval] fn$$1 < 4
(pop) ; 6
(push) ; 6
; [else-branch: 14 | !(0 <= fn$$1@31@01)]
(assert (not (<= 0 fn$$1@31@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$1@31@01)) (<= 0 fn$$1@31@01)))
(assert (and (< fn$$1@31@01 4) (<= 0 fn$$1@31@01)))
; [eval] (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), fn$$1): Ref)
; [eval] unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0)
(push) ; 5
(assert (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01))
(pop) ; 5
; Joined path conditions
(assert (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01))
(pop) ; 4
(declare-fun inv@32@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((fn$$1@31@01 Int)) (!
  (=>
    (and (< fn$$1@31@01 4) (<= 0 fn$$1@31@01))
    (and
      (or (not (<= 0 fn$$1@31@01)) (<= 0 fn$$1@31@01))
      (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) fn$$1@31@01))
  :qid |Interfaceempty_interface$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((fn$$1@31@01 Int)) (!
  (=>
    (and (< fn$$1@31@01 4) (<= 0 fn$$1@31@01))
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) fn$$1@31@01))
  :qid |quant-u-374|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@32@01 r) 4) (<= 0 (inv@32@01 r)))
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01))
  :pattern ((inv@32@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
(assert (forall ((fn$$1@31@01 Int)) (!
  (=>
    (and (< fn$$1@31@01 4) (<= 0 fn$$1@31@01))
    (=
      (inv@32@01 (ShArrayloc<Ref> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) fn$$1@31@01))
      fn$$1@31@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) fn$$1@31@01))
  :qid |quant-u-374|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@32@01 r) 4) (<= 0 (inv@32@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) (inv@32@01 r))
      r))
  :pattern ((inv@32@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((fn$$1@31@01 Int)) (!
  (=>
    (and (< fn$$1@31@01 4) (<= 0 fn$$1@31@01))
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) fn$$1@31@01)
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) fn$$1@31@01))
  :qid |Interfaceempty_interface$$$$_E_$$$-permImpliesNonNull|)))
(assert (= ($Snap.second $t@30@01) $Snap.unit))
; [eval] !(fn$$0 == box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_4_Interfaceempty_interface$$$_S_$$$()))
; [eval] fn$$0 == box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_4_Interfaceempty_interface$$$_S_$$$())
; [eval] box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(arrayNil_4_Interfaceempty_interface$$$_S_$$$())
; [eval] arrayNil_4_Interfaceempty_interface$$$_S_$$$()
(push) ; 4
(assert (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (arrayNil_4_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(push) ; 4
; [eval] (ShArraylen(x): Int) == 4 || x == arrayNil_4_Interfaceempty_interface$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 4
; [eval] (ShArraylen(x): Int)
(push) ; 5
; [then-branch: 15 | ShArraylen[Int](arrayNil_4_Interfaceempty_interface$$$_S_$$$(_)) == 4 | live]
; [else-branch: 15 | ShArraylen[Int](arrayNil_4_Interfaceempty_interface$$$_S_$$$(_)) != 4 | live]
(push) ; 6
; [then-branch: 15 | ShArraylen[Int](arrayNil_4_Interfaceempty_interface$$$_S_$$$(_)) == 4]
(assert (= (ShArraylen<Int> (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) 4))
(pop) ; 6
(push) ; 6
; [else-branch: 15 | ShArraylen[Int](arrayNil_4_Interfaceempty_interface$$$_S_$$$(_)) != 4]
(assert (not
  (=
    (ShArraylen<Int> (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit))
    4)))
; [eval] x == arrayNil_4_Interfaceempty_interface$$$_S_$$$()
; [eval] arrayNil_4_Interfaceempty_interface$$$_S_$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      (ShArraylen<Int> (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit))
      4))
  (=
    (ShArraylen<Int> (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit))
    4)))
(assert (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
(pop) ; 4
; Joined path conditions
(assert (and
  (or
    (not
      (=
        (ShArraylen<Int> (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit))
        4))
    (=
      (ShArraylen<Int> (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit))
      4))
  (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit))))
(assert (not
  (=
    fn$$0@27@01
    (box_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_4_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fn$$2 := fn$$0
; [exec]
; fn$$3 := box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(Seq((tuple2((box_Poly(stringLit6578706563746564()): Ref),
;   string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(AddrHdrLen_840d9458_PMSCION(s_V0_CN0,
;   sliceDefault_Intbyte$$$_S_$$$(), true)): Ref), int_Types()): Tuple2[Ref, Types]),
;   (tuple2((box_Poly(stringLit61637475616c()): Ref), string_Types()): Tuple2[Ref, Types]),
;   (tuple2((box_Poly((slen(data_V0_CN1): Int)): Ref), integer_Types()): Tuple2[Ref, Types])))
; [eval] box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(Seq((tuple2((box_Poly(stringLit6578706563746564()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(), true)): Ref), int_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(stringLit61637475616c()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly((slen(data_V0_CN1): Int)): Ref), integer_Types()): Tuple2[Ref, Types])))
; [eval] Seq((tuple2((box_Poly(stringLit6578706563746564()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(), true)): Ref), int_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly(stringLit61637475616c()): Ref), string_Types()): Tuple2[Ref, Types]), (tuple2((box_Poly((slen(data_V0_CN1): Int)): Ref), integer_Types()): Tuple2[Ref, Types]))
; [eval] (tuple2((box_Poly(stringLit6578706563746564()): Ref), string_Types()): Tuple2[Ref, Types])
; [eval] (box_Poly(stringLit6578706563746564()): Ref)
; [eval] stringLit6578706563746564()
; [eval] string_Types()
; [eval] (tuple2((box_Poly(AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(), true)): Ref), int_Types()): Tuple2[Ref, Types])
; [eval] (box_Poly(AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(), true)): Ref)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | True | live]
; [else-branch: 16 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 16 | True]
(declare-const $k@33@01 $Perm)
(assert ($Perm.isReadVar $k@33@01))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@33@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@33@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@33@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@33@01))
  (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null))))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@33@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const $k@34@01 $Perm)
(assert ($Perm.isReadVar $k@34@01))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@34@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@34@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@34@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@34@01))
  (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@34@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | True | live]
; [else-branch: 17 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 17 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 18 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))) | live]
; [else-branch: 18 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))) | live]
(push) ; 9
; [then-branch: 18 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 18 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] !insideSlayers_V0
; [then-branch: 19 | False | dead]
; [else-branch: 19 | True | live]
(push) ; 6
; [else-branch: 19 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@33@01))
(assert ($Perm.isReadVar $k@34@01))
(assert (and
  (< $k@33@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@33@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@33@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@33@01))
    (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null)))
  (< $k@34@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@34@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@34@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@34@01))
    (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] int_Types()
; [eval] (tuple2((box_Poly(stringLit61637475616c()): Ref), string_Types()): Tuple2[Ref, Types])
; [eval] (box_Poly(stringLit61637475616c()): Ref)
; [eval] stringLit61637475616c()
; [eval] string_Types()
; [eval] (tuple2((box_Poly((slen(data_V0_CN1): Int)): Ref), integer_Types()): Tuple2[Ref, Types])
; [eval] (box_Poly((slen(data_V0_CN1): Int)): Ref)
; [eval] (slen(data_V0_CN1): Int)
; [eval] integer_Types()
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_append
          (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (as stringLit6578706563746564<Int>  Int)) (as string_Types<Types>  Types)))
          (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (AddrHdrLen_840d9458_PMSCION ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
              ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
            ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (as int_Types<Types>  Types))))
        (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (as stringLit61637475616c<Int>  Int)) (as string_Types<Types>  Types))))
      (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (slen<Int> data_V0@4@01)) (as integer_Types<Types>  Types)))))
  4))
(push) ; 4
; [eval] |x| == 4
; [eval] |x|
(assert (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit (Seq_append
  (Seq_append
    (Seq_append
      (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (as stringLit6578706563746564<Int>  Int)) (as string_Types<Types>  Types)))
      (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
          ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
        ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (as int_Types<Types>  Types))))
    (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (as stringLit61637475616c<Int>  Int)) (as string_Types<Types>  Types))))
  (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (slen<Int> data_V0@4@01)) (as integer_Types<Types>  Types))))))
(pop) ; 4
; Joined path conditions
(assert (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit (Seq_append
  (Seq_append
    (Seq_append
      (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (as stringLit6578706563746564<Int>  Int)) (as string_Types<Types>  Types)))
      (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (AddrHdrLen_840d9458_PMSCION ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
          ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
        ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (as int_Types<Types>  Types))))
    (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (as stringLit61637475616c<Int>  Int)) (as string_Types<Types>  Types))))
  (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (slen<Int> data_V0@4@01)) (as integer_Types<Types>  Types))))))
(declare-const fn$$3@35@01 Emb_4_Interfaceempty_interface$$$$_E_$$$)
(assert (=
  fn$$3@35@01
  (box_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes $Snap.unit (Seq_append
    (Seq_append
      (Seq_append
        (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (as stringLit6578706563746564<Int>  Int)) (as string_Types<Types>  Types)))
        (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (AddrHdrLen_840d9458_PMSCION ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
            ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
          ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)) (as int_Types<Types>  Types))))
      (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (as stringLit61637475616c<Int>  Int)) (as string_Types<Types>  Types))))
    (Seq_singleton (tuple2<Tuple2<Ref~_Types>> (box_Poly<Ref> (slen<Int> data_V0@4@01)) (as integer_Types<Types>  Types)))))))
; [exec]
; inhale (forall fn$$4: Int ::
;     { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2),
;     fn$$4): Ref) }
;     { unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4] }
;     0 <= fn$$4 && fn$$4 < 4 ==>
;     (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2),
;     fn$$4): Ref).Interfaceempty_interface$$$$_E_$$$ ==
;     unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4])
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 $Snap.unit))
; [eval] (forall fn$$4: Int :: { (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref) } { unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4] } 0 <= fn$$4 && fn$$4 < 4 ==> (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref).Interfaceempty_interface$$$$_E_$$$ == unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4])
(declare-const fn$$4@37@01 Int)
(push) ; 4
; [eval] 0 <= fn$$4 && fn$$4 < 4 ==> (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref).Interfaceempty_interface$$$$_E_$$$ == unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4]
; [eval] 0 <= fn$$4 && fn$$4 < 4
; [eval] 0 <= fn$$4
(push) ; 5
; [then-branch: 20 | 0 <= fn$$4@37@01 | live]
; [else-branch: 20 | !(0 <= fn$$4@37@01) | live]
(push) ; 6
; [then-branch: 20 | 0 <= fn$$4@37@01]
(assert (<= 0 fn$$4@37@01))
; [eval] fn$$4 < 4
(pop) ; 6
(push) ; 6
; [else-branch: 20 | !(0 <= fn$$4@37@01)]
(assert (not (<= 0 fn$$4@37@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$4@37@01)) (<= 0 fn$$4@37@01)))
(push) ; 5
; [then-branch: 21 | fn$$4@37@01 < 4 && 0 <= fn$$4@37@01 | live]
; [else-branch: 21 | !(fn$$4@37@01 < 4 && 0 <= fn$$4@37@01) | live]
(push) ; 6
; [then-branch: 21 | fn$$4@37@01 < 4 && 0 <= fn$$4@37@01]
(assert (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01)))
; [eval] (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref).Interfaceempty_interface$$$$_E_$$$ == unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4]
; [eval] (ShArrayloc(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2), fn$$4): Ref)
; [eval] unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$2)
(push) ; 7
(assert (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01))
(pop) ; 7
; Joined path conditions
(assert (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01))
(declare-const sm@38@01 $FVF<Interfaceempty_interface$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@32@01 r) 4) (<= 0 (inv@32@01 r)))
    (=
      ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ (as sm@38@01  $FVF<Interfaceempty_interface$$$$_E_$$$>) r)
      ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> ($Snap.first $t@30@01)) r)))
  :pattern (($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ (as sm@38@01  $FVF<Interfaceempty_interface$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> ($Snap.first $t@30@01)) r))
  :qid |qp.fvfValDef0|)))
(declare-const pm@39@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Interfaceempty_interface$$$$_E_$$$ (as pm@39@01  $FPM) r)
    (ite (and (< (inv@32@01 r) 4) (<= 0 (inv@32@01 r))) $Perm.Write $Perm.No))
  :pattern (($FVF.perm_Interfaceempty_interface$$$$_E_$$$ (as pm@39@01  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_Interfaceempty_interface$$$$_E_$$$ (as pm@39@01  $FPM) (ShArrayloc<Ref> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) fn$$4@37@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)[fn$$4]
; [eval] unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes(fn$$3)
(push) ; 7
(assert (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit fn$$3@35@01))
(pop) ; 7
; Joined path conditions
(assert (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit fn$$3@35@01))
(push) ; 7
(assert (not (>= fn$$4@37@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  fn$$4@37@01
  (Seq_length
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes $Snap.unit fn$$3@35@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 21 | !(fn$$4@37@01 < 4 && 0 <= fn$$4@37@01)]
(assert (not (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@32@01 r) 4) (<= 0 (inv@32@01 r)))
    (=
      ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ (as sm@38@01  $FVF<Interfaceempty_interface$$$$_E_$$$>) r)
      ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> ($Snap.first $t@30@01)) r)))
  :pattern (($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ (as sm@38@01  $FVF<Interfaceempty_interface$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> ($Snap.first $t@30@01)) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Interfaceempty_interface$$$$_E_$$$ (as pm@39@01  $FPM) r)
    (ite (and (< (inv@32@01 r) 4) (<= 0 (inv@32@01 r))) $Perm.Write $Perm.No))
  :pattern (($FVF.perm_Interfaceempty_interface$$$$_E_$$$ (as pm@39@01  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
(assert (=>
  (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01))
  (and
    (< fn$$4@37@01 4)
    (<= 0 fn$$4@37@01)
    (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01)
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit fn$$3@35@01))))
; Joined path conditions
(assert (or
  (not (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01)))
  (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@32@01 r) 4) (<= 0 (inv@32@01 r)))
    (=
      ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ (as sm@38@01  $FVF<Interfaceempty_interface$$$$_E_$$$>) r)
      ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> ($Snap.first $t@30@01)) r)))
  :pattern (($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ (as sm@38@01  $FVF<Interfaceempty_interface$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> ($Snap.first $t@30@01)) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Interfaceempty_interface$$$$_E_$$$ (as pm@39@01  $FPM) r)
    (ite (and (< (inv@32@01 r) 4) (<= 0 (inv@32@01 r))) $Perm.Write $Perm.No))
  :pattern (($FVF.perm_Interfaceempty_interface$$$$_E_$$$ (as pm@39@01  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((fn$$4@37@01 Int)) (!
  (and
    (or (not (<= 0 fn$$4@37@01)) (<= 0 fn$$4@37@01))
    (=>
      (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01))
      (and
        (< fn$$4@37@01 4)
        (<= 0 fn$$4@37@01)
        (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01)
        (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit fn$$3@35@01)))
    (or
      (not (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01)))
      (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01))))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) fn$$4@37@01))
  :qid |prog.l3619-aux|)))
(assert (forall ((fn$$4@37@01 Int)) (!
  (and
    (or (not (<= 0 fn$$4@37@01)) (<= 0 fn$$4@37@01))
    (=>
      (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01))
      (and
        (< fn$$4@37@01 4)
        (<= 0 fn$$4@37@01)
        (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01)
        (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes%precondition $Snap.unit fn$$3@35@01)))
    (or
      (not (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01)))
      (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01))))
  :pattern ((Seq_index
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes $Snap.unit fn$$3@35@01)
    fn$$4@37@01))
  :qid |prog.l3619-aux|)))
(assert (forall ((fn$$4@37@01 Int)) (!
  (=>
    (and (< fn$$4@37@01 4) (<= 0 fn$$4@37@01))
    (=
      ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ (as sm@38@01  $FVF<Interfaceempty_interface$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) fn$$4@37@01))
      (Seq_index
        (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes $Snap.unit fn$$3@35@01)
        fn$$4@37@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) fn$$4@37@01))
  :pattern ((Seq_index
    (unbox_Emb_4_Interfaceempty_interface$$$$_E_$$$_Seq_Tuple2_RefTypes $Snap.unit fn$$3@35@01)
    fn$$4@37@01))
  :qid |prog.l3619|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; N8 := ssliceFromArray_Ref(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0),
;   0, 4)
; [eval] ssliceFromArray_Ref(unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0), 0, 4)
; [eval] unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref(fn$$0)
(set-option :timeout 0)
(push) ; 4
(assert (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01))
(pop) ; 4
; Joined path conditions
(assert (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit fn$$0@27@01))
(push) ; 4
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (ShArraylen(a): Int)
; [eval] (ShArraylen(a): Int)
(push) ; 5
(assert (not (<=
  4
  (ShArraylen<Int> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  4
  (ShArraylen<Int> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01))))
(assert (ssliceFromArray_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) 0 4))
(pop) ; 4
; Joined path conditions
(assert (and
  (<=
    4
    (ShArraylen<Int> (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01)))
  (ssliceFromArray_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) 0 4)))
(declare-const N8@40@01 Slice<Ref>)
(assert (=
  N8@40@01
  (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_4_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit fn$$0@27@01) 0 4)))
; [exec]
; N9 := New_bfd5223e_F(stringLit70726f76696465642062756666657220697320746f6f20736d616c6c(),
;   N8)
; [eval] stringLit70726f76696465642062756666657220697320746f6f20736d616c6c()
(declare-const i_V1@41@01 Int)
(push) ; 4
; [eval] 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int)
; [eval] 0 <= i_V1
(push) ; 5
; [then-branch: 22 | 0 <= i_V1@41@01 | live]
; [else-branch: 22 | !(0 <= i_V1@41@01) | live]
(push) ; 6
; [then-branch: 22 | 0 <= i_V1@41@01]
(assert (<= 0 i_V1@41@01))
; [eval] i_V1 < (slen(errCtx_V0): Int)
; [eval] (slen(errCtx_V0): Int)
(pop) ; 6
(push) ; 6
; [else-branch: 22 | !(0 <= i_V1@41@01)]
(assert (not (<= 0 i_V1@41@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@41@01)) (<= 0 i_V1@41@01)))
(assert (and (< i_V1@41@01 (slen<Int> N8@40@01)) (<= 0 i_V1@41@01)))
; [eval] (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref)
; [eval] (sarray(errCtx_V0): ShArray[Ref])
; [eval] sadd((soffset(errCtx_V0): Int), i_V1)
; [eval] (soffset(errCtx_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) i_V1@41@01))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) i_V1@41@01))
(pop) ; 4
(declare-fun inv@42@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@41@01 Int)) (!
  (=>
    (and (< i_V1@41@01 (slen<Int> N8@40@01)) (<= 0 i_V1@41@01))
    (and
      (or (not (<= 0 i_V1@41@01)) (<= 0 i_V1@41@01))
      (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) i_V1@41@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V1@41@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i_V11@41@01 Int) (i_V12@41@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and (< i_V11@41@01 (slen<Int> N8@40@01)) (<= 0 i_V11@41@01))
          (and (< i_V12@41@01 (slen<Int> N8@40@01)) (<= 0 i_V12@41@01)))
        (and
          (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) i_V11@41@01)
          (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) i_V12@41@01)))
      (and
        (and (< i_V11@41@01 (slen<Int> N8@40@01)) (<= 0 i_V11@41@01))
        (and (< i_V12@41@01 (slen<Int> N8@40@01)) (<= 0 i_V12@41@01))
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V11@41@01))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V12@41@01)))))
    (= i_V11@41@01 i_V12@41@01))
  
  :qid |Interfaceempty_interface$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i_V1@41@01 Int)) (!
  (=>
    (and (< i_V1@41@01 (slen<Int> N8@40@01)) (<= 0 i_V1@41@01))
    (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) i_V1@41@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V1@41@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@42@01 r) (slen<Int> N8@40@01)) (<= 0 (inv@42@01 r)))
    (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) (inv@42@01 r)))
  :pattern ((inv@42@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@41@01 Int)) (!
  (=>
    (and (< i_V1@41@01 (slen<Int> N8@40@01)) (<= 0 i_V1@41@01))
    (=
      (inv@42@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V1@41@01)))
      i_V1@41@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V1@41@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@42@01 r) (slen<Int> N8@40@01)) (<= 0 (inv@42@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) (inv@42@01 r)))
      r))
  :pattern ((inv@42@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@43@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@42@01 r) (slen<Int> N8@40@01)) (<= 0 (inv@42@01 r)))
    ($Perm.min
      (ite (and (< (inv@32@01 r) 4) (<= 0 (inv@32@01 r))) $Perm.Write $Perm.No)
      (/ (to_real 1) (to_real 131072)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (< (inv@32@01 r) 4) (<= 0 (inv@32@01 r))) $Perm.Write $Perm.No)
      (pTaken@43@01 r))
    $Perm.No)
  
  :qid |quant-u-377|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@42@01 r) (slen<Int> N8@40@01)) (<= 0 (inv@42@01 r)))
    (= (- (/ (to_real 1) (to_real 131072)) (pTaken@43@01 r)) $Perm.No))
  
  :qid |quant-u-378|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@44@01 $FVF<Interfaceempty_interface$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@32@01 r) 4) (<= 0 (inv@32@01 r)))
    (=
      ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ (as sm@44@01  $FVF<Interfaceempty_interface$$$$_E_$$$>) r)
      ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> ($Snap.first $t@30@01)) r)))
  :pattern (($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ (as sm@44@01  $FVF<Interfaceempty_interface$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> ($Snap.first $t@30@01)) r))
  :qid |qp.fvfValDef2|)))
(declare-const res_V0@45@01 Tuple2<Ref~_Types>)
(declare-const $t@46@01 $Snap)
(assert (= $t@46@01 ($Snap.combine ($Snap.first $t@46@01) ($Snap.second $t@46@01))))
(declare-const i_V1@47@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int)
; [eval] 0 <= i_V1
(push) ; 5
; [then-branch: 23 | 0 <= i_V1@47@01 | live]
; [else-branch: 23 | !(0 <= i_V1@47@01) | live]
(push) ; 6
; [then-branch: 23 | 0 <= i_V1@47@01]
(assert (<= 0 i_V1@47@01))
; [eval] i_V1 < (slen(errCtx_V0): Int)
; [eval] (slen(errCtx_V0): Int)
(pop) ; 6
(push) ; 6
; [else-branch: 23 | !(0 <= i_V1@47@01)]
(assert (not (<= 0 i_V1@47@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@47@01)) (<= 0 i_V1@47@01)))
(assert (and (< i_V1@47@01 (slen<Int> N8@40@01)) (<= 0 i_V1@47@01)))
; [eval] (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref)
; [eval] (sarray(errCtx_V0): ShArray[Ref])
; [eval] sadd((soffset(errCtx_V0): Int), i_V1)
; [eval] (soffset(errCtx_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) i_V1@47@01))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) i_V1@47@01))
(pop) ; 4
(declare-fun inv@48@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@47@01 Int)) (!
  (=>
    (and (< i_V1@47@01 (slen<Int> N8@40@01)) (<= 0 i_V1@47@01))
    (and
      (or (not (<= 0 i_V1@47@01)) (<= 0 i_V1@47@01))
      (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) i_V1@47@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V1@47@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@47@01 Int)) (!
  (=>
    (and (< i_V1@47@01 (slen<Int> N8@40@01)) (<= 0 i_V1@47@01))
    (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) i_V1@47@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V1@47@01)))
  :qid |quant-u-380|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@48@01 r) (slen<Int> N8@40@01)) (<= 0 (inv@48@01 r)))
    (sadd%precondition $Snap.unit (soffset<Int> N8@40@01) (inv@48@01 r)))
  :pattern ((inv@48@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@47@01 Int)) (!
  (=>
    (and (< i_V1@47@01 (slen<Int> N8@40@01)) (<= 0 i_V1@47@01))
    (=
      (inv@48@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V1@47@01)))
      i_V1@47@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V1@47@01)))
  :qid |quant-u-380|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@48@01 r) (slen<Int> N8@40@01)) (<= 0 (inv@48@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) (inv@48@01 r)))
      r))
  :pattern ((inv@48@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@47@01 Int)) (!
  (=>
    (and (< i_V1@47@01 (slen<Int> N8@40@01)) (<= 0 i_V1@47@01))
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V1@47@01))
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> N8@40@01) (sadd $Snap.unit (soffset<Int> N8@40@01) i_V1@47@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second $t@46@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@46@01))
    ($Snap.second ($Snap.second $t@46@01)))))
(assert (= ($Snap.first ($Snap.second $t@46@01)) $Snap.unit))
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    res_V0@45@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second $t@46@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@46@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@46@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@46@01))) $Snap.unit))
; [eval] IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_(res_V0)
(push) ; 4
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@49@01 $Perm)
(assert ($Perm.isReadVar $k@49@01))
(assert (< $k@49@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@49@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second $t@46@01)))) res_V0@45@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@49@01))
(assert (and
  (< $k@49@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@49@01))
  (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second $t@46@01)))) res_V0@45@01)))
(assert (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second $t@46@01)))) res_V0@45@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN2 := N9
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN2
; [eval] (slen(data_V0): Int)
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
; [then-branch: 24 | res_V0@45@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
; [else-branch: 24 | res_V0@45@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 24 | res_V0@45@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  res_V0@45@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | res_V0@45@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
; [else-branch: 25 | res_V0@45@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 25 | res_V0@45@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  res_V0@45@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | res_V0@45@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
; [else-branch: 26 | res_V0@45@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 26 | res_V0@45@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
; [eval] (ShStructget11of17(s_V0): Ref)
; [eval] (ShStructget10of17(s_V0): Ref)
; [eval] (ShStructget9of17(s_V0): Ref)
; [eval] (ShStructget8of17(s_V0): Ref)
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (ShStructget12of17(s_V0): Ref)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 13 | !(slen[Int](data_V0@4@01) < AddrHdrLen_840d9458_PMSCION(((First:(Second:(Second:(Second:(Second:($t@6@01))))), First:(Second:(Second:($t@6@01)))), (_, _)), s_V0@3@01, sliceDefault_Intbyte$$$_S_$$$(_), True))]
(assert (not
  (<
    (slen<Int> data_V0@4@01)
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
        ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
      ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))))
(pop) ; 3
; [eval] !((slen(data_V0_CN1): Int) < AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(), true))
; [eval] (slen(data_V0_CN1): Int) < AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] (slen(data_V0_CN1): Int)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0_CN0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | True | live]
; [else-branch: 27 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 27 | True]
(declare-const $k@50@01 $Perm)
(assert ($Perm.isReadVar $k@50@01))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@50@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@50@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@50@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@50@01))
  (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null))))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@51@01 $Perm)
(assert ($Perm.isReadVar $k@51@01))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@51@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@51@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@51@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@51@01))
  (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | True | live]
; [else-branch: 28 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 28 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 29 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))) | live]
; [else-branch: 29 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))) | live]
(push) ; 8
; [then-branch: 29 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))]
(assert (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 29 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] !insideSlayers_V0
; [then-branch: 30 | False | dead]
; [else-branch: 30 | True | live]
(push) ; 5
; [else-branch: 30 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@50@01))
(assert ($Perm.isReadVar $k@51@01))
(assert (and
  (< $k@50@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@50@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@50@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@50@01))
    (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null)))
  (< $k@51@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@51@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@51@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@51@01))
    (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  (slen<Int> data_V0@4@01)
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
      ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    (slen<Int> data_V0@4@01)
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
        ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
      ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 31 | !(slen[Int](data_V0@4@01) < AddrHdrLen_840d9458_PMSCION(((First:(Second:(Second:(Second:(Second:($t@6@01))))), First:(Second:(Second:($t@6@01)))), (_, _)), s_V0@3@01, sliceDefault_Intbyte$$$_S_$$$(_), True)) | live]
; [else-branch: 31 | slen[Int](data_V0@4@01) < AddrHdrLen_840d9458_PMSCION(((First:(Second:(Second:(Second:(Second:($t@6@01))))), First:(Second:(Second:($t@6@01)))), (_, _)), s_V0@3@01, sliceDefault_Intbyte$$$_S_$$$(_), True) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 31 | !(slen[Int](data_V0@4@01) < AddrHdrLen_840d9458_PMSCION(((First:(Second:(Second:(Second:(Second:($t@6@01))))), First:(Second:(Second:($t@6@01)))), (_, _)), s_V0@3@01, sliceDefault_Intbyte$$$_S_$$$(_), True))]
(assert (not
  (<
    (slen<Int> data_V0@4@01)
    (AddrHdrLen_840d9458_PMSCION ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
        ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
      ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true))))
; [exec]
; inhale offset_V1 == 0
(declare-const $t@52@01 $Snap)
(assert (= $t@52@01 $Snap.unit))
; [eval] offset_V1 == 0
(assert (= offset_V1@13@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; offset_V1 := 0
; [exec]
; unfold acc(AbsSlice_Bytes_e630ae22_F(data_V0_CN1, 0, (slen(data_V0_CN1): Int)), 1 /
;   4096)
; [eval] (slen(data_V0_CN1): Int)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
  $Snap.unit))
; [eval] 0 <= start_V0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
  $Snap.unit))
; [eval] start_V0 <= end_V0
(assert (<= 0 (slen<Int> data_V0@4@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))
  $Snap.unit))
; [eval] end_V0 <= (scap(s_V0): Int)
; [eval] (scap(s_V0): Int)
(assert (<= (slen<Int> data_V0@4@01) (scap<Int> data_V0@4@01)))
(declare-const i_V1@53@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] start_V0 <= i_V1 && i_V1 < end_V0
; [eval] start_V0 <= i_V1
(push) ; 5
; [then-branch: 32 | 0 <= i_V1@53@01 | live]
; [else-branch: 32 | !(0 <= i_V1@53@01) | live]
(push) ; 6
; [then-branch: 32 | 0 <= i_V1@53@01]
(assert (<= 0 i_V1@53@01))
; [eval] i_V1 < end_V0
(pop) ; 6
(push) ; 6
; [else-branch: 32 | !(0 <= i_V1@53@01)]
(assert (not (<= 0 i_V1@53@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@53@01)) (<= 0 i_V1@53@01)))
(assert (and (< i_V1@53@01 (slen<Int> data_V0@4@01)) (<= 0 i_V1@53@01)))
; [eval] (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref)
; [eval] (sarray(s_V0): ShArray[Ref])
; [eval] sadd((soffset(s_V0): Int), i_V1)
; [eval] (soffset(s_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V1@53@01))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V1@53@01))
(pop) ; 4
(declare-fun inv@54@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@53@01 Int)) (!
  (=>
    (and (< i_V1@53@01 (slen<Int> data_V0@4@01)) (<= 0 i_V1@53@01))
    (and
      (or (not (<= 0 i_V1@53@01)) (<= 0 i_V1@53@01))
      (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V1@53@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V1@53@01)))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@53@01 Int)) (!
  (=>
    (and (< i_V1@53@01 (slen<Int> data_V0@4@01)) (<= 0 i_V1@53@01))
    (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V1@53@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V1@53@01)))
  :qid |quant-u-382|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
    (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) (inv@54@01 r)))
  :pattern ((inv@54@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@53@01 Int)) (!
  (=>
    (and (< i_V1@53@01 (slen<Int> data_V0@4@01)) (<= 0 i_V1@53@01))
    (=
      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V1@53@01)))
      i_V1@53@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V1@53@01)))
  :qid |quant-u-382|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) (inv@54@01 r)))
      r))
  :pattern ((inv@54@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@53@01 Int)) (!
  (=>
    (and (< i_V1@53@01 (slen<Int> data_V0@4@01)) (<= 0 i_V1@53@01))
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V1@53@01))
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V1@53@01)))
  :qid |Intbyte$$$$_E_$$$-permImpliesNonNull|)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (AbsSlice_Bytes_e630ae22_F%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) data_V0@4@01 0 (slen<Int> data_V0@4@01)))
; [exec]
; assert (forall i_V2: Int ::
;     { (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]),
;     sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int),
;     i_V2)): Ref) }
;     { (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int),
;     i_V2)): Ref) }
;     0 <= i_V2 && i_V2 < l_V1 ==>
;     (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]),
;     sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int),
;     i_V2)): Ref) ==
;     (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int),
;     i_V2)): Ref))
; [eval] (forall i_V2: Int :: { (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V2)): Ref) } { (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int), i_V2)): Ref) } 0 <= i_V2 && i_V2 < l_V1 ==> (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V2)): Ref) == (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int), i_V2)): Ref))
(declare-const i_V2@55@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= i_V2 && i_V2 < l_V1 ==> (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V2)): Ref) == (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int), i_V2)): Ref)
; [eval] 0 <= i_V2 && i_V2 < l_V1
; [eval] 0 <= i_V2
(push) ; 5
; [then-branch: 33 | 0 <= i_V2@55@01 | live]
; [else-branch: 33 | !(0 <= i_V2@55@01) | live]
(push) ; 6
; [then-branch: 33 | 0 <= i_V2@55@01]
(assert (<= 0 i_V2@55@01))
; [eval] i_V2 < l_V1
(pop) ; 6
(push) ; 6
; [else-branch: 33 | !(0 <= i_V2@55@01)]
(assert (not (<= 0 i_V2@55@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V2@55@01)) (<= 0 i_V2@55@01)))
(push) ; 5
; [then-branch: 34 | i_V2@55@01 < l_V1@22@01 && 0 <= i_V2@55@01 | live]
; [else-branch: 34 | !(i_V2@55@01 < l_V1@22@01 && 0 <= i_V2@55@01) | live]
(push) ; 6
; [then-branch: 34 | i_V2@55@01 < l_V1@22@01 && 0 <= i_V2@55@01]
(assert (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01)))
; [eval] (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V2)): Ref) == (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int), i_V2)): Ref)
; [eval] (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V2)): Ref)
; [eval] (sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref])
; [eval] ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))
; [eval] (slen(data_V0_CN1): Int)
(push) ; 7
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01)))
(pop) ; 7
; Joined path conditions
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01)))
; [eval] sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V2)
; [eval] (soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int)
; [eval] ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))
; [eval] (slen(data_V0_CN1): Int)
(push) ; 7
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01))
(pop) ; 7
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01))
; [eval] (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int), i_V2)): Ref)
; [eval] (sarray(data_V0_CN1): ShArray[Ref])
; [eval] sadd((soffset(data_V0_CN1): Int), i_V2)
; [eval] (soffset(data_V0_CN1): Int)
(push) ; 7
(assert (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01))
(pop) ; 7
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01))
(pop) ; 6
(push) ; 6
; [else-branch: 34 | !(i_V2@55@01 < l_V1@22@01 && 0 <= i_V2@55@01)]
(assert (not (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01))
  (and
    (< i_V2@55@01 l_V1@22@01)
    (<= 0 i_V2@55@01)
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))
    (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01)
    (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01))))
; Joined path conditions
(assert (or
  (not (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01)))
  (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V2@55@01 Int)) (!
  (and
    (or (not (<= 0 i_V2@55@01)) (<= 0 i_V2@55@01))
    (=>
      (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01))
      (and
        (< i_V2@55@01 l_V1@22@01)
        (<= 0 i_V2@55@01)
        (ssliceFromSlice_Ref%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))
        (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01)
        (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01)))
    (or
      (not (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01)))
      (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01)))
  :qid |prog.l3652-aux|)))
(assert (forall ((i_V2@55@01 Int)) (!
  (and
    (or (not (<= 0 i_V2@55@01)) (<= 0 i_V2@55@01))
    (=>
      (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01))
      (and
        (< i_V2@55@01 l_V1@22@01)
        (<= 0 i_V2@55@01)
        (ssliceFromSlice_Ref%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))
        (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01)
        (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01)))
    (or
      (not (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01)))
      (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01)))
  :qid |prog.l3652-aux|)))
(assert (forall ((i_V2@55@01 Int)) (!
  (=>
    (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01))
    (and
      (and
        (ssliceFromSlice_Ref%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))
        (and
          (ssliceFromSlice_Ref%precondition ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))
          (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01)))
      (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01)))
  :qid |prog.l3652_precondition|)))
(push) ; 4
(assert (not (forall ((i_V2@55@01 Int)) (!
  (=>
    (and
      (=>
        (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01))
        (and
          (and
            (ssliceFromSlice_Ref%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))
            (and
              (ssliceFromSlice_Ref%precondition ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))
              (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01)))
          (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01)))
      (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01)))
  :qid |prog.l3652|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V2@55@01 Int)) (!
  (=>
    (and (< i_V2@55@01 l_V1@22@01) (<= 0 i_V2@55@01))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) i_V2@55@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V2@55@01)))
  :qid |prog.l3652|)))
; [exec]
; (ShStructget10of17(s_V0_CN0): Ref).DefinedIA_cd675838_T$$$$_E_$$$ := Uint64_72f0d887_MbigEndian(0,
;   ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int)))
; [eval] (ShStructget10of17(s_V0_CN0): Ref)
; [eval] Uint64_72f0d887_MbigEndian(0, ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int)))
; [eval] ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))
; [eval] (slen(data_V0_CN1): Int)
(push) ; 4
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01)))
(pop) ; 4
; Joined path conditions
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01)))
(push) ; 4
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 0)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0))
(declare-const $k@56@01 $Perm)
(assert ($Perm.isReadVar $k@56@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@57@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))
    ($Perm.min
      (ite
        (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
        (/ (to_real 1) (to_real 4096))
        $Perm.No)
      $k@56@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@56@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (ite
          (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
          (/ (to_real 1) (to_real 4096))
          $Perm.No)
        $Perm.No))
    (ite
      (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))
          $k@56@01
          $Perm.No)
        (/ (to_real 1) (to_real 4096)))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))
          $k@56@01
          $Perm.No)
        $Perm.No)))
  :pattern ((inv@54@01 r))
  :qid |qp.srp3|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))
    (= (- $k@56@01 (pTaken@57@01 r)) $Perm.No))
  
  :qid |quant-u-385|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@58@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (and
    (<
      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))
      (slen<Int> data_V0@4@01))
    (<=
      0
      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 1)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1))
(declare-const $k@59@01 $Perm)
(assert ($Perm.isReadVar $k@59@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@60@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))
    ($Perm.min
      (-
        (ite
          (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
          (/ (to_real 1) (to_real 4096))
          $Perm.No)
        (pTaken@57@01 r))
      $k@59@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@59@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (ite
            (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@57@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))
        $k@59@01
        $Perm.No)
      (-
        (ite
          (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
          (/ (to_real 1) (to_real 4096))
          $Perm.No)
        (pTaken@57@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp6|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))
    (= (- $k@59@01 (pTaken@60@01 r)) $Perm.No))
  
  :qid |quant-u-388|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@61@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@61@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (ite
        (and
          (<
            (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))
            (slen<Int> data_V0@4@01))
          (<=
            0
            (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))))
        (/ (to_real 1) (to_real 4096))
        $Perm.No)
      (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@61@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 2)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2))
(declare-const $k@62@01 $Perm)
(assert ($Perm.isReadVar $k@62@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@63@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))
    ($Perm.min
      (-
        (-
          (ite
            (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@57@01 r))
        (pTaken@60@01 r))
      $k@62@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@62@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (ite
              (and
                (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                (<= 0 (inv@54@01 r)))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@57@01 r))
          (pTaken@60@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))
        $k@62@01
        $Perm.No)
      (-
        (-
          (ite
            (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@57@01 r))
        (pTaken@60@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp9|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))
    (= (- $k@62@01 (pTaken@63@01 r)) $Perm.No))
  
  :qid |quant-u-391|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@64@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@64@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (ite
          (and
            (<
              (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))
              (slen<Int> data_V0@4@01))
            (<=
              0
              (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))))
          (/ (to_real 1) (to_real 4096))
          $Perm.No)
        (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2))))
      (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@64@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 3)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3))
(declare-const $k@65@01 $Perm)
(assert ($Perm.isReadVar $k@65@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@66@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))
    ($Perm.min
      (-
        (-
          (-
            (ite
              (and
                (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                (<= 0 (inv@54@01 r)))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@57@01 r))
          (pTaken@60@01 r))
        (pTaken@63@01 r))
      $k@65@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@65@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (-
              (ite
                (and
                  (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                  (<= 0 (inv@54@01 r)))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@57@01 r))
            (pTaken@60@01 r))
          (pTaken@63@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))
        $k@65@01
        $Perm.No)
      (-
        (-
          (-
            (ite
              (and
                (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                (<= 0 (inv@54@01 r)))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@57@01 r))
          (pTaken@60@01 r))
        (pTaken@63@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp12|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))
    (= (- $k@65@01 (pTaken@66@01 r)) $Perm.No))
  
  :qid |quant-u-394|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@67@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@67@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (ite
            (and
              (<
                (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))
                (slen<Int> data_V0@4@01))
              (<=
                0
                (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3))))
        (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3))))
      (pTaken@63@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@67@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 4)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))
(declare-const $k@68@01 $Perm)
(assert ($Perm.isReadVar $k@68@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@69@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (ite
                (and
                  (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                  (<= 0 (inv@54@01 r)))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@57@01 r))
            (pTaken@60@01 r))
          (pTaken@63@01 r))
        (pTaken@66@01 r))
      $k@68@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@68@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                    (<= 0 (inv@54@01 r)))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@57@01 r))
              (pTaken@60@01 r))
            (pTaken@63@01 r))
          (pTaken@66@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))
        $k@68@01
        $Perm.No)
      (-
        (-
          (-
            (-
              (ite
                (and
                  (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                  (<= 0 (inv@54@01 r)))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@57@01 r))
            (pTaken@60@01 r))
          (pTaken@63@01 r))
        (pTaken@66@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp15|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))
    (= (- $k@68@01 (pTaken@69@01 r)) $Perm.No))
  
  :qid |quant-u-397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@70@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@70@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (ite
              (and
                (<
                  (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))
                  (slen<Int> data_V0@4@01))
                (<=
                  0
                  (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))))
          (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))))
        (pTaken@63@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))))
      (pTaken@66@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@70@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 5)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))
(declare-const $k@71@01 $Perm)
(assert ($Perm.isReadVar $k@71@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@72@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                    (<= 0 (inv@54@01 r)))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@57@01 r))
              (pTaken@60@01 r))
            (pTaken@63@01 r))
          (pTaken@66@01 r))
        (pTaken@69@01 r))
      $k@71@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@71@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                      (<= 0 (inv@54@01 r)))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@57@01 r))
                (pTaken@60@01 r))
              (pTaken@63@01 r))
            (pTaken@66@01 r))
          (pTaken@69@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))
        $k@71@01
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                    (<= 0 (inv@54@01 r)))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@57@01 r))
              (pTaken@60@01 r))
            (pTaken@63@01 r))
          (pTaken@66@01 r))
        (pTaken@69@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp18|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))
    (= (- $k@71@01 (pTaken@72@01 r)) $Perm.No))
  
  :qid |quant-u-400|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@73@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@73@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (ite
                (and
                  (<
                    (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))
                    (slen<Int> data_V0@4@01))
                  (<=
                    0
                    (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))
            (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))
          (pTaken@63@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))
        (pTaken@66@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))
      (pTaken@69@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@73@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 6)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))
(declare-const $k@74@01 $Perm)
(assert ($Perm.isReadVar $k@74@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@75@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                      (<= 0 (inv@54@01 r)))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@57@01 r))
                (pTaken@60@01 r))
              (pTaken@63@01 r))
            (pTaken@66@01 r))
          (pTaken@69@01 r))
        (pTaken@72@01 r))
      $k@74@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@74@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                        (<= 0 (inv@54@01 r)))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@57@01 r))
                  (pTaken@60@01 r))
                (pTaken@63@01 r))
              (pTaken@66@01 r))
            (pTaken@69@01 r))
          (pTaken@72@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))
        $k@74@01
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                      (<= 0 (inv@54@01 r)))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@57@01 r))
                (pTaken@60@01 r))
              (pTaken@63@01 r))
            (pTaken@66@01 r))
          (pTaken@69@01 r))
        (pTaken@72@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp21|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))
    (= (- $k@74@01 (pTaken@75@01 r)) $Perm.No))
  
  :qid |quant-u-403|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@76@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@76@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (<
                      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))
                      (slen<Int> data_V0@4@01))
                    (<=
                      0
                      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
              (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
            (pTaken@63@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
          (pTaken@66@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
        (pTaken@69@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
      (pTaken@72@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@76@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 7)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))
(declare-const $k@77@01 $Perm)
(assert ($Perm.isReadVar $k@77@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@78@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                        (<= 0 (inv@54@01 r)))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@57@01 r))
                  (pTaken@60@01 r))
                (pTaken@63@01 r))
              (pTaken@66@01 r))
            (pTaken@69@01 r))
          (pTaken@72@01 r))
        (pTaken@75@01 r))
      $k@77@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@77@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and
                          (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                          (<= 0 (inv@54@01 r)))
                        (/ (to_real 1) (to_real 4096))
                        $Perm.No)
                      (pTaken@57@01 r))
                    (pTaken@60@01 r))
                  (pTaken@63@01 r))
                (pTaken@66@01 r))
              (pTaken@69@01 r))
            (pTaken@72@01 r))
          (pTaken@75@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))
        $k@77@01
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                        (<= 0 (inv@54@01 r)))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@57@01 r))
                  (pTaken@60@01 r))
                (pTaken@63@01 r))
              (pTaken@66@01 r))
            (pTaken@69@01 r))
          (pTaken@72@01 r))
        (pTaken@75@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp24|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))
    (= (- $k@77@01 (pTaken@78@01 r)) $Perm.No))
  
  :qid |quant-u-406|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@79@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@79@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (<
                        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))
                        (slen<Int> data_V0@4@01))
                      (<=
                        0
                        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
                (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
              (pTaken@63@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
            (pTaken@66@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
          (pTaken@69@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
        (pTaken@72@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
      (pTaken@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@79@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))))
(assert (Uint64_72f0d887_MbigEndian%precondition ($Snap.combine
  ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0))))
  ($Snap.combine
    ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@61@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1))))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@64@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2))))
      ($Snap.combine
        ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@67@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3))))
        ($Snap.combine
          ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@70@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))))
          ($Snap.combine
            ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@73@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))
            ($Snap.combine
              ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@76@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
              ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@79@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))))))))) 0 (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@56@01))
(assert ($Perm.isReadVar $k@59@01))
(assert ($Perm.isReadVar $k@62@01))
(assert ($Perm.isReadVar $k@65@01))
(assert ($Perm.isReadVar $k@68@01))
(assert ($Perm.isReadVar $k@71@01))
(assert ($Perm.isReadVar $k@74@01))
(assert ($Perm.isReadVar $k@77@01))
(assert (and
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (ite
            (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          $Perm.No))
      (ite
        (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
        (<
          (ite
            (=
              r
              (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))
            $k@56@01
            $Perm.No)
          (/ (to_real 1) (to_real 4096)))
        (<
          (ite
            (=
              r
              (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))
            $k@56@01
            $Perm.No)
          $Perm.No)))
    :pattern ((inv@54@01 r))
    :qid |qp.srp3|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (and
      (<
        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))
        (slen<Int> data_V0@4@01))
      (<=
        0
        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (ite
              (and
                (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                (<= 0 (inv@54@01 r)))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@57@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))
          $k@59@01
          $Perm.No)
        (-
          (ite
            (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@57@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp6|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@61@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (ite
          (and
            (<
              (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))
              (slen<Int> data_V0@4@01))
            (<=
              0
              (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))))
          (/ (to_real 1) (to_real 4096))
          $Perm.No)
        (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@61@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (ite
                (and
                  (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                  (<= 0 (inv@54@01 r)))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@57@01 r))
            (pTaken@60@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))
          $k@62@01
          $Perm.No)
        (-
          (-
            (ite
              (and
                (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                (<= 0 (inv@54@01 r)))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@57@01 r))
          (pTaken@60@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp9|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@64@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (ite
            (and
              (<
                (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))
                (slen<Int> data_V0@4@01))
              (<=
                0
                (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2))))
        (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@64@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (-
                (ite
                  (and
                    (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                    (<= 0 (inv@54@01 r)))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@57@01 r))
              (pTaken@60@01 r))
            (pTaken@63@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))
          $k@65@01
          $Perm.No)
        (-
          (-
            (-
              (ite
                (and
                  (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                  (<= 0 (inv@54@01 r)))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@57@01 r))
            (pTaken@60@01 r))
          (pTaken@63@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp12|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@67@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (-
            (ite
              (and
                (<
                  (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))
                  (slen<Int> data_V0@4@01))
                (<=
                  0
                  (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3))))
          (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3))))
        (pTaken@63@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@67@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                      (<= 0 (inv@54@01 r)))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@57@01 r))
                (pTaken@60@01 r))
              (pTaken@63@01 r))
            (pTaken@66@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))
          $k@68@01
          $Perm.No)
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                    (<= 0 (inv@54@01 r)))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@57@01 r))
              (pTaken@60@01 r))
            (pTaken@63@01 r))
          (pTaken@66@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp15|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@70@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (-
            (-
              (ite
                (and
                  (<
                    (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))
                    (slen<Int> data_V0@4@01))
                  (<=
                    0
                    (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))))
            (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))))
          (pTaken@63@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))))
        (pTaken@66@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@70@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                        (<= 0 (inv@54@01 r)))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@57@01 r))
                  (pTaken@60@01 r))
                (pTaken@63@01 r))
              (pTaken@66@01 r))
            (pTaken@69@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))
          $k@71@01
          $Perm.No)
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                      (<= 0 (inv@54@01 r)))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@57@01 r))
                (pTaken@60@01 r))
              (pTaken@63@01 r))
            (pTaken@66@01 r))
          (pTaken@69@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp18|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@73@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (<
                      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))
                      (slen<Int> data_V0@4@01))
                    (<=
                      0
                      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))
              (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))
            (pTaken@63@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))
          (pTaken@66@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))
        (pTaken@69@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@73@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and
                          (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                          (<= 0 (inv@54@01 r)))
                        (/ (to_real 1) (to_real 4096))
                        $Perm.No)
                      (pTaken@57@01 r))
                    (pTaken@60@01 r))
                  (pTaken@63@01 r))
                (pTaken@66@01 r))
              (pTaken@69@01 r))
            (pTaken@72@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))
          $k@74@01
          $Perm.No)
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                        (<= 0 (inv@54@01 r)))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@57@01 r))
                  (pTaken@60@01 r))
                (pTaken@63@01 r))
              (pTaken@66@01 r))
            (pTaken@69@01 r))
          (pTaken@72@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp21|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@76@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (<
                        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))
                        (slen<Int> data_V0@4@01))
                      (<=
                        0
                        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
                (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
              (pTaken@63@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
            (pTaken@66@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
          (pTaken@69@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
        (pTaken@72@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@76@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (ite
                          (and
                            (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                            (<= 0 (inv@54@01 r)))
                          (/ (to_real 1) (to_real 4096))
                          $Perm.No)
                        (pTaken@57@01 r))
                      (pTaken@60@01 r))
                    (pTaken@63@01 r))
                  (pTaken@66@01 r))
                (pTaken@69@01 r))
              (pTaken@72@01 r))
            (pTaken@75@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))
          $k@77@01
          $Perm.No)
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and
                          (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                          (<= 0 (inv@54@01 r)))
                        (/ (to_real 1) (to_real 4096))
                        $Perm.No)
                      (pTaken@57@01 r))
                    (pTaken@60@01 r))
                  (pTaken@63@01 r))
                (pTaken@66@01 r))
              (pTaken@69@01 r))
            (pTaken@72@01 r))
          (pTaken@75@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp24|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@79@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (<
                          (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))
                          (slen<Int> data_V0@4@01))
                        (<=
                          0
                          (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@57@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
                  (pTaken@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
                (pTaken@63@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
              (pTaken@66@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
            (pTaken@69@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
          (pTaken@72@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))
        (pTaken@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@79@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7)))))
  (Uint64_72f0d887_MbigEndian%precondition ($Snap.combine
    ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0))))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@61@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1))))
      ($Snap.combine
        ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@64@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2))))
        ($Snap.combine
          ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@67@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3))))
          ($Snap.combine
            ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@70@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))))
            ($Snap.combine
              ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@73@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))
              ($Snap.combine
                ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@76@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
                ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@79@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))))))))) 0 (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01)))))
(declare-const DefinedIA_cd675838_T$$$$_E_$$$@80@01 Int)
(assert (=
  DefinedIA_cd675838_T$$$$_E_$$$@80@01
  (Uint64_72f0d887_MbigEndian ($Snap.combine
    ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 0))))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@61@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 1))))
      ($Snap.combine
        ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@64@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 2))))
        ($Snap.combine
          ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@67@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 3))))
          ($Snap.combine
            ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@70@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 4))))
            ($Snap.combine
              ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@73@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 5))))
              ($Snap.combine
                ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@76@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 6))))
                ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@79@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01))) 7))))))))))) 0 (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 0 (slen<Int> data_V0@4@01)))))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= (ShStructget11of17<Ref> s_V0@3@01) (ShStructget10of17<Ref> s_V0@3@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [exec]
; offset_V1 := offset_V1 + 8
; [eval] offset_V1 + 8
; [exec]
; assert (forall i_V3: Int ::
;     { (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]),
;     sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int),
;     i_V3)): Ref) }
;     0 <= i_V3 && i_V3 < l_V1 ==>
;     (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]),
;     sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int),
;     i_V3)): Ref) ==
;     (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int),
;     offset_V1 + i_V3)): Ref))
; [eval] (forall i_V3: Int :: { (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V3)): Ref) } 0 <= i_V3 && i_V3 < l_V1 ==> (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V3)): Ref) == (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int), offset_V1 + i_V3)): Ref))
(declare-const i_V3@81@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= i_V3 && i_V3 < l_V1 ==> (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V3)): Ref) == (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int), offset_V1 + i_V3)): Ref)
; [eval] 0 <= i_V3 && i_V3 < l_V1
; [eval] 0 <= i_V3
(push) ; 5
; [then-branch: 35 | 0 <= i_V3@81@01 | live]
; [else-branch: 35 | !(0 <= i_V3@81@01) | live]
(push) ; 6
; [then-branch: 35 | 0 <= i_V3@81@01]
(assert (<= 0 i_V3@81@01))
; [eval] i_V3 < l_V1
(pop) ; 6
(push) ; 6
; [else-branch: 35 | !(0 <= i_V3@81@01)]
(assert (not (<= 0 i_V3@81@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V3@81@01)) (<= 0 i_V3@81@01)))
(push) ; 5
; [then-branch: 36 | i_V3@81@01 < l_V1@22@01 && 0 <= i_V3@81@01 | live]
; [else-branch: 36 | !(i_V3@81@01 < l_V1@22@01 && 0 <= i_V3@81@01) | live]
(push) ; 6
; [then-branch: 36 | i_V3@81@01 < l_V1@22@01 && 0 <= i_V3@81@01]
(assert (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01)))
; [eval] (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V3)): Ref) == (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int), offset_V1 + i_V3)): Ref)
; [eval] (ShArrayloc((sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref]), sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V3)): Ref)
; [eval] (sarray(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): ShArray[Ref])
; [eval] ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))
; [eval] (slen(data_V0_CN1): Int)
(push) ; 7
; [eval] 0 <= i
; [eval] i <= j
(push) ; 8
(assert (not (<= 8 (slen<Int> data_V0@4@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<= 8 (slen<Int> data_V0@4@01)))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01)))
(pop) ; 7
; Joined path conditions
(assert (and
  (<= 8 (slen<Int> data_V0@4@01))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))))
; [eval] sadd((soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int), i_V3)
; [eval] (soffset(ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))): Int)
; [eval] ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))
; [eval] (slen(data_V0_CN1): Int)
(push) ; 7
; [eval] 0 <= i
; [eval] i <= j
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01))
(pop) ; 7
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01))
; [eval] (ShArrayloc((sarray(data_V0_CN1): ShArray[Ref]), sadd((soffset(data_V0_CN1): Int), offset_V1 + i_V3)): Ref)
; [eval] (sarray(data_V0_CN1): ShArray[Ref])
; [eval] sadd((soffset(data_V0_CN1): Int), offset_V1 + i_V3)
; [eval] (soffset(data_V0_CN1): Int)
; [eval] offset_V1 + i_V3
(push) ; 7
(assert (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) (+ 8 i_V3@81@01)))
(pop) ; 7
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) (+ 8 i_V3@81@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 36 | !(i_V3@81@01 < l_V1@22@01 && 0 <= i_V3@81@01)]
(assert (not (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01))
  (and
    (< i_V3@81@01 l_V1@22@01)
    (<= 0 i_V3@81@01)
    (<= 8 (slen<Int> data_V0@4@01))
    (ssliceFromSlice_Ref%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))
    (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01)
    (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) (+ 8 i_V3@81@01)))))
; Joined path conditions
(assert (or
  (not (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01)))
  (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@81@01 Int)) (!
  (and
    (or (not (<= 0 i_V3@81@01)) (<= 0 i_V3@81@01))
    (=>
      (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01))
      (and
        (< i_V3@81@01 l_V1@22@01)
        (<= 0 i_V3@81@01)
        (<= 8 (slen<Int> data_V0@4@01))
        (ssliceFromSlice_Ref%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))
        (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01)
        (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) (+
          8
          i_V3@81@01))))
    (or
      (not (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01)))
      (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01)))
  :qid |prog.l3673-aux|)))
(assert (forall ((i_V3@81@01 Int)) (!
  (=>
    (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01))
    (and
      (and
        (ssliceFromSlice_Ref%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))
        (and
          (ssliceFromSlice_Ref%precondition ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))
          (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01)))
      (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) (+ 8 i_V3@81@01))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01)))
  :qid |prog.l3673_precondition|)))
(push) ; 4
(assert (not (forall ((i_V3@81@01 Int)) (!
  (=>
    (and
      (=>
        (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01))
        (and
          (and
            (ssliceFromSlice_Ref%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))
            (and
              (ssliceFromSlice_Ref%precondition ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))
              (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01)))
          (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) (+
            8
            i_V3@81@01))))
      (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) (+
        8
        i_V3@81@01)))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01)))
  :qid |prog.l3673|))))
(check-sat)
; unsat
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(assert (forall ((i_V3@81@01 Int)) (!
  (=>
    (and (< i_V3@81@01 l_V1@22@01) (<= 0 i_V3@81@01))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) (+
        8
        i_V3@81@01)))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) i_V3@81@01)))
  :qid |prog.l3673|)))
; [exec]
; (ShStructget11of17(s_V0_CN0): Ref).DefinedIA_cd675838_T$$$$_E_$$$ := Uint64_72f0d887_MbigEndian(0,
;   ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int)))
; [eval] (ShStructget11of17(s_V0_CN0): Ref)
; [eval] Uint64_72f0d887_MbigEndian(0, ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int)))
; [eval] ssliceFromSlice_Ref(data_V0_CN1, offset_V1, (slen(data_V0_CN1): Int))
; [eval] (slen(data_V0_CN1): Int)
(push) ; 4
; [eval] 0 <= i
; [eval] i <= j
(push) ; 5
(assert (not (<= 8 (slen<Int> data_V0@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= 8 (slen<Int> data_V0@4@01)))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01)))
(pop) ; 4
; Joined path conditions
(assert (and
  (<= 8 (slen<Int> data_V0@4@01))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))))
(push) ; 4
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 0)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0))
(declare-const $k@82@01 $Perm)
(assert ($Perm.isReadVar $k@82@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@83@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))
    ($Perm.min
      (ite
        (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
        (/ (to_real 1) (to_real 4096))
        $Perm.No)
      $k@82@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@82@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (ite
          (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
          (/ (to_real 1) (to_real 4096))
          $Perm.No)
        $Perm.No))
    (ite
      (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))
          $k@82@01
          $Perm.No)
        (/ (to_real 1) (to_real 4096)))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))
          $k@82@01
          $Perm.No)
        $Perm.No)))
  :pattern ((inv@54@01 r))
  :qid |qp.srp27|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))
    (= (- $k@82@01 (pTaken@83@01 r)) $Perm.No))
  
  :qid |quant-u-409|))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (and
    (<
      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))
      (slen<Int> data_V0@4@01))
    (<=
      0
      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 1)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1))
(declare-const $k@84@01 $Perm)
(assert ($Perm.isReadVar $k@84@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@85@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))
    ($Perm.min
      (-
        (ite
          (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
          (/ (to_real 1) (to_real 4096))
          $Perm.No)
        (pTaken@83@01 r))
      $k@84@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@84@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (ite
            (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@83@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))
        $k@84@01
        $Perm.No)
      (-
        (ite
          (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
          (/ (to_real 1) (to_real 4096))
          $Perm.No)
        (pTaken@83@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp28|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))
    (= (- $k@84@01 (pTaken@85@01 r)) $Perm.No))
  
  :qid |quant-u-412|))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@86@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@86@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (ite
        (and
          (<
            (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))
            (slen<Int> data_V0@4@01))
          (<=
            0
            (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))))
        (/ (to_real 1) (to_real 4096))
        $Perm.No)
      (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@86@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 2)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2))
(declare-const $k@87@01 $Perm)
(assert ($Perm.isReadVar $k@87@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@88@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))
    ($Perm.min
      (-
        (-
          (ite
            (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@83@01 r))
        (pTaken@85@01 r))
      $k@87@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@87@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (ite
              (and
                (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                (<= 0 (inv@54@01 r)))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@83@01 r))
          (pTaken@85@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))
        $k@87@01
        $Perm.No)
      (-
        (-
          (ite
            (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@83@01 r))
        (pTaken@85@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp31|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))
    (= (- $k@87@01 (pTaken@88@01 r)) $Perm.No))
  
  :qid |quant-u-415|))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@89@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@89@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (ite
          (and
            (<
              (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))
              (slen<Int> data_V0@4@01))
            (<=
              0
              (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))))
          (/ (to_real 1) (to_real 4096))
          $Perm.No)
        (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2))))
      (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@89@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 3)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3))
(declare-const $k@90@01 $Perm)
(assert ($Perm.isReadVar $k@90@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@91@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))
    ($Perm.min
      (-
        (-
          (-
            (ite
              (and
                (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                (<= 0 (inv@54@01 r)))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@83@01 r))
          (pTaken@85@01 r))
        (pTaken@88@01 r))
      $k@90@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@90@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (-
              (ite
                (and
                  (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                  (<= 0 (inv@54@01 r)))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@83@01 r))
            (pTaken@85@01 r))
          (pTaken@88@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))
        $k@90@01
        $Perm.No)
      (-
        (-
          (-
            (ite
              (and
                (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                (<= 0 (inv@54@01 r)))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@83@01 r))
          (pTaken@85@01 r))
        (pTaken@88@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp34|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))
    (= (- $k@90@01 (pTaken@91@01 r)) $Perm.No))
  
  :qid |quant-u-418|))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@92@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@92@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (ite
            (and
              (<
                (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))
                (slen<Int> data_V0@4@01))
              (<=
                0
                (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3))))
        (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3))))
      (pTaken@88@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@92@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 4)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))
(declare-const $k@93@01 $Perm)
(assert ($Perm.isReadVar $k@93@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@94@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (ite
                (and
                  (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                  (<= 0 (inv@54@01 r)))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@83@01 r))
            (pTaken@85@01 r))
          (pTaken@88@01 r))
        (pTaken@91@01 r))
      $k@93@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@93@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                    (<= 0 (inv@54@01 r)))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@83@01 r))
              (pTaken@85@01 r))
            (pTaken@88@01 r))
          (pTaken@91@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))
        $k@93@01
        $Perm.No)
      (-
        (-
          (-
            (-
              (ite
                (and
                  (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                  (<= 0 (inv@54@01 r)))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@83@01 r))
            (pTaken@85@01 r))
          (pTaken@88@01 r))
        (pTaken@91@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp37|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))
    (= (- $k@93@01 (pTaken@94@01 r)) $Perm.No))
  
  :qid |quant-u-421|))))
(check-sat)
; unsat
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@95@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@95@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (ite
              (and
                (<
                  (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))
                  (slen<Int> data_V0@4@01))
                (<=
                  0
                  (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))))
          (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))))
        (pTaken@88@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))))
      (pTaken@91@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@95@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 5)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))
(declare-const $k@96@01 $Perm)
(assert ($Perm.isReadVar $k@96@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@97@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                    (<= 0 (inv@54@01 r)))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@83@01 r))
              (pTaken@85@01 r))
            (pTaken@88@01 r))
          (pTaken@91@01 r))
        (pTaken@94@01 r))
      $k@96@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@96@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                      (<= 0 (inv@54@01 r)))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@83@01 r))
                (pTaken@85@01 r))
              (pTaken@88@01 r))
            (pTaken@91@01 r))
          (pTaken@94@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))
        $k@96@01
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                    (<= 0 (inv@54@01 r)))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@83@01 r))
              (pTaken@85@01 r))
            (pTaken@88@01 r))
          (pTaken@91@01 r))
        (pTaken@94@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp40|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))
    (= (- $k@96@01 (pTaken@97@01 r)) $Perm.No))
  
  :qid |quant-u-424|))))
(check-sat)
; unsat
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@98@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@98@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (ite
                (and
                  (<
                    (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))
                    (slen<Int> data_V0@4@01))
                  (<=
                    0
                    (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))
            (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))
          (pTaken@88@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))
        (pTaken@91@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))
      (pTaken@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@98@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 6)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))
(declare-const $k@99@01 $Perm)
(assert ($Perm.isReadVar $k@99@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@100@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                      (<= 0 (inv@54@01 r)))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@83@01 r))
                (pTaken@85@01 r))
              (pTaken@88@01 r))
            (pTaken@91@01 r))
          (pTaken@94@01 r))
        (pTaken@97@01 r))
      $k@99@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@99@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                        (<= 0 (inv@54@01 r)))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@83@01 r))
                  (pTaken@85@01 r))
                (pTaken@88@01 r))
              (pTaken@91@01 r))
            (pTaken@94@01 r))
          (pTaken@97@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))
        $k@99@01
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                      (<= 0 (inv@54@01 r)))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@83@01 r))
                (pTaken@85@01 r))
              (pTaken@88@01 r))
            (pTaken@91@01 r))
          (pTaken@94@01 r))
        (pTaken@97@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp43|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))
    (= (- $k@99@01 (pTaken@100@01 r)) $Perm.No))
  
  :qid |quant-u-427|))))
(check-sat)
; unsat
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@101@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@101@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (<
                      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))
                      (slen<Int> data_V0@4@01))
                    (<=
                      0
                      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
              (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
            (pTaken@88@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
          (pTaken@91@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
        (pTaken@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
      (pTaken@97@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@101@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 7)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))
(declare-const $k@102@01 $Perm)
(assert ($Perm.isReadVar $k@102@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@103@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                        (<= 0 (inv@54@01 r)))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@83@01 r))
                  (pTaken@85@01 r))
                (pTaken@88@01 r))
              (pTaken@91@01 r))
            (pTaken@94@01 r))
          (pTaken@97@01 r))
        (pTaken@100@01 r))
      $k@102@01)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Constrain original permissions $k@102@01
(assert (forall ((r $Ref)) (!
  (=>
    (not
      (=
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and
                          (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                          (<= 0 (inv@54@01 r)))
                        (/ (to_real 1) (to_real 4096))
                        $Perm.No)
                      (pTaken@83@01 r))
                    (pTaken@85@01 r))
                  (pTaken@88@01 r))
                (pTaken@91@01 r))
              (pTaken@94@01 r))
            (pTaken@97@01 r))
          (pTaken@100@01 r))
        $Perm.No))
    (<
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))
        $k@102@01
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                        (<= 0 (inv@54@01 r)))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@83@01 r))
                  (pTaken@85@01 r))
                (pTaken@88@01 r))
              (pTaken@91@01 r))
            (pTaken@94@01 r))
          (pTaken@97@01 r))
        (pTaken@100@01 r))))
  :pattern ((inv@54@01 r))
  :qid |qp.srp46|)))
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))
    (= (- $k@102@01 (pTaken@103@01 r)) $Perm.No))
  
  :qid |quant-u-430|))))
(check-sat)
; unsat
(pop) ; 5
; 0.05s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@104@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (<
                        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))
                        (slen<Int> data_V0@4@01))
                      (<=
                        0
                        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
                (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
              (pTaken@88@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
            (pTaken@91@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
          (pTaken@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
        (pTaken@97@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
      (pTaken@100@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))))
(assert (Uint64_72f0d887_MbigEndian%precondition ($Snap.combine
  ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0))))
  ($Snap.combine
    ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@86@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1))))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@89@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2))))
      ($Snap.combine
        ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@92@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3))))
        ($Snap.combine
          ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@95@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))))
          ($Snap.combine
            ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@98@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))
            ($Snap.combine
              ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@101@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
              ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))))))))) 0 (ssliceFromSlice_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@82@01))
(assert ($Perm.isReadVar $k@84@01))
(assert ($Perm.isReadVar $k@87@01))
(assert ($Perm.isReadVar $k@90@01))
(assert ($Perm.isReadVar $k@93@01))
(assert ($Perm.isReadVar $k@96@01))
(assert ($Perm.isReadVar $k@99@01))
(assert ($Perm.isReadVar $k@102@01))
(assert (and
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (ite
            (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          $Perm.No))
      (ite
        (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
        (<
          (ite
            (=
              r
              (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))
            $k@82@01
            $Perm.No)
          (/ (to_real 1) (to_real 4096)))
        (<
          (ite
            (=
              r
              (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))
            $k@82@01
            $Perm.No)
          $Perm.No)))
    :pattern ((inv@54@01 r))
    :qid |qp.srp27|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (and
      (<
        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))
        (slen<Int> data_V0@4@01))
      (<=
        0
        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (ite
              (and
                (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                (<= 0 (inv@54@01 r)))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@83@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))
          $k@84@01
          $Perm.No)
        (-
          (ite
            (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@83@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp28|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@86@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (ite
          (and
            (<
              (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))
              (slen<Int> data_V0@4@01))
            (<=
              0
              (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))))
          (/ (to_real 1) (to_real 4096))
          $Perm.No)
        (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@86@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (ite
                (and
                  (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                  (<= 0 (inv@54@01 r)))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@83@01 r))
            (pTaken@85@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))
          $k@87@01
          $Perm.No)
        (-
          (-
            (ite
              (and
                (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                (<= 0 (inv@54@01 r)))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@83@01 r))
          (pTaken@85@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp31|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@89@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (ite
            (and
              (<
                (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))
                (slen<Int> data_V0@4@01))
              (<=
                0
                (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))))
            (/ (to_real 1) (to_real 4096))
            $Perm.No)
          (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2))))
        (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@89@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (-
                (ite
                  (and
                    (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                    (<= 0 (inv@54@01 r)))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@83@01 r))
              (pTaken@85@01 r))
            (pTaken@88@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))
          $k@90@01
          $Perm.No)
        (-
          (-
            (-
              (ite
                (and
                  (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                  (<= 0 (inv@54@01 r)))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@83@01 r))
            (pTaken@85@01 r))
          (pTaken@88@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp34|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@92@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (-
            (ite
              (and
                (<
                  (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))
                  (slen<Int> data_V0@4@01))
                (<=
                  0
                  (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))))
              (/ (to_real 1) (to_real 4096))
              $Perm.No)
            (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3))))
          (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3))))
        (pTaken@88@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@92@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                      (<= 0 (inv@54@01 r)))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@83@01 r))
                (pTaken@85@01 r))
              (pTaken@88@01 r))
            (pTaken@91@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))
          $k@93@01
          $Perm.No)
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                    (<= 0 (inv@54@01 r)))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@83@01 r))
              (pTaken@85@01 r))
            (pTaken@88@01 r))
          (pTaken@91@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp37|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@95@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (-
            (-
              (ite
                (and
                  (<
                    (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))
                    (slen<Int> data_V0@4@01))
                  (<=
                    0
                    (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))))
                (/ (to_real 1) (to_real 4096))
                $Perm.No)
              (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))))
            (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))))
          (pTaken@88@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))))
        (pTaken@91@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@95@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                        (<= 0 (inv@54@01 r)))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@83@01 r))
                  (pTaken@85@01 r))
                (pTaken@88@01 r))
              (pTaken@91@01 r))
            (pTaken@94@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))
          $k@96@01
          $Perm.No)
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                      (<= 0 (inv@54@01 r)))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@83@01 r))
                (pTaken@85@01 r))
              (pTaken@88@01 r))
            (pTaken@91@01 r))
          (pTaken@94@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp40|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@98@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (<
                      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))
                      (slen<Int> data_V0@4@01))
                    (<=
                      0
                      (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))))
                  (/ (to_real 1) (to_real 4096))
                  $Perm.No)
                (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))
              (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))
            (pTaken@88@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))
          (pTaken@91@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))
        (pTaken@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@98@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and
                          (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                          (<= 0 (inv@54@01 r)))
                        (/ (to_real 1) (to_real 4096))
                        $Perm.No)
                      (pTaken@83@01 r))
                    (pTaken@85@01 r))
                  (pTaken@88@01 r))
                (pTaken@91@01 r))
              (pTaken@94@01 r))
            (pTaken@97@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))
          $k@99@01
          $Perm.No)
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                        (<= 0 (inv@54@01 r)))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@83@01 r))
                  (pTaken@85@01 r))
                (pTaken@88@01 r))
              (pTaken@91@01 r))
            (pTaken@94@01 r))
          (pTaken@97@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp43|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@101@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (<
                        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))
                        (slen<Int> data_V0@4@01))
                      (<=
                        0
                        (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))))
                    (/ (to_real 1) (to_real 4096))
                    $Perm.No)
                  (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
                (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
              (pTaken@88@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
            (pTaken@91@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
          (pTaken@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
        (pTaken@97@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@101@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6)))))
  (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)
  (forall ((r $Ref)) (!
    (=>
      (not
        (=
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (ite
                          (and
                            (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                            (<= 0 (inv@54@01 r)))
                          (/ (to_real 1) (to_real 4096))
                          $Perm.No)
                        (pTaken@83@01 r))
                      (pTaken@85@01 r))
                    (pTaken@88@01 r))
                  (pTaken@91@01 r))
                (pTaken@94@01 r))
              (pTaken@97@01 r))
            (pTaken@100@01 r))
          $Perm.No))
      (<
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))
          $k@102@01
          $Perm.No)
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and
                          (< (inv@54@01 r) (slen<Int> data_V0@4@01))
                          (<= 0 (inv@54@01 r)))
                        (/ (to_real 1) (to_real 4096))
                        $Perm.No)
                      (pTaken@83@01 r))
                    (pTaken@85@01 r))
                  (pTaken@88@01 r))
                (pTaken@91@01 r))
              (pTaken@94@01 r))
            (pTaken@97@01 r))
          (pTaken@100@01 r))))
    :pattern ((inv@54@01 r))
    :qid |qp.srp46|))
  (Set_in (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)) ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>)))
  (=>
    (<
      $Perm.No
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (<
                          (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))
                          (slen<Int> data_V0@4@01))
                        (<=
                          0
                          (inv@54@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))))
                      (/ (to_real 1) (to_real 4096))
                      $Perm.No)
                    (pTaken@83@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
                  (pTaken@85@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
                (pTaken@88@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
              (pTaken@91@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
            (pTaken@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
          (pTaken@97@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))
        (pTaken@100@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7)))))
  (Uint64_72f0d887_MbigEndian%precondition ($Snap.combine
    ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0))))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@86@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1))))
      ($Snap.combine
        ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@89@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2))))
        ($Snap.combine
          ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@92@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3))))
          ($Snap.combine
            ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@95@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))))
            ($Snap.combine
              ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@98@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))
              ($Snap.combine
                ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@101@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
                ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))))))))) 0 (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01)))))
(declare-const DefinedIA_cd675838_T$$$$_E_$$$@105@01 Int)
(assert (=
  DefinedIA_cd675838_T$$$$_E_$$$@105@01
  (Uint64_72f0d887_MbigEndian ($Snap.combine
    ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@58@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 0))))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@86@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 1))))
      ($Snap.combine
        ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@89@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 2))))
        ($Snap.combine
          ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@92@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 3))))
          ($Snap.combine
            ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@95@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 4))))
            ($Snap.combine
              ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@98@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 5))))
              ($Snap.combine
                ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@101@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 6))))
                ($SortWrappers.IntTo$Snap ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) (sadd $Snap.unit (soffset<Int> (ssliceFromSlice_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01))) 7))))))))))) 0 (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 8 (slen<Int> data_V0@4@01)))))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= (ShStructget10of17<Ref> s_V0@3@01) (ShStructget11of17<Ref> s_V0@3@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [exec]
; fold acc(AbsSlice_Bytes_e630ae22_F(data_V0_CN1, 0, (slen(data_V0_CN1): Int)), 1 /
;   4096)
; [eval] (slen(data_V0_CN1): Int)
; [eval] 0 <= start_V0
; [eval] start_V0 <= end_V0
; [eval] end_V0 <= (scap(s_V0): Int)
; [eval] (scap(s_V0): Int)
(declare-const i_V1@106@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] start_V0 <= i_V1 && i_V1 < end_V0
; [eval] start_V0 <= i_V1
(push) ; 5
; [then-branch: 37 | 0 <= i_V1@106@01 | live]
; [else-branch: 37 | !(0 <= i_V1@106@01) | live]
(push) ; 6
; [then-branch: 37 | 0 <= i_V1@106@01]
(assert (<= 0 i_V1@106@01))
; [eval] i_V1 < end_V0
(pop) ; 6
(push) ; 6
; [else-branch: 37 | !(0 <= i_V1@106@01)]
(assert (not (<= 0 i_V1@106@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@106@01)) (<= 0 i_V1@106@01)))
(assert (and (< i_V1@106@01 (slen<Int> data_V0@4@01)) (<= 0 i_V1@106@01)))
; [eval] (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref)
; [eval] (sarray(s_V0): ShArray[Ref])
; [eval] sadd((soffset(s_V0): Int), i_V1)
; [eval] (soffset(s_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V1@106@01))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V1@106@01))
(pop) ; 4
(declare-fun inv@107@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@106@01 Int)) (!
  (=>
    (and (< i_V1@106@01 (slen<Int> data_V0@4@01)) (<= 0 i_V1@106@01))
    (and
      (or (not (<= 0 i_V1@106@01)) (<= 0 i_V1@106@01))
      (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V1@106@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V1@106@01)))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i_V11@106@01 Int) (i_V12@106@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and (< i_V11@106@01 (slen<Int> data_V0@4@01)) (<= 0 i_V11@106@01))
          (and (< i_V12@106@01 (slen<Int> data_V0@4@01)) (<= 0 i_V12@106@01)))
        (and
          (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V11@106@01)
          (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V12@106@01)))
      (and
        (and (< i_V11@106@01 (slen<Int> data_V0@4@01)) (<= 0 i_V11@106@01))
        (and (< i_V12@106@01 (slen<Int> data_V0@4@01)) (<= 0 i_V12@106@01))
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V11@106@01))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V12@106@01)))))
    (= i_V11@106@01 i_V12@106@01))
  
  :qid |Intbyte$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i_V1@106@01 Int)) (!
  (=>
    (and (< i_V1@106@01 (slen<Int> data_V0@4@01)) (<= 0 i_V1@106@01))
    (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) i_V1@106@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V1@106@01)))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@107@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@107@01 r)))
    (sadd%precondition $Snap.unit (soffset<Int> data_V0@4@01) (inv@107@01 r)))
  :pattern ((inv@107@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@106@01 Int)) (!
  (=>
    (and (< i_V1@106@01 (slen<Int> data_V0@4@01)) (<= 0 i_V1@106@01))
    (=
      (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V1@106@01)))
      i_V1@106@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) i_V1@106@01)))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@107@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@107@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> data_V0@4@01) (sadd $Snap.unit (soffset<Int> data_V0@4@01) (inv@107@01 r)))
      r))
  :pattern ((inv@107@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@108@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@107@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@107@01 r)))
    ($Perm.min
      (ite
        (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
        (/ (to_real 1) (to_real 4096))
        $Perm.No)
      (/ (to_real 1) (to_real 4096)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r)))
        (/ (to_real 1) (to_real 4096))
        $Perm.No)
      (pTaken@108@01 r))
    $Perm.No)
  
  :qid |quant-u-433|))))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@107@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@107@01 r)))
    (= (- (/ (to_real 1) (to_real 4096)) (pTaken@108@01 r)) $Perm.No))
  
  :qid |quant-u-434|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@109@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>)))
      (and (< (inv@107@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@107@01 r))))
    (=>
      (and (< (inv@107@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@107@01 r)))
      (Set_in r ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>)))))
  :pattern ((Set_in r ($FVF.domain_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>))))
  :qid |qp.fvfDomDef50|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (< (inv@107@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@107@01 r)))
      (and (< (inv@54@01 r) (slen<Int> data_V0@4@01)) (<= 0 (inv@54@01 r))))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))) r))
  :qid |qp.fvfValDef49|)))
(assert (AbsSlice_Bytes_e630ae22_F%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>))))) data_V0@4@01 0 (slen<Int> data_V0@4@01)))
; [exec]
; offset_V1 := offset_V1 + 8
; [eval] offset_V1 + 8
; [exec]
; inhale dstAddrBytes_V1 == 0
(declare-const $t@110@01 $Snap)
(assert (= $t@110@01 $Snap.unit))
; [eval] dstAddrBytes_V1 == 0
(assert (= dstAddrBytes_V1@12@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; dstAddrBytes_V1 := Length_840d9458_MAddrType((ShStructget8of17(s_V0_CN0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0_CN0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 4
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
(pop) ; 4
; Joined path conditions
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
(declare-const dstAddrBytes_V1@111@01 Int)
(assert (=
  dstAddrBytes_V1@111@01
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [exec]
; inhale srcAddrBytes_V1 == 0
(declare-const $t@112@01 $Snap)
(assert (= $t@112@01 $Snap.unit))
; [eval] srcAddrBytes_V1 == 0
(assert (= srcAddrBytes_V1@11@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; srcAddrBytes_V1 := Length_840d9458_MAddrType((ShStructget9of17(s_V0_CN0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0_CN0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 4
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))
(pop) ; 4
; Joined path conditions
(assert (Length_840d9458_MAddrType%precondition $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))
(declare-const srcAddrBytes_V1@113@01 Int)
(assert (=
  srcAddrBytes_V1@113@01
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))))
; [exec]
; (ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ := ssliceFromSlice_Ref(data_V0_CN1,
;   offset_V1, offset_V1 + dstAddrBytes_V1)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] ssliceFromSlice_Ref(data_V0_CN1, offset_V1, offset_V1 + dstAddrBytes_V1)
; [eval] offset_V1 + dstAddrBytes_V1
(push) ; 4
; [eval] 0 <= i
; [eval] i <= j
(push) ; 5
(assert (not (<= 16 (+ 16 dstAddrBytes_V1@111@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= 16 (+ 16 dstAddrBytes_V1@111@01)))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 5
(assert (not (<= (+ 16 dstAddrBytes_V1@111@01) (scap<Int> data_V0@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= (+ 16 dstAddrBytes_V1@111@01) (scap<Int> data_V0@4@01)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 16 (+
  16
  dstAddrBytes_V1@111@01)))
(pop) ; 4
; Joined path conditions
(assert (and
  (<= 16 (+ 16 dstAddrBytes_V1@111@01))
  (<= (+ 16 dstAddrBytes_V1@111@01) (scap<Int> data_V0@4@01))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 16 (+
    16
    dstAddrBytes_V1@111@01))))
(declare-const SliceIntbyte$$$_S_$$$$$$$_E_$$$@114@01 Slice<Ref>)
(assert (=
  SliceIntbyte$$$_S_$$$$$$$_E_$$$@114@01
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 16 (+
    16
    dstAddrBytes_V1@111@01))))
(push) ; 4
(set-option :timeout 10)
(assert (not (= (ShStructget13of17<Ref> s_V0@3@01) (ShStructget12of17<Ref> s_V0@3@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [exec]
; offset_V1 := offset_V1 + dstAddrBytes_V1
; [eval] offset_V1 + dstAddrBytes_V1
(declare-const offset_V1@115@01 Int)
(assert (= offset_V1@115@01 (+ 16 dstAddrBytes_V1@111@01)))
; [exec]
; (ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ := ssliceFromSlice_Ref(data_V0_CN1,
;   offset_V1, offset_V1 + srcAddrBytes_V1)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] ssliceFromSlice_Ref(data_V0_CN1, offset_V1, offset_V1 + srcAddrBytes_V1)
; [eval] offset_V1 + srcAddrBytes_V1
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= i
(push) ; 5
(assert (not (<= 0 offset_V1@115@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 offset_V1@115@01))
; [eval] i <= j
(push) ; 5
(assert (not (<= offset_V1@115@01 (+ offset_V1@115@01 srcAddrBytes_V1@113@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= offset_V1@115@01 (+ offset_V1@115@01 srcAddrBytes_V1@113@01)))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 5
(assert (not (<= (+ offset_V1@115@01 srcAddrBytes_V1@113@01) (scap<Int> data_V0@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= (+ offset_V1@115@01 srcAddrBytes_V1@113@01) (scap<Int> data_V0@4@01)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 offset_V1@115@01 (+
  offset_V1@115@01
  srcAddrBytes_V1@113@01)))
(pop) ; 4
; Joined path conditions
(assert (and
  (<= 0 offset_V1@115@01)
  (<= offset_V1@115@01 (+ offset_V1@115@01 srcAddrBytes_V1@113@01))
  (<= (+ offset_V1@115@01 srcAddrBytes_V1@113@01) (scap<Int> data_V0@4@01))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 offset_V1@115@01 (+
    offset_V1@115@01
    srcAddrBytes_V1@113@01))))
(declare-const SliceIntbyte$$$_S_$$$$$$$_E_$$$@116@01 Slice<Ref>)
(assert (=
  SliceIntbyte$$$_S_$$$$$$$_E_$$$@116@01
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 offset_V1@115@01 (+
    offset_V1@115@01
    srcAddrBytes_V1@113@01))))
(push) ; 4
(set-option :timeout 10)
(assert (not (= (ShStructget12of17<Ref> s_V0@3@01) (ShStructget13of17<Ref> s_V0@3@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [exec]
; fold acc(HeaderMem_840d9458_PMSCION(s_V0_CN0, data_V0_CN1), write)
; [eval] (ShStructget10of17(s_V0): Ref)
; [eval] (ShStructget11of17(s_V0): Ref)
; [eval] (ShStructget8of17(s_V0): Ref)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] (ShStructget9of17(s_V0): Ref)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0) <= (slen(ubuf_V0): Int)
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
(push) ; 4
(declare-const $k@117@01 $Perm)
(assert ($Perm.isReadVar $k@117@01))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@117@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@117@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@117@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@117@01))
  (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null))))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@118@01 $Perm)
(assert ($Perm.isReadVar $k@118@01))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@118@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@118@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@118@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@118@01))
  (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
    ($Snap.combine $Snap.unit $Snap.unit))) s_V0@3@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@117@01))
(assert ($Perm.isReadVar $k@118@01))
(assert (and
  (< $k@117@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@117@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@117@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@117@01))
    (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null)))
  (< $k@118@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@118@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@118@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@118@01))
    (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null)))
  (addrHdrLenAbstractionLeak_840d9458_PMSCION%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@3@01)))
; [eval] (slen(ubuf_V0): Int)
(push) ; 4
(assert (not (<=
  (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@3@01)
  (slen<Int> data_V0@4@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@3@01)
  (slen<Int> data_V0@4@01)))
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true) == addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 38 | True | live]
; [else-branch: 38 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 38 | True]
(declare-const $k@119@01 $Perm)
(assert ($Perm.isReadVar $k@119@01))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@119@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@119@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@119@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@119@01))
  (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null))))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const $k@120@01 $Perm)
(assert ($Perm.isReadVar $k@120@01))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@120@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@120@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@120@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@120@01))
  (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 39 | True | live]
; [else-branch: 39 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 39 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 40 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))) | live]
; [else-branch: 40 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))) | live]
(push) ; 9
; [then-branch: 40 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 40 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] !insideSlayers_V0
; [then-branch: 41 | False | dead]
; [else-branch: 41 | True | live]
(push) ; 6
; [else-branch: 41 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@119@01))
(assert ($Perm.isReadVar $k@120@01))
(assert (and
  (< $k@119@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@119@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@119@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@119@01))
    (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null)))
  (< $k@120@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@120@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@120@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@120@01))
    (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] addrHdrLenAbstractionLeak_840d9458_PMSCION(s_V0)
(push) ; 4
(declare-const $k@121@01 $Perm)
(assert ($Perm.isReadVar $k@121@01))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@121@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@121@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@121@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@121@01))
  (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null))))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@121@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@122@01 $Perm)
(assert ($Perm.isReadVar $k@122@01))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@122@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@122@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@122@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@122@01))
  (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@122@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@121@01))
(assert ($Perm.isReadVar $k@122@01))
(assert (and
  (< $k@121@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@121@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@121@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@121@01))
    (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null)))
  (< $k@122@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@122@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@122@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@122@01))
    (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null)))))
(push) ; 4
(assert (not (=
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
      ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@3@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
      ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (addrHdrLenAbstractionLeak_840d9458_PMSCION ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
      ($Snap.combine $Snap.unit $Snap.unit))) s_V0@3@01)))
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true) <= (slen(ubuf_V0): Int)
; [eval] AddrHdrLen_840d9458_PMSCION(s_V0, sliceDefault_Intbyte$$$_S_$$$(), true)
; [eval] sliceDefault_Intbyte$$$_S_$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 42 | True | live]
; [else-branch: 42 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 42 | True]
(declare-const $k@123@01 $Perm)
(assert ($Perm.isReadVar $k@123@01))
; [eval] (ShStructget8of17(s_V0): Ref)
(assert (< $k@123@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@123@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@123@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@123@01))
  (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null))))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@123@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const $k@124@01 $Perm)
(assert ($Perm.isReadVar $k@124@01))
; [eval] (ShStructget9of17(s_V0): Ref)
(assert (< $k@124@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@124@01)))
(assert (<= (- (/ (to_real 1) (to_real 2)) $k@124@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@124@01))
  (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@124@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] insideSlayers_V0 ==> Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 43 | True | live]
; [else-branch: 43 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 43 | True]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) && Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Has3Bits_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 44 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))) | live]
; [else-branch: 44 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))) | live]
(push) ; 9
; [then-branch: 44 | Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01))))))]
; [eval] Has3Bits_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 44 | !(Has3Bits_840d9458_MAddrType(_, First:(Second:(Second:(Second:(Second:($t@6@01)))))))]
(assert (not
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] !insideSlayers_V0
; [then-branch: 45 | False | dead]
; [else-branch: 45 | True | live]
(push) ; 6
; [else-branch: 45 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@123@01))
(assert ($Perm.isReadVar $k@124@01))
(assert (and
  (< $k@123@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@123@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@123@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@123@01))
    (not (= (ShStructget8of17<Ref> s_V0@3@01) $Ref.null)))
  (< $k@124@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@124@01))
  (<= (- (/ (to_real 1) (to_real 2)) $k@124@01) $Perm.Write)
  (=>
    (< $Perm.No (- (/ (to_real 1) (to_real 2)) $k@124@01))
    (not (= (ShStructget9of17<Ref> s_V0@3@01) $Ref.null)))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))
  (Has3Bits_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] (slen(ubuf_V0): Int)
(push) ; 4
(assert (not (<=
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
      ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (slen<Int> data_V0@4@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
      ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)
  (slen<Int> data_V0@4@01)))
; [eval] 0 < Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (<
  0
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
; [eval] 0 < Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (<
  0
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))))
; [eval] 0 < 2 * 8
; [eval] 2 * 8
; [eval] 2 * 8 < 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (<
  16
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  16
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) < 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (<
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) <= (slen(ubuf_V0): Int)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] (slen(ubuf_V0): Int)
(push) ; 4
(assert (not (<=
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))
  (slen<Int> data_V0@4@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))
  (slen<Int> data_V0@4@01)))
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(ubuf_V0, 2 * 8, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] ssliceFromSlice_Ref(ubuf_V0, 2 * 8, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] 2 * 8
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] 0 <= i
; [eval] i <= j
(push) ; 5
(assert (not (<=
  16
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  16
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 5
(assert (not (<=
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  (scap<Int> data_V0@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  (scap<Int> data_V0@4@01)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 16 (+
  16
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
(pop) ; 4
; Joined path conditions
(assert (and
  (<=
    16
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
  (<=
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (scap<Int> data_V0@4@01))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 16 (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))
(push) ; 4
(assert (not (=
  SliceIntbyte$$$_S_$$$$$$$_E_$$$@114@01
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 16 (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  SliceIntbyte$$$_S_$$$$$$$_E_$$$@114@01
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 16 (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))
; [eval] (ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == ssliceFromSlice_Ref(ubuf_V0, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$), 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] ssliceFromSlice_Ref(ubuf_V0, 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$), 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$))
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$) + Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8 + Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] 2 * 8
; [eval] Length_840d9458_MAddrType((ShStructget8of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget8of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] Length_840d9458_MAddrType((ShStructget9of17(s_V0): Ref).DefinedAddrType_840d9458_T$$$$_E_$$$)
; [eval] (ShStructget9of17(s_V0): Ref)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] 0 <= i
(push) ; 5
(assert (not (<=
  0
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))))
; [eval] i <= j
(push) ; 5
(assert (not (<=
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))))
; [eval] j <= (scap(s): Int)
; [eval] (scap(s): Int)
(push) ; 5
(assert (not (<=
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))
  (scap<Int> data_V0@4@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))
  (scap<Int> data_V0@4@01)))
(assert (ssliceFromSlice_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 (+
  16
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) (+
  (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
  (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))))
(pop) ; 4
; Joined path conditions
(assert (and
  (<=
    0
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))))
  (<=
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (+
      (+
        16
        (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))))
  (<=
    (+
      (+
        16
        (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))
    (scap<Int> data_V0@4@01))
  (ssliceFromSlice_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))))))
(push) ; 4
(assert (not (=
  SliceIntbyte$$$_S_$$$$$$$_E_$$$@116@01
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.17s
; (get-info :all-statistics)
(assert (=
  SliceIntbyte$$$_S_$$$$$$$_E_$$$@116@01
  (ssliceFromSlice_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) data_V0@4@01 (+
    16
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))))) (+
    (+
      16
      (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))))
    (Length_840d9458_MAddrType $Snap.unit ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@6@01)))))))))
(assert (HeaderMem_840d9458_PMSCION%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap DefinedIA_cd675838_T$$$$_E_$$$@80@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap DefinedIA_cd675838_T$$$$_E_$$$@105@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($SortWrappers.Slice<Ref>To$Snap SliceIntbyte$$$_S_$$$$$$$_E_$$$@114@01)
                                ($Snap.combine
                                  ($SortWrappers.Slice<Ref>To$Snap SliceIntbyte$$$_S_$$$$$$$_E_$$$@116@01)
                                  ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))))) s_V0@3@01 data_V0@4@01))
; [exec]
; res_V0_CN2 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const res_V0_CN2@125@01 Tuple2<Ref~_Types>)
(assert (=
  res_V0_CN2@125@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN2
; [eval] (slen(data_V0): Int)
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0_CN2@125@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 46 | res_V0_CN2@125@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
; [else-branch: 46 | res_V0_CN2@125@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 46 | res_V0_CN2@125@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
; [then-branch: 47 | res_V0_CN2@125@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
; [else-branch: 47 | res_V0_CN2@125@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
(push) ; 5
; [else-branch: 47 | res_V0_CN2@125@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
; [then-branch: 48 | res_V0_CN2@125@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
; [else-branch: 48 | res_V0_CN2@125@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
(push) ; 6
; [else-branch: 48 | res_V0_CN2@125@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 31 | slen[Int](data_V0@4@01) < AddrHdrLen_840d9458_PMSCION(((First:(Second:(Second:(Second:(Second:($t@6@01))))), First:(Second:(Second:($t@6@01)))), (_, _)), s_V0@3@01, sliceDefault_Intbyte$$$_S_$$$(_), True)]
(assert (<
  (slen<Int> data_V0@4@01)
  (AddrHdrLen_840d9458_PMSCION ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@01)))))
      ($Snap.first ($Snap.second ($Snap.second $t@6@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) s_V0@3@01 (sliceDefault_Intbyte$$$_S_$$$ $Snap.unit) true)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- New_bfd5223e_F ----------
(declare-const msg_V0@126@01 Int)
(declare-const errCtx_V0@127@01 Slice<Ref>)
(declare-const res_V0@128@01 Tuple2<Ref~_Types>)
(declare-const msg_V0@129@01 Int)
(declare-const errCtx_V0@130@01 Slice<Ref>)
(declare-const res_V0@131@01 Tuple2<Ref~_Types>)
(push) ; 1
(declare-const i_V1@132@01 Int)
(push) ; 2
; [eval] 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int)
; [eval] 0 <= i_V1
(push) ; 3
; [then-branch: 49 | 0 <= i_V1@132@01 | live]
; [else-branch: 49 | !(0 <= i_V1@132@01) | live]
(push) ; 4
; [then-branch: 49 | 0 <= i_V1@132@01]
(assert (<= 0 i_V1@132@01))
; [eval] i_V1 < (slen(errCtx_V0): Int)
; [eval] (slen(errCtx_V0): Int)
(pop) ; 4
(push) ; 4
; [else-branch: 49 | !(0 <= i_V1@132@01)]
(assert (not (<= 0 i_V1@132@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@132@01)) (<= 0 i_V1@132@01)))
(assert (and (< i_V1@132@01 (slen<Int> errCtx_V0@130@01)) (<= 0 i_V1@132@01)))
; [eval] (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref)
; [eval] (sarray(errCtx_V0): ShArray[Ref])
; [eval] sadd((soffset(errCtx_V0): Int), i_V1)
; [eval] (soffset(errCtx_V0): Int)
(push) ; 3
(assert (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@132@01))
(pop) ; 3
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@132@01))
(pop) ; 2
(declare-const $t@133@01 $FVF<Interfaceempty_interface$$$$_E_$$$>)
(declare-fun inv@134@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@132@01 Int)) (!
  (=>
    (and (< i_V1@132@01 (slen<Int> errCtx_V0@130@01)) (<= 0 i_V1@132@01))
    (and
      (or (not (<= 0 i_V1@132@01)) (<= 0 i_V1@132@01))
      (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@132@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@132@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@132@01 Int)) (!
  (=>
    (and (< i_V1@132@01 (slen<Int> errCtx_V0@130@01)) (<= 0 i_V1@132@01))
    (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@132@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@132@01)))
  :qid |quant-u-436|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@134@01 r) (slen<Int> errCtx_V0@130@01)) (<= 0 (inv@134@01 r)))
    (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@130@01) (inv@134@01 r)))
  :pattern ((inv@134@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@132@01 Int)) (!
  (=>
    (and (< i_V1@132@01 (slen<Int> errCtx_V0@130@01)) (<= 0 i_V1@132@01))
    (=
      (inv@134@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@132@01)))
      i_V1@132@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@132@01)))
  :qid |quant-u-436|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@134@01 r) (slen<Int> errCtx_V0@130@01)) (<= 0 (inv@134@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) (inv@134@01 r)))
      r))
  :pattern ((inv@134@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@132@01 Int)) (!
  (=>
    (and (< i_V1@132@01 (slen<Int> errCtx_V0@130@01)) (<= 0 i_V1@132@01))
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@132@01))
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@132@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-permImpliesNonNull|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@135@01 $Snap)
(assert (= $t@135@01 ($Snap.combine ($Snap.first $t@135@01) ($Snap.second $t@135@01))))
(declare-const i_V1@136@01 Int)
(push) ; 3
; [eval] 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int)
; [eval] 0 <= i_V1
(push) ; 4
; [then-branch: 50 | 0 <= i_V1@136@01 | live]
; [else-branch: 50 | !(0 <= i_V1@136@01) | live]
(push) ; 5
; [then-branch: 50 | 0 <= i_V1@136@01]
(assert (<= 0 i_V1@136@01))
; [eval] i_V1 < (slen(errCtx_V0): Int)
; [eval] (slen(errCtx_V0): Int)
(pop) ; 5
(push) ; 5
; [else-branch: 50 | !(0 <= i_V1@136@01)]
(assert (not (<= 0 i_V1@136@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@136@01)) (<= 0 i_V1@136@01)))
(assert (and (< i_V1@136@01 (slen<Int> errCtx_V0@130@01)) (<= 0 i_V1@136@01)))
; [eval] (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref)
; [eval] (sarray(errCtx_V0): ShArray[Ref])
; [eval] sadd((soffset(errCtx_V0): Int), i_V1)
; [eval] (soffset(errCtx_V0): Int)
(push) ; 4
(assert (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@136@01))
(pop) ; 4
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@136@01))
(pop) ; 3
(declare-fun inv@137@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@136@01 Int)) (!
  (=>
    (and (< i_V1@136@01 (slen<Int> errCtx_V0@130@01)) (<= 0 i_V1@136@01))
    (and
      (or (not (<= 0 i_V1@136@01)) (<= 0 i_V1@136@01))
      (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@136@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@136@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@136@01 Int)) (!
  (=>
    (and (< i_V1@136@01 (slen<Int> errCtx_V0@130@01)) (<= 0 i_V1@136@01))
    (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@136@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@136@01)))
  :qid |quant-u-438|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@137@01 r) (slen<Int> errCtx_V0@130@01)) (<= 0 (inv@137@01 r)))
    (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@130@01) (inv@137@01 r)))
  :pattern ((inv@137@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@136@01 Int)) (!
  (=>
    (and (< i_V1@136@01 (slen<Int> errCtx_V0@130@01)) (<= 0 i_V1@136@01))
    (=
      (inv@137@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@136@01)))
      i_V1@136@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@136@01)))
  :qid |quant-u-438|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@137@01 r) (slen<Int> errCtx_V0@130@01)) (<= 0 (inv@137@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) (inv@137@01 r)))
      r))
  :pattern ((inv@137@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@136@01 Int)) (!
  (=>
    (and (< i_V1@136@01 (slen<Int> errCtx_V0@130@01)) (<= 0 i_V1@136@01))
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@136@01))
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@130@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@130@01) i_V1@136@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second $t@135@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second $t@135@01)))))
(assert (= ($Snap.first ($Snap.second $t@135@01)) $Snap.unit))
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    res_V0@131@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second $t@135@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@135@01))) $Snap.unit))
; [eval] IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_(res_V0)
(push) ; 3
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@138@01 $Perm)
(assert ($Perm.isReadVar $k@138@01))
(assert (< $k@138@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@138@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@138@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second $t@135@01)))) res_V0@131@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@138@01))
(assert (and
  (< $k@138@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@138@01))
  (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second $t@135@01)))) res_V0@131@01)))
(assert (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second $t@135@01)))) res_V0@131@01))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
