(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun val () T@U)
(declare-fun next () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun SeqType (T@T) T@T)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun |wand#ft| (T@U Real T@U T@U T@U Real T@U T@U) T@U)
(declare-fun |wand#sm| (T@U Real T@U T@U T@U Real T@U T@U) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun WandType_wandType () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType1Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun GoodMask (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Sub| (Int Int) Int)
(declare-fun |Seq#Add| (Int Int) Int)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun List (T@U) T@U)
(declare-fun PredicateType_ListType () T@T)
(declare-fun |elems'| (T@U T@U) T@U)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |elems#triggerStateless| (T@U) T@U)
(declare-fun |head'| (T@U T@U) Int)
(declare-fun |head#triggerStateless| (T@U) Int)
(declare-fun |List#trigger| (T@U T@U) Bool)
(declare-fun |List#everUsed| (T@U) Bool)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Range| (Int Int) T@U)
(declare-fun |Seq#Skolem| (T@U T@U) Int)
(declare-fun elems (T@U T@U) T@U)
(declare-fun head (T@U T@U) Int)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |List#sm| (T@U) T@U)
(declare-fun wand (T@U Real T@U T@U T@U Real T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#ContainsTrigger| (T@U T@U) Bool)
(declare-fun getPredWandId (T@U) Int)
(declare-fun FullPerm () Real)
(declare-fun |elems#frame| (T@U T@U) T@U)
(declare-fun |head#frame| (T@U T@U) Int)
(declare-fun ZeroPMask () T@U)
(declare-fun |Seq#SkolemDiff| (T@U T@U) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type val) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type next) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated val next)
)
(assert  (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (SeqType arg0@@14)) 9)
 :qid |ctor:SeqType|
)) (forall ((arg0@@15 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@15)) arg0@@15)
 :qid |typeInv:SeqTypeInv0|
 :pattern ( (SeqType arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 Int) ) (! (let ((T (SeqTypeInv0 (type arg0@@16))))
(= (type (|Seq#Drop| arg0@@16 arg1@@2)) (SeqType T)))
 :qid |funType:Seq#Drop|
 :pattern ( (|Seq#Drop| arg0@@16 arg1@@2))
))))
(assert (forall ((s T@U) (n Int) ) (! (let ((T@@0 (SeqTypeInv0 (type s))))
 (=> (= (type s) (SeqType T@@0)) (and (=> (<= 0 n) (and (=> (<= n (|Seq#Length| s)) (= (|Seq#Length| (|Seq#Drop| s n)) (- (|Seq#Length| s) n))) (=> (< (|Seq#Length| s) n) (= (|Seq#Length| (|Seq#Drop| s n)) 0)))) (=> (< n 0) (= (|Seq#Length| (|Seq#Drop| s n)) (|Seq#Length| s))))))
 :qid |stdinbpl.275:18|
 :skolemid |38|
 :pattern ( (|Seq#Length| (|Seq#Drop| s n)))
 :pattern ( (|Seq#Length| s) (|Seq#Drop| s n))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@17 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@17 arg1@@3)) 10)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@18 arg1@@4)) arg0@@18)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@18 arg1@@4))
))) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@19 arg1@@5)) arg1@@5)
 :qid |typeInv:MapType0TypeInv1|
 :pattern ( (MapType0Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@U) (arg1@@6 T@U) (arg2 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@20))))
(= (type (MapType0Select arg0@@20 arg1@@6 arg2)) aVar1))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@20 arg1@@6 arg2))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar1@@0 (type arg3)))
(let ((aVar0 (type arg1@@7)))
(= (type (MapType0Store arg0@@21 arg1@@7 arg2@@0 arg3)) (MapType0Type aVar0 aVar1@@0))))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@21 arg1@@7 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val@@0 T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m))))
 (=> (= (type val@@0) aVar1@@1) (= (MapType0Select (MapType0Store m x0 x1 val@@0) x0 x1) val@@0)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@1 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@1) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@2 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@2) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@3 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@3) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (forall ((arg0@@22 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@22))))
(= (type (WandMaskField arg0@@22)) (FieldType A (MapType0Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@22))
))) (= (Ctor WandType_wandType) 11)) (= (Ctor FrameTypeType) 12)) (forall ((arg0@@23 T@U) (arg1@@8 Real) (arg2@@1 T@U) (arg3@@0 T@U) (arg4 T@U) (arg5 Real) (arg6 T@U) (arg7 T@U) ) (! (= (type (|wand#ft| arg0@@23 arg1@@8 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@23 arg1@@8 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7))
))) (forall ((arg0@@24 T@U) (arg1@@9 Real) (arg2@@2 T@U) (arg3@@1 T@U) (arg4@@0 T@U) (arg5@@0 Real) (arg6@@0 T@U) (arg7@@0 T@U) ) (! (= (type (|wand#sm| arg0@@24 arg1@@9 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0)) (FieldType WandType_wandType (MapType0Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@24 arg1@@9 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0))
))))
(assert (forall ((arg1@@10 T@U) (arg2@@3 Real) (arg3@@2 T@U) (arg4@@1 T@U) (arg5@@1 T@U) (arg6@@1 Real) (arg7@@1 T@U) (arg8 T@U) ) (!  (=> (and (and (and (and (and (= (type arg1@@10) RefType) (= (type arg3@@2) RefType)) (= (type arg4@@1) (SeqType intType))) (= (type arg5@@1) RefType)) (= (type arg7@@1) RefType)) (= (type arg8) (SeqType intType))) (= (|wand#sm| arg1@@10 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8) (WandMaskField (|wand#ft| arg1@@10 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8))))
 :qid |stdinbpl.565:15|
 :skolemid |62|
 :pattern ( (WandMaskField (|wand#ft| arg1@@10 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8)))
)))
(assert  (and (and (and (and (and (forall ((arg0@@25 T@T) ) (! (= (Ctor (MapType1Type arg0@@25)) 13)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@26 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@26)) arg0@@26)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@26))
))) (forall ((arg0@@27 T@U) (arg1@@11 T@U) (arg2@@4 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2@@4))))
(= (type (MapType1Select arg0@@27 arg1@@11 arg2@@4)) B))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@27 arg1@@11 arg2@@4))
))) (forall ((arg0@@28 T@U) (arg1@@12 T@U) (arg2@@5 T@U) (arg3@@3 T@U) ) (! (let ((aVar0@@0 (type arg1@@12)))
(= (type (MapType1Store arg0@@28 arg1@@12 arg2@@5 arg3@@3)) (MapType1Type aVar0@@0)))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@28 arg1@@12 arg2@@5 arg3@@3))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@4 T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1@@3))))
 (=> (= (type val@@4) B@@0) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@4) x0@@3 x1@@3) val@@4)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@5 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@5) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@6 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@6) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@7 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@7) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType1Type RefType)) (= (type Heap1) (MapType1Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType1Type RefType)) (= (type Mask) (MapType0Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType1Type RefType)) (= (type Heap1@@0) (MapType1Type RefType))) (= (type Heap2) (MapType1Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert (forall ((arg0@@29 T@U) (arg1@@13 Int) ) (! (let ((T@@1 (SeqTypeInv0 (type arg0@@29))))
(= (type (|Seq#Index| arg0@@29 arg1@@13)) T@@1))
 :qid |funType:Seq#Index|
 :pattern ( (|Seq#Index| arg0@@29 arg1@@13))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) (j Int) ) (! (let ((T@@2 (SeqTypeInv0 (type s@@0))))
 (=> (= (type s@@0) (SeqType T@@2)) (=> (and (and (< 0 n@@0) (<= 0 j)) (< j (- (|Seq#Length| s@@0) n@@0))) (and (= (|Seq#Sub| (|Seq#Add| j n@@0) n@@0) j) (= (|Seq#Index| (|Seq#Drop| s@@0 n@@0) j) (|Seq#Index| s@@0 (|Seq#Add| j n@@0)))))))
 :qid |stdinbpl.296:18|
 :skolemid |39|
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@0 n@@0) j))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@30 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@30))))
(= (type (PredicateMaskField arg0@@30)) (FieldType A@@0 (MapType0Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@30))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType1Type RefType)) (= (type ExhaleHeap) (MapType1Type RefType))) (= (type Mask@@0) (MapType0Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType1Select Heap@@0 null (PredicateMaskField pm_f)) (MapType1Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType1Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType1Type RefType)) (= (type ExhaleHeap@@0) (MapType1Type RefType))) (= (type Mask@@1) (MapType0Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType1Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType1Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType1Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_ListType) 14) (forall ((arg0@@31 T@U) ) (! (= (type (List arg0@@31)) (FieldType PredicateType_ListType FrameTypeType))
 :qid |funType:List|
 :pattern ( (List arg0@@31))
))))
(assert (forall ((xs T@U) ) (!  (=> (= (type xs) RefType) (IsPredicateField (List xs)))
 :qid |stdinbpl.848:15|
 :skolemid |76|
 :pattern ( (List xs))
)))
(assert  (and (forall ((arg0@@32 T@U) (arg1@@14 T@U) ) (! (= (type (|elems'| arg0@@32 arg1@@14)) (SeqType intType))
 :qid |funType:elems'|
 :pattern ( (|elems'| arg0@@32 arg1@@14))
)) (forall ((arg0@@33 T@U) ) (! (= (type (|elems#triggerStateless| arg0@@33)) (SeqType intType))
 :qid |funType:elems#triggerStateless|
 :pattern ( (|elems#triggerStateless| arg0@@33))
))))
(assert (forall ((Heap@@2 T@U) (xs@@0 T@U) ) (!  (=> (and (= (type Heap@@2) (MapType1Type RefType)) (= (type xs@@0) RefType)) (dummyFunction (|elems#triggerStateless| xs@@0)))
 :qid |stdinbpl.600:15|
 :skolemid |66|
 :pattern ( (|elems'| Heap@@2 xs@@0))
)))
(assert (forall ((Heap@@3 T@U) (xs@@1 T@U) ) (!  (=> (and (= (type Heap@@3) (MapType1Type RefType)) (= (type xs@@1) RefType)) (dummyFunction (int_2_U (|head#triggerStateless| xs@@1))))
 :qid |stdinbpl.738:15|
 :skolemid |71|
 :pattern ( (|head'| Heap@@3 xs@@1))
)))
(assert (forall ((Heap@@4 T@U) (xs@@2 T@U) ) (!  (=> (and (= (type Heap@@4) (MapType1Type RefType)) (= (type xs@@2) RefType)) (|List#everUsed| (List xs@@2)))
 :qid |stdinbpl.867:15|
 :skolemid |80|
 :pattern ( (|List#trigger| Heap@@4 (List xs@@2)))
)))
(assert (forall ((arg0@@34 T@U) (arg1@@15 Int) (arg2@@6 T@U) ) (! (let ((T@@3 (type arg2@@6)))
(= (type (|Seq#Update| arg0@@34 arg1@@15 arg2@@6)) (SeqType T@@3)))
 :qid |funType:Seq#Update|
 :pattern ( (|Seq#Update| arg0@@34 arg1@@15 arg2@@6))
)))
(assert (forall ((s@@1 T@U) (i Int) (v T@U) (n@@1 Int) ) (! (let ((T@@4 (type v)))
 (=> (= (type s@@1) (SeqType T@@4)) (=> (and (<= 0 n@@1) (< n@@1 (|Seq#Length| s@@1))) (and (=> (= i n@@1) (= (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1) v)) (=> (not (= i n@@1)) (= (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1) (|Seq#Index| s@@1 n@@1)))))))
 :qid |stdinbpl.251:18|
 :skolemid |35|
 :pattern ( (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1))
 :pattern ( (|Seq#Index| s@@1 n@@1) (|Seq#Update| s@@1 i v))
)))
(assert (forall ((arg0@@35 T@U) (arg1@@16 Int) ) (! (let ((T@@5 (SeqTypeInv0 (type arg0@@35))))
(= (type (|Seq#Take| arg0@@35 arg1@@16)) (SeqType T@@5)))
 :qid |funType:Seq#Take|
 :pattern ( (|Seq#Take| arg0@@35 arg1@@16))
)))
(assert (forall ((s@@2 T@U) (n@@2 Int) ) (! (let ((T@@6 (SeqTypeInv0 (type s@@2))))
 (=> (= (type s@@2) (SeqType T@@6)) (and (=> (<= 0 n@@2) (and (=> (<= n@@2 (|Seq#Length| s@@2)) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) n@@2)) (=> (< (|Seq#Length| s@@2) n@@2) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) (|Seq#Length| s@@2))))) (=> (< n@@2 0) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) 0)))))
 :qid |stdinbpl.262:18|
 :skolemid |36|
 :pattern ( (|Seq#Length| (|Seq#Take| s@@2 n@@2)))
 :pattern ( (|Seq#Take| s@@2 n@@2) (|Seq#Length| s@@2))
)))
(assert (forall ((arg0@@36 Int) (arg1@@17 Int) ) (! (= (type (|Seq#Range| arg0@@36 arg1@@17)) (SeqType intType))
 :qid |funType:Seq#Range|
 :pattern ( (|Seq#Range| arg0@@36 arg1@@17))
)))
(assert (forall ((q@min Int) (q@max Int) (v@@0 T@U) ) (!  (=> (= (type v@@0) intType) (= (|Seq#Contains| (|Seq#Range| q@min q@max) v@@0)  (and (<= q@min (U_2_int v@@0)) (< (U_2_int v@@0) q@max))))
 :qid |stdinbpl.535:15|
 :skolemid |57|
 :pattern ( (|Seq#Contains| (|Seq#Range| q@min q@max) v@@0))
)))
(assert (forall ((s@@3 T@U) (x@@8 T@U) ) (! (let ((T@@7 (type x@@8)))
 (=> (and (= (type s@@3) (SeqType T@@7)) (|Seq#Contains| s@@3 x@@8)) (and (and (<= 0 (|Seq#Skolem| s@@3 x@@8)) (< (|Seq#Skolem| s@@3 x@@8) (|Seq#Length| s@@3))) (= (|Seq#Index| s@@3 (|Seq#Skolem| s@@3 x@@8)) x@@8))))
 :qid |stdinbpl.393:18|
 :skolemid |47|
 :pattern ( (|Seq#Contains| s@@3 x@@8))
)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@5) (MapType1Type RefType)) (= (type ExhaleHeap@@1) (MapType1Type RefType))) (= (type Mask@@2) (MapType0Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType1Select Heap@@5 o_1 $allocated))) (U_2_bool (MapType1Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@1 Mask@@2) (MapType1Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((arg0@@37 T@U) (arg1@@18 T@U) ) (! (= (type (elems arg0@@37 arg1@@18)) (SeqType intType))
 :qid |funType:elems|
 :pattern ( (elems arg0@@37 arg1@@18))
)))
(assert (forall ((Heap@@6 T@U) (xs@@3 T@U) ) (!  (=> (and (= (type Heap@@6) (MapType1Type RefType)) (= (type xs@@3) RefType)) (and (= (elems Heap@@6 xs@@3) (|elems'| Heap@@6 xs@@3)) (dummyFunction (|elems#triggerStateless| xs@@3))))
 :qid |stdinbpl.596:15|
 :skolemid |65|
 :pattern ( (elems Heap@@6 xs@@3))
)))
(assert (forall ((Heap@@7 T@U) (xs@@4 T@U) ) (!  (=> (and (= (type Heap@@7) (MapType1Type RefType)) (= (type xs@@4) RefType)) (and (= (head Heap@@7 xs@@4) (|head'| Heap@@7 xs@@4)) (dummyFunction (int_2_U (|head#triggerStateless| xs@@4)))))
 :qid |stdinbpl.734:15|
 :skolemid |70|
 :pattern ( (head Heap@@7 xs@@4))
)))
(assert (forall ((s@@4 T@U) (n@@3 Int) ) (! (let ((T@@8 (SeqTypeInv0 (type s@@4))))
 (=> (and (= (type s@@4) (SeqType T@@8)) (<= n@@3 0)) (= (|Seq#Drop| s@@4 n@@3) s@@4)))
 :qid |stdinbpl.377:18|
 :skolemid |45|
 :pattern ( (|Seq#Drop| s@@4 n@@3))
)))
(assert (forall ((i@@0 Int) (j@@0 Int) ) (! (= (|Seq#Sub| i@@0 j@@0) (- i@@0 j@@0))
 :qid |stdinbpl.231:15|
 :skolemid |30|
 :pattern ( (|Seq#Sub| i@@0 j@@0))
)))
(assert (forall ((i@@1 Int) (j@@1 Int) ) (! (= (|Seq#Add| i@@1 j@@1) (+ i@@1 j@@1))
 :qid |stdinbpl.229:15|
 :skolemid |29|
 :pattern ( (|Seq#Add| i@@1 j@@1))
)))
(assert (forall ((arg0@@38 T@U) ) (! (let ((T@@9 (type arg0@@38)))
(= (type (|Seq#Singleton| arg0@@38)) (SeqType T@@9)))
 :qid |funType:Seq#Singleton|
 :pattern ( (|Seq#Singleton| arg0@@38))
)))
(assert (forall ((x@@9 T@U) (y@@1 T@U) ) (! (let ((T@@10 (type x@@9)))
 (=> (= (type y@@1) T@@10) (= (|Seq#Contains| (|Seq#Singleton| x@@9) y@@1) (= x@@9 y@@1))))
 :qid |stdinbpl.518:18|
 :skolemid |54|
 :pattern ( (|Seq#Contains| (|Seq#Singleton| x@@9) y@@1))
)))
(assert (forall ((s@@5 T@U) (n@@4 Int) (j@@2 Int) ) (! (let ((T@@11 (SeqTypeInv0 (type s@@5))))
 (=> (= (type s@@5) (SeqType T@@11)) (=> (and (and (<= 0 j@@2) (< j@@2 n@@4)) (< j@@2 (|Seq#Length| s@@5))) (= (|Seq#Index| (|Seq#Take| s@@5 n@@4) j@@2) (|Seq#Index| s@@5 j@@2)))))
 :qid |stdinbpl.270:18|
 :skolemid |37|
 :pattern ( (|Seq#Index| (|Seq#Take| s@@5 n@@4) j@@2))
 :pattern ( (|Seq#Index| s@@5 j@@2) (|Seq#Take| s@@5 n@@4))
)))
(assert (forall ((xs@@5 T@U) (xs2 T@U) ) (!  (=> (and (and (= (type xs@@5) RefType) (= (type xs2) RefType)) (= (List xs@@5) (List xs2))) (= xs@@5 xs2))
 :qid |stdinbpl.858:15|
 :skolemid |78|
 :pattern ( (List xs@@5) (List xs2))
)))
(assert (forall ((arg0@@39 T@U) ) (! (= (type (|List#sm| arg0@@39)) (FieldType PredicateType_ListType (MapType0Type RefType boolType)))
 :qid |funType:List#sm|
 :pattern ( (|List#sm| arg0@@39))
)))
(assert (forall ((xs@@6 T@U) (xs2@@0 T@U) ) (!  (=> (and (and (= (type xs@@6) RefType) (= (type xs2@@0) RefType)) (= (|List#sm| xs@@6) (|List#sm| xs2@@0))) (= xs@@6 xs2@@0))
 :qid |stdinbpl.862:15|
 :skolemid |79|
 :pattern ( (|List#sm| xs@@6) (|List#sm| xs2@@0))
)))
(assert (forall ((arg0@@40 T@U) (arg1@@19 Real) (arg2@@7 T@U) (arg3@@4 T@U) (arg4@@2 T@U) (arg5@@2 Real) (arg6@@2 T@U) (arg7@@2 T@U) ) (! (= (type (wand arg0@@40 arg1@@19 arg2@@7 arg3@@4 arg4@@2 arg5@@2 arg6@@2 arg7@@2)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@40 arg1@@19 arg2@@7 arg3@@4 arg4@@2 arg5@@2 arg6@@2 arg7@@2))
)))
(assert (forall ((arg1@@20 T@U) (arg2@@8 Real) (arg3@@5 T@U) (arg4@@3 T@U) (arg5@@3 T@U) (arg6@@3 Real) (arg7@@3 T@U) (arg8@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type arg1@@20) RefType) (= (type arg3@@5) RefType)) (= (type arg4@@3) (SeqType intType))) (= (type arg5@@3) RefType)) (= (type arg7@@3) RefType)) (= (type arg8@@0) (SeqType intType))) (IsWandField (wand arg1@@20 arg2@@8 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@0)))
 :qid |stdinbpl.549:15|
 :skolemid |58|
 :pattern ( (wand arg1@@20 arg2@@8 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@0))
)))
(assert (forall ((arg1@@21 T@U) (arg2@@9 Real) (arg3@@6 T@U) (arg4@@4 T@U) (arg5@@4 T@U) (arg6@@4 Real) (arg7@@4 T@U) (arg8@@1 T@U) ) (!  (=> (and (and (and (and (and (= (type arg1@@21) RefType) (= (type arg3@@6) RefType)) (= (type arg4@@4) (SeqType intType))) (= (type arg5@@4) RefType)) (= (type arg7@@4) RefType)) (= (type arg8@@1) (SeqType intType))) (IsWandField (|wand#ft| arg1@@21 arg2@@9 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@1)))
 :qid |stdinbpl.553:15|
 :skolemid |59|
 :pattern ( (|wand#ft| arg1@@21 arg2@@9 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@1))
)))
(assert (forall ((Heap@@8 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@8) (MapType1Type RefType)) (= (type ExhaleHeap@@2) (MapType1Type RefType))) (= (type Mask@@3) (MapType0Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType1Select Heap@@8 o_1@@0 f_2) (MapType1Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@2 Mask@@3) (MapType1Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((arg1@@22 T@U) (arg2@@10 Real) (arg3@@7 T@U) (arg4@@5 T@U) (arg5@@5 T@U) (arg6@@5 Real) (arg7@@5 T@U) (arg8@@2 T@U) ) (!  (=> (and (and (and (and (and (= (type arg1@@22) RefType) (= (type arg3@@7) RefType)) (= (type arg4@@5) (SeqType intType))) (= (type arg5@@5) RefType)) (= (type arg7@@5) RefType)) (= (type arg8@@2) (SeqType intType))) (not (IsPredicateField (wand arg1@@22 arg2@@10 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@2))))
 :qid |stdinbpl.557:15|
 :skolemid |60|
 :pattern ( (wand arg1@@22 arg2@@10 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@2))
)))
(assert (forall ((arg1@@23 T@U) (arg2@@11 Real) (arg3@@8 T@U) (arg4@@6 T@U) (arg5@@6 T@U) (arg6@@6 Real) (arg7@@6 T@U) (arg8@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type arg1@@23) RefType) (= (type arg3@@8) RefType)) (= (type arg4@@6) (SeqType intType))) (= (type arg5@@6) RefType)) (= (type arg7@@6) RefType)) (= (type arg8@@3) (SeqType intType))) (not (IsPredicateField (|wand#ft| arg1@@23 arg2@@11 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@3))))
 :qid |stdinbpl.561:15|
 :skolemid |61|
 :pattern ( (|wand#ft| arg1@@23 arg2@@11 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@3))
)))
(assert (forall ((T@@12 T@T) ) (! (= (type (|Seq#Empty| T@@12)) (SeqType T@@12))
 :qid |funType:Seq#Empty|
 :pattern ( (|Seq#Empty| T@@12))
)))
(assert (forall ((T@@13 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@13)) 0)
 :skolemid |23|
)))
(assert  (and (= (type dummyHeap) (MapType1Type RefType)) (= (type ZeroMask) (MapType0Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.174:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert (forall ((arg0@@41 T@U) (arg1@@24 T@U) ) (! (let ((T@@14 (SeqTypeInv0 (type arg0@@41))))
(= (type (|Seq#Append| arg0@@41 arg1@@24)) (SeqType T@@14)))
 :qid |funType:Seq#Append|
 :pattern ( (|Seq#Append| arg0@@41 arg1@@24))
)))
(assert (forall ((s0 T@U) (s1 T@U) (n@@5 Int) ) (! (let ((T@@15 (SeqTypeInv0 (type s0))))
 (=> (and (= (type s0) (SeqType T@@15)) (= (type s1) (SeqType T@@15))) (=> (and (and (and (not (= s0 (|Seq#Empty| T@@15))) (not (= s1 (|Seq#Empty| T@@15)))) (<= (|Seq#Length| s0) n@@5)) (< n@@5 (|Seq#Length| (|Seq#Append| s0 s1)))) (and (= (|Seq#Add| (|Seq#Sub| n@@5 (|Seq#Length| s0)) (|Seq#Length| s0)) n@@5) (= (|Seq#Index| (|Seq#Append| s0 s1) n@@5) (|Seq#Index| s1 (|Seq#Sub| n@@5 (|Seq#Length| s0))))))))
 :qid |stdinbpl.242:18|
 :skolemid |32|
 :pattern ( (|Seq#Index| (|Seq#Append| s0 s1) n@@5))
)))
(assert  (not (IsPredicateField val)))
(assert  (not (IsWandField val)))
(assert  (not (IsPredicateField next)))
(assert  (not (IsWandField next)))
(assert (forall ((Heap@@9 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@9) (MapType1Type RefType)) (= (type ExhaleHeap@@3) (MapType1Type RefType))) (= (type Mask@@4) (MapType0Type RefType realType))) (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@9 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType0Type RefType realType)) (= (type SummandMask1) (MapType0Type RefType realType))) (= (type SummandMask2) (MapType0Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType0Select ResultMask o_2 f_4)) (+ (U_2_real (MapType0Select SummandMask1 o_2 f_4)) (U_2_real (MapType0Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@42 Real) (arg1@@25 T@U) ) (! (= (type (ConditionalFrame arg0@@42 arg1@@25)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@42 arg1@@25))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.162:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((q@min@@0 Int) (q@max@@0 Int) (j@@3 Int) ) (!  (=> (and (<= 0 j@@3) (< j@@3 (- q@max@@0 q@min@@0))) (= (U_2_int (|Seq#Index| (|Seq#Range| q@min@@0 q@max@@0) j@@3)) (+ q@min@@0 j@@3)))
 :qid |stdinbpl.533:15|
 :skolemid |56|
 :pattern ( (|Seq#Index| (|Seq#Range| q@min@@0 q@max@@0) j@@3))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType0Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType0Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (let ((T@@16 (SeqTypeInv0 (type s0@@0))))
 (=> (and (and (= (type s0@@0) (SeqType T@@16)) (= (type s1@@0) (SeqType T@@16))) (and (not (= s0@@0 (|Seq#Empty| T@@16))) (not (= s1@@0 (|Seq#Empty| T@@16))))) (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))))
 :qid |stdinbpl.211:18|
 :skolemid |26|
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (forall ((s@@6 T@U) (t T@U) (n@@6 Int) ) (! (let ((T@@17 (SeqTypeInv0 (type s@@6))))
 (=> (and (and (= (type s@@6) (SeqType T@@17)) (= (type t) (SeqType T@@17))) (and (> n@@6 0) (> n@@6 (|Seq#Length| s@@6)))) (and (= (|Seq#Add| (|Seq#Sub| n@@6 (|Seq#Length| s@@6)) (|Seq#Length| s@@6)) n@@6) (= (|Seq#Drop| (|Seq#Append| s@@6 t) n@@6) (|Seq#Drop| t (|Seq#Sub| n@@6 (|Seq#Length| s@@6)))))))
 :qid |stdinbpl.367:18|
 :skolemid |44|
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@6 t) n@@6))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType0Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType0Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((arg1@@26 T@U) (arg2@@12 Real) (arg3@@9 T@U) (arg4@@7 T@U) (arg5@@7 T@U) (arg6@@7 Real) (arg7@@7 T@U) (arg8@@4 T@U) (arg1_2 T@U) (arg2_2 Real) (arg3_2 T@U) (arg4_2 T@U) (arg5_2 T@U) (arg6_2 Real) (arg7_2 T@U) (arg8_2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@26) RefType) (= (type arg3@@9) RefType)) (= (type arg4@@7) (SeqType intType))) (= (type arg5@@7) RefType)) (= (type arg7@@7) RefType)) (= (type arg8@@4) (SeqType intType))) (= (type arg1_2) RefType)) (= (type arg3_2) RefType)) (= (type arg4_2) (SeqType intType))) (= (type arg5_2) RefType)) (= (type arg7_2) RefType)) (= (type arg8_2) (SeqType intType))) (= (wand arg1@@26 arg2@@12 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@4) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2))) (and (= arg1@@26 arg1_2) (and (= arg2@@12 arg2_2) (and (= arg3@@9 arg3_2) (and (= arg4@@7 arg4_2) (and (= arg5@@7 arg5_2) (and (= arg6@@7 arg6_2) (and (= arg7@@7 arg7_2) (= arg8@@4 arg8_2)))))))))
 :qid |stdinbpl.573:15|
 :skolemid |64|
 :pattern ( (wand arg1@@26 arg2@@12 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@4) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2))
)))
(assert (forall ((s@@7 T@U) (t@@0 T@U) (n@@7 Int) ) (! (let ((T@@18 (SeqTypeInv0 (type s@@7))))
 (=> (and (and (= (type s@@7) (SeqType T@@18)) (= (type t@@0) (SeqType T@@18))) (and (> n@@7 0) (> n@@7 (|Seq#Length| s@@7)))) (and (= (|Seq#Add| (|Seq#Sub| n@@7 (|Seq#Length| s@@7)) (|Seq#Length| s@@7)) n@@7) (= (|Seq#Take| (|Seq#Append| s@@7 t@@0) n@@7) (|Seq#Append| s@@7 (|Seq#Take| t@@0 (|Seq#Sub| n@@7 (|Seq#Length| s@@7))))))))
 :qid |stdinbpl.354:18|
 :skolemid |42|
 :pattern ( (|Seq#Take| (|Seq#Append| s@@7 t@@0) n@@7))
)))
(assert (forall ((q@min@@1 Int) (q@max@@1 Int) ) (!  (and (=> (< q@min@@1 q@max@@1) (= (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)) (- q@max@@1 q@min@@1))) (=> (<= q@max@@1 q@min@@1) (= (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)) 0)))
 :qid |stdinbpl.532:15|
 :skolemid |55|
 :pattern ( (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)))
)))
(assert (forall ((Heap@@10 T@U) (Mask@@6 T@U) (xs@@7 T@U) ) (!  (=> (and (and (and (= (type Heap@@10) (MapType1Type RefType)) (= (type Mask@@6) (MapType0Type RefType realType))) (= (type xs@@7) RefType)) (and (state Heap@@10 Mask@@6) (< AssumeFunctionsAbove 0))) (= (elems Heap@@10 xs@@7) (|Seq#Append| (|Seq#Singleton| (MapType1Select Heap@@10 xs@@7 val)) (ite (= (MapType1Select Heap@@10 xs@@7 next) null) (|Seq#Empty| intType) (|elems'| Heap@@10 (MapType1Select Heap@@10 xs@@7 next))))))
 :qid |stdinbpl.606:15|
 :skolemid |67|
 :pattern ( (state Heap@@10 Mask@@6) (elems Heap@@10 xs@@7))
 :pattern ( (state Heap@@10 Mask@@6) (|elems#triggerStateless| xs@@7) (|List#trigger| Heap@@10 (List xs@@7)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (let ((T@@19 (SeqTypeInv0 (type a))))
 (=> (and (and (= (type a) (SeqType T@@19)) (= (type b) (SeqType T@@19))) (|Seq#Equal| a b)) (= a b)))
 :qid |stdinbpl.505:18|
 :skolemid |53|
 :pattern ( (|Seq#Equal| a b))
)))
(assert (forall ((s@@8 T@U) (i@@2 Int) ) (! (let ((T@@20 (SeqTypeInv0 (type s@@8))))
 (=> (= (type s@@8) (SeqType T@@20)) (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@8))) (|Seq#ContainsTrigger| s@@8 (|Seq#Index| s@@8 i@@2)))))
 :qid |stdinbpl.398:18|
 :skolemid |49|
 :pattern ( (|Seq#Index| s@@8 i@@2))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) ) (! (let ((T@@21 (SeqTypeInv0 (type s0@@1))))
 (=> (and (= (type s0@@1) (SeqType T@@21)) (= (type s1@@1) (SeqType T@@21))) (and (=> (= s0@@1 (|Seq#Empty| T@@21)) (= (|Seq#Append| s0@@1 s1@@1) s1@@1)) (=> (= s1@@1 (|Seq#Empty| T@@21)) (= (|Seq#Append| s0@@1 s1@@1) s0@@1)))))
 :qid |stdinbpl.217:18|
 :skolemid |27|
 :pattern ( (|Seq#Append| s0@@1 s1@@1))
)))
(assert (forall ((t@@1 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@1) 0) t@@1)
 :qid |stdinbpl.221:18|
 :skolemid |28|
 :pattern ( (|Seq#Singleton| t@@1))
)))
(assert (forall ((arg1@@27 T@U) (arg2@@13 Real) (arg3@@10 T@U) (arg4@@8 T@U) (arg5@@8 T@U) (arg6@@8 Real) (arg7@@8 T@U) (arg8@@5 T@U) ) (!  (=> (and (and (and (and (and (= (type arg1@@27) RefType) (= (type arg3@@10) RefType)) (= (type arg4@@8) (SeqType intType))) (= (type arg5@@8) RefType)) (= (type arg7@@8) RefType)) (= (type arg8@@5) (SeqType intType))) (= (getPredWandId (wand arg1@@27 arg2@@13 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@5)) 1))
 :qid |stdinbpl.569:15|
 :skolemid |63|
 :pattern ( (wand arg1@@27 arg2@@13 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@5))
)))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@22 (SeqTypeInv0 (type s@@9))))
 (=> (= (type s@@9) (SeqType T@@22)) (<= 0 (|Seq#Length| s@@9))))
 :qid |stdinbpl.200:18|
 :skolemid |22|
 :pattern ( (|Seq#Length| s@@9))
)))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@23 (SeqTypeInv0 (type s0@@2))))
 (=> (and (and (= (type s0@@2) (SeqType T@@23)) (= (type s1@@2) (SeqType T@@23))) (|Seq#Equal| s0@@2 s1@@2)) (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j@@4 Int) ) (!  (=> (and (<= 0 j@@4) (< j@@4 (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j@@4) (|Seq#Index| s1@@2 j@@4)))
 :qid |stdinbpl.495:13|
 :skolemid |50|
 :pattern ( (|Seq#Index| s0@@2 j@@4))
 :pattern ( (|Seq#Index| s1@@2 j@@4))
)))))
 :qid |stdinbpl.492:18|
 :skolemid |51|
 :pattern ( (|Seq#Equal| s0@@2 s1@@2))
)))
(assert (forall ((Heap@@11 T@U) (ExhaleHeap@@4 T@U) (Mask@@7 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@11) (MapType1Type RefType)) (= (type ExhaleHeap@@4) (MapType1Type RefType))) (= (type Mask@@7) (MapType0Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@11 ExhaleHeap@@4 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType0Select (MapType1Select Heap@@11 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType1Select Heap@@11 o2 f_2@@0) (MapType1Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType1Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@11 ExhaleHeap@@4 Mask@@7) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@12 T@U) (ExhaleHeap@@5 T@U) (Mask@@8 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@12) (MapType1Type RefType)) (= (type ExhaleHeap@@5) (MapType1Type RefType))) (= (type Mask@@8) (MapType0Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@5 Mask@@8)) (and (HasDirectPerm Mask@@8 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType0Select (MapType1Select Heap@@12 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType1Select Heap@@12 o2@@0 f_2@@1) (MapType1Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType1Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@5 Mask@@8) (IsWandField pm_f@@2))
)))
(assert (forall ((xs@@8 T@U) ) (!  (=> (= (type xs@@8) RefType) (= (getPredWandId (List xs@@8)) 0))
 :qid |stdinbpl.852:15|
 :skolemid |77|
 :pattern ( (List xs@@8))
)))
(assert (forall ((t@@2 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@2)) 1)
 :qid |stdinbpl.208:18|
 :skolemid |25|
 :pattern ( (|Seq#Singleton| t@@2))
)))
(assert (forall ((Mask@@9 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@9) (MapType0Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@9)) (and (>= (U_2_real (MapType0Select Mask@@9 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@9) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType0Select Mask@@9 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@9) (MapType0Select Mask@@9 o_2@@2 f_4@@2))
)))
(assert (forall ((arg0@@43 T@U) (arg1@@28 T@U) ) (! (= (type (|elems#frame| arg0@@43 arg1@@28)) (SeqType intType))
 :qid |funType:elems#frame|
 :pattern ( (|elems#frame| arg0@@43 arg1@@28))
)))
(assert (forall ((Heap@@13 T@U) (Mask@@10 T@U) (xs@@9 T@U) ) (!  (=> (and (and (and (= (type Heap@@13) (MapType1Type RefType)) (= (type Mask@@10) (MapType0Type RefType realType))) (= (type xs@@9) RefType)) (state Heap@@13 Mask@@10)) (= (|elems'| Heap@@13 xs@@9) (|elems#frame| (MapType1Select Heap@@13 null (List xs@@9)) xs@@9)))
 :qid |stdinbpl.613:15|
 :skolemid |68|
 :pattern ( (state Heap@@13 Mask@@10) (|elems'| Heap@@13 xs@@9))
 :pattern ( (state Heap@@13 Mask@@10) (|elems#triggerStateless| xs@@9) (|List#trigger| Heap@@13 (List xs@@9)))
)))
(assert (forall ((Heap@@14 T@U) (Mask@@11 T@U) (xs@@10 T@U) ) (!  (=> (and (and (and (= (type Heap@@14) (MapType1Type RefType)) (= (type Mask@@11) (MapType0Type RefType realType))) (= (type xs@@10) RefType)) (state Heap@@14 Mask@@11)) (= (|head'| Heap@@14 xs@@10) (|head#frame| (MapType1Select Heap@@14 null (List xs@@10)) xs@@10)))
 :qid |stdinbpl.751:15|
 :skolemid |73|
 :pattern ( (state Heap@@14 Mask@@11) (|head'| Heap@@14 xs@@10))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@15 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@15) (MapType1Type RefType))) (U_2_bool (MapType1Select Heap@@15 o $allocated))) (U_2_bool (MapType1Select Heap@@15 (MapType1Select Heap@@15 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType1Select Heap@@15 o f))
)))
(assert (forall ((s@@10 T@U) (t@@3 T@U) (n@@8 Int) ) (! (let ((T@@24 (SeqTypeInv0 (type s@@10))))
 (=> (and (and (= (type s@@10) (SeqType T@@24)) (= (type t@@3) (SeqType T@@24))) (and (< 0 n@@8) (<= n@@8 (|Seq#Length| s@@10)))) (= (|Seq#Take| (|Seq#Append| s@@10 t@@3) n@@8) (|Seq#Take| s@@10 n@@8))))
 :qid |stdinbpl.350:18|
 :skolemid |41|
 :pattern ( (|Seq#Take| (|Seq#Append| s@@10 t@@3) n@@8))
)))
(assert (forall ((s@@11 T@U) (i@@3 Int) (v@@1 T@U) ) (! (let ((T@@25 (type v@@1)))
 (=> (= (type s@@11) (SeqType T@@25)) (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| s@@11))) (= (|Seq#Length| (|Seq#Update| s@@11 i@@3 v@@1)) (|Seq#Length| s@@11)))))
 :qid |stdinbpl.249:18|
 :skolemid |34|
 :pattern ( (|Seq#Length| (|Seq#Update| s@@11 i@@3 v@@1)))
 :pattern ( (|Seq#Length| s@@11) (|Seq#Update| s@@11 i@@3 v@@1))
)))
(assert (forall ((xs@@11 T@U) ) (!  (=> (= (type xs@@11) RefType) (= (PredicateMaskField (List xs@@11)) (|List#sm| xs@@11)))
 :qid |stdinbpl.844:15|
 :skolemid |75|
 :pattern ( (PredicateMaskField (List xs@@11)))
)))
(assert (forall ((s@@12 T@U) (t@@4 T@U) (n@@9 Int) ) (! (let ((T@@26 (SeqTypeInv0 (type s@@12))))
 (=> (and (and (= (type s@@12) (SeqType T@@26)) (= (type t@@4) (SeqType T@@26))) (and (< 0 n@@9) (<= n@@9 (|Seq#Length| s@@12)))) (= (|Seq#Drop| (|Seq#Append| s@@12 t@@4) n@@9) (|Seq#Append| (|Seq#Drop| s@@12 n@@9) t@@4))))
 :qid |stdinbpl.363:18|
 :skolemid |43|
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@12 t@@4) n@@9))
)))
(assert (forall ((s@@13 T@U) (n@@10 Int) (i@@4 Int) ) (! (let ((T@@27 (SeqTypeInv0 (type s@@13))))
 (=> (= (type s@@13) (SeqType T@@27)) (=> (and (and (< 0 n@@10) (<= n@@10 i@@4)) (< i@@4 (|Seq#Length| s@@13))) (and (= (|Seq#Add| (|Seq#Sub| i@@4 n@@10) n@@10) i@@4) (= (|Seq#Index| (|Seq#Drop| s@@13 n@@10) (|Seq#Sub| i@@4 n@@10)) (|Seq#Index| s@@13 i@@4))))))
 :qid |stdinbpl.300:18|
 :skolemid |40|
 :pattern ( (|Seq#Drop| s@@13 n@@10) (|Seq#Index| s@@13 i@@4))
)))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@11 Int) ) (! (let ((T@@28 (SeqTypeInv0 (type s0@@3))))
 (=> (and (= (type s0@@3) (SeqType T@@28)) (= (type s1@@3) (SeqType T@@28))) (=> (and (and (and (not (= s0@@3 (|Seq#Empty| T@@28))) (not (= s1@@3 (|Seq#Empty| T@@28)))) (<= 0 n@@11)) (< n@@11 (|Seq#Length| s0@@3))) (= (|Seq#Index| (|Seq#Append| s0@@3 s1@@3) n@@11) (|Seq#Index| s0@@3 n@@11)))))
 :qid |stdinbpl.240:18|
 :skolemid |31|
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@3 s1@@3) n@@11))
 :pattern ( (|Seq#Index| s0@@3 n@@11) (|Seq#Append| s0@@3 s1@@3))
)))
(assert (forall ((Heap@@16 T@U) (o@@0 T@U) (f_3 T@U) (v@@2 T@U) ) (! (let ((B@@8 (type v@@2)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@16) (MapType1Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@16 (MapType1Store Heap@@16 o@@0 f_3 v@@2)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType1Store Heap@@16 o@@0 f_3 v@@2))
)))
(assert (forall ((Heap@@17 T@U) (Mask@@12 T@U) (xs@@12 T@U) ) (!  (=> (and (and (and (= (type Heap@@17) (MapType1Type RefType)) (= (type Mask@@12) (MapType0Type RefType realType))) (= (type xs@@12) RefType)) (and (state Heap@@17 Mask@@12) (< AssumeFunctionsAbove 1))) (= (head Heap@@17 xs@@12) (U_2_int (MapType1Select Heap@@17 xs@@12 val))))
 :qid |stdinbpl.744:15|
 :skolemid |72|
 :pattern ( (state Heap@@17 Mask@@12) (head Heap@@17 xs@@12))
 :pattern ( (state Heap@@17 Mask@@12) (|head#triggerStateless| xs@@12) (|List#trigger| Heap@@17 (List xs@@12)))
)))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (m@@7 Int) ) (! (let ((T@@29 (SeqTypeInv0 (type s0@@4))))
 (=> (and (= (type s0@@4) (SeqType T@@29)) (= (type s1@@4) (SeqType T@@29))) (=> (and (and (and (not (= s0@@4 (|Seq#Empty| T@@29))) (not (= s1@@4 (|Seq#Empty| T@@29)))) (<= 0 m@@7)) (< m@@7 (|Seq#Length| s1@@4))) (and (= (|Seq#Sub| (|Seq#Add| m@@7 (|Seq#Length| s0@@4)) (|Seq#Length| s0@@4)) m@@7) (= (|Seq#Index| (|Seq#Append| s0@@4 s1@@4) (|Seq#Add| m@@7 (|Seq#Length| s0@@4))) (|Seq#Index| s1@@4 m@@7))))))
 :qid |stdinbpl.245:18|
 :skolemid |33|
 :pattern ( (|Seq#Index| s1@@4 m@@7) (|Seq#Append| s0@@4 s1@@4))
)))
(assert (= (type ZeroPMask) (MapType0Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType0Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType0Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((s@@14 T@U) (x@@10 T@U) (i@@5 Int) ) (! (let ((T@@30 (type x@@10)))
 (=> (= (type s@@14) (SeqType T@@30)) (=> (and (and (<= 0 i@@5) (< i@@5 (|Seq#Length| s@@14))) (= (|Seq#Index| s@@14 i@@5) x@@10)) (|Seq#Contains| s@@14 x@@10))))
 :qid |stdinbpl.396:18|
 :skolemid |48|
 :pattern ( (|Seq#Contains| s@@14 x@@10) (|Seq#Index| s@@14 i@@5))
)))
(assert (forall ((s0@@5 T@U) (s1@@5 T@U) ) (! (let ((T@@31 (SeqTypeInv0 (type s0@@5))))
 (=> (and (= (type s0@@5) (SeqType T@@31)) (= (type s1@@5) (SeqType T@@31))) (or (or (and (= s0@@5 s1@@5) (|Seq#Equal| s0@@5 s1@@5)) (and (and (not (= s0@@5 s1@@5)) (not (|Seq#Equal| s0@@5 s1@@5))) (not (= (|Seq#Length| s0@@5) (|Seq#Length| s1@@5))))) (and (and (and (and (and (and (not (= s0@@5 s1@@5)) (not (|Seq#Equal| s0@@5 s1@@5))) (= (|Seq#Length| s0@@5) (|Seq#Length| s1@@5))) (= (|Seq#SkolemDiff| s0@@5 s1@@5) (|Seq#SkolemDiff| s1@@5 s0@@5))) (<= 0 (|Seq#SkolemDiff| s0@@5 s1@@5))) (< (|Seq#SkolemDiff| s0@@5 s1@@5) (|Seq#Length| s0@@5))) (not (= (|Seq#Index| s0@@5 (|Seq#SkolemDiff| s0@@5 s1@@5)) (|Seq#Index| s1@@5 (|Seq#SkolemDiff| s0@@5 s1@@5))))))))
 :qid |stdinbpl.500:18|
 :skolemid |52|
 :pattern ( (|Seq#Equal| s0@@5 s1@@5))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.169:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@32 (SeqTypeInv0 (type s@@15))))
 (=> (and (= (type s@@15) (SeqType T@@32)) (= (|Seq#Length| s@@15) 0)) (= s@@15 (|Seq#Empty| T@@32))))
 :qid |stdinbpl.204:18|
 :skolemid |24|
 :pattern ( (|Seq#Length| s@@15))
)))
(assert (forall ((s@@16 T@U) (n@@12 Int) ) (! (let ((T@@33 (SeqTypeInv0 (type s@@16))))
 (=> (and (= (type s@@16) (SeqType T@@33)) (<= n@@12 0)) (= (|Seq#Take| s@@16 n@@12) (|Seq#Empty| T@@33))))
 :qid |stdinbpl.379:18|
 :skolemid |46|
 :pattern ( (|Seq#Take| s@@16 n@@12))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Mask@0 () T@U)
(declare-fun xs@@13 () T@U)
(declare-fun PostMask@0 () T@U)
(declare-fun PostHeap@0 () T@U)
(declare-fun ResultMask@@0 () T@U)
(declare-fun Mask@70 () T@U)
(declare-fun nxt@1 () T@U)
(declare-fun WandDefRHSMask@6 () T@U)
(declare-fun WandDefLHSHeap@3 () T@U)
(declare-fun crt@0 () T@U)
(declare-fun x@@11 () Int)
(declare-fun crtElems@1 () T@U)
(declare-fun WandDefLHSMask@6 () T@U)
(declare-fun WandDefRHSHeap@3 () T@U)
(declare-fun Mask@72 () T@U)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun Mask@71 () T@U)
(declare-fun Heap@@18 () T@U)
(declare-fun i@0 () Int)
(declare-fun Mask@69 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun Mask@68 () T@U)
(declare-fun Mask@39 () T@U)
(declare-fun WandDefRHSMask@4 () T@U)
(declare-fun WandDefLHSHeap@2 () T@U)
(declare-fun WandDefLHSMask@4 () T@U)
(declare-fun WandDefRHSHeap@2 () T@U)
(declare-fun Result_6Mask () T@U)
(declare-fun Result_7Mask () T@U)
(declare-fun Mask@64 () T@U)
(declare-fun crtElems@2 () T@U)
(declare-fun i@1 () Int)
(declare-fun Mask@65 () T@U)
(declare-fun Heap@36 () T@U)
(declare-fun Mask@63 () T@U)
(declare-fun Mask@62 () T@U)
(declare-fun nxt@2 () T@U)
(declare-fun Mask@61 () T@U)
(declare-fun Mask@60 () T@U)
(declare-fun b_5@42 () Bool)
(declare-fun b_15@6 () Bool)
(declare-fun Result_7Heap () T@U)
(declare-fun Mask@59 () T@U)
(declare-fun b_5@41 () Bool)
(declare-fun neededTransfer@27 () Real)
(declare-fun Used_6Mask@3 () T@U)
(declare-fun initNeededTransfer@6 () Real)
(declare-fun b_16@0 () Bool)
(declare-fun b_16@1 () Bool)
(declare-fun b_16@2 () Bool)
(declare-fun Ops_3Mask@21 () T@U)
(declare-fun b_16@3 () Bool)
(declare-fun Ops_3Heap@11 () T@U)
(declare-fun Used_6Heap@0 () T@U)
(declare-fun b_16@4 () Bool)
(declare-fun takeTransfer@13 () Real)
(declare-fun Heap@34 () T@U)
(declare-fun Mask@57 () T@U)
(declare-fun neededTransfer@25 () Real)
(declare-fun b_15@3 () Bool)
(declare-fun Used_6Mask@1 () T@U)
(declare-fun neededTransfer@26 () Real)
(declare-fun Used_6Mask@2 () T@U)
(declare-fun b_15@4 () Bool)
(declare-fun TempMask@7 () T@U)
(declare-fun b_15@5 () Bool)
(declare-fun Mask@58 () T@U)
(declare-fun newPMask@6 () T@U)
(declare-fun Heap@35 () T@U)
(declare-fun maskTransfer@13 () Real)
(declare-fun takeTransfer@12 () Real)
(declare-fun Ops_3Mask@19 () T@U)
(declare-fun b_15@0 () Bool)
(declare-fun neededTransfer@24 () Real)
(declare-fun Used_6Mask@0 () T@U)
(declare-fun b_15@1 () Bool)
(declare-fun TempMask@6 () T@U)
(declare-fun b_15@2 () Bool)
(declare-fun Ops_3Mask@20 () T@U)
(declare-fun maskTransfer@12 () Real)
(declare-fun b_15 () Bool)
(declare-fun b_5@31 () Bool)
(declare-fun b_13@6 () Bool)
(declare-fun Result_6Heap () T@U)
(declare-fun b_5@32 () Bool)
(declare-fun b_5@33 () Bool)
(declare-fun Used_5Heap@0 () T@U)
(declare-fun Ops_3Heap@10 () T@U)
(declare-fun b_5@34 () Bool)
(declare-fun Ops_3Mask@17 () T@U)
(declare-fun Ops_3Mask@18 () T@U)
(declare-fun b_5@35 () Bool)
(declare-fun b_5@36 () Bool)
(declare-fun b_5@37 () Bool)
(declare-fun b_5@38 () Bool)
(declare-fun ExhaleHeap@11 () T@U)
(declare-fun b_5@39 () Bool)
(declare-fun b_5@40 () Bool)
(declare-fun Mask@56 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun b_5@28 () Bool)
(declare-fun neededTransfer@23 () Real)
(declare-fun Used_5Mask@3 () T@U)
(declare-fun initNeededTransfer@5 () Real)
(declare-fun b_14@0 () Bool)
(declare-fun b_14@1 () Bool)
(declare-fun b_14@2 () Bool)
(declare-fun b_14@3 () Bool)
(declare-fun b_14@4 () Bool)
(declare-fun b_5@29 () Bool)
(declare-fun b_5@30 () Bool)
(declare-fun takeTransfer@11 () Real)
(declare-fun Heap@31 () T@U)
(declare-fun Mask@54 () T@U)
(declare-fun b_13@3 () Bool)
(declare-fun Used_5Mask@1 () T@U)
(declare-fun neededTransfer@21 () Real)
(declare-fun neededTransfer@22 () Real)
(declare-fun Used_5Mask@2 () T@U)
(declare-fun b_13@4 () Bool)
(declare-fun TempMask@5 () T@U)
(declare-fun b_13@5 () Bool)
(declare-fun Mask@55 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun maskTransfer@11 () Real)
(declare-fun takeTransfer@10 () Real)
(declare-fun Ops_3Mask@15 () T@U)
(declare-fun b_13@0 () Bool)
(declare-fun neededTransfer@20 () Real)
(declare-fun Used_5Mask@0 () T@U)
(declare-fun b_13@1 () Bool)
(declare-fun TempMask@4 () T@U)
(declare-fun b_13@2 () Bool)
(declare-fun Ops_3Mask@16 () T@U)
(declare-fun maskTransfer@10 () Real)
(declare-fun b_5@24 () Bool)
(declare-fun b_11@4 () Bool)
(declare-fun neededTransfer@19 () Real)
(declare-fun Used_4Mask@3 () T@U)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_12@0 () Bool)
(declare-fun b_12@1 () Bool)
(declare-fun Result_5Heap () T@U)
(declare-fun Result_5Mask () T@U)
(declare-fun b_12@2 () Bool)
(declare-fun b_12@3 () Bool)
(declare-fun Used_4Heap@0 () T@U)
(declare-fun b_12@4 () Bool)
(declare-fun b_5@25 () Bool)
(declare-fun b_5@26 () Bool)
(declare-fun b_5@27 () Bool)
(declare-fun b_13 () Bool)
(declare-fun takeTransfer@9 () Real)
(declare-fun neededTransfer@17 () Real)
(declare-fun Mask@52 () T@U)
(declare-fun b_11@2 () Bool)
(declare-fun Used_4Mask@1 () T@U)
(declare-fun neededTransfer@18 () Real)
(declare-fun Used_4Mask@2 () T@U)
(declare-fun b_11@3 () Bool)
(declare-fun Mask@53 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun takeTransfer@8 () Real)
(declare-fun Ops_3Mask@13 () T@U)
(declare-fun b_11@0 () Bool)
(declare-fun neededTransfer@16 () Real)
(declare-fun Used_4Mask@0 () T@U)
(declare-fun b_11@1 () Bool)
(declare-fun Ops_3Mask@14 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun b_11 () Bool)
(declare-fun Ops_3Heap@9 () T@U)
(declare-fun Ops_3Mask@12 () T@U)
(declare-fun b_5@23 () Bool)
(declare-fun b_5@22 () Bool)
(declare-fun Heap@30 () T@U)
(declare-fun Mask@51 () T@U)
(declare-fun Ops_3Heap@7 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun Ops_3Heap@8 () T@U)
(declare-fun Ops_3Heap@6 () T@U)
(declare-fun Ops_3Heap@5 () T@U)
(declare-fun Ops_3Heap@2 () T@U)
(declare-fun Ops_3Heap@3 () T@U)
(declare-fun Ops_3Heap@4 () T@U)
(declare-fun freshVersion@2 () T@U)
(declare-fun b_10@0 () Bool)
(declare-fun b_5@19 () Bool)
(declare-fun b_6@19 () Bool)
(declare-fun b_10@1 () Bool)
(declare-fun Result_4Heap () T@U)
(declare-fun Result_4Mask () T@U)
(declare-fun b_10@2 () Bool)
(declare-fun Ops_3Mask@11 () T@U)
(declare-fun Used_3Mask@12 () T@U)
(declare-fun b_10@3 () Bool)
(declare-fun Used_3Heap@0 () T@U)
(declare-fun b_10@4 () Bool)
(declare-fun b_5@20 () Bool)
(declare-fun b_5@21 () Bool)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun b_5@15 () Bool)
(declare-fun b_6@18 () Bool)
(declare-fun neededTransfer@15 () Real)
(declare-fun Used_3Mask@11 () T@U)
(declare-fun arg_1@0 () T@U)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_9@0 () Bool)
(declare-fun b_9@1 () Bool)
(declare-fun Result_3Heap () T@U)
(declare-fun Result_3Mask () T@U)
(declare-fun b_9@2 () Bool)
(declare-fun Ops_3Mask@10 () T@U)
(declare-fun b_9@3 () Bool)
(declare-fun b_9@4 () Bool)
(declare-fun b_5@16 () Bool)
(declare-fun b_5@17 () Bool)
(declare-fun b_5@18 () Bool)
(declare-fun Mask@50 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun takeTransfer@7 () Real)
(declare-fun b_6@15 () Bool)
(declare-fun Heap@27 () T@U)
(declare-fun Used_3Mask@9 () T@U)
(declare-fun neededTransfer@13 () Real)
(declare-fun Mask@48 () T@U)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_3Mask@10 () T@U)
(declare-fun b_6@16 () Bool)
(declare-fun TempMask@3 () T@U)
(declare-fun b_6@17 () Bool)
(declare-fun Mask@49 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun takeTransfer@6 () Real)
(declare-fun Ops_3Mask@8 () T@U)
(declare-fun Used_3Mask@7 () T@U)
(declare-fun b_6@12 () Bool)
(declare-fun neededTransfer@12 () Real)
(declare-fun Used_3Mask@8 () T@U)
(declare-fun b_6@13 () Bool)
(declare-fun TempMask@2 () T@U)
(declare-fun b_6@14 () Bool)
(declare-fun Ops_3Mask@9 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun Result_2Heap () T@U)
(declare-fun Result_2Mask () T@U)
(declare-fun b_5@12 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_8@0 () Bool)
(declare-fun b_8@1 () Bool)
(declare-fun b_8@2 () Bool)
(declare-fun b_8@3 () Bool)
(declare-fun b_8@4 () Bool)
(declare-fun b_5@13 () Bool)
(declare-fun b_5@14 () Bool)
(declare-fun takeTransfer@5 () Real)
(declare-fun Mask@46 () T@U)
(declare-fun b_6@9 () Bool)
(declare-fun Used_3Mask@5 () T@U)
(declare-fun neededTransfer@9 () Real)
(declare-fun Heap@25 () T@U)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_3Mask@6 () T@U)
(declare-fun b_6@10 () Bool)
(declare-fun b_6@11 () Bool)
(declare-fun Mask@47 () T@U)
(declare-fun Heap@26 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun Used_3Mask@3 () T@U)
(declare-fun b_6@6 () Bool)
(declare-fun Ops_3Mask@6 () T@U)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_3Mask@4 () T@U)
(declare-fun b_6@7 () Bool)
(declare-fun b_6@8 () Bool)
(declare-fun Ops_3Mask@7 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun b_5@9 () Bool)
(declare-fun neededTransfer@7 () Real)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_7@0 () Bool)
(declare-fun b_7@1 () Bool)
(declare-fun Result_1Heap () T@U)
(declare-fun Result_1Mask () T@U)
(declare-fun b_7@2 () Bool)
(declare-fun b_7@3 () Bool)
(declare-fun b_7@4 () Bool)
(declare-fun b_5@10 () Bool)
(declare-fun b_5@11 () Bool)
(declare-fun takeTransfer@3 () Real)
(declare-fun Heap@23 () T@U)
(declare-fun b_6@3 () Bool)
(declare-fun Used_3Mask@1 () T@U)
(declare-fun Mask@44 () T@U)
(declare-fun neededTransfer@5 () Real)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_3Mask@2 () T@U)
(declare-fun b_6@4 () Bool)
(declare-fun b_6@5 () Bool)
(declare-fun Mask@45 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun Ops_3Mask@4 () T@U)
(declare-fun b_6@0 () Bool)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_3Mask@0 () T@U)
(declare-fun b_6@1 () Bool)
(declare-fun b_6@2 () Bool)
(declare-fun Ops_3Mask@5 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun b_6 () Bool)
(declare-fun b_5@8 () Bool)
(declare-fun b_5@7 () Bool)
(declare-fun b_5@6 () Bool)
(declare-fun b_5@5 () Bool)
(declare-fun Ops_3Heap@1 () T@U)
(declare-fun Ops_3Mask@3 () T@U)
(declare-fun Ops_3Mask@2 () T@U)
(declare-fun Ops_3Mask@1 () T@U)
(declare-fun b_5@4 () Bool)
(declare-fun b_5@3 () Bool)
(declare-fun Ops_3Heap@0 () T@U)
(declare-fun ExhaleHeap@10 () T@U)
(declare-fun b_5@2 () Bool)
(declare-fun b_5@0 () Bool)
(declare-fun Ops_3Mask@0 () T@U)
(declare-fun b_5@1 () Bool)
(declare-fun b_5 () Bool)
(declare-fun b_4@0 () Bool)
(declare-fun b_4 () Bool)
(declare-fun Used_2Heap@0 () T@U)
(declare-fun Mask@42 () T@U)
(declare-fun Mask@43 () T@U)
(declare-fun Mask@41 () T@U)
(declare-fun Mask@40 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun newVersion@1 () T@U)
(declare-fun prev () T@U)
(declare-fun Mask@38 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun Mask@37 () T@U)
(declare-fun Mask@35 () T@U)
(declare-fun WandDefRHSMask@2 () T@U)
(declare-fun WandDefLHSHeap@0 () T@U)
(declare-fun WandDefLHSMask@0 () T@U)
(declare-fun WandDefRHSHeap@1 () T@U)
(declare-fun WandDefRHSMask@0 () T@U)
(declare-fun WandDefLHSHeap@1 () T@U)
(declare-fun WandDefLHSMask@1 () T@U)
(declare-fun WandDefRHSHeap@0 () T@U)
(declare-fun Mask@34 () T@U)
(declare-fun Mask@33 () T@U)
(declare-fun ExhaleHeap@2 () T@U)
(declare-fun Mask@32 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun Mask@30 () T@U)
(declare-fun AssertMask@2 () T@U)
(declare-fun AssertMask@1 () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun Mask@28 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun Mask@25 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun freshObj@0 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun Mask@24 () T@U)
(declare-fun Mask@23 () T@U)
(declare-fun Mask@22 () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun Mask@20 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun AssertMask@0 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun Mask@19 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun crtElems@0 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun nxt@0 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun b_1_1@10 () Bool)
(declare-fun b_2_1@6 () Bool)
(declare-fun ResultHeap () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun b_1_1@9 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun Used_1Mask@3 () T@U)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_3@0 () Bool)
(declare-fun b_3@1 () Bool)
(declare-fun b_3@2 () Bool)
(declare-fun Ops_1Mask@6 () T@U)
(declare-fun b_3@3 () Bool)
(declare-fun Ops_1Heap@2 () T@U)
(declare-fun Used_1Heap@0 () T@U)
(declare-fun b_3@4 () Bool)
(declare-fun takeTransfer@1 () Real)
(declare-fun Mask@5 () T@U)
(declare-fun neededTransfer@1 () Real)
(declare-fun Heap@1 () T@U)
(declare-fun b_2_1@3 () Bool)
(declare-fun Used_1Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_1Mask@2 () T@U)
(declare-fun b_2_1@4 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_2_1@5 () Bool)
(declare-fun Mask@6 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun Ops_1Mask@4 () T@U)
(declare-fun b_2_1@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_1Mask@0 () T@U)
(declare-fun b_2_1@1 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_2_1@2 () Bool)
(declare-fun Ops_1Mask@5 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_1_1@8 () Bool)
(declare-fun b_1_1@7 () Bool)
(declare-fun b_2_1 () Bool)
(declare-fun b_1_1@6 () Bool)
(declare-fun b_1_1@5 () Bool)
(declare-fun Ops_1Heap@1 () T@U)
(declare-fun Ops_1Mask@3 () T@U)
(declare-fun Ops_1Mask@2 () T@U)
(declare-fun Ops_1Mask@1 () T@U)
(declare-fun b_1_1@4 () Bool)
(declare-fun b_1_1@3 () Bool)
(declare-fun Ops_1Heap@0 () T@U)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun b_1_1@2 () Bool)
(declare-fun b_1_1@0 () Bool)
(declare-fun Ops_1Mask@0 () T@U)
(declare-fun b_1_1@1 () Bool)
(declare-fun b_1_1 () Bool)
(declare-fun b_2@0 () Bool)
(declare-fun b_2 () Bool)
(declare-fun UsedHeap@0 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun crt () T@U)
(declare-fun nxt () T@U)
(declare-fun node () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@0) (MapType0Type RefType realType)) (= (type xs@@13) RefType)) (= (type Mask@25) (MapType0Type RefType realType))) (= (type freshObj@0) RefType)) (= (type Mask@30) (MapType0Type RefType realType))) (= (type crt@0) RefType)) (= (type Mask@34) (MapType0Type RefType realType))) (= (type Mask@33) (MapType0Type RefType realType))) (= (type ExhaleHeap@2) (MapType1Type RefType))) (= (type Heap@@18) (MapType1Type RefType))) (= (type Mask@32) (MapType0Type RefType realType))) (= (type Mask@31) (MapType0Type RefType realType))) (= (type Heap@21) (MapType1Type RefType))) (= (type crtElems@1) (SeqType intType))) (= (type AssertMask@2) (MapType0Type RefType realType))) (= (type AssertMask@1) (MapType0Type RefType realType))) (= (type WandDefLHSMask@1) (MapType0Type RefType realType))) (= (type WandDefRHSMask@0) (MapType0Type RefType realType))) (= (type WandDefLHSHeap@1) (MapType1Type RefType))) (= (type WandDefRHSHeap@0) (MapType1Type RefType))) (= (type Heap@19) (MapType1Type RefType))) (= (type newPMask@2) (MapType0Type RefType boolType))) (= (type Heap@20) (MapType1Type RefType))) (= (type Heap@18) (MapType1Type RefType))) (= (type Heap@17) (MapType1Type RefType))) (= (type Heap@15) (MapType1Type RefType))) (= (type Heap@14) (MapType1Type RefType))) (= (type Heap@16) (MapType1Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Mask@29) (MapType0Type RefType realType))) (forall ((arg0@@44 T@U) (arg1@@29 T@U) ) (! (= (type (CombineFrames arg0@@44 arg1@@29)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@44 arg1@@29))
))) (forall ((arg0@@45 T@U) ) (! (= (type (FrameFragment arg0@@45)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@45))
))) (= (type Mask@27) (MapType0Type RefType realType))) (= (type Mask@28) (MapType0Type RefType realType))) (= (type Mask@26) (MapType0Type RefType realType))) (= (type Heap@13) (MapType1Type RefType))) (= (type Heap@11) (MapType1Type RefType))) (= (type newPMask@1) (MapType0Type RefType boolType))) (= (type Heap@12) (MapType1Type RefType))) (= (type Heap@10) (MapType1Type RefType))) (= (type Heap@9) (MapType1Type RefType))) (= (type Heap@7) (MapType1Type RefType))) (= (type Heap@6) (MapType1Type RefType))) (= (type Heap@8) (MapType1Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@24) (MapType0Type RefType realType))) (= (type Mask@22) (MapType0Type RefType realType))) (= (type Mask@23) (MapType0Type RefType realType))) (= (type Mask@21) (MapType0Type RefType realType))) (= (type Mask@20) (MapType0Type RefType realType))) (= (type Mask@18) (MapType0Type RefType realType))) (= (type AssertMask@0) (MapType0Type RefType realType))) (= (type ExhaleHeap@1) (MapType1Type RefType))) (= (type Heap@4) (MapType1Type RefType))) (= (type Mask@19) (MapType0Type RefType realType))) (= (type Heap@5) (MapType1Type RefType))) (= (type nxt@1) RefType)) (= (type WandDefLHSMask@0) (MapType0Type RefType realType))) (= (type WandDefRHSMask@2) (MapType0Type RefType realType))) (= (type WandDefLHSHeap@0) (MapType1Type RefType))) (= (type WandDefRHSHeap@1) (MapType1Type RefType))) (= (type Mask@17) (MapType0Type RefType realType))) (= (type Mask@16) (MapType0Type RefType realType))) (= (type Mask@15) (MapType0Type RefType realType))) (= (type Mask@14) (MapType0Type RefType realType))) (= (type Mask@13) (MapType0Type RefType realType))) (= (type Mask@39) (MapType0Type RefType realType))) (= (type Mask@64) (MapType0Type RefType realType))) (= (type crtElems@2) (SeqType intType))) (= (type Mask@65) (MapType0Type RefType realType))) (= (type Heap@36) (MapType1Type RefType))) (= (type nxt@2) RefType)) (= (type Mask@62) (MapType0Type RefType realType))) (= (type Mask@63) (MapType0Type RefType realType))) (= (type Mask@61) (MapType0Type RefType realType))) (= (type Mask@60) (MapType0Type RefType realType))) (= (type Result_7Heap) (MapType1Type RefType))) (= (type Mask@59) (MapType0Type RefType realType))) (= (type Result_7Mask) (MapType0Type RefType realType))) (= (type Used_6Mask@3) (MapType0Type RefType realType))) (= (type Ops_3Mask@21) (MapType0Type RefType realType))) (= (type Ops_3Heap@11) (MapType1Type RefType))) (= (type Used_6Heap@0) (MapType1Type RefType))) (= (type Heap@34) (MapType1Type RefType))) (= (type Mask@57) (MapType0Type RefType realType))) (= (type Used_6Mask@1) (MapType0Type RefType realType))) (= (type Used_6Mask@2) (MapType0Type RefType realType))) (= (type TempMask@7) (MapType0Type RefType realType))) (= (type Mask@58) (MapType0Type RefType realType))) (= (type newPMask@6) (MapType0Type RefType boolType))) (= (type Heap@35) (MapType1Type RefType))) (= (type Ops_3Mask@19) (MapType0Type RefType realType))) (= (type Used_6Mask@0) (MapType0Type RefType realType))) (= (type TempMask@6) (MapType0Type RefType realType))) (= (type Ops_3Mask@20) (MapType0Type RefType realType))) (= (type Ops_3Heap@10) (MapType1Type RefType))) (= (type Mask@52) (MapType0Type RefType realType))) (= (type Ops_3Mask@13) (MapType0Type RefType realType))) (= (type Heap@31) (MapType1Type RefType))) (= (type Result_6Heap) (MapType1Type RefType))) (= (type Used_5Heap@0) (MapType1Type RefType))) (= (type Ops_3Mask@17) (MapType0Type RefType realType))) (= (type Ops_3Mask@18) (MapType0Type RefType realType))) (= (type ExhaleHeap@11) (MapType1Type RefType))) (= (type Mask@56) (MapType0Type RefType realType))) (= (type Heap@33) (MapType1Type RefType))) (= (type Result_6Mask) (MapType0Type RefType realType))) (= (type Used_5Mask@3) (MapType0Type RefType realType))) (= (type Mask@54) (MapType0Type RefType realType))) (= (type Used_5Mask@1) (MapType0Type RefType realType))) (= (type Used_5Mask@2) (MapType0Type RefType realType))) (= (type TempMask@5) (MapType0Type RefType realType))) (= (type Mask@55) (MapType0Type RefType realType))) (= (type newPMask@5) (MapType0Type RefType boolType))) (= (type Heap@32) (MapType1Type RefType))) (= (type Ops_3Mask@15) (MapType0Type RefType realType))) (= (type Used_5Mask@0) (MapType0Type RefType realType))) (= (type TempMask@4) (MapType0Type RefType realType))) (= (type Ops_3Mask@16) (MapType0Type RefType realType))) (= (type Used_4Mask@3) (MapType0Type RefType realType))) (= (type Result_5Heap) (MapType1Type RefType))) (= (type Result_5Mask) (MapType0Type RefType realType))) (= (type Used_4Heap@0) (MapType1Type RefType))) (= (type Used_4Mask@1) (MapType0Type RefType realType))) (= (type Used_4Mask@2) (MapType0Type RefType realType))) (= (type Mask@53) (MapType0Type RefType realType))) (= (type Used_4Mask@0) (MapType0Type RefType realType))) (= (type Ops_3Mask@14) (MapType0Type RefType realType))) (= (type WandDefLHSMask@4) (MapType0Type RefType realType))) (= (type WandDefRHSMask@4) (MapType0Type RefType realType))) (= (type WandDefLHSHeap@2) (MapType1Type RefType))) (= (type WandDefRHSHeap@2) (MapType1Type RefType))) (= (type Ops_3Heap@2) (MapType1Type RefType))) (= (type Heap@23) (MapType1Type RefType))) (= (type Ops_3Mask@4) (MapType0Type RefType realType))) (= (type Mask@44) (MapType0Type RefType realType))) (= (type Ops_3Heap@9) (MapType1Type RefType))) (= (type Ops_3Mask@12) (MapType0Type RefType realType))) (= (type Heap@30) (MapType1Type RefType))) (= (type Mask@51) (MapType0Type RefType realType))) (= (type Ops_3Heap@7) (MapType1Type RefType))) (= (type newPMask@4) (MapType0Type RefType boolType))) (= (type Ops_3Heap@8) (MapType1Type RefType))) (= (type Ops_3Heap@6) (MapType1Type RefType))) (= (type Ops_3Heap@5) (MapType1Type RefType))) (= (type Ops_3Heap@3) (MapType1Type RefType))) (= (type Ops_3Heap@4) (MapType1Type RefType))) (= (type freshVersion@2) FrameTypeType)) (= (type Result_4Heap) (MapType1Type RefType))) (= (type Result_4Mask) (MapType0Type RefType realType))) (= (type Ops_3Mask@11) (MapType0Type RefType realType))) (= (type Used_3Mask@12) (MapType0Type RefType realType))) (= (type Used_3Heap@0) (MapType1Type RefType))) (= (type Result_2Heap) (MapType1Type RefType))) (= (type Mask@48) (MapType0Type RefType realType))) (= (type Used_3Mask@7) (MapType0Type RefType realType))) (= (type Heap@27) (MapType1Type RefType))) (= (type Ops_3Mask@8) (MapType0Type RefType realType))) (= (type Used_3Mask@11) (MapType0Type RefType realType))) (= (type arg_1@0) RefType)) (= (type Result_3Heap) (MapType1Type RefType))) (= (type Result_3Mask) (MapType0Type RefType realType))) (= (type Ops_3Mask@10) (MapType0Type RefType realType))) (= (type Mask@50) (MapType0Type RefType realType))) (= (type Heap@29) (MapType1Type RefType))) (= (type Used_3Mask@9) (MapType0Type RefType realType))) (= (type Used_3Mask@10) (MapType0Type RefType realType))) (= (type TempMask@3) (MapType0Type RefType realType))) (= (type Mask@49) (MapType0Type RefType realType))) (= (type newPMask@3) (MapType0Type RefType boolType))) (= (type Heap@28) (MapType1Type RefType))) (= (type Used_3Mask@8) (MapType0Type RefType realType))) (= (type TempMask@2) (MapType0Type RefType realType))) (= (type Ops_3Mask@9) (MapType0Type RefType realType))) (= (type Result_2Mask) (MapType0Type RefType realType))) (= (type Mask@46) (MapType0Type RefType realType))) (= (type Used_3Mask@5) (MapType0Type RefType realType))) (= (type Heap@25) (MapType1Type RefType))) (= (type Used_3Mask@6) (MapType0Type RefType realType))) (= (type Mask@47) (MapType0Type RefType realType))) (= (type Heap@26) (MapType1Type RefType))) (= (type Used_3Mask@3) (MapType0Type RefType realType))) (= (type Ops_3Mask@6) (MapType0Type RefType realType))) (= (type Used_3Mask@4) (MapType0Type RefType realType))) (= (type Ops_3Mask@7) (MapType0Type RefType realType))) (= (type Result_1Heap) (MapType1Type RefType))) (= (type Result_1Mask) (MapType0Type RefType realType))) (= (type Used_3Mask@1) (MapType0Type RefType realType))) (= (type Used_3Mask@2) (MapType0Type RefType realType))) (= (type Mask@45) (MapType0Type RefType realType))) (= (type Heap@24) (MapType1Type RefType))) (= (type Used_3Mask@0) (MapType0Type RefType realType))) (= (type Ops_3Mask@5) (MapType0Type RefType realType))) (= (type Ops_3Heap@0) (MapType1Type RefType))) (= (type Ops_3Mask@1) (MapType0Type RefType realType))) (= (type Ops_3Heap@1) (MapType1Type RefType))) (= (type Ops_3Mask@3) (MapType0Type RefType realType))) (= (type Ops_3Mask@2) (MapType0Type RefType realType))) (= (type ExhaleHeap@10) (MapType1Type RefType))) (= (type Ops_3Mask@0) (MapType0Type RefType realType))) (= (type Used_2Heap@0) (MapType1Type RefType))) (= (type Mask@43) (MapType0Type RefType realType))) (= (type Mask@42) (MapType0Type RefType realType))) (= (type Mask@41) (MapType0Type RefType realType))) (= (type Mask@40) (MapType0Type RefType realType))) (= (type Heap@22) (MapType1Type RefType))) (= (type newVersion@1) FrameTypeType)) (= (type prev) RefType)) (= (type Mask@38) (MapType0Type RefType realType))) (= (type Mask@37) (MapType0Type RefType realType))) (= (type Mask@36) (MapType0Type RefType realType))) (= (type Mask@35) (MapType0Type RefType realType))) (= (type Mask@72) (MapType0Type RefType realType))) (= (type Mask@71) (MapType0Type RefType realType))) (= (type WandDefLHSMask@6) (MapType0Type RefType realType))) (= (type WandDefRHSMask@6) (MapType0Type RefType realType))) (= (type WandDefLHSHeap@3) (MapType1Type RefType))) (= (type WandDefRHSHeap@3) (MapType1Type RefType))) (= (type Mask@69) (MapType0Type RefType realType))) (= (type Mask@70) (MapType0Type RefType realType))) (= (type Mask@68) (MapType0Type RefType realType))) (= (type Mask@12) (MapType0Type RefType realType))) (= (type crtElems@0) (SeqType intType))) (= (type Heap@3) (MapType1Type RefType))) (= (type nxt@0) RefType)) (= (type Mask@10) (MapType0Type RefType realType))) (= (type Mask@11) (MapType0Type RefType realType))) (= (type Mask@9) (MapType0Type RefType realType))) (= (type Mask@8) (MapType0Type RefType realType))) (= (type ResultHeap) (MapType1Type RefType))) (= (type Mask@7) (MapType0Type RefType realType))) (= (type ResultMask@@0) (MapType0Type RefType realType))) (= (type Used_1Mask@3) (MapType0Type RefType realType))) (= (type Ops_1Mask@6) (MapType0Type RefType realType))) (= (type Ops_1Heap@2) (MapType1Type RefType))) (= (type Used_1Heap@0) (MapType1Type RefType))) (= (type Mask@5) (MapType0Type RefType realType))) (= (type Heap@1) (MapType1Type RefType))) (= (type Used_1Mask@1) (MapType0Type RefType realType))) (= (type Used_1Mask@2) (MapType0Type RefType realType))) (= (type TempMask@1) (MapType0Type RefType realType))) (= (type Mask@6) (MapType0Type RefType realType))) (= (type newPMask@0) (MapType0Type RefType boolType))) (= (type Heap@2) (MapType1Type RefType))) (= (type Ops_1Mask@4) (MapType0Type RefType realType))) (= (type Used_1Mask@0) (MapType0Type RefType realType))) (= (type TempMask@0) (MapType0Type RefType realType))) (= (type Ops_1Mask@5) (MapType0Type RefType realType))) (= (type Ops_1Heap@0) (MapType1Type RefType))) (= (type Ops_1Mask@1) (MapType0Type RefType realType))) (= (type Ops_1Heap@1) (MapType1Type RefType))) (= (type Ops_1Mask@3) (MapType0Type RefType realType))) (= (type Ops_1Mask@2) (MapType0Type RefType realType))) (= (type ExhaleHeap@0) (MapType1Type RefType))) (= (type Ops_1Mask@0) (MapType0Type RefType realType))) (= (type UsedHeap@0) (MapType1Type RefType))) (= (type Mask@4) (MapType0Type RefType realType))) (= (type Mask@3) (MapType0Type RefType realType))) (= (type Mask@2) (MapType0Type RefType realType))) (= (type Mask@1) (MapType0Type RefType realType))) (= (type Heap@0) (MapType1Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type crt) RefType)) (= (type nxt) RefType)) (= (type node) RefType)) (= (type PostMask@0) (MapType0Type RefType realType))) (= (type PostHeap@0) (MapType1Type RefType))))
(set-info :boogie-vc-id insert)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 523) (let ((anon16_correct true))
(let ((anon365_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 519) 516)) anon16_correct)))
(let ((anon365_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 517) (- 0 518)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 517) 516) anon16_correct))))))
(let ((anon12_correct true))
(let ((anon363_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 515) 512)) anon12_correct)))
(let ((anon363_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 513) (- 0 514)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 513) 512) anon12_correct))))))
(let ((anon8_correct true))
(let ((anon361_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 511) 508)) anon8_correct)))
(let ((anon361_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 509) (- 0 510)) (<= FullPerm (U_2_real (MapType0Select PostMask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select PostMask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 509) 508) anon8_correct))))))
(let ((anon364_Else_correct true))
(let ((anon359_Then_correct  (=> (state PostHeap@0 ZeroMask) (=> (and (and (= PostMask@0 (MapType0Store ZeroMask null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List xs@@13))) FullPerm)))) (state PostHeap@0 PostMask@0)) (and (state PostHeap@0 PostMask@0) (state PostHeap@0 PostMask@0))) (and (and (and (and (and (and (=> (= (ControlFlow 0 520) 507) anon364_Else_correct) (=> (= (ControlFlow 0 520) 517) anon365_Then_correct)) (=> (= (ControlFlow 0 520) 519) anon365_Else_correct)) (=> (= (ControlFlow 0 520) 513) anon363_Then_correct)) (=> (= (ControlFlow 0 520) 515) anon363_Else_correct)) (=> (= (ControlFlow 0 520) 509) anon361_Then_correct)) (=> (= (ControlFlow 0 520) 511) anon361_Else_correct))))))
(let ((anon59_correct true))
(let ((anon388_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 461) 458)) anon59_correct)))
(let ((anon388_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 459) (- 0 460)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 459) 458) anon59_correct))))))
(let ((anon55_correct true))
(let ((anon386_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 457) 454)) anon55_correct)))
(let ((anon386_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 455) (- 0 456)) (<= FullPerm (U_2_real (MapType0Select ResultMask@@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select ResultMask@@0 null (List xs@@13)))) (=> (= (ControlFlow 0 455) 454) anon55_correct))))))
(let ((anon79_correct true))
(let ((anon399_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 421) 418)) anon79_correct)))
(let ((anon399_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 419) (- 0 420)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 419) 418) anon79_correct))))))
(let ((anon93_correct true))
(let ((anon406_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 408) 405)) anon93_correct)))
(let ((anon406_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 406) (- 0 407)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 406) 405) anon93_correct))))))
(let ((anon89_correct true))
(let ((anon404_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 404) 401)) anon89_correct)))
(let ((anon404_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 402) (- 0 403)) (<= FullPerm (U_2_real (MapType0Select Mask@70 null (List nxt@1))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@70 null (List nxt@1)))) (=> (= (ControlFlow 0 402) 401) anon89_correct))))))
(let ((anon107_correct true))
(let ((anon413_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 395) 392)) anon107_correct)))
(let ((anon413_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 393) (- 0 394)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 393) 392) anon107_correct))))))
(let ((anon103_correct true))
(let ((anon411_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 391) 388)) anon103_correct)))
(let ((anon411_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 389) (- 0 390)) (<= FullPerm (U_2_real (MapType0Select WandDefRHSMask@6 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select WandDefRHSMask@6 null (List xs@@13)))) (=> (= (ControlFlow 0 389) 388) anon103_correct))))))
(let ((anon412_Else_correct true))
(let ((anon408_Else_correct  (=> (and (|Seq#Equal| (elems WandDefLHSHeap@3 crt@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1)) (state WandDefLHSHeap@3 WandDefLHSMask@6)) (=> (and (and (state WandDefLHSHeap@3 WandDefLHSMask@6) (= WandDefRHSMask@6 (MapType0Store ZeroMask null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List xs@@13))) FullPerm))))) (and (state WandDefRHSHeap@3 WandDefRHSMask@6) (state WandDefRHSHeap@3 WandDefRHSMask@6))) (and (and (and (and (=> (= (ControlFlow 0 396) 387) anon412_Else_correct) (=> (= (ControlFlow 0 396) 393) anon413_Then_correct)) (=> (= (ControlFlow 0 396) 395) anon413_Else_correct)) (=> (= (ControlFlow 0 396) 389) anon411_Then_correct)) (=> (= (ControlFlow 0 396) 391) anon411_Else_correct))))))
(let ((anon99_correct true))
(let ((anon409_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 386) 383)) anon99_correct)))
(let ((anon409_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 384) (- 0 385)) (<= FullPerm (U_2_real (MapType0Select WandDefLHSMask@6 null (List crt@0))))) (=> (<= FullPerm (U_2_real (MapType0Select WandDefLHSMask@6 null (List crt@0)))) (=> (= (ControlFlow 0 384) 383) anon99_correct))))))
(let ((anon407_Then_correct  (=> (= WandDefLHSMask@6 (MapType0Store ZeroMask null (List crt@0) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List crt@0))) FullPerm)))) (=> (and (state WandDefLHSHeap@3 WandDefLHSMask@6) (state WandDefLHSHeap@3 WandDefLHSMask@6)) (and (and (=> (= (ControlFlow 0 397) 396) anon408_Else_correct) (=> (= (ControlFlow 0 397) 384) anon409_Then_correct)) (=> (= (ControlFlow 0 397) 386) anon409_Else_correct))))))
(let ((anon114_correct true))
(let ((anon416_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 377) 374)) anon114_correct)))
(let ((anon416_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 375) (- 0 376)) (<= FullPerm (U_2_real (MapType0Select Mask@72 null (List (MapType1Select ExhaleHeap@1 crt@0 next)))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@72 null (List (MapType1Select ExhaleHeap@1 crt@0 next))))) (=> (= (ControlFlow 0 375) 374) anon114_correct))))))
(let ((anon115_correct true))
(let ((anon414_Else_correct  (=> (not (= (MapType1Select ExhaleHeap@1 crt@0 next) null)) (and (=> (= (ControlFlow 0 378) (- 0 379)) (HasDirectPerm Mask@72 crt@0 next)) (=> (HasDirectPerm Mask@72 crt@0 next) (and (and (=> (= (ControlFlow 0 378) 372) anon115_correct) (=> (= (ControlFlow 0 378) 375) anon416_Then_correct)) (=> (= (ControlFlow 0 378) 377) anon416_Else_correct)))))))
(let ((anon414_Then_correct  (=> (and (= (MapType1Select ExhaleHeap@1 crt@0 next) null) (= (ControlFlow 0 373) 372)) anon115_correct)))
(let ((anon407_Else_correct  (=> (and (and (= Mask@72 (MapType0Store Mask@71 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (real_2_U (+ (U_2_real (MapType0Select Mask@71 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) FullPerm)))) (state ExhaleHeap@1 Mask@72)) (and (state ExhaleHeap@1 Mask@72) (state ExhaleHeap@1 Mask@72))) (and (=> (= (ControlFlow 0 380) (- 0 382)) (HasDirectPerm Mask@72 crt@0 val)) (=> (HasDirectPerm Mask@72 crt@0 val) (and (=> (= (ControlFlow 0 380) (- 0 381)) (HasDirectPerm Mask@72 crt@0 next)) (=> (HasDirectPerm Mask@72 crt@0 next) (and (=> (= (ControlFlow 0 380) 373) anon414_Then_correct) (=> (= (ControlFlow 0 380) 378) anon414_Else_correct)))))))))
(let ((anon95_correct  (=> (and (state ExhaleHeap@1 Mask@71) (state ExhaleHeap@1 Mask@71)) (and (=> (= (ControlFlow 0 398) 397) anon407_Then_correct) (=> (= (ControlFlow 0 398) 380) anon407_Else_correct)))))
(let ((anon405_Else_correct  (=> (|Seq#Equal| (elems ExhaleHeap@1 nxt@1) (|Seq#Drop| (elems Heap@@18 xs@@13) (+ i@0 1))) (=> (and (= Mask@71 Mask@70) (= (ControlFlow 0 400) 398)) anon95_correct))))
(let ((anon402_Then_correct  (=> (and (and (not (= nxt@1 null)) (= Mask@70 (MapType0Store Mask@69 null (List nxt@1) (real_2_U (+ (U_2_real (MapType0Select Mask@69 null (List nxt@1))) FullPerm))))) (and (state ExhaleHeap@1 Mask@70) (state ExhaleHeap@1 Mask@70))) (and (and (and (and (=> (= (ControlFlow 0 409) 400) anon405_Else_correct) (=> (= (ControlFlow 0 409) 406) anon406_Then_correct)) (=> (= (ControlFlow 0 409) 408) anon406_Else_correct)) (=> (= (ControlFlow 0 409) 402) anon404_Then_correct)) (=> (= (ControlFlow 0 409) 404) anon404_Else_correct)))))
(let ((anon402_Else_correct  (=> (= nxt@1 null) (=> (and (= Mask@71 Mask@69) (= (ControlFlow 0 399) 398)) anon95_correct))))
(let ((anon400_Else_correct  (and (=> (= (ControlFlow 0 410) (- 0 412)) (>= i@0 0)) (=> (>= i@0 0) (and (=> (= (ControlFlow 0 410) (- 0 411)) (< i@0 (|Seq#Length| (elems Heap@@18 xs@@13)))) (=> (< i@0 (|Seq#Length| (elems Heap@@18 xs@@13))) (=> (and (= (U_2_int (MapType1Select ExhaleHeap@1 crt@0 val)) (U_2_int (|Seq#Index| (elems Heap@@18 xs@@13) i@0))) (state ExhaleHeap@1 Mask@69)) (and (=> (= (ControlFlow 0 410) 409) anon402_Then_correct) (=> (= (ControlFlow 0 410) 399) anon402_Else_correct)))))))))
(let ((anon84_correct true))
(let ((anon401_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 371) 368)) anon84_correct)))
(let ((anon401_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 369) (- 0 370)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 369) 368) anon84_correct))))))
(let ((anon81_correct  (=> (and (and (and (state ExhaleHeap@1 Mask@13) (not (= crt@0 null))) (and (= Mask@68 (MapType0Store Mask@13 crt@0 val (real_2_U (+ (U_2_real (MapType0Select Mask@13 crt@0 val)) FullPerm)))) (state ExhaleHeap@1 Mask@68))) (and (and (not (= crt@0 null)) (= Mask@69 (MapType0Store Mask@68 crt@0 next (real_2_U (+ (U_2_real (MapType0Select Mask@68 crt@0 next)) FullPerm))))) (and (state ExhaleHeap@1 Mask@69) (state ExhaleHeap@1 Mask@69)))) (and (=> (= (ControlFlow 0 413) (- 0 415)) (HasDirectPerm Mask@69 crt@0 next)) (=> (HasDirectPerm Mask@69 crt@0 next) (=> (= nxt@1 (MapType1Select ExhaleHeap@1 crt@0 next)) (=> (and (state ExhaleHeap@1 Mask@69) (state ExhaleHeap@1 Mask@69)) (and (=> (= (ControlFlow 0 413) (- 0 414)) (HasDirectPerm Mask@69 crt@0 val)) (=> (HasDirectPerm Mask@69 crt@0 val) (and (and (=> (= (ControlFlow 0 413) 410) anon400_Else_correct) (=> (= (ControlFlow 0 413) 369) anon401_Then_correct)) (=> (= (ControlFlow 0 413) 371) anon401_Else_correct)))))))))))
(let ((anon398_Else_correct  (=> (and (= i@0 (- (|Seq#Length| (elems Heap@@18 xs@@13)) 1)) (= (ControlFlow 0 417) 413)) anon81_correct)))
(let ((anon397_Then_correct  (=> (and (= nxt@1 null) (state ExhaleHeap@1 Mask@13)) (and (and (=> (= (ControlFlow 0 422) 417) anon398_Else_correct) (=> (= (ControlFlow 0 422) 419) anon399_Then_correct)) (=> (= (ControlFlow 0 422) 421) anon399_Else_correct)))))
(let ((anon397_Else_correct  (=> (and (not (= nxt@1 null)) (= (ControlFlow 0 416) 413)) anon81_correct)))
(let ((anon395_Else_correct  (=> (and (< i@0 (|Seq#Length| (elems Heap@@18 xs@@13))) (state ExhaleHeap@1 Mask@13)) (and (=> (= (ControlFlow 0 423) 422) anon397_Then_correct) (=> (= (ControlFlow 0 423) 416) anon397_Else_correct)))))
(let ((anon74_correct true))
(let ((anon396_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 367) 364)) anon74_correct)))
(let ((anon396_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 365) (- 0 366)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 365) 364) anon74_correct))))))
(let ((anon394_Then_correct  (=> (and (<= 0 i@0) (state ExhaleHeap@1 Mask@13)) (and (and (=> (= (ControlFlow 0 424) 423) anon395_Else_correct) (=> (= (ControlFlow 0 424) 365) anon396_Then_correct)) (=> (= (ControlFlow 0 424) 367) anon396_Else_correct)))))
(let ((anon125_correct true))
(let ((anon422_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 355) 352)) anon125_correct)))
(let ((anon422_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 353) (- 0 354)) (<= FullPerm (U_2_real (MapType0Select Mask@39 null (List nxt@1))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@39 null (List nxt@1)))) (=> (= (ControlFlow 0 353) 352) anon125_correct))))))
(let ((anon216_correct true))
(let ((anon471_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 249) 246)) anon216_correct)))
(let ((anon471_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 247) (- 0 248)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 247) 246) anon216_correct))))))
(let ((anon212_correct true))
(let ((anon469_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 245) 242)) anon212_correct)))
(let ((anon469_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 243) (- 0 244)) (<= FullPerm (U_2_real (MapType0Select WandDefRHSMask@4 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select WandDefRHSMask@4 null (List xs@@13)))) (=> (= (ControlFlow 0 243) 242) anon212_correct))))))
(let ((anon470_Else_correct true))
(let ((anon466_Else_correct  (=> (and (|Seq#Equal| (elems WandDefLHSHeap@2 crt@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1)) (state WandDefLHSHeap@2 WandDefLHSMask@4)) (=> (and (and (state WandDefLHSHeap@2 WandDefLHSMask@4) (= WandDefRHSMask@4 (MapType0Store ZeroMask null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List xs@@13))) FullPerm))))) (and (state WandDefRHSHeap@2 WandDefRHSMask@4) (state WandDefRHSHeap@2 WandDefRHSMask@4))) (and (and (and (and (=> (= (ControlFlow 0 250) 241) anon470_Else_correct) (=> (= (ControlFlow 0 250) 247) anon471_Then_correct)) (=> (= (ControlFlow 0 250) 249) anon471_Else_correct)) (=> (= (ControlFlow 0 250) 243) anon469_Then_correct)) (=> (= (ControlFlow 0 250) 245) anon469_Else_correct))))))
(let ((anon208_correct true))
(let ((anon467_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 240) 237)) anon208_correct)))
(let ((anon467_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 238) (- 0 239)) (<= FullPerm (U_2_real (MapType0Select WandDefLHSMask@4 null (List crt@0))))) (=> (<= FullPerm (U_2_real (MapType0Select WandDefLHSMask@4 null (List crt@0)))) (=> (= (ControlFlow 0 238) 237) anon208_correct))))))
(let ((anon465_Then_correct  (=> (= WandDefLHSMask@4 (MapType0Store ZeroMask null (List crt@0) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List crt@0))) FullPerm)))) (=> (and (state WandDefLHSHeap@2 WandDefLHSMask@4) (state WandDefLHSHeap@2 WandDefLHSMask@4)) (and (and (=> (= (ControlFlow 0 251) 250) anon466_Else_correct) (=> (= (ControlFlow 0 251) 238) anon467_Then_correct)) (=> (= (ControlFlow 0 251) 240) anon467_Else_correct))))))
(let ((anon247_correct true))
(let ((anon487_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 201) 198)) anon247_correct)))
(let ((anon487_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 199) (- 0 200)) (<= FullPerm (U_2_real (MapType0Select Result_6Mask null (List crt@0))))) (=> (<= FullPerm (U_2_real (MapType0Select Result_6Mask null (List crt@0)))) (=> (= (ControlFlow 0 199) 198) anon247_correct))))))
(let ((anon270_correct true))
(let ((anon499_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 174) 171)) anon270_correct)))
(let ((anon499_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 172) (- 0 173)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 172) 171) anon270_correct))))))
(let ((anon266_correct true))
(let ((anon497_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 170) 167)) anon266_correct)))
(let ((anon497_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 168) (- 0 169)) (<= FullPerm (U_2_real (MapType0Select Result_7Mask null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Result_7Mask null (List xs@@13)))) (=> (= (ControlFlow 0 168) 167) anon266_correct))))))
(let ((anon281_correct  (and (=> (= (ControlFlow 0 139) (- 0 140)) (<= FullPerm (U_2_real (MapType0Select Mask@64 null (wand nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2))))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@64 null (wand nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2)))))) (=> (and (= Mask@65 (MapType0Store Mask@64 null (wand nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2))) (real_2_U (- (U_2_real (MapType0Select Mask@64 null (wand nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2))))) FullPerm)))) (= (ControlFlow 0 139) (- 0 138))) (|Seq#Equal| crtElems@2 (|Seq#Append| (|Seq#Singleton| (MapType1Select Heap@36 nxt@1 val)) (ite (= (MapType1Select Heap@36 nxt@1 next) null) (|Seq#Empty| intType) (elems Heap@36 (MapType1Select Heap@36 nxt@1 next))))))))))
(let ((anon280_correct  (=> (= Mask@63 (MapType0Store Mask@62 null (List nxt@2) (real_2_U (- (U_2_real (MapType0Select Mask@62 null (List nxt@2))) FullPerm)))) (and (=> (= (ControlFlow 0 142) (- 0 143)) (|Seq#Equal| (elems Heap@36 nxt@2) (|Seq#Drop| (elems Heap@@18 xs@@13) (+ i@1 1)))) (=> (|Seq#Equal| (elems Heap@36 nxt@2) (|Seq#Drop| (elems Heap@@18 xs@@13) (+ i@1 1))) (=> (and (= Mask@64 Mask@63) (= (ControlFlow 0 142) 139)) anon281_correct))))))
(let ((anon504_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 146) 142)) anon280_correct)))
(let ((anon504_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 144) (- 0 145)) (<= FullPerm (U_2_real (MapType0Select Mask@62 null (List nxt@2))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@62 null (List nxt@2)))) (=> (= (ControlFlow 0 144) 142) anon280_correct))))))
(let ((anon503_Then_correct  (=> (not (= nxt@2 null)) (and (=> (= (ControlFlow 0 147) 144) anon504_Then_correct) (=> (= (ControlFlow 0 147) 146) anon504_Else_correct)))))
(let ((anon503_Else_correct  (=> (= nxt@2 null) (=> (and (= Mask@64 Mask@62) (= (ControlFlow 0 141) 139)) anon281_correct))))
(let ((anon277_correct  (=> (= Mask@62 (MapType0Store Mask@61 nxt@1 next (real_2_U (- (U_2_real (MapType0Select Mask@61 nxt@1 next)) FullPerm)))) (and (=> (= (ControlFlow 0 148) (- 0 150)) (= nxt@2 (MapType1Select Heap@36 nxt@1 next))) (=> (= nxt@2 (MapType1Select Heap@36 nxt@1 next)) (and (=> (= (ControlFlow 0 148) (- 0 149)) (= (U_2_int (MapType1Select Heap@36 nxt@1 val)) (U_2_int (|Seq#Index| (elems Heap@@18 xs@@13) i@1)))) (=> (= (U_2_int (MapType1Select Heap@36 nxt@1 val)) (U_2_int (|Seq#Index| (elems Heap@@18 xs@@13) i@1))) (and (=> (= (ControlFlow 0 148) 147) anon503_Then_correct) (=> (= (ControlFlow 0 148) 141) anon503_Else_correct)))))))))
(let ((anon502_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 153) 148)) anon277_correct)))
(let ((anon502_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 151) (- 0 152)) (<= FullPerm (U_2_real (MapType0Select Mask@61 nxt@1 next)))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@61 nxt@1 next))) (=> (= (ControlFlow 0 151) 148) anon277_correct))))))
(let ((anon275_correct  (=> (= Mask@61 (MapType0Store Mask@60 nxt@1 val (real_2_U (- (U_2_real (MapType0Select Mask@60 nxt@1 val)) FullPerm)))) (and (=> (= (ControlFlow 0 154) 151) anon502_Then_correct) (=> (= (ControlFlow 0 154) 153) anon502_Else_correct)))))
(let ((anon501_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 157) 154)) anon275_correct)))
(let ((anon501_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 155) (- 0 156)) (<= FullPerm (U_2_real (MapType0Select Mask@60 nxt@1 val)))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@60 nxt@1 val))) (=> (= (ControlFlow 0 155) 154) anon275_correct))))))
(let ((anon500_Else_correct  (=> (not (= nxt@2 null)) (and (=> (= (ControlFlow 0 160) 155) anon501_Then_correct) (=> (= (ControlFlow 0 160) 157) anon501_Else_correct)))))
(let ((anon500_Then_correct  (=> (= nxt@2 null) (and (=> (= (ControlFlow 0 158) (- 0 159)) (= i@1 (- (|Seq#Length| (elems Heap@@18 xs@@13)) 1))) (=> (= i@1 (- (|Seq#Length| (elems Heap@@18 xs@@13)) 1)) (and (=> (= (ControlFlow 0 158) 155) anon501_Then_correct) (=> (= (ControlFlow 0 158) 157) anon501_Else_correct)))))))
(let ((anon271_correct  (and (=> (= (ControlFlow 0 161) (- 0 164)) (=> (and (and b_5@42 b_5@42) b_15@6) (|Seq#Equal| (elems Result_7Heap xs@@13) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2))))) (=> (=> (and (and b_5@42 b_5@42) b_15@6) (|Seq#Equal| (elems Result_7Heap xs@@13) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2)))) (=> (state Heap@36 Mask@59) (=> (and (and (= Mask@60 (MapType0Store Mask@59 null (wand nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2))) (real_2_U (+ (U_2_real (MapType0Select Mask@59 null (wand nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2))))) FullPerm)))) (state Heap@36 Mask@60)) (and (state Heap@36 Mask@60) (state Heap@36 Mask@60))) (and (=> (= (ControlFlow 0 161) (- 0 163)) (<= 0 i@1)) (=> (<= 0 i@1) (and (=> (= (ControlFlow 0 161) (- 0 162)) (< i@1 (|Seq#Length| (elems Heap@@18 xs@@13)))) (=> (< i@1 (|Seq#Length| (elems Heap@@18 xs@@13))) (and (=> (= (ControlFlow 0 161) 158) anon500_Then_correct) (=> (= (ControlFlow 0 161) 160) anon500_Else_correct))))))))))))
(let ((anon495_Then_correct  (=> b_5@42 (and (and (and (and (=> (= (ControlFlow 0 175) 161) anon271_correct) (=> (= (ControlFlow 0 175) 172) anon499_Then_correct)) (=> (= (ControlFlow 0 175) 174) anon499_Else_correct)) (=> (= (ControlFlow 0 175) 168) anon497_Then_correct)) (=> (= (ControlFlow 0 175) 170) anon497_Else_correct)))))
(let ((anon495_Else_correct  (=> (and (not b_5@42) (= (ControlFlow 0 166) 161)) anon271_correct)))
(let ((anon494_Then_correct  (=> (and (and b_5@42 b_5@42) b_15@6) (and (=> (= (ControlFlow 0 176) 175) anon495_Then_correct) (=> (= (ControlFlow 0 176) 166) anon495_Else_correct)))))
(let ((anon494_Else_correct  (=> (and (not (and (and b_5@42 b_5@42) b_15@6)) (= (ControlFlow 0 165) 161)) anon271_correct)))
(let ((anon261_correct  (and (=> (= (ControlFlow 0 177) (- 0 178)) (=> (and (and b_5@41 b_5@41) b_15@6) (and (= neededTransfer@27 0.0) (= (U_2_real (MapType0Select Used_6Mask@3 null (List xs@@13))) initNeededTransfer@6)))) (=> (=> (and (and b_5@41 b_5@41) b_15@6) (and (= neededTransfer@27 0.0) (= (U_2_real (MapType0Select Used_6Mask@3 null (List xs@@13))) initNeededTransfer@6))) (=> (and (= b_16@0  (and b_5@41 b_15@6)) (= b_16@1  (and b_16@0 (state Result_7Heap Result_7Mask)))) (=> (and (and (= b_16@2  (and b_16@1 (sumMask Result_7Mask Ops_3Mask@21 Used_6Mask@3))) (= b_16@3  (and (and b_16@2 (IdenticalOnKnownLocations Ops_3Heap@11 Result_7Heap Ops_3Mask@21)) (IdenticalOnKnownLocations Used_6Heap@0 Result_7Heap Used_6Mask@3)))) (and (= b_16@4  (and b_16@3 (state Result_7Heap Result_7Mask))) (= b_5@42  (and b_5@41 b_16@4)))) (and (=> (= (ControlFlow 0 177) 176) anon494_Then_correct) (=> (= (ControlFlow 0 177) 165) anon494_Else_correct))))))))
(let ((anon493_Else_correct  (=> (>= 0.0 takeTransfer@13) (=> (and (= Heap@36 Heap@34) (= Mask@59 Mask@57)) (=> (and (and (= neededTransfer@27 neededTransfer@25) (= b_15@6 b_15@3)) (and (= Used_6Mask@3 Used_6Mask@1) (= (ControlFlow 0 181) 177))) anon261_correct)))))
(let ((anon493_Then_correct  (=> (> takeTransfer@13 0.0) (=> (and (= neededTransfer@26 (- neededTransfer@25 takeTransfer@13)) (= Used_6Mask@2 (MapType0Store Used_6Mask@1 null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select Used_6Mask@1 null (List xs@@13))) takeTransfer@13))))) (=> (and (and (= b_15@4  (and b_15@3 (state Used_6Heap@0 Used_6Mask@2))) (= TempMask@7 (MapType0Store ZeroMask null (List xs@@13) (real_2_U FullPerm)))) (and (= b_15@5  (and b_15@4 (IdenticalOnKnownLocations Heap@34 Used_6Heap@0 TempMask@7))) (= Mask@58 (MapType0Store Mask@57 null (List xs@@13) (real_2_U (- (U_2_real (MapType0Select Mask@57 null (List xs@@13))) takeTransfer@13)))))) (=> (and (and (and (forall ((o_9 T@U) (f_13 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_13))))
(let ((A@@12 (FieldTypeInv0 (type f_13))))
 (=> (and (and (= (type o_9) RefType) (= (type f_13) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType0Select (MapType1Select Heap@34 null (|wand#sm| nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2)))) o_9 f_13)) (U_2_bool (MapType0Select (MapType1Select Heap@34 null (|List#sm| xs@@13)) o_9 f_13)))) (U_2_bool (MapType0Select newPMask@6 o_9 f_13)))))
 :qid |stdinbpl.2480:43|
 :skolemid |85|
 :pattern ( (MapType0Select newPMask@6 o_9 f_13))
)) (= Heap@35 (MapType1Store Heap@34 null (|wand#sm| nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2))) newPMask@6))) (and (= Heap@36 Heap@35) (= Mask@59 Mask@58))) (and (and (= neededTransfer@27 neededTransfer@26) (= b_15@6 b_15@5)) (and (= Used_6Mask@3 Used_6Mask@2) (= (ControlFlow 0 180) 177)))) anon261_correct))))))
(let ((anon492_Else_correct  (=> (and (< maskTransfer@13 neededTransfer@25) (= takeTransfer@13 maskTransfer@13)) (and (=> (= (ControlFlow 0 183) 180) anon493_Then_correct) (=> (= (ControlFlow 0 183) 181) anon493_Else_correct)))))
(let ((anon492_Then_correct  (=> (and (<= neededTransfer@25 maskTransfer@13) (= takeTransfer@13 neededTransfer@25)) (and (=> (= (ControlFlow 0 182) 180) anon493_Then_correct) (=> (= (ControlFlow 0 182) 181) anon493_Else_correct)))))
(let ((anon491_Then_correct  (=> (and (and (and (and (and b_5@41 b_5@41) b_15@3) true) (> neededTransfer@25 0.0)) (= maskTransfer@13 (U_2_real (MapType0Select Mask@57 null (List xs@@13))))) (and (=> (= (ControlFlow 0 184) 182) anon492_Then_correct) (=> (= (ControlFlow 0 184) 183) anon492_Else_correct)))))
(let ((anon491_Else_correct  (=> (not (and (and (and (and b_5@41 b_5@41) b_15@3) true) (> neededTransfer@25 0.0))) (=> (and (= Heap@36 Heap@34) (= Mask@59 Mask@57)) (=> (and (and (= neededTransfer@27 neededTransfer@25) (= b_15@6 b_15@3)) (and (= Used_6Mask@3 Used_6Mask@1) (= (ControlFlow 0 179) 177))) anon261_correct)))))
(let ((anon490_Else_correct  (=> (>= 0.0 takeTransfer@12) (=> (and (and (= Ops_3Mask@21 Ops_3Mask@19) (= Used_6Mask@1 ZeroMask)) (and (= b_15@3 b_15@0) (= neededTransfer@25 FullPerm))) (and (=> (= (ControlFlow 0 187) 184) anon491_Then_correct) (=> (= (ControlFlow 0 187) 179) anon491_Else_correct))))))
(let ((anon490_Then_correct  (=> (> takeTransfer@12 0.0) (=> (and (= neededTransfer@24 (- FullPerm takeTransfer@12)) (= Used_6Mask@0 (MapType0Store ZeroMask null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List xs@@13))) takeTransfer@12))))) (=> (and (and (and (= b_15@1  (and b_15@0 (state Used_6Heap@0 Used_6Mask@0))) (= TempMask@6 (MapType0Store ZeroMask null (List xs@@13) (real_2_U FullPerm)))) (and (= b_15@2  (and b_15@1 (IdenticalOnKnownLocations Ops_3Heap@11 Used_6Heap@0 TempMask@6))) (= Ops_3Mask@20 (MapType0Store Ops_3Mask@19 null (List xs@@13) (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@19 null (List xs@@13))) takeTransfer@12)))))) (and (and (= Ops_3Mask@21 Ops_3Mask@20) (= Used_6Mask@1 Used_6Mask@0)) (and (= b_15@3 b_15@2) (= neededTransfer@25 neededTransfer@24)))) (and (=> (= (ControlFlow 0 186) 184) anon491_Then_correct) (=> (= (ControlFlow 0 186) 179) anon491_Else_correct)))))))
(let ((anon489_Else_correct  (=> (and (< maskTransfer@12 FullPerm) (= takeTransfer@12 maskTransfer@12)) (and (=> (= (ControlFlow 0 189) 186) anon490_Then_correct) (=> (= (ControlFlow 0 189) 187) anon490_Else_correct)))))
(let ((anon489_Then_correct  (=> (and (<= FullPerm maskTransfer@12) (= takeTransfer@12 FullPerm)) (and (=> (= (ControlFlow 0 188) 186) anon490_Then_correct) (=> (= (ControlFlow 0 188) 187) anon490_Else_correct)))))
(let ((anon488_Then_correct  (=> (and (and (and (and (and b_5@41 b_5@41) b_15@0) true) (> FullPerm 0.0)) (= maskTransfer@12 (U_2_real (MapType0Select Ops_3Mask@19 null (List xs@@13))))) (and (=> (= (ControlFlow 0 190) 188) anon489_Then_correct) (=> (= (ControlFlow 0 190) 189) anon489_Else_correct)))))
(let ((anon488_Else_correct  (=> (not (and (and (and (and b_5@41 b_5@41) b_15@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@21 Ops_3Mask@19) (= Used_6Mask@1 ZeroMask)) (and (= b_15@3 b_15@0) (= neededTransfer@25 FullPerm))) (and (=> (= (ControlFlow 0 185) 184) anon491_Then_correct) (=> (= (ControlFlow 0 185) 179) anon491_Else_correct))))))
(let ((anon249_correct  (=> (and (= b_15@0  (and b_15 (state Used_6Heap@0 ZeroMask))) (= initNeededTransfer@6 (+ (U_2_real (MapType0Select ZeroMask null (List xs@@13))) FullPerm))) (and (=> (= (ControlFlow 0 191) (- 0 192)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 191) 190) anon488_Then_correct) (=> (= (ControlFlow 0 191) 185) anon488_Else_correct)))))))
(let ((anon248_correct  (and (=> (= (ControlFlow 0 194) (- 0 195)) (=> (and b_5@31 b_13@6) (|Seq#Equal| (elems Result_6Heap crt@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1)))) (=> (=> (and b_5@31 b_13@6) (|Seq#Equal| (elems Result_6Heap crt@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (=> (= b_5@32  (and b_5@31 b_13@6)) (=> (and (and (and (and (= b_5@33  (and b_5@32 (= Used_5Heap@0 Ops_3Heap@10))) (= b_5@34  (and b_5@33 (state Ops_3Heap@10 Ops_3Mask@17)))) (and (= Ops_3Mask@18 (MapType0Store Ops_3Mask@17 null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select Ops_3Mask@17 null (List xs@@13))) FullPerm)))) (= b_5@35  (and b_5@34 (state Ops_3Heap@10 Ops_3Mask@18))))) (and (and (= b_5@36  (and b_5@35 (state Ops_3Heap@10 Ops_3Mask@18))) (= b_5@37  (and b_5@36 (|Seq#Equal| (elems Ops_3Heap@10 xs@@13) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1)))))) (and (= b_5@38  (and b_5@37 (state Ops_3Heap@10 Ops_3Mask@18))) (IdenticalOnKnownLocations Ops_3Heap@10 ExhaleHeap@11 Ops_3Mask@18)))) (and (and (and (= b_5@39  (and b_5@38 (state ExhaleHeap@11 Ops_3Mask@18))) (= b_5@40  (and b_5@39 (state ExhaleHeap@11 Ops_3Mask@18)))) (and (= Ops_3Heap@11 ExhaleHeap@11) (= b_5@41 b_5@40))) (and (and (= Mask@57 Mask@56) (= Ops_3Mask@19 Ops_3Mask@18)) (and (= Heap@34 Heap@33) (= (ControlFlow 0 194) 191))))) anon249_correct))))))
(let ((anon485_Then_correct  (=> b_5@31 (and (and (=> (= (ControlFlow 0 202) 194) anon248_correct) (=> (= (ControlFlow 0 202) 199) anon487_Then_correct)) (=> (= (ControlFlow 0 202) 201) anon487_Else_correct)))))
(let ((anon485_Else_correct  (=> (and (not b_5@31) (= (ControlFlow 0 197) 194)) anon248_correct)))
(let ((anon484_Then_correct  (=> (and b_5@31 b_13@6) (and (=> (= (ControlFlow 0 203) 202) anon485_Then_correct) (=> (= (ControlFlow 0 203) 197) anon485_Else_correct)))))
(let ((anon484_Else_correct  (=> (and (not (and b_5@31 b_13@6)) (= (ControlFlow 0 196) 194)) anon248_correct)))
(let ((anon242_correct  (and (=> (= (ControlFlow 0 204) (- 0 205)) (=> (and b_5@28 b_13@6) (and (= neededTransfer@23 0.0) (= (U_2_real (MapType0Select Used_5Mask@3 null (List crt@0))) initNeededTransfer@5)))) (=> (=> (and b_5@28 b_13@6) (and (= neededTransfer@23 0.0) (= (U_2_real (MapType0Select Used_5Mask@3 null (List crt@0))) initNeededTransfer@5))) (=> (and (and (and (= b_14@0  (and b_5@28 b_13@6)) (= b_14@1  (and b_14@0 (state Result_6Heap Result_6Mask)))) (and (= b_14@2  (and b_14@1 (sumMask Result_6Mask Ops_3Mask@17 Used_5Mask@3))) (= b_14@3  (and (and b_14@2 (IdenticalOnKnownLocations Ops_3Heap@10 Result_6Heap Ops_3Mask@17)) (IdenticalOnKnownLocations Used_5Heap@0 Result_6Heap Used_5Mask@3))))) (and (and (= b_14@4  (and b_14@3 (state Result_6Heap Result_6Mask))) (= b_5@29  (and b_5@28 b_14@4))) (and (= b_5@30  (and b_5@29 b_13@6)) (= b_5@31  (and b_5@30 (= Used_5Heap@0 Ops_3Heap@10)))))) (and (=> (= (ControlFlow 0 204) 203) anon484_Then_correct) (=> (= (ControlFlow 0 204) 196) anon484_Else_correct)))))))
(let ((anon483_Else_correct  (=> (>= 0.0 takeTransfer@11) (=> (and (= Heap@33 Heap@31) (= Mask@56 Mask@54)) (=> (and (and (= b_13@6 b_13@3) (= Used_5Mask@3 Used_5Mask@1)) (and (= neededTransfer@23 neededTransfer@21) (= (ControlFlow 0 208) 204))) anon242_correct)))))
(let ((anon483_Then_correct  (=> (> takeTransfer@11 0.0) (=> (and (= neededTransfer@22 (- neededTransfer@21 takeTransfer@11)) (= Used_5Mask@2 (MapType0Store Used_5Mask@1 null (List crt@0) (real_2_U (+ (U_2_real (MapType0Select Used_5Mask@1 null (List crt@0))) takeTransfer@11))))) (=> (and (and (= b_13@4  (and b_13@3 (state Used_5Heap@0 Used_5Mask@2))) (= TempMask@5 (MapType0Store ZeroMask null (List crt@0) (real_2_U FullPerm)))) (and (= b_13@5  (and b_13@4 (IdenticalOnKnownLocations Heap@31 Used_5Heap@0 TempMask@5))) (= Mask@55 (MapType0Store Mask@54 null (List crt@0) (real_2_U (- (U_2_real (MapType0Select Mask@54 null (List crt@0))) takeTransfer@11)))))) (=> (and (and (and (forall ((o_8 T@U) (f_12 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_12))))
(let ((A@@13 (FieldTypeInv0 (type f_12))))
 (=> (and (and (= (type o_8) RefType) (= (type f_12) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType0Select (MapType1Select Heap@31 null (|wand#sm| nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2)))) o_8 f_12)) (U_2_bool (MapType0Select (MapType1Select Heap@31 null (|List#sm| crt@0)) o_8 f_12)))) (U_2_bool (MapType0Select newPMask@5 o_8 f_12)))))
 :qid |stdinbpl.2366:49|
 :skolemid |84|
 :pattern ( (MapType0Select newPMask@5 o_8 f_12))
)) (= Heap@32 (MapType1Store Heap@31 null (|wand#sm| nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2))) newPMask@5))) (and (= Heap@33 Heap@32) (= Mask@56 Mask@55))) (and (and (= b_13@6 b_13@5) (= Used_5Mask@3 Used_5Mask@2)) (and (= neededTransfer@23 neededTransfer@22) (= (ControlFlow 0 207) 204)))) anon242_correct))))))
(let ((anon482_Else_correct  (=> (and (< maskTransfer@11 neededTransfer@21) (= takeTransfer@11 maskTransfer@11)) (and (=> (= (ControlFlow 0 210) 207) anon483_Then_correct) (=> (= (ControlFlow 0 210) 208) anon483_Else_correct)))))
(let ((anon482_Then_correct  (=> (and (<= neededTransfer@21 maskTransfer@11) (= takeTransfer@11 neededTransfer@21)) (and (=> (= (ControlFlow 0 209) 207) anon483_Then_correct) (=> (= (ControlFlow 0 209) 208) anon483_Else_correct)))))
(let ((anon481_Then_correct  (=> (and (and (and (and b_5@28 b_13@3) true) (> neededTransfer@21 0.0)) (= maskTransfer@11 (U_2_real (MapType0Select Mask@54 null (List crt@0))))) (and (=> (= (ControlFlow 0 211) 209) anon482_Then_correct) (=> (= (ControlFlow 0 211) 210) anon482_Else_correct)))))
(let ((anon481_Else_correct  (=> (not (and (and (and b_5@28 b_13@3) true) (> neededTransfer@21 0.0))) (=> (and (= Heap@33 Heap@31) (= Mask@56 Mask@54)) (=> (and (and (= b_13@6 b_13@3) (= Used_5Mask@3 Used_5Mask@1)) (and (= neededTransfer@23 neededTransfer@21) (= (ControlFlow 0 206) 204))) anon242_correct)))))
(let ((anon480_Else_correct  (=> (>= 0.0 takeTransfer@10) (=> (and (and (= neededTransfer@21 FullPerm) (= Ops_3Mask@17 Ops_3Mask@15)) (and (= Used_5Mask@1 ZeroMask) (= b_13@3 b_13@0))) (and (=> (= (ControlFlow 0 214) 211) anon481_Then_correct) (=> (= (ControlFlow 0 214) 206) anon481_Else_correct))))))
(let ((anon480_Then_correct  (=> (> takeTransfer@10 0.0) (=> (and (= neededTransfer@20 (- FullPerm takeTransfer@10)) (= Used_5Mask@0 (MapType0Store ZeroMask null (List crt@0) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List crt@0))) takeTransfer@10))))) (=> (and (and (and (= b_13@1  (and b_13@0 (state Used_5Heap@0 Used_5Mask@0))) (= TempMask@4 (MapType0Store ZeroMask null (List crt@0) (real_2_U FullPerm)))) (and (= b_13@2  (and b_13@1 (IdenticalOnKnownLocations Ops_3Heap@10 Used_5Heap@0 TempMask@4))) (= Ops_3Mask@16 (MapType0Store Ops_3Mask@15 null (List crt@0) (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@15 null (List crt@0))) takeTransfer@10)))))) (and (and (= neededTransfer@21 neededTransfer@20) (= Ops_3Mask@17 Ops_3Mask@16)) (and (= Used_5Mask@1 Used_5Mask@0) (= b_13@3 b_13@2)))) (and (=> (= (ControlFlow 0 213) 211) anon481_Then_correct) (=> (= (ControlFlow 0 213) 206) anon481_Else_correct)))))))
(let ((anon479_Else_correct  (=> (and (< maskTransfer@10 FullPerm) (= takeTransfer@10 maskTransfer@10)) (and (=> (= (ControlFlow 0 216) 213) anon480_Then_correct) (=> (= (ControlFlow 0 216) 214) anon480_Else_correct)))))
(let ((anon479_Then_correct  (=> (and (<= FullPerm maskTransfer@10) (= takeTransfer@10 FullPerm)) (and (=> (= (ControlFlow 0 215) 213) anon480_Then_correct) (=> (= (ControlFlow 0 215) 214) anon480_Else_correct)))))
(let ((anon478_Then_correct  (=> (and (and (and (and b_5@28 b_13@0) true) (> FullPerm 0.0)) (= maskTransfer@10 (U_2_real (MapType0Select Ops_3Mask@15 null (List crt@0))))) (and (=> (= (ControlFlow 0 217) 215) anon479_Then_correct) (=> (= (ControlFlow 0 217) 216) anon479_Else_correct)))))
(let ((anon478_Else_correct  (=> (not (and (and (and b_5@28 b_13@0) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@21 FullPerm) (= Ops_3Mask@17 Ops_3Mask@15)) (and (= Used_5Mask@1 ZeroMask) (= b_13@3 b_13@0))) (and (=> (= (ControlFlow 0 212) 211) anon481_Then_correct) (=> (= (ControlFlow 0 212) 206) anon481_Else_correct))))))
(let ((anon230_correct  (and (=> (= (ControlFlow 0 218) (- 0 220)) (=> (and b_5@24 b_11@4) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType0Select Used_4Mask@3 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) initNeededTransfer@4)))) (=> (=> (and b_5@24 b_11@4) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType0Select Used_4Mask@3 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) initNeededTransfer@4))) (=> (= b_12@0  (and b_5@24 b_11@4)) (=> (and (= b_12@1  (and b_12@0 (state Result_5Heap Result_5Mask))) (= b_12@2  (and b_12@1 (sumMask Result_5Mask Ops_3Mask@15 Used_4Mask@3)))) (=> (and (and (and (= b_12@3  (and (and b_12@2 (IdenticalOnKnownLocations Ops_3Heap@10 Result_5Heap Ops_3Mask@15)) (IdenticalOnKnownLocations Used_4Heap@0 Result_5Heap Used_4Mask@3))) (= b_12@4  (and b_12@3 (state Result_5Heap Result_5Mask)))) (and (= b_5@25  (and b_5@24 b_12@4)) (= b_5@26  (and b_5@25 b_11@4)))) (and (and (= b_5@27  (and b_5@26 (= Used_4Heap@0 Ops_3Heap@10))) (= b_5@28  (and b_5@27 (state Ops_3Heap@10 Ops_3Mask@15)))) (and (= b_13@0  (and b_13 (state Used_5Heap@0 ZeroMask))) (= initNeededTransfer@5 (+ (U_2_real (MapType0Select ZeroMask null (List crt@0))) FullPerm))))) (and (=> (= (ControlFlow 0 218) (- 0 219)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 218) 217) anon478_Then_correct) (=> (= (ControlFlow 0 218) 212) anon478_Else_correct)))))))))))
(let ((anon477_Else_correct  (=> (and (>= 0.0 takeTransfer@9) (= neededTransfer@19 neededTransfer@17)) (=> (and (and (= Mask@54 Mask@52) (= b_11@4 b_11@2)) (and (= Used_4Mask@3 Used_4Mask@1) (= (ControlFlow 0 223) 218))) anon230_correct))))
(let ((anon477_Then_correct  (=> (and (> takeTransfer@9 0.0) (= neededTransfer@18 (- neededTransfer@17 takeTransfer@9))) (=> (and (and (and (= Used_4Mask@2 (MapType0Store Used_4Mask@1 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (real_2_U (+ (U_2_real (MapType0Select Used_4Mask@1 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) takeTransfer@9)))) (= b_11@3  (and b_11@2 (state Used_4Heap@0 Used_4Mask@2)))) (and (= Mask@53 (MapType0Store Mask@52 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (real_2_U (- (U_2_real (MapType0Select Mask@52 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) takeTransfer@9)))) (= neededTransfer@19 neededTransfer@18))) (and (and (= Mask@54 Mask@53) (= b_11@4 b_11@3)) (and (= Used_4Mask@3 Used_4Mask@2) (= (ControlFlow 0 222) 218)))) anon230_correct))))
(let ((anon476_Else_correct  (=> (and (< maskTransfer@9 neededTransfer@17) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 225) 222) anon477_Then_correct) (=> (= (ControlFlow 0 225) 223) anon477_Else_correct)))))
(let ((anon476_Then_correct  (=> (and (<= neededTransfer@17 maskTransfer@9) (= takeTransfer@9 neededTransfer@17)) (and (=> (= (ControlFlow 0 224) 222) anon477_Then_correct) (=> (= (ControlFlow 0 224) 223) anon477_Else_correct)))))
(let ((anon475_Then_correct  (=> (and (and (and (and b_5@24 b_11@2) true) (> neededTransfer@17 0.0)) (= maskTransfer@9 (U_2_real (MapType0Select Mask@52 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))))) (and (=> (= (ControlFlow 0 226) 224) anon476_Then_correct) (=> (= (ControlFlow 0 226) 225) anon476_Else_correct)))))
(let ((anon475_Else_correct  (=> (and (not (and (and (and b_5@24 b_11@2) true) (> neededTransfer@17 0.0))) (= neededTransfer@19 neededTransfer@17)) (=> (and (and (= Mask@54 Mask@52) (= b_11@4 b_11@2)) (and (= Used_4Mask@3 Used_4Mask@1) (= (ControlFlow 0 221) 218))) anon230_correct))))
(let ((anon474_Else_correct  (=> (>= 0.0 takeTransfer@8) (=> (and (and (= Ops_3Mask@15 Ops_3Mask@13) (= Used_4Mask@1 ZeroMask)) (and (= b_11@2 b_11@0) (= neededTransfer@17 1.0))) (and (=> (= (ControlFlow 0 229) 226) anon475_Then_correct) (=> (= (ControlFlow 0 229) 221) anon475_Else_correct))))))
(let ((anon474_Then_correct  (=> (> takeTransfer@8 0.0) (=> (and (and (and (= neededTransfer@16 (- 1.0 takeTransfer@8)) (= Used_4Mask@0 (MapType0Store ZeroMask null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) takeTransfer@8))))) (and (= b_11@1  (and b_11@0 (state Used_4Heap@0 Used_4Mask@0))) (= Ops_3Mask@14 (MapType0Store Ops_3Mask@13 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@13 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) takeTransfer@8)))))) (and (and (= Ops_3Mask@15 Ops_3Mask@14) (= Used_4Mask@1 Used_4Mask@0)) (and (= b_11@2 b_11@1) (= neededTransfer@17 neededTransfer@16)))) (and (=> (= (ControlFlow 0 228) 226) anon475_Then_correct) (=> (= (ControlFlow 0 228) 221) anon475_Else_correct))))))
(let ((anon473_Else_correct  (=> (and (< maskTransfer@8 1.0) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 231) 228) anon474_Then_correct) (=> (= (ControlFlow 0 231) 229) anon474_Else_correct)))))
(let ((anon473_Then_correct  (=> (and (<= 1.0 maskTransfer@8) (= takeTransfer@8 1.0)) (and (=> (= (ControlFlow 0 230) 228) anon474_Then_correct) (=> (= (ControlFlow 0 230) 229) anon474_Else_correct)))))
(let ((anon472_Then_correct  (=> (and (and (and (and b_5@24 b_11@0) true) (> 1.0 0.0)) (= maskTransfer@8 (U_2_real (MapType0Select Ops_3Mask@13 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))))) (and (=> (= (ControlFlow 0 232) 230) anon473_Then_correct) (=> (= (ControlFlow 0 232) 231) anon473_Else_correct)))))
(let ((anon472_Else_correct  (=> (not (and (and (and b_5@24 b_11@0) true) (> 1.0 0.0))) (=> (and (and (= Ops_3Mask@15 Ops_3Mask@13) (= Used_4Mask@1 ZeroMask)) (and (= b_11@2 b_11@0) (= neededTransfer@17 1.0))) (and (=> (= (ControlFlow 0 227) 226) anon475_Then_correct) (=> (= (ControlFlow 0 227) 221) anon475_Else_correct))))))
(let ((anon218_correct  (=> (= initNeededTransfer@4 (+ (U_2_real (MapType0Select ZeroMask null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) 1.0)) (and (=> (= (ControlFlow 0 233) (- 0 234)) (>= 1.0 0.0)) (=> (>= 1.0 0.0) (and (=> (= (ControlFlow 0 233) 232) anon472_Then_correct) (=> (= (ControlFlow 0 233) 227) anon472_Else_correct)))))))
(let ((anon464_Then_correct  (=> b_5@24 (and (=> (= (ControlFlow 0 252) 251) anon465_Then_correct) (=> (= (ControlFlow 0 252) 233) anon218_correct)))))
(let ((anon464_Else_correct  (=> (and (not b_5@24) (= (ControlFlow 0 236) 233)) anon218_correct)))
(let ((anon463_Then_correct  (=> (and b_5@24 b_11@0) (and (=> (= (ControlFlow 0 253) 252) anon464_Then_correct) (=> (= (ControlFlow 0 253) 236) anon464_Else_correct)))))
(let ((anon463_Else_correct  (=> (and (not (and b_5@24 b_11@0)) (= (ControlFlow 0 235) 233)) anon218_correct)))
(let ((anon462_Then_correct  (=> (and b_5@24 (= b_11@0  (and b_11 (state Used_4Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 254) 253) anon463_Then_correct) (=> (= (ControlFlow 0 254) 235) anon463_Else_correct)))))
(let ((anon462_Else_correct  (=> (not b_5@24) (=> (and (= Ops_3Heap@11 Ops_3Heap@10) (= b_5@41 b_5@24)) (=> (and (and (= Mask@57 Mask@52) (= Ops_3Mask@19 Ops_3Mask@13)) (and (= Heap@34 Heap@31) (= (ControlFlow 0 193) 191))) anon249_correct)))))
(let ((anon200_correct  (=> (state Ops_3Heap@9 Ops_3Mask@12) (=> (and (= b_5@23  (and b_5@22 (state Ops_3Heap@9 Ops_3Mask@12))) (= b_5@24 b_5@23)) (=> (and (and (= Ops_3Heap@10 Ops_3Heap@9) (= Heap@31 Heap@30)) (and (= Ops_3Mask@13 Ops_3Mask@12) (= Mask@52 Mask@51))) (and (=> (= (ControlFlow 0 256) 254) anon462_Then_correct) (=> (= (ControlFlow 0 256) 193) anon462_Else_correct)))))))
(let ((anon461_Else_correct  (=> (= (MapType1Select Ops_3Heap@7 crt@0 next) null) (=> (and (= Ops_3Heap@9 Ops_3Heap@7) (= (ControlFlow 0 258) 256)) anon200_correct))))
(let ((anon461_Then_correct  (=> (not (= (MapType1Select Ops_3Heap@7 crt@0 next) null)) (=> (and (and (forall ((o_7 T@U) (f_11 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_11))))
(let ((A@@14 (FieldTypeInv0 (type f_11))))
 (=> (and (and (= (type o_7) RefType) (= (type f_11) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType0Select (MapType1Select Ops_3Heap@7 null (|List#sm| crt@0)) o_7 f_11)) (U_2_bool (MapType0Select (MapType1Select Ops_3Heap@7 null (|List#sm| (MapType1Select Ops_3Heap@7 crt@0 next))) o_7 f_11)))) (U_2_bool (MapType0Select newPMask@4 o_7 f_11)))))
 :qid |stdinbpl.2149:41|
 :skolemid |83|
 :pattern ( (MapType0Select newPMask@4 o_7 f_11))
)) (= Ops_3Heap@8 (MapType1Store Ops_3Heap@7 null (|List#sm| crt@0) newPMask@4))) (and (= Ops_3Heap@9 Ops_3Heap@8) (= (ControlFlow 0 257) 256))) anon200_correct))))
(let ((anon198_correct  (=> (and (= Ops_3Heap@6 (MapType1Store Ops_3Heap@5 null (|List#sm| crt@0) (MapType0Store (MapType1Select Ops_3Heap@5 null (|List#sm| crt@0)) crt@0 val (bool_2_U true)))) (= Ops_3Heap@7 (MapType1Store Ops_3Heap@6 null (|List#sm| crt@0) (MapType0Store (MapType1Select Ops_3Heap@6 null (|List#sm| crt@0)) crt@0 next (bool_2_U true))))) (and (=> (= (ControlFlow 0 259) 257) anon461_Then_correct) (=> (= (ControlFlow 0 259) 258) anon461_Else_correct)))))
(let ((anon460_Else_correct  (=> (HasDirectPerm Ops_3Mask@12 null (List crt@0)) (=> (and (= Ops_3Heap@5 Ops_3Heap@2) (= (ControlFlow 0 261) 259)) anon198_correct))))
(let ((anon460_Then_correct  (=> (not (HasDirectPerm Ops_3Mask@12 null (List crt@0))) (=> (and (and (= Ops_3Heap@3 (MapType1Store Ops_3Heap@2 null (|List#sm| crt@0) ZeroPMask)) (= Ops_3Heap@4 (MapType1Store Ops_3Heap@3 null (List crt@0) freshVersion@2))) (and (= Ops_3Heap@5 Ops_3Heap@4) (= (ControlFlow 0 260) 259))) anon198_correct))))
(let ((anon196_correct  (=> (= b_10@0  (and b_5@19 b_6@19)) (=> (and (= b_10@1  (and b_10@0 (state Result_4Heap Result_4Mask))) (= b_10@2  (and b_10@1 (sumMask Result_4Mask Ops_3Mask@11 Used_3Mask@12)))) (=> (and (and (and (= b_10@3  (and (and b_10@2 (IdenticalOnKnownLocations Ops_3Heap@2 Result_4Heap Ops_3Mask@11)) (IdenticalOnKnownLocations Used_3Heap@0 Result_4Heap Used_3Mask@12))) (= b_10@4  (and b_10@3 (state Result_4Heap Result_4Mask)))) (and (= b_5@20  (and b_5@19 b_10@4)) (= Ops_3Mask@12 (MapType0Store Ops_3Mask@11 null (List crt@0) (real_2_U (+ (U_2_real (MapType0Select Ops_3Mask@11 null (List crt@0))) FullPerm)))))) (and (and (= b_5@21  (and b_5@20 (state Ops_3Heap@2 Ops_3Mask@12))) (= b_5@22  (and b_5@21 (state Ops_3Heap@2 Ops_3Mask@12)))) (and (|List#trigger| Ops_3Heap@2 (List crt@0)) (= (MapType1Select Ops_3Heap@2 null (List crt@0)) (CombineFrames (FrameFragment (MapType1Select Ops_3Heap@2 crt@0 val)) (CombineFrames (FrameFragment (MapType1Select Ops_3Heap@2 crt@0 next)) (FrameFragment (ite (not (= (MapType1Select Ops_3Heap@2 crt@0 next) null)) (MapType1Select Ops_3Heap@2 null (List (MapType1Select Ops_3Heap@2 crt@0 next))) EmptyFrame)))))))) (and (=> (= (ControlFlow 0 262) 260) anon460_Then_correct) (=> (= (ControlFlow 0 262) 261) anon460_Else_correct)))))))
(let ((anon195_correct  (and (=> (= (ControlFlow 0 264) (- 0 265)) (=> (and b_5@15 b_6@18) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType0Select Used_3Mask@11 null (List arg_1@0))) initNeededTransfer@3)))) (=> (=> (and b_5@15 b_6@18) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType0Select Used_3Mask@11 null (List arg_1@0))) initNeededTransfer@3))) (=> (= b_9@0  (and b_5@15 b_6@18)) (=> (and (= b_9@1  (and b_9@0 (state Result_3Heap Result_3Mask))) (= b_9@2  (and b_9@1 (sumMask Result_3Mask Ops_3Mask@10 Used_3Mask@11)))) (=> (and (and (= b_9@3  (and (and b_9@2 (IdenticalOnKnownLocations Ops_3Heap@2 Result_3Heap Ops_3Mask@10)) (IdenticalOnKnownLocations Used_3Heap@0 Result_3Heap Used_3Mask@11))) (= b_9@4  (and b_9@3 (state Result_3Heap Result_3Mask)))) (and (= b_5@16  (and b_5@15 b_9@4)) (= b_5@17  (and b_5@16 b_6@18)))) (=> (and (and (and (= b_5@18  (and b_5@17 (= Used_3Heap@0 Ops_3Heap@2))) (= Mask@51 Mask@50)) (and (= Used_3Mask@12 Used_3Mask@11) (= b_5@19 b_5@18))) (and (and (= Heap@30 Heap@29) (= Ops_3Mask@11 Ops_3Mask@10)) (and (= b_6@19 b_6@18) (= (ControlFlow 0 264) 262)))) anon196_correct))))))))
(let ((anon459_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (= b_6@18 b_6@15) (= Heap@29 Heap@27)) (=> (and (and (= Used_3Mask@11 Used_3Mask@9) (= neededTransfer@15 neededTransfer@13)) (and (= Mask@50 Mask@48) (= (ControlFlow 0 268) 264))) anon195_correct)))))
(let ((anon459_Then_correct  (=> (> takeTransfer@7 0.0) (=> (and (= neededTransfer@14 (- neededTransfer@13 takeTransfer@7)) (= Used_3Mask@10 (MapType0Store Used_3Mask@9 null (List arg_1@0) (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@9 null (List arg_1@0))) takeTransfer@7))))) (=> (and (and (= b_6@16  (and b_6@15 (state Used_3Heap@0 Used_3Mask@10))) (= TempMask@3 (MapType0Store ZeroMask null (List arg_1@0) (real_2_U FullPerm)))) (and (= b_6@17  (and b_6@16 (IdenticalOnKnownLocations Heap@27 Used_3Heap@0 TempMask@3))) (= Mask@49 (MapType0Store Mask@48 null (List arg_1@0) (real_2_U (- (U_2_real (MapType0Select Mask@48 null (List arg_1@0))) takeTransfer@7)))))) (=> (and (and (and (forall ((o_6 T@U) (f_10 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_10))))
(let ((A@@15 (FieldTypeInv0 (type f_10))))
 (=> (and (and (= (type o_6) RefType) (= (type f_10) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType0Select (MapType1Select Heap@27 null (|wand#sm| nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2)))) o_6 f_10)) (U_2_bool (MapType0Select (MapType1Select Heap@27 null (|List#sm| (MapType1Select Heap@27 crt@0 next))) o_6 f_10)))) (U_2_bool (MapType0Select newPMask@3 o_6 f_10)))))
 :qid |stdinbpl.2105:49|
 :skolemid |82|
 :pattern ( (MapType0Select newPMask@3 o_6 f_10))
)) (= Heap@28 (MapType1Store Heap@27 null (|wand#sm| nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2))) newPMask@3))) (and (= b_6@18 b_6@17) (= Heap@29 Heap@28))) (and (and (= Used_3Mask@11 Used_3Mask@10) (= neededTransfer@15 neededTransfer@14)) (and (= Mask@50 Mask@49) (= (ControlFlow 0 267) 264)))) anon195_correct))))))
(let ((anon458_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@13) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 270) 267) anon459_Then_correct) (=> (= (ControlFlow 0 270) 268) anon459_Else_correct)))))
(let ((anon458_Then_correct  (=> (and (<= neededTransfer@13 maskTransfer@7) (= takeTransfer@7 neededTransfer@13)) (and (=> (= (ControlFlow 0 269) 267) anon459_Then_correct) (=> (= (ControlFlow 0 269) 268) anon459_Else_correct)))))
(let ((anon457_Then_correct  (=> (and (and (and (and b_5@15 b_6@15) true) (> neededTransfer@13 0.0)) (= maskTransfer@7 (U_2_real (MapType0Select Mask@48 null (List arg_1@0))))) (and (=> (= (ControlFlow 0 271) 269) anon458_Then_correct) (=> (= (ControlFlow 0 271) 270) anon458_Else_correct)))))
(let ((anon457_Else_correct  (=> (not (and (and (and b_5@15 b_6@15) true) (> neededTransfer@13 0.0))) (=> (and (= b_6@18 b_6@15) (= Heap@29 Heap@27)) (=> (and (and (= Used_3Mask@11 Used_3Mask@9) (= neededTransfer@15 neededTransfer@13)) (and (= Mask@50 Mask@48) (= (ControlFlow 0 266) 264))) anon195_correct)))))
(let ((anon456_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (and (= Ops_3Mask@10 Ops_3Mask@8) (= neededTransfer@13 FullPerm)) (and (= Used_3Mask@9 Used_3Mask@7) (= b_6@15 b_6@12))) (and (=> (= (ControlFlow 0 274) 271) anon457_Then_correct) (=> (= (ControlFlow 0 274) 266) anon457_Else_correct))))))
(let ((anon456_Then_correct  (=> (> takeTransfer@6 0.0) (=> (and (= neededTransfer@12 (- FullPerm takeTransfer@6)) (= Used_3Mask@8 (MapType0Store Used_3Mask@7 null (List arg_1@0) (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@7 null (List arg_1@0))) takeTransfer@6))))) (=> (and (and (and (= b_6@13  (and b_6@12 (state Used_3Heap@0 Used_3Mask@8))) (= TempMask@2 (MapType0Store ZeroMask null (List arg_1@0) (real_2_U FullPerm)))) (and (= b_6@14  (and b_6@13 (IdenticalOnKnownLocations Ops_3Heap@2 Used_3Heap@0 TempMask@2))) (= Ops_3Mask@9 (MapType0Store Ops_3Mask@8 null (List arg_1@0) (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@8 null (List arg_1@0))) takeTransfer@6)))))) (and (and (= Ops_3Mask@10 Ops_3Mask@9) (= neededTransfer@13 neededTransfer@12)) (and (= Used_3Mask@9 Used_3Mask@8) (= b_6@15 b_6@14)))) (and (=> (= (ControlFlow 0 273) 271) anon457_Then_correct) (=> (= (ControlFlow 0 273) 266) anon457_Else_correct)))))))
(let ((anon455_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 276) 273) anon456_Then_correct) (=> (= (ControlFlow 0 276) 274) anon456_Else_correct)))))
(let ((anon455_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 275) 273) anon456_Then_correct) (=> (= (ControlFlow 0 275) 274) anon456_Else_correct)))))
(let ((anon454_Then_correct  (=> (and (and (and (and b_5@15 b_6@12) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType0Select Ops_3Mask@8 null (List arg_1@0))))) (and (=> (= (ControlFlow 0 277) 275) anon455_Then_correct) (=> (= (ControlFlow 0 277) 276) anon455_Else_correct)))))
(let ((anon454_Else_correct  (=> (not (and (and (and b_5@15 b_6@12) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@10 Ops_3Mask@8) (= neededTransfer@13 FullPerm)) (and (= Used_3Mask@9 Used_3Mask@7) (= b_6@15 b_6@12))) (and (=> (= (ControlFlow 0 272) 271) anon457_Then_correct) (=> (= (ControlFlow 0 272) 266) anon457_Else_correct))))))
(let ((anon183_correct  (=> (and (= arg_1@0 (MapType1Select Result_2Heap crt@0 next)) (= initNeededTransfer@3 (+ (U_2_real (MapType0Select Used_3Mask@7 null (List arg_1@0))) FullPerm))) (and (=> (= (ControlFlow 0 278) (- 0 279)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 278) 277) anon454_Then_correct) (=> (= (ControlFlow 0 278) 272) anon454_Else_correct)))))))
(let ((anon453_Else_correct  (=> (and (not b_5@15) (= (ControlFlow 0 283) 278)) anon183_correct)))
(let ((anon453_Then_correct  (=> b_5@15 (and (=> (= (ControlFlow 0 281) (- 0 282)) (HasDirectPerm Result_2Mask crt@0 next)) (=> (HasDirectPerm Result_2Mask crt@0 next) (=> (= (ControlFlow 0 281) 278) anon183_correct))))))
(let ((anon452_Then_correct  (=> (and b_5@15 b_6@12) (and (=> (= (ControlFlow 0 284) 281) anon453_Then_correct) (=> (= (ControlFlow 0 284) 283) anon453_Else_correct)))))
(let ((anon452_Else_correct  (=> (and (not (and b_5@15 b_6@12)) (= (ControlFlow 0 280) 278)) anon183_correct)))
(let ((anon451_Then_correct  (=> (=> b_5@15 (not (= (MapType1Select Result_2Heap crt@0 next) null))) (and (=> (= (ControlFlow 0 285) 284) anon452_Then_correct) (=> (= (ControlFlow 0 285) 280) anon452_Else_correct)))))
(let ((anon451_Else_correct  (=> (and (and (and (not (=> b_5@15 (not (= (MapType1Select Result_2Heap crt@0 next) null)))) (= Mask@51 Mask@48)) (and (= Used_3Mask@12 Used_3Mask@7) (= b_5@19 b_5@15))) (and (and (= Heap@30 Heap@27) (= Ops_3Mask@11 Ops_3Mask@8)) (and (= b_6@19 b_6@12) (= (ControlFlow 0 263) 262)))) anon196_correct)))
(let ((anon179_correct  (and (=> (= (ControlFlow 0 286) (- 0 287)) (=> (and b_5@12 b_6@12) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType0Select Used_3Mask@7 crt@0 next)) initNeededTransfer@2)))) (=> (=> (and b_5@12 b_6@12) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType0Select Used_3Mask@7 crt@0 next)) initNeededTransfer@2))) (=> (and (and (and (= b_8@0  (and b_5@12 b_6@12)) (= b_8@1  (and b_8@0 (state Result_2Heap Result_2Mask)))) (and (= b_8@2  (and b_8@1 (sumMask Result_2Mask Ops_3Mask@8 Used_3Mask@7))) (= b_8@3  (and (and b_8@2 (IdenticalOnKnownLocations Ops_3Heap@2 Result_2Heap Ops_3Mask@8)) (IdenticalOnKnownLocations Used_3Heap@0 Result_2Heap Used_3Mask@7))))) (and (and (= b_8@4  (and b_8@3 (state Result_2Heap Result_2Mask))) (= b_5@13  (and b_5@12 b_8@4))) (and (= b_5@14  (and b_5@13 b_6@12)) (= b_5@15  (and b_5@14 (= Used_3Heap@0 Ops_3Heap@2)))))) (and (=> (= (ControlFlow 0 286) 285) anon451_Then_correct) (=> (= (ControlFlow 0 286) 263) anon451_Else_correct)))))))
(let ((anon450_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (= Mask@48 Mask@46) (= b_6@12 b_6@9)) (=> (and (and (= Used_3Mask@7 Used_3Mask@5) (= neededTransfer@11 neededTransfer@9)) (and (= Heap@27 Heap@25) (= (ControlFlow 0 290) 286))) anon179_correct)))))
(let ((anon450_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (and (= neededTransfer@10 (- neededTransfer@9 takeTransfer@5)) (= Used_3Mask@6 (MapType0Store Used_3Mask@5 crt@0 next (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@5 crt@0 next)) takeTransfer@5))))) (and (= b_6@10  (and b_6@9 (state Used_3Heap@0 Used_3Mask@6))) (= b_6@11  (and b_6@10 (= (MapType1Select Heap@25 crt@0 next) (MapType1Select Used_3Heap@0 crt@0 next)))))) (=> (and (and (and (= Mask@47 (MapType0Store Mask@46 crt@0 next (real_2_U (- (U_2_real (MapType0Select Mask@46 crt@0 next)) takeTransfer@5)))) (= Heap@26 (MapType1Store Heap@25 null (|wand#sm| nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2))) (MapType0Store (MapType1Select Heap@25 null (|wand#sm| nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2)))) crt@0 next (bool_2_U true))))) (and (= Mask@48 Mask@47) (= b_6@12 b_6@11))) (and (and (= Used_3Mask@7 Used_3Mask@6) (= neededTransfer@11 neededTransfer@10)) (and (= Heap@27 Heap@26) (= (ControlFlow 0 289) 286)))) anon179_correct)))))
(let ((anon449_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@9) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 292) 289) anon450_Then_correct) (=> (= (ControlFlow 0 292) 290) anon450_Else_correct)))))
(let ((anon449_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@5) (= takeTransfer@5 neededTransfer@9)) (and (=> (= (ControlFlow 0 291) 289) anon450_Then_correct) (=> (= (ControlFlow 0 291) 290) anon450_Else_correct)))))
(let ((anon448_Then_correct  (=> (and (and (and (and b_5@12 b_6@9) true) (> neededTransfer@9 0.0)) (= maskTransfer@5 (U_2_real (MapType0Select Mask@46 crt@0 next)))) (and (=> (= (ControlFlow 0 293) 291) anon449_Then_correct) (=> (= (ControlFlow 0 293) 292) anon449_Else_correct)))))
(let ((anon448_Else_correct  (=> (not (and (and (and b_5@12 b_6@9) true) (> neededTransfer@9 0.0))) (=> (and (= Mask@48 Mask@46) (= b_6@12 b_6@9)) (=> (and (and (= Used_3Mask@7 Used_3Mask@5) (= neededTransfer@11 neededTransfer@9)) (and (= Heap@27 Heap@25) (= (ControlFlow 0 288) 286))) anon179_correct)))))
(let ((anon447_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (and (= neededTransfer@9 FullPerm) (= Used_3Mask@5 Used_3Mask@3)) (and (= b_6@9 b_6@6) (= Ops_3Mask@8 Ops_3Mask@6))) (and (=> (= (ControlFlow 0 296) 293) anon448_Then_correct) (=> (= (ControlFlow 0 296) 288) anon448_Else_correct))))))
(let ((anon447_Then_correct  (=> (and (> takeTransfer@4 0.0) (= neededTransfer@8 (- FullPerm takeTransfer@4))) (=> (and (and (and (= Used_3Mask@4 (MapType0Store Used_3Mask@3 crt@0 next (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@3 crt@0 next)) takeTransfer@4)))) (= b_6@7  (and b_6@6 (state Used_3Heap@0 Used_3Mask@4)))) (and (= b_6@8  (and b_6@7 (= (MapType1Select Ops_3Heap@2 crt@0 next) (MapType1Select Used_3Heap@0 crt@0 next)))) (= Ops_3Mask@7 (MapType0Store Ops_3Mask@6 crt@0 next (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@6 crt@0 next)) takeTransfer@4)))))) (and (and (= neededTransfer@9 neededTransfer@8) (= Used_3Mask@5 Used_3Mask@4)) (and (= b_6@9 b_6@8) (= Ops_3Mask@8 Ops_3Mask@7)))) (and (=> (= (ControlFlow 0 295) 293) anon448_Then_correct) (=> (= (ControlFlow 0 295) 288) anon448_Else_correct))))))
(let ((anon446_Else_correct  (=> (and (< maskTransfer@4 FullPerm) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 298) 295) anon447_Then_correct) (=> (= (ControlFlow 0 298) 296) anon447_Else_correct)))))
(let ((anon446_Then_correct  (=> (and (<= FullPerm maskTransfer@4) (= takeTransfer@4 FullPerm)) (and (=> (= (ControlFlow 0 297) 295) anon447_Then_correct) (=> (= (ControlFlow 0 297) 296) anon447_Else_correct)))))
(let ((anon445_Then_correct  (=> (and (and (and (and b_5@12 b_6@6) true) (> FullPerm 0.0)) (= maskTransfer@4 (U_2_real (MapType0Select Ops_3Mask@6 crt@0 next)))) (and (=> (= (ControlFlow 0 299) 297) anon446_Then_correct) (=> (= (ControlFlow 0 299) 298) anon446_Else_correct)))))
(let ((anon445_Else_correct  (=> (not (and (and (and b_5@12 b_6@6) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@9 FullPerm) (= Used_3Mask@5 Used_3Mask@3)) (and (= b_6@9 b_6@6) (= Ops_3Mask@8 Ops_3Mask@6))) (and (=> (= (ControlFlow 0 294) 293) anon448_Then_correct) (=> (= (ControlFlow 0 294) 288) anon448_Else_correct))))))
(let ((anon167_correct  (and (=> (= (ControlFlow 0 300) (- 0 302)) (=> (and b_5@9 b_6@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType0Select Used_3Mask@3 crt@0 val)) initNeededTransfer@1)))) (=> (=> (and b_5@9 b_6@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType0Select Used_3Mask@3 crt@0 val)) initNeededTransfer@1))) (=> (= b_7@0  (and b_5@9 b_6@6)) (=> (and (and (and (= b_7@1  (and b_7@0 (state Result_1Heap Result_1Mask))) (= b_7@2  (and b_7@1 (sumMask Result_1Mask Ops_3Mask@6 Used_3Mask@3)))) (and (= b_7@3  (and (and b_7@2 (IdenticalOnKnownLocations Ops_3Heap@2 Result_1Heap Ops_3Mask@6)) (IdenticalOnKnownLocations Used_3Heap@0 Result_1Heap Used_3Mask@3))) (= b_7@4  (and b_7@3 (state Result_1Heap Result_1Mask))))) (and (and (= b_5@10  (and b_5@9 b_7@4)) (= b_5@11  (and b_5@10 b_6@6))) (and (= b_5@12  (and b_5@11 (= Used_3Heap@0 Ops_3Heap@2))) (= initNeededTransfer@2 (+ (U_2_real (MapType0Select Used_3Mask@3 crt@0 next)) FullPerm))))) (and (=> (= (ControlFlow 0 300) (- 0 301)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 300) 299) anon445_Then_correct) (=> (= (ControlFlow 0 300) 294) anon445_Else_correct))))))))))
(let ((anon444_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (= Heap@25 Heap@23) (= b_6@6 b_6@3)) (=> (and (and (= Used_3Mask@3 Used_3Mask@1) (= Mask@46 Mask@44)) (and (= neededTransfer@7 neededTransfer@5) (= (ControlFlow 0 305) 300))) anon167_correct)))))
(let ((anon444_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (and (= neededTransfer@6 (- neededTransfer@5 takeTransfer@3)) (= Used_3Mask@2 (MapType0Store Used_3Mask@1 crt@0 val (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@1 crt@0 val)) takeTransfer@3))))) (and (= b_6@4  (and b_6@3 (state Used_3Heap@0 Used_3Mask@2))) (= b_6@5  (and b_6@4 (= (U_2_int (MapType1Select Heap@23 crt@0 val)) (U_2_int (MapType1Select Used_3Heap@0 crt@0 val))))))) (=> (and (and (and (= Mask@45 (MapType0Store Mask@44 crt@0 val (real_2_U (- (U_2_real (MapType0Select Mask@44 crt@0 val)) takeTransfer@3)))) (= Heap@24 (MapType1Store Heap@23 null (|wand#sm| nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2))) (MapType0Store (MapType1Select Heap@23 null (|wand#sm| nxt@1 FullPerm nxt@1 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@1) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2)))) crt@0 val (bool_2_U true))))) (and (= Heap@25 Heap@24) (= b_6@6 b_6@5))) (and (and (= Used_3Mask@3 Used_3Mask@2) (= Mask@46 Mask@45)) (and (= neededTransfer@7 neededTransfer@6) (= (ControlFlow 0 304) 300)))) anon167_correct)))))
(let ((anon443_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@5) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 307) 304) anon444_Then_correct) (=> (= (ControlFlow 0 307) 305) anon444_Else_correct)))))
(let ((anon443_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@3) (= takeTransfer@3 neededTransfer@5)) (and (=> (= (ControlFlow 0 306) 304) anon444_Then_correct) (=> (= (ControlFlow 0 306) 305) anon444_Else_correct)))))
(let ((anon442_Then_correct  (=> (and (and (and (and b_5@9 b_6@3) true) (> neededTransfer@5 0.0)) (= maskTransfer@3 (U_2_real (MapType0Select Mask@44 crt@0 val)))) (and (=> (= (ControlFlow 0 308) 306) anon443_Then_correct) (=> (= (ControlFlow 0 308) 307) anon443_Else_correct)))))
(let ((anon442_Else_correct  (=> (not (and (and (and b_5@9 b_6@3) true) (> neededTransfer@5 0.0))) (=> (and (= Heap@25 Heap@23) (= b_6@6 b_6@3)) (=> (and (and (= Used_3Mask@3 Used_3Mask@1) (= Mask@46 Mask@44)) (and (= neededTransfer@7 neededTransfer@5) (= (ControlFlow 0 303) 300))) anon167_correct)))))
(let ((anon441_Else_correct  (=> (>= 0.0 takeTransfer@2) (=> (and (and (= neededTransfer@5 FullPerm) (= Ops_3Mask@6 Ops_3Mask@4)) (and (= Used_3Mask@1 ZeroMask) (= b_6@3 b_6@0))) (and (=> (= (ControlFlow 0 311) 308) anon442_Then_correct) (=> (= (ControlFlow 0 311) 303) anon442_Else_correct))))))
(let ((anon441_Then_correct  (=> (and (> takeTransfer@2 0.0) (= neededTransfer@4 (- FullPerm takeTransfer@2))) (=> (and (and (and (= Used_3Mask@0 (MapType0Store ZeroMask crt@0 val (real_2_U (+ (U_2_real (MapType0Select ZeroMask crt@0 val)) takeTransfer@2)))) (= b_6@1  (and b_6@0 (state Used_3Heap@0 Used_3Mask@0)))) (and (= b_6@2  (and b_6@1 (= (U_2_int (MapType1Select Ops_3Heap@2 crt@0 val)) (U_2_int (MapType1Select Used_3Heap@0 crt@0 val))))) (= Ops_3Mask@5 (MapType0Store Ops_3Mask@4 crt@0 val (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@4 crt@0 val)) takeTransfer@2)))))) (and (and (= neededTransfer@5 neededTransfer@4) (= Ops_3Mask@6 Ops_3Mask@5)) (and (= Used_3Mask@1 Used_3Mask@0) (= b_6@3 b_6@2)))) (and (=> (= (ControlFlow 0 310) 308) anon442_Then_correct) (=> (= (ControlFlow 0 310) 303) anon442_Else_correct))))))
(let ((anon440_Else_correct  (=> (and (< maskTransfer@2 FullPerm) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 313) 310) anon441_Then_correct) (=> (= (ControlFlow 0 313) 311) anon441_Else_correct)))))
(let ((anon440_Then_correct  (=> (and (<= FullPerm maskTransfer@2) (= takeTransfer@2 FullPerm)) (and (=> (= (ControlFlow 0 312) 310) anon441_Then_correct) (=> (= (ControlFlow 0 312) 311) anon441_Else_correct)))))
(let ((anon439_Then_correct  (=> (and (and (and (and b_5@9 b_6@0) true) (> FullPerm 0.0)) (= maskTransfer@2 (U_2_real (MapType0Select Ops_3Mask@4 crt@0 val)))) (and (=> (= (ControlFlow 0 314) 312) anon440_Then_correct) (=> (= (ControlFlow 0 314) 313) anon440_Else_correct)))))
(let ((anon439_Else_correct  (=> (not (and (and (and b_5@9 b_6@0) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@5 FullPerm) (= Ops_3Mask@6 Ops_3Mask@4)) (and (= Used_3Mask@1 ZeroMask) (= b_6@3 b_6@0))) (and (=> (= (ControlFlow 0 309) 308) anon442_Then_correct) (=> (= (ControlFlow 0 309) 303) anon442_Else_correct))))))
(let ((anon438_Then_correct  (=> b_5@9 (=> (and (= b_6@0  (and b_6 (state Used_3Heap@0 ZeroMask))) (= initNeededTransfer@1 (+ (U_2_real (MapType0Select ZeroMask crt@0 val)) FullPerm))) (and (=> (= (ControlFlow 0 315) (- 0 316)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 315) 314) anon439_Then_correct) (=> (= (ControlFlow 0 315) 309) anon439_Else_correct))))))))
(let ((anon438_Else_correct  (=> (and (not b_5@9) (= b_5@24 b_5@9)) (=> (and (and (= Ops_3Heap@10 Ops_3Heap@2) (= Heap@31 Heap@23)) (and (= Ops_3Mask@13 Ops_3Mask@4) (= Mask@52 Mask@44))) (and (=> (= (ControlFlow 0 255) 254) anon462_Then_correct) (=> (= (ControlFlow 0 255) 193) anon462_Else_correct))))))
(let ((anon154_correct  (=> (and (= b_5@8  (and b_5@7 (state Ops_3Heap@2 Ops_3Mask@4))) (= b_5@9  (and b_5@8 (state Ops_3Heap@2 Ops_3Mask@4)))) (and (=> (= (ControlFlow 0 317) 315) anon438_Then_correct) (=> (= (ControlFlow 0 317) 255) anon438_Else_correct)))))
(let ((anon153_correct  (=> (= b_5@6  (and b_5@5 (|Seq#Equal| (elems Ops_3Heap@1 nxt@1) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@2)))) (=> (and (and (= b_5@7 b_5@6) (= Ops_3Mask@4 Ops_3Mask@3)) (and (= Ops_3Heap@2 Ops_3Heap@1) (= (ControlFlow 0 320) 317))) anon154_correct))))
(let ((anon152_correct  (=> (and (= Ops_3Mask@2 (MapType0Store Ops_3Mask@1 null (List nxt@1) (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@1 null (List nxt@1))) FullPerm)))) (= b_5@4  (and b_5@3 (IdenticalOnKnownLocations Ops_3Heap@0 ExhaleHeap@10 Ops_3Mask@2)))) (=> (and (and (= Ops_3Heap@1 ExhaleHeap@10) (= b_5@5 false)) (and (= Ops_3Mask@3 Ops_3Mask@2) (= (ControlFlow 0 323) 320))) anon153_correct))))
(let ((anon437_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 326) 323)) anon152_correct)))
(let ((anon437_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 324) (- 0 325)) (<= FullPerm (U_2_real (MapType0Select Ops_3Mask@1 null (List nxt@1))))) (=> (<= FullPerm (U_2_real (MapType0Select Ops_3Mask@1 null (List nxt@1)))) (=> (= (ControlFlow 0 324) 323) anon152_correct))))))
(let ((anon436_Else_correct  (=> (and (and (= Ops_3Heap@1 Ops_3Heap@0) (= b_5@5 b_5@3)) (and (= Ops_3Mask@3 Ops_3Mask@1) (= (ControlFlow 0 322) 320))) anon153_correct)))
(let ((anon435_Then_correct  (=> b_5@3 (and (and (=> (= (ControlFlow 0 327) 322) anon436_Else_correct) (=> (= (ControlFlow 0 327) 324) anon437_Then_correct)) (=> (= (ControlFlow 0 327) 326) anon437_Else_correct)))))
(let ((anon435_Else_correct  (=> (not b_5@3) (=> (and (and (= Ops_3Heap@1 Ops_3Heap@0) (= b_5@5 b_5@3)) (and (= Ops_3Mask@3 Ops_3Mask@1) (= (ControlFlow 0 321) 320))) anon153_correct))))
(let ((anon434_Then_correct  (=> (and b_5@2 (= b_5@3  (and b_5@2 (state Ops_3Heap@0 Ops_3Mask@1)))) (and (=> (= (ControlFlow 0 328) 327) anon435_Then_correct) (=> (= (ControlFlow 0 328) 321) anon435_Else_correct)))))
(let ((anon434_Else_correct  (=> (not b_5@2) (=> (and (and (= b_5@7 b_5@2) (= Ops_3Mask@4 Ops_3Mask@1)) (and (= Ops_3Heap@2 Ops_3Heap@0) (= (ControlFlow 0 319) 317))) anon154_correct))))
(let ((anon433_Else_correct  (=> (not b_5@0) (=> (and (= Ops_3Mask@1 ZeroMask) (= b_5@2 b_5@0)) (and (=> (= (ControlFlow 0 330) 328) anon434_Then_correct) (=> (= (ControlFlow 0 330) 319) anon434_Else_correct))))))
(let ((anon433_Then_correct  (=> b_5@0 (=> (and (and (= Ops_3Mask@0 (MapType0Store ZeroMask null (List nxt@1) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List nxt@1))) FullPerm)))) (= b_5@1  (and b_5@0 (state Ops_3Heap@0 Ops_3Mask@0)))) (and (= Ops_3Mask@1 Ops_3Mask@0) (= b_5@2 b_5@1))) (and (=> (= (ControlFlow 0 329) 328) anon434_Then_correct) (=> (= (ControlFlow 0 329) 319) anon434_Else_correct))))))
(let ((anon432_Then_correct  (=> b_5@0 (and (=> (= (ControlFlow 0 331) 329) anon433_Then_correct) (=> (= (ControlFlow 0 331) 330) anon433_Else_correct)))))
(let ((anon432_Else_correct  (=> (not b_5@0) (=> (and (and (= b_5@7 b_5@0) (= Ops_3Mask@4 ZeroMask)) (and (= Ops_3Heap@2 Ops_3Heap@0) (= (ControlFlow 0 318) 317))) anon154_correct))))
(let ((anon144_correct  (=> (state Heap@23 Mask@44) (=> (and (state Heap@23 Mask@44) (state Heap@23 Mask@44)) (and (=> (= (ControlFlow 0 332) (- 0 333)) (HasDirectPerm Mask@44 nxt@1 next)) (=> (HasDirectPerm Mask@44 nxt@1 next) (=> (and (= nxt@2 (MapType1Select Heap@23 nxt@1 next)) (state Heap@23 Mask@44)) (=> (and (and (= i@1 (+ i@0 1)) (state Heap@23 Mask@44)) (and (= b_5@0  (and b_5 (state Ops_3Heap@0 ZeroMask))) (= b_4@0  (and b_4 (state Used_2Heap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 332) 331) anon432_Then_correct) (=> (= (ControlFlow 0 332) 318) anon432_Else_correct))))))))))
(let ((anon431_Else_correct  (=> (= (MapType1Select Heap@23 nxt@1 next) null) (=> (and (= Mask@44 Mask@42) (= (ControlFlow 0 335) 332)) anon144_correct))))
(let ((anon431_Then_correct  (=> (and (not (= (MapType1Select Heap@23 nxt@1 next) null)) (= Mask@43 (MapType0Store Mask@42 null (List (MapType1Select Heap@23 nxt@1 next)) (real_2_U (+ (U_2_real (MapType0Select Mask@42 null (List (MapType1Select Heap@23 nxt@1 next)))) FullPerm))))) (=> (and (and (InsidePredicate (List nxt@1) (MapType1Select Heap@23 null (List nxt@1)) (List (MapType1Select Heap@23 nxt@1 next)) (MapType1Select Heap@23 null (List (MapType1Select Heap@23 nxt@1 next)))) (state Heap@23 Mask@43)) (and (= Mask@44 Mask@43) (= (ControlFlow 0 334) 332))) anon144_correct))))
(let ((anon142_correct  (=> (and (not (= nxt@1 null)) (= Mask@41 (MapType0Store Mask@40 nxt@1 val (real_2_U (+ (U_2_real (MapType0Select Mask@40 nxt@1 val)) FullPerm))))) (=> (and (and (state Heap@23 Mask@41) (not (= nxt@1 null))) (and (= Mask@42 (MapType0Store Mask@41 nxt@1 next (real_2_U (+ (U_2_real (MapType0Select Mask@41 nxt@1 next)) FullPerm)))) (state Heap@23 Mask@42))) (and (=> (= (ControlFlow 0 336) 334) anon431_Then_correct) (=> (= (ControlFlow 0 336) 335) anon431_Else_correct))))))
(let ((anon430_Else_correct  (=> (HasDirectPerm Mask@40 null (List nxt@1)) (=> (and (= Heap@23 ExhaleHeap@1) (= (ControlFlow 0 338) 336)) anon142_correct))))
(let ((anon430_Then_correct  (=> (and (and (not (HasDirectPerm Mask@40 null (List nxt@1))) (= Heap@22 (MapType1Store ExhaleHeap@1 null (List nxt@1) newVersion@1))) (and (= Heap@23 Heap@22) (= (ControlFlow 0 337) 336))) anon142_correct)))
(let ((anon140_correct  (=> (= Mask@40 (MapType0Store Mask@39 null (List nxt@1) (real_2_U (- (U_2_real (MapType0Select Mask@39 null (List nxt@1))) FullPerm)))) (and (=> (= (ControlFlow 0 339) 337) anon430_Then_correct) (=> (= (ControlFlow 0 339) 338) anon430_Else_correct)))))
(let ((anon429_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 342) 339)) anon140_correct)))
(let ((anon429_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 340) (- 0 341)) (<= FullPerm (U_2_real (MapType0Select Mask@39 null (List nxt@1))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@39 null (List nxt@1)))) (=> (= (ControlFlow 0 340) 339) anon140_correct))))))
(let ((anon427_Else_correct  (=> (and (and (= crtElems@2 (elems ExhaleHeap@1 nxt@1)) (state ExhaleHeap@1 Mask@39)) (and (|List#trigger| ExhaleHeap@1 (List nxt@1)) (= (MapType1Select ExhaleHeap@1 null (List nxt@1)) (CombineFrames (FrameFragment (MapType1Select ExhaleHeap@1 nxt@1 val)) (CombineFrames (FrameFragment (MapType1Select ExhaleHeap@1 nxt@1 next)) (FrameFragment (ite (not (= (MapType1Select ExhaleHeap@1 nxt@1 next) null)) (MapType1Select ExhaleHeap@1 null (List (MapType1Select ExhaleHeap@1 nxt@1 next))) EmptyFrame))))))) (and (=> (= (ControlFlow 0 343) 340) anon429_Then_correct) (=> (= (ControlFlow 0 343) 342) anon429_Else_correct)))))
(let ((anon137_correct true))
(let ((anon428_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 137) 134)) anon137_correct)))
(let ((anon428_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 135) (- 0 136)) (<= FullPerm (U_2_real (MapType0Select Mask@39 null (List nxt@1))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@39 null (List nxt@1)))) (=> (= (ControlFlow 0 135) 134) anon137_correct))))))
(let ((anon425_Else_correct  (and (=> (= (ControlFlow 0 344) (- 0 346)) (< 0 (|Seq#Length| (elems ExhaleHeap@1 nxt@1)))) (=> (< 0 (|Seq#Length| (elems ExhaleHeap@1 nxt@1))) (and (=> (= (ControlFlow 0 344) (- 0 345)) (= (U_2_int (|Seq#Index| (elems Heap@@18 xs@@13) (+ i@0 1))) (U_2_int (|Seq#Index| (elems ExhaleHeap@1 nxt@1) 0)))) (=> (= (U_2_int (|Seq#Index| (elems Heap@@18 xs@@13) (+ i@0 1))) (U_2_int (|Seq#Index| (elems ExhaleHeap@1 nxt@1) 0))) (=> (and (and (state ExhaleHeap@1 Mask@39) (state ExhaleHeap@1 Mask@39)) (and (state ExhaleHeap@1 Mask@39) (state ExhaleHeap@1 Mask@39))) (and (and (=> (= (ControlFlow 0 344) 343) anon427_Else_correct) (=> (= (ControlFlow 0 344) 135) anon428_Then_correct)) (=> (= (ControlFlow 0 344) 137) anon428_Else_correct)))))))))
(let ((anon133_correct true))
(let ((anon426_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 133) 130)) anon133_correct)))
(let ((anon426_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 131) (- 0 132)) (<= FullPerm (U_2_real (MapType0Select Mask@39 null (List nxt@1))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@39 null (List nxt@1)))) (=> (= (ControlFlow 0 131) 130) anon133_correct))))))
(let ((anon423_Else_correct  (and (=> (= (ControlFlow 0 347) (- 0 349)) (>= (+ i@0 1) 0)) (=> (>= (+ i@0 1) 0) (and (=> (= (ControlFlow 0 347) (- 0 348)) (< (+ i@0 1) (|Seq#Length| (elems Heap@@18 xs@@13)))) (=> (< (+ i@0 1) (|Seq#Length| (elems Heap@@18 xs@@13))) (and (and (=> (= (ControlFlow 0 347) 344) anon425_Else_correct) (=> (= (ControlFlow 0 347) 131) anon426_Then_correct)) (=> (= (ControlFlow 0 347) 133) anon426_Else_correct))))))))
(let ((anon129_correct true))
(let ((anon424_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 129) 126)) anon129_correct)))
(let ((anon424_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 127) (- 0 128)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 127) 126) anon129_correct))))))
(let ((anon126_correct  (=> (and (and (not (= nxt@1 null)) (< (head ExhaleHeap@1 nxt@1) x@@11)) (and (state ExhaleHeap@1 Mask@39) (U_2_bool (MapType1Select ExhaleHeap@1 prev $allocated)))) (and (and (=> (= (ControlFlow 0 350) 347) anon423_Else_correct) (=> (= (ControlFlow 0 350) 127) anon424_Then_correct)) (=> (= (ControlFlow 0 350) 129) anon424_Else_correct)))))
(let ((anon420_Then_correct  (=> (not (= nxt@1 null)) (and (and (=> (= (ControlFlow 0 356) 350) anon126_correct) (=> (= (ControlFlow 0 356) 353) anon422_Then_correct)) (=> (= (ControlFlow 0 356) 355) anon422_Else_correct)))))
(let ((anon420_Else_correct  (=> (and (= nxt@1 null) (= (ControlFlow 0 351) 350)) anon126_correct)))
(let ((anon121_correct  (=> (and (state ExhaleHeap@1 Mask@38) (= Mask@39 (MapType0Store Mask@38 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (real_2_U (+ (U_2_real (MapType0Select Mask@38 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) FullPerm))))) (=> (and (and (state ExhaleHeap@1 Mask@39) (state ExhaleHeap@1 Mask@39)) (and (|Seq#Equal| crtElems@1 (|Seq#Append| (|Seq#Singleton| (MapType1Select ExhaleHeap@1 crt@0 val)) (ite (= (MapType1Select ExhaleHeap@1 crt@0 next) null) (|Seq#Empty| intType) (elems ExhaleHeap@1 (MapType1Select ExhaleHeap@1 crt@0 next))))) (state ExhaleHeap@1 Mask@39))) (and (=> (= (ControlFlow 0 357) 356) anon420_Then_correct) (=> (= (ControlFlow 0 357) 351) anon420_Else_correct))))))
(let ((anon419_Else_correct  (=> (= nxt@1 null) (=> (and (= Mask@38 Mask@36) (= (ControlFlow 0 359) 357)) anon121_correct))))
(let ((anon419_Then_correct  (=> (not (= nxt@1 null)) (=> (and (= Mask@37 (MapType0Store Mask@36 null (List nxt@1) (real_2_U (+ (U_2_real (MapType0Select Mask@36 null (List nxt@1))) FullPerm)))) (state ExhaleHeap@1 Mask@37)) (=> (and (and (state ExhaleHeap@1 Mask@37) (|Seq#Equal| (elems ExhaleHeap@1 nxt@1) (|Seq#Drop| (elems Heap@@18 xs@@13) (+ i@0 1)))) (and (= Mask@38 Mask@37) (= (ControlFlow 0 358) 357))) anon121_correct)))))
(let ((anon119_correct  (=> (not (= crt@0 null)) (=> (and (and (and (= Mask@35 (MapType0Store ZeroMask crt@0 val (real_2_U (+ (U_2_real (MapType0Select ZeroMask crt@0 val)) FullPerm)))) (state ExhaleHeap@1 Mask@35)) (and (not (= crt@0 null)) (= Mask@36 (MapType0Store Mask@35 crt@0 next (real_2_U (+ (U_2_real (MapType0Select Mask@35 crt@0 next)) FullPerm)))))) (and (and (state ExhaleHeap@1 Mask@36) (= nxt@1 (MapType1Select ExhaleHeap@1 crt@0 next))) (and (state ExhaleHeap@1 Mask@36) (= (U_2_int (MapType1Select ExhaleHeap@1 crt@0 val)) (U_2_int (|Seq#Index| (elems Heap@@18 xs@@13) i@0)))))) (and (=> (= (ControlFlow 0 360) 358) anon419_Then_correct) (=> (= (ControlFlow 0 360) 359) anon419_Else_correct))))))
(let ((anon418_Else_correct  (=> (and (not (= nxt@1 null)) (= (ControlFlow 0 362) 360)) anon119_correct)))
(let ((anon418_Then_correct  (=> (and (and (= nxt@1 null) (state ExhaleHeap@1 ZeroMask)) (and (= i@0 (- (|Seq#Length| (elems Heap@@18 xs@@13)) 1)) (= (ControlFlow 0 361) 360))) anon119_correct)))
(let ((anon417_Then_correct  (=> (and (and (state ExhaleHeap@1 ZeroMask) (<= 0 i@0)) (and (state ExhaleHeap@1 ZeroMask) (< i@0 (|Seq#Length| (elems Heap@@18 xs@@13))))) (and (=> (= (ControlFlow 0 363) 361) anon418_Then_correct) (=> (= (ControlFlow 0 363) 362) anon418_Else_correct)))))
(let ((anon298_correct true))
(let ((anon513_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 116) 113)) anon298_correct)))
(let ((anon513_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 114) (- 0 115)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 114) 113) anon298_correct))))))
(let ((anon294_correct true))
(let ((anon511_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 112) 109)) anon294_correct)))
(let ((anon511_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 110) (- 0 111)) (<= FullPerm (U_2_real (MapType0Select WandDefRHSMask@2 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select WandDefRHSMask@2 null (List xs@@13)))) (=> (= (ControlFlow 0 110) 109) anon294_correct))))))
(let ((anon512_Else_correct true))
(let ((anon508_Else_correct  (=> (and (|Seq#Equal| (elems WandDefLHSHeap@0 crt@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1)) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (=> (and (and (state WandDefLHSHeap@0 WandDefLHSMask@0) (= WandDefRHSMask@2 (MapType0Store ZeroMask null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List xs@@13))) FullPerm))))) (and (state WandDefRHSHeap@1 WandDefRHSMask@2) (state WandDefRHSHeap@1 WandDefRHSMask@2))) (and (and (and (and (=> (= (ControlFlow 0 117) 108) anon512_Else_correct) (=> (= (ControlFlow 0 117) 114) anon513_Then_correct)) (=> (= (ControlFlow 0 117) 116) anon513_Else_correct)) (=> (= (ControlFlow 0 117) 110) anon511_Then_correct)) (=> (= (ControlFlow 0 117) 112) anon511_Else_correct))))))
(let ((anon290_correct true))
(let ((anon509_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 107) 104)) anon290_correct)))
(let ((anon509_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 105) (- 0 106)) (<= FullPerm (U_2_real (MapType0Select WandDefLHSMask@0 null (List crt@0))))) (=> (<= FullPerm (U_2_real (MapType0Select WandDefLHSMask@0 null (List crt@0)))) (=> (= (ControlFlow 0 105) 104) anon290_correct))))))
(let ((anon507_Then_correct  (=> (= WandDefLHSMask@0 (MapType0Store ZeroMask null (List crt@0) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List crt@0))) FullPerm)))) (=> (and (state WandDefLHSHeap@0 WandDefLHSMask@0) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (and (and (=> (= (ControlFlow 0 118) 117) anon508_Else_correct) (=> (= (ControlFlow 0 118) 105) anon509_Then_correct)) (=> (= (ControlFlow 0 118) 107) anon509_Else_correct))))))
(let ((anon344_correct true))
(let ((anon536_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 52) 49)) anon344_correct)))
(let ((anon536_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 50) (- 0 51)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 50) 49) anon344_correct))))))
(let ((anon340_correct true))
(let ((anon534_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 48) 45)) anon340_correct)))
(let ((anon534_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 46) (- 0 47)) (<= FullPerm (U_2_real (MapType0Select WandDefRHSMask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select WandDefRHSMask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 46) 45) anon340_correct))))))
(let ((anon535_Else_correct true))
(let ((anon531_Else_correct  (=> (and (|Seq#Equal| (elems WandDefLHSHeap@1 crt@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1)) (state WandDefLHSHeap@1 WandDefLHSMask@1)) (=> (and (and (state WandDefLHSHeap@1 WandDefLHSMask@1) (= WandDefRHSMask@0 (MapType0Store ZeroMask null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List xs@@13))) FullPerm))))) (and (state WandDefRHSHeap@0 WandDefRHSMask@0) (state WandDefRHSHeap@0 WandDefRHSMask@0))) (and (and (and (and (=> (= (ControlFlow 0 53) 44) anon535_Else_correct) (=> (= (ControlFlow 0 53) 50) anon536_Then_correct)) (=> (= (ControlFlow 0 53) 52) anon536_Else_correct)) (=> (= (ControlFlow 0 53) 46) anon534_Then_correct)) (=> (= (ControlFlow 0 53) 48) anon534_Else_correct))))))
(let ((anon336_correct true))
(let ((anon532_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 43) 40)) anon336_correct)))
(let ((anon532_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 41) (- 0 42)) (<= FullPerm (U_2_real (MapType0Select WandDefLHSMask@1 null (List crt@0))))) (=> (<= FullPerm (U_2_real (MapType0Select WandDefLHSMask@1 null (List crt@0)))) (=> (= (ControlFlow 0 41) 40) anon336_correct))))))
(let ((anon530_Then_correct  (=> (= WandDefLHSMask@1 (MapType0Store ZeroMask null (List crt@0) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List crt@0))) FullPerm)))) (=> (and (state WandDefLHSHeap@1 WandDefLHSMask@1) (state WandDefLHSHeap@1 WandDefLHSMask@1)) (and (and (=> (= (ControlFlow 0 54) 53) anon531_Else_correct) (=> (= (ControlFlow 0 54) 41) anon532_Then_correct)) (=> (= (ControlFlow 0 54) 43) anon532_Else_correct))))))
(let ((anon356_correct  (=> (and (= Mask@34 (MapType0Store Mask@33 null (List xs@@13) (real_2_U (- (U_2_real (MapType0Select Mask@33 null (List xs@@13))) FullPerm)))) (= (ControlFlow 0 22) (- 0 21))) (|Seq#Equal| (elems ExhaleHeap@2 xs@@13) (|Seq#Append| (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) (+ i@0 1)) 0) (|Seq#Singleton| (int_2_U x@@11))) (|Seq#Drop| (elems Heap@@18 xs@@13) (+ i@0 1)))))))
(let ((anon541_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 25) 22)) anon356_correct)))
(let ((anon541_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 23) (- 0 24)) (<= FullPerm (U_2_real (MapType0Select Mask@33 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@33 null (List xs@@13)))) (=> (= (ControlFlow 0 23) 22) anon356_correct))))))
(let ((anon354_correct  (=> (= Mask@32 (MapType0Store Mask@31 null (List crt@0) (real_2_U (- (U_2_real (MapType0Select Mask@31 null (List crt@0))) FullPerm)))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (|Seq#Equal| (elems Heap@21 crt@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (=> (|Seq#Equal| (elems Heap@21 crt@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1)) (=> (state Heap@21 Mask@32) (=> (and (and (and (= Mask@33 (MapType0Store Mask@32 null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select Mask@32 null (List xs@@13))) FullPerm)))) (state Heap@21 Mask@33)) (and (state Heap@21 Mask@33) (|Seq#Equal| (elems Heap@21 xs@@13) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) (and (and (state Heap@21 Mask@33) (IdenticalOnKnownLocations Heap@21 ExhaleHeap@2 Mask@33)) (and (state ExhaleHeap@2 Mask@33) (state ExhaleHeap@2 Mask@33)))) (and (=> (= (ControlFlow 0 26) 23) anon541_Then_correct) (=> (= (ControlFlow 0 26) 25) anon541_Else_correct)))))))))
(let ((anon540_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 30) 26)) anon354_correct)))
(let ((anon540_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 28) (- 0 29)) (<= FullPerm (U_2_real (MapType0Select Mask@31 null (List crt@0))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@31 null (List crt@0)))) (=> (= (ControlFlow 0 28) 26) anon354_correct))))))
(let ((anon538_Else_correct  (and (=> (= (ControlFlow 0 31) (- 0 33)) (|Seq#Equal| (elems Heap@21 crt@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (=> (|Seq#Equal| (elems Heap@21 crt@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1)) (=> (state Heap@21 Mask@30) (and (=> (= (ControlFlow 0 31) (- 0 32)) (<= FullPerm (U_2_real (MapType0Select Mask@30 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@30 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1)))))) (=> (and (= Mask@31 (MapType0Store Mask@30 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (real_2_U (- (U_2_real (MapType0Select Mask@30 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) FullPerm)))) (state Heap@21 Mask@31)) (and (=> (= (ControlFlow 0 31) 28) anon540_Then_correct) (=> (= (ControlFlow 0 31) 30) anon540_Else_correct))))))))))
(let ((anon351_correct true))
(let ((anon539_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 20) 17)) anon351_correct)))
(let ((anon539_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (<= FullPerm (U_2_real (MapType0Select Mask@30 null (List crt@0))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@30 null (List crt@0)))) (=> (= (ControlFlow 0 18) 17) anon351_correct))))))
(let ((anon348_correct  (=> (= AssertMask@2 (MapType0Store Mask@30 null (List crt@0) (real_2_U (- (U_2_real (MapType0Select Mask@30 null (List crt@0))) FullPerm)))) (and (and (=> (= (ControlFlow 0 34) 31) anon538_Else_correct) (=> (= (ControlFlow 0 34) 18) anon539_Then_correct)) (=> (= (ControlFlow 0 34) 20) anon539_Else_correct)))))
(let ((anon537_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 37) 34)) anon348_correct)))
(let ((anon537_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 35) (- 0 36)) (<= FullPerm (U_2_real (MapType0Select Mask@30 null (List crt@0))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@30 null (List crt@0)))) (=> (= (ControlFlow 0 35) 34) anon348_correct))))))
(let ((anon530_Else_correct  (and (=> (= (ControlFlow 0 38) (- 0 39)) (<= FullPerm (U_2_real (MapType0Select Mask@30 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@30 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1)))))) (=> (and (= AssertMask@1 (MapType0Store Mask@30 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (real_2_U (- (U_2_real (MapType0Select Mask@30 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) FullPerm)))) (state Heap@21 Mask@30)) (and (=> (= (ControlFlow 0 38) 35) anon537_Then_correct) (=> (= (ControlFlow 0 38) 37) anon537_Else_correct)))))))
(let ((anon332_correct  (=> (and (state Heap@21 Mask@30) (state Heap@21 Mask@30)) (and (=> (= (ControlFlow 0 55) 54) anon530_Then_correct) (=> (= (ControlFlow 0 55) 38) anon530_Else_correct)))))
(let ((anon529_Else_correct  (=> (= (MapType1Select Heap@19 crt@0 next) null) (=> (and (= Heap@21 Heap@19) (= (ControlFlow 0 57) 55)) anon332_correct))))
(let ((anon529_Then_correct  (=> (not (= (MapType1Select Heap@19 crt@0 next) null)) (=> (and (and (forall ((o_11 T@U) (f_15 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_15))))
(let ((A@@16 (FieldTypeInv0 (type f_15))))
 (=> (and (and (= (type o_11) RefType) (= (type f_15) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType0Select (MapType1Select Heap@19 null (|List#sm| crt@0)) o_11 f_15)) (U_2_bool (MapType0Select (MapType1Select Heap@19 null (|List#sm| (MapType1Select Heap@19 crt@0 next))) o_11 f_15)))) (U_2_bool (MapType0Select newPMask@2 o_11 f_15)))))
 :qid |stdinbpl.2875:29|
 :skolemid |87|
 :pattern ( (MapType0Select newPMask@2 o_11 f_15))
)) (= Heap@20 (MapType1Store Heap@19 null (|List#sm| crt@0) newPMask@2))) (and (= Heap@21 Heap@20) (= (ControlFlow 0 56) 55))) anon332_correct))))
(let ((anon330_correct  (=> (and (= Heap@18 (MapType1Store Heap@17 null (|List#sm| crt@0) (MapType0Store (MapType1Select Heap@17 null (|List#sm| crt@0)) crt@0 val (bool_2_U true)))) (= Heap@19 (MapType1Store Heap@18 null (|List#sm| crt@0) (MapType0Store (MapType1Select Heap@18 null (|List#sm| crt@0)) crt@0 next (bool_2_U true))))) (and (=> (= (ControlFlow 0 58) 56) anon529_Then_correct) (=> (= (ControlFlow 0 58) 57) anon529_Else_correct)))))
(let ((anon528_Else_correct  (=> (HasDirectPerm Mask@30 null (List crt@0)) (=> (and (= Heap@17 Heap@14) (= (ControlFlow 0 60) 58)) anon330_correct))))
(let ((anon528_Then_correct  (=> (not (HasDirectPerm Mask@30 null (List crt@0))) (=> (and (and (= Heap@15 (MapType1Store Heap@14 null (|List#sm| crt@0) ZeroPMask)) (= Heap@16 (MapType1Store Heap@15 null (List crt@0) freshVersion@1))) (and (= Heap@17 Heap@16) (= (ControlFlow 0 59) 58))) anon330_correct))))
(let ((anon328_correct  (=> (= Mask@30 (MapType0Store Mask@29 null (List crt@0) (real_2_U (+ (U_2_real (MapType0Select Mask@29 null (List crt@0))) FullPerm)))) (=> (and (and (state Heap@14 Mask@30) (state Heap@14 Mask@30)) (and (|List#trigger| Heap@14 (List crt@0)) (= (MapType1Select Heap@14 null (List crt@0)) (CombineFrames (FrameFragment (MapType1Select Heap@14 crt@0 val)) (CombineFrames (FrameFragment (MapType1Select Heap@14 crt@0 next)) (FrameFragment (ite (not (= (MapType1Select Heap@14 crt@0 next) null)) (MapType1Select Heap@14 null (List (MapType1Select Heap@14 crt@0 next))) EmptyFrame))))))) (and (=> (= (ControlFlow 0 61) 59) anon528_Then_correct) (=> (= (ControlFlow 0 61) 60) anon528_Else_correct))))))
(let ((anon327_correct  (=> (and (and (= Mask@28 (MapType0Store Mask@27 null (List (MapType1Select Heap@14 crt@0 next)) (real_2_U (- (U_2_real (MapType0Select Mask@27 null (List (MapType1Select Heap@14 crt@0 next)))) FullPerm)))) (InsidePredicate (List crt@0) (MapType1Select Heap@14 null (List crt@0)) (List (MapType1Select Heap@14 crt@0 next)) (MapType1Select Heap@14 null (List (MapType1Select Heap@14 crt@0 next))))) (and (= Mask@29 Mask@28) (= (ControlFlow 0 63) 61))) anon328_correct)))
(let ((anon527_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 66) 63)) anon327_correct)))
(let ((anon527_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 64) (- 0 65)) (<= FullPerm (U_2_real (MapType0Select Mask@27 null (List (MapType1Select Heap@14 crt@0 next)))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@27 null (List (MapType1Select Heap@14 crt@0 next))))) (=> (= (ControlFlow 0 64) 63) anon327_correct))))))
(let ((anon526_Then_correct  (=> (not (= (MapType1Select Heap@14 crt@0 next) null)) (and (=> (= (ControlFlow 0 67) 64) anon527_Then_correct) (=> (= (ControlFlow 0 67) 66) anon527_Else_correct)))))
(let ((anon526_Else_correct  (=> (= (MapType1Select Heap@14 crt@0 next) null) (=> (and (= Mask@29 Mask@27) (= (ControlFlow 0 62) 61)) anon328_correct))))
(let ((anon324_correct  (=> (= Mask@27 (MapType0Store Mask@26 crt@0 next (real_2_U (- (U_2_real (MapType0Select Mask@26 crt@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 68) 67) anon526_Then_correct) (=> (= (ControlFlow 0 68) 62) anon526_Else_correct)))))
(let ((anon525_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 71) 68)) anon324_correct)))
(let ((anon525_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 69) (- 0 70)) (<= FullPerm (U_2_real (MapType0Select Mask@26 crt@0 next)))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@26 crt@0 next))) (=> (= (ControlFlow 0 69) 68) anon324_correct))))))
(let ((anon322_correct  (=> (= Mask@26 (MapType0Store Mask@25 crt@0 val (real_2_U (- (U_2_real (MapType0Select Mask@25 crt@0 val)) FullPerm)))) (and (=> (= (ControlFlow 0 72) 69) anon525_Then_correct) (=> (= (ControlFlow 0 72) 71) anon525_Else_correct)))))
(let ((anon524_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 75) 72)) anon322_correct)))
(let ((anon524_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 73) (- 0 74)) (<= FullPerm (U_2_real (MapType0Select Mask@25 crt@0 val)))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@25 crt@0 val))) (=> (= (ControlFlow 0 73) 72) anon322_correct))))))
(let ((anon522_Else_correct  (and (=> (= (ControlFlow 0 76) (- 0 78)) (|Seq#Equal| (elems Heap@13 freshObj@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) (|Seq#Drop| (elems Heap@@18 xs@@13) (+ i@0 1))))) (=> (|Seq#Equal| (elems Heap@13 freshObj@0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) (|Seq#Drop| (elems Heap@@18 xs@@13) (+ i@0 1)))) (=> (state Heap@13 Mask@25) (and (=> (= (ControlFlow 0 76) (- 0 77)) (= FullPerm (U_2_real (MapType0Select Mask@25 crt@0 next)))) (=> (= FullPerm (U_2_real (MapType0Select Mask@25 crt@0 next))) (=> (and (= Heap@14 (MapType1Store Heap@13 crt@0 next freshObj@0)) (state Heap@14 Mask@25)) (and (=> (= (ControlFlow 0 76) 73) anon524_Then_correct) (=> (= (ControlFlow 0 76) 75) anon524_Else_correct))))))))))
(let ((anon319_correct true))
(let ((anon523_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 16) 13)) anon319_correct)))
(let ((anon523_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 14) (- 0 15)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 14) 13) anon319_correct))))))
(let ((anon315_correct true))
(let ((anon521_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 12) 9)) anon315_correct)))
(let ((anon521_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 10) (- 0 11)) (<= FullPerm (U_2_real (MapType0Select Mask@25 null (List freshObj@0))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@25 null (List freshObj@0)))) (=> (= (ControlFlow 0 10) 9) anon315_correct))))))
(let ((anon312_correct  (=> (and (state Heap@13 Mask@25) (state Heap@13 Mask@25)) (and (and (and (and (=> (= (ControlFlow 0 79) 76) anon522_Else_correct) (=> (= (ControlFlow 0 79) 14) anon523_Then_correct)) (=> (= (ControlFlow 0 79) 16) anon523_Else_correct)) (=> (= (ControlFlow 0 79) 10) anon521_Then_correct)) (=> (= (ControlFlow 0 79) 12) anon521_Else_correct)))))
(let ((anon519_Else_correct  (=> (= (MapType1Select Heap@11 freshObj@0 next) null) (=> (and (= Heap@13 Heap@11) (= (ControlFlow 0 81) 79)) anon312_correct))))
(let ((anon519_Then_correct  (=> (not (= (MapType1Select Heap@11 freshObj@0 next) null)) (=> (and (and (forall ((o_10 T@U) (f_14 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_14))))
(let ((A@@17 (FieldTypeInv0 (type f_14))))
 (=> (and (and (= (type o_10) RefType) (= (type f_14) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType0Select (MapType1Select Heap@11 null (|List#sm| freshObj@0)) o_10 f_14)) (U_2_bool (MapType0Select (MapType1Select Heap@11 null (|List#sm| (MapType1Select Heap@11 freshObj@0 next))) o_10 f_14)))) (U_2_bool (MapType0Select newPMask@1 o_10 f_14)))))
 :qid |stdinbpl.2780:29|
 :skolemid |86|
 :pattern ( (MapType0Select newPMask@1 o_10 f_14))
)) (= Heap@12 (MapType1Store Heap@11 null (|List#sm| freshObj@0) newPMask@1))) (and (= Heap@13 Heap@12) (= (ControlFlow 0 80) 79))) anon312_correct))))
(let ((anon310_correct  (=> (and (= Heap@10 (MapType1Store Heap@9 null (|List#sm| freshObj@0) (MapType0Store (MapType1Select Heap@9 null (|List#sm| freshObj@0)) freshObj@0 val (bool_2_U true)))) (= Heap@11 (MapType1Store Heap@10 null (|List#sm| freshObj@0) (MapType0Store (MapType1Select Heap@10 null (|List#sm| freshObj@0)) freshObj@0 next (bool_2_U true))))) (and (=> (= (ControlFlow 0 82) 80) anon519_Then_correct) (=> (= (ControlFlow 0 82) 81) anon519_Else_correct)))))
(let ((anon518_Else_correct  (=> (HasDirectPerm Mask@25 null (List freshObj@0)) (=> (and (= Heap@9 Heap@6) (= (ControlFlow 0 84) 82)) anon310_correct))))
(let ((anon518_Then_correct  (=> (not (HasDirectPerm Mask@25 null (List freshObj@0))) (=> (and (and (= Heap@7 (MapType1Store Heap@6 null (|List#sm| freshObj@0) ZeroPMask)) (= Heap@8 (MapType1Store Heap@7 null (List freshObj@0) freshVersion@0))) (and (= Heap@9 Heap@8) (= (ControlFlow 0 83) 82))) anon310_correct))))
(let ((anon308_correct  (=> (= Mask@25 (MapType0Store Mask@24 null (List freshObj@0) (real_2_U (+ (U_2_real (MapType0Select Mask@24 null (List freshObj@0))) FullPerm)))) (=> (and (and (state Heap@6 Mask@25) (state Heap@6 Mask@25)) (and (|List#trigger| Heap@6 (List freshObj@0)) (= (MapType1Select Heap@6 null (List freshObj@0)) (CombineFrames (FrameFragment (MapType1Select Heap@6 freshObj@0 val)) (CombineFrames (FrameFragment (MapType1Select Heap@6 freshObj@0 next)) (FrameFragment (ite (not (= (MapType1Select Heap@6 freshObj@0 next) null)) (MapType1Select Heap@6 null (List (MapType1Select Heap@6 freshObj@0 next))) EmptyFrame))))))) (and (=> (= (ControlFlow 0 85) 83) anon518_Then_correct) (=> (= (ControlFlow 0 85) 84) anon518_Else_correct))))))
(let ((anon307_correct  (=> (and (and (= Mask@23 (MapType0Store Mask@22 null (List (MapType1Select Heap@6 freshObj@0 next)) (real_2_U (- (U_2_real (MapType0Select Mask@22 null (List (MapType1Select Heap@6 freshObj@0 next)))) FullPerm)))) (InsidePredicate (List freshObj@0) (MapType1Select Heap@6 null (List freshObj@0)) (List (MapType1Select Heap@6 freshObj@0 next)) (MapType1Select Heap@6 null (List (MapType1Select Heap@6 freshObj@0 next))))) (and (= Mask@24 Mask@23) (= (ControlFlow 0 87) 85))) anon308_correct)))
(let ((anon517_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 90) 87)) anon307_correct)))
(let ((anon517_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 88) (- 0 89)) (<= FullPerm (U_2_real (MapType0Select Mask@22 null (List (MapType1Select Heap@6 freshObj@0 next)))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@22 null (List (MapType1Select Heap@6 freshObj@0 next))))) (=> (= (ControlFlow 0 88) 87) anon307_correct))))))
(let ((anon516_Then_correct  (=> (not (= (MapType1Select Heap@6 freshObj@0 next) null)) (and (=> (= (ControlFlow 0 91) 88) anon517_Then_correct) (=> (= (ControlFlow 0 91) 90) anon517_Else_correct)))))
(let ((anon516_Else_correct  (=> (= (MapType1Select Heap@6 freshObj@0 next) null) (=> (and (= Mask@24 Mask@22) (= (ControlFlow 0 86) 85)) anon308_correct))))
(let ((anon304_correct  (=> (= Mask@22 (MapType0Store Mask@21 freshObj@0 next (real_2_U (- (U_2_real (MapType0Select Mask@21 freshObj@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 92) 91) anon516_Then_correct) (=> (= (ControlFlow 0 92) 86) anon516_Else_correct)))))
(let ((anon515_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 95) 92)) anon304_correct)))
(let ((anon515_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 93) (- 0 94)) (<= FullPerm (U_2_real (MapType0Select Mask@21 freshObj@0 next)))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@21 freshObj@0 next))) (=> (= (ControlFlow 0 93) 92) anon304_correct))))))
(let ((anon302_correct  (=> (= Mask@21 (MapType0Store Mask@20 freshObj@0 val (real_2_U (- (U_2_real (MapType0Select Mask@20 freshObj@0 val)) FullPerm)))) (and (=> (= (ControlFlow 0 96) 93) anon515_Then_correct) (=> (= (ControlFlow 0 96) 95) anon515_Else_correct)))))
(let ((anon514_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 99) 96)) anon302_correct)))
(let ((anon514_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 97) (- 0 98)) (<= FullPerm (U_2_real (MapType0Select Mask@20 freshObj@0 val)))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@20 freshObj@0 val))) (=> (= (ControlFlow 0 97) 96) anon302_correct))))))
(let ((anon507_Else_correct  (and (=> (= (ControlFlow 0 100) (- 0 103)) (<= FullPerm (U_2_real (MapType0Select Mask@18 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@18 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1)))))) (=> (and (and (and (= AssertMask@0 (MapType0Store Mask@18 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (real_2_U (- (U_2_real (MapType0Select Mask@18 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) FullPerm)))) (state ExhaleHeap@1 Mask@18)) (and (not (= freshObj@0 null)) (not (U_2_bool (MapType1Select ExhaleHeap@1 freshObj@0 $allocated))))) (and (and (= Heap@4 (MapType1Store ExhaleHeap@1 freshObj@0 $allocated (bool_2_U true))) (= Mask@19 (MapType0Store Mask@18 freshObj@0 val (real_2_U (+ (U_2_real (MapType0Select Mask@18 freshObj@0 val)) FullPerm))))) (and (= Mask@20 (MapType0Store Mask@19 freshObj@0 next (real_2_U (+ (U_2_real (MapType0Select Mask@19 freshObj@0 next)) FullPerm)))) (state Heap@4 Mask@20)))) (and (=> (= (ControlFlow 0 100) (- 0 102)) (= FullPerm (U_2_real (MapType0Select Mask@20 freshObj@0 val)))) (=> (= FullPerm (U_2_real (MapType0Select Mask@20 freshObj@0 val))) (=> (and (= Heap@5 (MapType1Store Heap@4 freshObj@0 val (int_2_U x@@11))) (state Heap@5 Mask@20)) (and (=> (= (ControlFlow 0 100) (- 0 101)) (= FullPerm (U_2_real (MapType0Select Mask@20 freshObj@0 next)))) (=> (= FullPerm (U_2_real (MapType0Select Mask@20 freshObj@0 next))) (=> (and (= Heap@6 (MapType1Store Heap@5 freshObj@0 next nxt@1)) (state Heap@6 Mask@20)) (and (=> (= (ControlFlow 0 100) 97) anon514_Then_correct) (=> (= (ControlFlow 0 100) 99) anon514_Else_correct)))))))))))))
(let ((anon286_correct  (=> (state ExhaleHeap@1 Mask@17) (=> (and (= Mask@18 (MapType0Store Mask@17 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))) (real_2_U (+ (U_2_real (MapType0Select Mask@17 null (wand crt@0 FullPerm crt@0 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) i@0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@1))))) FullPerm)))) (state ExhaleHeap@1 Mask@18)) (=> (and (and (state ExhaleHeap@1 Mask@18) (|Seq#Equal| crtElems@1 (|Seq#Append| (|Seq#Singleton| (MapType1Select ExhaleHeap@1 crt@0 val)) (ite (= (MapType1Select ExhaleHeap@1 crt@0 next) null) (|Seq#Empty| intType) (elems ExhaleHeap@1 (MapType1Select ExhaleHeap@1 crt@0 next)))))) (and (state ExhaleHeap@1 Mask@18) (state ExhaleHeap@1 Mask@18))) (and (=> (= (ControlFlow 0 119) 118) anon507_Then_correct) (=> (= (ControlFlow 0 119) 100) anon507_Else_correct)))))))
(let ((anon506_Else_correct  (=> (= nxt@1 null) (=> (and (= Mask@17 Mask@15) (= (ControlFlow 0 121) 119)) anon286_correct))))
(let ((anon506_Then_correct  (=> (not (= nxt@1 null)) (=> (and (= Mask@16 (MapType0Store Mask@15 null (List nxt@1) (real_2_U (+ (U_2_real (MapType0Select Mask@15 null (List nxt@1))) FullPerm)))) (state ExhaleHeap@1 Mask@16)) (=> (and (and (state ExhaleHeap@1 Mask@16) (|Seq#Equal| (elems ExhaleHeap@1 nxt@1) (|Seq#Drop| (elems Heap@@18 xs@@13) (+ i@0 1)))) (and (= Mask@17 Mask@16) (= (ControlFlow 0 120) 119))) anon286_correct)))))
(let ((anon284_correct  (=> (not (= crt@0 null)) (=> (and (and (and (= Mask@14 (MapType0Store Mask@13 crt@0 val (real_2_U (+ (U_2_real (MapType0Select Mask@13 crt@0 val)) FullPerm)))) (state ExhaleHeap@1 Mask@14)) (and (not (= crt@0 null)) (= Mask@15 (MapType0Store Mask@14 crt@0 next (real_2_U (+ (U_2_real (MapType0Select Mask@14 crt@0 next)) FullPerm)))))) (and (and (state ExhaleHeap@1 Mask@15) (= nxt@1 (MapType1Select ExhaleHeap@1 crt@0 next))) (and (state ExhaleHeap@1 Mask@15) (= (U_2_int (MapType1Select ExhaleHeap@1 crt@0 val)) (U_2_int (|Seq#Index| (elems Heap@@18 xs@@13) i@0)))))) (and (=> (= (ControlFlow 0 122) 120) anon506_Then_correct) (=> (= (ControlFlow 0 122) 121) anon506_Else_correct))))))
(let ((anon505_Else_correct  (=> (and (not (= nxt@1 null)) (= (ControlFlow 0 124) 122)) anon284_correct)))
(let ((anon505_Then_correct  (=> (and (and (= nxt@1 null) (state ExhaleHeap@1 Mask@13)) (and (= i@0 (- (|Seq#Length| (elems Heap@@18 xs@@13)) 1)) (= (ControlFlow 0 123) 122))) anon284_correct)))
(let ((anon417_Else_correct  (=> (not (and (not (= nxt@1 null)) (< (head ExhaleHeap@1 nxt@1) x@@11))) (=> (and (and (state ExhaleHeap@1 Mask@13) (<= 0 i@0)) (and (state ExhaleHeap@1 Mask@13) (< i@0 (|Seq#Length| (elems Heap@@18 xs@@13))))) (and (=> (= (ControlFlow 0 125) 123) anon505_Then_correct) (=> (= (ControlFlow 0 125) 124) anon505_Else_correct))))))
(let ((anon70_correct  (and (=> (= (ControlFlow 0 425) (- 0 427)) (<= FullPerm (U_2_real (MapType0Select Mask@12 null (wand xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) 0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0))))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@12 null (wand xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) 0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0)))))) (=> (= Mask@13 (MapType0Store Mask@12 null (wand xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) 0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0))) (real_2_U (- (U_2_real (MapType0Select Mask@12 null (wand xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) 0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0))))) FullPerm)))) (and (=> (= (ControlFlow 0 425) (- 0 426)) (|Seq#Equal| crtElems@0 (|Seq#Append| (|Seq#Singleton| (MapType1Select Heap@3 xs@@13 val)) (ite (= (MapType1Select Heap@3 xs@@13 next) null) (|Seq#Empty| intType) (elems Heap@3 (MapType1Select Heap@3 xs@@13 next)))))) (=> (|Seq#Equal| crtElems@0 (|Seq#Append| (|Seq#Singleton| (MapType1Select Heap@3 xs@@13 val)) (ite (= (MapType1Select Heap@3 xs@@13 next) null) (|Seq#Empty| intType) (elems Heap@3 (MapType1Select Heap@3 xs@@13 next))))) (=> (IdenticalOnKnownLocations Heap@3 ExhaleHeap@1 Mask@13) (=> (and (U_2_bool (MapType1Select ExhaleHeap@1 nxt@1 $allocated)) (U_2_bool (MapType1Select ExhaleHeap@1 crt@0 $allocated))) (and (and (=> (= (ControlFlow 0 425) 424) anon394_Then_correct) (=> (= (ControlFlow 0 425) 363) anon417_Then_correct)) (=> (= (ControlFlow 0 425) 125) anon417_Else_correct)))))))))))
(let ((anon69_correct  (=> (= Mask@11 (MapType0Store Mask@10 null (List nxt@0) (real_2_U (- (U_2_real (MapType0Select Mask@10 null (List nxt@0))) FullPerm)))) (and (=> (= (ControlFlow 0 429) (- 0 430)) (|Seq#Equal| (elems Heap@3 nxt@0) (|Seq#Drop| (elems Heap@@18 xs@@13) (+ 0 1)))) (=> (|Seq#Equal| (elems Heap@3 nxt@0) (|Seq#Drop| (elems Heap@@18 xs@@13) (+ 0 1))) (=> (and (= Mask@12 Mask@11) (= (ControlFlow 0 429) 425)) anon70_correct))))))
(let ((anon393_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 433) 429)) anon69_correct)))
(let ((anon393_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 431) (- 0 432)) (<= FullPerm (U_2_real (MapType0Select Mask@10 null (List nxt@0))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@10 null (List nxt@0)))) (=> (= (ControlFlow 0 431) 429) anon69_correct))))))
(let ((anon392_Then_correct  (=> (not (= nxt@0 null)) (and (=> (= (ControlFlow 0 434) 431) anon393_Then_correct) (=> (= (ControlFlow 0 434) 433) anon393_Else_correct)))))
(let ((anon392_Else_correct  (=> (= nxt@0 null) (=> (and (= Mask@12 Mask@10) (= (ControlFlow 0 428) 425)) anon70_correct))))
(let ((anon66_correct  (=> (= Mask@10 (MapType0Store Mask@9 xs@@13 next (real_2_U (- (U_2_real (MapType0Select Mask@9 xs@@13 next)) FullPerm)))) (and (=> (= (ControlFlow 0 435) (- 0 437)) (= nxt@0 (MapType1Select Heap@3 xs@@13 next))) (=> (= nxt@0 (MapType1Select Heap@3 xs@@13 next)) (and (=> (= (ControlFlow 0 435) (- 0 436)) (= (U_2_int (MapType1Select Heap@3 xs@@13 val)) (U_2_int (|Seq#Index| (elems Heap@@18 xs@@13) 0)))) (=> (= (U_2_int (MapType1Select Heap@3 xs@@13 val)) (U_2_int (|Seq#Index| (elems Heap@@18 xs@@13) 0))) (and (=> (= (ControlFlow 0 435) 434) anon392_Then_correct) (=> (= (ControlFlow 0 435) 428) anon392_Else_correct)))))))))
(let ((anon391_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 440) 435)) anon66_correct)))
(let ((anon391_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 438) (- 0 439)) (<= FullPerm (U_2_real (MapType0Select Mask@9 xs@@13 next)))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@9 xs@@13 next))) (=> (= (ControlFlow 0 438) 435) anon66_correct))))))
(let ((anon64_correct  (=> (= Mask@9 (MapType0Store Mask@8 xs@@13 val (real_2_U (- (U_2_real (MapType0Select Mask@8 xs@@13 val)) FullPerm)))) (and (=> (= (ControlFlow 0 441) 438) anon391_Then_correct) (=> (= (ControlFlow 0 441) 440) anon391_Else_correct)))))
(let ((anon390_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 444) 441)) anon64_correct)))
(let ((anon390_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 442) (- 0 443)) (<= FullPerm (U_2_real (MapType0Select Mask@8 xs@@13 val)))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@8 xs@@13 val))) (=> (= (ControlFlow 0 442) 441) anon64_correct))))))
(let ((anon389_Else_correct  (=> (not (= nxt@0 null)) (and (=> (= (ControlFlow 0 447) 442) anon390_Then_correct) (=> (= (ControlFlow 0 447) 444) anon390_Else_correct)))))
(let ((anon389_Then_correct  (=> (= nxt@0 null) (and (=> (= (ControlFlow 0 445) (- 0 446)) (= 0 (- (|Seq#Length| (elems Heap@@18 xs@@13)) 1))) (=> (= 0 (- (|Seq#Length| (elems Heap@@18 xs@@13)) 1)) (and (=> (= (ControlFlow 0 445) 442) anon390_Then_correct) (=> (= (ControlFlow 0 445) 444) anon390_Else_correct)))))))
(let ((anon60_correct  (and (=> (= (ControlFlow 0 448) (- 0 451)) (=> (and (and b_1_1@10 b_1_1@10) b_2_1@6) (|Seq#Equal| (elems ResultHeap xs@@13) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) 0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0))))) (=> (=> (and (and b_1_1@10 b_1_1@10) b_2_1@6) (|Seq#Equal| (elems ResultHeap xs@@13) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) 0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0)))) (=> (state Heap@3 Mask@7) (=> (and (and (= Mask@8 (MapType0Store Mask@7 null (wand xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) 0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0))) (real_2_U (+ (U_2_real (MapType0Select Mask@7 null (wand xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) 0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0))))) FullPerm)))) (state Heap@3 Mask@8)) (and (state Heap@3 Mask@8) (state Heap@3 Mask@8))) (and (=> (= (ControlFlow 0 448) (- 0 450)) (<= 0 0)) (=> (<= 0 0) (and (=> (= (ControlFlow 0 448) (- 0 449)) (< 0 (|Seq#Length| (elems Heap@@18 xs@@13)))) (=> (< 0 (|Seq#Length| (elems Heap@@18 xs@@13))) (and (=> (= (ControlFlow 0 448) 445) anon389_Then_correct) (=> (= (ControlFlow 0 448) 447) anon389_Else_correct))))))))))))
(let ((anon384_Then_correct  (=> b_1_1@10 (and (and (and (and (=> (= (ControlFlow 0 462) 448) anon60_correct) (=> (= (ControlFlow 0 462) 459) anon388_Then_correct)) (=> (= (ControlFlow 0 462) 461) anon388_Else_correct)) (=> (= (ControlFlow 0 462) 455) anon386_Then_correct)) (=> (= (ControlFlow 0 462) 457) anon386_Else_correct)))))
(let ((anon384_Else_correct  (=> (and (not b_1_1@10) (= (ControlFlow 0 453) 448)) anon60_correct)))
(let ((anon383_Then_correct  (=> (and (and b_1_1@10 b_1_1@10) b_2_1@6) (and (=> (= (ControlFlow 0 463) 462) anon384_Then_correct) (=> (= (ControlFlow 0 463) 453) anon384_Else_correct)))))
(let ((anon383_Else_correct  (=> (and (not (and (and b_1_1@10 b_1_1@10) b_2_1@6)) (= (ControlFlow 0 452) 448)) anon60_correct)))
(let ((anon50_correct  (and (=> (= (ControlFlow 0 464) (- 0 465)) (=> (and (and b_1_1@9 b_1_1@9) b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType0Select Used_1Mask@3 null (List xs@@13))) initNeededTransfer@0)))) (=> (=> (and (and b_1_1@9 b_1_1@9) b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType0Select Used_1Mask@3 null (List xs@@13))) initNeededTransfer@0))) (=> (and (= b_3@0  (and b_1_1@9 b_2_1@6)) (= b_3@1  (and b_3@0 (state ResultHeap ResultMask@@0)))) (=> (and (and (= b_3@2  (and b_3@1 (sumMask ResultMask@@0 Ops_1Mask@6 Used_1Mask@3))) (= b_3@3  (and (and b_3@2 (IdenticalOnKnownLocations Ops_1Heap@2 ResultHeap Ops_1Mask@6)) (IdenticalOnKnownLocations Used_1Heap@0 ResultHeap Used_1Mask@3)))) (and (= b_3@4  (and b_3@3 (state ResultHeap ResultMask@@0))) (= b_1_1@10  (and b_1_1@9 b_3@4)))) (and (=> (= (ControlFlow 0 464) 463) anon383_Then_correct) (=> (= (ControlFlow 0 464) 452) anon383_Else_correct))))))))
(let ((anon382_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Mask@7 Mask@5) (= neededTransfer@3 neededTransfer@1)) (=> (and (and (= Heap@3 Heap@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 468) 464))) anon50_correct)))))
(let ((anon382_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1)) (= Used_1Mask@2 (MapType0Store Used_1Mask@1 null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select Used_1Mask@1 null (List xs@@13))) takeTransfer@1))))) (=> (and (and (= b_2_1@4  (and b_2_1@3 (state Used_1Heap@0 Used_1Mask@2))) (= TempMask@1 (MapType0Store ZeroMask null (List xs@@13) (real_2_U FullPerm)))) (and (= b_2_1@5  (and b_2_1@4 (IdenticalOnKnownLocations Heap@1 Used_1Heap@0 TempMask@1))) (= Mask@6 (MapType0Store Mask@5 null (List xs@@13) (real_2_U (- (U_2_real (MapType0Select Mask@5 null (List xs@@13))) takeTransfer@1)))))) (=> (and (and (and (forall ((o_5 T@U) (f_9 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_9))))
(let ((A@@18 (FieldTypeInv0 (type f_9))))
 (=> (and (and (= (type o_5) RefType) (= (type f_9) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType0Select (MapType1Select Heap@1 null (|wand#sm| xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) 0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0)))) o_5 f_9)) (U_2_bool (MapType0Select (MapType1Select Heap@1 null (|List#sm| xs@@13)) o_5 f_9)))) (U_2_bool (MapType0Select newPMask@0 o_5 f_9)))))
 :qid |stdinbpl.1307:35|
 :skolemid |81|
 :pattern ( (MapType0Select newPMask@0 o_5 f_9))
)) (= Heap@2 (MapType1Store Heap@1 null (|wand#sm| xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0) xs@@13 FullPerm xs@@13 (|Seq#Append| (|Seq#Drop| (|Seq#Take| (elems Heap@@18 xs@@13) 0) 0) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0))) newPMask@0))) (and (= Mask@7 Mask@6) (= neededTransfer@3 neededTransfer@2))) (and (and (= Heap@3 Heap@2) (= b_2_1@6 b_2_1@5)) (and (= Used_1Mask@3 Used_1Mask@2) (= (ControlFlow 0 467) 464)))) anon50_correct))))))
(let ((anon381_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 470) 467) anon382_Then_correct) (=> (= (ControlFlow 0 470) 468) anon382_Else_correct)))))
(let ((anon381_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 469) 467) anon382_Then_correct) (=> (= (ControlFlow 0 469) 468) anon382_Else_correct)))))
(let ((anon380_Then_correct  (=> (and (and (and (and (and b_1_1@9 b_1_1@9) b_2_1@3) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType0Select Mask@5 null (List xs@@13))))) (and (=> (= (ControlFlow 0 471) 469) anon381_Then_correct) (=> (= (ControlFlow 0 471) 470) anon381_Else_correct)))))
(let ((anon380_Else_correct  (=> (not (and (and (and (and b_1_1@9 b_1_1@9) b_2_1@3) true) (> neededTransfer@1 0.0))) (=> (and (= Mask@7 Mask@5) (= neededTransfer@3 neededTransfer@1)) (=> (and (and (= Heap@3 Heap@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 466) 464))) anon50_correct)))))
(let ((anon379_Else_correct  (=> (>= 0.0 takeTransfer@0) (=> (and (and (= Ops_1Mask@6 Ops_1Mask@4) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 474) 471) anon380_Then_correct) (=> (= (ControlFlow 0 474) 466) anon380_Else_correct))))))
(let ((anon379_Then_correct  (=> (> takeTransfer@0 0.0) (=> (and (= neededTransfer@0 (- FullPerm takeTransfer@0)) (= Used_1Mask@0 (MapType0Store ZeroMask null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List xs@@13))) takeTransfer@0))))) (=> (and (and (and (= b_2_1@1  (and b_2_1@0 (state Used_1Heap@0 Used_1Mask@0))) (= TempMask@0 (MapType0Store ZeroMask null (List xs@@13) (real_2_U FullPerm)))) (and (= b_2_1@2  (and b_2_1@1 (IdenticalOnKnownLocations Ops_1Heap@2 Used_1Heap@0 TempMask@0))) (= Ops_1Mask@5 (MapType0Store Ops_1Mask@4 null (List xs@@13) (real_2_U (- (U_2_real (MapType0Select Ops_1Mask@4 null (List xs@@13))) takeTransfer@0)))))) (and (and (= Ops_1Mask@6 Ops_1Mask@5) (= Used_1Mask@1 Used_1Mask@0)) (and (= b_2_1@3 b_2_1@2) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 473) 471) anon380_Then_correct) (=> (= (ControlFlow 0 473) 466) anon380_Else_correct)))))))
(let ((anon378_Else_correct  (=> (and (< maskTransfer@0 FullPerm) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 476) 473) anon379_Then_correct) (=> (= (ControlFlow 0 476) 474) anon379_Else_correct)))))
(let ((anon378_Then_correct  (=> (and (<= FullPerm maskTransfer@0) (= takeTransfer@0 FullPerm)) (and (=> (= (ControlFlow 0 475) 473) anon379_Then_correct) (=> (= (ControlFlow 0 475) 474) anon379_Else_correct)))))
(let ((anon377_Then_correct  (=> (and (and (and (and (and b_1_1@9 b_1_1@9) b_2_1@0) true) (> FullPerm 0.0)) (= maskTransfer@0 (U_2_real (MapType0Select Ops_1Mask@4 null (List xs@@13))))) (and (=> (= (ControlFlow 0 477) 475) anon378_Then_correct) (=> (= (ControlFlow 0 477) 476) anon378_Else_correct)))))
(let ((anon377_Else_correct  (=> (not (and (and (and (and b_1_1@9 b_1_1@9) b_2_1@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@6 Ops_1Mask@4) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 472) 471) anon380_Then_correct) (=> (= (ControlFlow 0 472) 466) anon380_Else_correct))))))
(let ((anon38_correct  (=> (and (and (= b_1_1@8  (and b_1_1@7 (state Ops_1Heap@2 Ops_1Mask@4))) (= b_1_1@9  (and b_1_1@8 (state Ops_1Heap@2 Ops_1Mask@4)))) (and (= b_2_1@0  (and b_2_1 (state Used_1Heap@0 ZeroMask))) (= initNeededTransfer@0 (+ (U_2_real (MapType0Select ZeroMask null (List xs@@13))) FullPerm)))) (and (=> (= (ControlFlow 0 478) (- 0 479)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 478) 477) anon377_Then_correct) (=> (= (ControlFlow 0 478) 472) anon377_Else_correct)))))))
(let ((anon37_correct  (=> (= b_1_1@6  (and b_1_1@5 (|Seq#Equal| (elems Ops_1Heap@1 xs@@13) (|Seq#Append| (|Seq#Singleton| (int_2_U x@@11)) crtElems@0)))) (=> (and (and (= b_1_1@7 b_1_1@6) (= Ops_1Mask@4 Ops_1Mask@3)) (and (= Ops_1Heap@2 Ops_1Heap@1) (= (ControlFlow 0 482) 478))) anon38_correct))))
(let ((anon36_correct  (=> (and (= Ops_1Mask@2 (MapType0Store Ops_1Mask@1 null (List xs@@13) (real_2_U (- (U_2_real (MapType0Select Ops_1Mask@1 null (List xs@@13))) FullPerm)))) (= b_1_1@4  (and b_1_1@3 (IdenticalOnKnownLocations Ops_1Heap@0 ExhaleHeap@0 Ops_1Mask@2)))) (=> (and (and (= Ops_1Heap@1 ExhaleHeap@0) (= b_1_1@5 false)) (and (= Ops_1Mask@3 Ops_1Mask@2) (= (ControlFlow 0 485) 482))) anon37_correct))))
(let ((anon376_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 488) 485)) anon36_correct)))
(let ((anon376_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 486) (- 0 487)) (<= FullPerm (U_2_real (MapType0Select Ops_1Mask@1 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Ops_1Mask@1 null (List xs@@13)))) (=> (= (ControlFlow 0 486) 485) anon36_correct))))))
(let ((anon375_Else_correct  (=> (and (and (= Ops_1Heap@1 Ops_1Heap@0) (= b_1_1@5 b_1_1@3)) (and (= Ops_1Mask@3 Ops_1Mask@1) (= (ControlFlow 0 484) 482))) anon37_correct)))
(let ((anon374_Then_correct  (=> b_1_1@3 (and (and (=> (= (ControlFlow 0 489) 484) anon375_Else_correct) (=> (= (ControlFlow 0 489) 486) anon376_Then_correct)) (=> (= (ControlFlow 0 489) 488) anon376_Else_correct)))))
(let ((anon374_Else_correct  (=> (not b_1_1@3) (=> (and (and (= Ops_1Heap@1 Ops_1Heap@0) (= b_1_1@5 b_1_1@3)) (and (= Ops_1Mask@3 Ops_1Mask@1) (= (ControlFlow 0 483) 482))) anon37_correct))))
(let ((anon373_Then_correct  (=> (and b_1_1@2 (= b_1_1@3  (and b_1_1@2 (state Ops_1Heap@0 Ops_1Mask@1)))) (and (=> (= (ControlFlow 0 490) 489) anon374_Then_correct) (=> (= (ControlFlow 0 490) 483) anon374_Else_correct)))))
(let ((anon373_Else_correct  (=> (not b_1_1@2) (=> (and (and (= b_1_1@7 b_1_1@2) (= Ops_1Mask@4 Ops_1Mask@1)) (and (= Ops_1Heap@2 Ops_1Heap@0) (= (ControlFlow 0 481) 478))) anon38_correct))))
(let ((anon372_Else_correct  (=> (not b_1_1@0) (=> (and (= Ops_1Mask@1 ZeroMask) (= b_1_1@2 b_1_1@0)) (and (=> (= (ControlFlow 0 492) 490) anon373_Then_correct) (=> (= (ControlFlow 0 492) 481) anon373_Else_correct))))))
(let ((anon372_Then_correct  (=> b_1_1@0 (=> (and (and (= Ops_1Mask@0 (MapType0Store ZeroMask null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List xs@@13))) FullPerm)))) (= b_1_1@1  (and b_1_1@0 (state Ops_1Heap@0 Ops_1Mask@0)))) (and (= Ops_1Mask@1 Ops_1Mask@0) (= b_1_1@2 b_1_1@1))) (and (=> (= (ControlFlow 0 491) 490) anon373_Then_correct) (=> (= (ControlFlow 0 491) 481) anon373_Else_correct))))))
(let ((anon371_Then_correct  (=> b_1_1@0 (and (=> (= (ControlFlow 0 493) 491) anon372_Then_correct) (=> (= (ControlFlow 0 493) 492) anon372_Else_correct)))))
(let ((anon371_Else_correct  (=> (not b_1_1@0) (=> (and (and (= b_1_1@7 b_1_1@0) (= Ops_1Mask@4 ZeroMask)) (and (= Ops_1Heap@2 Ops_1Heap@0) (= (ControlFlow 0 480) 478))) anon38_correct))))
(let ((anon28_correct  (=> (state Heap@1 Mask@5) (=> (and (state Heap@1 Mask@5) (state Heap@1 Mask@5)) (and (=> (= (ControlFlow 0 494) (- 0 495)) (HasDirectPerm Mask@5 xs@@13 next)) (=> (HasDirectPerm Mask@5 xs@@13 next) (=> (and (and (= nxt@0 (MapType1Select Heap@1 xs@@13 next)) (state Heap@1 Mask@5)) (and (= b_1_1@0  (and b_1_1 (state Ops_1Heap@0 ZeroMask))) (= b_2@0  (and b_2 (state UsedHeap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 494) 493) anon371_Then_correct) (=> (= (ControlFlow 0 494) 480) anon371_Else_correct)))))))))
(let ((anon370_Else_correct  (=> (= (MapType1Select Heap@1 xs@@13 next) null) (=> (and (= Mask@5 Mask@3) (= (ControlFlow 0 497) 494)) anon28_correct))))
(let ((anon370_Then_correct  (=> (and (not (= (MapType1Select Heap@1 xs@@13 next) null)) (= Mask@4 (MapType0Store Mask@3 null (List (MapType1Select Heap@1 xs@@13 next)) (real_2_U (+ (U_2_real (MapType0Select Mask@3 null (List (MapType1Select Heap@1 xs@@13 next)))) FullPerm))))) (=> (and (and (InsidePredicate (List xs@@13) (MapType1Select Heap@1 null (List xs@@13)) (List (MapType1Select Heap@1 xs@@13 next)) (MapType1Select Heap@1 null (List (MapType1Select Heap@1 xs@@13 next)))) (state Heap@1 Mask@4)) (and (= Mask@5 Mask@4) (= (ControlFlow 0 496) 494))) anon28_correct))))
(let ((anon26_correct  (=> (and (not (= xs@@13 null)) (= Mask@2 (MapType0Store Mask@1 xs@@13 val (real_2_U (+ (U_2_real (MapType0Select Mask@1 xs@@13 val)) FullPerm))))) (=> (and (and (state Heap@1 Mask@2) (not (= xs@@13 null))) (and (= Mask@3 (MapType0Store Mask@2 xs@@13 next (real_2_U (+ (U_2_real (MapType0Select Mask@2 xs@@13 next)) FullPerm)))) (state Heap@1 Mask@3))) (and (=> (= (ControlFlow 0 498) 496) anon370_Then_correct) (=> (= (ControlFlow 0 498) 497) anon370_Else_correct))))))
(let ((anon369_Else_correct  (=> (HasDirectPerm Mask@1 null (List xs@@13)) (=> (and (= Heap@1 Heap@@18) (= (ControlFlow 0 500) 498)) anon26_correct))))
(let ((anon369_Then_correct  (=> (and (and (not (HasDirectPerm Mask@1 null (List xs@@13))) (= Heap@0 (MapType1Store Heap@@18 null (List xs@@13) newVersion@0))) (and (= Heap@1 Heap@0) (= (ControlFlow 0 499) 498))) anon26_correct)))
(let ((anon24_correct  (=> (= Mask@1 (MapType0Store Mask@0 null (List xs@@13) (real_2_U (- (U_2_real (MapType0Select Mask@0 null (List xs@@13))) FullPerm)))) (and (=> (= (ControlFlow 0 501) 499) anon369_Then_correct) (=> (= (ControlFlow 0 501) 500) anon369_Else_correct)))))
(let ((anon368_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 504) 501)) anon24_correct)))
(let ((anon368_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 502) (- 0 503)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 502) 501) anon24_correct))))))
(let ((anon366_Else_correct  (=> (and (and (= crtElems@0 (elems Heap@@18 xs@@13)) (state Heap@@18 Mask@0)) (and (|List#trigger| Heap@@18 (List xs@@13)) (= (MapType1Select Heap@@18 null (List xs@@13)) (CombineFrames (FrameFragment (MapType1Select Heap@@18 xs@@13 val)) (CombineFrames (FrameFragment (MapType1Select Heap@@18 xs@@13 next)) (FrameFragment (ite (not (= (MapType1Select Heap@@18 xs@@13 next) null)) (MapType1Select Heap@@18 null (List (MapType1Select Heap@@18 xs@@13 next))) EmptyFrame))))))) (and (=> (= (ControlFlow 0 505) 502) anon368_Then_correct) (=> (= (ControlFlow 0 505) 504) anon368_Else_correct)))))
(let ((anon21_correct true))
(let ((anon367_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 8) 5)) anon21_correct)))
(let ((anon367_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 6) 5) anon21_correct))))))
(let ((anon359_Else_correct  (=> (and (and (U_2_bool (MapType1Select Heap@@18 crt $allocated)) (U_2_bool (MapType1Select Heap@@18 nxt $allocated))) (and (U_2_bool (MapType1Select Heap@@18 node $allocated)) (state Heap@@18 Mask@0))) (and (and (=> (= (ControlFlow 0 506) 505) anon366_Else_correct) (=> (= (ControlFlow 0 506) 6) anon367_Then_correct)) (=> (= (ControlFlow 0 506) 8) anon367_Else_correct)))))
(let ((anon357_Else_correct  (=> (and (< (head Heap@@18 xs@@13) x@@11) (state Heap@@18 Mask@0)) (and (=> (= (ControlFlow 0 521) 520) anon359_Then_correct) (=> (= (ControlFlow 0 521) 506) anon359_Else_correct)))))
(let ((anon3_correct true))
(let ((anon358_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 4) 1)) anon3_correct)))
(let ((anon358_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (List xs@@13)))) (=> (= (ControlFlow 0 2) 1) anon3_correct))))))
(let ((anon0_correct  (=> (state Heap@@18 ZeroMask) (=> (and (= AssumeFunctionsAbove (- 0 1)) (U_2_bool (MapType1Select Heap@@18 xs@@13 $allocated))) (=> (and (and (= Mask@0 (MapType0Store ZeroMask null (List xs@@13) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (List xs@@13))) FullPerm)))) (state Heap@@18 Mask@0)) (and (state Heap@@18 Mask@0) (state Heap@@18 Mask@0))) (and (and (=> (= (ControlFlow 0 522) 521) anon357_Else_correct) (=> (= (ControlFlow 0 522) 2) anon358_Then_correct)) (=> (= (ControlFlow 0 522) 4) anon358_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 523) 522) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 194) (- 195))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 31) (- 33))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
