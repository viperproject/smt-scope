(get-info :version)
; (:version "4.12.1")
; Started: 2023-10-31 14:18:12
; Silicon.version: 1.1-SNAPSHOT (46944a65@dspil_symbenchmarking)
; Input file: /home/pcorrect/repos/benchmarking_general/silicon_tests/gobra_tests_._examples_._evaluation_._impl_errors_._dense_sparse_matrix.gobra.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<Int> 0)
(declare-sort Set<ShStruct3<Ref~_Ref~_Ref>> 0)
(declare-sort Set<ShStruct2<Ref~_Ref>> 0)
(declare-sort Set<Slice<Ref>> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort Equality<ShStruct2<Ref~_Ref>> 0)
(declare-sort Equality<ShStruct1<Ref>> 0)
(declare-sort ShStruct3<Ref~_Ref~_Ref> 0)
(declare-sort Tuple3<Int~_Int~_Int> 0)
(declare-sort ShStruct1<Ref> 0)
(declare-sort Slice<Ref> 0)
(declare-sort Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>> 0)
(declare-sort Equality<ShStruct3<Ref~_Ref~_Ref>> 0)
(declare-sort ShStruct2<Ref~_Ref> 0)
(declare-sort $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> 0)
(declare-sort $FVF<Intint$$$$_E_$$$> 0)
(declare-sort $FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<ShStruct3<Ref~_Ref~_Ref>>To$Snap (Set<ShStruct3<Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<ShStruct3<Ref~_Ref~_Ref>> ($Snap) Set<ShStruct3<Ref~_Ref~_Ref>>)
(assert (forall ((x Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<ShStruct3<Ref~_Ref~_Ref>>($SortWrappers.Set<ShStruct3<Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<ShStruct3<Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<ShStruct3<Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<ShStruct3<Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToSet<ShStruct3<Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<ShStruct3<Ref~_Ref~_Ref>> x))
    :qid |$Snap.Set<ShStruct3<Ref~_Ref~_Ref>>To$SnapToSet<ShStruct3<Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Set<ShStruct2<Ref~_Ref>>To$Snap (Set<ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<ShStruct2<Ref~_Ref>> ($Snap) Set<ShStruct2<Ref~_Ref>>)
(assert (forall ((x Set<ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<ShStruct2<Ref~_Ref>>($SortWrappers.Set<ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToSet<ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.Set<ShStruct2<Ref~_Ref>>To$SnapToSet<ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Set<Slice<Ref>>To$Snap (Set<Slice<Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Slice<Ref>> ($Snap) Set<Slice<Ref>>)
(assert (forall ((x Set<Slice<Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Slice<Ref>>($SortWrappers.Set<Slice<Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Slice<Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Slice<Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Slice<Ref>>To$Snap($SortWrappers.$SnapToSet<Slice<Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Slice<Ref>> x))
    :qid |$Snap.Set<Slice<Ref>>To$SnapToSet<Slice<Ref>>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap (Equality<ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> ($Snap) Equality<ShStruct2<Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>>($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<Ref~_Ref>>To$SnapToEquality<ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct1<Ref>>To$Snap (Equality<ShStruct1<Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct1<Ref>> ($Snap) Equality<ShStruct1<Ref>>)
(assert (forall ((x Equality<ShStruct1<Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct1<Ref>>($SortWrappers.Equality<ShStruct1<Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct1<Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct1<Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct1<Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct1<Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct1<Ref>> x))
    :qid |$Snap.Equality<ShStruct1<Ref>>To$SnapToEquality<ShStruct1<Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap (ShStruct3<Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap) ShStruct3<Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref>($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<Ref~_Ref~_Ref>To$SnapToShStruct3<Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Tuple3<Int~_Int~_Int>To$Snap (Tuple3<Int~_Int~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapToTuple3<Int~_Int~_Int> ($Snap) Tuple3<Int~_Int~_Int>)
(assert (forall ((x Tuple3<Int~_Int~_Int>)) (!
    (= x ($SortWrappers.$SnapToTuple3<Int~_Int~_Int>($SortWrappers.Tuple3<Int~_Int~_Int>To$Snap x)))
    :pattern (($SortWrappers.Tuple3<Int~_Int~_Int>To$Snap x))
    :qid |$Snap.$SnapToTuple3<Int~_Int~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Tuple3<Int~_Int~_Int>To$Snap($SortWrappers.$SnapToTuple3<Int~_Int~_Int> x)))
    :pattern (($SortWrappers.$SnapToTuple3<Int~_Int~_Int> x))
    :qid |$Snap.Tuple3<Int~_Int~_Int>To$SnapToTuple3<Int~_Int~_Int>|
    )))
(declare-fun $SortWrappers.ShStruct1<Ref>To$Snap (ShStruct1<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct1<Ref> ($Snap) ShStruct1<Ref>)
(assert (forall ((x ShStruct1<Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct1<Ref>($SortWrappers.ShStruct1<Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct1<Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct1<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct1<Ref>To$Snap($SortWrappers.$SnapToShStruct1<Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct1<Ref> x))
    :qid |$Snap.ShStruct1<Ref>To$SnapToShStruct1<Ref>|
    )))
(declare-fun $SortWrappers.Slice<Ref>To$Snap (Slice<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSlice<Ref> ($Snap) Slice<Ref>)
(assert (forall ((x Slice<Ref>)) (!
    (= x ($SortWrappers.$SnapToSlice<Ref>($SortWrappers.Slice<Ref>To$Snap x)))
    :pattern (($SortWrappers.Slice<Ref>To$Snap x))
    :qid |$Snap.$SnapToSlice<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Slice<Ref>To$Snap($SortWrappers.$SnapToSlice<Ref> x)))
    :pattern (($SortWrappers.$SnapToSlice<Ref> x))
    :qid |$Snap.Slice<Ref>To$SnapToSlice<Ref>|
    )))
(declare-fun $SortWrappers.Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>To$Snap (Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToTuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>> ($Snap) Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>)
(assert (forall ((x Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToTuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>($SortWrappers.Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToTuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToTuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToTuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>To$SnapToTuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct3<Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct3<Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct2<Ref~_Ref>To$Snap (ShStruct2<Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap) ShStruct2<Ref~_Ref>)
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<Ref~_Ref>($SortWrappers.ShStruct2<Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<Ref~_Ref> x))
    :qid |$Snap.ShStruct2<Ref~_Ref>To$SnapToShStruct2<Ref~_Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap ($FVF<Intint$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap) $FVF<Intint$$$$_E_$$$>)
(assert (forall ((x $FVF<Intint$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$>($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Intint$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Intint$$$$_E_$$$>To$SnapTo$FVF<Intint$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap ($FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$> ($Snap) $FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)
(assert (forall ((x $FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>($SortWrappers.$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$> x))
    :qid |$Snap.$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$SnapTo$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>|
    )))
; ////////// Symbols
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (ShStruct3<Ref~_Ref~_Ref> Set<ShStruct3<Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_card (Set<ShStruct3<Ref~_Ref~_Ref>>) Int)
(declare-const Set_empty Set<ShStruct3<Ref~_Ref~_Ref>>)
(declare-fun Set_singleton (ShStruct3<Ref~_Ref~_Ref>) Set<ShStruct3<Ref~_Ref~_Ref>>)
(declare-fun Set_unionone (Set<ShStruct3<Ref~_Ref~_Ref>> ShStruct3<Ref~_Ref~_Ref>) Set<ShStruct3<Ref~_Ref~_Ref>>)
(declare-fun Set_union (Set<ShStruct3<Ref~_Ref~_Ref>> Set<ShStruct3<Ref~_Ref~_Ref>>) Set<ShStruct3<Ref~_Ref~_Ref>>)
(declare-fun Set_disjoint (Set<ShStruct3<Ref~_Ref~_Ref>> Set<ShStruct3<Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_difference (Set<ShStruct3<Ref~_Ref~_Ref>> Set<ShStruct3<Ref~_Ref~_Ref>>) Set<ShStruct3<Ref~_Ref~_Ref>>)
(declare-fun Set_intersection (Set<ShStruct3<Ref~_Ref~_Ref>> Set<ShStruct3<Ref~_Ref~_Ref>>) Set<ShStruct3<Ref~_Ref~_Ref>>)
(declare-fun Set_subset (Set<ShStruct3<Ref~_Ref~_Ref>> Set<ShStruct3<Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_equal (Set<ShStruct3<Ref~_Ref~_Ref>> Set<ShStruct3<Ref~_Ref~_Ref>>) Bool)
(declare-fun Set_in (ShStruct2<Ref~_Ref> Set<ShStruct2<Ref~_Ref>>) Bool)
(declare-fun Set_card (Set<ShStruct2<Ref~_Ref>>) Int)
(declare-const Set_empty Set<ShStruct2<Ref~_Ref>>)
(declare-fun Set_singleton (ShStruct2<Ref~_Ref>) Set<ShStruct2<Ref~_Ref>>)
(declare-fun Set_unionone (Set<ShStruct2<Ref~_Ref>> ShStruct2<Ref~_Ref>) Set<ShStruct2<Ref~_Ref>>)
(declare-fun Set_union (Set<ShStruct2<Ref~_Ref>> Set<ShStruct2<Ref~_Ref>>) Set<ShStruct2<Ref~_Ref>>)
(declare-fun Set_disjoint (Set<ShStruct2<Ref~_Ref>> Set<ShStruct2<Ref~_Ref>>) Bool)
(declare-fun Set_difference (Set<ShStruct2<Ref~_Ref>> Set<ShStruct2<Ref~_Ref>>) Set<ShStruct2<Ref~_Ref>>)
(declare-fun Set_intersection (Set<ShStruct2<Ref~_Ref>> Set<ShStruct2<Ref~_Ref>>) Set<ShStruct2<Ref~_Ref>>)
(declare-fun Set_subset (Set<ShStruct2<Ref~_Ref>> Set<ShStruct2<Ref~_Ref>>) Bool)
(declare-fun Set_equal (Set<ShStruct2<Ref~_Ref>> Set<ShStruct2<Ref~_Ref>>) Bool)
(declare-fun Set_in (Slice<Ref> Set<Slice<Ref>>) Bool)
(declare-fun Set_card (Set<Slice<Ref>>) Int)
(declare-const Set_empty Set<Slice<Ref>>)
(declare-fun Set_singleton (Slice<Ref>) Set<Slice<Ref>>)
(declare-fun Set_unionone (Set<Slice<Ref>> Slice<Ref>) Set<Slice<Ref>>)
(declare-fun Set_union (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_disjoint (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_difference (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_intersection (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_subset (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_equal (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun ShStructget0of1<Ref> (ShStruct1<Ref>) $Ref)
(declare-fun ShStructrev0of1<ShStruct1<Ref>> ($Ref) ShStruct1<Ref>)
(declare-fun ShStructget0of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget1of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget2of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun ShStructrev1of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct2<Ref~_Ref> ShStruct2<Ref~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct1<Ref> ShStruct1<Ref>) Bool)
(declare-fun ShStructget0of2<Ref> (ShStruct2<Ref~_Ref>) $Ref)
(declare-fun ShStructget1of2<Ref> (ShStruct2<Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of2<ShStruct2<Ref~_Ref>> ($Ref) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev1of2<ShStruct2<Ref~_Ref>> ($Ref) ShStruct2<Ref~_Ref>)
(declare-fun get0of2<ShStruct3<Ref~_Ref~_Ref>> (Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun get1of2<ShStruct2<Ref~_Ref>> (Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>) ShStruct2<Ref~_Ref>)
(declare-fun tuple2<Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>> (ShStruct3<Ref~_Ref~_Ref> ShStruct2<Ref~_Ref>) Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>)
(declare-fun get0of3<Int> (Tuple3<Int~_Int~_Int>) Int)
(declare-fun get1of3<Int> (Tuple3<Int~_Int~_Int>) Int)
(declare-fun get2of3<Int> (Tuple3<Int~_Int~_Int>) Int)
(declare-fun tuple3<Tuple3<Int~_Int~_Int>> (Int Int Int) Tuple3<Int~_Int~_Int>)
(declare-fun eq<Bool> (ShStruct3<Ref~_Ref~_Ref> ShStruct3<Ref~_Ref~_Ref>) Bool)
(declare-fun scap<Int> (Slice<Ref>) Int)
(declare-fun slen<Int> (Slice<Ref>) Int)
(declare-fun sloc<Ref> (Slice<Ref> Int) $Ref)
; /field_value_functions_declarations.smt2 [SliceIntint$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(declare-fun $FVF.domain_SliceIntint$$$_S_$$$$$$$_E_$$$ ($FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> $Ref) Slice<Ref>)
(declare-fun $FVF.after_SliceIntint$$$_S_$$$$$$$_E_$$$ ($FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_SliceIntint$$$_S_$$$$$$$_E_$$$ (Slice<Ref> $Ref) Bool)
(declare-fun $FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_SliceIntint$$$_S_$$$$$$$_E_$$$ $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Intint$$$$_E_$$$: Int]
(declare-fun $FVF.domain_Intint$$$$_E_$$$ ($FVF<Intint$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Intint$$$$_E_$$$ ($FVF<Intint$$$$_E_$$$> $Ref) Int)
(declare-fun $FVF.after_Intint$$$$_E_$$$ ($FVF<Intint$$$$_E_$$$> $FVF<Intint$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Intint$$$$_E_$$$ (Int $Ref) Bool)
(declare-fun $FVF.perm_Intint$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Intint$$$$_E_$$$ $FVF<Intint$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(declare-fun $FVF.domain_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$> $Ref) Slice<Ref>)
(declare-fun $FVF.after_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$> $FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ (Slice<Ref> $Ref) Bool)
(declare-fun $FVF.perm_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ $FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun lenX_4b5075e4_PMDenseMatrix ($Snap ShStruct1<Ref>) Int)
(declare-fun lenX_4b5075e4_PMDenseMatrix%limited ($Snap ShStruct1<Ref>) Int)
(declare-fun lenX_4b5075e4_PMDenseMatrix%stateless (ShStruct1<Ref>) Bool)
(declare-fun lenX_4b5075e4_PMDenseMatrix%precondition ($Snap ShStruct1<Ref>) Bool)
(declare-fun lenY_4b5075e4_PMDenseMatrix ($Snap ShStruct1<Ref>) Int)
(declare-fun lenY_4b5075e4_PMDenseMatrix%limited ($Snap ShStruct1<Ref>) Int)
(declare-fun lenY_4b5075e4_PMDenseMatrix%stateless (ShStruct1<Ref>) Bool)
(declare-fun lenY_4b5075e4_PMDenseMatrix%precondition ($Snap ShStruct1<Ref>) Bool)
(declare-fun shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ ($Snap) ShStruct2<Ref~_Ref>)
(declare-fun shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited ($Snap) ShStruct2<Ref~_Ref>)
(declare-const shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$ ($Snap) ShStruct1<Ref>)
(declare-fun shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%limited ($Snap) ShStruct1<Ref>)
(declare-const shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun lookup_4b5075e4_PMDenseMatrix ($Snap ShStruct1<Ref> Int Int) Int)
(declare-fun lookup_4b5075e4_PMDenseMatrix%limited ($Snap ShStruct1<Ref> Int Int) Int)
(declare-fun lookup_4b5075e4_PMDenseMatrix%stateless (ShStruct1<Ref> Int Int) Bool)
(declare-fun lookup_4b5075e4_PMDenseMatrix%precondition ($Snap ShStruct1<Ref> Int Int) Bool)
(declare-fun LookupL_4b5075e4_F ($Snap ShStruct2<Ref~_Ref> Int Int Int Int) Int)
(declare-fun LookupL_4b5075e4_F%limited ($Snap ShStruct2<Ref~_Ref> Int Int Int Int) Int)
(declare-fun LookupL_4b5075e4_F%stateless (ShStruct2<Ref~_Ref> Int Int Int Int) Bool)
(declare-fun LookupL_4b5075e4_F%precondition ($Snap ShStruct2<Ref~_Ref> Int Int Int Int) Bool)
(declare-fun shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$ ($Snap) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%limited ($Snap) ShStruct3<Ref~_Ref~_Ref>)
(declare-const shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun denseMatrix_4b5075e4_F%trigger ($Snap ShStruct1<Ref>) Bool)
(declare-fun entry_4b5075e4_F%trigger ($Snap ShStruct3<Ref~_Ref~_Ref> Int Int) Bool)
(declare-fun sparseMatrix_4b5075e4_F%trigger ($Snap ShStruct2<Ref~_Ref> Int Int) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.card_non_negative|)))
(assert (forall ((e ShStruct3<Ref~_Ref~_Ref>)) (!
  (not (Set_in e (as Set_empty  Set<ShStruct3<Ref~_Ref~_Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<ShStruct3<Ref~_Ref~_Ref>>)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.in_empty_set|)))
(assert (forall ((s Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<ShStruct3<Ref~_Ref~_Ref>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e ShStruct3<Ref~_Ref~_Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.empty_set_cardinality|)))
(assert (forall ((e ShStruct3<Ref~_Ref~_Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.in_singleton_set|)))
(assert (forall ((e1 ShStruct3<Ref~_Ref~_Ref>) (e2 ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.in_singleton_set_equality|)))
(assert (forall ((e ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<ShStruct3<Ref~_Ref~_Ref>>) (e ShStruct3<Ref~_Ref~_Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.in_unionone_same|)))
(assert (forall ((s Set<ShStruct3<Ref~_Ref~_Ref>>) (e1 ShStruct3<Ref~_Ref~_Ref>) (e2 ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.in_unionone_other|)))
(assert (forall ((s Set<ShStruct3<Ref~_Ref~_Ref>>) (e1 ShStruct3<Ref~_Ref~_Ref>) (e2 ShStruct3<Ref~_Ref~_Ref>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<ShStruct3<Ref~_Ref~_Ref>>) (e ShStruct3<Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<ShStruct3<Ref~_Ref~_Ref>>) (e ShStruct3<Ref~_Ref~_Ref>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>) (e ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>) (e ShStruct3<Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>) (e ShStruct3<Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>) (e ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>) (e ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.in_difference|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>) (e ShStruct3<Ref~_Ref~_Ref>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e ShStruct3<Ref~_Ref~_Ref>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.subset_definition|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e ShStruct3<Ref~_Ref~_Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.equality_definition|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.native_equality|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e ShStruct3<Ref~_Ref~_Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<ShStruct3<Ref~_Ref~_Ref>>) (s2 Set<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[ShStruct3[Ref, Ref, Ref]]_prog.cardinality_difference|)))
(assert (forall ((s Set<ShStruct2<Ref~_Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.card_non_negative|)))
(assert (forall ((e ShStruct2<Ref~_Ref>)) (!
  (not (Set_in e (as Set_empty  Set<ShStruct2<Ref~_Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<ShStruct2<Ref~_Ref>>)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.in_empty_set|)))
(assert (forall ((s Set<ShStruct2<Ref~_Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<ShStruct2<Ref~_Ref>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e ShStruct2<Ref~_Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.empty_set_cardinality|)))
(assert (forall ((e ShStruct2<Ref~_Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.in_singleton_set|)))
(assert (forall ((e1 ShStruct2<Ref~_Ref>) (e2 ShStruct2<Ref~_Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.in_singleton_set_equality|)))
(assert (forall ((e ShStruct2<Ref~_Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<ShStruct2<Ref~_Ref>>) (e ShStruct2<Ref~_Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.in_unionone_same|)))
(assert (forall ((s Set<ShStruct2<Ref~_Ref>>) (e1 ShStruct2<Ref~_Ref>) (e2 ShStruct2<Ref~_Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.in_unionone_other|)))
(assert (forall ((s Set<ShStruct2<Ref~_Ref>>) (e1 ShStruct2<Ref~_Ref>) (e2 ShStruct2<Ref~_Ref>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<ShStruct2<Ref~_Ref>>) (e ShStruct2<Ref~_Ref>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<ShStruct2<Ref~_Ref>>) (e ShStruct2<Ref~_Ref>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>) (e ShStruct2<Ref~_Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>) (e ShStruct2<Ref~_Ref>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>) (e ShStruct2<Ref~_Ref>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>) (e ShStruct2<Ref~_Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>) (e ShStruct2<Ref~_Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.in_difference|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>) (e ShStruct2<Ref~_Ref>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e ShStruct2<Ref~_Ref>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.subset_definition|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e ShStruct2<Ref~_Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.equality_definition|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.native_equality|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e ShStruct2<Ref~_Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<ShStruct2<Ref~_Ref>>) (s2 Set<ShStruct2<Ref~_Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[ShStruct2[Ref, Ref]]_prog.cardinality_difference|)))
(assert (forall ((s Set<Slice<Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Slice[Ref]]_prog.card_non_negative|)))
(assert (forall ((e Slice<Ref>)) (!
  (not (Set_in e (as Set_empty  Set<Slice<Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<Slice<Ref>>)))
  :qid |$Set[Slice[Ref]]_prog.in_empty_set|)))
(assert (forall ((s Set<Slice<Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Slice<Ref>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Slice<Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Slice[Ref]]_prog.empty_set_cardinality|)))
(assert (forall ((e Slice<Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Slice[Ref]]_prog.in_singleton_set|)))
(assert (forall ((e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Slice[Ref]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Slice<Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Slice[Ref]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Slice[Ref]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Slice<Ref>>) (e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Slice[Ref]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Slice<Ref>>) (e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Slice[Ref]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[Ref]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[Ref]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Slice[Ref]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Slice[Ref]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Slice[Ref]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Slice[Ref]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Slice[Ref]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.in_difference|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Slice[Ref]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Slice<Ref>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Slice[Ref]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Slice<Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[Ref]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[Ref]]_prog.native_equality|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Slice<Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Slice[Ref]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((x ShStruct1<Ref>)) (!
  (= (ShStructrev0of1<ShStruct1<Ref>> (ShStructget0of1<Ref> x)) x)
  :pattern ((ShStructget0of1<Ref> x))
  )))
(assert (forall ((x ShStruct1<Ref>) (y ShStruct1<Ref>)) (!
  (= (eq<Bool> x y) (= (ShStructget0of1<Ref> x) (ShStructget0of1<Ref> y)))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev0of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget0of3<Ref> x)) x)
  :pattern ((ShStructget0of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev1of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget1of3<Ref> x)) x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev2of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget2of3<Ref> x)) x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>) (y ShStruct3<Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of3<Ref> x) (ShStructget0of3<Ref> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((l ShStruct2<Ref~_Ref>) (r ShStruct2<Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct1<Ref>) (r ShStruct1<Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
  (= (ShStructrev0of2<ShStruct2<Ref~_Ref>> (ShStructget0of2<Ref> x)) x)
  :pattern ((ShStructget0of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
  (= (ShStructrev1of2<ShStruct2<Ref~_Ref>> (ShStructget1of2<Ref> x)) x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>) (y ShStruct2<Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of2<Ref> x) (ShStructget0of2<Ref> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((t0 ShStruct3<Ref~_Ref~_Ref>) (t1 ShStruct2<Ref~_Ref>)) (!
  (and
    (=
      (get0of2<ShStruct3<Ref~_Ref~_Ref>> (tuple2<Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>> t0 t1))
      t0)
    (=
      (get1of2<ShStruct2<Ref~_Ref>> (tuple2<Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>> t0 t1))
      t1))
  :pattern ((tuple2<Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>> t0 t1))
  :qid |prog.getter_over_tuple2|)))
(assert (forall ((p Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>)) (!
  (=
    (tuple2<Tuple2<ShStruct3<Ref~_Ref~_Ref>~_ShStruct2<Ref~_Ref>>> (get0of2<ShStruct3<Ref~_Ref~_Ref>> p) (get1of2<ShStruct2<Ref~_Ref>> p))
    p)
  :pattern ((get0of2<ShStruct3<Ref~_Ref~_Ref>> p))
  :pattern ((get1of2<ShStruct2<Ref~_Ref>> p))
  :qid |prog.tuple2_over_getter|)))
(assert (forall ((t0 Int) (t1 Int) (t2 Int)) (!
  (and
    (= (get0of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> t0 t1 t2)) t0)
    (and
      (= (get1of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> t0 t1 t2)) t1)
      (= (get2of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> t0 t1 t2)) t2)))
  :pattern ((tuple3<Tuple3<Int~_Int~_Int>> t0 t1 t2))
  :qid |prog.getter_over_tuple3|)))
(assert (forall ((p Tuple3<Int~_Int~_Int>)) (!
  (=
    (tuple3<Tuple3<Int~_Int~_Int>> (get0of3<Int> p) (get1of3<Int> p) (get2of3<Int> p))
    p)
  :pattern ((get0of3<Int> p))
  :pattern ((get1of3<Int> p))
  :pattern ((get2of3<Int> p))
  :qid |prog.tuple3_over_getter|)))
(assert (forall ((l ShStruct3<Ref~_Ref~_Ref>) (r ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((s Slice<Ref>)) (!
  (<= (slen<Int> s) (scap<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((s Slice<Ref>)) (!
  (<= 0 (slen<Int> s))
  :pattern ((slen<Int> s))
  )))
; /field_value_functions_axioms.smt2 [SliceIntint$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(assert (forall ((vs $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (ws $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_SliceIntint$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_SliceIntint$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_SliceIntint$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Slice<Ref>)) (!
    (= ($FVF.loc_SliceIntint$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_SliceIntint$$$_S_$$$$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Intint$$$$_E_$$$: Int]
(assert (forall ((vs $FVF<Intint$$$$_E_$$$>) (ws $FVF<Intint$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Intint$$$$_E_$$$ vs) ($FVF.domain_Intint$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Intint$$$$_E_$$$ vs))
            (= ($FVF.lookup_Intint$$$$_E_$$$ vs x) ($FVF.lookup_Intint$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Intint$$$$_E_$$$ vs x) ($FVF.lookup_Intint$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Intint$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Intint$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Intint$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Intint$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_Intint$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Intint$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$: Slice[Ref]]
(assert (forall ((vs $FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>) (ws $FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs) ($FVF.domain_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs))
            (= ($FVF.lookup_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ vs x) ($FVF.lookup_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ ws x))
          :qid |qp.$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Slice<Ref>)) (!
    (= ($FVF.loc_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$ f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@17@00 () $Perm)
(declare-fun $k@18@00 () $Perm)
(declare-fun $k@19@00 () $Perm)
(declare-fun inv@21@00 ($Snap ShStruct1<Ref> $Ref) Int)
(declare-fun inv@28@00 ($Snap ShStruct1<Ref> $Ref) Int)
(declare-fun inv@29@00 ($Snap ShStruct1<Ref> $Ref) Int)
(declare-fun sm@24@00 ($Snap ShStruct1<Ref>) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@26@00 ($Snap ShStruct1<Ref>) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@31@00 ($Snap ShStruct1<Ref>) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@33@00 ($Snap ShStruct1<Ref>) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun $k@35@00 () $Perm)
(declare-fun $k@36@00 () $Perm)
(declare-fun $k@37@00 () $Perm)
(declare-fun $k@38@00 () $Perm)
(declare-fun inv@40@00 ($Snap ShStruct1<Ref> $Ref) Int)
(declare-fun inv@47@00 ($Snap ShStruct1<Ref> $Ref) Int)
(declare-fun inv@48@00 ($Snap ShStruct1<Ref> $Ref) Int)
(declare-fun sm@43@00 ($Snap ShStruct1<Ref>) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@45@00 ($Snap ShStruct1<Ref>) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@50@00 ($Snap ShStruct1<Ref>) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@52@00 ($Snap ShStruct1<Ref>) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@54@00 ($Snap ShStruct1<Ref>) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun $k@58@00 () $Perm)
(declare-fun $k@59@00 () $Perm)
(declare-fun $k@60@00 () $Perm)
(declare-fun $k@61@00 () $Perm)
(declare-fun $k@62@00 () $Perm)
(declare-fun $k@63@00 () $Perm)
(declare-fun inv@65@00 ($Snap ShStruct1<Ref> Int Int $Ref) Int)
(declare-fun inv@72@00 ($Snap ShStruct1<Ref> Int Int $Ref) Int)
(declare-fun inv@73@00 ($Snap ShStruct1<Ref> Int Int $Ref) Int)
(declare-fun sm@68@00 ($Snap ShStruct1<Ref> Int Int) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@70@00 ($Snap ShStruct1<Ref> Int Int) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@75@00 ($Snap ShStruct1<Ref> Int Int) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@77@00 ($Snap ShStruct1<Ref> Int Int) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@79@00 ($Snap ShStruct1<Ref> Int Int) $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
(declare-fun sm@81@00 ($Snap ShStruct1<Ref> Int Int) $FVF<Intint$$$$_E_$$$>)
(declare-fun $k@83@00 () $Perm)
(declare-fun joined_unfolding@89@00 ($Snap ShStruct2<Ref~_Ref> Int Int Int Int) Int)
(declare-fun $k@84@00 () $Perm)
(declare-fun $k@85@00 () $Perm)
(declare-fun $k@86@00 () $Perm)
(declare-fun $k@87@00 () $Perm)
(declare-fun $k@88@00 () $Perm)
(assert (forall ((s@$ $Snap) (m_V0@0@00 ShStruct1<Ref>)) (!
  (=
    (lenX_4b5075e4_PMDenseMatrix%limited s@$ m_V0@0@00)
    (lenX_4b5075e4_PMDenseMatrix s@$ m_V0@0@00))
  :pattern ((lenX_4b5075e4_PMDenseMatrix s@$ m_V0@0@00))
  :qid |quant-u-0|)))
(assert (forall ((s@$ $Snap) (m_V0@0@00 ShStruct1<Ref>)) (!
  (lenX_4b5075e4_PMDenseMatrix%stateless m_V0@0@00)
  :pattern ((lenX_4b5075e4_PMDenseMatrix%limited s@$ m_V0@0@00))
  :qid |quant-u-1|)))
(assert (forall ((s@$ $Snap) (m_V0@0@00 ShStruct1<Ref>)) (!
  (and
    (forall ((i_V1@20@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@20@00
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$))))
            (<= 0 i_V1@20@00))
          (< $Perm.No $k@18@00))
        (=
          (inv@21@00 s@$ m_V0@0@00 (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)) i_V1@20@00))
          i_V1@20@00))
      :pattern ((sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)) i_V1@20@00))
      :qid |quant-u-15|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@21@00 s@$ m_V0@0@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$))))
            (<= 0 (inv@21@00 s@$ m_V0@0@00 r)))
          (< $Perm.No $k@18@00))
        (=
          (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)) (inv@21@00 s@$ m_V0@0@00 r))
          r))
      :pattern ((inv@21@00 s@$ m_V0@0@00 r))
      :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-fctOfInv|))
    (forall ((i_V2@22@00 Int) (j_V2@23@00 Int)) (!
      (=>
        (and
          (and
            (and
              (and
                (<
                  j_V2@23@00
                  (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@24@00 s@$ m_V0@0@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)) i_V2@22@00))))
                (<= 0 j_V2@23@00))
              (<
                i_V2@22@00
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)))))
            (<= 0 i_V2@22@00))
          (< $Perm.No $k@18@00))
        (and
          (=
            (inv@28@00 s@$ m_V0@0@00 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@26@00 s@$ m_V0@0@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)) i_V2@22@00)) j_V2@23@00))
            i_V2@22@00)
          (=
            (inv@29@00 s@$ m_V0@0@00 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@26@00 s@$ m_V0@0@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)) i_V2@22@00)) j_V2@23@00))
            j_V2@23@00)))
      :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@24@00 s@$ m_V0@0@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)) i_V2@22@00))) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@26@00 s@$ m_V0@0@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)) i_V2@22@00)) j_V2@23@00))
      :pattern ((sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@26@00 s@$ m_V0@0@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)) i_V2@22@00)) j_V2@23@00))
      :qid |quant-u-17|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (and
              (and
                (<
                  (inv@29@00 s@$ m_V0@0@00 r)
                  (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@24@00 s@$ m_V0@0@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)) (inv@28@00 s@$ m_V0@0@00 r)))))
                (<= 0 (inv@29@00 s@$ m_V0@0@00 r)))
              (<
                (inv@28@00 s@$ m_V0@0@00 r)
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)))))
            (<= 0 (inv@28@00 s@$ m_V0@0@00 r)))
          (< $Perm.No $k@18@00))
        (=
          (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@26@00 s@$ m_V0@0@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$)) (inv@28@00 s@$ m_V0@0@00 r))) (inv@29@00 s@$ m_V0@0@00 r))
          r))
      :pattern ((inv@28@00 s@$ m_V0@0@00 r))
      :pattern ((inv@29@00 s@$ m_V0@0@00 r))
      :qid |Intint$$$$_E_$$$-fctOfInv|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@21@00 s@$ m_V0@0@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$))))
            (<= 0 (inv@21@00 s@$ m_V0@0@00 r)))
          (< $Perm.No $k@18@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@24@00 s@$ m_V0@0@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@24@00 s@$ m_V0@0@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef0|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@21@00 s@$ m_V0@0@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$))))
            (<= 0 (inv@21@00 s@$ m_V0@0@00 r)))
          (< $Perm.No $k@18@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@26@00 s@$ m_V0@0@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@26@00 s@$ m_V0@0@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef2|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@21@00 s@$ m_V0@0@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$))))
            (<= 0 (inv@21@00 s@$ m_V0@0@00 r)))
          (< $Perm.No $k@18@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@31@00 s@$ m_V0@0@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@31@00 s@$ m_V0@0@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef4|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@21@00 s@$ m_V0@0@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$))))
            (<= 0 (inv@21@00 s@$ m_V0@0@00 r)))
          (< $Perm.No $k@18@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@33@00 s@$ m_V0@0@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@33@00 s@$ m_V0@0@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef6|))
    ($Perm.isReadVar $k@17@00)
    ($Perm.isReadVar $k@18@00)
    ($Perm.isReadVar $k@19@00)
    (=>
      (lenX_4b5075e4_PMDenseMatrix%precondition s@$ m_V0@0@00)
      (=
        (lenX_4b5075e4_PMDenseMatrix s@$ m_V0@0@00)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first s@$))))))
  :pattern ((lenX_4b5075e4_PMDenseMatrix s@$ m_V0@0@00))
  :qid |quant-u-18|)))
(assert (forall ((s@$ $Snap) (m_V0@0@00 ShStruct1<Ref>)) (!
  true
  :pattern ((lenX_4b5075e4_PMDenseMatrix s@$ m_V0@0@00))
  :qid |quant-u-19|)))
(assert (forall ((s@$ $Snap) (m_V0@2@00 ShStruct1<Ref>)) (!
  (=
    (lenY_4b5075e4_PMDenseMatrix%limited s@$ m_V0@2@00)
    (lenY_4b5075e4_PMDenseMatrix s@$ m_V0@2@00))
  :pattern ((lenY_4b5075e4_PMDenseMatrix s@$ m_V0@2@00))
  :qid |quant-u-2|)))
(assert (forall ((s@$ $Snap) (m_V0@2@00 ShStruct1<Ref>)) (!
  (lenY_4b5075e4_PMDenseMatrix%stateless m_V0@2@00)
  :pattern ((lenY_4b5075e4_PMDenseMatrix%limited s@$ m_V0@2@00))
  :qid |quant-u-3|)))
(assert (forall ((s@$ $Snap) (m_V0@2@00 ShStruct1<Ref>)) (!
  (and
    (forall ((i_V1@39@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@39@00
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 i_V1@39@00))
          (< $Perm.No $k@37@00))
        (=
          (inv@40@00 s@$ m_V0@2@00 (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V1@39@00))
          i_V1@39@00))
      :pattern ((sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V1@39@00))
      :qid |quant-u-21|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@40@00 s@$ m_V0@2@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@40@00 s@$ m_V0@2@00 r)))
          (< $Perm.No $k@37@00))
        (=
          (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) (inv@40@00 s@$ m_V0@2@00 r))
          r))
      :pattern ((inv@40@00 s@$ m_V0@2@00 r))
      :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-fctOfInv|))
    (forall ((i_V2@41@00 Int) (j_V2@42@00 Int)) (!
      (=>
        (and
          (and
            (and
              (and
                (<
                  j_V2@42@00
                  (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@43@00 s@$ m_V0@2@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@41@00))))
                (<= 0 j_V2@42@00))
              (<
                i_V2@41@00
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))))))
            (<= 0 i_V2@41@00))
          (< $Perm.No $k@37@00))
        (and
          (=
            (inv@47@00 s@$ m_V0@2@00 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@45@00 s@$ m_V0@2@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@41@00)) j_V2@42@00))
            i_V2@41@00)
          (=
            (inv@48@00 s@$ m_V0@2@00 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@45@00 s@$ m_V0@2@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@41@00)) j_V2@42@00))
            j_V2@42@00)))
      :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@43@00 s@$ m_V0@2@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@41@00))) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@45@00 s@$ m_V0@2@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@41@00)) j_V2@42@00))
      :pattern ((sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@45@00 s@$ m_V0@2@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@41@00)) j_V2@42@00))
      :qid |quant-u-23|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (and
              (and
                (<
                  (inv@48@00 s@$ m_V0@2@00 r)
                  (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@43@00 s@$ m_V0@2@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) (inv@47@00 s@$ m_V0@2@00 r)))))
                (<= 0 (inv@48@00 s@$ m_V0@2@00 r)))
              (<
                (inv@47@00 s@$ m_V0@2@00 r)
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))))))
            (<= 0 (inv@47@00 s@$ m_V0@2@00 r)))
          (< $Perm.No $k@37@00))
        (=
          (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@45@00 s@$ m_V0@2@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) (inv@47@00 s@$ m_V0@2@00 r))) (inv@48@00 s@$ m_V0@2@00 r))
          r))
      :pattern ((inv@47@00 s@$ m_V0@2@00 r))
      :pattern ((inv@48@00 s@$ m_V0@2@00 r))
      :qid |Intint$$$$_E_$$$-fctOfInv|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@40@00 s@$ m_V0@2@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@40@00 s@$ m_V0@2@00 r)))
          (< $Perm.No $k@37@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@43@00 s@$ m_V0@2@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@43@00 s@$ m_V0@2@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r))
      :qid |qp.fvfValDef8|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@40@00 s@$ m_V0@2@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@40@00 s@$ m_V0@2@00 r)))
          (< $Perm.No $k@37@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@45@00 s@$ m_V0@2@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@45@00 s@$ m_V0@2@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r))
      :qid |qp.fvfValDef10|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@40@00 s@$ m_V0@2@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@40@00 s@$ m_V0@2@00 r)))
          (< $Perm.No $k@37@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@50@00 s@$ m_V0@2@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@50@00 s@$ m_V0@2@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r))
      :qid |qp.fvfValDef12|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@40@00 s@$ m_V0@2@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@40@00 s@$ m_V0@2@00 r)))
          (< $Perm.No $k@37@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@52@00 s@$ m_V0@2@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@52@00 s@$ m_V0@2@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r))
      :qid |qp.fvfValDef14|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@40@00 s@$ m_V0@2@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@40@00 s@$ m_V0@2@00 r)))
          (< $Perm.No $k@37@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@54@00 s@$ m_V0@2@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@54@00 s@$ m_V0@2@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r))
      :qid |qp.fvfValDef16|))
    ($Perm.isReadVar $k@35@00)
    ($Perm.isReadVar $k@36@00)
    ($Perm.isReadVar $k@37@00)
    ($Perm.isReadVar $k@38@00)
    (=>
      (lenY_4b5075e4_PMDenseMatrix%precondition s@$ m_V0@2@00)
      (=
        (lenY_4b5075e4_PMDenseMatrix s@$ m_V0@2@00)
        (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@54@00 s@$ m_V0@2@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) 0))))))
  :pattern ((lenY_4b5075e4_PMDenseMatrix s@$ m_V0@2@00))
  :qid |quant-u-24|)))
(assert (forall ((s@$ $Snap) (m_V0@2@00 ShStruct1<Ref>)) (!
  true
  :pattern ((lenY_4b5075e4_PMDenseMatrix s@$ m_V0@2@00))
  :qid |quant-u-25|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$)
    (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ s@$))
  :qid |quant-u-4|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-5|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@4@00 (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (and
      (= (ShStructget0of2<Ref> result@4@00) $Ref.null)
      (= (ShStructget1of2<Ref> result@4@00) $Ref.null))))
  :pattern ((shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-26|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@4@00 (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))) true)
  :pattern ((shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-27|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%limited s@$)
    (shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$ s@$))
  :qid |quant-u-6|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-7|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@5@00 (shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (= (ShStructget0of1<Ref> result@5@00) $Ref.null)))
  :pattern ((shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-28|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@5@00 (shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%limited s@$))) true)
  :pattern ((shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-29|)))
(assert (forall ((s@$ $Snap) (m_V0@6@00 ShStruct1<Ref>) (i_V0@7@00 Int) (j_V0@8@00 Int)) (!
  (=
    (lookup_4b5075e4_PMDenseMatrix%limited s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00)
    (lookup_4b5075e4_PMDenseMatrix s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00))
  :pattern ((lookup_4b5075e4_PMDenseMatrix s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00))
  :qid |quant-u-8|)))
(assert (forall ((s@$ $Snap) (m_V0@6@00 ShStruct1<Ref>) (i_V0@7@00 Int) (j_V0@8@00 Int)) (!
  (lookup_4b5075e4_PMDenseMatrix%stateless m_V0@6@00 i_V0@7@00 j_V0@8@00)
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00))
  :qid |quant-u-9|)))
(assert (forall ((s@$ $Snap) (m_V0@6@00 ShStruct1<Ref>) (i_V0@7@00 Int) (j_V0@8@00 Int)) (!
  (and
    (forall ((i_V1@64@00 Int)) (!
      (=>
        (and
          (and
            (<
              i_V1@64@00
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 i_V1@64@00))
          (< $Perm.No $k@62@00))
        (=
          (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V1@64@00))
          i_V1@64@00))
      :pattern ((sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V1@64@00))
      :qid |quant-u-31|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (<
              (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))
          (< $Perm.No $k@62@00))
        (=
          (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r))
          r))
      :pattern ((inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r))
      :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-fctOfInv|))
    (forall ((i_V2@66@00 Int) (j_V2@67@00 Int)) (!
      (=>
        (and
          (and
            (and
              (and
                (<
                  j_V2@67@00
                  (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@68@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@66@00))))
                (<= 0 j_V2@67@00))
              (<
                i_V2@66@00
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))))))
            (<= 0 i_V2@66@00))
          (< $Perm.No $k@62@00))
        (and
          (=
            (inv@72@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@70@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@66@00)) j_V2@67@00))
            i_V2@66@00)
          (=
            (inv@73@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@70@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@66@00)) j_V2@67@00))
            j_V2@67@00)))
      :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@68@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@66@00))) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@70@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@66@00)) j_V2@67@00))
      :pattern ((sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@70@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V2@66@00)) j_V2@67@00))
      :qid |quant-u-33|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (and
              (and
                (<
                  (inv@73@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)
                  (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@68@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) (inv@72@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))))
                (<= 0 (inv@73@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))
              (<
                (inv@72@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))))))
            (<= 0 (inv@72@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))
          (< $Perm.No $k@62@00))
        (=
          (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@70@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) (inv@72@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r))) (inv@73@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r))
          r))
      :pattern ((inv@72@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r))
      :pattern ((inv@73@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r))
      :qid |Intint$$$$_E_$$$-fctOfInv|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))
          (< $Perm.No $k@62@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@68@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@68@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r))
      :qid |qp.fvfValDef18|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))
          (< $Perm.No $k@62@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@70@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@70@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r))
      :qid |qp.fvfValDef20|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))
          (< $Perm.No $k@62@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@75@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@75@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r))
      :qid |qp.fvfValDef22|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))
          (< $Perm.No $k@62@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@77@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@77@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r))
      :qid |qp.fvfValDef24|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (<
              (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$)))))
            (<= 0 (inv@65@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))
          (< $Perm.No $k@62@00)
          false)
        (=
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@79@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r)
          ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r)))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@79@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r))
      :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first s@$)))) r))
      :qid |qp.fvfValDef26|))
    (forall ((r $Ref)) (!
      (=>
        (ite
          (and
            (and
              (and
                (<
                  (inv@73@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)
                  (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@68@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) (inv@72@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))))
                (<= 0 (inv@73@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))
              (<
                (inv@72@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))))))
            (<= 0 (inv@72@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00 r)))
          (< $Perm.No $k@62@00)
          false)
        (=
          ($FVF.lookup_Intint$$$$_E_$$$ (sm@81@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r)
          ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first s@$))))) r)))
      :pattern (($FVF.lookup_Intint$$$$_E_$$$ (sm@81@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) r))
      :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first s@$))))) r))
      :qid |qp.fvfValDef28|))
    ($Perm.isReadVar $k@58@00)
    ($Perm.isReadVar $k@59@00)
    ($Perm.isReadVar $k@60@00)
    ($Perm.isReadVar $k@61@00)
    ($Perm.isReadVar $k@62@00)
    ($Perm.isReadVar $k@63@00)
    (=>
      (lookup_4b5075e4_PMDenseMatrix%precondition s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00)
      (=
        (lookup_4b5075e4_PMDenseMatrix s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00)
        ($FVF.lookup_Intint$$$$_E_$$$ (sm@81@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (sm@79@00 s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first s@$))) i_V0@7@00)) j_V0@8@00)))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00))
  :qid |quant-u-34|)))
(assert (forall ((s@$ $Snap) (m_V0@6@00 ShStruct1<Ref>) (i_V0@7@00 Int) (j_V0@8@00 Int)) (!
  true
  :pattern ((lookup_4b5075e4_PMDenseMatrix s@$ m_V0@6@00 i_V0@7@00 j_V0@8@00))
  :qid |quant-u-35|)))
(assert (forall ((s@$ $Snap) (m_V0@10@00 ShStruct2<Ref~_Ref>) (maxRow_V0@11@00 Int) (maxColumn_V0@12@00 Int) (i_V0@13@00 Int) (j_V0@14@00 Int)) (!
  (=
    (LookupL_4b5075e4_F%limited s@$ m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00)
    (LookupL_4b5075e4_F s@$ m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00))
  :pattern ((LookupL_4b5075e4_F s@$ m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00))
  :qid |quant-u-10|)))
(assert (forall ((s@$ $Snap) (m_V0@10@00 ShStruct2<Ref~_Ref>) (maxRow_V0@11@00 Int) (maxColumn_V0@12@00 Int) (i_V0@13@00 Int) (j_V0@14@00 Int)) (!
  (LookupL_4b5075e4_F%stateless m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00)
  :pattern ((LookupL_4b5075e4_F%limited s@$ m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00))
  :qid |quant-u-11|)))
(assert (forall ((s@$ $Snap) (m_V0@10@00 ShStruct2<Ref~_Ref>) (maxRow_V0@11@00 Int) (maxColumn_V0@12@00 Int) (i_V0@13@00 Int) (j_V0@14@00 Int)) (!
  (and
    ($Perm.isReadVar $k@83@00)
    ($Perm.isReadVar $k@84@00)
    ($Perm.isReadVar $k@85@00)
    ($Perm.isReadVar $k@86@00)
    ($Perm.isReadVar $k@87@00)
    ($Perm.isReadVar $k@88@00)
    (=>
      (LookupL_4b5075e4_F%precondition s@$ m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00)
      (=
        (LookupL_4b5075e4_F s@$ m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00)
        (ite
          (=
            m_V0@10@00
            (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
          0
          (ite
            (and
              (=
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$))))
                i_V0@13@00)
              (=
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second s@$)))))))
                j_V0@14@00))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second s@$)))))))))
            (LookupL_4b5075e4_F%limited ($Snap.second ($Snap.second ($Snap.second s@$))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00))))))
  :pattern ((LookupL_4b5075e4_F s@$ m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00))
  :pattern ((LookupL_4b5075e4_F%stateless m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00) (sparseMatrix_4b5075e4_F%trigger s@$ m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00))
  :qid |quant-u-36|)))
(assert (forall ((s@$ $Snap) (m_V0@10@00 ShStruct2<Ref~_Ref>) (maxRow_V0@11@00 Int) (maxColumn_V0@12@00 Int) (i_V0@13@00 Int) (j_V0@14@00 Int)) (!
  (=>
    (LookupL_4b5075e4_F%precondition s@$ m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00)
    (and
      (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
      (ite
        (=
          m_V0@10@00
          (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
        true
        (ite
          (and
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$))))
              i_V0@13@00)
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second s@$)))))))
              j_V0@14@00))
          true
          (LookupL_4b5075e4_F%precondition ($Snap.second ($Snap.second ($Snap.second s@$))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00)))))
  :pattern ((LookupL_4b5075e4_F s@$ m_V0@10@00 maxRow_V0@11@00 maxColumn_V0@12@00 i_V0@13@00 j_V0@14@00))
  :qid |quant-u-37|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%limited s@$)
    (shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$ s@$))
  :qid |quant-u-12|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%limited s@$))
  :qid |quant-u-13|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@16@00 (shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%precondition s@$)
    (and
      (= (ShStructget0of3<Ref> result@16@00) $Ref.null)
      (and
        (= (ShStructget1of3<Ref> result@16@00) $Ref.null)
        (= (ShStructget2of3<Ref> result@16@00) $Ref.null)))))
  :pattern ((shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%limited s@$))
  :qid |quant-u-38|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@16@00 (shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%limited s@$))) true)
  :pattern ((shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%limited s@$))
  :qid |quant-u-39|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $IMPORTS_4b5075e4_4b5075e4 ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; label returnLabel
(pop) ; 2
(pop) ; 1
; ---------- $INIT_4b5075e4_9bbec4d ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; label returnLabel
(pop) ; 2
(pop) ; 1
; ---------- multAlt_4b5075e4_PMDenseMatrix ----------
(declare-const m_V0@0@01 ShStruct1<Ref>)
(declare-const z_V0@1@01 Int)
(declare-const m_V0@2@01 ShStruct1<Ref>)
(declare-const z_V0@3@01 Int)
(push) ; 1
(declare-const $t@4@01 $Snap)
(assert (= $t@4@01 ($Snap.combine ($Snap.first $t@4@01) ($Snap.second $t@4@01))))
(assert (= ($Snap.second $t@4@01) $Snap.unit))
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 2
(declare-const $k@5@01 $Perm)
(assert ($Perm.isReadVar $k@5@01))
(assert (< $k@5@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@5@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@5@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@4@01) m_V0@2@01))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@5@01))
(assert (and
  (< $k@5@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@5@01))
  (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@4@01) m_V0@2@01)))
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01) 0)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@6@01 $Snap)
(assert (= $t@6@01 ($Snap.combine ($Snap.first $t@6@01) ($Snap.second $t@6@01))))
(assert (=
  ($Snap.second $t@6@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@6@01))
    ($Snap.second ($Snap.second $t@6@01)))))
(assert (= ($Snap.first ($Snap.second $t@6@01)) $Snap.unit))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == old(lenX_4b5075e4_PMDenseMatrix(m_V0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 3
(declare-const $k@7@01 $Perm)
(assert ($Perm.isReadVar $k@7@01))
(assert (< $k@7@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@7@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@7@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@6@01) m_V0@2@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@7@01))
(assert (and
  (< $k@7@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@7@01))
  (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@6@01) m_V0@2@01)))
; [eval] old(lenX_4b5075e4_PMDenseMatrix(m_V0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@8@01 $Perm)
(assert ($Perm.isReadVar $k@8@01))
(assert (< $k@8@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@8@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@8@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@8@01))
(assert (and (< $k@8@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@8@01))))
(assert (=
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second $t@6@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@6@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@6@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@6@01))) $Snap.unit))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0) == old(lenY_4b5075e4_PMDenseMatrix(m_V0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@9@01 $Perm)
(assert ($Perm.isReadVar $k@9@01))
(assert (< $k@9@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@9@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@9@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@10@01 $Perm)
(assert ($Perm.isReadVar $k@10@01))
(assert (< $k@10@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@10@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@10@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@10@01))
(assert (and (< $k@10@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@10@01))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01) 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01) 0)))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@6@01)
  $Snap.unit) m_V0@2@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@9@01))
(assert ($Perm.isReadVar $k@10@01))
(assert (and
  (< $k@9@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@9@01))
  (< $k@10@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@10@01))
  (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01) 0))
  (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@6@01)
    $Snap.unit) m_V0@2@01)))
; [eval] old(lenY_4b5075e4_PMDenseMatrix(m_V0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 3
(declare-const $k@11@01 $Perm)
(assert ($Perm.isReadVar $k@11@01))
(assert (< $k@11@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@11@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@11@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@12@01 $Perm)
(assert ($Perm.isReadVar $k@12@01))
(assert (< $k@12@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@12@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@12@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@12@01))
(assert (and (< $k@12@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@12@01))))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  $Snap.unit) m_V0@2@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@11@01))
(assert ($Perm.isReadVar $k@12@01))
(assert (and
  (< $k@11@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@11@01))
  (< $k@12@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@12@01))
  (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    $Snap.unit) m_V0@2@01)))
(assert (=
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@6@01) $Snap.unit) m_V0@2@01)
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@6@01))) $Snap.unit))
; [eval] (forall i_V1: Int, j_V1: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0, i_V1, j_V1) } 0 <= i_V1 && (i_V1 < lenX_4b5075e4_PMDenseMatrix(m_V0) && (0 <= j_V1 && j_V1 < lenY_4b5075e4_PMDenseMatrix(m_V0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0, i_V1, j_V1) == old(lookup_4b5075e4_PMDenseMatrix(m_V0, i_V1, j_V1)) * z_V0)
(declare-const i_V1@13@01 Int)
(declare-const j_V1@14@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i_V1 && (i_V1 < lenX_4b5075e4_PMDenseMatrix(m_V0) && (0 <= j_V1 && j_V1 < lenY_4b5075e4_PMDenseMatrix(m_V0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0, i_V1, j_V1) == old(lookup_4b5075e4_PMDenseMatrix(m_V0, i_V1, j_V1)) * z_V0
; [eval] 0 <= i_V1 && (i_V1 < lenX_4b5075e4_PMDenseMatrix(m_V0) && (0 <= j_V1 && j_V1 < lenY_4b5075e4_PMDenseMatrix(m_V0)))
; [eval] 0 <= i_V1
(push) ; 4
; [then-branch: 0 | 0 <= i_V1@13@01 | live]
; [else-branch: 0 | !(0 <= i_V1@13@01) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i_V1@13@01]
(assert (<= 0 i_V1@13@01))
; [eval] i_V1 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 6
(declare-const $k@15@01 $Perm)
(assert ($Perm.isReadVar $k@15@01))
(assert (< $k@15@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@15@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@15@01))
(assert (and (< $k@15@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@15@01))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1 | i_V1@13@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@6@01), m_V0@2@01) | live]
; [else-branch: 1 | !(i_V1@13@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@6@01), m_V0@2@01)) | live]
(push) ; 7
; [then-branch: 1 | i_V1@13@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@6@01), m_V0@2@01)]
(assert (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
; [eval] 0 <= j_V1
(push) ; 8
; [then-branch: 2 | 0 <= j_V1@14@01 | live]
; [else-branch: 2 | !(0 <= j_V1@14@01) | live]
(push) ; 9
; [then-branch: 2 | 0 <= j_V1@14@01]
(assert (<= 0 j_V1@14@01))
; [eval] j_V1 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 10
(declare-const $k@16@01 $Perm)
(assert ($Perm.isReadVar $k@16@01))
(assert (< $k@16@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@16@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@16@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@17@01 $Perm)
(assert ($Perm.isReadVar $k@17@01))
(assert (< $k@17@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@17@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@17@01))
(assert (and (< $k@17@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@17@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@16@01))
(assert ($Perm.isReadVar $k@17@01))
(assert (and
  (< $k@16@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@16@01))
  (< $k@17@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@17@01))))
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 2 | !(0 <= j_V1@14@01)]
(assert (not (<= 0 j_V1@14@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@16@01))
(assert ($Perm.isReadVar $k@17@01))
(assert (=>
  (<= 0 j_V1@14@01)
  (and
    (<= 0 j_V1@14@01)
    (< $k@16@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@16@01))
    (< $k@17@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@17@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V1@14@01)) (<= 0 j_V1@14@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 1 | !(i_V1@13@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@6@01), m_V0@2@01))]
(assert (not
  (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@16@01))
(assert ($Perm.isReadVar $k@17@01))
(assert (=>
  (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01))
  (and
    (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01))
    (=>
      (<= 0 j_V1@14@01)
      (and
        (<= 0 j_V1@14@01)
        (< $k@16@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@16@01))
        (< $k@17@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@17@01))))
    (or (not (<= 0 j_V1@14@01)) (<= 0 j_V1@14@01)))))
; Joined path conditions
(assert (or
  (not
    (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
  (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i_V1@13@01)]
(assert (not (<= 0 i_V1@13@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@15@01))
(assert ($Perm.isReadVar $k@16@01))
(assert ($Perm.isReadVar $k@17@01))
(assert (=>
  (<= 0 i_V1@13@01)
  (and
    (<= 0 i_V1@13@01)
    (< $k@15@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@15@01))
    (=>
      (<
        i_V1@13@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01))
      (and
        (<
          i_V1@13@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01))
        (=>
          (<= 0 j_V1@14@01)
          (and
            (<= 0 j_V1@14@01)
            (< $k@16@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@16@01))
            (< $k@17@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@17@01))))
        (or (not (<= 0 j_V1@14@01)) (<= 0 j_V1@14@01))))
    (or
      (not
        (<
          i_V1@13@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
      (<
        i_V1@13@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@13@01)) (<= 0 i_V1@13@01)))
(push) ; 4
; [then-branch: 3 | j_V1@14@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@6@01), _), m_V0@2@01) && 0 <= j_V1@14@01 && i_V1@13@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@6@01), m_V0@2@01) && 0 <= i_V1@13@01 | live]
; [else-branch: 3 | !(j_V1@14@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@6@01), _), m_V0@2@01) && 0 <= j_V1@14@01 && i_V1@13@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@6@01), m_V0@2@01) && 0 <= i_V1@13@01) | live]
(push) ; 5
; [then-branch: 3 | j_V1@14@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@6@01), _), m_V0@2@01) && 0 <= j_V1@14@01 && i_V1@13@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@6@01), m_V0@2@01) && 0 <= i_V1@13@01]
(assert (and
  (and
    (and
      (<
        j_V1@14@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@6@01)
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V1@14@01))
    (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
  (<= 0 i_V1@13@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0, i_V1, j_V1) == old(lookup_4b5075e4_PMDenseMatrix(m_V0, i_V1, j_V1)) * z_V0
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0, i_V1, j_V1)
(push) ; 6
(declare-const $k@18@01 $Perm)
(assert ($Perm.isReadVar $k@18@01))
(assert (< $k@18@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@18@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@19@01 $Perm)
(assert ($Perm.isReadVar $k@19@01))
(assert (< $k@19@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@19@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@19@01))
(assert (and (< $k@19@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@19@01))))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@20@01 $Perm)
(assert ($Perm.isReadVar $k@20@01))
(assert (< $k@20@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@20@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@21@01 $Perm)
(assert ($Perm.isReadVar $k@21@01))
(assert (< $k@21@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@21@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@21@01))
(assert (and (< $k@21@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@21@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@20@01))
(assert ($Perm.isReadVar $k@21@01))
(assert (and
  (< $k@20@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@20@01))
  (< $k@21@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@21@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@6@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@18@01))
(assert ($Perm.isReadVar $k@19@01))
(assert ($Perm.isReadVar $k@20@01))
(assert ($Perm.isReadVar $k@21@01))
(assert (and
  (< $k@18@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@18@01))
  (< $k@19@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@19@01))
  (< $k@20@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@20@01))
  (< $k@21@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@21@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@6@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0, i_V1, j_V1)) * z_V0
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0, i_V1, j_V1))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0, i_V1, j_V1)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@22@01 $Perm)
(assert ($Perm.isReadVar $k@22@01))
(assert (< $k@22@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@22@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@22@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@23@01 $Perm)
(assert ($Perm.isReadVar $k@23@01))
(assert (< $k@23@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@23@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@23@01))
(assert (and (< $k@23@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@23@01))))
(set-option :timeout 0)
(push) ; 7
(assert (not (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 7
(declare-const $k@24@01 $Perm)
(assert ($Perm.isReadVar $k@24@01))
(assert (< $k@24@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@24@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@24@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@25@01 $Perm)
(assert ($Perm.isReadVar $k@25@01))
(assert (< $k@25@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@25@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@25@01))
(assert (and (< $k@25@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@25@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@24@01))
(assert ($Perm.isReadVar $k@25@01))
(assert (and
  (< $k@24@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@24@01))
  (< $k@25@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@25@01))))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  j_V1@14@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V1@14@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@22@01))
(assert ($Perm.isReadVar $k@23@01))
(assert ($Perm.isReadVar $k@24@01))
(assert ($Perm.isReadVar $k@25@01))
(assert (and
  (< $k@22@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@22@01))
  (< $k@23@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@23@01))
  (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@24@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@24@01))
  (< $k@25@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@25@01))
  (<
    j_V1@14@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | !(j_V1@14@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@6@01), _), m_V0@2@01) && 0 <= j_V1@14@01 && i_V1@13@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@6@01), m_V0@2@01) && 0 <= i_V1@13@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V1@14@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@6@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V1@14@01))
      (<
        i_V1@13@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
    (<= 0 i_V1@13@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@18@01))
(assert ($Perm.isReadVar $k@19@01))
(assert ($Perm.isReadVar $k@20@01))
(assert ($Perm.isReadVar $k@21@01))
(assert ($Perm.isReadVar $k@22@01))
(assert ($Perm.isReadVar $k@23@01))
(assert ($Perm.isReadVar $k@24@01))
(assert ($Perm.isReadVar $k@25@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V1@14@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@6@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V1@14@01))
      (<
        i_V1@13@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
    (<= 0 i_V1@13@01))
  (and
    (<
      j_V1@14@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@6@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V1@14@01)
    (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01))
    (<= 0 i_V1@13@01)
    (< $k@18@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@18@01))
    (< $k@19@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@19@01))
    (< $k@20@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@20@01))
    (< $k@21@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@21@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@6@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01)
    (< $k@22@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@22@01))
    (< $k@23@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@23@01))
    (< i_V1@13@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@24@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@24@01))
    (< $k@25@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@25@01))
    (<
      j_V1@14@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V1@14@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@6@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V1@14@01))
        (<
          i_V1@13@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
      (<= 0 i_V1@13@01)))
  (and
    (and
      (and
        (<
          j_V1@14@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@6@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V1@14@01))
      (<
        i_V1@13@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
    (<= 0 i_V1@13@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@15@01))
(assert ($Perm.isReadVar $k@16@01))
(assert ($Perm.isReadVar $k@17@01))
(assert ($Perm.isReadVar $k@18@01))
(assert ($Perm.isReadVar $k@19@01))
(assert ($Perm.isReadVar $k@20@01))
(assert ($Perm.isReadVar $k@21@01))
(assert ($Perm.isReadVar $k@22@01))
(assert ($Perm.isReadVar $k@23@01))
(assert ($Perm.isReadVar $k@24@01))
(assert ($Perm.isReadVar $k@25@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@13@01 Int) (j_V1@14@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@13@01)
      (and
        (<= 0 i_V1@13@01)
        (< $k@15@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@15@01))
        (=>
          (<
            i_V1@13@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01))
          (and
            (<
              i_V1@13@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01))
            (=>
              (<= 0 j_V1@14@01)
              (and
                (<= 0 j_V1@14@01)
                (< $k@16@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@16@01))
                (< $k@17@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@17@01))))
            (or (not (<= 0 j_V1@14@01)) (<= 0 j_V1@14@01))))
        (or
          (not
            (<
              i_V1@13@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
          (<
            i_V1@13@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))))
    (or (not (<= 0 i_V1@13@01)) (<= 0 i_V1@13@01))
    (=>
      (and
        (and
          (and
            (<
              j_V1@14@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@6@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V1@14@01))
          (<
            i_V1@13@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
        (<= 0 i_V1@13@01))
      (and
        (<
          j_V1@14@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@6@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V1@14@01)
        (<
          i_V1@13@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01))
        (<= 0 i_V1@13@01)
        (< $k@18@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@18@01))
        (< $k@19@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@19@01))
        (< $k@20@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@20@01))
        (< $k@21@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@21@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@6@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01)
        (< $k@22@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@22@01))
        (< $k@23@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@23@01))
        (<
          i_V1@13@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@24@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@24@01))
        (< $k@25@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@25@01))
        (<
          j_V1@14@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V1@14@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@6@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V1@14@01))
            (<
              i_V1@13@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
          (<= 0 i_V1@13@01)))
      (and
        (and
          (and
            (<
              j_V1@14@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@6@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V1@14@01))
          (<
            i_V1@13@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
        (<= 0 i_V1@13@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@6@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01))
  :qid |prog.l350-aux|)))
(assert (forall ((i_V1@13@01 Int) (j_V1@14@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V1@14@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@6@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V1@14@01))
        (<
          i_V1@13@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@6@01) m_V0@2@01)))
      (<= 0 i_V1@13@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@6@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@6@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V1@13@01 j_V1@14@01))
  :qid |prog.l350|)))
(pop) ; 2
(push) ; 2
; [exec]
; var z_V0_CN1: Int
(declare-const z_V0_CN1@26@01 Int)
; [exec]
; var m_V0_CN0: ShStruct1[Ref]
(declare-const m_V0_CN0@27@01 ShStruct1<Ref>)
; [exec]
; var x_V2: Int
(declare-const x_V2@28@01 Int)
; [exec]
; inhale m_V0_CN0 ==
;   shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$()
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 $Snap.unit))
; [eval] m_V0_CN0 == shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  m_V0_CN0@27@01
  (shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale z_V0_CN1 == 0
(declare-const $t@30@01 $Snap)
(assert (= $t@30@01 $Snap.unit))
; [eval] z_V0_CN1 == 0
(assert (= z_V0_CN1@26@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; m_V0_CN0 := m_V0
; [exec]
; z_V0_CN1 := z_V0
; [exec]
; inhale x_V2 == 0
(declare-const $t@31@01 $Snap)
(assert (= $t@31@01 $Snap.unit))
; [eval] x_V2 == 0
(assert (= x_V2@28@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; x_V2 := 0
(declare-const y_V5@32@01 Int)
(declare-const x_V2@33@01 Int)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@34@01 $Snap)
(assert (= $t@34@01 ($Snap.combine ($Snap.first $t@34@01) ($Snap.second $t@34@01))))
(assert (=
  ($Snap.second $t@34@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@34@01))
    ($Snap.second ($Snap.second $t@34@01)))))
(assert (= ($Snap.first ($Snap.second $t@34@01)) $Snap.unit))
; [eval] 0 <= x_V2
(assert (<= 0 x_V2@33@01))
(assert (=
  ($Snap.second ($Snap.second $t@34@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@34@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@34@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@34@01))) $Snap.unit))
; [eval] x_V2 <= lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 4
(declare-const $k@35@01 $Perm)
(assert ($Perm.isReadVar $k@35@01))
(assert (< $k@35@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@35@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@35@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@34@01) m_V0@2@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@35@01))
(assert (and
  (< $k@35@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@35@01))
  (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@34@01) m_V0@2@01)))
(assert (<= x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@34@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@01))))
  $Snap.unit))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) == old(lenX_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@36@01 $Perm)
(assert ($Perm.isReadVar $k@36@01))
(assert (< $k@36@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@36@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@36@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@36@01))
(assert (and (< $k@36@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@36@01))))
; [eval] old(lenX_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@37@01 $Perm)
(assert ($Perm.isReadVar $k@37@01))
(assert (< $k@37@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@37@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@37@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@37@01))
(assert (and (< $k@37@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@37@01))))
(assert (=
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01)))))
  $Snap.unit))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0) == old(lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@38@01 $Perm)
(assert ($Perm.isReadVar $k@38@01))
(assert (< $k@38@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@38@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@38@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@39@01 $Perm)
(assert ($Perm.isReadVar $k@39@01))
(assert (< $k@39@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@39@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@39@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@39@01))
(assert (and (< $k@39@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@39@01))))
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01) 0)))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@34@01)
  $Snap.unit) m_V0@2@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@38@01))
(assert ($Perm.isReadVar $k@39@01))
(assert (and
  (< $k@38@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@38@01))
  (< $k@39@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@39@01))
  (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01) 0))
  (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@34@01)
    $Snap.unit) m_V0@2@01)))
; [eval] old(lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 4
(declare-const $k@40@01 $Perm)
(assert ($Perm.isReadVar $k@40@01))
(assert (< $k@40@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@40@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@40@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@41@01 $Perm)
(assert ($Perm.isReadVar $k@41@01))
(assert (< $k@41@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@41@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@41@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@41@01))
(assert (and (< $k@41@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@41@01))))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  $Snap.unit) m_V0@2@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@40@01))
(assert ($Perm.isReadVar $k@41@01))
(assert (and
  (< $k@40@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@40@01))
  (< $k@41@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@41@01))
  (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    $Snap.unit) m_V0@2@01)))
(assert (=
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@34@01) $Snap.unit) m_V0@2@01)
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01))))))
  $Snap.unit))
; [eval] (forall i_V3: Int, j_V3: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) } 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1)
(declare-const i_V3@42@01 Int)
(declare-const j_V3@43@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] 0 <= i_V3
(push) ; 5
; [then-branch: 4 | 0 <= i_V3@42@01 | live]
; [else-branch: 4 | !(0 <= i_V3@42@01) | live]
(push) ; 6
; [then-branch: 4 | 0 <= i_V3@42@01]
(assert (<= 0 i_V3@42@01))
; [eval] i_V3 < x_V2
(push) ; 7
; [then-branch: 5 | i_V3@42@01 < x_V2@33@01 | live]
; [else-branch: 5 | !(i_V3@42@01 < x_V2@33@01) | live]
(push) ; 8
; [then-branch: 5 | i_V3@42@01 < x_V2@33@01]
(assert (< i_V3@42@01 x_V2@33@01))
; [eval] 0 <= j_V3
(push) ; 9
; [then-branch: 6 | 0 <= j_V3@43@01 | live]
; [else-branch: 6 | !(0 <= j_V3@43@01) | live]
(push) ; 10
; [then-branch: 6 | 0 <= j_V3@43@01]
(assert (<= 0 j_V3@43@01))
; [eval] j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 11
(declare-const $k@44@01 $Perm)
(assert ($Perm.isReadVar $k@44@01))
(assert (< $k@44@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@44@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@44@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@45@01 $Perm)
(assert ($Perm.isReadVar $k@45@01))
(assert (< $k@45@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@45@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@45@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@45@01))
(assert (and (< $k@45@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@45@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@44@01))
(assert ($Perm.isReadVar $k@45@01))
(assert (and
  (< $k@44@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@44@01))
  (< $k@45@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@45@01))))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 6 | !(0 <= j_V3@43@01)]
(assert (not (<= 0 j_V3@43@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@44@01))
(assert ($Perm.isReadVar $k@45@01))
(assert (=>
  (<= 0 j_V3@43@01)
  (and
    (<= 0 j_V3@43@01)
    (< $k@44@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@44@01))
    (< $k@45@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@45@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V3@43@01)) (<= 0 j_V3@43@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 5 | !(i_V3@42@01 < x_V2@33@01)]
(assert (not (< i_V3@42@01 x_V2@33@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@44@01))
(assert ($Perm.isReadVar $k@45@01))
(assert (=>
  (< i_V3@42@01 x_V2@33@01)
  (and
    (< i_V3@42@01 x_V2@33@01)
    (=>
      (<= 0 j_V3@43@01)
      (and
        (<= 0 j_V3@43@01)
        (< $k@44@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@44@01))
        (< $k@45@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@45@01))))
    (or (not (<= 0 j_V3@43@01)) (<= 0 j_V3@43@01)))))
; Joined path conditions
(assert (or (not (< i_V3@42@01 x_V2@33@01)) (< i_V3@42@01 x_V2@33@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 4 | !(0 <= i_V3@42@01)]
(assert (not (<= 0 i_V3@42@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@44@01))
(assert ($Perm.isReadVar $k@45@01))
(assert (=>
  (<= 0 i_V3@42@01)
  (and
    (<= 0 i_V3@42@01)
    (=>
      (< i_V3@42@01 x_V2@33@01)
      (and
        (< i_V3@42@01 x_V2@33@01)
        (=>
          (<= 0 j_V3@43@01)
          (and
            (<= 0 j_V3@43@01)
            (< $k@44@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@44@01))
            (< $k@45@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@45@01))))
        (or (not (<= 0 j_V3@43@01)) (<= 0 j_V3@43@01))))
    (or (not (< i_V3@42@01 x_V2@33@01)) (< i_V3@42@01 x_V2@33@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V3@42@01)) (<= 0 i_V3@42@01)))
(push) ; 5
; [then-branch: 7 | j_V3@43@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V3@43@01 && i_V3@42@01 < x_V2@33@01 && 0 <= i_V3@42@01 | live]
; [else-branch: 7 | !(j_V3@43@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V3@43@01 && i_V3@42@01 < x_V2@33@01 && 0 <= i_V3@42@01) | live]
(push) ; 6
; [then-branch: 7 | j_V3@43@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V3@43@01 && i_V3@42@01 < x_V2@33@01 && 0 <= i_V3@42@01]
(assert (and
  (and
    (and
      (<
        j_V3@43@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@34@01)
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V3@43@01))
    (< i_V3@42@01 x_V2@33@01))
  (<= 0 i_V3@42@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(push) ; 7
(declare-const $k@46@01 $Perm)
(assert ($Perm.isReadVar $k@46@01))
(assert (< $k@46@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@46@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@47@01 $Perm)
(assert ($Perm.isReadVar $k@47@01))
(assert (< $k@47@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@47@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@47@01))
(assert (and (< $k@47@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@47@01))))
(set-option :timeout 0)
(push) ; 8
(assert (not (< i_V3@42@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (< i_V3@42@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 8
(declare-const $k@48@01 $Perm)
(assert ($Perm.isReadVar $k@48@01))
(assert (< $k@48@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@48@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@48@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@49@01 $Perm)
(assert ($Perm.isReadVar $k@49@01))
(assert (< $k@49@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@49@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@49@01))
(assert (and (< $k@49@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@49@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@48@01))
(assert ($Perm.isReadVar $k@49@01))
(assert (and
  (< $k@48@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@48@01))
  (< $k@49@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@49@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@34@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@46@01))
(assert ($Perm.isReadVar $k@47@01))
(assert ($Perm.isReadVar $k@48@01))
(assert ($Perm.isReadVar $k@49@01))
(assert (and
  (< $k@46@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@46@01))
  (< $k@47@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@47@01))
  (< i_V3@42@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
  (< $k@48@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@48@01))
  (< $k@49@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@49@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@50@01 $Perm)
(assert ($Perm.isReadVar $k@50@01))
(assert (< $k@50@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@50@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@51@01 $Perm)
(assert ($Perm.isReadVar $k@51@01))
(assert (< $k@51@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@51@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@51@01))
(assert (and (< $k@51@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@51@01))))
(set-option :timeout 0)
(push) ; 8
(assert (not (< i_V3@42@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (< i_V3@42@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 8
(declare-const $k@52@01 $Perm)
(assert ($Perm.isReadVar $k@52@01))
(assert (< $k@52@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@52@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@52@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@53@01 $Perm)
(assert ($Perm.isReadVar $k@53@01))
(assert (< $k@53@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@53@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@53@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@53@01))
(assert (and (< $k@53@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@53@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@52@01))
(assert ($Perm.isReadVar $k@53@01))
(assert (and
  (< $k@52@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@52@01))
  (< $k@53@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@53@01))))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  j_V3@43@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V3@43@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@50@01))
(assert ($Perm.isReadVar $k@51@01))
(assert ($Perm.isReadVar $k@52@01))
(assert ($Perm.isReadVar $k@53@01))
(assert (and
  (< $k@50@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@50@01))
  (< $k@51@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@51@01))
  (< i_V3@42@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@52@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@52@01))
  (< $k@53@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@53@01))
  (<
    j_V3@43@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 7 | !(j_V3@43@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V3@43@01 && i_V3@42@01 < x_V2@33@01 && 0 <= i_V3@42@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V3@43@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@43@01))
      (< i_V3@42@01 x_V2@33@01))
    (<= 0 i_V3@42@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@46@01))
(assert ($Perm.isReadVar $k@47@01))
(assert ($Perm.isReadVar $k@48@01))
(assert ($Perm.isReadVar $k@49@01))
(assert ($Perm.isReadVar $k@50@01))
(assert ($Perm.isReadVar $k@51@01))
(assert ($Perm.isReadVar $k@52@01))
(assert ($Perm.isReadVar $k@53@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V3@43@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@43@01))
      (< i_V3@42@01 x_V2@33@01))
    (<= 0 i_V3@42@01))
  (and
    (<
      j_V3@43@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V3@43@01)
    (< i_V3@42@01 x_V2@33@01)
    (<= 0 i_V3@42@01)
    (< $k@46@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@46@01))
    (< $k@47@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@47@01))
    (< i_V3@42@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
    (< $k@48@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@48@01))
    (< $k@49@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@49@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@34@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01)
    (< $k@50@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@50@01))
    (< $k@51@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@51@01))
    (< i_V3@42@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@52@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@52@01))
    (< $k@53@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@53@01))
    (<
      j_V3@43@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V3@43@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@43@01))
        (< i_V3@42@01 x_V2@33@01))
      (<= 0 i_V3@42@01)))
  (and
    (and
      (and
        (<
          j_V3@43@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@43@01))
      (< i_V3@42@01 x_V2@33@01))
    (<= 0 i_V3@42@01))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@44@01))
(assert ($Perm.isReadVar $k@45@01))
(assert ($Perm.isReadVar $k@46@01))
(assert ($Perm.isReadVar $k@47@01))
(assert ($Perm.isReadVar $k@48@01))
(assert ($Perm.isReadVar $k@49@01))
(assert ($Perm.isReadVar $k@50@01))
(assert ($Perm.isReadVar $k@51@01))
(assert ($Perm.isReadVar $k@52@01))
(assert ($Perm.isReadVar $k@53@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@42@01 Int) (j_V3@43@01 Int)) (!
  (and
    (=>
      (<= 0 i_V3@42@01)
      (and
        (<= 0 i_V3@42@01)
        (=>
          (< i_V3@42@01 x_V2@33@01)
          (and
            (< i_V3@42@01 x_V2@33@01)
            (=>
              (<= 0 j_V3@43@01)
              (and
                (<= 0 j_V3@43@01)
                (< $k@44@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@44@01))
                (< $k@45@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@45@01))))
            (or (not (<= 0 j_V3@43@01)) (<= 0 j_V3@43@01))))
        (or (not (< i_V3@42@01 x_V2@33@01)) (< i_V3@42@01 x_V2@33@01))))
    (or (not (<= 0 i_V3@42@01)) (<= 0 i_V3@42@01))
    (=>
      (and
        (and
          (and
            (<
              j_V3@43@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@43@01))
          (< i_V3@42@01 x_V2@33@01))
        (<= 0 i_V3@42@01))
      (and
        (<
          j_V3@43@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@43@01)
        (< i_V3@42@01 x_V2@33@01)
        (<= 0 i_V3@42@01)
        (< $k@46@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@46@01))
        (< $k@47@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@47@01))
        (<
          i_V3@42@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
        (< $k@48@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@48@01))
        (< $k@49@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@49@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01)
        (< $k@50@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@50@01))
        (< $k@51@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@51@01))
        (<
          i_V3@42@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@52@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@52@01))
        (< $k@53@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@53@01))
        (<
          j_V3@43@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V3@43@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@34@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V3@43@01))
            (< i_V3@42@01 x_V2@33@01))
          (<= 0 i_V3@42@01)))
      (and
        (and
          (and
            (<
              j_V3@43@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@43@01))
          (< i_V3@42@01 x_V2@33@01))
        (<= 0 i_V3@42@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01))
  :qid |prog.l403-aux|)))
(assert (forall ((i_V3@42@01 Int) (j_V3@43@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V3@43@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@43@01))
        (< i_V3@42@01 x_V2@33@01))
      (<= 0 i_V3@42@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01))
  :qid |prog.l403|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01))))))
  $Snap.unit))
; [eval] (forall i_V4: Int, j_V4: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4) } x_V2 <= i_V4 && (i_V4 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V4 && j_V4 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4)))
(declare-const i_V4@54@01 Int)
(declare-const j_V4@55@01 Int)
(push) ; 4
; [eval] x_V2 <= i_V4 && (i_V4 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V4 && j_V4 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4))
; [eval] x_V2 <= i_V4 && (i_V4 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V4 && j_V4 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] x_V2 <= i_V4
(push) ; 5
; [then-branch: 8 | x_V2@33@01 <= i_V4@54@01 | live]
; [else-branch: 8 | !(x_V2@33@01 <= i_V4@54@01) | live]
(push) ; 6
; [then-branch: 8 | x_V2@33@01 <= i_V4@54@01]
(assert (<= x_V2@33@01 i_V4@54@01))
; [eval] i_V4 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 7
(declare-const $k@56@01 $Perm)
(assert ($Perm.isReadVar $k@56@01))
(assert (< $k@56@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@56@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@56@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@56@01))
(assert (and (< $k@56@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@56@01))))
(set-option :timeout 0)
(push) ; 7
; [then-branch: 9 | i_V4@54@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01) | live]
; [else-branch: 9 | !(i_V4@54@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01)) | live]
(push) ; 8
; [then-branch: 9 | i_V4@54@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01)]
(assert (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
; [eval] 0 <= j_V4
(push) ; 9
; [then-branch: 10 | 0 <= j_V4@55@01 | live]
; [else-branch: 10 | !(0 <= j_V4@55@01) | live]
(push) ; 10
; [then-branch: 10 | 0 <= j_V4@55@01]
(assert (<= 0 j_V4@55@01))
; [eval] j_V4 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 11
(declare-const $k@57@01 $Perm)
(assert ($Perm.isReadVar $k@57@01))
(assert (< $k@57@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@57@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@57@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@58@01 $Perm)
(assert ($Perm.isReadVar $k@58@01))
(assert (< $k@58@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@58@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@58@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@58@01))
(assert (and (< $k@58@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@58@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@57@01))
(assert ($Perm.isReadVar $k@58@01))
(assert (and
  (< $k@57@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@57@01))
  (< $k@58@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@58@01))))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 10 | !(0 <= j_V4@55@01)]
(assert (not (<= 0 j_V4@55@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@57@01))
(assert ($Perm.isReadVar $k@58@01))
(assert (=>
  (<= 0 j_V4@55@01)
  (and
    (<= 0 j_V4@55@01)
    (< $k@57@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@57@01))
    (< $k@58@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@58@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V4@55@01)) (<= 0 j_V4@55@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 9 | !(i_V4@54@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01))]
(assert (not
  (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@57@01))
(assert ($Perm.isReadVar $k@58@01))
(assert (=>
  (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
  (and
    (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
    (=>
      (<= 0 j_V4@55@01)
      (and
        (<= 0 j_V4@55@01)
        (< $k@57@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@57@01))
        (< $k@58@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@58@01))))
    (or (not (<= 0 j_V4@55@01)) (<= 0 j_V4@55@01)))))
; Joined path conditions
(assert (or
  (not
    (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
  (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 8 | !(x_V2@33@01 <= i_V4@54@01)]
(assert (not (<= x_V2@33@01 i_V4@54@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@56@01))
(assert ($Perm.isReadVar $k@57@01))
(assert ($Perm.isReadVar $k@58@01))
(assert (=>
  (<= x_V2@33@01 i_V4@54@01)
  (and
    (<= x_V2@33@01 i_V4@54@01)
    (< $k@56@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@56@01))
    (=>
      (<
        i_V4@54@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
      (and
        (<
          i_V4@54@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
        (=>
          (<= 0 j_V4@55@01)
          (and
            (<= 0 j_V4@55@01)
            (< $k@57@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@57@01))
            (< $k@58@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@58@01))))
        (or (not (<= 0 j_V4@55@01)) (<= 0 j_V4@55@01))))
    (or
      (not
        (<
          i_V4@54@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
      (<
        i_V4@54@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))))))
; Joined path conditions
(assert (or (not (<= x_V2@33@01 i_V4@54@01)) (<= x_V2@33@01 i_V4@54@01)))
(push) ; 5
; [then-branch: 11 | j_V4@55@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V4@55@01 && i_V4@54@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01) && x_V2@33@01 <= i_V4@54@01 | live]
; [else-branch: 11 | !(j_V4@55@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V4@55@01 && i_V4@54@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01) && x_V2@33@01 <= i_V4@54@01) | live]
(push) ; 6
; [then-branch: 11 | j_V4@55@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V4@55@01 && i_V4@54@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01) && x_V2@33@01 <= i_V4@54@01]
(assert (and
  (and
    (and
      (<
        j_V4@55@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@34@01)
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V4@55@01))
    (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
  (<= x_V2@33@01 i_V4@54@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4)
(push) ; 7
(declare-const $k@59@01 $Perm)
(assert ($Perm.isReadVar $k@59@01))
(assert (< $k@59@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@59@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@59@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
(set-option :timeout 0)
(push) ; 8
(assert (not (<= 0 i_V4@54@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i_V4@54@01))
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 8
(declare-const $k@60@01 $Perm)
(assert ($Perm.isReadVar $k@60@01))
(assert (< $k@60@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@60@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@60@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@60@01))
(assert (and (< $k@60@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@60@01))))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@61@01 $Perm)
(assert ($Perm.isReadVar $k@61@01))
(assert (< $k@61@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@61@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@62@01 $Perm)
(assert ($Perm.isReadVar $k@62@01))
(assert (< $k@62@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@62@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@62@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@62@01))
(assert (and (< $k@62@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@62@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@61@01))
(assert ($Perm.isReadVar $k@62@01))
(assert (and
  (< $k@61@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@61@01))
  (< $k@62@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@62@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@34@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@59@01))
(assert ($Perm.isReadVar $k@60@01))
(assert ($Perm.isReadVar $k@61@01))
(assert ($Perm.isReadVar $k@62@01))
(assert (and
  (< $k@59@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@59@01))
  (<= 0 i_V4@54@01)
  (< $k@60@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@60@01))
  (< $k@61@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@61@01))
  (< $k@62@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@62@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@63@01 $Perm)
(assert ($Perm.isReadVar $k@63@01))
(assert (< $k@63@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@63@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@63@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@64@01 $Perm)
(assert ($Perm.isReadVar $k@64@01))
(assert (< $k@64@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@64@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@64@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@64@01))
(assert (and (< $k@64@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@64@01))))
(set-option :timeout 0)
(push) ; 8
(assert (not (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 8
(declare-const $k@65@01 $Perm)
(assert ($Perm.isReadVar $k@65@01))
(assert (< $k@65@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@65@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@65@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@66@01 $Perm)
(assert ($Perm.isReadVar $k@66@01))
(assert (< $k@66@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@66@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@66@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@66@01))
(assert (and (< $k@66@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@66@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@65@01))
(assert ($Perm.isReadVar $k@66@01))
(assert (and
  (< $k@65@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@65@01))
  (< $k@66@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@66@01))))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  j_V4@55@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V4@55@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@63@01))
(assert ($Perm.isReadVar $k@64@01))
(assert ($Perm.isReadVar $k@65@01))
(assert ($Perm.isReadVar $k@66@01))
(assert (and
  (< $k@63@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@63@01))
  (< $k@64@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@64@01))
  (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@65@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@65@01))
  (< $k@66@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@66@01))
  (<
    j_V4@55@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 11 | !(j_V4@55@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V4@55@01 && i_V4@54@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01) && x_V2@33@01 <= i_V4@54@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V4@55@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V4@55@01))
      (<
        i_V4@54@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
    (<= x_V2@33@01 i_V4@54@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@59@01))
(assert ($Perm.isReadVar $k@60@01))
(assert ($Perm.isReadVar $k@61@01))
(assert ($Perm.isReadVar $k@62@01))
(assert ($Perm.isReadVar $k@63@01))
(assert ($Perm.isReadVar $k@64@01))
(assert ($Perm.isReadVar $k@65@01))
(assert ($Perm.isReadVar $k@66@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V4@55@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V4@55@01))
      (<
        i_V4@54@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
    (<= x_V2@33@01 i_V4@54@01))
  (and
    (<
      j_V4@55@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V4@55@01)
    (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
    (<= x_V2@33@01 i_V4@54@01)
    (< $k@59@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@59@01))
    (<= 0 i_V4@54@01)
    (< $k@60@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@60@01))
    (< $k@61@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@61@01))
    (< $k@62@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@62@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@34@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01)
    (< $k@63@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@63@01))
    (< $k@64@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@64@01))
    (< i_V4@54@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@65@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@65@01))
    (< $k@66@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@66@01))
    (<
      j_V4@55@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V4@55@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V4@55@01))
        (<
          i_V4@54@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
      (<= x_V2@33@01 i_V4@54@01)))
  (and
    (and
      (and
        (<
          j_V4@55@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V4@55@01))
      (<
        i_V4@54@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
    (<= x_V2@33@01 i_V4@54@01))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@56@01))
(assert ($Perm.isReadVar $k@57@01))
(assert ($Perm.isReadVar $k@58@01))
(assert ($Perm.isReadVar $k@59@01))
(assert ($Perm.isReadVar $k@60@01))
(assert ($Perm.isReadVar $k@61@01))
(assert ($Perm.isReadVar $k@62@01))
(assert ($Perm.isReadVar $k@63@01))
(assert ($Perm.isReadVar $k@64@01))
(assert ($Perm.isReadVar $k@65@01))
(assert ($Perm.isReadVar $k@66@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V4@54@01 Int) (j_V4@55@01 Int)) (!
  (and
    (=>
      (<= x_V2@33@01 i_V4@54@01)
      (and
        (<= x_V2@33@01 i_V4@54@01)
        (< $k@56@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@56@01))
        (=>
          (<
            i_V4@54@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
          (and
            (<
              i_V4@54@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
            (=>
              (<= 0 j_V4@55@01)
              (and
                (<= 0 j_V4@55@01)
                (< $k@57@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@57@01))
                (< $k@58@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@58@01))))
            (or (not (<= 0 j_V4@55@01)) (<= 0 j_V4@55@01))))
        (or
          (not
            (<
              i_V4@54@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
          (<
            i_V4@54@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))))
    (or (not (<= x_V2@33@01 i_V4@54@01)) (<= x_V2@33@01 i_V4@54@01))
    (=>
      (and
        (and
          (and
            (<
              j_V4@55@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V4@55@01))
          (<
            i_V4@54@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
        (<= x_V2@33@01 i_V4@54@01))
      (and
        (<
          j_V4@55@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V4@55@01)
        (<
          i_V4@54@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
        (<= x_V2@33@01 i_V4@54@01)
        (< $k@59@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@59@01))
        (<= 0 i_V4@54@01)
        (< $k@60@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@60@01))
        (< $k@61@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@61@01))
        (< $k@62@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@62@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01)
        (< $k@63@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@63@01))
        (< $k@64@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@64@01))
        (<
          i_V4@54@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@65@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@65@01))
        (< $k@66@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@66@01))
        (<
          j_V4@55@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V4@55@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@34@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V4@55@01))
            (<
              i_V4@54@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
          (<= x_V2@33@01 i_V4@54@01)))
      (and
        (and
          (and
            (<
              j_V4@55@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V4@55@01))
          (<
            i_V4@54@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
        (<= x_V2@33@01 i_V4@54@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01))
  :qid |prog.l409-aux|)))
(assert (forall ((i_V4@54@01 Int) (j_V4@55@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V4@55@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V4@55@01))
        (<
          i_V4@54@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
      (<= x_V2@33@01 i_V4@54@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01)
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01))
  :qid |prog.l409|)))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] x_V2 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 5
(declare-const $k@67@01 $Perm)
(assert ($Perm.isReadVar $k@67@01))
(assert (< $k@67@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@67@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@67@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@67@01))
(assert (and (< $k@67@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@67@01))))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [eval] !(x_V2 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] x_V2 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 5
(declare-const $k@68@01 $Perm)
(assert ($Perm.isReadVar $k@68@01))
(assert (< $k@68@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@68@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@68@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@68@01))
(assert (and (< $k@68@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@68@01))))
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; Loop head block: Establish invariant
; [eval] 0 <= x_V2
; [eval] x_V2 <= lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 4
(declare-const $k@69@01 $Perm)
(assert ($Perm.isReadVar $k@69@01))
(assert (< $k@69@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@69@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@69@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@69@01))
(assert (and (< $k@69@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@69@01))))
(set-option :timeout 0)
(push) ; 4
(assert (not (<= 0 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) == old(lenX_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 4
(declare-const $k@70@01 $Perm)
(assert ($Perm.isReadVar $k@70@01))
(assert (< $k@70@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@70@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@70@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@70@01))
(assert (and (< $k@70@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@70@01))))
; [eval] old(lenX_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@71@01 $Perm)
(assert ($Perm.isReadVar $k@71@01))
(assert (< $k@71@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@71@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@71@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@71@01))
(assert (and (< $k@71@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@71@01))))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0) == old(lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@72@01 $Perm)
(assert ($Perm.isReadVar $k@72@01))
(assert (< $k@72@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@72@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@72@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@73@01 $Perm)
(assert ($Perm.isReadVar $k@73@01))
(assert (< $k@73@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@73@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@73@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@73@01))
(assert (and (< $k@73@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@73@01))))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  $Snap.unit) m_V0@2@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@72@01))
(assert ($Perm.isReadVar $k@73@01))
(assert (and
  (< $k@72@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@72@01))
  (< $k@73@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@73@01))
  (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    $Snap.unit) m_V0@2@01)))
; [eval] old(lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@74@01 $Perm)
(assert ($Perm.isReadVar $k@74@01))
(assert (< $k@74@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@74@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@74@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@75@01 $Perm)
(assert ($Perm.isReadVar $k@75@01))
(assert (< $k@75@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@75@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@75@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@75@01))
(assert (and (< $k@75@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@75@01))))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@74@01))
(assert ($Perm.isReadVar $k@75@01))
(assert (and
  (< $k@74@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@74@01))
  (< $k@75@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@75@01))))
; [eval] (forall i_V3: Int, j_V3: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) } 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1)
(declare-const i_V3@76@01 Int)
(declare-const j_V3@77@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] 0 <= i_V3
(push) ; 5
; [then-branch: 12 | 0 <= i_V3@76@01 | live]
; [else-branch: 12 | !(0 <= i_V3@76@01) | live]
(push) ; 6
; [then-branch: 12 | 0 <= i_V3@76@01]
(assert (<= 0 i_V3@76@01))
; [eval] i_V3 < x_V2
(push) ; 7
; [then-branch: 13 | i_V3@76@01 < 0 | live]
; [else-branch: 13 | !(i_V3@76@01 < 0) | live]
(push) ; 8
; [then-branch: 13 | i_V3@76@01 < 0]
(assert (< i_V3@76@01 0))
; [eval] 0 <= j_V3
(push) ; 9
; [then-branch: 14 | 0 <= j_V3@77@01 | live]
; [else-branch: 14 | !(0 <= j_V3@77@01) | live]
(push) ; 10
; [then-branch: 14 | 0 <= j_V3@77@01]
(assert (<= 0 j_V3@77@01))
; [eval] j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 11
(declare-const $k@78@01 $Perm)
(assert ($Perm.isReadVar $k@78@01))
(assert (< $k@78@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@78@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@78@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@79@01 $Perm)
(assert ($Perm.isReadVar $k@79@01))
(assert (< $k@79@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@79@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@79@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@79@01))
(assert (and (< $k@79@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@79@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@78@01))
(assert ($Perm.isReadVar $k@79@01))
(assert (and
  (< $k@78@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@78@01))
  (< $k@79@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@79@01))))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 14 | !(0 <= j_V3@77@01)]
(assert (not (<= 0 j_V3@77@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@78@01))
(assert ($Perm.isReadVar $k@79@01))
(assert (=>
  (<= 0 j_V3@77@01)
  (and
    (<= 0 j_V3@77@01)
    (< $k@78@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@78@01))
    (< $k@79@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@79@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V3@77@01)) (<= 0 j_V3@77@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 13 | !(i_V3@76@01 < 0)]
(assert (not (< i_V3@76@01 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@78@01))
(assert ($Perm.isReadVar $k@79@01))
(assert (=>
  (< i_V3@76@01 0)
  (and
    (< i_V3@76@01 0)
    (=>
      (<= 0 j_V3@77@01)
      (and
        (<= 0 j_V3@77@01)
        (< $k@78@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@78@01))
        (< $k@79@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@79@01))))
    (or (not (<= 0 j_V3@77@01)) (<= 0 j_V3@77@01)))))
; Joined path conditions
(assert (or (not (< i_V3@76@01 0)) (< i_V3@76@01 0)))
(pop) ; 6
(push) ; 6
; [else-branch: 12 | !(0 <= i_V3@76@01)]
(assert (not (<= 0 i_V3@76@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@78@01))
(assert ($Perm.isReadVar $k@79@01))
(assert (=>
  (<= 0 i_V3@76@01)
  (and
    (<= 0 i_V3@76@01)
    (=>
      (< i_V3@76@01 0)
      (and
        (< i_V3@76@01 0)
        (=>
          (<= 0 j_V3@77@01)
          (and
            (<= 0 j_V3@77@01)
            (< $k@78@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@78@01))
            (< $k@79@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@79@01))))
        (or (not (<= 0 j_V3@77@01)) (<= 0 j_V3@77@01))))
    (or (not (< i_V3@76@01 0)) (< i_V3@76@01 0)))))
; Joined path conditions
(assert (or (not (<= 0 i_V3@76@01)) (<= 0 i_V3@76@01)))
(push) ; 5
; [then-branch: 15 | j_V3@77@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@4@01), _), m_V0@2@01) && 0 <= j_V3@77@01 && i_V3@76@01 < 0 && 0 <= i_V3@76@01 | live]
; [else-branch: 15 | !(j_V3@77@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@4@01), _), m_V0@2@01) && 0 <= j_V3@77@01 && i_V3@76@01 < 0 && 0 <= i_V3@76@01) | live]
(push) ; 6
; [then-branch: 15 | j_V3@77@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@4@01), _), m_V0@2@01) && 0 <= j_V3@77@01 && i_V3@76@01 < 0 && 0 <= i_V3@76@01]
(assert (and
  (and
    (and
      (<
        j_V3@77@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V3@77@01))
    (< i_V3@76@01 0))
  (<= 0 i_V3@76@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(push) ; 7
(declare-const $k@80@01 $Perm)
(assert ($Perm.isReadVar $k@80@01))
(assert (< $k@80@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@80@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@80@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@81@01 $Perm)
(assert ($Perm.isReadVar $k@81@01))
(assert (< $k@81@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@81@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@81@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@81@01))
(assert (and (< $k@81@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@81@01))))
(set-option :timeout 0)
(push) ; 8
(assert (not (< i_V3@76@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (< i_V3@76@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 8
(declare-const $k@82@01 $Perm)
(assert ($Perm.isReadVar $k@82@01))
(assert (< $k@82@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@82@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@82@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@83@01 $Perm)
(assert ($Perm.isReadVar $k@83@01))
(assert (< $k@83@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@83@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@83@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@83@01))
(assert (and (< $k@83@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@83@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@82@01))
(assert ($Perm.isReadVar $k@83@01))
(assert (and
  (< $k@82@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@82@01))
  (< $k@83@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@83@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@80@01))
(assert ($Perm.isReadVar $k@81@01))
(assert ($Perm.isReadVar $k@82@01))
(assert ($Perm.isReadVar $k@83@01))
(assert (and
  (< $k@80@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@80@01))
  (< $k@81@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@81@01))
  (< i_V3@76@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@82@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@82@01))
  (< $k@83@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@83@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@84@01 $Perm)
(assert ($Perm.isReadVar $k@84@01))
(assert (< $k@84@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@84@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@84@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@85@01 $Perm)
(assert ($Perm.isReadVar $k@85@01))
(assert (< $k@85@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@85@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@85@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@85@01))
(assert (and (< $k@85@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@85@01))))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@86@01 $Perm)
(assert ($Perm.isReadVar $k@86@01))
(assert (< $k@86@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@86@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@86@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@87@01 $Perm)
(assert ($Perm.isReadVar $k@87@01))
(assert (< $k@87@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@87@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@87@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@87@01))
(assert (and (< $k@87@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@87@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@86@01))
(assert ($Perm.isReadVar $k@87@01))
(assert (and
  (< $k@86@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@86@01))
  (< $k@87@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@87@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@84@01))
(assert ($Perm.isReadVar $k@85@01))
(assert ($Perm.isReadVar $k@86@01))
(assert ($Perm.isReadVar $k@87@01))
(assert (and
  (< $k@84@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@84@01))
  (< $k@85@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@85@01))
  (< $k@86@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@86@01))
  (< $k@87@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@87@01))))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 15 | !(j_V3@77@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@4@01), _), m_V0@2@01) && 0 <= j_V3@77@01 && i_V3@76@01 < 0 && 0 <= i_V3@76@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V3@77@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@77@01))
      (< i_V3@76@01 0))
    (<= 0 i_V3@76@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@80@01))
(assert ($Perm.isReadVar $k@81@01))
(assert ($Perm.isReadVar $k@82@01))
(assert ($Perm.isReadVar $k@83@01))
(assert ($Perm.isReadVar $k@84@01))
(assert ($Perm.isReadVar $k@85@01))
(assert ($Perm.isReadVar $k@86@01))
(assert ($Perm.isReadVar $k@87@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V3@77@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@77@01))
      (< i_V3@76@01 0))
    (<= 0 i_V3@76@01))
  (and
    (<
      j_V3@77@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V3@77@01)
    (< i_V3@76@01 0)
    (<= 0 i_V3@76@01)
    (< $k@80@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@80@01))
    (< $k@81@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@81@01))
    (< i_V3@76@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@82@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@82@01))
    (< $k@83@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@83@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01)
    (< $k@84@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@84@01))
    (< $k@85@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@85@01))
    (< $k@86@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@86@01))
    (< $k@87@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@87@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V3@77@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@4@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@77@01))
        (< i_V3@76@01 0))
      (<= 0 i_V3@76@01)))
  (and
    (and
      (and
        (<
          j_V3@77@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@77@01))
      (< i_V3@76@01 0))
    (<= 0 i_V3@76@01))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@78@01))
(assert ($Perm.isReadVar $k@79@01))
(assert ($Perm.isReadVar $k@80@01))
(assert ($Perm.isReadVar $k@81@01))
(assert ($Perm.isReadVar $k@82@01))
(assert ($Perm.isReadVar $k@83@01))
(assert ($Perm.isReadVar $k@84@01))
(assert ($Perm.isReadVar $k@85@01))
(assert ($Perm.isReadVar $k@86@01))
(assert ($Perm.isReadVar $k@87@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@76@01 Int) (j_V3@77@01 Int)) (!
  (and
    (=>
      (<= 0 i_V3@76@01)
      (and
        (<= 0 i_V3@76@01)
        (=>
          (< i_V3@76@01 0)
          (and
            (< i_V3@76@01 0)
            (=>
              (<= 0 j_V3@77@01)
              (and
                (<= 0 j_V3@77@01)
                (< $k@78@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@78@01))
                (< $k@79@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@79@01))))
            (or (not (<= 0 j_V3@77@01)) (<= 0 j_V3@77@01))))
        (or (not (< i_V3@76@01 0)) (< i_V3@76@01 0))))
    (or (not (<= 0 i_V3@76@01)) (<= 0 i_V3@76@01))
    (=>
      (and
        (and
          (and
            (<
              j_V3@77@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@4@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@77@01))
          (< i_V3@76@01 0))
        (<= 0 i_V3@76@01))
      (and
        (<
          j_V3@77@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@77@01)
        (< i_V3@76@01 0)
        (<= 0 i_V3@76@01)
        (< $k@80@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@80@01))
        (< $k@81@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@81@01))
        (<
          i_V3@76@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@82@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@82@01))
        (< $k@83@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@83@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01)
        (< $k@84@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@84@01))
        (< $k@85@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@85@01))
        (< $k@86@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@86@01))
        (< $k@87@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@87@01))))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V3@77@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@4@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V3@77@01))
            (< i_V3@76@01 0))
          (<= 0 i_V3@76@01)))
      (and
        (and
          (and
            (<
              j_V3@77@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@4@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@77@01))
          (< i_V3@76@01 0))
        (<= 0 i_V3@76@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01))
  :qid |prog.l403-aux|)))
(assert (forall ((i_V3@76@01 Int) (j_V3@77@01 Int)) (!
  (and
    (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      $Snap.unit) m_V0@2@01)
    (=>
      (and
        (and
          (and
            (<
              j_V3@77@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@4@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@77@01))
          (< i_V3@76@01 0))
        (<= 0 i_V3@76@01))
      (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01))
  :qid |prog.l403_precondition|)))
(push) ; 4
(assert (not (forall ((i_V3@76@01 Int) (j_V3@77@01 Int)) (!
  (=>
    (and
      (and
        (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          $Snap.unit) m_V0@2@01)
        (=>
          (and
            (and
              (and
                (<
                  j_V3@77@01
                  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                    ($Snap.first $t@4@01)
                    $Snap.unit) m_V0@2@01))
                (<= 0 j_V3@77@01))
              (< i_V3@76@01 0))
            (<= 0 i_V3@76@01))
          (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
            ($Snap.first $t@4@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01)))
      (and
        (and
          (and
            (<
              j_V3@77@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@4@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@77@01))
          (< i_V3@76@01 0))
        (<= 0 i_V3@76@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01))
  :qid |prog.l403|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V3@76@01 Int) (j_V3@77@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V3@77@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@4@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@77@01))
        (< i_V3@76@01 0))
      (<= 0 i_V3@76@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@76@01 j_V3@77@01))
  :qid |prog.l403|)))
; [eval] (forall i_V4: Int, j_V4: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4) } x_V2 <= i_V4 && (i_V4 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V4 && j_V4 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4)))
(declare-const i_V4@88@01 Int)
(declare-const j_V4@89@01 Int)
(push) ; 4
; [eval] x_V2 <= i_V4 && (i_V4 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V4 && j_V4 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4))
; [eval] x_V2 <= i_V4 && (i_V4 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V4 && j_V4 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] x_V2 <= i_V4
(push) ; 5
; [then-branch: 16 | 0 <= i_V4@88@01 | live]
; [else-branch: 16 | !(0 <= i_V4@88@01) | live]
(push) ; 6
; [then-branch: 16 | 0 <= i_V4@88@01]
(assert (<= 0 i_V4@88@01))
; [eval] i_V4 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 7
(declare-const $k@90@01 $Perm)
(assert ($Perm.isReadVar $k@90@01))
(assert (< $k@90@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@90@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@90@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@90@01))
(assert (and (< $k@90@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@90@01))))
(set-option :timeout 0)
(push) ; 7
; [then-branch: 17 | i_V4@88@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@4@01), m_V0@2@01) | live]
; [else-branch: 17 | !(i_V4@88@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@4@01), m_V0@2@01)) | live]
(push) ; 8
; [then-branch: 17 | i_V4@88@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@4@01), m_V0@2@01)]
(assert (< i_V4@88@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V4
(push) ; 9
; [then-branch: 18 | 0 <= j_V4@89@01 | live]
; [else-branch: 18 | !(0 <= j_V4@89@01) | live]
(push) ; 10
; [then-branch: 18 | 0 <= j_V4@89@01]
(assert (<= 0 j_V4@89@01))
; [eval] j_V4 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 11
(declare-const $k@91@01 $Perm)
(assert ($Perm.isReadVar $k@91@01))
(assert (< $k@91@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@91@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@91@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@92@01 $Perm)
(assert ($Perm.isReadVar $k@92@01))
(assert (< $k@92@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@92@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@92@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@92@01))
(assert (and (< $k@92@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@92@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@91@01))
(assert ($Perm.isReadVar $k@92@01))
(assert (and
  (< $k@91@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@91@01))
  (< $k@92@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@92@01))))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 18 | !(0 <= j_V4@89@01)]
(assert (not (<= 0 j_V4@89@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@91@01))
(assert ($Perm.isReadVar $k@92@01))
(assert (=>
  (<= 0 j_V4@89@01)
  (and
    (<= 0 j_V4@89@01)
    (< $k@91@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@91@01))
    (< $k@92@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@92@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V4@89@01)) (<= 0 j_V4@89@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 17 | !(i_V4@88@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@4@01), m_V0@2@01))]
(assert (not
  (< i_V4@88@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@91@01))
(assert ($Perm.isReadVar $k@92@01))
(assert (=>
  (< i_V4@88@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (and
    (< i_V4@88@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (=>
      (<= 0 j_V4@89@01)
      (and
        (<= 0 j_V4@89@01)
        (< $k@91@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@91@01))
        (< $k@92@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@92@01))))
    (or (not (<= 0 j_V4@89@01)) (<= 0 j_V4@89@01)))))
; Joined path conditions
(assert (or
  (not
    (< i_V4@88@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
  (< i_V4@88@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 16 | !(0 <= i_V4@88@01)]
(assert (not (<= 0 i_V4@88@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@90@01))
(assert ($Perm.isReadVar $k@91@01))
(assert ($Perm.isReadVar $k@92@01))
(assert (=>
  (<= 0 i_V4@88@01)
  (and
    (<= 0 i_V4@88@01)
    (< $k@90@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@90@01))
    (=>
      (<
        i_V4@88@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
      (and
        (<
          i_V4@88@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (=>
          (<= 0 j_V4@89@01)
          (and
            (<= 0 j_V4@89@01)
            (< $k@91@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@91@01))
            (< $k@92@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@92@01))))
        (or (not (<= 0 j_V4@89@01)) (<= 0 j_V4@89@01))))
    (or
      (not
        (<
          i_V4@88@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
      (<
        i_V4@88@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))))
; Joined path conditions
(assert (or (not (<= 0 i_V4@88@01)) (<= 0 i_V4@88@01)))
(push) ; 5
; [then-branch: 19 | j_V4@89@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@4@01), _), m_V0@2@01) && 0 <= j_V4@89@01 && i_V4@88@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@4@01), m_V0@2@01) && 0 <= i_V4@88@01 | live]
; [else-branch: 19 | !(j_V4@89@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@4@01), _), m_V0@2@01) && 0 <= j_V4@89@01 && i_V4@88@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@4@01), m_V0@2@01) && 0 <= i_V4@88@01) | live]
(push) ; 6
; [then-branch: 19 | j_V4@89@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@4@01), _), m_V0@2@01) && 0 <= j_V4@89@01 && i_V4@88@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@4@01), m_V0@2@01) && 0 <= i_V4@88@01]
(assert (and
  (and
    (and
      (<
        j_V4@89@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V4@89@01))
    (< i_V4@88@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
  (<= 0 i_V4@88@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4)
(push) ; 7
(declare-const $k@93@01 $Perm)
(assert ($Perm.isReadVar $k@93@01))
(assert (< $k@93@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@93@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@93@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@94@01 $Perm)
(assert ($Perm.isReadVar $k@94@01))
(assert (< $k@94@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@94@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@94@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@94@01))
(assert (and (< $k@94@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@94@01))))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@95@01 $Perm)
(assert ($Perm.isReadVar $k@95@01))
(assert (< $k@95@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@95@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@95@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@96@01 $Perm)
(assert ($Perm.isReadVar $k@96@01))
(assert (< $k@96@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@96@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@96@01))
(assert (and (< $k@96@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@96@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@95@01))
(assert ($Perm.isReadVar $k@96@01))
(assert (and
  (< $k@95@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@95@01))
  (< $k@96@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@96@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@88@01 j_V4@89@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@93@01))
(assert ($Perm.isReadVar $k@94@01))
(assert ($Perm.isReadVar $k@95@01))
(assert ($Perm.isReadVar $k@96@01))
(assert (and
  (< $k@93@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@93@01))
  (< $k@94@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@94@01))
  (< $k@95@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@95@01))
  (< $k@96@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@96@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@88@01 j_V4@89@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V4, j_V4)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@97@01 $Perm)
(assert ($Perm.isReadVar $k@97@01))
(assert (< $k@97@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@97@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@98@01 $Perm)
(assert ($Perm.isReadVar $k@98@01))
(assert (< $k@98@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@98@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@98@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@98@01))
(assert (and (< $k@98@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@98@01))))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@99@01 $Perm)
(assert ($Perm.isReadVar $k@99@01))
(assert (< $k@99@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@99@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@99@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@100@01 $Perm)
(assert ($Perm.isReadVar $k@100@01))
(assert (< $k@100@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@100@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@100@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@100@01))
(assert (and (< $k@100@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@100@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@99@01))
(assert ($Perm.isReadVar $k@100@01))
(assert (and
  (< $k@99@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@99@01))
  (< $k@100@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@100@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@97@01))
(assert ($Perm.isReadVar $k@98@01))
(assert ($Perm.isReadVar $k@99@01))
(assert ($Perm.isReadVar $k@100@01))
(assert (and
  (< $k@97@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@97@01))
  (< $k@98@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@98@01))
  (< $k@99@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@99@01))
  (< $k@100@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@100@01))))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 19 | !(j_V4@89@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@4@01), _), m_V0@2@01) && 0 <= j_V4@89@01 && i_V4@88@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@4@01), m_V0@2@01) && 0 <= i_V4@88@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V4@89@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V4@89@01))
      (<
        i_V4@88@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
    (<= 0 i_V4@88@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@93@01))
(assert ($Perm.isReadVar $k@94@01))
(assert ($Perm.isReadVar $k@95@01))
(assert ($Perm.isReadVar $k@96@01))
(assert ($Perm.isReadVar $k@97@01))
(assert ($Perm.isReadVar $k@98@01))
(assert ($Perm.isReadVar $k@99@01))
(assert ($Perm.isReadVar $k@100@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V4@89@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V4@89@01))
      (<
        i_V4@88@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
    (<= 0 i_V4@88@01))
  (and
    (<
      j_V4@89@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V4@89@01)
    (< i_V4@88@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (<= 0 i_V4@88@01)
    (< $k@93@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@93@01))
    (< $k@94@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@94@01))
    (< $k@95@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@95@01))
    (< $k@96@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@96@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@88@01 j_V4@89@01)
    (< $k@97@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@97@01))
    (< $k@98@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@98@01))
    (< $k@99@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@99@01))
    (< $k@100@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@100@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V4@89@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@4@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V4@89@01))
        (<
          i_V4@88@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
      (<= 0 i_V4@88@01)))
  (and
    (and
      (and
        (<
          j_V4@89@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V4@89@01))
      (<
        i_V4@88@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
    (<= 0 i_V4@88@01))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@90@01))
(assert ($Perm.isReadVar $k@91@01))
(assert ($Perm.isReadVar $k@92@01))
(assert ($Perm.isReadVar $k@93@01))
(assert ($Perm.isReadVar $k@94@01))
(assert ($Perm.isReadVar $k@95@01))
(assert ($Perm.isReadVar $k@96@01))
(assert ($Perm.isReadVar $k@97@01))
(assert ($Perm.isReadVar $k@98@01))
(assert ($Perm.isReadVar $k@99@01))
(assert ($Perm.isReadVar $k@100@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V4@88@01 Int) (j_V4@89@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@88@01)
      (and
        (<= 0 i_V4@88@01)
        (< $k@90@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@90@01))
        (=>
          (<
            i_V4@88@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
          (and
            (<
              i_V4@88@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
            (=>
              (<= 0 j_V4@89@01)
              (and
                (<= 0 j_V4@89@01)
                (< $k@91@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@91@01))
                (< $k@92@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@92@01))))
            (or (not (<= 0 j_V4@89@01)) (<= 0 j_V4@89@01))))
        (or
          (not
            (<
              i_V4@88@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
          (<
            i_V4@88@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))))
    (or (not (<= 0 i_V4@88@01)) (<= 0 i_V4@88@01))
    (=>
      (and
        (and
          (and
            (<
              j_V4@89@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@4@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V4@89@01))
          (<
            i_V4@88@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
        (<= 0 i_V4@88@01))
      (and
        (<
          j_V4@89@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V4@89@01)
        (<
          i_V4@88@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (<= 0 i_V4@88@01)
        (< $k@93@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@93@01))
        (< $k@94@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@94@01))
        (< $k@95@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@95@01))
        (< $k@96@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@96@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@88@01 j_V4@89@01)
        (< $k@97@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@97@01))
        (< $k@98@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@98@01))
        (< $k@99@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@99@01))
        (< $k@100@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@100@01))))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V4@89@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@4@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V4@89@01))
            (<
              i_V4@88@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
          (<= 0 i_V4@88@01)))
      (and
        (and
          (and
            (<
              j_V4@89@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@4@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V4@89@01))
          (<
            i_V4@88@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
        (<= 0 i_V4@88@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@88@01 j_V4@89@01))
  :qid |prog.l409-aux|)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@35@01))
(assert ($Perm.isReadVar $k@36@01))
(assert ($Perm.isReadVar $k@37@01))
(assert ($Perm.isReadVar $k@38@01))
(assert ($Perm.isReadVar $k@39@01))
(assert ($Perm.isReadVar $k@40@01))
(assert ($Perm.isReadVar $k@41@01))
(assert ($Perm.isReadVar $k@44@01))
(assert ($Perm.isReadVar $k@45@01))
(assert ($Perm.isReadVar $k@46@01))
(assert ($Perm.isReadVar $k@47@01))
(assert ($Perm.isReadVar $k@48@01))
(assert ($Perm.isReadVar $k@49@01))
(assert ($Perm.isReadVar $k@50@01))
(assert ($Perm.isReadVar $k@51@01))
(assert ($Perm.isReadVar $k@52@01))
(assert ($Perm.isReadVar $k@53@01))
(assert ($Perm.isReadVar $k@56@01))
(assert ($Perm.isReadVar $k@57@01))
(assert ($Perm.isReadVar $k@58@01))
(assert ($Perm.isReadVar $k@59@01))
(assert ($Perm.isReadVar $k@60@01))
(assert ($Perm.isReadVar $k@61@01))
(assert ($Perm.isReadVar $k@62@01))
(assert ($Perm.isReadVar $k@63@01))
(assert ($Perm.isReadVar $k@64@01))
(assert ($Perm.isReadVar $k@65@01))
(assert ($Perm.isReadVar $k@66@01))
(assert (= $t@34@01 ($Snap.combine ($Snap.first $t@34@01) ($Snap.second $t@34@01))))
(assert (=
  ($Snap.second $t@34@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@34@01))
    ($Snap.second ($Snap.second $t@34@01)))))
(assert (= ($Snap.first ($Snap.second $t@34@01)) $Snap.unit))
(assert (<= 0 x_V2@33@01))
(assert (=
  ($Snap.second ($Snap.second $t@34@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@34@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@34@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@34@01))) $Snap.unit))
(assert (< $k@35@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@35@01)))
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@34@01) m_V0@2@01))
(assert (<= x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@34@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@01))))
  $Snap.unit))
(assert (< $k@36@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@36@01)))
(assert (< $k@37@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@37@01)))
(assert (=
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01)))))
  $Snap.unit))
(assert (< $k@38@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@38@01)))
(assert (< $k@39@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@39@01)))
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01) 0)))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@34@01)
  $Snap.unit) m_V0@2@01))
(assert (< $k@40@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@40@01)))
(assert (< $k@41@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@41@01)))
(assert (=
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@34@01) $Snap.unit) m_V0@2@01)
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01))))))
  $Snap.unit))
(assert (forall ((i_V3@42@01 Int) (j_V3@43@01 Int)) (!
  (and
    (=>
      (<= 0 i_V3@42@01)
      (and
        (<= 0 i_V3@42@01)
        (=>
          (< i_V3@42@01 x_V2@33@01)
          (and
            (< i_V3@42@01 x_V2@33@01)
            (=>
              (<= 0 j_V3@43@01)
              (and
                (<= 0 j_V3@43@01)
                (< $k@44@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@44@01))
                (< $k@45@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@45@01))))
            (or (not (<= 0 j_V3@43@01)) (<= 0 j_V3@43@01))))
        (or (not (< i_V3@42@01 x_V2@33@01)) (< i_V3@42@01 x_V2@33@01))))
    (or (not (<= 0 i_V3@42@01)) (<= 0 i_V3@42@01))
    (=>
      (and
        (and
          (and
            (<
              j_V3@43@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@43@01))
          (< i_V3@42@01 x_V2@33@01))
        (<= 0 i_V3@42@01))
      (and
        (<
          j_V3@43@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@43@01)
        (< i_V3@42@01 x_V2@33@01)
        (<= 0 i_V3@42@01)
        (< $k@46@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@46@01))
        (< $k@47@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@47@01))
        (<
          i_V3@42@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
        (< $k@48@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@48@01))
        (< $k@49@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@49@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01)
        (< $k@50@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@50@01))
        (< $k@51@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@51@01))
        (<
          i_V3@42@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@52@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@52@01))
        (< $k@53@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@53@01))
        (<
          j_V3@43@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V3@43@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@34@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V3@43@01))
            (< i_V3@42@01 x_V2@33@01))
          (<= 0 i_V3@42@01)))
      (and
        (and
          (and
            (<
              j_V3@43@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@43@01))
          (< i_V3@42@01 x_V2@33@01))
        (<= 0 i_V3@42@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01))
  :qid |prog.l403-aux|)))
(assert (forall ((i_V3@42@01 Int) (j_V3@43@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V3@43@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@43@01))
        (< i_V3@42@01 x_V2@33@01))
      (<= 0 i_V3@42@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@42@01 j_V3@43@01))
  :qid |prog.l403|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@01))))))
  $Snap.unit))
(assert (forall ((i_V4@54@01 Int) (j_V4@55@01 Int)) (!
  (and
    (=>
      (<= x_V2@33@01 i_V4@54@01)
      (and
        (<= x_V2@33@01 i_V4@54@01)
        (< $k@56@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@56@01))
        (=>
          (<
            i_V4@54@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
          (and
            (<
              i_V4@54@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
            (=>
              (<= 0 j_V4@55@01)
              (and
                (<= 0 j_V4@55@01)
                (< $k@57@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@57@01))
                (< $k@58@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@58@01))))
            (or (not (<= 0 j_V4@55@01)) (<= 0 j_V4@55@01))))
        (or
          (not
            (<
              i_V4@54@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
          (<
            i_V4@54@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))))
    (or (not (<= x_V2@33@01 i_V4@54@01)) (<= x_V2@33@01 i_V4@54@01))
    (=>
      (and
        (and
          (and
            (<
              j_V4@55@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V4@55@01))
          (<
            i_V4@54@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
        (<= x_V2@33@01 i_V4@54@01))
      (and
        (<
          j_V4@55@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V4@55@01)
        (<
          i_V4@54@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
        (<= x_V2@33@01 i_V4@54@01)
        (< $k@59@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@59@01))
        (<= 0 i_V4@54@01)
        (< $k@60@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@60@01))
        (< $k@61@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@61@01))
        (< $k@62@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@62@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01)
        (< $k@63@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@63@01))
        (< $k@64@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@64@01))
        (<
          i_V4@54@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@65@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@65@01))
        (< $k@66@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@66@01))
        (<
          j_V4@55@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V4@55@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@34@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V4@55@01))
            (<
              i_V4@54@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
          (<= x_V2@33@01 i_V4@54@01)))
      (and
        (and
          (and
            (<
              j_V4@55@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V4@55@01))
          (<
            i_V4@54@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
        (<= x_V2@33@01 i_V4@54@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01))
  :qid |prog.l409-aux|)))
(assert (forall ((i_V4@54@01 Int) (j_V4@55@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V4@55@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V4@55@01))
        (<
          i_V4@54@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
      (<= x_V2@33@01 i_V4@54@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01)
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V4@54@01 j_V4@55@01))
  :qid |prog.l409|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] x_V2 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@101@01 $Perm)
(assert ($Perm.isReadVar $k@101@01))
(assert (< $k@101@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@101@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@101@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@101@01))
(assert (and (< $k@101@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@101@01))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | x_V2@33@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01) | live]
; [else-branch: 20 | !(x_V2@33@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 20 | x_V2@33@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01)]
(assert (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
; [exec]
; var y_V5: Int
(declare-const y_V5@102@01 Int)
; [exec]
; inhale y_V5 == 0
(declare-const $t@103@01 $Snap)
(assert (= $t@103@01 $Snap.unit))
; [eval] y_V5 == 0
(assert (= y_V5@102@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; y_V5 := 0
(declare-const y_V5@104@01 Int)
(set-option :timeout 0)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@105@01 $Snap)
(assert (= $t@105@01 ($Snap.combine ($Snap.first $t@105@01) ($Snap.second $t@105@01))))
(assert (=
  ($Snap.second $t@105@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@105@01))
    ($Snap.second ($Snap.second $t@105@01)))))
(assert (= ($Snap.first ($Snap.second $t@105@01)) $Snap.unit))
; [eval] 0 <= x_V2
(assert (=
  ($Snap.second ($Snap.second $t@105@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@105@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@105@01))) $Snap.unit))
; [eval] x_V2 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 7
(declare-const $k@106@01 $Perm)
(assert ($Perm.isReadVar $k@106@01))
(assert (< $k@106@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@106@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@106@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@105@01) m_V0@2@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@106@01))
(assert (and
  (< $k@106@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@106@01))
  (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@105@01) m_V0@2@01)))
(assert (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@105@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@105@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@105@01))))
  $Snap.unit))
; [eval] 0 <= y_V5
(assert (<= 0 y_V5@104@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))
  $Snap.unit))
; [eval] y_V5 <= lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@107@01 $Perm)
(assert ($Perm.isReadVar $k@107@01))
(assert (< $k@107@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@107@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@107@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@108@01 $Perm)
(assert ($Perm.isReadVar $k@108@01))
(assert (< $k@108@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@108@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@108@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@108@01))
(assert (and (< $k@108@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@108@01))))
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01) 0)))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@105@01)
  $Snap.unit) m_V0@2@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@107@01))
(assert ($Perm.isReadVar $k@108@01))
(assert (and
  (< $k@107@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@107@01))
  (< $k@108@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@108@01))
  (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01) 0))
  (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@105@01)
    $Snap.unit) m_V0@2@01)))
(assert (<=
  y_V5@104@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@105@01) $Snap.unit) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
  $Snap.unit))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) == old(lenX_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 7
(declare-const $k@109@01 $Perm)
(assert ($Perm.isReadVar $k@109@01))
(assert (< $k@109@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@109@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@109@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@109@01))
(assert (and (< $k@109@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@109@01))))
; [eval] old(lenX_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@110@01 $Perm)
(assert ($Perm.isReadVar $k@110@01))
(assert (< $k@110@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@110@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@110@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@110@01))
(assert (and (< $k@110@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@110@01))))
(assert (=
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
  $Snap.unit))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0) == old(lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@111@01 $Perm)
(assert ($Perm.isReadVar $k@111@01))
(assert (< $k@111@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@111@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@111@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@112@01 $Perm)
(assert ($Perm.isReadVar $k@112@01))
(assert (< $k@112@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@112@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@112@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@112@01))
(assert (and (< $k@112@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@112@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@111@01))
(assert ($Perm.isReadVar $k@112@01))
(assert (and
  (< $k@111@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@111@01))
  (< $k@112@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@112@01))))
; [eval] old(lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@113@01 $Perm)
(assert ($Perm.isReadVar $k@113@01))
(assert (< $k@113@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@113@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@113@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@114@01 $Perm)
(assert ($Perm.isReadVar $k@114@01))
(assert (< $k@114@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@114@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@114@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@114@01))
(assert (and (< $k@114@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@114@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@113@01))
(assert ($Perm.isReadVar $k@114@01))
(assert (and
  (< $k@113@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@113@01))
  (< $k@114@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@114@01))))
(assert (=
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@105@01) $Snap.unit) m_V0@2@01)
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
  $Snap.unit))
; [eval] (forall i_V3: Int, j_V3: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) } 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1)
(declare-const i_V3@115@01 Int)
(declare-const j_V3@116@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] 0 <= i_V3
(push) ; 8
; [then-branch: 21 | 0 <= i_V3@115@01 | live]
; [else-branch: 21 | !(0 <= i_V3@115@01) | live]
(push) ; 9
; [then-branch: 21 | 0 <= i_V3@115@01]
(assert (<= 0 i_V3@115@01))
; [eval] i_V3 < x_V2
(push) ; 10
; [then-branch: 22 | i_V3@115@01 < x_V2@33@01 | live]
; [else-branch: 22 | !(i_V3@115@01 < x_V2@33@01) | live]
(push) ; 11
; [then-branch: 22 | i_V3@115@01 < x_V2@33@01]
(assert (< i_V3@115@01 x_V2@33@01))
; [eval] 0 <= j_V3
(push) ; 12
; [then-branch: 23 | 0 <= j_V3@116@01 | live]
; [else-branch: 23 | !(0 <= j_V3@116@01) | live]
(push) ; 13
; [then-branch: 23 | 0 <= j_V3@116@01]
(assert (<= 0 j_V3@116@01))
; [eval] j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 14
(declare-const $k@117@01 $Perm)
(assert ($Perm.isReadVar $k@117@01))
(assert (< $k@117@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@117@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@118@01 $Perm)
(assert ($Perm.isReadVar $k@118@01))
(assert (< $k@118@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@118@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@118@01))
(assert (and (< $k@118@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@118@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@117@01))
(assert ($Perm.isReadVar $k@118@01))
(assert (and
  (< $k@117@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@117@01))
  (< $k@118@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@118@01))))
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 23 | !(0 <= j_V3@116@01)]
(assert (not (<= 0 j_V3@116@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@117@01))
(assert ($Perm.isReadVar $k@118@01))
(assert (=>
  (<= 0 j_V3@116@01)
  (and
    (<= 0 j_V3@116@01)
    (< $k@117@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@117@01))
    (< $k@118@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@118@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V3@116@01)) (<= 0 j_V3@116@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 22 | !(i_V3@115@01 < x_V2@33@01)]
(assert (not (< i_V3@115@01 x_V2@33@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@117@01))
(assert ($Perm.isReadVar $k@118@01))
(assert (=>
  (< i_V3@115@01 x_V2@33@01)
  (and
    (< i_V3@115@01 x_V2@33@01)
    (=>
      (<= 0 j_V3@116@01)
      (and
        (<= 0 j_V3@116@01)
        (< $k@117@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@117@01))
        (< $k@118@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@118@01))))
    (or (not (<= 0 j_V3@116@01)) (<= 0 j_V3@116@01)))))
; Joined path conditions
(assert (or (not (< i_V3@115@01 x_V2@33@01)) (< i_V3@115@01 x_V2@33@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 21 | !(0 <= i_V3@115@01)]
(assert (not (<= 0 i_V3@115@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@117@01))
(assert ($Perm.isReadVar $k@118@01))
(assert (=>
  (<= 0 i_V3@115@01)
  (and
    (<= 0 i_V3@115@01)
    (=>
      (< i_V3@115@01 x_V2@33@01)
      (and
        (< i_V3@115@01 x_V2@33@01)
        (=>
          (<= 0 j_V3@116@01)
          (and
            (<= 0 j_V3@116@01)
            (< $k@117@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@117@01))
            (< $k@118@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@118@01))))
        (or (not (<= 0 j_V3@116@01)) (<= 0 j_V3@116@01))))
    (or (not (< i_V3@115@01 x_V2@33@01)) (< i_V3@115@01 x_V2@33@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V3@115@01)) (<= 0 i_V3@115@01)))
(push) ; 8
; [then-branch: 24 | j_V3@116@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && 0 <= j_V3@116@01 && i_V3@115@01 < x_V2@33@01 && 0 <= i_V3@115@01 | live]
; [else-branch: 24 | !(j_V3@116@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && 0 <= j_V3@116@01 && i_V3@115@01 < x_V2@33@01 && 0 <= i_V3@115@01) | live]
(push) ; 9
; [then-branch: 24 | j_V3@116@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && 0 <= j_V3@116@01 && i_V3@115@01 < x_V2@33@01 && 0 <= i_V3@115@01]
(assert (and
  (and
    (and
      (<
        j_V3@116@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@105@01)
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V3@116@01))
    (< i_V3@115@01 x_V2@33@01))
  (<= 0 i_V3@115@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(push) ; 10
(declare-const $k@119@01 $Perm)
(assert ($Perm.isReadVar $k@119@01))
(assert (< $k@119@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@119@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@120@01 $Perm)
(assert ($Perm.isReadVar $k@120@01))
(assert (< $k@120@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@120@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@120@01))
(assert (and (< $k@120@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@120@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (< i_V3@115@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< i_V3@115@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@121@01 $Perm)
(assert ($Perm.isReadVar $k@121@01))
(assert (< $k@121@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@121@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@121@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@122@01 $Perm)
(assert ($Perm.isReadVar $k@122@01))
(assert (< $k@122@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@122@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@122@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@122@01))
(assert (and (< $k@122@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@122@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@121@01))
(assert ($Perm.isReadVar $k@122@01))
(assert (and
  (< $k@121@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@121@01))
  (< $k@122@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@122@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@105@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@119@01))
(assert ($Perm.isReadVar $k@120@01))
(assert ($Perm.isReadVar $k@121@01))
(assert ($Perm.isReadVar $k@122@01))
(assert (and
  (< $k@119@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@119@01))
  (< $k@120@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@120@01))
  (< i_V3@115@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
  (< $k@121@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@121@01))
  (< $k@122@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@122@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@123@01 $Perm)
(assert ($Perm.isReadVar $k@123@01))
(assert (< $k@123@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@123@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@123@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@124@01 $Perm)
(assert ($Perm.isReadVar $k@124@01))
(assert (< $k@124@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@124@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@124@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@124@01))
(assert (and (< $k@124@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@124@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (< i_V3@115@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< i_V3@115@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@125@01 $Perm)
(assert ($Perm.isReadVar $k@125@01))
(assert (< $k@125@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@125@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@125@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@126@01 $Perm)
(assert ($Perm.isReadVar $k@126@01))
(assert (< $k@126@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@126@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@126@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@126@01))
(assert (and (< $k@126@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@126@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@125@01))
(assert ($Perm.isReadVar $k@126@01))
(assert (and
  (< $k@125@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@125@01))
  (< $k@126@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@126@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  j_V3@116@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V3@116@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@123@01))
(assert ($Perm.isReadVar $k@124@01))
(assert ($Perm.isReadVar $k@125@01))
(assert ($Perm.isReadVar $k@126@01))
(assert (and
  (< $k@123@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@123@01))
  (< $k@124@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@124@01))
  (< i_V3@115@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@125@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@125@01))
  (< $k@126@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@126@01))
  (<
    j_V3@116@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 24 | !(j_V3@116@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && 0 <= j_V3@116@01 && i_V3@115@01 < x_V2@33@01 && 0 <= i_V3@115@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V3@116@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@116@01))
      (< i_V3@115@01 x_V2@33@01))
    (<= 0 i_V3@115@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@119@01))
(assert ($Perm.isReadVar $k@120@01))
(assert ($Perm.isReadVar $k@121@01))
(assert ($Perm.isReadVar $k@122@01))
(assert ($Perm.isReadVar $k@123@01))
(assert ($Perm.isReadVar $k@124@01))
(assert ($Perm.isReadVar $k@125@01))
(assert ($Perm.isReadVar $k@126@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V3@116@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@116@01))
      (< i_V3@115@01 x_V2@33@01))
    (<= 0 i_V3@115@01))
  (and
    (<
      j_V3@116@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V3@116@01)
    (< i_V3@115@01 x_V2@33@01)
    (<= 0 i_V3@115@01)
    (< $k@119@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@119@01))
    (< $k@120@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@120@01))
    (<
      i_V3@115@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
    (< $k@121@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@121@01))
    (< $k@122@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@122@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@105@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01)
    (< $k@123@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@123@01))
    (< $k@124@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@124@01))
    (< i_V3@115@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@125@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@125@01))
    (< $k@126@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@126@01))
    (<
      j_V3@116@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V3@116@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@105@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@116@01))
        (< i_V3@115@01 x_V2@33@01))
      (<= 0 i_V3@115@01)))
  (and
    (and
      (and
        (<
          j_V3@116@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@116@01))
      (< i_V3@115@01 x_V2@33@01))
    (<= 0 i_V3@115@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@117@01))
(assert ($Perm.isReadVar $k@118@01))
(assert ($Perm.isReadVar $k@119@01))
(assert ($Perm.isReadVar $k@120@01))
(assert ($Perm.isReadVar $k@121@01))
(assert ($Perm.isReadVar $k@122@01))
(assert ($Perm.isReadVar $k@123@01))
(assert ($Perm.isReadVar $k@124@01))
(assert ($Perm.isReadVar $k@125@01))
(assert ($Perm.isReadVar $k@126@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@115@01 Int) (j_V3@116@01 Int)) (!
  (and
    (=>
      (<= 0 i_V3@115@01)
      (and
        (<= 0 i_V3@115@01)
        (=>
          (< i_V3@115@01 x_V2@33@01)
          (and
            (< i_V3@115@01 x_V2@33@01)
            (=>
              (<= 0 j_V3@116@01)
              (and
                (<= 0 j_V3@116@01)
                (< $k@117@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@117@01))
                (< $k@118@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@118@01))))
            (or (not (<= 0 j_V3@116@01)) (<= 0 j_V3@116@01))))
        (or (not (< i_V3@115@01 x_V2@33@01)) (< i_V3@115@01 x_V2@33@01))))
    (or (not (<= 0 i_V3@115@01)) (<= 0 i_V3@115@01))
    (=>
      (and
        (and
          (and
            (<
              j_V3@116@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@105@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@116@01))
          (< i_V3@115@01 x_V2@33@01))
        (<= 0 i_V3@115@01))
      (and
        (<
          j_V3@116@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@116@01)
        (< i_V3@115@01 x_V2@33@01)
        (<= 0 i_V3@115@01)
        (< $k@119@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@119@01))
        (< $k@120@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@120@01))
        (<
          i_V3@115@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
        (< $k@121@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@121@01))
        (< $k@122@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@122@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@105@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01)
        (< $k@123@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@123@01))
        (< $k@124@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@124@01))
        (<
          i_V3@115@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@125@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@125@01))
        (< $k@126@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@126@01))
        (<
          j_V3@116@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V3@116@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@105@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V3@116@01))
            (< i_V3@115@01 x_V2@33@01))
          (<= 0 i_V3@115@01)))
      (and
        (and
          (and
            (<
              j_V3@116@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@105@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@116@01))
          (< i_V3@115@01 x_V2@33@01))
        (<= 0 i_V3@115@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01))
  :qid |prog.l450-aux|)))
(assert (forall ((i_V3@115@01 Int) (j_V3@116@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V3@116@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@105@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@116@01))
        (< i_V3@115@01 x_V2@33@01))
      (<= 0 i_V3@115@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01))
  :qid |prog.l450|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
  $Snap.unit))
; [eval] (forall j_V6: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6) } 0 <= j_V6 && j_V6 < y_V5 ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)) * z_V0_CN1)
(declare-const j_V6@127@01 Int)
(push) ; 7
; [eval] 0 <= j_V6 && j_V6 < y_V5 ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)) * z_V0_CN1
; [eval] 0 <= j_V6 && j_V6 < y_V5
; [eval] 0 <= j_V6
(push) ; 8
; [then-branch: 25 | 0 <= j_V6@127@01 | live]
; [else-branch: 25 | !(0 <= j_V6@127@01) | live]
(push) ; 9
; [then-branch: 25 | 0 <= j_V6@127@01]
(assert (<= 0 j_V6@127@01))
; [eval] j_V6 < y_V5
(pop) ; 9
(push) ; 9
; [else-branch: 25 | !(0 <= j_V6@127@01)]
(assert (not (<= 0 j_V6@127@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V6@127@01)) (<= 0 j_V6@127@01)))
(push) ; 8
; [then-branch: 26 | j_V6@127@01 < y_V5@104@01 && 0 <= j_V6@127@01 | live]
; [else-branch: 26 | !(j_V6@127@01 < y_V5@104@01 && 0 <= j_V6@127@01) | live]
(push) ; 9
; [then-branch: 26 | j_V6@127@01 < y_V5@104@01 && 0 <= j_V6@127@01]
(assert (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)) * z_V0_CN1
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)
(push) ; 10
(declare-const $k@128@01 $Perm)
(assert ($Perm.isReadVar $k@128@01))
(assert (< $k@128@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@128@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@128@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@129@01 $Perm)
(assert ($Perm.isReadVar $k@129@01))
(assert (< $k@129@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@129@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@129@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@129@01))
(assert (and (< $k@129@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@129@01))))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@130@01 $Perm)
(assert ($Perm.isReadVar $k@130@01))
(assert (< $k@130@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@130@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@130@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@131@01 $Perm)
(assert ($Perm.isReadVar $k@131@01))
(assert (< $k@131@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@131@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@131@01))
(assert (and (< $k@131@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@131@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@130@01))
(assert ($Perm.isReadVar $k@131@01))
(assert (and
  (< $k@130@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@130@01))
  (< $k@131@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@131@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  j_V6@127@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@105@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V6@127@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@105@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@105@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@128@01))
(assert ($Perm.isReadVar $k@129@01))
(assert ($Perm.isReadVar $k@130@01))
(assert ($Perm.isReadVar $k@131@01))
(assert (and
  (< $k@128@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@128@01))
  (< $k@129@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@129@01))
  (< $k@130@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@130@01))
  (< $k@131@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@131@01))
  (<
    j_V6@127@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@105@01)
      $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)) * z_V0_CN1
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)
(push) ; 10
(declare-const $k@132@01 $Perm)
(assert ($Perm.isReadVar $k@132@01))
(assert (< $k@132@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@132@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@132@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@133@01 $Perm)
(assert ($Perm.isReadVar $k@133@01))
(assert (< $k@133@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@133@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@133@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@133@01))
(assert (and (< $k@133@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@133@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@134@01 $Perm)
(assert ($Perm.isReadVar $k@134@01))
(assert (< $k@134@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@134@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@134@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@135@01 $Perm)
(assert ($Perm.isReadVar $k@135@01))
(assert (< $k@135@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@135@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@135@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@135@01))
(assert (and (< $k@135@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@135@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@134@01))
(assert ($Perm.isReadVar $k@135@01))
(assert (and
  (< $k@134@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@134@01))
  (< $k@135@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@135@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  j_V6@127@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V6@127@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@132@01))
(assert ($Perm.isReadVar $k@133@01))
(assert ($Perm.isReadVar $k@134@01))
(assert ($Perm.isReadVar $k@135@01))
(assert (and
  (< $k@132@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@132@01))
  (< $k@133@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@133@01))
  (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@134@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@134@01))
  (< $k@135@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@135@01))
  (<
    j_V6@127@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 26 | !(j_V6@127@01 < y_V5@104@01 && 0 <= j_V6@127@01)]
(assert (not (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@128@01))
(assert ($Perm.isReadVar $k@129@01))
(assert ($Perm.isReadVar $k@130@01))
(assert ($Perm.isReadVar $k@131@01))
(assert ($Perm.isReadVar $k@132@01))
(assert ($Perm.isReadVar $k@133@01))
(assert ($Perm.isReadVar $k@134@01))
(assert ($Perm.isReadVar $k@135@01))
(assert (=>
  (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01))
  (and
    (< j_V6@127@01 y_V5@104@01)
    (<= 0 j_V6@127@01)
    (< $k@128@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@128@01))
    (< $k@129@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@129@01))
    (< $k@130@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@130@01))
    (< $k@131@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@131@01))
    (<
      j_V6@127@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@105@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01)
    (< $k@132@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@132@01))
    (< $k@133@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@133@01))
    (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@134@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@134@01))
    (< $k@135@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@135@01))
    (<
      j_V6@127@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01))))
; Joined path conditions
(assert (or
  (not (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01)))
  (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@128@01))
(assert ($Perm.isReadVar $k@129@01))
(assert ($Perm.isReadVar $k@130@01))
(assert ($Perm.isReadVar $k@131@01))
(assert ($Perm.isReadVar $k@132@01))
(assert ($Perm.isReadVar $k@133@01))
(assert ($Perm.isReadVar $k@134@01))
(assert ($Perm.isReadVar $k@135@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j_V6@127@01 Int)) (!
  (and
    (or (not (<= 0 j_V6@127@01)) (<= 0 j_V6@127@01))
    (=>
      (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01))
      (and
        (< j_V6@127@01 y_V5@104@01)
        (<= 0 j_V6@127@01)
        (< $k@128@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@128@01))
        (< $k@129@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@129@01))
        (< $k@130@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@130@01))
        (< $k@131@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@131@01))
        (<
          j_V6@127@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@105@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01)
        (< $k@132@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@132@01))
        (< $k@133@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@133@01))
        (<
          x_V2@33@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@134@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@134@01))
        (< $k@135@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@135@01))
        (<
          j_V6@127@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01)))
    (or
      (not (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01)))
      (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01))
  :qid |prog.l457-aux|)))
(assert (forall ((j_V6@127@01 Int)) (!
  (=>
    (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01))
  :qid |prog.l457|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
  $Snap.unit))
; [eval] (forall j_V7: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7) } y_V5 <= j_V7 && j_V7 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7)))
(declare-const j_V7@136@01 Int)
(push) ; 7
; [eval] y_V5 <= j_V7 && j_V7 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7))
; [eval] y_V5 <= j_V7 && j_V7 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] y_V5 <= j_V7
(push) ; 8
; [then-branch: 27 | y_V5@104@01 <= j_V7@136@01 | live]
; [else-branch: 27 | !(y_V5@104@01 <= j_V7@136@01) | live]
(push) ; 9
; [then-branch: 27 | y_V5@104@01 <= j_V7@136@01]
(assert (<= y_V5@104@01 j_V7@136@01))
; [eval] j_V7 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 10
(declare-const $k@137@01 $Perm)
(assert ($Perm.isReadVar $k@137@01))
(assert (< $k@137@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@137@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@137@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@138@01 $Perm)
(assert ($Perm.isReadVar $k@138@01))
(assert (< $k@138@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@138@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@138@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@138@01))
(assert (and (< $k@138@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@138@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@137@01))
(assert ($Perm.isReadVar $k@138@01))
(assert (and
  (< $k@137@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@137@01))
  (< $k@138@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@138@01))))
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 27 | !(y_V5@104@01 <= j_V7@136@01)]
(assert (not (<= y_V5@104@01 j_V7@136@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@137@01))
(assert ($Perm.isReadVar $k@138@01))
(assert (=>
  (<= y_V5@104@01 j_V7@136@01)
  (and
    (<= y_V5@104@01 j_V7@136@01)
    (< $k@137@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@137@01))
    (< $k@138@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@138@01)))))
; Joined path conditions
(assert (or (not (<= y_V5@104@01 j_V7@136@01)) (<= y_V5@104@01 j_V7@136@01)))
(push) ; 8
; [then-branch: 28 | j_V7@136@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && y_V5@104@01 <= j_V7@136@01 | live]
; [else-branch: 28 | !(j_V7@136@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && y_V5@104@01 <= j_V7@136@01) | live]
(push) ; 9
; [then-branch: 28 | j_V7@136@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && y_V5@104@01 <= j_V7@136@01]
(assert (and
  (<
    j_V7@136@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@105@01)
      $Snap.unit) m_V0@2@01))
  (<= y_V5@104@01 j_V7@136@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7)
(push) ; 10
(declare-const $k@139@01 $Perm)
(assert ($Perm.isReadVar $k@139@01))
(assert (< $k@139@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@139@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@139@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@140@01 $Perm)
(assert ($Perm.isReadVar $k@140@01))
(assert (< $k@140@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@140@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@140@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@140@01))
(assert (and (< $k@140@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@140@01))))
; [eval] 0 <= j_V0
(set-option :timeout 0)
(push) ; 11
(assert (not (<= 0 j_V7@136@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 j_V7@136@01))
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@141@01 $Perm)
(assert ($Perm.isReadVar $k@141@01))
(assert (< $k@141@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@141@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@141@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@142@01 $Perm)
(assert ($Perm.isReadVar $k@142@01))
(assert (< $k@142@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@142@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@142@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@142@01))
(assert (and (< $k@142@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@142@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@141@01))
(assert ($Perm.isReadVar $k@142@01))
(assert (and
  (< $k@141@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@141@01))
  (< $k@142@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@142@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@105@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@139@01))
(assert ($Perm.isReadVar $k@140@01))
(assert ($Perm.isReadVar $k@141@01))
(assert ($Perm.isReadVar $k@142@01))
(assert (and
  (< $k@139@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@139@01))
  (< $k@140@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@140@01))
  (<= 0 j_V7@136@01)
  (< $k@141@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@141@01))
  (< $k@142@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@142@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@143@01 $Perm)
(assert ($Perm.isReadVar $k@143@01))
(assert (< $k@143@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@143@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@143@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@144@01 $Perm)
(assert ($Perm.isReadVar $k@144@01))
(assert (< $k@144@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@144@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@144@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@144@01))
(assert (and (< $k@144@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@144@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@145@01 $Perm)
(assert ($Perm.isReadVar $k@145@01))
(assert (< $k@145@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@145@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@145@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@146@01 $Perm)
(assert ($Perm.isReadVar $k@146@01))
(assert (< $k@146@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@146@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@146@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@146@01))
(assert (and (< $k@146@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@146@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@145@01))
(assert ($Perm.isReadVar $k@146@01))
(assert (and
  (< $k@145@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@145@01))
  (< $k@146@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@146@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  j_V7@136@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V7@136@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@143@01))
(assert ($Perm.isReadVar $k@144@01))
(assert ($Perm.isReadVar $k@145@01))
(assert ($Perm.isReadVar $k@146@01))
(assert (and
  (< $k@143@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@143@01))
  (< $k@144@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@144@01))
  (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@145@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@145@01))
  (< $k@146@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@146@01))
  (<
    j_V7@136@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 28 | !(j_V7@136@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && y_V5@104@01 <= j_V7@136@01)]
(assert (not
  (and
    (<
      j_V7@136@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        $Snap.unit) m_V0@2@01))
    (<= y_V5@104@01 j_V7@136@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@139@01))
(assert ($Perm.isReadVar $k@140@01))
(assert ($Perm.isReadVar $k@141@01))
(assert ($Perm.isReadVar $k@142@01))
(assert ($Perm.isReadVar $k@143@01))
(assert ($Perm.isReadVar $k@144@01))
(assert ($Perm.isReadVar $k@145@01))
(assert ($Perm.isReadVar $k@146@01))
(assert (=>
  (and
    (<
      j_V7@136@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        $Snap.unit) m_V0@2@01))
    (<= y_V5@104@01 j_V7@136@01))
  (and
    (<
      j_V7@136@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        $Snap.unit) m_V0@2@01))
    (<= y_V5@104@01 j_V7@136@01)
    (< $k@139@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@139@01))
    (< $k@140@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@140@01))
    (<= 0 j_V7@136@01)
    (< $k@141@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@141@01))
    (< $k@142@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@142@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@105@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01)
    (< $k@143@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@143@01))
    (< $k@144@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@144@01))
    (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@145@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@145@01))
    (< $k@146@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@146@01))
    (<
      j_V7@136@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<
        j_V7@136@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@105@01)
          $Snap.unit) m_V0@2@01))
      (<= y_V5@104@01 j_V7@136@01)))
  (and
    (<
      j_V7@136@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        $Snap.unit) m_V0@2@01))
    (<= y_V5@104@01 j_V7@136@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@137@01))
(assert ($Perm.isReadVar $k@138@01))
(assert ($Perm.isReadVar $k@139@01))
(assert ($Perm.isReadVar $k@140@01))
(assert ($Perm.isReadVar $k@141@01))
(assert ($Perm.isReadVar $k@142@01))
(assert ($Perm.isReadVar $k@143@01))
(assert ($Perm.isReadVar $k@144@01))
(assert ($Perm.isReadVar $k@145@01))
(assert ($Perm.isReadVar $k@146@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j_V7@136@01 Int)) (!
  (and
    (=>
      (<= y_V5@104@01 j_V7@136@01)
      (and
        (<= y_V5@104@01 j_V7@136@01)
        (< $k@137@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@137@01))
        (< $k@138@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@138@01))))
    (or (not (<= y_V5@104@01 j_V7@136@01)) (<= y_V5@104@01 j_V7@136@01))
    (=>
      (and
        (<
          j_V7@136@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= y_V5@104@01 j_V7@136@01))
      (and
        (<
          j_V7@136@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= y_V5@104@01 j_V7@136@01)
        (< $k@139@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@139@01))
        (< $k@140@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@140@01))
        (<= 0 j_V7@136@01)
        (< $k@141@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@141@01))
        (< $k@142@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@142@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@105@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01)
        (< $k@143@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@143@01))
        (< $k@144@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@144@01))
        (<
          x_V2@33@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@145@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@145@01))
        (< $k@146@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@146@01))
        (<
          j_V7@136@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01)))
    (or
      (not
        (and
          (<
            j_V7@136@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@105@01)
              $Snap.unit) m_V0@2@01))
          (<= y_V5@104@01 j_V7@136@01)))
      (and
        (<
          j_V7@136@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= y_V5@104@01 j_V7@136@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01))
  :qid |prog.l463-aux|)))
(assert (forall ((j_V7@136@01 Int)) (!
  (=>
    (and
      (<
        j_V7@136@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@105@01)
          $Snap.unit) m_V0@2@01))
      (<= y_V5@104@01 j_V7@136@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01)
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01))
  :qid |prog.l463|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
  $Snap.unit))
; [eval] (forall i_V8: Int, j_V8: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8) } x_V2 < i_V8 && (i_V8 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V8 && j_V8 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8)))
(declare-const i_V8@147@01 Int)
(declare-const j_V8@148@01 Int)
(push) ; 7
; [eval] x_V2 < i_V8 && (i_V8 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V8 && j_V8 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8))
; [eval] x_V2 < i_V8 && (i_V8 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V8 && j_V8 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] x_V2 < i_V8
(push) ; 8
; [then-branch: 29 | x_V2@33@01 < i_V8@147@01 | live]
; [else-branch: 29 | !(x_V2@33@01 < i_V8@147@01) | live]
(push) ; 9
; [then-branch: 29 | x_V2@33@01 < i_V8@147@01]
(assert (< x_V2@33@01 i_V8@147@01))
; [eval] i_V8 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 10
(declare-const $k@149@01 $Perm)
(assert ($Perm.isReadVar $k@149@01))
(assert (< $k@149@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@149@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@149@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@149@01))
(assert (and (< $k@149@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@149@01))))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 30 | i_V8@147@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@105@01), m_V0@2@01) | live]
; [else-branch: 30 | !(i_V8@147@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@105@01), m_V0@2@01)) | live]
(push) ; 11
; [then-branch: 30 | i_V8@147@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@105@01), m_V0@2@01)]
(assert (< i_V8@147@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
; [eval] 0 <= j_V8
(push) ; 12
; [then-branch: 31 | 0 <= j_V8@148@01 | live]
; [else-branch: 31 | !(0 <= j_V8@148@01) | live]
(push) ; 13
; [then-branch: 31 | 0 <= j_V8@148@01]
(assert (<= 0 j_V8@148@01))
; [eval] j_V8 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 14
(declare-const $k@150@01 $Perm)
(assert ($Perm.isReadVar $k@150@01))
(assert (< $k@150@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@150@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@150@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@151@01 $Perm)
(assert ($Perm.isReadVar $k@151@01))
(assert (< $k@151@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@151@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@151@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@151@01))
(assert (and (< $k@151@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@151@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@150@01))
(assert ($Perm.isReadVar $k@151@01))
(assert (and
  (< $k@150@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@150@01))
  (< $k@151@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@151@01))))
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 31 | !(0 <= j_V8@148@01)]
(assert (not (<= 0 j_V8@148@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@150@01))
(assert ($Perm.isReadVar $k@151@01))
(assert (=>
  (<= 0 j_V8@148@01)
  (and
    (<= 0 j_V8@148@01)
    (< $k@150@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@150@01))
    (< $k@151@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@151@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V8@148@01)) (<= 0 j_V8@148@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 30 | !(i_V8@147@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@105@01), m_V0@2@01))]
(assert (not
  (< i_V8@147@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@150@01))
(assert ($Perm.isReadVar $k@151@01))
(assert (=>
  (< i_V8@147@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
  (and
    (<
      i_V8@147@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
    (=>
      (<= 0 j_V8@148@01)
      (and
        (<= 0 j_V8@148@01)
        (< $k@150@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@150@01))
        (< $k@151@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@151@01))))
    (or (not (<= 0 j_V8@148@01)) (<= 0 j_V8@148@01)))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V8@147@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
  (< i_V8@147@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 29 | !(x_V2@33@01 < i_V8@147@01)]
(assert (not (< x_V2@33@01 i_V8@147@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@149@01))
(assert ($Perm.isReadVar $k@150@01))
(assert ($Perm.isReadVar $k@151@01))
(assert (=>
  (< x_V2@33@01 i_V8@147@01)
  (and
    (< x_V2@33@01 i_V8@147@01)
    (< $k@149@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@149@01))
    (=>
      (<
        i_V8@147@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
      (and
        (<
          i_V8@147@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
        (=>
          (<= 0 j_V8@148@01)
          (and
            (<= 0 j_V8@148@01)
            (< $k@150@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@150@01))
            (< $k@151@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@151@01))))
        (or (not (<= 0 j_V8@148@01)) (<= 0 j_V8@148@01))))
    (or
      (not
        (<
          i_V8@147@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
      (<
        i_V8@147@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))))))
; Joined path conditions
(assert (or (not (< x_V2@33@01 i_V8@147@01)) (< x_V2@33@01 i_V8@147@01)))
(push) ; 8
; [then-branch: 32 | j_V8@148@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && 0 <= j_V8@148@01 && i_V8@147@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@105@01), m_V0@2@01) && x_V2@33@01 < i_V8@147@01 | live]
; [else-branch: 32 | !(j_V8@148@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && 0 <= j_V8@148@01 && i_V8@147@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@105@01), m_V0@2@01) && x_V2@33@01 < i_V8@147@01) | live]
(push) ; 9
; [then-branch: 32 | j_V8@148@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && 0 <= j_V8@148@01 && i_V8@147@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@105@01), m_V0@2@01) && x_V2@33@01 < i_V8@147@01]
(assert (and
  (and
    (and
      (<
        j_V8@148@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@105@01)
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V8@148@01))
    (<
      i_V8@147@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
  (< x_V2@33@01 i_V8@147@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8)
(push) ; 10
(declare-const $k@152@01 $Perm)
(assert ($Perm.isReadVar $k@152@01))
(assert (< $k@152@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@152@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@152@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
(set-option :timeout 0)
(push) ; 11
(assert (not (<= 0 i_V8@147@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i_V8@147@01))
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@153@01 $Perm)
(assert ($Perm.isReadVar $k@153@01))
(assert (< $k@153@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@153@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@153@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@153@01))
(assert (and (< $k@153@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@153@01))))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@154@01 $Perm)
(assert ($Perm.isReadVar $k@154@01))
(assert (< $k@154@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@154@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@154@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@155@01 $Perm)
(assert ($Perm.isReadVar $k@155@01))
(assert (< $k@155@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@155@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@155@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@155@01))
(assert (and (< $k@155@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@155@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@154@01))
(assert ($Perm.isReadVar $k@155@01))
(assert (and
  (< $k@154@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@154@01))
  (< $k@155@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@155@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@105@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@152@01))
(assert ($Perm.isReadVar $k@153@01))
(assert ($Perm.isReadVar $k@154@01))
(assert ($Perm.isReadVar $k@155@01))
(assert (and
  (< $k@152@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@152@01))
  (<= 0 i_V8@147@01)
  (< $k@153@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@153@01))
  (< $k@154@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@154@01))
  (< $k@155@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@155@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@156@01 $Perm)
(assert ($Perm.isReadVar $k@156@01))
(assert (< $k@156@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@156@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@156@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@157@01 $Perm)
(assert ($Perm.isReadVar $k@157@01))
(assert (< $k@157@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@157@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@157@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@157@01))
(assert (and (< $k@157@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@157@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (< i_V8@147@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< i_V8@147@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@158@01 $Perm)
(assert ($Perm.isReadVar $k@158@01))
(assert (< $k@158@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@158@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@158@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@159@01 $Perm)
(assert ($Perm.isReadVar $k@159@01))
(assert (< $k@159@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@159@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@159@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@159@01))
(assert (and (< $k@159@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@159@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@158@01))
(assert ($Perm.isReadVar $k@159@01))
(assert (and
  (< $k@158@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@158@01))
  (< $k@159@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@159@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  j_V8@148@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V8@148@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@156@01))
(assert ($Perm.isReadVar $k@157@01))
(assert ($Perm.isReadVar $k@158@01))
(assert ($Perm.isReadVar $k@159@01))
(assert (and
  (< $k@156@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@156@01))
  (< $k@157@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@157@01))
  (< i_V8@147@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@158@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@158@01))
  (< $k@159@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@159@01))
  (<
    j_V8@148@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 32 | !(j_V8@148@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) && 0 <= j_V8@148@01 && i_V8@147@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@105@01), m_V0@2@01) && x_V2@33@01 < i_V8@147@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V8@148@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V8@148@01))
      (<
        i_V8@147@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
    (< x_V2@33@01 i_V8@147@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@152@01))
(assert ($Perm.isReadVar $k@153@01))
(assert ($Perm.isReadVar $k@154@01))
(assert ($Perm.isReadVar $k@155@01))
(assert ($Perm.isReadVar $k@156@01))
(assert ($Perm.isReadVar $k@157@01))
(assert ($Perm.isReadVar $k@158@01))
(assert ($Perm.isReadVar $k@159@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V8@148@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V8@148@01))
      (<
        i_V8@147@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
    (< x_V2@33@01 i_V8@147@01))
  (and
    (<
      j_V8@148@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V8@148@01)
    (<
      i_V8@147@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
    (< x_V2@33@01 i_V8@147@01)
    (< $k@152@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@152@01))
    (<= 0 i_V8@147@01)
    (< $k@153@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@153@01))
    (< $k@154@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@154@01))
    (< $k@155@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@155@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@105@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01)
    (< $k@156@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@156@01))
    (< $k@157@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@157@01))
    (< i_V8@147@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@158@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@158@01))
    (< $k@159@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@159@01))
    (<
      j_V8@148@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V8@148@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@105@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V8@148@01))
        (<
          i_V8@147@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
      (< x_V2@33@01 i_V8@147@01)))
  (and
    (and
      (and
        (<
          j_V8@148@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V8@148@01))
      (<
        i_V8@147@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
    (< x_V2@33@01 i_V8@147@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@149@01))
(assert ($Perm.isReadVar $k@150@01))
(assert ($Perm.isReadVar $k@151@01))
(assert ($Perm.isReadVar $k@152@01))
(assert ($Perm.isReadVar $k@153@01))
(assert ($Perm.isReadVar $k@154@01))
(assert ($Perm.isReadVar $k@155@01))
(assert ($Perm.isReadVar $k@156@01))
(assert ($Perm.isReadVar $k@157@01))
(assert ($Perm.isReadVar $k@158@01))
(assert ($Perm.isReadVar $k@159@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V8@147@01 Int) (j_V8@148@01 Int)) (!
  (and
    (=>
      (< x_V2@33@01 i_V8@147@01)
      (and
        (< x_V2@33@01 i_V8@147@01)
        (< $k@149@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@149@01))
        (=>
          (<
            i_V8@147@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
          (and
            (<
              i_V8@147@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
            (=>
              (<= 0 j_V8@148@01)
              (and
                (<= 0 j_V8@148@01)
                (< $k@150@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@150@01))
                (< $k@151@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@151@01))))
            (or (not (<= 0 j_V8@148@01)) (<= 0 j_V8@148@01))))
        (or
          (not
            (<
              i_V8@147@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
          (<
            i_V8@147@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))))
    (or (not (< x_V2@33@01 i_V8@147@01)) (< x_V2@33@01 i_V8@147@01))
    (=>
      (and
        (and
          (and
            (<
              j_V8@148@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@105@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V8@148@01))
          (<
            i_V8@147@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
        (< x_V2@33@01 i_V8@147@01))
      (and
        (<
          j_V8@148@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V8@148@01)
        (<
          i_V8@147@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
        (< x_V2@33@01 i_V8@147@01)
        (< $k@152@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@152@01))
        (<= 0 i_V8@147@01)
        (< $k@153@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@153@01))
        (< $k@154@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@154@01))
        (< $k@155@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@155@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@105@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01)
        (< $k@156@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@156@01))
        (< $k@157@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@157@01))
        (<
          i_V8@147@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@158@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@158@01))
        (< $k@159@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@159@01))
        (<
          j_V8@148@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V8@148@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@105@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V8@148@01))
            (<
              i_V8@147@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
          (< x_V2@33@01 i_V8@147@01)))
      (and
        (and
          (and
            (<
              j_V8@148@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@105@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V8@148@01))
          (<
            i_V8@147@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
        (< x_V2@33@01 i_V8@147@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01))
  :qid |prog.l468-aux|)))
(assert (forall ((i_V8@147@01 Int) (j_V8@148@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V8@148@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@105@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V8@148@01))
        (<
          i_V8@147@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
      (< x_V2@33@01 i_V8@147@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01)
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01))
  :qid |prog.l468|)))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
; [eval] y_V5 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 8
(declare-const $k@160@01 $Perm)
(assert ($Perm.isReadVar $k@160@01))
(assert (< $k@160@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@160@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@160@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@161@01 $Perm)
(assert ($Perm.isReadVar $k@161@01))
(assert (< $k@161@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@161@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@161@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@161@01))
(assert (and (< $k@161@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@161@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@160@01))
(assert ($Perm.isReadVar $k@161@01))
(assert (and
  (< $k@160@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@160@01))
  (< $k@161@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@161@01))))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [eval] !(y_V5 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] y_V5 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 8
(declare-const $k@162@01 $Perm)
(assert ($Perm.isReadVar $k@162@01))
(assert (< $k@162@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@162@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@162@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@163@01 $Perm)
(assert ($Perm.isReadVar $k@163@01))
(assert (< $k@163@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@163@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@163@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@163@01))
(assert (and (< $k@163@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@163@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@162@01))
(assert ($Perm.isReadVar $k@163@01))
(assert (and
  (< $k@162@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@162@01))
  (< $k@163@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@163@01))))
(pop) ; 7
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; Loop head block: Establish invariant
; [eval] 0 <= x_V2
; [eval] x_V2 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 7
(declare-const $k@164@01 $Perm)
(assert ($Perm.isReadVar $k@164@01))
(assert (< $k@164@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@164@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@164@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@164@01))
(assert (and (< $k@164@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@164@01))))
; [eval] 0 <= y_V5
; [eval] y_V5 <= lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@165@01 $Perm)
(assert ($Perm.isReadVar $k@165@01))
(assert (< $k@165@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@165@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@165@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@166@01 $Perm)
(assert ($Perm.isReadVar $k@166@01))
(assert (< $k@166@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@166@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@166@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@166@01))
(assert (and (< $k@166@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@166@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@165@01))
(assert ($Perm.isReadVar $k@166@01))
(assert (and
  (< $k@165@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@165@01))
  (< $k@166@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@166@01))))
(set-option :timeout 0)
(push) ; 7
(assert (not (<=
  0
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@34@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@34@01) $Snap.unit) m_V0@2@01)))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) == old(lenX_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 7
(declare-const $k@167@01 $Perm)
(assert ($Perm.isReadVar $k@167@01))
(assert (< $k@167@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@167@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@167@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@167@01))
(assert (and (< $k@167@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@167@01))))
; [eval] old(lenX_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@168@01 $Perm)
(assert ($Perm.isReadVar $k@168@01))
(assert (< $k@168@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@168@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@168@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@168@01))
(assert (and (< $k@168@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@168@01))))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0) == old(lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@169@01 $Perm)
(assert ($Perm.isReadVar $k@169@01))
(assert (< $k@169@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@169@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@169@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@170@01 $Perm)
(assert ($Perm.isReadVar $k@170@01))
(assert (< $k@170@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@170@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@170@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@170@01))
(assert (and (< $k@170@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@170@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@169@01))
(assert ($Perm.isReadVar $k@170@01))
(assert (and
  (< $k@169@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@169@01))
  (< $k@170@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@170@01))))
; [eval] old(lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@171@01 $Perm)
(assert ($Perm.isReadVar $k@171@01))
(assert (< $k@171@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@171@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@172@01 $Perm)
(assert ($Perm.isReadVar $k@172@01))
(assert (< $k@172@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@172@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@172@01))
(assert (and (< $k@172@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@172@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@171@01))
(assert ($Perm.isReadVar $k@172@01))
(assert (and
  (< $k@171@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@171@01))
  (< $k@172@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@172@01))))
; [eval] (forall i_V3: Int, j_V3: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) } 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1)
(declare-const i_V3@173@01 Int)
(declare-const j_V3@174@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] 0 <= i_V3
(push) ; 8
; [then-branch: 33 | 0 <= i_V3@173@01 | live]
; [else-branch: 33 | !(0 <= i_V3@173@01) | live]
(push) ; 9
; [then-branch: 33 | 0 <= i_V3@173@01]
(assert (<= 0 i_V3@173@01))
; [eval] i_V3 < x_V2
(push) ; 10
; [then-branch: 34 | i_V3@173@01 < x_V2@33@01 | live]
; [else-branch: 34 | !(i_V3@173@01 < x_V2@33@01) | live]
(push) ; 11
; [then-branch: 34 | i_V3@173@01 < x_V2@33@01]
(assert (< i_V3@173@01 x_V2@33@01))
; [eval] 0 <= j_V3
(push) ; 12
; [then-branch: 35 | 0 <= j_V3@174@01 | live]
; [else-branch: 35 | !(0 <= j_V3@174@01) | live]
(push) ; 13
; [then-branch: 35 | 0 <= j_V3@174@01]
(assert (<= 0 j_V3@174@01))
; [eval] j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 14
(declare-const $k@175@01 $Perm)
(assert ($Perm.isReadVar $k@175@01))
(assert (< $k@175@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@175@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@176@01 $Perm)
(assert ($Perm.isReadVar $k@176@01))
(assert (< $k@176@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@176@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@176@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@176@01))
(assert (and (< $k@176@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@176@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@175@01))
(assert ($Perm.isReadVar $k@176@01))
(assert (and
  (< $k@175@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@175@01))
  (< $k@176@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@176@01))))
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 35 | !(0 <= j_V3@174@01)]
(assert (not (<= 0 j_V3@174@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@175@01))
(assert ($Perm.isReadVar $k@176@01))
(assert (=>
  (<= 0 j_V3@174@01)
  (and
    (<= 0 j_V3@174@01)
    (< $k@175@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@175@01))
    (< $k@176@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@176@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V3@174@01)) (<= 0 j_V3@174@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 34 | !(i_V3@173@01 < x_V2@33@01)]
(assert (not (< i_V3@173@01 x_V2@33@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@175@01))
(assert ($Perm.isReadVar $k@176@01))
(assert (=>
  (< i_V3@173@01 x_V2@33@01)
  (and
    (< i_V3@173@01 x_V2@33@01)
    (=>
      (<= 0 j_V3@174@01)
      (and
        (<= 0 j_V3@174@01)
        (< $k@175@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@175@01))
        (< $k@176@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@176@01))))
    (or (not (<= 0 j_V3@174@01)) (<= 0 j_V3@174@01)))))
; Joined path conditions
(assert (or (not (< i_V3@173@01 x_V2@33@01)) (< i_V3@173@01 x_V2@33@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 33 | !(0 <= i_V3@173@01)]
(assert (not (<= 0 i_V3@173@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@175@01))
(assert ($Perm.isReadVar $k@176@01))
(assert (=>
  (<= 0 i_V3@173@01)
  (and
    (<= 0 i_V3@173@01)
    (=>
      (< i_V3@173@01 x_V2@33@01)
      (and
        (< i_V3@173@01 x_V2@33@01)
        (=>
          (<= 0 j_V3@174@01)
          (and
            (<= 0 j_V3@174@01)
            (< $k@175@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@175@01))
            (< $k@176@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@176@01))))
        (or (not (<= 0 j_V3@174@01)) (<= 0 j_V3@174@01))))
    (or (not (< i_V3@173@01 x_V2@33@01)) (< i_V3@173@01 x_V2@33@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V3@173@01)) (<= 0 i_V3@173@01)))
(push) ; 8
; [then-branch: 36 | j_V3@174@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V3@174@01 && i_V3@173@01 < x_V2@33@01 && 0 <= i_V3@173@01 | live]
; [else-branch: 36 | !(j_V3@174@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V3@174@01 && i_V3@173@01 < x_V2@33@01 && 0 <= i_V3@173@01) | live]
(push) ; 9
; [then-branch: 36 | j_V3@174@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V3@174@01 && i_V3@173@01 < x_V2@33@01 && 0 <= i_V3@173@01]
(assert (and
  (and
    (and
      (<
        j_V3@174@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@34@01)
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V3@174@01))
    (< i_V3@173@01 x_V2@33@01))
  (<= 0 i_V3@173@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(push) ; 10
(declare-const $k@177@01 $Perm)
(assert ($Perm.isReadVar $k@177@01))
(assert (< $k@177@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@177@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@177@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@178@01 $Perm)
(assert ($Perm.isReadVar $k@178@01))
(assert (< $k@178@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@178@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@178@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@178@01))
(assert (and (< $k@178@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@178@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (< i_V3@173@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< i_V3@173@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@179@01 $Perm)
(assert ($Perm.isReadVar $k@179@01))
(assert (< $k@179@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@179@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@179@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@180@01 $Perm)
(assert ($Perm.isReadVar $k@180@01))
(assert (< $k@180@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@180@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@180@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@180@01))
(assert (and (< $k@180@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@180@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@179@01))
(assert ($Perm.isReadVar $k@180@01))
(assert (and
  (< $k@179@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@179@01))
  (< $k@180@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@180@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@34@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@177@01))
(assert ($Perm.isReadVar $k@178@01))
(assert ($Perm.isReadVar $k@179@01))
(assert ($Perm.isReadVar $k@180@01))
(assert (and
  (< $k@177@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@177@01))
  (< $k@178@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@178@01))
  (< i_V3@173@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
  (< $k@179@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@179@01))
  (< $k@180@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@180@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@181@01 $Perm)
(assert ($Perm.isReadVar $k@181@01))
(assert (< $k@181@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@181@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@181@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@182@01 $Perm)
(assert ($Perm.isReadVar $k@182@01))
(assert (< $k@182@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@182@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@182@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@182@01))
(assert (and (< $k@182@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@182@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (< i_V3@173@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< i_V3@173@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@183@01 $Perm)
(assert ($Perm.isReadVar $k@183@01))
(assert (< $k@183@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@183@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@183@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@184@01 $Perm)
(assert ($Perm.isReadVar $k@184@01))
(assert (< $k@184@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@184@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@184@01))
(assert (and (< $k@184@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@184@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@183@01))
(assert ($Perm.isReadVar $k@184@01))
(assert (and
  (< $k@183@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@183@01))
  (< $k@184@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@184@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  j_V3@174@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V3@174@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@181@01))
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(assert ($Perm.isReadVar $k@184@01))
(assert (and
  (< $k@181@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@181@01))
  (< $k@182@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@182@01))
  (< i_V3@173@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@183@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@183@01))
  (< $k@184@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@184@01))
  (<
    j_V3@174@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 36 | !(j_V3@174@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V3@174@01 && i_V3@173@01 < x_V2@33@01 && 0 <= i_V3@173@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V3@174@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@174@01))
      (< i_V3@173@01 x_V2@33@01))
    (<= 0 i_V3@173@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@177@01))
(assert ($Perm.isReadVar $k@178@01))
(assert ($Perm.isReadVar $k@179@01))
(assert ($Perm.isReadVar $k@180@01))
(assert ($Perm.isReadVar $k@181@01))
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(assert ($Perm.isReadVar $k@184@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V3@174@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@174@01))
      (< i_V3@173@01 x_V2@33@01))
    (<= 0 i_V3@173@01))
  (and
    (<
      j_V3@174@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V3@174@01)
    (< i_V3@173@01 x_V2@33@01)
    (<= 0 i_V3@173@01)
    (< $k@177@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@177@01))
    (< $k@178@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@178@01))
    (<
      i_V3@173@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
    (< $k@179@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@179@01))
    (< $k@180@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@180@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@34@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01)
    (< $k@181@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@181@01))
    (< $k@182@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@182@01))
    (< i_V3@173@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@183@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@183@01))
    (< $k@184@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@184@01))
    (<
      j_V3@174@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V3@174@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@174@01))
        (< i_V3@173@01 x_V2@33@01))
      (<= 0 i_V3@173@01)))
  (and
    (and
      (and
        (<
          j_V3@174@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@174@01))
      (< i_V3@173@01 x_V2@33@01))
    (<= 0 i_V3@173@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@175@01))
(assert ($Perm.isReadVar $k@176@01))
(assert ($Perm.isReadVar $k@177@01))
(assert ($Perm.isReadVar $k@178@01))
(assert ($Perm.isReadVar $k@179@01))
(assert ($Perm.isReadVar $k@180@01))
(assert ($Perm.isReadVar $k@181@01))
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(assert ($Perm.isReadVar $k@184@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@173@01 Int) (j_V3@174@01 Int)) (!
  (and
    (=>
      (<= 0 i_V3@173@01)
      (and
        (<= 0 i_V3@173@01)
        (=>
          (< i_V3@173@01 x_V2@33@01)
          (and
            (< i_V3@173@01 x_V2@33@01)
            (=>
              (<= 0 j_V3@174@01)
              (and
                (<= 0 j_V3@174@01)
                (< $k@175@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@175@01))
                (< $k@176@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@176@01))))
            (or (not (<= 0 j_V3@174@01)) (<= 0 j_V3@174@01))))
        (or (not (< i_V3@173@01 x_V2@33@01)) (< i_V3@173@01 x_V2@33@01))))
    (or (not (<= 0 i_V3@173@01)) (<= 0 i_V3@173@01))
    (=>
      (and
        (and
          (and
            (<
              j_V3@174@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@174@01))
          (< i_V3@173@01 x_V2@33@01))
        (<= 0 i_V3@173@01))
      (and
        (<
          j_V3@174@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@174@01)
        (< i_V3@173@01 x_V2@33@01)
        (<= 0 i_V3@173@01)
        (< $k@177@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@177@01))
        (< $k@178@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@178@01))
        (<
          i_V3@173@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
        (< $k@179@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@179@01))
        (< $k@180@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@180@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01)
        (< $k@181@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@181@01))
        (< $k@182@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@182@01))
        (<
          i_V3@173@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@183@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@183@01))
        (< $k@184@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@184@01))
        (<
          j_V3@174@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V3@174@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@34@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V3@174@01))
            (< i_V3@173@01 x_V2@33@01))
          (<= 0 i_V3@173@01)))
      (and
        (and
          (and
            (<
              j_V3@174@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@174@01))
          (< i_V3@173@01 x_V2@33@01))
        (<= 0 i_V3@173@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01))
  :qid |prog.l450-aux|)))
(assert (forall ((i_V3@173@01 Int) (j_V3@174@01 Int)) (!
  (and
    (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@34@01)
      $Snap.unit) m_V0@2@01)
    (=>
      (and
        (and
          (and
            (<
              j_V3@174@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@174@01))
          (< i_V3@173@01 x_V2@33@01))
        (<= 0 i_V3@173@01))
      (and
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01)
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01))
  :qid |prog.l450_precondition|)))
(push) ; 7
(assert (not (forall ((i_V3@173@01 Int) (j_V3@174@01 Int)) (!
  (=>
    (and
      (and
        (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          $Snap.unit) m_V0@2@01)
        (=>
          (and
            (and
              (and
                (<
                  j_V3@174@01
                  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                    ($Snap.first $t@34@01)
                    $Snap.unit) m_V0@2@01))
                (<= 0 j_V3@174@01))
              (< i_V3@173@01 x_V2@33@01))
            (<= 0 i_V3@173@01))
          (and
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.first $t@34@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01)
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.first $t@4@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01))))
      (and
        (and
          (and
            (<
              j_V3@174@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@174@01))
          (< i_V3@173@01 x_V2@33@01))
        (<= 0 i_V3@173@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01))
  :qid |prog.l450|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V3@173@01 Int) (j_V3@174@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V3@174@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@174@01))
        (< i_V3@173@01 x_V2@33@01))
      (<= 0 i_V3@173@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@173@01 j_V3@174@01))
  :qid |prog.l450|)))
; [eval] (forall j_V6: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6) } 0 <= j_V6 && j_V6 < y_V5 ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)) * z_V0_CN1)
(declare-const j_V6@185@01 Int)
(push) ; 7
; [eval] 0 <= j_V6 && j_V6 < y_V5 ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)) * z_V0_CN1
; [eval] 0 <= j_V6 && j_V6 < y_V5
; [eval] 0 <= j_V6
(push) ; 8
; [then-branch: 37 | 0 <= j_V6@185@01 | live]
; [else-branch: 37 | !(0 <= j_V6@185@01) | live]
(push) ; 9
; [then-branch: 37 | 0 <= j_V6@185@01]
(assert (<= 0 j_V6@185@01))
; [eval] j_V6 < y_V5
(pop) ; 9
(push) ; 9
; [else-branch: 37 | !(0 <= j_V6@185@01)]
(assert (not (<= 0 j_V6@185@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V6@185@01)) (<= 0 j_V6@185@01)))
(push) ; 8
; [then-branch: 38 | j_V6@185@01 < 0 && 0 <= j_V6@185@01 | live]
; [else-branch: 38 | !(j_V6@185@01 < 0 && 0 <= j_V6@185@01) | live]
(push) ; 9
; [then-branch: 38 | j_V6@185@01 < 0 && 0 <= j_V6@185@01]
(assert (and (< j_V6@185@01 0) (<= 0 j_V6@185@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)) * z_V0_CN1
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)
(push) ; 10
(declare-const $k@186@01 $Perm)
(assert ($Perm.isReadVar $k@186@01))
(assert (< $k@186@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@186@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@186@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@187@01 $Perm)
(assert ($Perm.isReadVar $k@187@01))
(assert (< $k@187@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@187@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@187@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@187@01))
(assert (and (< $k@187@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@187@01))))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@188@01 $Perm)
(assert ($Perm.isReadVar $k@188@01))
(assert (< $k@188@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@188@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@188@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@189@01 $Perm)
(assert ($Perm.isReadVar $k@189@01))
(assert (< $k@189@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@189@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@189@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@189@01))
(assert (and (< $k@189@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@189@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@188@01))
(assert ($Perm.isReadVar $k@189@01))
(assert (and
  (< $k@188@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@188@01))
  (< $k@189@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@189@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  j_V6@185@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@34@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V6@185@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@34@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@34@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@186@01))
(assert ($Perm.isReadVar $k@187@01))
(assert ($Perm.isReadVar $k@188@01))
(assert ($Perm.isReadVar $k@189@01))
(assert (and
  (< $k@186@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@186@01))
  (< $k@187@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@187@01))
  (< $k@188@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@188@01))
  (< $k@189@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@189@01))
  (<
    j_V6@185@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@34@01)
      $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)) * z_V0_CN1
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V6)
(push) ; 10
(declare-const $k@190@01 $Perm)
(assert ($Perm.isReadVar $k@190@01))
(assert (< $k@190@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@190@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@190@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@191@01 $Perm)
(assert ($Perm.isReadVar $k@191@01))
(assert (< $k@191@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@191@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@191@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@191@01))
(assert (and (< $k@191@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@191@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@192@01 $Perm)
(assert ($Perm.isReadVar $k@192@01))
(assert (< $k@192@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@192@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@192@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@193@01 $Perm)
(assert ($Perm.isReadVar $k@193@01))
(assert (< $k@193@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@193@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@193@01))
(assert (and (< $k@193@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@193@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@192@01))
(assert ($Perm.isReadVar $k@193@01))
(assert (and
  (< $k@192@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@192@01))
  (< $k@193@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@193@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  j_V6@185@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V6@185@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@190@01))
(assert ($Perm.isReadVar $k@191@01))
(assert ($Perm.isReadVar $k@192@01))
(assert ($Perm.isReadVar $k@193@01))
(assert (and
  (< $k@190@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@190@01))
  (< $k@191@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@191@01))
  (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@192@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@192@01))
  (< $k@193@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@193@01))
  (<
    j_V6@185@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 38 | !(j_V6@185@01 < 0 && 0 <= j_V6@185@01)]
(assert (not (and (< j_V6@185@01 0) (<= 0 j_V6@185@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@186@01))
(assert ($Perm.isReadVar $k@187@01))
(assert ($Perm.isReadVar $k@188@01))
(assert ($Perm.isReadVar $k@189@01))
(assert ($Perm.isReadVar $k@190@01))
(assert ($Perm.isReadVar $k@191@01))
(assert ($Perm.isReadVar $k@192@01))
(assert ($Perm.isReadVar $k@193@01))
(assert (=>
  (and (< j_V6@185@01 0) (<= 0 j_V6@185@01))
  (and
    (< j_V6@185@01 0)
    (<= 0 j_V6@185@01)
    (< $k@186@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@186@01))
    (< $k@187@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@187@01))
    (< $k@188@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@188@01))
    (< $k@189@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@189@01))
    (<
      j_V6@185@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@34@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)
    (< $k@190@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@190@01))
    (< $k@191@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@191@01))
    (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@192@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@192@01))
    (< $k@193@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@193@01))
    (<
      j_V6@185@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01))))
; Joined path conditions
(assert (or
  (not (and (< j_V6@185@01 0) (<= 0 j_V6@185@01)))
  (and (< j_V6@185@01 0) (<= 0 j_V6@185@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@186@01))
(assert ($Perm.isReadVar $k@187@01))
(assert ($Perm.isReadVar $k@188@01))
(assert ($Perm.isReadVar $k@189@01))
(assert ($Perm.isReadVar $k@190@01))
(assert ($Perm.isReadVar $k@191@01))
(assert ($Perm.isReadVar $k@192@01))
(assert ($Perm.isReadVar $k@193@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j_V6@185@01 Int)) (!
  (and
    (or (not (<= 0 j_V6@185@01)) (<= 0 j_V6@185@01))
    (=>
      (and (< j_V6@185@01 0) (<= 0 j_V6@185@01))
      (and
        (< j_V6@185@01 0)
        (<= 0 j_V6@185@01)
        (< $k@186@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@186@01))
        (< $k@187@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@187@01))
        (< $k@188@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@188@01))
        (< $k@189@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@189@01))
        (<
          j_V6@185@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)
        (< $k@190@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@190@01))
        (< $k@191@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@191@01))
        (<
          x_V2@33@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@192@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@192@01))
        (< $k@193@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@193@01))
        (<
          j_V6@185@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)))
    (or
      (not (and (< j_V6@185@01 0) (<= 0 j_V6@185@01)))
      (and (< j_V6@185@01 0) (<= 0 j_V6@185@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01))
  :qid |prog.l457-aux|)))
(assert (forall ((j_V6@185@01 Int)) (!
  (=>
    (and (< j_V6@185@01 0) (<= 0 j_V6@185@01))
    (and
      (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)
      (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01))
  :qid |prog.l457_precondition|)))
(push) ; 7
(assert (not (forall ((j_V6@185@01 Int)) (!
  (=>
    (and
      (=>
        (and (< j_V6@185@01 0) (<= 0 j_V6@185@01))
        (and
          (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
            ($Snap.first $t@34@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)
          (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
            ($Snap.first $t@4@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)))
      (and (< j_V6@185@01 0) (<= 0 j_V6@185@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01))
  :qid |prog.l457|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j_V6@185@01 Int)) (!
  (=>
    (and (< j_V6@185@01 0) (<= 0 j_V6@185@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@185@01))
  :qid |prog.l457|)))
; [eval] (forall j_V7: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7) } y_V5 <= j_V7 && j_V7 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7)))
(declare-const j_V7@194@01 Int)
(push) ; 7
; [eval] y_V5 <= j_V7 && j_V7 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7))
; [eval] y_V5 <= j_V7 && j_V7 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] y_V5 <= j_V7
(push) ; 8
; [then-branch: 39 | 0 <= j_V7@194@01 | live]
; [else-branch: 39 | !(0 <= j_V7@194@01) | live]
(push) ; 9
; [then-branch: 39 | 0 <= j_V7@194@01]
(assert (<= 0 j_V7@194@01))
; [eval] j_V7 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 10
(declare-const $k@195@01 $Perm)
(assert ($Perm.isReadVar $k@195@01))
(assert (< $k@195@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@195@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@195@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@196@01 $Perm)
(assert ($Perm.isReadVar $k@196@01))
(assert (< $k@196@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@196@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@196@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@196@01))
(assert (and (< $k@196@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@196@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@195@01))
(assert ($Perm.isReadVar $k@196@01))
(assert (and
  (< $k@195@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@195@01))
  (< $k@196@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@196@01))))
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 39 | !(0 <= j_V7@194@01)]
(assert (not (<= 0 j_V7@194@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@195@01))
(assert ($Perm.isReadVar $k@196@01))
(assert (=>
  (<= 0 j_V7@194@01)
  (and
    (<= 0 j_V7@194@01)
    (< $k@195@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@195@01))
    (< $k@196@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@196@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V7@194@01)) (<= 0 j_V7@194@01)))
(push) ; 8
; [then-branch: 40 | j_V7@194@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V7@194@01 | live]
; [else-branch: 40 | !(j_V7@194@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V7@194@01) | live]
(push) ; 9
; [then-branch: 40 | j_V7@194@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V7@194@01]
(assert (and
  (<
    j_V7@194@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@34@01)
      $Snap.unit) m_V0@2@01))
  (<= 0 j_V7@194@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7)
(push) ; 10
(declare-const $k@197@01 $Perm)
(assert ($Perm.isReadVar $k@197@01))
(assert (< $k@197@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@197@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@197@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@198@01 $Perm)
(assert ($Perm.isReadVar $k@198@01))
(assert (< $k@198@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@198@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@198@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@198@01))
(assert (and (< $k@198@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@198@01))))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@199@01 $Perm)
(assert ($Perm.isReadVar $k@199@01))
(assert (< $k@199@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@199@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@199@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@200@01 $Perm)
(assert ($Perm.isReadVar $k@200@01))
(assert (< $k@200@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@200@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@200@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@200@01))
(assert (and (< $k@200@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@200@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@199@01))
(assert ($Perm.isReadVar $k@200@01))
(assert (and
  (< $k@199@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@199@01))
  (< $k@200@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@200@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@34@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@197@01))
(assert ($Perm.isReadVar $k@198@01))
(assert ($Perm.isReadVar $k@199@01))
(assert ($Perm.isReadVar $k@200@01))
(assert (and
  (< $k@197@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@197@01))
  (< $k@198@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@198@01))
  (< $k@199@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@199@01))
  (< $k@200@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@200@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, x_V2, j_V7)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@201@01 $Perm)
(assert ($Perm.isReadVar $k@201@01))
(assert (< $k@201@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@201@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@201@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@202@01 $Perm)
(assert ($Perm.isReadVar $k@202@01))
(assert (< $k@202@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@202@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@202@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@202@01))
(assert (and (< $k@202@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@202@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@203@01 $Perm)
(assert ($Perm.isReadVar $k@203@01))
(assert (< $k@203@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@203@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@203@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@204@01 $Perm)
(assert ($Perm.isReadVar $k@204@01))
(assert (< $k@204@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@204@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@204@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@204@01))
(assert (and (< $k@204@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@204@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@203@01))
(assert ($Perm.isReadVar $k@204@01))
(assert (and
  (< $k@203@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@203@01))
  (< $k@204@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@204@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  j_V7@194@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V7@194@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@201@01))
(assert ($Perm.isReadVar $k@202@01))
(assert ($Perm.isReadVar $k@203@01))
(assert ($Perm.isReadVar $k@204@01))
(assert (and
  (< $k@201@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@201@01))
  (< $k@202@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@202@01))
  (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@203@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@203@01))
  (< $k@204@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@204@01))
  (<
    j_V7@194@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 40 | !(j_V7@194@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V7@194@01)]
(assert (not
  (and
    (<
      j_V7@194@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V7@194@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@197@01))
(assert ($Perm.isReadVar $k@198@01))
(assert ($Perm.isReadVar $k@199@01))
(assert ($Perm.isReadVar $k@200@01))
(assert ($Perm.isReadVar $k@201@01))
(assert ($Perm.isReadVar $k@202@01))
(assert ($Perm.isReadVar $k@203@01))
(assert ($Perm.isReadVar $k@204@01))
(assert (=>
  (and
    (<
      j_V7@194@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V7@194@01))
  (and
    (<
      j_V7@194@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V7@194@01)
    (< $k@197@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@197@01))
    (< $k@198@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@198@01))
    (< $k@199@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@199@01))
    (< $k@200@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@200@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@34@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01)
    (< $k@201@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@201@01))
    (< $k@202@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@202@01))
    (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@203@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@203@01))
    (< $k@204@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@204@01))
    (<
      j_V7@194@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<
        j_V7@194@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@34@01)
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V7@194@01)))
  (and
    (<
      j_V7@194@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V7@194@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@195@01))
(assert ($Perm.isReadVar $k@196@01))
(assert ($Perm.isReadVar $k@197@01))
(assert ($Perm.isReadVar $k@198@01))
(assert ($Perm.isReadVar $k@199@01))
(assert ($Perm.isReadVar $k@200@01))
(assert ($Perm.isReadVar $k@201@01))
(assert ($Perm.isReadVar $k@202@01))
(assert ($Perm.isReadVar $k@203@01))
(assert ($Perm.isReadVar $k@204@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j_V7@194@01 Int)) (!
  (and
    (=>
      (<= 0 j_V7@194@01)
      (and
        (<= 0 j_V7@194@01)
        (< $k@195@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@195@01))
        (< $k@196@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@196@01))))
    (or (not (<= 0 j_V7@194@01)) (<= 0 j_V7@194@01))
    (=>
      (and
        (<
          j_V7@194@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V7@194@01))
      (and
        (<
          j_V7@194@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V7@194@01)
        (< $k@197@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@197@01))
        (< $k@198@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@198@01))
        (< $k@199@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@199@01))
        (< $k@200@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@200@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01)
        (< $k@201@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@201@01))
        (< $k@202@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@202@01))
        (<
          x_V2@33@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@203@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@203@01))
        (< $k@204@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@204@01))
        (<
          j_V7@194@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01)))
    (or
      (not
        (and
          (<
            j_V7@194@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V7@194@01)))
      (and
        (<
          j_V7@194@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V7@194@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01))
  :qid |prog.l463-aux|)))
(assert (forall ((j_V7@194@01 Int)) (!
  (and
    (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@34@01)
      $Snap.unit) m_V0@2@01)
    (=>
      (and
        (<
          j_V7@194@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V7@194@01))
      (and
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01)
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01))
  :qid |prog.l463_precondition|)))
(push) ; 7
(assert (not (forall ((j_V7@194@01 Int)) (!
  (=>
    (and
      (and
        (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          $Snap.unit) m_V0@2@01)
        (=>
          (and
            (<
              j_V7@194@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V7@194@01))
          (and
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.first $t@34@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01)
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.first $t@4@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01))))
      (and
        (<
          j_V7@194@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V7@194@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01)
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01))
  :qid |prog.l463|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j_V7@194@01 Int)) (!
  (=>
    (and
      (<
        j_V7@194@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@34@01)
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V7@194@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01)
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@194@01))
  :qid |prog.l463|)))
; [eval] (forall i_V8: Int, j_V8: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8) } x_V2 < i_V8 && (i_V8 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V8 && j_V8 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8)))
(declare-const i_V8@205@01 Int)
(declare-const j_V8@206@01 Int)
(push) ; 7
; [eval] x_V2 < i_V8 && (i_V8 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V8 && j_V8 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8))
; [eval] x_V2 < i_V8 && (i_V8 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) && (0 <= j_V8 && j_V8 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] x_V2 < i_V8
(push) ; 8
; [then-branch: 41 | x_V2@33@01 < i_V8@205@01 | live]
; [else-branch: 41 | !(x_V2@33@01 < i_V8@205@01) | live]
(push) ; 9
; [then-branch: 41 | x_V2@33@01 < i_V8@205@01]
(assert (< x_V2@33@01 i_V8@205@01))
; [eval] i_V8 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 10
(declare-const $k@207@01 $Perm)
(assert ($Perm.isReadVar $k@207@01))
(assert (< $k@207@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@207@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@207@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@207@01))
(assert (and (< $k@207@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@207@01))))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 42 | i_V8@205@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01) | live]
; [else-branch: 42 | !(i_V8@205@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01)) | live]
(push) ; 11
; [then-branch: 42 | i_V8@205@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01)]
(assert (< i_V8@205@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
; [eval] 0 <= j_V8
(push) ; 12
; [then-branch: 43 | 0 <= j_V8@206@01 | live]
; [else-branch: 43 | !(0 <= j_V8@206@01) | live]
(push) ; 13
; [then-branch: 43 | 0 <= j_V8@206@01]
(assert (<= 0 j_V8@206@01))
; [eval] j_V8 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 14
(declare-const $k@208@01 $Perm)
(assert ($Perm.isReadVar $k@208@01))
(assert (< $k@208@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@208@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@208@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@209@01 $Perm)
(assert ($Perm.isReadVar $k@209@01))
(assert (< $k@209@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@209@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@209@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@209@01))
(assert (and (< $k@209@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@209@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@208@01))
(assert ($Perm.isReadVar $k@209@01))
(assert (and
  (< $k@208@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@208@01))
  (< $k@209@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@209@01))))
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 43 | !(0 <= j_V8@206@01)]
(assert (not (<= 0 j_V8@206@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@208@01))
(assert ($Perm.isReadVar $k@209@01))
(assert (=>
  (<= 0 j_V8@206@01)
  (and
    (<= 0 j_V8@206@01)
    (< $k@208@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@208@01))
    (< $k@209@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@209@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V8@206@01)) (<= 0 j_V8@206@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 42 | !(i_V8@205@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01))]
(assert (not
  (< i_V8@205@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@208@01))
(assert ($Perm.isReadVar $k@209@01))
(assert (=>
  (< i_V8@205@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
  (and
    (<
      i_V8@205@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
    (=>
      (<= 0 j_V8@206@01)
      (and
        (<= 0 j_V8@206@01)
        (< $k@208@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@208@01))
        (< $k@209@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@209@01))))
    (or (not (<= 0 j_V8@206@01)) (<= 0 j_V8@206@01)))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V8@205@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
  (< i_V8@205@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 41 | !(x_V2@33@01 < i_V8@205@01)]
(assert (not (< x_V2@33@01 i_V8@205@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@207@01))
(assert ($Perm.isReadVar $k@208@01))
(assert ($Perm.isReadVar $k@209@01))
(assert (=>
  (< x_V2@33@01 i_V8@205@01)
  (and
    (< x_V2@33@01 i_V8@205@01)
    (< $k@207@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@207@01))
    (=>
      (<
        i_V8@205@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
      (and
        (<
          i_V8@205@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
        (=>
          (<= 0 j_V8@206@01)
          (and
            (<= 0 j_V8@206@01)
            (< $k@208@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@208@01))
            (< $k@209@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@209@01))))
        (or (not (<= 0 j_V8@206@01)) (<= 0 j_V8@206@01))))
    (or
      (not
        (<
          i_V8@205@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
      (<
        i_V8@205@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))))))
; Joined path conditions
(assert (or (not (< x_V2@33@01 i_V8@205@01)) (< x_V2@33@01 i_V8@205@01)))
(push) ; 8
; [then-branch: 44 | j_V8@206@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V8@206@01 && i_V8@205@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01) && x_V2@33@01 < i_V8@205@01 | live]
; [else-branch: 44 | !(j_V8@206@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V8@206@01 && i_V8@205@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01) && x_V2@33@01 < i_V8@205@01) | live]
(push) ; 9
; [then-branch: 44 | j_V8@206@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V8@206@01 && i_V8@205@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01) && x_V2@33@01 < i_V8@205@01]
(assert (and
  (and
    (and
      (<
        j_V8@206@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@34@01)
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V8@206@01))
    (<
      i_V8@205@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
  (< x_V2@33@01 i_V8@205@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8)
(push) ; 10
(declare-const $k@210@01 $Perm)
(assert ($Perm.isReadVar $k@210@01))
(assert (< $k@210@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@210@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@210@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
(set-option :timeout 0)
(push) ; 11
(assert (not (<= 0 i_V8@205@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i_V8@205@01))
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@211@01 $Perm)
(assert ($Perm.isReadVar $k@211@01))
(assert (< $k@211@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@211@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@211@01))
(assert (and (< $k@211@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@211@01))))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@212@01 $Perm)
(assert ($Perm.isReadVar $k@212@01))
(assert (< $k@212@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@212@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@212@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@213@01 $Perm)
(assert ($Perm.isReadVar $k@213@01))
(assert (< $k@213@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@213@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@213@01))
(assert (and (< $k@213@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@213@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@212@01))
(assert ($Perm.isReadVar $k@213@01))
(assert (and
  (< $k@212@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@212@01))
  (< $k@213@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@213@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@34@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@210@01))
(assert ($Perm.isReadVar $k@211@01))
(assert ($Perm.isReadVar $k@212@01))
(assert ($Perm.isReadVar $k@213@01))
(assert (and
  (< $k@210@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@210@01))
  (<= 0 i_V8@205@01)
  (< $k@211@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@211@01))
  (< $k@212@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@212@01))
  (< $k@213@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@213@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V8, j_V8)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@214@01 $Perm)
(assert ($Perm.isReadVar $k@214@01))
(assert (< $k@214@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@214@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@214@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@215@01 $Perm)
(assert ($Perm.isReadVar $k@215@01))
(assert (< $k@215@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@215@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@215@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@215@01))
(assert (and (< $k@215@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@215@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (< i_V8@205@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< i_V8@205@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 11
(declare-const $k@216@01 $Perm)
(assert ($Perm.isReadVar $k@216@01))
(assert (< $k@216@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@216@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@216@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@217@01 $Perm)
(assert ($Perm.isReadVar $k@217@01))
(assert (< $k@217@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@217@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@217@01))
(assert (and (< $k@217@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@217@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@216@01))
(assert ($Perm.isReadVar $k@217@01))
(assert (and
  (< $k@216@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@216@01))
  (< $k@217@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@217@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  j_V8@206@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V8@206@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@214@01))
(assert ($Perm.isReadVar $k@215@01))
(assert ($Perm.isReadVar $k@216@01))
(assert ($Perm.isReadVar $k@217@01))
(assert (and
  (< $k@214@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@214@01))
  (< $k@215@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@215@01))
  (< i_V8@205@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@216@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@216@01))
  (< $k@217@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@217@01))
  (<
    j_V8@206@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 44 | !(j_V8@206@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@34@01), _), m_V0@2@01) && 0 <= j_V8@206@01 && i_V8@205@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@34@01), m_V0@2@01) && x_V2@33@01 < i_V8@205@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V8@206@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V8@206@01))
      (<
        i_V8@205@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
    (< x_V2@33@01 i_V8@205@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@210@01))
(assert ($Perm.isReadVar $k@211@01))
(assert ($Perm.isReadVar $k@212@01))
(assert ($Perm.isReadVar $k@213@01))
(assert ($Perm.isReadVar $k@214@01))
(assert ($Perm.isReadVar $k@215@01))
(assert ($Perm.isReadVar $k@216@01))
(assert ($Perm.isReadVar $k@217@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V8@206@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V8@206@01))
      (<
        i_V8@205@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
    (< x_V2@33@01 i_V8@205@01))
  (and
    (<
      j_V8@206@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V8@206@01)
    (<
      i_V8@205@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
    (< x_V2@33@01 i_V8@205@01)
    (< $k@210@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@210@01))
    (<= 0 i_V8@205@01)
    (< $k@211@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@211@01))
    (< $k@212@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@212@01))
    (< $k@213@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@213@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@34@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01)
    (< $k@214@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@214@01))
    (< $k@215@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@215@01))
    (< i_V8@205@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@216@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@216@01))
    (< $k@217@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@217@01))
    (<
      j_V8@206@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V8@206@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V8@206@01))
        (<
          i_V8@205@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
      (< x_V2@33@01 i_V8@205@01)))
  (and
    (and
      (and
        (<
          j_V8@206@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V8@206@01))
      (<
        i_V8@205@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
    (< x_V2@33@01 i_V8@205@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@207@01))
(assert ($Perm.isReadVar $k@208@01))
(assert ($Perm.isReadVar $k@209@01))
(assert ($Perm.isReadVar $k@210@01))
(assert ($Perm.isReadVar $k@211@01))
(assert ($Perm.isReadVar $k@212@01))
(assert ($Perm.isReadVar $k@213@01))
(assert ($Perm.isReadVar $k@214@01))
(assert ($Perm.isReadVar $k@215@01))
(assert ($Perm.isReadVar $k@216@01))
(assert ($Perm.isReadVar $k@217@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V8@205@01 Int) (j_V8@206@01 Int)) (!
  (and
    (=>
      (< x_V2@33@01 i_V8@205@01)
      (and
        (< x_V2@33@01 i_V8@205@01)
        (< $k@207@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@207@01))
        (=>
          (<
            i_V8@205@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
          (and
            (<
              i_V8@205@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
            (=>
              (<= 0 j_V8@206@01)
              (and
                (<= 0 j_V8@206@01)
                (< $k@208@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@208@01))
                (< $k@209@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@209@01))))
            (or (not (<= 0 j_V8@206@01)) (<= 0 j_V8@206@01))))
        (or
          (not
            (<
              i_V8@205@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
          (<
            i_V8@205@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))))
    (or (not (< x_V2@33@01 i_V8@205@01)) (< x_V2@33@01 i_V8@205@01))
    (=>
      (and
        (and
          (and
            (<
              j_V8@206@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V8@206@01))
          (<
            i_V8@205@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
        (< x_V2@33@01 i_V8@205@01))
      (and
        (<
          j_V8@206@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V8@206@01)
        (<
          i_V8@205@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01))
        (< x_V2@33@01 i_V8@205@01)
        (< $k@210@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@210@01))
        (<= 0 i_V8@205@01)
        (< $k@211@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@211@01))
        (< $k@212@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@212@01))
        (< $k@213@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@213@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01)
        (< $k@214@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@214@01))
        (< $k@215@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@215@01))
        (<
          i_V8@205@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@216@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@216@01))
        (< $k@217@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@217@01))
        (<
          j_V8@206@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V8@206@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@34@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V8@206@01))
            (<
              i_V8@205@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
          (< x_V2@33@01 i_V8@205@01)))
      (and
        (and
          (and
            (<
              j_V8@206@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V8@206@01))
          (<
            i_V8@205@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
        (< x_V2@33@01 i_V8@205@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01))
  :qid |prog.l468-aux|)))
(assert (forall ((i_V8@205@01 Int) (j_V8@206@01 Int)) (!
  (and
    (and
      (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
        ($Snap.first $t@34@01)
        $Snap.unit) m_V0@2@01)
      (=>
        (and
          (<
            j_V8@206@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V8@206@01))
        (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@34@01) m_V0@2@01)))
    (=>
      (and
        (and
          (and
            (<
              j_V8@206@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V8@206@01))
          (<
            i_V8@205@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
        (< x_V2@33@01 i_V8@205@01))
      (and
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@34@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01)
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01))
  :qid |prog.l468_precondition|)))
(push) ; 7
(assert (not (forall ((i_V8@205@01 Int) (j_V8@206@01 Int)) (!
  (=>
    (and
      (and
        (and
          (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
            ($Snap.first $t@34@01)
            $Snap.unit) m_V0@2@01)
          (=>
            (and
              (<
                j_V8@206@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@34@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V8@206@01))
            (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@34@01) m_V0@2@01)))
        (=>
          (and
            (and
              (and
                (<
                  j_V8@206@01
                  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                    ($Snap.first $t@34@01)
                    $Snap.unit) m_V0@2@01))
                (<= 0 j_V8@206@01))
              (<
                i_V8@205@01
                (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
            (< x_V2@33@01 i_V8@205@01))
          (and
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.first $t@34@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01)
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.first $t@4@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01))))
      (and
        (and
          (and
            (<
              j_V8@206@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@34@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V8@206@01))
          (<
            i_V8@205@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
        (< x_V2@33@01 i_V8@205@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01)
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01))
  :qid |prog.l468|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V8@205@01 Int) (j_V8@206@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V8@206@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@34@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V8@206@01))
        (<
          i_V8@205@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@34@01) m_V0@2@01)))
      (< x_V2@33@01 i_V8@205@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@34@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01)
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@34@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@205@01 j_V8@206@01))
  :qid |prog.l468|)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@106@01))
(assert ($Perm.isReadVar $k@107@01))
(assert ($Perm.isReadVar $k@108@01))
(assert ($Perm.isReadVar $k@109@01))
(assert ($Perm.isReadVar $k@110@01))
(assert ($Perm.isReadVar $k@111@01))
(assert ($Perm.isReadVar $k@112@01))
(assert ($Perm.isReadVar $k@113@01))
(assert ($Perm.isReadVar $k@114@01))
(assert ($Perm.isReadVar $k@117@01))
(assert ($Perm.isReadVar $k@118@01))
(assert ($Perm.isReadVar $k@119@01))
(assert ($Perm.isReadVar $k@120@01))
(assert ($Perm.isReadVar $k@121@01))
(assert ($Perm.isReadVar $k@122@01))
(assert ($Perm.isReadVar $k@123@01))
(assert ($Perm.isReadVar $k@124@01))
(assert ($Perm.isReadVar $k@125@01))
(assert ($Perm.isReadVar $k@126@01))
(assert ($Perm.isReadVar $k@128@01))
(assert ($Perm.isReadVar $k@129@01))
(assert ($Perm.isReadVar $k@130@01))
(assert ($Perm.isReadVar $k@131@01))
(assert ($Perm.isReadVar $k@132@01))
(assert ($Perm.isReadVar $k@133@01))
(assert ($Perm.isReadVar $k@134@01))
(assert ($Perm.isReadVar $k@135@01))
(assert ($Perm.isReadVar $k@137@01))
(assert ($Perm.isReadVar $k@138@01))
(assert ($Perm.isReadVar $k@139@01))
(assert ($Perm.isReadVar $k@140@01))
(assert ($Perm.isReadVar $k@141@01))
(assert ($Perm.isReadVar $k@142@01))
(assert ($Perm.isReadVar $k@143@01))
(assert ($Perm.isReadVar $k@144@01))
(assert ($Perm.isReadVar $k@145@01))
(assert ($Perm.isReadVar $k@146@01))
(assert ($Perm.isReadVar $k@149@01))
(assert ($Perm.isReadVar $k@150@01))
(assert ($Perm.isReadVar $k@151@01))
(assert ($Perm.isReadVar $k@152@01))
(assert ($Perm.isReadVar $k@153@01))
(assert ($Perm.isReadVar $k@154@01))
(assert ($Perm.isReadVar $k@155@01))
(assert ($Perm.isReadVar $k@156@01))
(assert ($Perm.isReadVar $k@157@01))
(assert ($Perm.isReadVar $k@158@01))
(assert ($Perm.isReadVar $k@159@01))
(assert (= $t@105@01 ($Snap.combine ($Snap.first $t@105@01) ($Snap.second $t@105@01))))
(assert (=
  ($Snap.second $t@105@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@105@01))
    ($Snap.second ($Snap.second $t@105@01)))))
(assert (= ($Snap.first ($Snap.second $t@105@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@105@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@105@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@105@01))) $Snap.unit))
(assert (< $k@106@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@106@01)))
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@105@01) m_V0@2@01))
(assert (< x_V2@33@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@105@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@105@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@105@01))))
  $Snap.unit))
(assert (<= 0 y_V5@104@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))
  $Snap.unit))
(assert (< $k@107@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@107@01)))
(assert (< $k@108@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@108@01)))
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01) 0)))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@105@01)
  $Snap.unit) m_V0@2@01))
(assert (<=
  y_V5@104@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@105@01) $Snap.unit) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
  $Snap.unit))
(assert (< $k@109@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@109@01)))
(assert (< $k@110@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@110@01)))
(assert (=
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
  $Snap.unit))
(assert (< $k@111@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@111@01)))
(assert (< $k@112@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@112@01)))
(assert (< $k@113@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@113@01)))
(assert (< $k@114@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@114@01)))
(assert (=
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@105@01) $Snap.unit) m_V0@2@01)
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
  $Snap.unit))
(assert (forall ((i_V3@115@01 Int) (j_V3@116@01 Int)) (!
  (and
    (=>
      (<= 0 i_V3@115@01)
      (and
        (<= 0 i_V3@115@01)
        (=>
          (< i_V3@115@01 x_V2@33@01)
          (and
            (< i_V3@115@01 x_V2@33@01)
            (=>
              (<= 0 j_V3@116@01)
              (and
                (<= 0 j_V3@116@01)
                (< $k@117@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@117@01))
                (< $k@118@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@118@01))))
            (or (not (<= 0 j_V3@116@01)) (<= 0 j_V3@116@01))))
        (or (not (< i_V3@115@01 x_V2@33@01)) (< i_V3@115@01 x_V2@33@01))))
    (or (not (<= 0 i_V3@115@01)) (<= 0 i_V3@115@01))
    (=>
      (and
        (and
          (and
            (<
              j_V3@116@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@105@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@116@01))
          (< i_V3@115@01 x_V2@33@01))
        (<= 0 i_V3@115@01))
      (and
        (<
          j_V3@116@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@116@01)
        (< i_V3@115@01 x_V2@33@01)
        (<= 0 i_V3@115@01)
        (< $k@119@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@119@01))
        (< $k@120@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@120@01))
        (<
          i_V3@115@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
        (< $k@121@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@121@01))
        (< $k@122@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@122@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@105@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01)
        (< $k@123@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@123@01))
        (< $k@124@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@124@01))
        (<
          i_V3@115@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@125@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@125@01))
        (< $k@126@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@126@01))
        (<
          j_V3@116@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V3@116@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@105@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V3@116@01))
            (< i_V3@115@01 x_V2@33@01))
          (<= 0 i_V3@115@01)))
      (and
        (and
          (and
            (<
              j_V3@116@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@105@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@116@01))
          (< i_V3@115@01 x_V2@33@01))
        (<= 0 i_V3@115@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01))
  :qid |prog.l450-aux|)))
(assert (forall ((i_V3@115@01 Int) (j_V3@116@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V3@116@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@105@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@116@01))
        (< i_V3@115@01 x_V2@33@01))
      (<= 0 i_V3@115@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@115@01 j_V3@116@01))
  :qid |prog.l450|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
  $Snap.unit))
(assert (forall ((j_V6@127@01 Int)) (!
  (and
    (or (not (<= 0 j_V6@127@01)) (<= 0 j_V6@127@01))
    (=>
      (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01))
      (and
        (< j_V6@127@01 y_V5@104@01)
        (<= 0 j_V6@127@01)
        (< $k@128@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@128@01))
        (< $k@129@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@129@01))
        (< $k@130@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@130@01))
        (< $k@131@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@131@01))
        (<
          j_V6@127@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@105@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01)
        (< $k@132@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@132@01))
        (< $k@133@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@133@01))
        (<
          x_V2@33@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@134@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@134@01))
        (< $k@135@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@135@01))
        (<
          j_V6@127@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01)))
    (or
      (not (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01)))
      (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01))
  :qid |prog.l457-aux|)))
(assert (forall ((j_V6@127@01 Int)) (!
  (=>
    (and (< j_V6@127@01 y_V5@104@01) (<= 0 j_V6@127@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V6@127@01))
  :qid |prog.l457|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
  $Snap.unit))
(assert (forall ((j_V7@136@01 Int)) (!
  (and
    (=>
      (<= y_V5@104@01 j_V7@136@01)
      (and
        (<= y_V5@104@01 j_V7@136@01)
        (< $k@137@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@137@01))
        (< $k@138@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@138@01))))
    (or (not (<= y_V5@104@01 j_V7@136@01)) (<= y_V5@104@01 j_V7@136@01))
    (=>
      (and
        (<
          j_V7@136@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= y_V5@104@01 j_V7@136@01))
      (and
        (<
          j_V7@136@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= y_V5@104@01 j_V7@136@01)
        (< $k@139@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@139@01))
        (< $k@140@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@140@01))
        (<= 0 j_V7@136@01)
        (< $k@141@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@141@01))
        (< $k@142@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@142@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@105@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01)
        (< $k@143@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@143@01))
        (< $k@144@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@144@01))
        (<
          x_V2@33@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@145@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@145@01))
        (< $k@146@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@146@01))
        (<
          j_V7@136@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01)))
    (or
      (not
        (and
          (<
            j_V7@136@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@105@01)
              $Snap.unit) m_V0@2@01))
          (<= y_V5@104@01 j_V7@136@01)))
      (and
        (<
          j_V7@136@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= y_V5@104@01 j_V7@136@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01))
  :qid |prog.l463-aux|)))
(assert (forall ((j_V7@136@01 Int)) (!
  (=>
    (and
      (<
        j_V7@136@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@105@01)
          $Snap.unit) m_V0@2@01))
      (<= y_V5@104@01 j_V7@136@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01)
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 x_V2@33@01 j_V7@136@01))
  :qid |prog.l463|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
  $Snap.unit))
(assert (forall ((i_V8@147@01 Int) (j_V8@148@01 Int)) (!
  (and
    (=>
      (< x_V2@33@01 i_V8@147@01)
      (and
        (< x_V2@33@01 i_V8@147@01)
        (< $k@149@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@149@01))
        (=>
          (<
            i_V8@147@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
          (and
            (<
              i_V8@147@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
            (=>
              (<= 0 j_V8@148@01)
              (and
                (<= 0 j_V8@148@01)
                (< $k@150@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@150@01))
                (< $k@151@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@151@01))))
            (or (not (<= 0 j_V8@148@01)) (<= 0 j_V8@148@01))))
        (or
          (not
            (<
              i_V8@147@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
          (<
            i_V8@147@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))))
    (or (not (< x_V2@33@01 i_V8@147@01)) (< x_V2@33@01 i_V8@147@01))
    (=>
      (and
        (and
          (and
            (<
              j_V8@148@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@105@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V8@148@01))
          (<
            i_V8@147@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
        (< x_V2@33@01 i_V8@147@01))
      (and
        (<
          j_V8@148@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@105@01)
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V8@148@01)
        (<
          i_V8@147@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01))
        (< x_V2@33@01 i_V8@147@01)
        (< $k@152@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@152@01))
        (<= 0 i_V8@147@01)
        (< $k@153@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@153@01))
        (< $k@154@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@154@01))
        (< $k@155@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@155@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@105@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01)
        (< $k@156@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@156@01))
        (< $k@157@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@157@01))
        (<
          i_V8@147@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@158@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@158@01))
        (< $k@159@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@159@01))
        (<
          j_V8@148@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V8@148@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@105@01)
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V8@148@01))
            (<
              i_V8@147@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
          (< x_V2@33@01 i_V8@147@01)))
      (and
        (and
          (and
            (<
              j_V8@148@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@105@01)
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V8@148@01))
          (<
            i_V8@147@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
        (< x_V2@33@01 i_V8@147@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01))
  :qid |prog.l468-aux|)))
(assert (forall ((i_V8@147@01 Int) (j_V8@148@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V8@148@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@105@01)
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V8@148@01))
        (<
          i_V8@147@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@105@01) m_V0@2@01)))
      (< x_V2@33@01 i_V8@147@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@105@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01)
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@105@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V8@147@01 j_V8@148@01))
  :qid |prog.l468|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] y_V5 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@218@01 $Perm)
(assert ($Perm.isReadVar $k@218@01))
(assert (< $k@218@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@218@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@219@01 $Perm)
(assert ($Perm.isReadVar $k@219@01))
(assert (< $k@219@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@219@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@219@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@219@01))
(assert (and (< $k@219@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@219@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@218@01))
(assert ($Perm.isReadVar $k@219@01))
(assert (and
  (< $k@218@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@218@01))
  (< $k@219@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@219@01))))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    y_V5@104@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@105@01)
      $Snap.unit) m_V0@2@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  y_V5@104@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@105@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 45 | y_V5@104@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01) | live]
; [else-branch: 45 | !(y_V5@104@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01)) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 45 | y_V5@104@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@105@01), _), m_V0@2@01)]
(assert (<
  y_V5@104@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@105@01) $Snap.unit) m_V0@2@01)))
; [exec]
; unfold acc(denseMatrix_4b5075e4_F(m_V0_CN0), write)
(assert (=
  ($Snap.first $t@105@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.second ($Snap.first $t@105@01)))))
; [eval] (ShStructget0of1(m_V0): Ref)
(assert (not (= (ShStructget0of1<Ref> m_V0@2@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@105@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@105@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@105@01))))))
(declare-const i_V1@220@01 Int)
(push) ; 9
; [eval] 0 <= i_V1 && i_V1 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 46 | 0 <= i_V1@220@01 | live]
; [else-branch: 46 | !(0 <= i_V1@220@01) | live]
(push) ; 11
; [then-branch: 46 | 0 <= i_V1@220@01]
(assert (<= 0 i_V1@220@01))
; [eval] i_V1 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget0of1(m_V0): Ref)
(pop) ; 11
(push) ; 11
; [else-branch: 46 | !(0 <= i_V1@220@01)]
(assert (not (<= 0 i_V1@220@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@220@01)) (<= 0 i_V1@220@01)))
(assert (and
  (<
    i_V1@220@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
  (<= 0 i_V1@220@01)))
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V1): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(pop) ; 9
(declare-fun inv@221@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@220@01 Int)) (!
  (=>
    (and
      (<
        i_V1@220@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 i_V1@220@01))
    (or (not (<= 0 i_V1@220@01)) (<= 0 i_V1@220@01)))
  :pattern ((sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V1@220@01))
  :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@220@01 Int)) (!
  (=>
    (and
      (<
        i_V1@220@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 i_V1@220@01))
    (=
      (inv@221@01 (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V1@220@01))
      i_V1@220@01))
  :pattern ((sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V1@220@01))
  :qid |quant-u-45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@221@01 r))
      r))
  :pattern ((inv@221@01 r))
  :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@220@01 Int)) (!
  (=>
    (and
      (<
        i_V1@220@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 i_V1@220@01))
    (not
      (=
        (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V1@220@01)
        $Ref.null)))
  :pattern ((sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V1@220@01))
  :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first $t@105@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@105@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@105@01)))))))
(declare-const i_V2@222@01 Int)
(declare-const j_V2@223@01 Int)
(push) ; 9
; [eval] 0 <= i_V2 && (i_V2 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int) && (0 <= j_V2 && j_V2 < (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)))
; [eval] 0 <= i_V2
(push) ; 10
; [then-branch: 47 | 0 <= i_V2@222@01 | live]
; [else-branch: 47 | !(0 <= i_V2@222@01) | live]
(push) ; 11
; [then-branch: 47 | 0 <= i_V2@222@01]
(assert (<= 0 i_V2@222@01))
; [eval] i_V2 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget0of1(m_V0): Ref)
(push) ; 12
; [then-branch: 48 | i_V2@222@01 < slen[Int](First:(First:($t@105@01))) | live]
; [else-branch: 48 | !(i_V2@222@01 < slen[Int](First:(First:($t@105@01)))) | live]
(push) ; 13
; [then-branch: 48 | i_V2@222@01 < slen[Int](First:(First:($t@105@01)))]
(assert (<
  i_V2@222@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
; [eval] 0 <= j_V2
(push) ; 14
; [then-branch: 49 | 0 <= j_V2@223@01 | live]
; [else-branch: 49 | !(0 <= j_V2@223@01) | live]
(push) ; 15
; [then-branch: 49 | 0 <= j_V2@223@01]
(assert (<= 0 j_V2@223@01))
; [eval] j_V2 < (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@224@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef0|)))
(declare-const pm@225@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@225@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@225@01  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
(push) ; 16
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@225@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(push) ; 15
; [else-branch: 49 | !(0 <= j_V2@223@01)]
(assert (not (<= 0 j_V2@223@01)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@225@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@225@01  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
; Joined path conditions
(assert (or (not (<= 0 j_V2@223@01)) (<= 0 j_V2@223@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 48 | !(i_V2@222@01 < slen[Int](First:(First:($t@105@01))))]
(assert (not
  (<
    i_V2@222@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@225@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@225@01  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
(assert (=>
  (<
    i_V2@222@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
  (and
    (<
      i_V2@222@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
    (or (not (<= 0 j_V2@223@01)) (<= 0 j_V2@223@01)))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V2@222@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
  (<
    i_V2@222@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 47 | !(0 <= i_V2@222@01)]
(assert (not (<= 0 i_V2@222@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@225@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@225@01  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
(assert (=>
  (<= 0 i_V2@222@01)
  (and
    (<= 0 i_V2@222@01)
    (=>
      (<
        i_V2@222@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (and
        (<
          i_V2@222@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (or (not (<= 0 j_V2@223@01)) (<= 0 j_V2@223@01))))
    (or
      (not
        (<
          i_V2@222@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<
        i_V2@222@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V2@222@01)) (<= 0 i_V2@222@01)))
(assert (and
  (and
    (and
      (<
        j_V2@223@01
        (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01))))
      (<= 0 j_V2@223@01))
    (<
      i_V2@222@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
  (<= 0 i_V2@222@01)))
; [eval] (sloc((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, j_V2): Ref)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@226@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef2|)))
(declare-const pm@227@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@227@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@227@01  $FPM) r))
  :qid |qp.resPrmSumDef3|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@227@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(declare-fun inv@228@01 ($Ref) Int)
(declare-fun inv@229@01 ($Ref) Int)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@225@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@225@01  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@227@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@227@01  $FPM) r))
  :qid |qp.resPrmSumDef3|)))
; Nested auxiliary terms: non-globals
(assert (forall ((i_V2@222@01 Int) (j_V2@223@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V2@223@01
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01))))
          (<= 0 j_V2@223@01))
        (<
          i_V2@222@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 i_V2@222@01))
    (and
      (=>
        (<= 0 i_V2@222@01)
        (and
          (<= 0 i_V2@222@01)
          (=>
            (<
              i_V2@222@01
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
            (and
              (<
                i_V2@222@01
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
              (or (not (<= 0 j_V2@223@01)) (<= 0 j_V2@223@01))))
          (or
            (not
              (<
                i_V2@222@01
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
            (<
              i_V2@222@01
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))))
      (or (not (<= 0 i_V2@222@01)) (<= 0 i_V2@222@01))))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01))) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01)) j_V2@223@01))
  :pattern ((sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01)) j_V2@223@01))
  :qid |Intint$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V2@222@01 Int) (j_V2@223@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V2@223@01
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01))))
          (<= 0 j_V2@223@01))
        (<
          i_V2@222@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 i_V2@222@01))
    (and
      (=
        (inv@228@01 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01)) j_V2@223@01))
        i_V2@222@01)
      (=
        (inv@229@01 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01)) j_V2@223@01))
        j_V2@223@01)))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01))) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01)) j_V2@223@01))
  :pattern ((sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01)) j_V2@223@01))
  :qid |quant-u-47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@229@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@228@01 r)))))
          (<= 0 (inv@229@01 r)))
        (<
          (inv@228@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 (inv@228@01 r)))
    (=
      (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@228@01 r))) (inv@229@01 r))
      r))
  :pattern ((inv@228@01 r))
  :pattern ((inv@229@01 r))
  :qid |Intint$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V2@222@01 Int) (j_V2@223@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V2@223@01
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01))))
          (<= 0 j_V2@223@01))
        (<
          i_V2@222@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 i_V2@222@01))
    (not
      (=
        (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01)) j_V2@223@01)
        $Ref.null)))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01))) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01)) j_V2@223@01))
  :pattern ((sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@226@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@222@01)) j_V2@223@01))
  :qid |Intint$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@105@01))))
  $Snap.unit))
; [eval] (forall i_V3: Int :: { (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) } 0 <= i_V3 && i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int) ==> (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) == (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int))
(declare-const i_V3@230@01 Int)
(push) ; 9
; [eval] 0 <= i_V3 && i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int) ==> (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) == (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V3 && i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V3
(push) ; 10
; [then-branch: 50 | 0 <= i_V3@230@01 | live]
; [else-branch: 50 | !(0 <= i_V3@230@01) | live]
(push) ; 11
; [then-branch: 50 | 0 <= i_V3@230@01]
(assert (<= 0 i_V3@230@01))
; [eval] i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget0of1(m_V0): Ref)
(pop) ; 11
(push) ; 11
; [else-branch: 50 | !(0 <= i_V3@230@01)]
(assert (not (<= 0 i_V3@230@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V3@230@01)) (<= 0 i_V3@230@01)))
(push) ; 10
; [then-branch: 51 | i_V3@230@01 < slen[Int](First:(First:($t@105@01))) && 0 <= i_V3@230@01 | live]
; [else-branch: 51 | !(i_V3@230@01 < slen[Int](First:(First:($t@105@01))) && 0 <= i_V3@230@01) | live]
(push) ; 11
; [then-branch: 51 | i_V3@230@01 < slen[Int](First:(First:($t@105@01))) && 0 <= i_V3@230@01]
(assert (and
  (<
    i_V3@230@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
  (<= 0 i_V3@230@01)))
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) == (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@231@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@231@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@231@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef4|)))
(declare-const pm@232@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@232@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@232@01  $FPM) r))
  :qid |qp.resPrmSumDef5|)))
(push) ; 12
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@232@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V3@230@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@233@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@233@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@233@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef6|)))
(declare-const pm@234@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@234@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@234@01  $FPM) r))
  :qid |qp.resPrmSumDef7|)))
(push) ; 12
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@234@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(push) ; 11
; [else-branch: 51 | !(i_V3@230@01 < slen[Int](First:(First:($t@105@01))) && 0 <= i_V3@230@01)]
(assert (not
  (and
    (<
      i_V3@230@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
    (<= 0 i_V3@230@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@231@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@231@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@232@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@232@01  $FPM) r))
  :qid |qp.resPrmSumDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@233@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@233@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@234@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@234@01  $FPM) r))
  :qid |qp.resPrmSumDef7|)))
; Joined path conditions
(assert (or
  (not
    (and
      (<
        i_V3@230@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 i_V3@230@01)))
  (and
    (<
      i_V3@230@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
    (<= 0 i_V3@230@01))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@231@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@231@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@232@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@232@01  $FPM) r))
  :qid |qp.resPrmSumDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@233@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@233@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@234@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@234@01  $FPM) r))
  :qid |qp.resPrmSumDef7|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@230@01 Int)) (!
  (and
    (or (not (<= 0 i_V3@230@01)) (<= 0 i_V3@230@01))
    (or
      (not
        (and
          (<
            i_V3@230@01
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
          (<= 0 i_V3@230@01)))
      (and
        (<
          i_V3@230@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 i_V3@230@01))))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@231@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V3@230@01))))
  :qid |prog.l289-aux|)))
(assert (forall ((i_V3@230@01 Int)) (!
  (=>
    (and
      (<
        i_V3@230@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 i_V3@230@01))
    (=
      (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@231@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V3@230@01)))
      (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@233@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) 0)))))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@231@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V3@230@01))))
  :qid |prog.l289|)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (denseMatrix_4b5075e4_F%trigger ($Snap.first $t@105@01) m_V0@2@01))
; [exec]
; (sloc((sloc((ShStructget0of1(m_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$,
; x_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, y_V5): Ref).Intint$$$$_E_$$$ := (sloc((sloc((ShStructget0of1(m_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$,
;   x_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, y_V5): Ref).Intint$$$$_E_$$$ *
;   z_V0_CN1
; [eval] (sloc((sloc((ShStructget0of1(m_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, x_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, y_V5): Ref)
; [eval] (sloc((ShStructget0of1(m_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, x_V2): Ref)
; [eval] (ShStructget0of1(m_V0_CN0): Ref)
(declare-const sm@235@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@235@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@235@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef8|)))
(declare-const pm@236@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@236@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@236@01  $FPM) r))
  :qid |qp.resPrmSumDef9|)))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@236@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] (sloc((sloc((ShStructget0of1(m_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, x_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, y_V5): Ref).Intint$$$$_E_$$$ * z_V0_CN1
; [eval] (sloc((sloc((ShStructget0of1(m_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, x_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, y_V5): Ref)
; [eval] (sloc((ShStructget0of1(m_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, x_V2): Ref)
; [eval] (ShStructget0of1(m_V0_CN0): Ref)
(declare-const sm@237@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@237@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@237@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef10|)))
(declare-const pm@238@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@238@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@238@01  $FPM) r))
  :qid |qp.resPrmSumDef11|)))
(push) ; 9
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@238@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@239@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@229@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@228@01 r)))))
          (<= 0 (inv@229@01 r)))
        (<
          (inv@228@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 (inv@228@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@239@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@105@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@239@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@105@01))))) r))
  :qid |qp.fvfValDef12|)))
(declare-const pm@240@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@240@01  $FPM) r)
    (ite
      (and
        (and
          (and
            (<
              (inv@229@01 r)
              (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@228@01 r)))))
            (<= 0 (inv@229@01 r)))
          (<
            (inv@228@01 r)
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
        (<= 0 (inv@228@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@240@01  $FPM) r))
  :qid |qp.resPrmSumDef13|)))
(push) ; 9
(assert (not (<
  $Perm.No
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@240@01  $FPM) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@237@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)) y_V5@104@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@241@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@235@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)) y_V5@104@01))
    ($Perm.min
      (ite
        (and
          (and
            (and
              (<
                (inv@229@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@228@01 r)))))
              (<= 0 (inv@229@01 r)))
            (<
              (inv@228@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
          (<= 0 (inv@228@01 r)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (and
            (and
              (<
                (inv@229@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@228@01 r)))))
              (<= 0 (inv@229@01 r)))
            (<
              (inv@228@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
          (<= 0 (inv@228@01 r)))
        $Perm.Write
        $Perm.No)
      (pTaken@241@01 r))
    $Perm.No)
  
  :qid |quant-u-49|))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@235@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)) y_V5@104@01))
    (= (- $Perm.Write (pTaken@241@01 r)) $Perm.No))
  
  :qid |quant-u-50|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@242@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@242@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@235@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)) y_V5@104@01))
  (*
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@239@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@237@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)) y_V5@104@01))
    z_V0@3@01)))
; [exec]
; fold acc(denseMatrix_4b5075e4_F(m_V0_CN0), write)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const i_V1@243@01 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= i_V1 && i_V1 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V1
(push) ; 10
; [then-branch: 52 | 0 <= i_V1@243@01 | live]
; [else-branch: 52 | !(0 <= i_V1@243@01) | live]
(push) ; 11
; [then-branch: 52 | 0 <= i_V1@243@01]
(assert (<= 0 i_V1@243@01))
; [eval] i_V1 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget0of1(m_V0): Ref)
(pop) ; 11
(push) ; 11
; [else-branch: 52 | !(0 <= i_V1@243@01)]
(assert (not (<= 0 i_V1@243@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@243@01)) (<= 0 i_V1@243@01)))
(assert (and
  (<
    i_V1@243@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
  (<= 0 i_V1@243@01)))
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V1): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(pop) ; 9
(declare-fun inv@244@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@243@01 Int)) (!
  (=>
    (and
      (<
        i_V1@243@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 i_V1@243@01))
    (or (not (<= 0 i_V1@243@01)) (<= 0 i_V1@243@01)))
  :pattern ((sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V1@243@01))
  :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((i_V11@243@01 Int) (i_V12@243@01 Int)) (!
  (=>
    (and
      (and
        (<
          i_V11@243@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 i_V11@243@01))
      (and
        (<
          i_V12@243@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 i_V12@243@01))
      (=
        (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V11@243@01)
        (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V12@243@01)))
    (= i_V11@243@01 i_V12@243@01))
  
  :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i_V1@243@01 Int)) (!
  (=>
    (and
      (<
        i_V1@243@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 i_V1@243@01))
    (=
      (inv@244@01 (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V1@243@01))
      i_V1@243@01))
  :pattern ((sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V1@243@01))
  :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@244@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@244@01 r)))
    (=
      (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@244@01 r))
      r))
  :pattern ((inv@244@01 r))
  :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@245@01 ((r $Ref)) $Perm
  (ite
    (and
      (<
        (inv@244@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@244@01 r)))
    ($Perm.min
      (ite
        (and
          (<
            (inv@221@01 r)
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
          (<= 0 (inv@221@01 r)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (<
            (inv@221@01 r)
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
          (<= 0 (inv@221@01 r)))
        $Perm.Write
        $Perm.No)
      (pTaken@245@01 r))
    $Perm.No)
  
  :qid |quant-u-53|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@244@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@244@01 r)))
    (= (- $Perm.Write (pTaken@245@01 r)) $Perm.No))
  
  :qid |quant-u-54|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@246@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)))
      (and
        (<
          (inv@244@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@244@01 r))))
    (=>
      (and
        (<
          (inv@244@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@244@01 r)))
      (Set_in r ($FVF.domain_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)))))
  :pattern ((Set_in r ($FVF.domain_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))))
  :qid |qp.fvfDomDef15|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<
          (inv@244@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@244@01 r)))
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r))))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef14|)))
(declare-const i_V2@247@01 Int)
(declare-const j_V2@248@01 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= i_V2 && (i_V2 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int) && (0 <= j_V2 && j_V2 < (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)))
; [eval] 0 <= i_V2
(push) ; 10
; [then-branch: 53 | 0 <= i_V2@247@01 | live]
; [else-branch: 53 | !(0 <= i_V2@247@01) | live]
(push) ; 11
; [then-branch: 53 | 0 <= i_V2@247@01]
(assert (<= 0 i_V2@247@01))
; [eval] i_V2 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget0of1(m_V0): Ref)
(push) ; 12
; [then-branch: 54 | i_V2@247@01 < slen[Int](First:(First:($t@105@01))) | live]
; [else-branch: 54 | !(i_V2@247@01 < slen[Int](First:(First:($t@105@01)))) | live]
(push) ; 13
; [then-branch: 54 | i_V2@247@01 < slen[Int](First:(First:($t@105@01)))]
(assert (<
  i_V2@247@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
; [eval] 0 <= j_V2
(push) ; 14
; [then-branch: 55 | 0 <= j_V2@248@01 | live]
; [else-branch: 55 | !(0 <= j_V2@248@01) | live]
(push) ; 15
; [then-branch: 55 | 0 <= j_V2@248@01]
(assert (<= 0 j_V2@248@01))
; [eval] j_V2 < (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@249@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef16|)))
(declare-const pm@250@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@250@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@250@01  $FPM) r))
  :qid |qp.resPrmSumDef17|)))
(push) ; 16
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@250@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(push) ; 15
; [else-branch: 55 | !(0 <= j_V2@248@01)]
(assert (not (<= 0 j_V2@248@01)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@250@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@250@01  $FPM) r))
  :qid |qp.resPrmSumDef17|)))
; Joined path conditions
(assert (or (not (<= 0 j_V2@248@01)) (<= 0 j_V2@248@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 54 | !(i_V2@247@01 < slen[Int](First:(First:($t@105@01))))]
(assert (not
  (<
    i_V2@247@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@250@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@250@01  $FPM) r))
  :qid |qp.resPrmSumDef17|)))
(assert (=>
  (<
    i_V2@247@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
  (and
    (<
      i_V2@247@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
    (or (not (<= 0 j_V2@248@01)) (<= 0 j_V2@248@01)))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V2@247@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
  (<
    i_V2@247@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 53 | !(0 <= i_V2@247@01)]
(assert (not (<= 0 i_V2@247@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@250@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@250@01  $FPM) r))
  :qid |qp.resPrmSumDef17|)))
(assert (=>
  (<= 0 i_V2@247@01)
  (and
    (<= 0 i_V2@247@01)
    (=>
      (<
        i_V2@247@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (and
        (<
          i_V2@247@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (or (not (<= 0 j_V2@248@01)) (<= 0 j_V2@248@01))))
    (or
      (not
        (<
          i_V2@247@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<
        i_V2@247@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V2@247@01)) (<= 0 i_V2@247@01)))
(assert (and
  (and
    (and
      (<
        j_V2@248@01
        (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01))))
      (<= 0 j_V2@248@01))
    (<
      i_V2@247@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
  (<= 0 i_V2@247@01)))
; [eval] (sloc((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, j_V2): Ref)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@251@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef18|)))
(declare-const pm@252@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@252@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@252@01  $FPM) r))
  :qid |qp.resPrmSumDef19|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@252@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(declare-fun inv@253@01 ($Ref) Int)
(declare-fun inv@254@01 ($Ref) Int)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@250@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@250@01  $FPM) r))
  :qid |qp.resPrmSumDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@252@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@252@01  $FPM) r))
  :qid |qp.resPrmSumDef19|)))
; Nested auxiliary terms: non-globals
(assert (forall ((i_V2@247@01 Int) (j_V2@248@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V2@248@01
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01))))
          (<= 0 j_V2@248@01))
        (<
          i_V2@247@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 i_V2@247@01))
    (and
      (=>
        (<= 0 i_V2@247@01)
        (and
          (<= 0 i_V2@247@01)
          (=>
            (<
              i_V2@247@01
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
            (and
              (<
                i_V2@247@01
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
              (or (not (<= 0 j_V2@248@01)) (<= 0 j_V2@248@01))))
          (or
            (not
              (<
                i_V2@247@01
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
            (<
              i_V2@247@01
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))))
      (or (not (<= 0 i_V2@247@01)) (<= 0 i_V2@247@01))))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01))) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01)) j_V2@248@01))
  :pattern ((sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01)) j_V2@248@01))
  :qid |Intint$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((i_V21@247@01 Int) (j_V21@248@01 Int) (i_V22@247@01 Int) (j_V22@248@01 Int)) (!
  (=>
    (and
      (and
        (and
          (and
            (<
              j_V21@248@01
              (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V21@247@01))))
            (<= 0 j_V21@248@01))
          (<
            i_V21@247@01
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
        (<= 0 i_V21@247@01))
      (and
        (and
          (and
            (<
              j_V22@248@01
              (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V22@247@01))))
            (<= 0 j_V22@248@01))
          (<
            i_V22@247@01
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
        (<= 0 i_V22@247@01))
      (=
        (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V21@247@01)) j_V21@248@01)
        (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V22@247@01)) j_V22@248@01)))
    (and (= i_V21@247@01 i_V22@247@01) (= j_V21@248@01 j_V22@248@01)))
  
  :qid |Intint$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i_V2@247@01 Int) (j_V2@248@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V2@248@01
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01))))
          (<= 0 j_V2@248@01))
        (<
          i_V2@247@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 i_V2@247@01))
    (and
      (=
        (inv@253@01 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01)) j_V2@248@01))
        i_V2@247@01)
      (=
        (inv@254@01 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01)) j_V2@248@01))
        j_V2@248@01)))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01))) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01)) j_V2@248@01))
  :pattern ((sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V2@247@01)) j_V2@248@01))
  :qid |Intint$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@254@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@253@01 r)))))
          (<= 0 (inv@254@01 r)))
        (<
          (inv@253@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 (inv@253@01 r)))
    (=
      (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@251@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@253@01 r))) (inv@254@01 r))
      r))
  :pattern ((inv@253@01 r))
  :pattern ((inv@254@01 r))
  :qid |Intint$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@255@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (and
          (<
            (inv@254@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@253@01 r)))))
          (<= 0 (inv@254@01 r)))
        (<
          (inv@253@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 (inv@253@01 r)))
    ($Perm.min
      (-
        (ite
          (and
            (and
              (and
                (<
                  (inv@229@01 r)
                  (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@228@01 r)))))
                (<= 0 (inv@229@01 r)))
              (<
                (inv@228@01 r)
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
            (<= 0 (inv@228@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@241@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@256@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (and
          (<
            (inv@254@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@253@01 r)))))
          (<= 0 (inv@254@01 r)))
        (<
          (inv@253@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 (inv@253@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@235@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)) y_V5@104@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@255@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (ite
          (and
            (and
              (and
                (<
                  (inv@229@01 r)
                  (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@228@01 r)))))
                (<= 0 (inv@229@01 r)))
              (<
                (inv@228@01 r)
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
            (<= 0 (inv@228@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@241@01 r))
      (pTaken@255@01 r))
    $Perm.No)
  
  :qid |quant-u-57|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@254@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@253@01 r)))))
          (<= 0 (inv@254@01 r)))
        (<
          (inv@253@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 (inv@253@01 r)))
    (= (- $Perm.Write (pTaken@255@01 r)) $Perm.No))
  
  :qid |quant-u-58|))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@235@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)) y_V5@104@01)
        (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@235@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)) y_V5@104@01))
      $Perm.Write
      $Perm.No)
    (pTaken@256@01 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@235@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)) y_V5@104@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@254@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@253@01 r)))))
          (<= 0 (inv@254@01 r)))
        (<
          (inv@253@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
      (<= 0 (inv@253@01 r)))
    (= (- (- $Perm.Write (pTaken@255@01 r)) (pTaken@256@01 r)) $Perm.No))
  
  :qid |quant-u-60|))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@257@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_Intint$$$$_E_$$$ (as sm@257@01  $FVF<Intint$$$$_E_$$$>)))
      (and
        (and
          (and
            (<
              (inv@254@01 r)
              (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@253@01 r)))))
            (<= 0 (inv@254@01 r)))
          (<
            (inv@253@01 r)
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
        (<= 0 (inv@253@01 r))))
    (=>
      (and
        (and
          (and
            (<
              (inv@254@01 r)
              (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@253@01 r)))))
            (<= 0 (inv@254@01 r)))
          (<
            (inv@253@01 r)
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
        (<= 0 (inv@253@01 r)))
      (Set_in r ($FVF.domain_Intint$$$$_E_$$$ (as sm@257@01  $FVF<Intint$$$$_E_$$$>)))))
  :pattern ((Set_in r ($FVF.domain_Intint$$$$_E_$$$ (as sm@257@01  $FVF<Intint$$$$_E_$$$>))))
  :qid |qp.fvfDomDef22|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (and
            (<
              (inv@254@01 r)
              (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@253@01 r)))))
            (<= 0 (inv@254@01 r)))
          (<
            (inv@253@01 r)
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
        (<= 0 (inv@253@01 r)))
      (<
        $Perm.No
        (-
          (ite
            (and
              (and
                (and
                  (<
                    (inv@229@01 r)
                    (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@224@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@228@01 r)))))
                  (<= 0 (inv@229@01 r)))
                (<
                  (inv@228@01 r)
                  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
              (<= 0 (inv@228@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@241@01 r))))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@257@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@105@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@257@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@105@01))))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (and
            (<
              (inv@254@01 r)
              (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@249@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) (inv@253@01 r)))))
            (<= 0 (inv@254@01 r)))
          (<
            (inv@253@01 r)
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))))))
        (<= 0 (inv@253@01 r)))
      (=
        r
        (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@235@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) x_V2@33@01)) y_V5@104@01)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@257@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@242@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@257@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@242@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef21|)))
; [eval] (forall i_V3: Int :: { (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) } 0 <= i_V3 && i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int) ==> (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) == (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int))
(declare-const i_V3@258@01 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= i_V3 && i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int) ==> (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) == (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V3 && i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V3
(push) ; 10
; [then-branch: 56 | 0 <= i_V3@258@01 | live]
; [else-branch: 56 | !(0 <= i_V3@258@01) | live]
(push) ; 11
; [then-branch: 56 | 0 <= i_V3@258@01]
(assert (<= 0 i_V3@258@01))
; [eval] i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget0of1(m_V0): Ref)
(pop) ; 11
(push) ; 11
; [else-branch: 56 | !(0 <= i_V3@258@01)]
(assert (not (<= 0 i_V3@258@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V3@258@01)) (<= 0 i_V3@258@01)))
(push) ; 10
; [then-branch: 57 | i_V3@258@01 < slen[Int](First:(First:($t@105@01))) && 0 <= i_V3@258@01 | live]
; [else-branch: 57 | !(i_V3@258@01 < slen[Int](First:(First:($t@105@01))) && 0 <= i_V3@258@01) | live]
(push) ; 11
; [then-branch: 57 | i_V3@258@01 < slen[Int](First:(First:($t@105@01))) && 0 <= i_V3@258@01]
(assert (and
  (<
    i_V3@258@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
  (<= 0 i_V3@258@01)))
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) == (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@259@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@259@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@259@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef23|)))
(declare-const pm@260@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@260@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@260@01  $FPM) r))
  :qid |qp.resPrmSumDef24|)))
(push) ; 12
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@260@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V3@258@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@261@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@261@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@261@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef25|)))
(declare-const pm@262@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@262@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@262@01  $FPM) r))
  :qid |qp.resPrmSumDef26|)))
(push) ; 12
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@262@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(push) ; 11
; [else-branch: 57 | !(i_V3@258@01 < slen[Int](First:(First:($t@105@01))) && 0 <= i_V3@258@01)]
(assert (not
  (and
    (<
      i_V3@258@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
    (<= 0 i_V3@258@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@259@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@259@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@260@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@260@01  $FPM) r))
  :qid |qp.resPrmSumDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@261@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@261@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@262@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@262@01  $FPM) r))
  :qid |qp.resPrmSumDef26|)))
; Joined path conditions
(assert (or
  (not
    (and
      (<
        i_V3@258@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 i_V3@258@01)))
  (and
    (<
      i_V3@258@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
    (<= 0 i_V3@258@01))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@259@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@259@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@260@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@260@01  $FPM) r))
  :qid |qp.resPrmSumDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@221@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 (inv@221@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@261@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@261@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@105@01)))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@262@01  $FPM) r)
    (ite
      (and
        (<
          (inv@221@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 (inv@221@01 r)))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@262@01  $FPM) r))
  :qid |qp.resPrmSumDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@258@01 Int)) (!
  (and
    (or (not (<= 0 i_V3@258@01)) (<= 0 i_V3@258@01))
    (or
      (not
        (and
          (<
            i_V3@258@01
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
          (<= 0 i_V3@258@01)))
      (and
        (<
          i_V3@258@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
        (<= 0 i_V3@258@01))))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@259@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V3@258@01))))
  :qid |prog.l289-aux|)))
(push) ; 9
(assert (not (forall ((i_V3@258@01 Int)) (!
  (=>
    (and
      (<
        i_V3@258@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 i_V3@258@01))
    (=
      (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@259@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V3@258@01)))
      (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@261@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) 0)))))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@259@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V3@258@01))))
  :qid |prog.l289|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V3@258@01 Int)) (!
  (=>
    (and
      (<
        i_V3@258@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01)))))
      (<= 0 i_V3@258@01))
    (=
      (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@259@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V3@258@01)))
      (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@261@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) 0)))))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@259@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@105@01))) i_V3@258@01))))
  :qid |prog.l289|)))
(assert (denseMatrix_4b5075e4_F%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@105@01))
  ($Snap.combine
    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
    ($Snap.combine
      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
      $Snap.unit))) m_V0@2@01))
; [exec]
; label L$11$8$Continue
; [exec]
; y_V5 := y_V5 + 1
; [eval] y_V5 + 1
(declare-const y_V5@263@01 Int)
(assert (= y_V5@263@01 (+ y_V5@104@01 1)))
; [eval] !(y_V5 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] y_V5 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 9
(declare-const $k@264@01 $Perm)
(assert ($Perm.isReadVar $k@264@01))
(assert (< $k@264@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@264@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@264@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@265@01 $Perm)
(assert ($Perm.isReadVar $k@265@01))
(assert (< $k@265@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@265@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@265@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@105@01))
  ($Snap.combine
    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
    ($Snap.combine
      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
      $Snap.unit))) m_V0@2@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@265@01))
(assert (and
  (< $k@265@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@265@01))
  (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (not
  (=
    (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit))) m_V0@2@01)
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit))) m_V0@2@01)
    0)))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit)))
  $Snap.unit) m_V0@2@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@264@01))
(assert ($Perm.isReadVar $k@265@01))
(assert (and
  (< $k@264@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@264@01))
  (< $k@265@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@265@01))
  (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01)
  (not
    (=
      (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit))) m_V0@2@01)
      0))
  (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    $Snap.unit) m_V0@2@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  y_V5@263@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    $Snap.unit) m_V0@2@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    y_V5@263@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit)))
      $Snap.unit) m_V0@2@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 58 | !(y_V5@263@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01)) | live]
; [else-branch: 58 | y_V5@263@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 58 | !(y_V5@263@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01))]
(assert (not
  (<
    y_V5@263@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit)))
      $Snap.unit) m_V0@2@01))))
; Loop head block: Re-establish invariant
; [eval] 0 <= x_V2
; [eval] x_V2 < lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 10
(declare-const $k@266@01 $Perm)
(assert ($Perm.isReadVar $k@266@01))
(assert (< $k@266@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@266@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@266@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@266@01))
(assert (and (< $k@266@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@266@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  x_V2@33@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<
  x_V2@33@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01)))
; [eval] 0 <= y_V5
(push) ; 10
(assert (not (<= 0 y_V5@263@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 y_V5@263@01))
; [eval] y_V5 <= lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 10
(declare-const $k@267@01 $Perm)
(assert ($Perm.isReadVar $k@267@01))
(assert (< $k@267@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@267@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@267@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@268@01 $Perm)
(assert ($Perm.isReadVar $k@268@01))
(assert (< $k@268@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@268@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@268@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@268@01))
(assert (and (< $k@268@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@268@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@267@01))
(assert ($Perm.isReadVar $k@268@01))
(assert (and
  (< $k@267@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@267@01))
  (< $k@268@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@268@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (<=
  y_V5@263@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  y_V5@263@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    $Snap.unit) m_V0@2@01)))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0) == old(lenX_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 10
(declare-const $k@269@01 $Perm)
(assert ($Perm.isReadVar $k@269@01))
(assert (< $k@269@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@269@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@269@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@269@01))
(assert (and (< $k@269@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@269@01))))
; [eval] old(lenX_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@270@01 $Perm)
(assert ($Perm.isReadVar $k@270@01))
(assert (< $k@270@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@270@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@270@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@270@01))
(assert (and (< $k@270@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@270@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01)
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01)
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0) == old(lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 10
(declare-const $k@271@01 $Perm)
(assert ($Perm.isReadVar $k@271@01))
(assert (< $k@271@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@271@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@271@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@272@01 $Perm)
(assert ($Perm.isReadVar $k@272@01))
(assert (< $k@272@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@272@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@272@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@272@01))
(assert (and (< $k@272@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@272@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@271@01))
(assert ($Perm.isReadVar $k@272@01))
(assert (and
  (< $k@271@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@271@01))
  (< $k@272@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@272@01))))
; [eval] old(lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@273@01 $Perm)
(assert ($Perm.isReadVar $k@273@01))
(assert (< $k@273@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@273@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@273@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@274@01 $Perm)
(assert ($Perm.isReadVar $k@274@01))
(assert (< $k@274@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@274@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@274@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@274@01))
(assert (and (< $k@274@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@274@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@273@01))
(assert ($Perm.isReadVar $k@274@01))
(assert (and
  (< $k@273@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@273@01))
  (< $k@274@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@274@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    $Snap.unit) m_V0@2@01)
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    $Snap.unit) m_V0@2@01)
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
; [eval] (forall i_V3: Int, j_V3: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) } 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1)
(declare-const i_V3@275@01 Int)
(declare-const j_V3@276@01 Int)
(push) ; 10
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] 0 <= i_V3
(push) ; 11
; [then-branch: 59 | 0 <= i_V3@275@01 | live]
; [else-branch: 59 | !(0 <= i_V3@275@01) | live]
(push) ; 12
; [then-branch: 59 | 0 <= i_V3@275@01]
(assert (<= 0 i_V3@275@01))
; [eval] i_V3 < x_V2
(push) ; 13
; [then-branch: 60 | i_V3@275@01 < x_V2@33@01 | live]
; [else-branch: 60 | !(i_V3@275@01 < x_V2@33@01) | live]
(push) ; 14
; [then-branch: 60 | i_V3@275@01 < x_V2@33@01]
(assert (< i_V3@275@01 x_V2@33@01))
; [eval] 0 <= j_V3
(push) ; 15
; [then-branch: 61 | 0 <= j_V3@276@01 | live]
; [else-branch: 61 | !(0 <= j_V3@276@01) | live]
(push) ; 16
; [then-branch: 61 | 0 <= j_V3@276@01]
(assert (<= 0 j_V3@276@01))
; [eval] j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(push) ; 17
(declare-const $k@277@01 $Perm)
(assert ($Perm.isReadVar $k@277@01))
(assert (< $k@277@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@277@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No $k@277@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 18
(declare-const $k@278@01 $Perm)
(assert ($Perm.isReadVar $k@278@01))
(assert (< $k@278@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@278@01)))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@278@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@278@01))
(assert (and (< $k@278@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@278@01))))
(pop) ; 17
; Joined path conditions
(assert ($Perm.isReadVar $k@277@01))
(assert ($Perm.isReadVar $k@278@01))
(assert (and
  (< $k@277@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@277@01))
  (< $k@278@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@278@01))))
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 61 | !(0 <= j_V3@276@01)]
(assert (not (<= 0 j_V3@276@01)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@277@01))
(assert ($Perm.isReadVar $k@278@01))
(assert (=>
  (<= 0 j_V3@276@01)
  (and
    (<= 0 j_V3@276@01)
    (< $k@277@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@277@01))
    (< $k@278@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@278@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V3@276@01)) (<= 0 j_V3@276@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 60 | !(i_V3@275@01 < x_V2@33@01)]
(assert (not (< i_V3@275@01 x_V2@33@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@277@01))
(assert ($Perm.isReadVar $k@278@01))
(assert (=>
  (< i_V3@275@01 x_V2@33@01)
  (and
    (< i_V3@275@01 x_V2@33@01)
    (=>
      (<= 0 j_V3@276@01)
      (and
        (<= 0 j_V3@276@01)
        (< $k@277@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@277@01))
        (< $k@278@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@278@01))))
    (or (not (<= 0 j_V3@276@01)) (<= 0 j_V3@276@01)))))
; Joined path conditions
(assert (or (not (< i_V3@275@01 x_V2@33@01)) (< i_V3@275@01 x_V2@33@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 59 | !(0 <= i_V3@275@01)]
(assert (not (<= 0 i_V3@275@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@277@01))
(assert ($Perm.isReadVar $k@278@01))
(assert (=>
  (<= 0 i_V3@275@01)
  (and
    (<= 0 i_V3@275@01)
    (=>
      (< i_V3@275@01 x_V2@33@01)
      (and
        (< i_V3@275@01 x_V2@33@01)
        (=>
          (<= 0 j_V3@276@01)
          (and
            (<= 0 j_V3@276@01)
            (< $k@277@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@277@01))
            (< $k@278@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@278@01))))
        (or (not (<= 0 j_V3@276@01)) (<= 0 j_V3@276@01))))
    (or (not (< i_V3@275@01 x_V2@33@01)) (< i_V3@275@01 x_V2@33@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V3@275@01)) (<= 0 i_V3@275@01)))
(push) ; 11
; [then-branch: 62 | j_V3@276@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@276@01 && i_V3@275@01 < x_V2@33@01 && 0 <= i_V3@275@01 | live]
; [else-branch: 62 | !(j_V3@276@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@276@01 && i_V3@275@01 < x_V2@33@01 && 0 <= i_V3@275@01) | live]
(push) ; 12
; [then-branch: 62 | j_V3@276@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@276@01 && i_V3@275@01 < x_V2@33@01 && 0 <= i_V3@275@01]
(assert (and
  (and
    (and
      (<
        j_V3@276@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V3@276@01))
    (< i_V3@275@01 x_V2@33@01))
  (<= 0 i_V3@275@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(push) ; 13
(declare-const $k@279@01 $Perm)
(assert ($Perm.isReadVar $k@279@01))
(assert (< $k@279@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@279@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@279@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@280@01 $Perm)
(assert ($Perm.isReadVar $k@280@01))
(assert (< $k@280@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@280@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@280@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@280@01))
(assert (and (< $k@280@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@280@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  i_V3@275@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<
  i_V3@275@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 14
(declare-const $k@281@01 $Perm)
(assert ($Perm.isReadVar $k@281@01))
(assert (< $k@281@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@281@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@281@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@282@01 $Perm)
(assert ($Perm.isReadVar $k@282@01))
(assert (< $k@282@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@282@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@282@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@282@01))
(assert (and (< $k@282@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@282@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@281@01))
(assert ($Perm.isReadVar $k@282@01))
(assert (and
  (< $k@281@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@281@01))
  (< $k@282@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@282@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit)))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@279@01))
(assert ($Perm.isReadVar $k@280@01))
(assert ($Perm.isReadVar $k@281@01))
(assert ($Perm.isReadVar $k@282@01))
(assert (and
  (< $k@279@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@279@01))
  (< $k@280@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@280@01))
  (<
    i_V3@275@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit))) m_V0@2@01))
  (< $k@281@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@281@01))
  (< $k@282@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@282@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3))
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@283@01 $Perm)
(assert ($Perm.isReadVar $k@283@01))
(assert (< $k@283@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@283@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@283@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@284@01 $Perm)
(assert ($Perm.isReadVar $k@284@01))
(assert (< $k@284@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@284@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@284@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@284@01))
(assert (and (< $k@284@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@284@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (< i_V3@275@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< i_V3@275@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 14
(declare-const $k@285@01 $Perm)
(assert ($Perm.isReadVar $k@285@01))
(assert (< $k@285@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@285@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@285@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@286@01 $Perm)
(assert ($Perm.isReadVar $k@286@01))
(assert (< $k@286@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@286@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@286@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@286@01))
(assert (and (< $k@286@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@286@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@285@01))
(assert ($Perm.isReadVar $k@286@01))
(assert (and
  (< $k@285@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@285@01))
  (< $k@286@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@286@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  j_V3@276@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V3@276@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@283@01))
(assert ($Perm.isReadVar $k@284@01))
(assert ($Perm.isReadVar $k@285@01))
(assert ($Perm.isReadVar $k@286@01))
(assert (and
  (< $k@283@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@283@01))
  (< $k@284@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@284@01))
  (< i_V3@275@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@285@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@285@01))
  (< $k@286@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@286@01))
  (<
    j_V3@276@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 62 | !(j_V3@276@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@276@01 && i_V3@275@01 < x_V2@33@01 && 0 <= i_V3@275@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V3@276@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@276@01))
      (< i_V3@275@01 x_V2@33@01))
    (<= 0 i_V3@275@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@279@01))
(assert ($Perm.isReadVar $k@280@01))
(assert ($Perm.isReadVar $k@281@01))
(assert ($Perm.isReadVar $k@282@01))
(assert ($Perm.isReadVar $k@283@01))
(assert ($Perm.isReadVar $k@284@01))
(assert ($Perm.isReadVar $k@285@01))
(assert ($Perm.isReadVar $k@286@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V3@276@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@276@01))
      (< i_V3@275@01 x_V2@33@01))
    (<= 0 i_V3@275@01))
  (and
    (<
      j_V3@276@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@105@01))
          ($Snap.combine
            ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
            ($Snap.combine
              ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
              $Snap.unit)))
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V3@276@01)
    (< i_V3@275@01 x_V2@33@01)
    (<= 0 i_V3@275@01)
    (< $k@279@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@279@01))
    (< $k@280@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@280@01))
    (<
      i_V3@275@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit))) m_V0@2@01))
    (< $k@281@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@281@01))
    (< $k@282@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@282@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit)))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01)
    (< $k@283@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@283@01))
    (< $k@284@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@284@01))
    (< i_V3@275@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@285@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@285@01))
    (< $k@286@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@286@01))
    (<
      j_V3@276@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V3@276@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@105@01))
                ($Snap.combine
                  ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                  ($Snap.combine
                    ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                    $Snap.unit)))
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@276@01))
        (< i_V3@275@01 x_V2@33@01))
      (<= 0 i_V3@275@01)))
  (and
    (and
      (and
        (<
          j_V3@276@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@276@01))
      (< i_V3@275@01 x_V2@33@01))
    (<= 0 i_V3@275@01))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@277@01))
(assert ($Perm.isReadVar $k@278@01))
(assert ($Perm.isReadVar $k@279@01))
(assert ($Perm.isReadVar $k@280@01))
(assert ($Perm.isReadVar $k@281@01))
(assert ($Perm.isReadVar $k@282@01))
(assert ($Perm.isReadVar $k@283@01))
(assert ($Perm.isReadVar $k@284@01))
(assert ($Perm.isReadVar $k@285@01))
(assert ($Perm.isReadVar $k@286@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@275@01 Int) (j_V3@276@01 Int)) (!
  (and
    (=>
      (<= 0 i_V3@275@01)
      (and
        (<= 0 i_V3@275@01)
        (=>
          (< i_V3@275@01 x_V2@33@01)
          (and
            (< i_V3@275@01 x_V2@33@01)
            (=>
              (<= 0 j_V3@276@01)
              (and
                (<= 0 j_V3@276@01)
                (< $k@277@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@277@01))
                (< $k@278@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@278@01))))
            (or (not (<= 0 j_V3@276@01)) (<= 0 j_V3@276@01))))
        (or (not (< i_V3@275@01 x_V2@33@01)) (< i_V3@275@01 x_V2@33@01))))
    (or (not (<= 0 i_V3@275@01)) (<= 0 i_V3@275@01))
    (=>
      (and
        (and
          (and
            (<
              j_V3@276@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@276@01))
          (< i_V3@275@01 x_V2@33@01))
        (<= 0 i_V3@275@01))
      (and
        (<
          j_V3@276@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@276@01)
        (< i_V3@275@01 x_V2@33@01)
        (<= 0 i_V3@275@01)
        (< $k@279@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@279@01))
        (< $k@280@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@280@01))
        (<
          i_V3@275@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit))) m_V0@2@01))
        (< $k@281@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@281@01))
        (< $k@282@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@282@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01)
        (< $k@283@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@283@01))
        (< $k@284@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@284@01))
        (<
          i_V3@275@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@285@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@285@01))
        (< $k@286@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@286@01))
        (<
          j_V3@276@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V3@276@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.combine
                    ($Snap.first ($Snap.first $t@105@01))
                    ($Snap.combine
                      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                      ($Snap.combine
                        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                        $Snap.unit)))
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V3@276@01))
            (< i_V3@275@01 x_V2@33@01))
          (<= 0 i_V3@275@01)))
      (and
        (and
          (and
            (<
              j_V3@276@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@276@01))
          (< i_V3@275@01 x_V2@33@01))
        (<= 0 i_V3@275@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01))
  :qid |prog.l450-aux|)))
(assert (forall ((i_V3@275@01 Int) (j_V3@276@01 Int)) (!
  (and
    (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit)))
      $Snap.unit) m_V0@2@01)
    (=>
      (and
        (and
          (and
            (<
              j_V3@276@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@276@01))
          (< i_V3@275@01 x_V2@33@01))
        (<= 0 i_V3@275@01))
      (and
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01)
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01))
  :qid |prog.l450_precondition|)))
(push) ; 10
(assert (not (forall ((i_V3@275@01 Int) (j_V3@276@01 Int)) (!
  (=>
    (and
      (and
        (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          $Snap.unit) m_V0@2@01)
        (=>
          (and
            (and
              (and
                (<
                  j_V3@276@01
                  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                    ($Snap.combine
                      ($Snap.first ($Snap.first $t@105@01))
                      ($Snap.combine
                        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                        ($Snap.combine
                          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                          $Snap.unit)))
                    $Snap.unit) m_V0@2@01))
                (<= 0 j_V3@276@01))
              (< i_V3@275@01 x_V2@33@01))
            (<= 0 i_V3@275@01))
          (and
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@105@01))
                ($Snap.combine
                  ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                  ($Snap.combine
                    ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                    $Snap.unit)))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01)
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.first $t@4@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01))))
      (and
        (and
          (and
            (<
              j_V3@276@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@276@01))
          (< i_V3@275@01 x_V2@33@01))
        (<= 0 i_V3@275@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@105@01))
          ($Snap.combine
            ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
            ($Snap.combine
              ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
              $Snap.unit)))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@275@01 j_V3@276@01))
  :qid |prog.l450|))))
(check-sat)
; unknown
(pop) ; 10
; 0.08s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall i_V3: Int, j_V3: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) } 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1)
(declare-const i_V3@287@01 Int)
(declare-const j_V3@288@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] 0 <= i_V3
(push) ; 11
; [then-branch: 63 | 0 <= i_V3@287@01 | live]
; [else-branch: 63 | !(0 <= i_V3@287@01) | live]
(push) ; 12
; [then-branch: 63 | 0 <= i_V3@287@01]
(assert (<= 0 i_V3@287@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] i_V3 < x_V2
(set-option :timeout 0)
(push) ; 13
; [then-branch: 64 | i_V3@287@01 < x_V2@33@01 | live]
; [else-branch: 64 | !(i_V3@287@01 < x_V2@33@01) | live]
(push) ; 14
; [then-branch: 64 | i_V3@287@01 < x_V2@33@01]
(assert (< i_V3@287@01 x_V2@33@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] 0 <= j_V3
(set-option :timeout 0)
(push) ; 15
; [then-branch: 65 | 0 <= j_V3@288@01 | live]
; [else-branch: 65 | !(0 <= j_V3@288@01) | live]
(push) ; 16
; [then-branch: 65 | 0 <= j_V3@288@01]
(assert (<= 0 j_V3@288@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 17
(declare-const $k@289@01 $Perm)
(assert ($Perm.isReadVar $k@289@01))
(assert (< $k@289@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@289@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No $k@289@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 18
(declare-const $k@290@01 $Perm)
(assert ($Perm.isReadVar $k@290@01))
(assert (< $k@290@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@290@01)))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@290@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@290@01))
(assert (and (< $k@290@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@290@01))))
(pop) ; 17
; Joined path conditions
(assert ($Perm.isReadVar $k@289@01))
(assert ($Perm.isReadVar $k@290@01))
(assert (and
  (< $k@289@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@289@01))
  (< $k@290@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@290@01))))
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 65 | !(0 <= j_V3@288@01)]
(assert (not (<= 0 j_V3@288@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@289@01))
(assert ($Perm.isReadVar $k@290@01))
(assert (=>
  (<= 0 j_V3@288@01)
  (and
    (<= 0 j_V3@288@01)
    (< $k@289@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@289@01))
    (< $k@290@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@290@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V3@288@01)) (<= 0 j_V3@288@01)))
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 64 | !(i_V3@287@01 < x_V2@33@01)]
(assert (not (< i_V3@287@01 x_V2@33@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@289@01))
(assert ($Perm.isReadVar $k@290@01))
(assert (=>
  (< i_V3@287@01 x_V2@33@01)
  (and
    (< i_V3@287@01 x_V2@33@01)
    (=>
      (<= 0 j_V3@288@01)
      (and
        (<= 0 j_V3@288@01)
        (< $k@289@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@289@01))
        (< $k@290@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@290@01))))
    (or (not (<= 0 j_V3@288@01)) (<= 0 j_V3@288@01)))))
; Joined path conditions
(assert (or (not (< i_V3@287@01 x_V2@33@01)) (< i_V3@287@01 x_V2@33@01)))
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 63 | !(0 <= i_V3@287@01)]
(assert (not (<= 0 i_V3@287@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@289@01))
(assert ($Perm.isReadVar $k@290@01))
(assert (=>
  (<= 0 i_V3@287@01)
  (and
    (<= 0 i_V3@287@01)
    (=>
      (< i_V3@287@01 x_V2@33@01)
      (and
        (< i_V3@287@01 x_V2@33@01)
        (=>
          (<= 0 j_V3@288@01)
          (and
            (<= 0 j_V3@288@01)
            (< $k@289@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@289@01))
            (< $k@290@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@290@01))))
        (or (not (<= 0 j_V3@288@01)) (<= 0 j_V3@288@01))))
    (or (not (< i_V3@287@01 x_V2@33@01)) (< i_V3@287@01 x_V2@33@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V3@287@01)) (<= 0 i_V3@287@01)))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 66 | j_V3@288@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@288@01 && i_V3@287@01 < x_V2@33@01 && 0 <= i_V3@287@01 | live]
; [else-branch: 66 | !(j_V3@288@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@288@01 && i_V3@287@01 < x_V2@33@01 && 0 <= i_V3@287@01) | live]
(push) ; 12
; [then-branch: 66 | j_V3@288@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@288@01 && i_V3@287@01 < x_V2@33@01 && 0 <= i_V3@287@01]
(assert (and
  (and
    (and
      (<
        j_V3@288@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V3@288@01))
    (< i_V3@287@01 x_V2@33@01))
  (<= 0 i_V3@287@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@291@01 $Perm)
(assert ($Perm.isReadVar $k@291@01))
(assert (< $k@291@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@291@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@291@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@292@01 $Perm)
(assert ($Perm.isReadVar $k@292@01))
(assert (< $k@292@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@292@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@292@01))
(assert (and (< $k@292@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@292@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  i_V3@287@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<
  i_V3@287@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 14
(declare-const $k@293@01 $Perm)
(assert ($Perm.isReadVar $k@293@01))
(assert (< $k@293@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@293@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@294@01 $Perm)
(assert ($Perm.isReadVar $k@294@01))
(assert (< $k@294@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@294@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@294@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@294@01))
(assert (and (< $k@294@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@294@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@293@01))
(assert ($Perm.isReadVar $k@294@01))
(assert (and
  (< $k@293@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@293@01))
  (< $k@294@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@294@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit)))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@291@01))
(assert ($Perm.isReadVar $k@292@01))
(assert ($Perm.isReadVar $k@293@01))
(assert ($Perm.isReadVar $k@294@01))
(assert (and
  (< $k@291@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@291@01))
  (< $k@292@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@292@01))
  (<
    i_V3@287@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit))) m_V0@2@01))
  (< $k@293@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@293@01))
  (< $k@294@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@294@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3))
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@295@01 $Perm)
(assert ($Perm.isReadVar $k@295@01))
(assert (< $k@295@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@295@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@295@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@296@01 $Perm)
(assert ($Perm.isReadVar $k@296@01))
(assert (< $k@296@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@296@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@296@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@296@01))
(assert (and (< $k@296@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@296@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (< i_V3@287@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< i_V3@287@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 14
(declare-const $k@297@01 $Perm)
(assert ($Perm.isReadVar $k@297@01))
(assert (< $k@297@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@297@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@297@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@298@01 $Perm)
(assert ($Perm.isReadVar $k@298@01))
(assert (< $k@298@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@298@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@298@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@298@01))
(assert (and (< $k@298@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@298@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@297@01))
(assert ($Perm.isReadVar $k@298@01))
(assert (and
  (< $k@297@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@297@01))
  (< $k@298@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@298@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  j_V3@288@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V3@288@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@295@01))
(assert ($Perm.isReadVar $k@296@01))
(assert ($Perm.isReadVar $k@297@01))
(assert ($Perm.isReadVar $k@298@01))
(assert (and
  (< $k@295@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@295@01))
  (< $k@296@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@296@01))
  (< i_V3@287@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@297@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@297@01))
  (< $k@298@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@298@01))
  (<
    j_V3@288@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 66 | !(j_V3@288@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@288@01 && i_V3@287@01 < x_V2@33@01 && 0 <= i_V3@287@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V3@288@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@288@01))
      (< i_V3@287@01 x_V2@33@01))
    (<= 0 i_V3@287@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@291@01))
(assert ($Perm.isReadVar $k@292@01))
(assert ($Perm.isReadVar $k@293@01))
(assert ($Perm.isReadVar $k@294@01))
(assert ($Perm.isReadVar $k@295@01))
(assert ($Perm.isReadVar $k@296@01))
(assert ($Perm.isReadVar $k@297@01))
(assert ($Perm.isReadVar $k@298@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V3@288@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@288@01))
      (< i_V3@287@01 x_V2@33@01))
    (<= 0 i_V3@287@01))
  (and
    (<
      j_V3@288@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@105@01))
          ($Snap.combine
            ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
            ($Snap.combine
              ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
              $Snap.unit)))
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V3@288@01)
    (< i_V3@287@01 x_V2@33@01)
    (<= 0 i_V3@287@01)
    (< $k@291@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@291@01))
    (< $k@292@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@292@01))
    (<
      i_V3@287@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit))) m_V0@2@01))
    (< $k@293@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@293@01))
    (< $k@294@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@294@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit)))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01)
    (< $k@295@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@295@01))
    (< $k@296@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@296@01))
    (< i_V3@287@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@297@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@297@01))
    (< $k@298@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@298@01))
    (<
      j_V3@288@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V3@288@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@105@01))
                ($Snap.combine
                  ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                  ($Snap.combine
                    ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                    $Snap.unit)))
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@288@01))
        (< i_V3@287@01 x_V2@33@01))
      (<= 0 i_V3@287@01)))
  (and
    (and
      (and
        (<
          j_V3@288@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@288@01))
      (< i_V3@287@01 x_V2@33@01))
    (<= 0 i_V3@287@01))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@289@01))
(assert ($Perm.isReadVar $k@290@01))
(assert ($Perm.isReadVar $k@291@01))
(assert ($Perm.isReadVar $k@292@01))
(assert ($Perm.isReadVar $k@293@01))
(assert ($Perm.isReadVar $k@294@01))
(assert ($Perm.isReadVar $k@295@01))
(assert ($Perm.isReadVar $k@296@01))
(assert ($Perm.isReadVar $k@297@01))
(assert ($Perm.isReadVar $k@298@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@287@01 Int) (j_V3@288@01 Int)) (!
  (and
    (=>
      (<= 0 i_V3@287@01)
      (and
        (<= 0 i_V3@287@01)
        (=>
          (< i_V3@287@01 x_V2@33@01)
          (and
            (< i_V3@287@01 x_V2@33@01)
            (=>
              (<= 0 j_V3@288@01)
              (and
                (<= 0 j_V3@288@01)
                (< $k@289@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@289@01))
                (< $k@290@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@290@01))))
            (or (not (<= 0 j_V3@288@01)) (<= 0 j_V3@288@01))))
        (or (not (< i_V3@287@01 x_V2@33@01)) (< i_V3@287@01 x_V2@33@01))))
    (or (not (<= 0 i_V3@287@01)) (<= 0 i_V3@287@01))
    (=>
      (and
        (and
          (and
            (<
              j_V3@288@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@288@01))
          (< i_V3@287@01 x_V2@33@01))
        (<= 0 i_V3@287@01))
      (and
        (<
          j_V3@288@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@288@01)
        (< i_V3@287@01 x_V2@33@01)
        (<= 0 i_V3@287@01)
        (< $k@291@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@291@01))
        (< $k@292@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@292@01))
        (<
          i_V3@287@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit))) m_V0@2@01))
        (< $k@293@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@293@01))
        (< $k@294@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@294@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01)
        (< $k@295@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@295@01))
        (< $k@296@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@296@01))
        (<
          i_V3@287@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@297@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@297@01))
        (< $k@298@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@298@01))
        (<
          j_V3@288@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V3@288@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.combine
                    ($Snap.first ($Snap.first $t@105@01))
                    ($Snap.combine
                      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                      ($Snap.combine
                        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                        $Snap.unit)))
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V3@288@01))
            (< i_V3@287@01 x_V2@33@01))
          (<= 0 i_V3@287@01)))
      (and
        (and
          (and
            (<
              j_V3@288@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@288@01))
          (< i_V3@287@01 x_V2@33@01))
        (<= 0 i_V3@287@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01))
  :qid |prog.l450-aux|)))
(assert (forall ((i_V3@287@01 Int) (j_V3@288@01 Int)) (!
  (and
    (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit)))
      $Snap.unit) m_V0@2@01)
    (=>
      (and
        (and
          (and
            (<
              j_V3@288@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@288@01))
          (< i_V3@287@01 x_V2@33@01))
        (<= 0 i_V3@287@01))
      (and
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01)
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01))
  :qid |prog.l450_precondition|)))
(set-option :timeout 0)
(push) ; 10
(assert (not (forall ((i_V3@287@01 Int) (j_V3@288@01 Int)) (!
  (=>
    (and
      (and
        (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          $Snap.unit) m_V0@2@01)
        (=>
          (and
            (and
              (and
                (<
                  j_V3@288@01
                  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                    ($Snap.combine
                      ($Snap.first ($Snap.first $t@105@01))
                      ($Snap.combine
                        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                        ($Snap.combine
                          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                          $Snap.unit)))
                    $Snap.unit) m_V0@2@01))
                (<= 0 j_V3@288@01))
              (< i_V3@287@01 x_V2@33@01))
            (<= 0 i_V3@287@01))
          (and
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@105@01))
                ($Snap.combine
                  ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                  ($Snap.combine
                    ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                    $Snap.unit)))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01)
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.first $t@4@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01))))
      (and
        (and
          (and
            (<
              j_V3@288@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@288@01))
          (< i_V3@287@01 x_V2@33@01))
        (<= 0 i_V3@287@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@105@01))
          ($Snap.combine
            ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
            ($Snap.combine
              ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
              $Snap.unit)))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@287@01 j_V3@288@01))
  :qid |prog.l450|))))
(check-sat)
; unknown
(pop) ; 10
; 0.06s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall i_V3: Int, j_V3: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) } 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1)
(declare-const i_V3@299@01 Int)
(declare-const j_V3@300@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] 0 <= i_V3
(push) ; 11
; [then-branch: 67 | 0 <= i_V3@299@01 | live]
; [else-branch: 67 | !(0 <= i_V3@299@01) | live]
(push) ; 12
; [then-branch: 67 | 0 <= i_V3@299@01]
(assert (<= 0 i_V3@299@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] i_V3 < x_V2
(set-option :timeout 0)
(push) ; 13
; [then-branch: 68 | i_V3@299@01 < x_V2@33@01 | live]
; [else-branch: 68 | !(i_V3@299@01 < x_V2@33@01) | live]
(push) ; 14
; [then-branch: 68 | i_V3@299@01 < x_V2@33@01]
(assert (< i_V3@299@01 x_V2@33@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] 0 <= j_V3
(set-option :timeout 0)
(push) ; 15
; [then-branch: 69 | 0 <= j_V3@300@01 | live]
; [else-branch: 69 | !(0 <= j_V3@300@01) | live]
(push) ; 16
; [then-branch: 69 | 0 <= j_V3@300@01]
(assert (<= 0 j_V3@300@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 17
(declare-const $k@301@01 $Perm)
(assert ($Perm.isReadVar $k@301@01))
(assert (< $k@301@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@301@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No $k@301@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 18
(declare-const $k@302@01 $Perm)
(assert ($Perm.isReadVar $k@302@01))
(assert (< $k@302@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@302@01)))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@302@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@302@01))
(assert (and (< $k@302@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@302@01))))
(pop) ; 17
; Joined path conditions
(assert ($Perm.isReadVar $k@301@01))
(assert ($Perm.isReadVar $k@302@01))
(assert (and
  (< $k@301@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@301@01))
  (< $k@302@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@302@01))))
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 69 | !(0 <= j_V3@300@01)]
(assert (not (<= 0 j_V3@300@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@301@01))
(assert ($Perm.isReadVar $k@302@01))
(assert (=>
  (<= 0 j_V3@300@01)
  (and
    (<= 0 j_V3@300@01)
    (< $k@301@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@301@01))
    (< $k@302@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@302@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V3@300@01)) (<= 0 j_V3@300@01)))
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 68 | !(i_V3@299@01 < x_V2@33@01)]
(assert (not (< i_V3@299@01 x_V2@33@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@301@01))
(assert ($Perm.isReadVar $k@302@01))
(assert (=>
  (< i_V3@299@01 x_V2@33@01)
  (and
    (< i_V3@299@01 x_V2@33@01)
    (=>
      (<= 0 j_V3@300@01)
      (and
        (<= 0 j_V3@300@01)
        (< $k@301@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@301@01))
        (< $k@302@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@302@01))))
    (or (not (<= 0 j_V3@300@01)) (<= 0 j_V3@300@01)))))
; Joined path conditions
(assert (or (not (< i_V3@299@01 x_V2@33@01)) (< i_V3@299@01 x_V2@33@01)))
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 67 | !(0 <= i_V3@299@01)]
(assert (not (<= 0 i_V3@299@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@301@01))
(assert ($Perm.isReadVar $k@302@01))
(assert (=>
  (<= 0 i_V3@299@01)
  (and
    (<= 0 i_V3@299@01)
    (=>
      (< i_V3@299@01 x_V2@33@01)
      (and
        (< i_V3@299@01 x_V2@33@01)
        (=>
          (<= 0 j_V3@300@01)
          (and
            (<= 0 j_V3@300@01)
            (< $k@301@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@301@01))
            (< $k@302@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@302@01))))
        (or (not (<= 0 j_V3@300@01)) (<= 0 j_V3@300@01))))
    (or (not (< i_V3@299@01 x_V2@33@01)) (< i_V3@299@01 x_V2@33@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V3@299@01)) (<= 0 i_V3@299@01)))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 70 | j_V3@300@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@300@01 && i_V3@299@01 < x_V2@33@01 && 0 <= i_V3@299@01 | live]
; [else-branch: 70 | !(j_V3@300@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@300@01 && i_V3@299@01 < x_V2@33@01 && 0 <= i_V3@299@01) | live]
(push) ; 12
; [then-branch: 70 | j_V3@300@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@300@01 && i_V3@299@01 < x_V2@33@01 && 0 <= i_V3@299@01]
(assert (and
  (and
    (and
      (<
        j_V3@300@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V3@300@01))
    (< i_V3@299@01 x_V2@33@01))
  (<= 0 i_V3@299@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@303@01 $Perm)
(assert ($Perm.isReadVar $k@303@01))
(assert (< $k@303@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@303@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@303@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@304@01 $Perm)
(assert ($Perm.isReadVar $k@304@01))
(assert (< $k@304@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@304@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@304@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@304@01))
(assert (and (< $k@304@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@304@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  i_V3@299@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<
  i_V3@299@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 14
(declare-const $k@305@01 $Perm)
(assert ($Perm.isReadVar $k@305@01))
(assert (< $k@305@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@305@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@305@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@306@01 $Perm)
(assert ($Perm.isReadVar $k@306@01))
(assert (< $k@306@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@306@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@306@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@306@01))
(assert (and (< $k@306@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@306@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@305@01))
(assert ($Perm.isReadVar $k@306@01))
(assert (and
  (< $k@305@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@305@01))
  (< $k@306@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@306@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit)))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@303@01))
(assert ($Perm.isReadVar $k@304@01))
(assert ($Perm.isReadVar $k@305@01))
(assert ($Perm.isReadVar $k@306@01))
(assert (and
  (< $k@303@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@303@01))
  (< $k@304@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@304@01))
  (<
    i_V3@299@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit))) m_V0@2@01))
  (< $k@305@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@305@01))
  (< $k@306@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@306@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3))
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@307@01 $Perm)
(assert ($Perm.isReadVar $k@307@01))
(assert (< $k@307@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@307@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@307@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@308@01 $Perm)
(assert ($Perm.isReadVar $k@308@01))
(assert (< $k@308@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@308@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@308@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@308@01))
(assert (and (< $k@308@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@308@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (< i_V3@299@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< i_V3@299@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 14
(declare-const $k@309@01 $Perm)
(assert ($Perm.isReadVar $k@309@01))
(assert (< $k@309@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@309@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@309@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@310@01 $Perm)
(assert ($Perm.isReadVar $k@310@01))
(assert (< $k@310@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@310@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@310@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@310@01))
(assert (and (< $k@310@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@310@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert (and
  (< $k@309@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@309@01))
  (< $k@310@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@310@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  j_V3@300@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V3@300@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@307@01))
(assert ($Perm.isReadVar $k@308@01))
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert (and
  (< $k@307@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@307@01))
  (< $k@308@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@308@01))
  (< i_V3@299@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@309@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@309@01))
  (< $k@310@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@310@01))
  (<
    j_V3@300@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 70 | !(j_V3@300@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@300@01 && i_V3@299@01 < x_V2@33@01 && 0 <= i_V3@299@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V3@300@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@300@01))
      (< i_V3@299@01 x_V2@33@01))
    (<= 0 i_V3@299@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@303@01))
(assert ($Perm.isReadVar $k@304@01))
(assert ($Perm.isReadVar $k@305@01))
(assert ($Perm.isReadVar $k@306@01))
(assert ($Perm.isReadVar $k@307@01))
(assert ($Perm.isReadVar $k@308@01))
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V3@300@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@300@01))
      (< i_V3@299@01 x_V2@33@01))
    (<= 0 i_V3@299@01))
  (and
    (<
      j_V3@300@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@105@01))
          ($Snap.combine
            ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
            ($Snap.combine
              ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
              $Snap.unit)))
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V3@300@01)
    (< i_V3@299@01 x_V2@33@01)
    (<= 0 i_V3@299@01)
    (< $k@303@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@303@01))
    (< $k@304@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@304@01))
    (<
      i_V3@299@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit))) m_V0@2@01))
    (< $k@305@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@305@01))
    (< $k@306@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@306@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit)))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01)
    (< $k@307@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@307@01))
    (< $k@308@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@308@01))
    (< i_V3@299@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@309@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@309@01))
    (< $k@310@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@310@01))
    (<
      j_V3@300@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V3@300@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@105@01))
                ($Snap.combine
                  ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                  ($Snap.combine
                    ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                    $Snap.unit)))
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@300@01))
        (< i_V3@299@01 x_V2@33@01))
      (<= 0 i_V3@299@01)))
  (and
    (and
      (and
        (<
          j_V3@300@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@300@01))
      (< i_V3@299@01 x_V2@33@01))
    (<= 0 i_V3@299@01))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@301@01))
(assert ($Perm.isReadVar $k@302@01))
(assert ($Perm.isReadVar $k@303@01))
(assert ($Perm.isReadVar $k@304@01))
(assert ($Perm.isReadVar $k@305@01))
(assert ($Perm.isReadVar $k@306@01))
(assert ($Perm.isReadVar $k@307@01))
(assert ($Perm.isReadVar $k@308@01))
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@299@01 Int) (j_V3@300@01 Int)) (!
  (and
    (=>
      (<= 0 i_V3@299@01)
      (and
        (<= 0 i_V3@299@01)
        (=>
          (< i_V3@299@01 x_V2@33@01)
          (and
            (< i_V3@299@01 x_V2@33@01)
            (=>
              (<= 0 j_V3@300@01)
              (and
                (<= 0 j_V3@300@01)
                (< $k@301@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@301@01))
                (< $k@302@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@302@01))))
            (or (not (<= 0 j_V3@300@01)) (<= 0 j_V3@300@01))))
        (or (not (< i_V3@299@01 x_V2@33@01)) (< i_V3@299@01 x_V2@33@01))))
    (or (not (<= 0 i_V3@299@01)) (<= 0 i_V3@299@01))
    (=>
      (and
        (and
          (and
            (<
              j_V3@300@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@300@01))
          (< i_V3@299@01 x_V2@33@01))
        (<= 0 i_V3@299@01))
      (and
        (<
          j_V3@300@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@300@01)
        (< i_V3@299@01 x_V2@33@01)
        (<= 0 i_V3@299@01)
        (< $k@303@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@303@01))
        (< $k@304@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@304@01))
        (<
          i_V3@299@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit))) m_V0@2@01))
        (< $k@305@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@305@01))
        (< $k@306@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@306@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01)
        (< $k@307@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@307@01))
        (< $k@308@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@308@01))
        (<
          i_V3@299@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@309@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@309@01))
        (< $k@310@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@310@01))
        (<
          j_V3@300@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V3@300@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.combine
                    ($Snap.first ($Snap.first $t@105@01))
                    ($Snap.combine
                      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                      ($Snap.combine
                        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                        $Snap.unit)))
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V3@300@01))
            (< i_V3@299@01 x_V2@33@01))
          (<= 0 i_V3@299@01)))
      (and
        (and
          (and
            (<
              j_V3@300@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@300@01))
          (< i_V3@299@01 x_V2@33@01))
        (<= 0 i_V3@299@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01))
  :qid |prog.l450-aux|)))
(assert (forall ((i_V3@299@01 Int) (j_V3@300@01 Int)) (!
  (and
    (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit)))
      $Snap.unit) m_V0@2@01)
    (=>
      (and
        (and
          (and
            (<
              j_V3@300@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@300@01))
          (< i_V3@299@01 x_V2@33@01))
        (<= 0 i_V3@299@01))
      (and
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01)
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01))
  :qid |prog.l450_precondition|)))
(set-option :timeout 0)
(push) ; 10
(assert (not (forall ((i_V3@299@01 Int) (j_V3@300@01 Int)) (!
  (=>
    (and
      (and
        (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          $Snap.unit) m_V0@2@01)
        (=>
          (and
            (and
              (and
                (<
                  j_V3@300@01
                  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                    ($Snap.combine
                      ($Snap.first ($Snap.first $t@105@01))
                      ($Snap.combine
                        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                        ($Snap.combine
                          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                          $Snap.unit)))
                    $Snap.unit) m_V0@2@01))
                (<= 0 j_V3@300@01))
              (< i_V3@299@01 x_V2@33@01))
            (<= 0 i_V3@299@01))
          (and
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@105@01))
                ($Snap.combine
                  ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                  ($Snap.combine
                    ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                    $Snap.unit)))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01)
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.first $t@4@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01))))
      (and
        (and
          (and
            (<
              j_V3@300@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@300@01))
          (< i_V3@299@01 x_V2@33@01))
        (<= 0 i_V3@299@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@105@01))
          ($Snap.combine
            ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
            ($Snap.combine
              ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
              $Snap.unit)))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@299@01 j_V3@300@01))
  :qid |prog.l450|))))
(check-sat)
; unknown
(pop) ; 10
; 0.05s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall i_V3: Int, j_V3: Int :: { lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) } 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1)
(declare-const i_V3@311@01 Int)
(declare-const j_V3@312@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0))) ==> lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] 0 <= i_V3 && (i_V3 < x_V2 && (0 <= j_V3 && j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)))
; [eval] 0 <= i_V3
(push) ; 11
; [then-branch: 71 | 0 <= i_V3@311@01 | live]
; [else-branch: 71 | !(0 <= i_V3@311@01) | live]
(push) ; 12
; [then-branch: 71 | 0 <= i_V3@311@01]
(assert (<= 0 i_V3@311@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] i_V3 < x_V2
(set-option :timeout 0)
(push) ; 13
; [then-branch: 72 | i_V3@311@01 < x_V2@33@01 | live]
; [else-branch: 72 | !(i_V3@311@01 < x_V2@33@01) | live]
(push) ; 14
; [then-branch: 72 | i_V3@311@01 < x_V2@33@01]
(assert (< i_V3@311@01 x_V2@33@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] 0 <= j_V3
(set-option :timeout 0)
(push) ; 15
; [then-branch: 73 | 0 <= j_V3@312@01 | live]
; [else-branch: 73 | !(0 <= j_V3@312@01) | live]
(push) ; 16
; [then-branch: 73 | 0 <= j_V3@312@01]
(assert (<= 0 j_V3@312@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] j_V3 < lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0_CN0)
(set-option :timeout 0)
(push) ; 17
(declare-const $k@313@01 $Perm)
(assert ($Perm.isReadVar $k@313@01))
(assert (< $k@313@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@313@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No $k@313@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 18
(declare-const $k@314@01 $Perm)
(assert ($Perm.isReadVar $k@314@01))
(assert (< $k@314@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@314@01)))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@314@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@314@01))
(assert (and (< $k@314@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@314@01))))
(pop) ; 17
; Joined path conditions
(assert ($Perm.isReadVar $k@313@01))
(assert ($Perm.isReadVar $k@314@01))
(assert (and
  (< $k@313@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@313@01))
  (< $k@314@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@314@01))))
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 73 | !(0 <= j_V3@312@01)]
(assert (not (<= 0 j_V3@312@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@313@01))
(assert ($Perm.isReadVar $k@314@01))
(assert (=>
  (<= 0 j_V3@312@01)
  (and
    (<= 0 j_V3@312@01)
    (< $k@313@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@313@01))
    (< $k@314@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@314@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V3@312@01)) (<= 0 j_V3@312@01)))
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 72 | !(i_V3@311@01 < x_V2@33@01)]
(assert (not (< i_V3@311@01 x_V2@33@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@313@01))
(assert ($Perm.isReadVar $k@314@01))
(assert (=>
  (< i_V3@311@01 x_V2@33@01)
  (and
    (< i_V3@311@01 x_V2@33@01)
    (=>
      (<= 0 j_V3@312@01)
      (and
        (<= 0 j_V3@312@01)
        (< $k@313@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@313@01))
        (< $k@314@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@314@01))))
    (or (not (<= 0 j_V3@312@01)) (<= 0 j_V3@312@01)))))
; Joined path conditions
(assert (or (not (< i_V3@311@01 x_V2@33@01)) (< i_V3@311@01 x_V2@33@01)))
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 71 | !(0 <= i_V3@311@01)]
(assert (not (<= 0 i_V3@311@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@313@01))
(assert ($Perm.isReadVar $k@314@01))
(assert (=>
  (<= 0 i_V3@311@01)
  (and
    (<= 0 i_V3@311@01)
    (=>
      (< i_V3@311@01 x_V2@33@01)
      (and
        (< i_V3@311@01 x_V2@33@01)
        (=>
          (<= 0 j_V3@312@01)
          (and
            (<= 0 j_V3@312@01)
            (< $k@313@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@313@01))
            (< $k@314@01 $Perm.Write)
            (<= $Perm.No (- $Perm.Write $k@314@01))))
        (or (not (<= 0 j_V3@312@01)) (<= 0 j_V3@312@01))))
    (or (not (< i_V3@311@01 x_V2@33@01)) (< i_V3@311@01 x_V2@33@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V3@311@01)) (<= 0 i_V3@311@01)))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 74 | j_V3@312@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@312@01 && i_V3@311@01 < x_V2@33@01 && 0 <= i_V3@311@01 | live]
; [else-branch: 74 | !(j_V3@312@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@312@01 && i_V3@311@01 < x_V2@33@01 && 0 <= i_V3@311@01) | live]
(push) ; 12
; [then-branch: 74 | j_V3@312@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@312@01 && i_V3@311@01 < x_V2@33@01 && 0 <= i_V3@311@01]
(assert (and
  (and
    (and
      (<
        j_V3@312@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          $Snap.unit) m_V0@2@01))
      (<= 0 j_V3@312@01))
    (< i_V3@311@01 x_V2@33@01))
  (<= 0 i_V3@311@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3) == old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@315@01 $Perm)
(assert ($Perm.isReadVar $k@315@01))
(assert (< $k@315@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@315@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@315@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@316@01 $Perm)
(assert ($Perm.isReadVar $k@316@01))
(assert (< $k@316@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@316@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@316@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@316@01))
(assert (and (< $k@316@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@316@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  i_V3@311@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<
  i_V3@311@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit))) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 14
(declare-const $k@317@01 $Perm)
(assert ($Perm.isReadVar $k@317@01))
(assert (< $k@317@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@317@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@317@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@318@01 $Perm)
(assert ($Perm.isReadVar $k@318@01))
(assert (< $k@318@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@318@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@318@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@318@01))
(assert (and (< $k@318@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@318@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@317@01))
(assert ($Perm.isReadVar $k@318@01))
(assert (and
  (< $k@317@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@317@01))
  (< $k@318@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@318@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@105@01))
    ($Snap.combine
      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
      ($Snap.combine
        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
        $Snap.unit)))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@315@01))
(assert ($Perm.isReadVar $k@316@01))
(assert ($Perm.isReadVar $k@317@01))
(assert ($Perm.isReadVar $k@318@01))
(assert (and
  (< $k@315@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@315@01))
  (< $k@316@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@316@01))
  (<
    i_V3@311@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit))) m_V0@2@01))
  (< $k@317@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@317@01))
  (< $k@318@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@318@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01)))
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)) * z_V0_CN1
; [eval] old(lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3))
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
; [eval] lookup_4b5075e4_PMDenseMatrix(m_V0_CN0, i_V3, j_V3)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@319@01 $Perm)
(assert ($Perm.isReadVar $k@319@01))
(assert (< $k@319@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@319@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@319@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@320@01 $Perm)
(assert ($Perm.isReadVar $k@320@01))
(assert (< $k@320@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@320@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@320@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@320@01))
(assert (and (< $k@320@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@320@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (< i_V3@311@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (< i_V3@311@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 14
(declare-const $k@321@01 $Perm)
(assert ($Perm.isReadVar $k@321@01))
(assert (< $k@321@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@321@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@321@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@322@01 $Perm)
(assert ($Perm.isReadVar $k@322@01))
(assert (< $k@322@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@322@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@322@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@322@01))
(assert (and (< $k@322@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@322@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@321@01))
(assert ($Perm.isReadVar $k@322@01))
(assert (and
  (< $k@321@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@321@01))
  (< $k@322@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@322@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  j_V3@312@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V3@312@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@4@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@319@01))
(assert ($Perm.isReadVar $k@320@01))
(assert ($Perm.isReadVar $k@321@01))
(assert ($Perm.isReadVar $k@322@01))
(assert (and
  (< $k@319@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@319@01))
  (< $k@320@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@320@01))
  (< i_V3@311@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
  (< $k@321@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@321@01))
  (< $k@322@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@322@01))
  (<
    j_V3@312@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@4@01) $Snap.unit) m_V0@2@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@4@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 74 | !(j_V3@312@01 < lenY_4b5075e4_PMDenseMatrix(((First:(First:($t@105@01)), (sm@246@01, (sm@257@01, _))), _), m_V0@2@01) && 0 <= j_V3@312@01 && i_V3@311@01 < x_V2@33@01 && 0 <= i_V3@311@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V3@312@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@312@01))
      (< i_V3@311@01 x_V2@33@01))
    (<= 0 i_V3@311@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@315@01))
(assert ($Perm.isReadVar $k@316@01))
(assert ($Perm.isReadVar $k@317@01))
(assert ($Perm.isReadVar $k@318@01))
(assert ($Perm.isReadVar $k@319@01))
(assert ($Perm.isReadVar $k@320@01))
(assert ($Perm.isReadVar $k@321@01))
(assert ($Perm.isReadVar $k@322@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V3@312@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@312@01))
      (< i_V3@311@01 x_V2@33@01))
    (<= 0 i_V3@311@01))
  (and
    (<
      j_V3@312@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@105@01))
          ($Snap.combine
            ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
            ($Snap.combine
              ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
              $Snap.unit)))
        $Snap.unit) m_V0@2@01))
    (<= 0 j_V3@312@01)
    (< i_V3@311@01 x_V2@33@01)
    (<= 0 i_V3@311@01)
    (< $k@315@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@315@01))
    (< $k@316@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@316@01))
    (<
      i_V3@311@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit))) m_V0@2@01))
    (< $k@317@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@317@01))
    (< $k@318@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@318@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit)))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01)
    (< $k@319@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@319@01))
    (< $k@320@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@320@01))
    (< i_V3@311@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
    (< $k@321@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@321@01))
    (< $k@322@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@322@01))
    (<
      j_V3@312@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@4@01)
        $Snap.unit) m_V0@2@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@4@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V3@312@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@105@01))
                ($Snap.combine
                  ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                  ($Snap.combine
                    ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                    $Snap.unit)))
              $Snap.unit) m_V0@2@01))
          (<= 0 j_V3@312@01))
        (< i_V3@311@01 x_V2@33@01))
      (<= 0 i_V3@311@01)))
  (and
    (and
      (and
        (<
          j_V3@312@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@312@01))
      (< i_V3@311@01 x_V2@33@01))
    (<= 0 i_V3@311@01))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@313@01))
(assert ($Perm.isReadVar $k@314@01))
(assert ($Perm.isReadVar $k@315@01))
(assert ($Perm.isReadVar $k@316@01))
(assert ($Perm.isReadVar $k@317@01))
(assert ($Perm.isReadVar $k@318@01))
(assert ($Perm.isReadVar $k@319@01))
(assert ($Perm.isReadVar $k@320@01))
(assert ($Perm.isReadVar $k@321@01))
(assert ($Perm.isReadVar $k@322@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@311@01 Int) (j_V3@312@01 Int)) (!
  (and
    (=>
      (<= 0 i_V3@311@01)
      (and
        (<= 0 i_V3@311@01)
        (=>
          (< i_V3@311@01 x_V2@33@01)
          (and
            (< i_V3@311@01 x_V2@33@01)
            (=>
              (<= 0 j_V3@312@01)
              (and
                (<= 0 j_V3@312@01)
                (< $k@313@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@313@01))
                (< $k@314@01 $Perm.Write)
                (<= $Perm.No (- $Perm.Write $k@314@01))))
            (or (not (<= 0 j_V3@312@01)) (<= 0 j_V3@312@01))))
        (or (not (< i_V3@311@01 x_V2@33@01)) (< i_V3@311@01 x_V2@33@01))))
    (or (not (<= 0 i_V3@311@01)) (<= 0 i_V3@311@01))
    (=>
      (and
        (and
          (and
            (<
              j_V3@312@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@312@01))
          (< i_V3@311@01 x_V2@33@01))
        (<= 0 i_V3@311@01))
      (and
        (<
          j_V3@312@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@105@01))
              ($Snap.combine
                ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                ($Snap.combine
                  ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                  $Snap.unit)))
            $Snap.unit) m_V0@2@01))
        (<= 0 j_V3@312@01)
        (< i_V3@311@01 x_V2@33@01)
        (<= 0 i_V3@311@01)
        (< $k@315@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@315@01))
        (< $k@316@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@316@01))
        (<
          i_V3@311@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit))) m_V0@2@01))
        (< $k@317@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@317@01))
        (< $k@318@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@318@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01)
        (< $k@319@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@319@01))
        (< $k@320@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@320@01))
        (<
          i_V3@311@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@4@01) m_V0@2@01))
        (< $k@321@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@321@01))
        (< $k@322@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@322@01))
        (<
          j_V3@312@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@4@01)
            $Snap.unit) m_V0@2@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V3@312@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.combine
                    ($Snap.first ($Snap.first $t@105@01))
                    ($Snap.combine
                      ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                      ($Snap.combine
                        ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                        $Snap.unit)))
                  $Snap.unit) m_V0@2@01))
              (<= 0 j_V3@312@01))
            (< i_V3@311@01 x_V2@33@01))
          (<= 0 i_V3@311@01)))
      (and
        (and
          (and
            (<
              j_V3@312@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@312@01))
          (< i_V3@311@01 x_V2@33@01))
        (<= 0 i_V3@311@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01))
  :qid |prog.l450-aux|)))
(assert (forall ((i_V3@311@01 Int) (j_V3@312@01 Int)) (!
  (and
    (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@105@01))
        ($Snap.combine
          ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
          ($Snap.combine
            ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
            $Snap.unit)))
      $Snap.unit) m_V0@2@01)
    (=>
      (and
        (and
          (and
            (<
              j_V3@312@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@312@01))
          (< i_V3@311@01 x_V2@33@01))
        (<= 0 i_V3@311@01))
      (and
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01)
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01))
  :qid |prog.l450_precondition|)))
(set-option :timeout 0)
(push) ; 10
(assert (not (forall ((i_V3@311@01 Int) (j_V3@312@01 Int)) (!
  (=>
    (and
      (and
        (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@105@01))
            ($Snap.combine
              ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
              ($Snap.combine
                ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                $Snap.unit)))
          $Snap.unit) m_V0@2@01)
        (=>
          (and
            (and
              (and
                (<
                  j_V3@312@01
                  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                    ($Snap.combine
                      ($Snap.first ($Snap.first $t@105@01))
                      ($Snap.combine
                        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                        ($Snap.combine
                          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                          $Snap.unit)))
                    $Snap.unit) m_V0@2@01))
                (<= 0 j_V3@312@01))
              (< i_V3@311@01 x_V2@33@01))
            (<= 0 i_V3@311@01))
          (and
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@105@01))
                ($Snap.combine
                  ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                  ($Snap.combine
                    ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                    $Snap.unit)))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01)
            (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
              ($Snap.first $t@4@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01))))
      (and
        (and
          (and
            (<
              j_V3@312@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@105@01))
                  ($Snap.combine
                    ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
                    ($Snap.combine
                      ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
                      $Snap.unit)))
                $Snap.unit) m_V0@2@01))
            (<= 0 j_V3@312@01))
          (< i_V3@311@01 x_V2@33@01))
        (<= 0 i_V3@311@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@105@01))
          ($Snap.combine
            ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
            ($Snap.combine
              ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
              $Snap.unit)))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01)
      (*
        (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@4@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01)
        z_V0@3@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@105@01))
      ($Snap.combine
        ($SortWrappers.$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>To$Snap (as sm@246@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>))
        ($Snap.combine
          ($SortWrappers.$FVF<Intint$$$$_E_$$$>To$Snap (as sm@257@01  $FVF<Intint$$$$_E_$$$>))
          $Snap.unit)))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) m_V0@2@01 i_V3@311@01 j_V3@312@01))
  :qid |prog.l450|))))
(check-sat)
; unknown
(pop) ; 10
; 0.05s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- mult_4b5075e4_PMSparseMatrix ----------
(declare-const m_V0@323@01 ShStruct2<Ref~_Ref>)
(declare-const maxRow_V0@324@01 Int)
(declare-const maxColumn_V0@325@01 Int)
(declare-const z_V0@326@01 Int)
(declare-const m_V0@327@01 ShStruct2<Ref~_Ref>)
(declare-const maxRow_V0@328@01 Int)
(declare-const maxColumn_V0@329@01 Int)
(declare-const z_V0@330@01 Int)
(push) ; 1
(declare-const $t@331@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@332@01 $Snap)
(assert (= $t@332@01 ($Snap.combine ($Snap.first $t@332@01) ($Snap.second $t@332@01))))
(assert (= ($Snap.second $t@332@01) $Snap.unit))
; [eval] (forall i_V1: Int, j_V1: Int :: { LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) } 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0)
(declare-const i_V1@333@01 Int)
(declare-const j_V1@334@01 Int)
(push) ; 3
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0))
; [eval] 0 <= i_V1
(push) ; 4
; [then-branch: 75 | 0 <= i_V1@333@01 | live]
; [else-branch: 75 | !(0 <= i_V1@333@01) | live]
(push) ; 5
; [then-branch: 75 | 0 <= i_V1@333@01]
(assert (<= 0 i_V1@333@01))
; [eval] i_V1 < maxRow_V0
(push) ; 6
; [then-branch: 76 | i_V1@333@01 < maxRow_V0@328@01 | live]
; [else-branch: 76 | !(i_V1@333@01 < maxRow_V0@328@01) | live]
(push) ; 7
; [then-branch: 76 | i_V1@333@01 < maxRow_V0@328@01]
(assert (< i_V1@333@01 maxRow_V0@328@01))
; [eval] 0 <= j_V1
(push) ; 8
; [then-branch: 77 | 0 <= j_V1@334@01 | live]
; [else-branch: 77 | !(0 <= j_V1@334@01) | live]
(push) ; 9
; [then-branch: 77 | 0 <= j_V1@334@01]
(assert (<= 0 j_V1@334@01))
; [eval] j_V1 < maxColumn_V0
(pop) ; 9
(push) ; 9
; [else-branch: 77 | !(0 <= j_V1@334@01)]
(assert (not (<= 0 j_V1@334@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V1@334@01)) (<= 0 j_V1@334@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 76 | !(i_V1@333@01 < maxRow_V0@328@01)]
(assert (not (< i_V1@333@01 maxRow_V0@328@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (< i_V1@333@01 maxRow_V0@328@01)
  (and
    (< i_V1@333@01 maxRow_V0@328@01)
    (or (not (<= 0 j_V1@334@01)) (<= 0 j_V1@334@01)))))
; Joined path conditions
(assert (or (not (< i_V1@333@01 maxRow_V0@328@01)) (< i_V1@333@01 maxRow_V0@328@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 75 | !(0 <= i_V1@333@01)]
(assert (not (<= 0 i_V1@333@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (<= 0 i_V1@333@01)
  (and
    (<= 0 i_V1@333@01)
    (=>
      (< i_V1@333@01 maxRow_V0@328@01)
      (and
        (< i_V1@333@01 maxRow_V0@328@01)
        (or (not (<= 0 j_V1@334@01)) (<= 0 j_V1@334@01))))
    (or (not (< i_V1@333@01 maxRow_V0@328@01)) (< i_V1@333@01 maxRow_V0@328@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@333@01)) (<= 0 i_V1@333@01)))
(push) ; 4
; [then-branch: 78 | j_V1@334@01 < maxColumn_V0@329@01 && 0 <= j_V1@334@01 && i_V1@333@01 < maxRow_V0@328@01 && 0 <= i_V1@333@01 | live]
; [else-branch: 78 | !(j_V1@334@01 < maxColumn_V0@329@01 && 0 <= j_V1@334@01 && i_V1@333@01 < maxRow_V0@328@01 && 0 <= i_V1@333@01) | live]
(push) ; 5
; [then-branch: 78 | j_V1@334@01 < maxColumn_V0@329@01 && 0 <= j_V1@334@01 && i_V1@333@01 < maxRow_V0@328@01 && 0 <= i_V1@333@01]
(assert (and
  (and
    (and (< j_V1@334@01 maxColumn_V0@329@01) (<= 0 j_V1@334@01))
    (< i_V1@333@01 maxRow_V0@328@01))
  (<= 0 i_V1@333@01)))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)
(push) ; 6
(declare-const $k@335@01 $Perm)
(assert ($Perm.isReadVar $k@335@01))
(assert (< $k@335@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@335@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@335@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.first $t@332@01) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@335@01))
(assert (and
  (< $k@335@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@335@01))
  (LookupL_4b5075e4_F%precondition ($Snap.first $t@332@01) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01)))
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@336@01 $Perm)
(assert ($Perm.isReadVar $k@336@01))
(assert (< $k@336@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@336@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@336@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@336@01))
(assert (and
  (< $k@336@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@336@01))
  (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 78 | !(j_V1@334@01 < maxColumn_V0@329@01 && 0 <= j_V1@334@01 && i_V1@333@01 < maxRow_V0@328@01 && 0 <= i_V1@333@01)]
(assert (not
  (and
    (and
      (and (< j_V1@334@01 maxColumn_V0@329@01) (<= 0 j_V1@334@01))
      (< i_V1@333@01 maxRow_V0@328@01))
    (<= 0 i_V1@333@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@335@01))
(assert ($Perm.isReadVar $k@336@01))
(assert (=>
  (and
    (and
      (and (< j_V1@334@01 maxColumn_V0@329@01) (<= 0 j_V1@334@01))
      (< i_V1@333@01 maxRow_V0@328@01))
    (<= 0 i_V1@333@01))
  (and
    (< j_V1@334@01 maxColumn_V0@329@01)
    (<= 0 j_V1@334@01)
    (< i_V1@333@01 maxRow_V0@328@01)
    (<= 0 i_V1@333@01)
    (< $k@335@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@335@01))
    (LookupL_4b5075e4_F%precondition ($Snap.first $t@332@01) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01)
    (< $k@336@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@336@01))
    (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V1@334@01 maxColumn_V0@329@01) (<= 0 j_V1@334@01))
        (< i_V1@333@01 maxRow_V0@328@01))
      (<= 0 i_V1@333@01)))
  (and
    (and
      (and (< j_V1@334@01 maxColumn_V0@329@01) (<= 0 j_V1@334@01))
      (< i_V1@333@01 maxRow_V0@328@01))
    (<= 0 i_V1@333@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@335@01))
(assert ($Perm.isReadVar $k@336@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@333@01 Int) (j_V1@334@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@333@01)
      (and
        (<= 0 i_V1@333@01)
        (=>
          (< i_V1@333@01 maxRow_V0@328@01)
          (and
            (< i_V1@333@01 maxRow_V0@328@01)
            (or (not (<= 0 j_V1@334@01)) (<= 0 j_V1@334@01))))
        (or
          (not (< i_V1@333@01 maxRow_V0@328@01))
          (< i_V1@333@01 maxRow_V0@328@01))))
    (or (not (<= 0 i_V1@333@01)) (<= 0 i_V1@333@01))
    (=>
      (and
        (and
          (and (< j_V1@334@01 maxColumn_V0@329@01) (<= 0 j_V1@334@01))
          (< i_V1@333@01 maxRow_V0@328@01))
        (<= 0 i_V1@333@01))
      (and
        (< j_V1@334@01 maxColumn_V0@329@01)
        (<= 0 j_V1@334@01)
        (< i_V1@333@01 maxRow_V0@328@01)
        (<= 0 i_V1@333@01)
        (< $k@335@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@335@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first $t@332@01) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01)
        (< $k@336@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@336@01))
        (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@334@01 maxColumn_V0@329@01) (<= 0 j_V1@334@01))
            (< i_V1@333@01 maxRow_V0@328@01))
          (<= 0 i_V1@333@01)))
      (and
        (and
          (and (< j_V1@334@01 maxColumn_V0@329@01) (<= 0 j_V1@334@01))
          (< i_V1@333@01 maxRow_V0@328@01))
        (<= 0 i_V1@333@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first $t@332@01) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01))
  :qid |prog.l527-aux|)))
(assert (forall ((i_V1@333@01 Int) (j_V1@334@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@334@01 maxColumn_V0@329@01) (<= 0 j_V1@334@01))
        (< i_V1@333@01 maxRow_V0@328@01))
      (<= 0 i_V1@333@01))
    (=
      (LookupL_4b5075e4_F ($Snap.first $t@332@01) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01)
      (*
        (LookupL_4b5075e4_F $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01)
        z_V0@330@01)))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first $t@332@01) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@333@01 j_V1@334@01))
  :qid |prog.l527|)))
(pop) ; 2
(push) ; 2
; [exec]
; var z_V0_CN3: Int
(declare-const z_V0_CN3@337@01 Int)
; [exec]
; var maxColumn_V0_CN2: Int
(declare-const maxColumn_V0_CN2@338@01 Int)
; [exec]
; var maxRow_V0_CN1: Int
(declare-const maxRow_V0_CN1@339@01 Int)
; [exec]
; var m_V0_CN0: ShStruct2[Ref, Ref]
(declare-const m_V0_CN0@340@01 ShStruct2<Ref~_Ref>)
; [exec]
; inhale m_V0_CN0 ==
;   shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@341@01 $Snap)
(assert (= $t@341@01 $Snap.unit))
; [eval] m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  m_V0_CN0@340@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale maxRow_V0_CN1 == 0
(declare-const $t@342@01 $Snap)
(assert (= $t@342@01 $Snap.unit))
; [eval] maxRow_V0_CN1 == 0
(assert (= maxRow_V0_CN1@339@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale maxColumn_V0_CN2 == 0
(declare-const $t@343@01 $Snap)
(assert (= $t@343@01 $Snap.unit))
; [eval] maxColumn_V0_CN2 == 0
(assert (= maxColumn_V0_CN2@338@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale z_V0_CN3 == 0
(declare-const $t@344@01 $Snap)
(assert (= $t@344@01 $Snap.unit))
; [eval] z_V0_CN3 == 0
(assert (= z_V0_CN3@337@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; m_V0_CN0 := m_V0
; [exec]
; maxRow_V0_CN1 := maxRow_V0
; [exec]
; maxColumn_V0_CN2 := maxColumn_V0
; [exec]
; z_V0_CN3 := z_V0
; [exec]
; unfold acc(sparseMatrix_4b5075e4_F(m_V0_CN0, maxRow_V0_CN1, maxColumn_V0_CN2), write)
; [eval] !(m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  m_V0@327@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    m_V0@327@01
    (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | m_V0@327@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 79 | m_V0@327@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 79 | m_V0@327@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    m_V0@327@01
    (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (= $t@331@01 ($Snap.combine ($Snap.first $t@331@01) ($Snap.second $t@331@01))))
; [eval] (ShStructget0of2(m_V0): Ref)
(assert (not (= (ShStructget0of2<Ref> m_V0@327@01) $Ref.null)))
(assert (=
  ($Snap.second $t@331@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@331@01))
    ($Snap.second ($Snap.second $t@331@01)))))
; [eval] (ShStructget0of2(m_V0): Ref)
(assert (=
  ($Snap.second ($Snap.second $t@331@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@331@01))))))
; [eval] (ShStructget1of2(m_V0): Ref)
(assert (not (= (ShStructget1of2<Ref> m_V0@327@01) $Ref.null)))
; [eval] (ShStructget1of2(m_V0): Ref)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (sparseMatrix_4b5075e4_F%trigger $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01))
; [eval] !(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  m_V0@327@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 80 | m_V0@327@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 80 | m_V0@327@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 80 | m_V0@327@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; mult_4b5075e4_PMSparseMatrix((ShStructget1of2(m_V0_CN0): Ref).PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   maxRow_V0_CN1, maxColumn_V0_CN2, z_V0_CN3)
; [eval] (ShStructget1of2(m_V0_CN0): Ref)
(declare-const $t@345@01 $Snap)
(assert (= $t@345@01 ($Snap.combine ($Snap.first $t@345@01) ($Snap.second $t@345@01))))
(assert (= ($Snap.second $t@345@01) $Snap.unit))
; [eval] (forall i_V1: Int, j_V1: Int :: { LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) } 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0)
(declare-const i_V1@346@01 Int)
(declare-const j_V1@347@01 Int)
(push) ; 5
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0))
; [eval] 0 <= i_V1
(push) ; 6
; [then-branch: 81 | 0 <= i_V1@346@01 | live]
; [else-branch: 81 | !(0 <= i_V1@346@01) | live]
(push) ; 7
; [then-branch: 81 | 0 <= i_V1@346@01]
(assert (<= 0 i_V1@346@01))
; [eval] i_V1 < maxRow_V0
(push) ; 8
; [then-branch: 82 | i_V1@346@01 < maxRow_V0@328@01 | live]
; [else-branch: 82 | !(i_V1@346@01 < maxRow_V0@328@01) | live]
(push) ; 9
; [then-branch: 82 | i_V1@346@01 < maxRow_V0@328@01]
(assert (< i_V1@346@01 maxRow_V0@328@01))
; [eval] 0 <= j_V1
(push) ; 10
; [then-branch: 83 | 0 <= j_V1@347@01 | live]
; [else-branch: 83 | !(0 <= j_V1@347@01) | live]
(push) ; 11
; [then-branch: 83 | 0 <= j_V1@347@01]
(assert (<= 0 j_V1@347@01))
; [eval] j_V1 < maxColumn_V0
(pop) ; 11
(push) ; 11
; [else-branch: 83 | !(0 <= j_V1@347@01)]
(assert (not (<= 0 j_V1@347@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V1@347@01)) (<= 0 j_V1@347@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 82 | !(i_V1@346@01 < maxRow_V0@328@01)]
(assert (not (< i_V1@346@01 maxRow_V0@328@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (< i_V1@346@01 maxRow_V0@328@01)
  (and
    (< i_V1@346@01 maxRow_V0@328@01)
    (or (not (<= 0 j_V1@347@01)) (<= 0 j_V1@347@01)))))
; Joined path conditions
(assert (or (not (< i_V1@346@01 maxRow_V0@328@01)) (< i_V1@346@01 maxRow_V0@328@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 81 | !(0 <= i_V1@346@01)]
(assert (not (<= 0 i_V1@346@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (<= 0 i_V1@346@01)
  (and
    (<= 0 i_V1@346@01)
    (=>
      (< i_V1@346@01 maxRow_V0@328@01)
      (and
        (< i_V1@346@01 maxRow_V0@328@01)
        (or (not (<= 0 j_V1@347@01)) (<= 0 j_V1@347@01))))
    (or (not (< i_V1@346@01 maxRow_V0@328@01)) (< i_V1@346@01 maxRow_V0@328@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@346@01)) (<= 0 i_V1@346@01)))
(push) ; 6
; [then-branch: 84 | j_V1@347@01 < maxColumn_V0@329@01 && 0 <= j_V1@347@01 && i_V1@346@01 < maxRow_V0@328@01 && 0 <= i_V1@346@01 | live]
; [else-branch: 84 | !(j_V1@347@01 < maxColumn_V0@329@01 && 0 <= j_V1@347@01 && i_V1@346@01 < maxRow_V0@328@01 && 0 <= i_V1@346@01) | live]
(push) ; 7
; [then-branch: 84 | j_V1@347@01 < maxColumn_V0@329@01 && 0 <= j_V1@347@01 && i_V1@346@01 < maxRow_V0@328@01 && 0 <= i_V1@346@01]
(assert (and
  (and
    (and (< j_V1@347@01 maxColumn_V0@329@01) (<= 0 j_V1@347@01))
    (< i_V1@346@01 maxRow_V0@328@01))
  (<= 0 i_V1@346@01)))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)
(push) ; 8
(declare-const $k@348@01 $Perm)
(assert ($Perm.isReadVar $k@348@01))
(assert (< $k@348@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@348@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@348@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.first $t@345@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@348@01))
(assert (and
  (< $k@348@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@348@01))
  (LookupL_4b5075e4_F%precondition ($Snap.first $t@345@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01)))
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@349@01 $Perm)
(assert ($Perm.isReadVar $k@349@01))
(assert (< $k@349@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@349@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@349@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.second ($Snap.second ($Snap.second $t@331@01))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@349@01))
(assert (and
  (< $k@349@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@349@01))
  (LookupL_4b5075e4_F%precondition ($Snap.second ($Snap.second ($Snap.second $t@331@01))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 84 | !(j_V1@347@01 < maxColumn_V0@329@01 && 0 <= j_V1@347@01 && i_V1@346@01 < maxRow_V0@328@01 && 0 <= i_V1@346@01)]
(assert (not
  (and
    (and
      (and (< j_V1@347@01 maxColumn_V0@329@01) (<= 0 j_V1@347@01))
      (< i_V1@346@01 maxRow_V0@328@01))
    (<= 0 i_V1@346@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@348@01))
(assert ($Perm.isReadVar $k@349@01))
(assert (=>
  (and
    (and
      (and (< j_V1@347@01 maxColumn_V0@329@01) (<= 0 j_V1@347@01))
      (< i_V1@346@01 maxRow_V0@328@01))
    (<= 0 i_V1@346@01))
  (and
    (< j_V1@347@01 maxColumn_V0@329@01)
    (<= 0 j_V1@347@01)
    (< i_V1@346@01 maxRow_V0@328@01)
    (<= 0 i_V1@346@01)
    (< $k@348@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@348@01))
    (LookupL_4b5075e4_F%precondition ($Snap.first $t@345@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01)
    (< $k@349@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@349@01))
    (LookupL_4b5075e4_F%precondition ($Snap.second ($Snap.second ($Snap.second $t@331@01))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V1@347@01 maxColumn_V0@329@01) (<= 0 j_V1@347@01))
        (< i_V1@346@01 maxRow_V0@328@01))
      (<= 0 i_V1@346@01)))
  (and
    (and
      (and (< j_V1@347@01 maxColumn_V0@329@01) (<= 0 j_V1@347@01))
      (< i_V1@346@01 maxRow_V0@328@01))
    (<= 0 i_V1@346@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@348@01))
(assert ($Perm.isReadVar $k@349@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@346@01 Int) (j_V1@347@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@346@01)
      (and
        (<= 0 i_V1@346@01)
        (=>
          (< i_V1@346@01 maxRow_V0@328@01)
          (and
            (< i_V1@346@01 maxRow_V0@328@01)
            (or (not (<= 0 j_V1@347@01)) (<= 0 j_V1@347@01))))
        (or
          (not (< i_V1@346@01 maxRow_V0@328@01))
          (< i_V1@346@01 maxRow_V0@328@01))))
    (or (not (<= 0 i_V1@346@01)) (<= 0 i_V1@346@01))
    (=>
      (and
        (and
          (and (< j_V1@347@01 maxColumn_V0@329@01) (<= 0 j_V1@347@01))
          (< i_V1@346@01 maxRow_V0@328@01))
        (<= 0 i_V1@346@01))
      (and
        (< j_V1@347@01 maxColumn_V0@329@01)
        (<= 0 j_V1@347@01)
        (< i_V1@346@01 maxRow_V0@328@01)
        (<= 0 i_V1@346@01)
        (< $k@348@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@348@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first $t@345@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01)
        (< $k@349@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@349@01))
        (LookupL_4b5075e4_F%precondition ($Snap.second ($Snap.second ($Snap.second $t@331@01))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@347@01 maxColumn_V0@329@01) (<= 0 j_V1@347@01))
            (< i_V1@346@01 maxRow_V0@328@01))
          (<= 0 i_V1@346@01)))
      (and
        (and
          (and (< j_V1@347@01 maxColumn_V0@329@01) (<= 0 j_V1@347@01))
          (< i_V1@346@01 maxRow_V0@328@01))
        (<= 0 i_V1@346@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first $t@345@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01))
  :qid |prog.l527-aux|)))
(assert (forall ((i_V1@346@01 Int) (j_V1@347@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@347@01 maxColumn_V0@329@01) (<= 0 j_V1@347@01))
        (< i_V1@346@01 maxRow_V0@328@01))
      (<= 0 i_V1@346@01))
    (=
      (LookupL_4b5075e4_F ($Snap.first $t@345@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01)
      (*
        (LookupL_4b5075e4_F ($Snap.second ($Snap.second ($Snap.second $t@331@01))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01)
        z_V0@330@01)))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first $t@345@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@331@01)))) maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@346@01 j_V1@347@01))
  :qid |prog.l527|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(entry_4b5075e4_F((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   maxRow_V0_CN1, maxColumn_V0_CN2), write)
; [eval] (ShStructget0of2(m_V0_CN0): Ref)
(assert (=
  ($Snap.first ($Snap.second $t@331@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
; [eval] (ShStructget0of3(e_V0): Ref)
(assert (not
  (=
    (ShStructget0of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@331@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@331@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@331@01))))
  $Snap.unit))
; [eval] 0 <= (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(e_V0): Ref)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@331@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))
  $Snap.unit))
; [eval] (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$ < r_V0
; [eval] (ShStructget0of3(e_V0): Ref)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@331@01))))
  maxRow_V0@328@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))))))
; [eval] (ShStructget1of3(e_V0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01)))
  (ShStructget1of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget1of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget1of3(e_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(e_V0): Ref)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))))
  $Snap.unit))
; [eval] (ShStructget1of3(e_V0): Ref).Intint$$$$_E_$$$ < c_V0
; [eval] (ShStructget1of3(e_V0): Ref)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))))
  maxColumn_V0@329@01))
; [eval] (ShStructget2of3(e_V0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01)))
  (ShStructget2of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01)))
  (ShStructget2of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget2of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01)))
    $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (entry_4b5075e4_F%trigger ($Snap.first ($Snap.second $t@331@01)) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01)) maxRow_V0@328@01 maxColumn_V0@329@01))
; [exec]
; (ShStructget2of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref).Intint$$$$_E_$$$ := (ShStructget2of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref).Intint$$$$_E_$$$ *
;   z_V0_CN3
; [eval] (ShStructget2of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref)
; [eval] (ShStructget0of2(m_V0_CN0): Ref)
; [eval] (ShStructget2of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref).Intint$$$$_E_$$$ * z_V0_CN3
; [eval] (ShStructget2of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref)
; [eval] (ShStructget0of2(m_V0_CN0): Ref)
(declare-const Intint$$$$_E_$$$@350@01 Int)
(assert (=
  Intint$$$$_E_$$$@350@01
  (*
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01)))))))))
    z_V0@330@01)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01)))
  (ShStructget2of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01)))
  (ShStructget2of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(entry_4b5075e4_F((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   maxRow_V0_CN1, maxColumn_V0_CN2), write)
; [eval] (ShStructget0of2(m_V0_CN0): Ref)
; [eval] (ShStructget0of3(e_V0): Ref)
; [eval] 0 <= (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(e_V0): Ref)
; [eval] (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$ < r_V0
; [eval] (ShStructget0of3(e_V0): Ref)
; [eval] (ShStructget1of3(e_V0): Ref)
; [eval] 0 <= (ShStructget1of3(e_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(e_V0): Ref)
; [eval] (ShStructget1of3(e_V0): Ref).Intint$$$$_E_$$$ < c_V0
; [eval] (ShStructget1of3(e_V0): Ref)
; [eval] (ShStructget2of3(e_V0): Ref)
(assert (entry_4b5075e4_F%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@331@01)) maxRow_V0@328@01 maxColumn_V0@329@01))
; [exec]
; fold acc(sparseMatrix_4b5075e4_F(m_V0_CN0, maxRow_V0_CN1, maxColumn_V0_CN2), write)
; [eval] !(m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  m_V0@327@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | m_V0@327@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 85 | m_V0@327@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 85 | m_V0@327@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget0of2(m_V0): Ref)
; [eval] (ShStructget0of2(m_V0): Ref)
; [eval] (ShStructget1of2(m_V0): Ref)
; [eval] (ShStructget1of2(m_V0): Ref)
(assert (sparseMatrix_4b5075e4_F%trigger ($Snap.combine
  ($Snap.first $t@331@01)
  ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
      ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01))
; [exec]
; label returnLabel
; [eval] (forall i_V1: Int, j_V1: Int :: { LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) } 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0)
(declare-const i_V1@351@01 Int)
(declare-const j_V1@352@01 Int)
(push) ; 6
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0))
; [eval] 0 <= i_V1
(push) ; 7
; [then-branch: 86 | 0 <= i_V1@351@01 | live]
; [else-branch: 86 | !(0 <= i_V1@351@01) | live]
(push) ; 8
; [then-branch: 86 | 0 <= i_V1@351@01]
(assert (<= 0 i_V1@351@01))
; [eval] i_V1 < maxRow_V0
(push) ; 9
; [then-branch: 87 | i_V1@351@01 < maxRow_V0@328@01 | live]
; [else-branch: 87 | !(i_V1@351@01 < maxRow_V0@328@01) | live]
(push) ; 10
; [then-branch: 87 | i_V1@351@01 < maxRow_V0@328@01]
(assert (< i_V1@351@01 maxRow_V0@328@01))
; [eval] 0 <= j_V1
(push) ; 11
; [then-branch: 88 | 0 <= j_V1@352@01 | live]
; [else-branch: 88 | !(0 <= j_V1@352@01) | live]
(push) ; 12
; [then-branch: 88 | 0 <= j_V1@352@01]
(assert (<= 0 j_V1@352@01))
; [eval] j_V1 < maxColumn_V0
(pop) ; 12
(push) ; 12
; [else-branch: 88 | !(0 <= j_V1@352@01)]
(assert (not (<= 0 j_V1@352@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V1@352@01)) (<= 0 j_V1@352@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 87 | !(i_V1@351@01 < maxRow_V0@328@01)]
(assert (not (< i_V1@351@01 maxRow_V0@328@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (< i_V1@351@01 maxRow_V0@328@01)
  (and
    (< i_V1@351@01 maxRow_V0@328@01)
    (or (not (<= 0 j_V1@352@01)) (<= 0 j_V1@352@01)))))
; Joined path conditions
(assert (or (not (< i_V1@351@01 maxRow_V0@328@01)) (< i_V1@351@01 maxRow_V0@328@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 86 | !(0 <= i_V1@351@01)]
(assert (not (<= 0 i_V1@351@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (<= 0 i_V1@351@01)
  (and
    (<= 0 i_V1@351@01)
    (=>
      (< i_V1@351@01 maxRow_V0@328@01)
      (and
        (< i_V1@351@01 maxRow_V0@328@01)
        (or (not (<= 0 j_V1@352@01)) (<= 0 j_V1@352@01))))
    (or (not (< i_V1@351@01 maxRow_V0@328@01)) (< i_V1@351@01 maxRow_V0@328@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@351@01)) (<= 0 i_V1@351@01)))
(push) ; 7
; [then-branch: 89 | j_V1@352@01 < maxColumn_V0@329@01 && 0 <= j_V1@352@01 && i_V1@351@01 < maxRow_V0@328@01 && 0 <= i_V1@351@01 | live]
; [else-branch: 89 | !(j_V1@352@01 < maxColumn_V0@329@01 && 0 <= j_V1@352@01 && i_V1@351@01 < maxRow_V0@328@01 && 0 <= i_V1@351@01) | live]
(push) ; 8
; [then-branch: 89 | j_V1@352@01 < maxColumn_V0@329@01 && 0 <= j_V1@352@01 && i_V1@351@01 < maxRow_V0@328@01 && 0 <= i_V1@351@01]
(assert (and
  (and
    (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
    (< i_V1@351@01 maxRow_V0@328@01))
  (<= 0 i_V1@351@01)))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)
(push) ; 9
(declare-const $k@353@01 $Perm)
(assert ($Perm.isReadVar $k@353@01))
(assert (< $k@353@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@353@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@353@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.combine
  ($Snap.first $t@331@01)
  ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
      ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@353@01))
(assert (and
  (< $k@353@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@353@01))
  (LookupL_4b5075e4_F%precondition ($Snap.combine
    ($Snap.first $t@331@01)
    ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
        ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)))
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@354@01 $Perm)
(assert ($Perm.isReadVar $k@354@01))
(assert (< $k@354@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@354@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@354@01))
(assert (and
  (< $k@354@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@354@01))
  (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)))
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 89 | !(j_V1@352@01 < maxColumn_V0@329@01 && 0 <= j_V1@352@01 && i_V1@351@01 < maxRow_V0@328@01 && 0 <= i_V1@351@01)]
(assert (not
  (and
    (and
      (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
      (< i_V1@351@01 maxRow_V0@328@01))
    (<= 0 i_V1@351@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@353@01))
(assert ($Perm.isReadVar $k@354@01))
(assert (=>
  (and
    (and
      (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
      (< i_V1@351@01 maxRow_V0@328@01))
    (<= 0 i_V1@351@01))
  (and
    (< j_V1@352@01 maxColumn_V0@329@01)
    (<= 0 j_V1@352@01)
    (< i_V1@351@01 maxRow_V0@328@01)
    (<= 0 i_V1@351@01)
    (< $k@353@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@353@01))
    (LookupL_4b5075e4_F%precondition ($Snap.combine
      ($Snap.first $t@331@01)
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
          ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)
    (< $k@354@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@354@01))
    (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
        (< i_V1@351@01 maxRow_V0@328@01))
      (<= 0 i_V1@351@01)))
  (and
    (and
      (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
      (< i_V1@351@01 maxRow_V0@328@01))
    (<= 0 i_V1@351@01))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@353@01))
(assert ($Perm.isReadVar $k@354@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@351@01 Int) (j_V1@352@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@351@01)
      (and
        (<= 0 i_V1@351@01)
        (=>
          (< i_V1@351@01 maxRow_V0@328@01)
          (and
            (< i_V1@351@01 maxRow_V0@328@01)
            (or (not (<= 0 j_V1@352@01)) (<= 0 j_V1@352@01))))
        (or
          (not (< i_V1@351@01 maxRow_V0@328@01))
          (< i_V1@351@01 maxRow_V0@328@01))))
    (or (not (<= 0 i_V1@351@01)) (<= 0 i_V1@351@01))
    (=>
      (and
        (and
          (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
          (< i_V1@351@01 maxRow_V0@328@01))
        (<= 0 i_V1@351@01))
      (and
        (< j_V1@352@01 maxColumn_V0@329@01)
        (<= 0 j_V1@352@01)
        (< i_V1@351@01 maxRow_V0@328@01)
        (<= 0 i_V1@351@01)
        (< $k@353@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@353@01))
        (LookupL_4b5075e4_F%precondition ($Snap.combine
          ($Snap.first $t@331@01)
          ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
              ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)
        (< $k@354@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@354@01))
        (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
            (< i_V1@351@01 maxRow_V0@328@01))
          (<= 0 i_V1@351@01)))
      (and
        (and
          (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
          (< i_V1@351@01 maxRow_V0@328@01))
        (<= 0 i_V1@351@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.combine
    ($Snap.first $t@331@01)
    ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
        ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01))
  :qid |prog.l527-aux|)))
(assert (forall ((i_V1@351@01 Int) (j_V1@352@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
        (< i_V1@351@01 maxRow_V0@328@01))
      (<= 0 i_V1@351@01))
    (and
      (LookupL_4b5075e4_F%precondition ($Snap.combine
        ($Snap.first $t@331@01)
        ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
            ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)
      (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.combine
    ($Snap.first $t@331@01)
    ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
        ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01))
  :qid |prog.l527_precondition|)))
(push) ; 6
(assert (not (forall ((i_V1@351@01 Int) (j_V1@352@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and
            (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
            (< i_V1@351@01 maxRow_V0@328@01))
          (<= 0 i_V1@351@01))
        (and
          (LookupL_4b5075e4_F%precondition ($Snap.combine
            ($Snap.first $t@331@01)
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
                ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)
          (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)))
      (and
        (and
          (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
          (< i_V1@351@01 maxRow_V0@328@01))
        (<= 0 i_V1@351@01)))
    (=
      (LookupL_4b5075e4_F ($Snap.combine
        ($Snap.first $t@331@01)
        ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
            ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)
      (*
        (LookupL_4b5075e4_F $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)
        z_V0@330@01)))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.combine
    ($Snap.first $t@331@01)
    ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
        ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01))
  :qid |prog.l527|))))
(check-sat)
; unsat
(pop) ; 6
; 0.04s
; (get-info :all-statistics)
(assert (forall ((i_V1@351@01 Int) (j_V1@352@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@352@01 maxColumn_V0@329@01) (<= 0 j_V1@352@01))
        (< i_V1@351@01 maxRow_V0@328@01))
      (<= 0 i_V1@351@01))
    (=
      (LookupL_4b5075e4_F ($Snap.combine
        ($Snap.first $t@331@01)
        ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
            ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)
      (*
        (LookupL_4b5075e4_F $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01)
        z_V0@330@01)))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.combine
    ($Snap.first $t@331@01)
    ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@331@01)))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@331@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@350@01)))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
        ($Snap.first $t@345@01)))) m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@351@01 j_V1@352@01))
  :qid |prog.l527|)))
(pop) ; 5
(pop) ; 4
; [eval] !!(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
; [then-branch: 90 | m_V0@327@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 90 | m_V0@327@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 4
; [else-branch: 90 | m_V0@327@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 79 | m_V0@327@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  m_V0@327@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= $t@331@01 $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (sparseMatrix_4b5075e4_F%trigger $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01))
; [eval] !(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [then-branch: 91 | m_V0@327@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 91 | m_V0@327@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 4
; [else-branch: 91 | m_V0@327@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 4
; [eval] !!(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    m_V0@327@01
    (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | m_V0@327@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 92 | m_V0@327@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 92 | m_V0@327@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; fold acc(sparseMatrix_4b5075e4_F(m_V0_CN0, maxRow_V0_CN1, maxColumn_V0_CN2), write)
; [eval] !(m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 93 | m_V0@327@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 93 | m_V0@327@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 93 | m_V0@327@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (sparseMatrix_4b5075e4_F%trigger $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01))
; [exec]
; label returnLabel
; [eval] (forall i_V1: Int, j_V1: Int :: { LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) } 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0)
(declare-const i_V1@355@01 Int)
(declare-const j_V1@356@01 Int)
(push) ; 6
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0))
; [eval] 0 <= i_V1
(push) ; 7
; [then-branch: 94 | 0 <= i_V1@355@01 | live]
; [else-branch: 94 | !(0 <= i_V1@355@01) | live]
(push) ; 8
; [then-branch: 94 | 0 <= i_V1@355@01]
(assert (<= 0 i_V1@355@01))
; [eval] i_V1 < maxRow_V0
(push) ; 9
; [then-branch: 95 | i_V1@355@01 < maxRow_V0@328@01 | live]
; [else-branch: 95 | !(i_V1@355@01 < maxRow_V0@328@01) | live]
(push) ; 10
; [then-branch: 95 | i_V1@355@01 < maxRow_V0@328@01]
(assert (< i_V1@355@01 maxRow_V0@328@01))
; [eval] 0 <= j_V1
(push) ; 11
; [then-branch: 96 | 0 <= j_V1@356@01 | live]
; [else-branch: 96 | !(0 <= j_V1@356@01) | live]
(push) ; 12
; [then-branch: 96 | 0 <= j_V1@356@01]
(assert (<= 0 j_V1@356@01))
; [eval] j_V1 < maxColumn_V0
(pop) ; 12
(push) ; 12
; [else-branch: 96 | !(0 <= j_V1@356@01)]
(assert (not (<= 0 j_V1@356@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V1@356@01)) (<= 0 j_V1@356@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 95 | !(i_V1@355@01 < maxRow_V0@328@01)]
(assert (not (< i_V1@355@01 maxRow_V0@328@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (< i_V1@355@01 maxRow_V0@328@01)
  (and
    (< i_V1@355@01 maxRow_V0@328@01)
    (or (not (<= 0 j_V1@356@01)) (<= 0 j_V1@356@01)))))
; Joined path conditions
(assert (or (not (< i_V1@355@01 maxRow_V0@328@01)) (< i_V1@355@01 maxRow_V0@328@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 94 | !(0 <= i_V1@355@01)]
(assert (not (<= 0 i_V1@355@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (<= 0 i_V1@355@01)
  (and
    (<= 0 i_V1@355@01)
    (=>
      (< i_V1@355@01 maxRow_V0@328@01)
      (and
        (< i_V1@355@01 maxRow_V0@328@01)
        (or (not (<= 0 j_V1@356@01)) (<= 0 j_V1@356@01))))
    (or (not (< i_V1@355@01 maxRow_V0@328@01)) (< i_V1@355@01 maxRow_V0@328@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@355@01)) (<= 0 i_V1@355@01)))
(push) ; 7
; [then-branch: 97 | j_V1@356@01 < maxColumn_V0@329@01 && 0 <= j_V1@356@01 && i_V1@355@01 < maxRow_V0@328@01 && 0 <= i_V1@355@01 | live]
; [else-branch: 97 | !(j_V1@356@01 < maxColumn_V0@329@01 && 0 <= j_V1@356@01 && i_V1@355@01 < maxRow_V0@328@01 && 0 <= i_V1@355@01) | live]
(push) ; 8
; [then-branch: 97 | j_V1@356@01 < maxColumn_V0@329@01 && 0 <= j_V1@356@01 && i_V1@355@01 < maxRow_V0@328@01 && 0 <= i_V1@355@01]
(assert (and
  (and
    (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
    (< i_V1@355@01 maxRow_V0@328@01))
  (<= 0 i_V1@355@01)))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)
(push) ; 9
(declare-const $k@357@01 $Perm)
(assert ($Perm.isReadVar $k@357@01))
(assert (< $k@357@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@357@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@357@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@357@01))
(assert (and
  (< $k@357@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@357@01))
  (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)))
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)) * z_V0
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, i_V1, j_V1)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@358@01 $Perm)
(assert ($Perm.isReadVar $k@358@01))
(assert (< $k@358@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@358@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@358@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@358@01))
(assert (and
  (< $k@358@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@358@01))
  (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)))
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 97 | !(j_V1@356@01 < maxColumn_V0@329@01 && 0 <= j_V1@356@01 && i_V1@355@01 < maxRow_V0@328@01 && 0 <= i_V1@355@01)]
(assert (not
  (and
    (and
      (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
      (< i_V1@355@01 maxRow_V0@328@01))
    (<= 0 i_V1@355@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@357@01))
(assert ($Perm.isReadVar $k@358@01))
(assert (=>
  (and
    (and
      (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
      (< i_V1@355@01 maxRow_V0@328@01))
    (<= 0 i_V1@355@01))
  (and
    (< j_V1@356@01 maxColumn_V0@329@01)
    (<= 0 j_V1@356@01)
    (< i_V1@355@01 maxRow_V0@328@01)
    (<= 0 i_V1@355@01)
    (< $k@357@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@357@01))
    (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)
    (< $k@358@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@358@01))
    (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
        (< i_V1@355@01 maxRow_V0@328@01))
      (<= 0 i_V1@355@01)))
  (and
    (and
      (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
      (< i_V1@355@01 maxRow_V0@328@01))
    (<= 0 i_V1@355@01))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@357@01))
(assert ($Perm.isReadVar $k@358@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@355@01 Int) (j_V1@356@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@355@01)
      (and
        (<= 0 i_V1@355@01)
        (=>
          (< i_V1@355@01 maxRow_V0@328@01)
          (and
            (< i_V1@355@01 maxRow_V0@328@01)
            (or (not (<= 0 j_V1@356@01)) (<= 0 j_V1@356@01))))
        (or
          (not (< i_V1@355@01 maxRow_V0@328@01))
          (< i_V1@355@01 maxRow_V0@328@01))))
    (or (not (<= 0 i_V1@355@01)) (<= 0 i_V1@355@01))
    (=>
      (and
        (and
          (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
          (< i_V1@355@01 maxRow_V0@328@01))
        (<= 0 i_V1@355@01))
      (and
        (< j_V1@356@01 maxColumn_V0@329@01)
        (<= 0 j_V1@356@01)
        (< i_V1@355@01 maxRow_V0@328@01)
        (<= 0 i_V1@355@01)
        (< $k@357@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@357@01))
        (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)
        (< $k@358@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@358@01))
        (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
            (< i_V1@355@01 maxRow_V0@328@01))
          (<= 0 i_V1@355@01)))
      (and
        (and
          (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
          (< i_V1@355@01 maxRow_V0@328@01))
        (<= 0 i_V1@355@01))))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01))
  :qid |prog.l527-aux|)))
(assert (forall ((i_V1@355@01 Int) (j_V1@356@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
        (< i_V1@355@01 maxRow_V0@328@01))
      (<= 0 i_V1@355@01))
    (and
      (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)
      (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01))
  :qid |prog.l527_precondition|)))
(push) ; 6
(assert (not (forall ((i_V1@355@01 Int) (j_V1@356@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and
            (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
            (< i_V1@355@01 maxRow_V0@328@01))
          (<= 0 i_V1@355@01))
        (and
          (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)
          (LookupL_4b5075e4_F%precondition $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)))
      (and
        (and
          (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
          (< i_V1@355@01 maxRow_V0@328@01))
        (<= 0 i_V1@355@01)))
    (=
      (LookupL_4b5075e4_F $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)
      (*
        (LookupL_4b5075e4_F $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)
        z_V0@330@01)))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01))
  :qid |prog.l527|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@355@01 Int) (j_V1@356@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@356@01 maxColumn_V0@329@01) (<= 0 j_V1@356@01))
        (< i_V1@355@01 maxRow_V0@328@01))
      (<= 0 i_V1@355@01))
    (=
      (LookupL_4b5075e4_F $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)
      (*
        (LookupL_4b5075e4_F $t@331@01 m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01)
        z_V0@330@01)))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit m_V0@327@01 maxRow_V0@328@01 maxColumn_V0@329@01 i_V1@355@01 j_V1@356@01))
  :qid |prog.l527|)))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- toSparse_4b5075e4_PMDenseMatrix ----------
(declare-const dm_V0@359@01 ShStruct1<Ref>)
(declare-const sm_V0@360@01 ShStruct2<Ref~_Ref>)
(declare-const dm_V0@361@01 ShStruct1<Ref>)
(declare-const sm_V0@362@01 ShStruct2<Ref~_Ref>)
(push) ; 1
(declare-const $t@363@01 $Snap)
(assert (= $t@363@01 ($Snap.combine ($Snap.first $t@363@01) ($Snap.second $t@363@01))))
(assert (= ($Snap.second $t@363@01) $Snap.unit))
; [eval] !(lenX_4b5075e4_PMDenseMatrix(dm_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0)
(push) ; 2
(declare-const $k@364@01 $Perm)
(assert ($Perm.isReadVar $k@364@01))
(assert (< $k@364@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@364@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@364@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@363@01) dm_V0@361@01))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@364@01))
(assert (and
  (< $k@364@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@364@01))
  (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@363@01) dm_V0@361@01)))
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@363@01) dm_V0@361@01) 0)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@365@01 $Snap)
(assert (= $t@365@01 ($Snap.combine ($Snap.first $t@365@01) ($Snap.second $t@365@01))))
(assert (=
  ($Snap.second $t@365@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@365@01))
    ($Snap.second ($Snap.second $t@365@01)))))
(assert (= ($Snap.first ($Snap.second $t@365@01)) $Snap.unit))
; [eval] !(lenX_4b5075e4_PMDenseMatrix(dm_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0)
(push) ; 3
(declare-const $k@366@01 $Perm)
(assert ($Perm.isReadVar $k@366@01))
(assert (< $k@366@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@366@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@366@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@365@01) dm_V0@361@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@366@01))
(assert (and
  (< $k@366@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@366@01))
  (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@365@01) dm_V0@361@01)))
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01) 0)))
(assert (=
  ($Snap.second ($Snap.second $t@365@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@365@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@365@01))))))
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@367@01 $Perm)
(assert ($Perm.isReadVar $k@367@01))
(assert (< $k@367@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@367@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@367@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@367@01))
(assert (and
  (< $k@367@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@367@01))))
; [eval] lenY_4b5075e4_PMDenseMatrix(dm_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@368@01 $Perm)
(assert ($Perm.isReadVar $k@368@01))
(assert (< $k@368@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@368@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@368@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@369@01 $Perm)
(assert ($Perm.isReadVar $k@369@01))
(assert (< $k@369@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@369@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@369@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@369@01))
(assert (and
  (< $k@369@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@369@01))))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@365@01)
  $Snap.unit) dm_V0@361@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@368@01))
(assert ($Perm.isReadVar $k@369@01))
(assert (and
  (< $k@368@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@368@01))
  (< $k@369@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@369@01))
  (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@365@01)
    $Snap.unit) dm_V0@361@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@365@01))) $Snap.unit))
; [eval] (forall i_V1: Int, j_V1: Int :: { lookup_4b5075e4_PMDenseMatrix(dm_V0, i_V1, j_V1) } { LookupL_4b5075e4_F(sm_V0, lenX_4b5075e4_PMDenseMatrix(dm_V0), lenY_4b5075e4_PMDenseMatrix(dm_V0), i_V1, j_V1) } 0 <= i_V1 && (i_V1 < lenX_4b5075e4_PMDenseMatrix(dm_V0) && (0 <= j_V1 && j_V1 < lenY_4b5075e4_PMDenseMatrix(dm_V0))) ==> lookup_4b5075e4_PMDenseMatrix(dm_V0, i_V1, j_V1) == LookupL_4b5075e4_F(sm_V0, lenX_4b5075e4_PMDenseMatrix(dm_V0), lenY_4b5075e4_PMDenseMatrix(dm_V0), i_V1, j_V1))
(declare-const i_V1@370@01 Int)
(declare-const j_V1@371@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i_V1 && (i_V1 < lenX_4b5075e4_PMDenseMatrix(dm_V0) && (0 <= j_V1 && j_V1 < lenY_4b5075e4_PMDenseMatrix(dm_V0))) ==> lookup_4b5075e4_PMDenseMatrix(dm_V0, i_V1, j_V1) == LookupL_4b5075e4_F(sm_V0, lenX_4b5075e4_PMDenseMatrix(dm_V0), lenY_4b5075e4_PMDenseMatrix(dm_V0), i_V1, j_V1)
; [eval] 0 <= i_V1 && (i_V1 < lenX_4b5075e4_PMDenseMatrix(dm_V0) && (0 <= j_V1 && j_V1 < lenY_4b5075e4_PMDenseMatrix(dm_V0)))
; [eval] 0 <= i_V1
(push) ; 4
; [then-branch: 98 | 0 <= i_V1@370@01 | live]
; [else-branch: 98 | !(0 <= i_V1@370@01) | live]
(push) ; 5
; [then-branch: 98 | 0 <= i_V1@370@01]
(assert (<= 0 i_V1@370@01))
; [eval] i_V1 < lenX_4b5075e4_PMDenseMatrix(dm_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0)
(push) ; 6
(declare-const $k@372@01 $Perm)
(assert ($Perm.isReadVar $k@372@01))
(assert (< $k@372@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@372@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@372@01))
(assert (and
  (< $k@372@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@372@01))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 99 | i_V1@370@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@365@01), dm_V0@361@01) | live]
; [else-branch: 99 | !(i_V1@370@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@365@01), dm_V0@361@01)) | live]
(push) ; 7
; [then-branch: 99 | i_V1@370@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@365@01), dm_V0@361@01)]
(assert (<
  i_V1@370@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
; [eval] 0 <= j_V1
(push) ; 8
; [then-branch: 100 | 0 <= j_V1@371@01 | live]
; [else-branch: 100 | !(0 <= j_V1@371@01) | live]
(push) ; 9
; [then-branch: 100 | 0 <= j_V1@371@01]
(assert (<= 0 j_V1@371@01))
; [eval] j_V1 < lenY_4b5075e4_PMDenseMatrix(dm_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(dm_V0)
(push) ; 10
(declare-const $k@373@01 $Perm)
(assert ($Perm.isReadVar $k@373@01))
(assert (< $k@373@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@373@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@373@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@374@01 $Perm)
(assert ($Perm.isReadVar $k@374@01))
(assert (< $k@374@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@374@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@374@01))
(assert (and
  (< $k@374@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@374@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@373@01))
(assert ($Perm.isReadVar $k@374@01))
(assert (and
  (< $k@373@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@373@01))
  (< $k@374@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@374@01))))
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 100 | !(0 <= j_V1@371@01)]
(assert (not (<= 0 j_V1@371@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@373@01))
(assert ($Perm.isReadVar $k@374@01))
(assert (=>
  (<= 0 j_V1@371@01)
  (and
    (<= 0 j_V1@371@01)
    (< $k@373@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@373@01))
    (< $k@374@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@374@01)))))
; Joined path conditions
(assert (or (not (<= 0 j_V1@371@01)) (<= 0 j_V1@371@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 99 | !(i_V1@370@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@365@01), dm_V0@361@01))]
(assert (not
  (<
    i_V1@370@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@373@01))
(assert ($Perm.isReadVar $k@374@01))
(assert (=>
  (<
    i_V1@370@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))
  (and
    (<
      i_V1@370@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))
    (=>
      (<= 0 j_V1@371@01)
      (and
        (<= 0 j_V1@371@01)
        (< $k@373@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@373@01))
        (< $k@374@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@374@01))))
    (or (not (<= 0 j_V1@371@01)) (<= 0 j_V1@371@01)))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V1@370@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
  (<
    i_V1@370@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 98 | !(0 <= i_V1@370@01)]
(assert (not (<= 0 i_V1@370@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@372@01))
(assert ($Perm.isReadVar $k@373@01))
(assert ($Perm.isReadVar $k@374@01))
(assert (=>
  (<= 0 i_V1@370@01)
  (and
    (<= 0 i_V1@370@01)
    (< $k@372@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@372@01))
    (=>
      (<
        i_V1@370@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))
      (and
        (<
          i_V1@370@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))
        (=>
          (<= 0 j_V1@371@01)
          (and
            (<= 0 j_V1@371@01)
            (< $k@373@01 (/ (to_real 1) (to_real 2)))
            (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@373@01))
            (< $k@374@01 (/ (to_real 1) (to_real 2)))
            (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@374@01))))
        (or (not (<= 0 j_V1@371@01)) (<= 0 j_V1@371@01))))
    (or
      (not
        (<
          i_V1@370@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
      (<
        i_V1@370@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@370@01)) (<= 0 i_V1@370@01)))
(push) ; 4
; [then-branch: 101 | j_V1@371@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@365@01), _), dm_V0@361@01) && 0 <= j_V1@371@01 && i_V1@370@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@365@01), dm_V0@361@01) && 0 <= i_V1@370@01 | live]
; [else-branch: 101 | !(j_V1@371@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@365@01), _), dm_V0@361@01) && 0 <= j_V1@371@01 && i_V1@370@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@365@01), dm_V0@361@01) && 0 <= i_V1@370@01) | live]
(push) ; 5
; [then-branch: 101 | j_V1@371@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@365@01), _), dm_V0@361@01) && 0 <= j_V1@371@01 && i_V1@370@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@365@01), dm_V0@361@01) && 0 <= i_V1@370@01]
(assert (and
  (and
    (and
      (<
        j_V1@371@01
        (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@365@01)
          $Snap.unit) dm_V0@361@01))
      (<= 0 j_V1@371@01))
    (<
      i_V1@370@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
  (<= 0 i_V1@370@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0, i_V1, j_V1) == LookupL_4b5075e4_F(sm_V0, lenX_4b5075e4_PMDenseMatrix(dm_V0), lenY_4b5075e4_PMDenseMatrix(dm_V0), i_V1, j_V1)
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0, i_V1, j_V1)
(push) ; 6
(declare-const $k@375@01 $Perm)
(assert ($Perm.isReadVar $k@375@01))
(assert (< $k@375@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@375@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@375@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@376@01 $Perm)
(assert ($Perm.isReadVar $k@376@01))
(assert (< $k@376@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@376@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@376@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@376@01))
(assert (and
  (< $k@376@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@376@01))))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@377@01 $Perm)
(assert ($Perm.isReadVar $k@377@01))
(assert (< $k@377@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@377@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@377@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@378@01 $Perm)
(assert ($Perm.isReadVar $k@378@01))
(assert (< $k@378@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@378@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@378@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@378@01))
(assert (and
  (< $k@378@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@378@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@377@01))
(assert ($Perm.isReadVar $k@378@01))
(assert (and
  (< $k@377@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@377@01))
  (< $k@378@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@378@01))))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@365@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V1@370@01 j_V1@371@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@375@01))
(assert ($Perm.isReadVar $k@376@01))
(assert ($Perm.isReadVar $k@377@01))
(assert ($Perm.isReadVar $k@378@01))
(assert (and
  (< $k@375@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@375@01))
  (< $k@376@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@376@01))
  (< $k@377@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@377@01))
  (< $k@378@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@378@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@365@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V1@370@01 j_V1@371@01)))
; [eval] LookupL_4b5075e4_F(sm_V0, lenX_4b5075e4_PMDenseMatrix(dm_V0), lenY_4b5075e4_PMDenseMatrix(dm_V0), i_V1, j_V1)
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@379@01 $Perm)
(assert ($Perm.isReadVar $k@379@01))
(assert (< $k@379@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@379@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@379@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@379@01))
(assert (and
  (< $k@379@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@379@01))))
; [eval] lenY_4b5075e4_PMDenseMatrix(dm_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@380@01 $Perm)
(assert ($Perm.isReadVar $k@380@01))
(assert (< $k@380@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@380@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@380@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@381@01 $Perm)
(assert ($Perm.isReadVar $k@381@01))
(assert (< $k@381@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@381@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@381@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@381@01))
(assert (and
  (< $k@381@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@381@01))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@380@01))
(assert ($Perm.isReadVar $k@381@01))
(assert (and
  (< $k@380@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@380@01))
  (< $k@381@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@381@01))))
(set-option :timeout 0)
(push) ; 6
(declare-const $k@382@01 $Perm)
(assert ($Perm.isReadVar $k@382@01))
(assert (< $k@382@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@382@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@382@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second ($Snap.second $t@365@01))) sm_V0@362@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01) (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
  ($Snap.first $t@365@01)
  $Snap.unit) dm_V0@361@01) i_V1@370@01 j_V1@371@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@382@01))
(assert (and
  (< $k@382@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@382@01))
  (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second ($Snap.second $t@365@01))) sm_V0@362@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01) (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first $t@365@01)
    $Snap.unit) dm_V0@361@01) i_V1@370@01 j_V1@371@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 101 | !(j_V1@371@01 < lenY_4b5075e4_PMDenseMatrix((First:($t@365@01), _), dm_V0@361@01) && 0 <= j_V1@371@01 && i_V1@370@01 < lenX_4b5075e4_PMDenseMatrix(First:($t@365@01), dm_V0@361@01) && 0 <= i_V1@370@01)]
(assert (not
  (and
    (and
      (and
        (<
          j_V1@371@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@365@01)
            $Snap.unit) dm_V0@361@01))
        (<= 0 j_V1@371@01))
      (<
        i_V1@370@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
    (<= 0 i_V1@370@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@375@01))
(assert ($Perm.isReadVar $k@376@01))
(assert ($Perm.isReadVar $k@377@01))
(assert ($Perm.isReadVar $k@378@01))
(assert ($Perm.isReadVar $k@379@01))
(assert ($Perm.isReadVar $k@380@01))
(assert ($Perm.isReadVar $k@381@01))
(assert ($Perm.isReadVar $k@382@01))
(assert (=>
  (and
    (and
      (and
        (<
          j_V1@371@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@365@01)
            $Snap.unit) dm_V0@361@01))
        (<= 0 j_V1@371@01))
      (<
        i_V1@370@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
    (<= 0 i_V1@370@01))
  (and
    (<
      j_V1@371@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@365@01)
        $Snap.unit) dm_V0@361@01))
    (<= 0 j_V1@371@01)
    (<
      i_V1@370@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))
    (<= 0 i_V1@370@01)
    (< $k@375@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@375@01))
    (< $k@376@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@376@01))
    (< $k@377@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@377@01))
    (< $k@378@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@378@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@365@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V1@370@01 j_V1@371@01)
    (< $k@379@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@379@01))
    (< $k@380@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@380@01))
    (< $k@381@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@381@01))
    (< $k@382@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@382@01))
    (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second ($Snap.second $t@365@01))) sm_V0@362@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01) (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@365@01)
      $Snap.unit) dm_V0@361@01) i_V1@370@01 j_V1@371@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (<
            j_V1@371@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@365@01)
              $Snap.unit) dm_V0@361@01))
          (<= 0 j_V1@371@01))
        (<
          i_V1@370@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
      (<= 0 i_V1@370@01)))
  (and
    (and
      (and
        (<
          j_V1@371@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@365@01)
            $Snap.unit) dm_V0@361@01))
        (<= 0 j_V1@371@01))
      (<
        i_V1@370@01
        (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
    (<= 0 i_V1@370@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@372@01))
(assert ($Perm.isReadVar $k@373@01))
(assert ($Perm.isReadVar $k@374@01))
(assert ($Perm.isReadVar $k@375@01))
(assert ($Perm.isReadVar $k@376@01))
(assert ($Perm.isReadVar $k@377@01))
(assert ($Perm.isReadVar $k@378@01))
(assert ($Perm.isReadVar $k@379@01))
(assert ($Perm.isReadVar $k@380@01))
(assert ($Perm.isReadVar $k@381@01))
(assert ($Perm.isReadVar $k@382@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@370@01 Int) (j_V1@371@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@370@01)
      (and
        (<= 0 i_V1@370@01)
        (< $k@372@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@372@01))
        (=>
          (<
            i_V1@370@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))
          (and
            (<
              i_V1@370@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))
            (=>
              (<= 0 j_V1@371@01)
              (and
                (<= 0 j_V1@371@01)
                (< $k@373@01 (/ (to_real 1) (to_real 2)))
                (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@373@01))
                (< $k@374@01 (/ (to_real 1) (to_real 2)))
                (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@374@01))))
            (or (not (<= 0 j_V1@371@01)) (<= 0 j_V1@371@01))))
        (or
          (not
            (<
              i_V1@370@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
          (<
            i_V1@370@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))))
    (or (not (<= 0 i_V1@370@01)) (<= 0 i_V1@370@01))
    (=>
      (and
        (and
          (and
            (<
              j_V1@371@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@365@01)
                $Snap.unit) dm_V0@361@01))
            (<= 0 j_V1@371@01))
          (<
            i_V1@370@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
        (<= 0 i_V1@370@01))
      (and
        (<
          j_V1@371@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@365@01)
            $Snap.unit) dm_V0@361@01))
        (<= 0 j_V1@371@01)
        (<
          i_V1@370@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))
        (<= 0 i_V1@370@01)
        (< $k@375@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@375@01))
        (< $k@376@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@376@01))
        (< $k@377@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@377@01))
        (< $k@378@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@378@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@365@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V1@370@01 j_V1@371@01)
        (< $k@379@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@379@01))
        (< $k@380@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@380@01))
        (< $k@381@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@381@01))
        (< $k@382@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@382@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second ($Snap.second $t@365@01))) sm_V0@362@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01) (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@365@01)
          $Snap.unit) dm_V0@361@01) i_V1@370@01 j_V1@371@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V1@371@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@365@01)
                  $Snap.unit) dm_V0@361@01))
              (<= 0 j_V1@371@01))
            (<
              i_V1@370@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
          (<= 0 i_V1@370@01)))
      (and
        (and
          (and
            (<
              j_V1@371@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@365@01)
                $Snap.unit) dm_V0@361@01))
            (<= 0 j_V1@371@01))
          (<
            i_V1@370@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
        (<= 0 i_V1@370@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@365@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V1@370@01 j_V1@371@01))
  :qid |prog.l608-aux|)))
(assert (forall ((i_V1@370@01 Int) (j_V1@371@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@370@01)
      (and
        (<= 0 i_V1@370@01)
        (< $k@372@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@372@01))
        (=>
          (<
            i_V1@370@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))
          (and
            (<
              i_V1@370@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))
            (=>
              (<= 0 j_V1@371@01)
              (and
                (<= 0 j_V1@371@01)
                (< $k@373@01 (/ (to_real 1) (to_real 2)))
                (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@373@01))
                (< $k@374@01 (/ (to_real 1) (to_real 2)))
                (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@374@01))))
            (or (not (<= 0 j_V1@371@01)) (<= 0 j_V1@371@01))))
        (or
          (not
            (<
              i_V1@370@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
          (<
            i_V1@370@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))))
    (or (not (<= 0 i_V1@370@01)) (<= 0 i_V1@370@01))
    (=>
      (and
        (and
          (and
            (<
              j_V1@371@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@365@01)
                $Snap.unit) dm_V0@361@01))
            (<= 0 j_V1@371@01))
          (<
            i_V1@370@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
        (<= 0 i_V1@370@01))
      (and
        (<
          j_V1@371@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@365@01)
            $Snap.unit) dm_V0@361@01))
        (<= 0 j_V1@371@01)
        (<
          i_V1@370@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01))
        (<= 0 i_V1@370@01)
        (< $k@375@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@375@01))
        (< $k@376@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@376@01))
        (< $k@377@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@377@01))
        (< $k@378@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@378@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@365@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V1@370@01 j_V1@371@01)
        (< $k@379@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@379@01))
        (< $k@380@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@380@01))
        (< $k@381@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@381@01))
        (< $k@382@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@382@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second ($Snap.second $t@365@01))) sm_V0@362@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01) (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
          ($Snap.first $t@365@01)
          $Snap.unit) dm_V0@361@01) i_V1@370@01 j_V1@371@01)))
    (or
      (not
        (and
          (and
            (and
              (<
                j_V1@371@01
                (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                  ($Snap.first $t@365@01)
                  $Snap.unit) dm_V0@361@01))
              (<= 0 j_V1@371@01))
            (<
              i_V1@370@01
              (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
          (<= 0 i_V1@370@01)))
      (and
        (and
          (and
            (<
              j_V1@371@01
              (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
                ($Snap.first $t@365@01)
                $Snap.unit) dm_V0@361@01))
            (<= 0 j_V1@371@01))
          (<
            i_V1@370@01
            (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
        (<= 0 i_V1@370@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second ($Snap.second $t@365@01))) sm_V0@362@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01) (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first $t@365@01)
    $Snap.unit) dm_V0@361@01) i_V1@370@01 j_V1@371@01))
  :qid |prog.l608-aux|)))
(assert (forall ((i_V1@370@01 Int) (j_V1@371@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V1@371@01
            (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
              ($Snap.first $t@365@01)
              $Snap.unit) dm_V0@361@01))
          (<= 0 j_V1@371@01))
        (<
          i_V1@370@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01)))
      (<= 0 i_V1@370@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@365@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V1@370@01 j_V1@371@01)
      (LookupL_4b5075e4_F ($Snap.first ($Snap.second ($Snap.second $t@365@01))) sm_V0@362@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01) (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@365@01)
        $Snap.unit) dm_V0@361@01) i_V1@370@01 j_V1@371@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@365@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V1@370@01 j_V1@371@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second ($Snap.second $t@365@01))) sm_V0@362@01 (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@365@01) dm_V0@361@01) (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
    ($Snap.first $t@365@01)
    $Snap.unit) dm_V0@361@01) i_V1@370@01 j_V1@371@01))
  :qid |prog.l608|)))
(pop) ; 2
(push) ; 2
; [exec]
; var sm_V0_CN1: ShStruct2[Ref, Ref]
(declare-const sm_V0_CN1@383@01 ShStruct2<Ref~_Ref>)
; [exec]
; var dm_V0_CN0: ShStruct1[Ref]
(declare-const dm_V0_CN0@384@01 ShStruct1<Ref>)
; [exec]
; var lenY_V2: Int
(declare-const lenY_V2@385@01 Int)
; [exec]
; var lenX_V2: Int
(declare-const lenX_V2@386@01 Int)
; [exec]
; var x_V3: Int
(declare-const x_V3@387@01 Int)
; [exec]
; inhale sm_V0 ==
;   shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@388@01 $Snap)
(assert (= $t@388@01 $Snap.unit))
; [eval] sm_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  sm_V0@362@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale dm_V0_CN0 ==
;   shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$()
(declare-const $t@389@01 $Snap)
(assert (= $t@389@01 $Snap.unit))
; [eval] dm_V0_CN0 == shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(assert (shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  dm_V0_CN0@384@01
  (shStructDefault_$valuesA_SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale sm_V0_CN1 ==
;   shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@390@01 $Snap)
(assert (= $t@390@01 $Snap.unit))
; [eval] sm_V0_CN1 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  sm_V0_CN1@383@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; dm_V0_CN0 := dm_V0
; [exec]
; sm_V0_CN1 := shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const sm_V0_CN1@391@01 ShStruct2<Ref~_Ref>)
(assert (=
  sm_V0_CN1@391@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; [exec]
; inhale lenX_V2 == 0
(declare-const $t@392@01 $Snap)
(assert (= $t@392@01 $Snap.unit))
; [eval] lenX_V2 == 0
(assert (= lenX_V2@386@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale lenY_V2 == 0
(declare-const $t@393@01 $Snap)
(assert (= $t@393@01 $Snap.unit))
; [eval] lenY_V2 == 0
(assert (= lenY_V2@385@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; lenX_V2 := lenX_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@394@01 $Perm)
(assert ($Perm.isReadVar $k@394@01))
(assert (< $k@394@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@394@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@394@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@394@01))
(assert (and
  (< $k@394@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@394@01))))
(declare-const lenX_V2@395@01 Int)
(assert (=
  lenX_V2@395@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@363@01) dm_V0@361@01)))
; [exec]
; lenY_V2 := lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@396@01 $Perm)
(assert ($Perm.isReadVar $k@396@01))
(assert (< $k@396@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@396@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@396@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@397@01 $Perm)
(assert ($Perm.isReadVar $k@397@01))
(assert (< $k@397@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@397@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@397@01))
(assert (and
  (< $k@397@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@397@01))))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@363@01)
  $Snap.unit) dm_V0@361@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@396@01))
(assert ($Perm.isReadVar $k@397@01))
(assert (and
  (< $k@396@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@396@01))
  (< $k@397@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@397@01))
  (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@363@01)
    $Snap.unit) dm_V0@361@01)))
(declare-const lenY_V2@398@01 Int)
(assert (=
  lenY_V2@398@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@363@01) $Snap.unit) dm_V0@361@01)))
; [exec]
; fold acc(sparseMatrix_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2), write)
; [eval] !(m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [then-branch: 102 | sm_V0_CN1@391@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 102 | sm_V0_CN1@391@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 3
; [else-branch: 102 | sm_V0_CN1@391@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (sparseMatrix_4b5075e4_F%trigger $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01))
; [exec]
; inhale x_V3 == 0
(declare-const $t@399@01 $Snap)
(assert (= $t@399@01 $Snap.unit))
; [eval] x_V3 == 0
(assert (= x_V3@387@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; x_V3 := 0
(declare-const y_V5@400@01 Int)
(declare-const N25@401@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const e_V7@402@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const N26@403@01 ShStruct2<Ref~_Ref>)
(declare-const sm_V0_CN1@404@01 ShStruct2<Ref~_Ref>)
(declare-const x_V3@405@01 Int)
(set-option :timeout 0)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@406@01 $Snap)
(assert (= $t@406@01 ($Snap.combine ($Snap.first $t@406@01) ($Snap.second $t@406@01))))
(assert (=
  ($Snap.second $t@406@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@406@01))
    ($Snap.second ($Snap.second $t@406@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@406@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@406@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@406@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@406@01))) $Snap.unit))
; [eval] 0 <= x_V3
(assert (<= 0 x_V3@405@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@406@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@406@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@406@01))))
  $Snap.unit))
; [eval] x_V3 <= lenX_V2
(assert (<= x_V3@405@01 lenX_V2@395@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01)))))
  $Snap.unit))
; [eval] lenX_V2 == lenX_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(push) ; 5
(declare-const $k@407@01 $Perm)
(assert ($Perm.isReadVar $k@407@01))
(assert (< $k@407@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@407@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@407@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@406@01) dm_V0@361@01))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@407@01))
(assert (and
  (< $k@407@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@407@01))
  (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@406@01) dm_V0@361@01)))
(assert (=
  lenX_V2@395@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01))))))
  $Snap.unit))
; [eval] lenY_V2 == lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@408@01 $Perm)
(assert ($Perm.isReadVar $k@408@01))
(assert (< $k@408@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@408@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@408@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@409@01 $Perm)
(assert ($Perm.isReadVar $k@409@01))
(assert (< $k@409@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@409@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@409@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@409@01))
(assert (and
  (< $k@409@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@409@01))))
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01) 0)))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@406@01)
  $Snap.unit) dm_V0@361@01))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@408@01))
(assert ($Perm.isReadVar $k@409@01))
(assert (and
  (< $k@408@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@408@01))
  (< $k@409@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@409@01))
  (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01) 0))
  (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@406@01)
    $Snap.unit) dm_V0@361@01)))
(assert (=
  lenY_V2@398@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@406@01) $Snap.unit) dm_V0@361@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01))))))
  $Snap.unit))
; [eval] (forall i_V4: Int, j_V4: Int :: { lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) } { LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4) } 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2)) ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4))
(declare-const i_V4@410@01 Int)
(declare-const j_V4@411@01 Int)
(push) ; 5
; [eval] 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2)) ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
; [eval] 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2))
; [eval] 0 <= i_V4
(push) ; 6
; [then-branch: 103 | 0 <= i_V4@410@01 | live]
; [else-branch: 103 | !(0 <= i_V4@410@01) | live]
(push) ; 7
; [then-branch: 103 | 0 <= i_V4@410@01]
(assert (<= 0 i_V4@410@01))
; [eval] i_V4 < x_V3
(push) ; 8
; [then-branch: 104 | i_V4@410@01 < x_V3@405@01 | live]
; [else-branch: 104 | !(i_V4@410@01 < x_V3@405@01) | live]
(push) ; 9
; [then-branch: 104 | i_V4@410@01 < x_V3@405@01]
(assert (< i_V4@410@01 x_V3@405@01))
; [eval] 0 <= j_V4
(push) ; 10
; [then-branch: 105 | 0 <= j_V4@411@01 | live]
; [else-branch: 105 | !(0 <= j_V4@411@01) | live]
(push) ; 11
; [then-branch: 105 | 0 <= j_V4@411@01]
(assert (<= 0 j_V4@411@01))
; [eval] j_V4 < lenY_V2
(pop) ; 11
(push) ; 11
; [else-branch: 105 | !(0 <= j_V4@411@01)]
(assert (not (<= 0 j_V4@411@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V4@411@01)) (<= 0 j_V4@411@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 104 | !(i_V4@410@01 < x_V3@405@01)]
(assert (not (< i_V4@410@01 x_V3@405@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (< i_V4@410@01 x_V3@405@01)
  (and
    (< i_V4@410@01 x_V3@405@01)
    (or (not (<= 0 j_V4@411@01)) (<= 0 j_V4@411@01)))))
; Joined path conditions
(assert (or (not (< i_V4@410@01 x_V3@405@01)) (< i_V4@410@01 x_V3@405@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 103 | !(0 <= i_V4@410@01)]
(assert (not (<= 0 i_V4@410@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (<= 0 i_V4@410@01)
  (and
    (<= 0 i_V4@410@01)
    (=>
      (< i_V4@410@01 x_V3@405@01)
      (and
        (< i_V4@410@01 x_V3@405@01)
        (or (not (<= 0 j_V4@411@01)) (<= 0 j_V4@411@01))))
    (or (not (< i_V4@410@01 x_V3@405@01)) (< i_V4@410@01 x_V3@405@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V4@410@01)) (<= 0 i_V4@410@01)))
(push) ; 6
; [then-branch: 106 | j_V4@411@01 < lenY_V2@398@01 && 0 <= j_V4@411@01 && i_V4@410@01 < x_V3@405@01 && 0 <= i_V4@410@01 | live]
; [else-branch: 106 | !(j_V4@411@01 < lenY_V2@398@01 && 0 <= j_V4@411@01 && i_V4@410@01 < x_V3@405@01 && 0 <= i_V4@410@01) | live]
(push) ; 7
; [then-branch: 106 | j_V4@411@01 < lenY_V2@398@01 && 0 <= j_V4@411@01 && i_V4@410@01 < x_V3@405@01 && 0 <= i_V4@410@01]
(assert (and
  (and
    (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
    (< i_V4@410@01 x_V3@405@01))
  (<= 0 i_V4@410@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4)
(push) ; 8
(declare-const $k@412@01 $Perm)
(assert ($Perm.isReadVar $k@412@01))
(assert (< $k@412@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@412@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@412@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@413@01 $Perm)
(assert ($Perm.isReadVar $k@413@01))
(assert (< $k@413@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@413@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@413@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@413@01))
(assert (and
  (< $k@413@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@413@01))))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  i_V4@410@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  i_V4@410@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 9
(declare-const $k@414@01 $Perm)
(assert ($Perm.isReadVar $k@414@01))
(assert (< $k@414@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@414@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@414@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@415@01 $Perm)
(assert ($Perm.isReadVar $k@415@01))
(assert (< $k@415@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@415@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@415@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@415@01))
(assert (and
  (< $k@415@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@415@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@414@01))
(assert ($Perm.isReadVar $k@415@01))
(assert (and
  (< $k@414@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@414@01))
  (< $k@415@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@415@01))))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  j_V4@411@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@406@01) $Snap.unit) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V4@411@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@406@01) $Snap.unit) dm_V0@361@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@406@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@412@01))
(assert ($Perm.isReadVar $k@413@01))
(assert ($Perm.isReadVar $k@414@01))
(assert ($Perm.isReadVar $k@415@01))
(assert (and
  (< $k@412@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@412@01))
  (< $k@413@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@413@01))
  (<
    i_V4@410@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
  (< $k@414@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@414@01))
  (< $k@415@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@415@01))
  (<
    j_V4@411@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@406@01)
      $Snap.unit) dm_V0@361@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01)))
; [eval] LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
(push) ; 8
(declare-const $k@416@01 $Perm)
(assert ($Perm.isReadVar $k@416@01))
(assert (< $k@416@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@416@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@416@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@416@01))
(assert (and
  (< $k@416@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@416@01))
  (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 106 | !(j_V4@411@01 < lenY_V2@398@01 && 0 <= j_V4@411@01 && i_V4@410@01 < x_V3@405@01 && 0 <= i_V4@410@01)]
(assert (not
  (and
    (and
      (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
      (< i_V4@410@01 x_V3@405@01))
    (<= 0 i_V4@410@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@412@01))
(assert ($Perm.isReadVar $k@413@01))
(assert ($Perm.isReadVar $k@414@01))
(assert ($Perm.isReadVar $k@415@01))
(assert ($Perm.isReadVar $k@416@01))
(assert (=>
  (and
    (and
      (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
      (< i_V4@410@01 x_V3@405@01))
    (<= 0 i_V4@410@01))
  (and
    (< j_V4@411@01 lenY_V2@398@01)
    (<= 0 j_V4@411@01)
    (< i_V4@410@01 x_V3@405@01)
    (<= 0 i_V4@410@01)
    (< $k@412@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@412@01))
    (< $k@413@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@413@01))
    (<
      i_V4@410@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
    (< $k@414@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@414@01))
    (< $k@415@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@415@01))
    (<
      j_V4@411@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@406@01)
        $Snap.unit) dm_V0@361@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@406@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01)
    (< $k@416@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@416@01))
    (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
        (< i_V4@410@01 x_V3@405@01))
      (<= 0 i_V4@410@01)))
  (and
    (and
      (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
      (< i_V4@410@01 x_V3@405@01))
    (<= 0 i_V4@410@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@412@01))
(assert ($Perm.isReadVar $k@413@01))
(assert ($Perm.isReadVar $k@414@01))
(assert ($Perm.isReadVar $k@415@01))
(assert ($Perm.isReadVar $k@416@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V4@410@01 Int) (j_V4@411@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@410@01)
      (and
        (<= 0 i_V4@410@01)
        (=>
          (< i_V4@410@01 x_V3@405@01)
          (and
            (< i_V4@410@01 x_V3@405@01)
            (or (not (<= 0 j_V4@411@01)) (<= 0 j_V4@411@01))))
        (or (not (< i_V4@410@01 x_V3@405@01)) (< i_V4@410@01 x_V3@405@01))))
    (or (not (<= 0 i_V4@410@01)) (<= 0 i_V4@410@01))
    (=>
      (and
        (and
          (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
          (< i_V4@410@01 x_V3@405@01))
        (<= 0 i_V4@410@01))
      (and
        (< j_V4@411@01 lenY_V2@398@01)
        (<= 0 j_V4@411@01)
        (< i_V4@410@01 x_V3@405@01)
        (<= 0 i_V4@410@01)
        (< $k@412@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@412@01))
        (< $k@413@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@413@01))
        (<
          i_V4@410@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
        (< $k@414@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@414@01))
        (< $k@415@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@415@01))
        (<
          j_V4@411@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@406@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@406@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01)
        (< $k@416@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@416@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
            (< i_V4@410@01 x_V3@405@01))
          (<= 0 i_V4@410@01)))
      (and
        (and
          (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
          (< i_V4@410@01 x_V3@405@01))
        (<= 0 i_V4@410@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01))
  :qid |prog.l681-aux|)))
(assert (forall ((i_V4@410@01 Int) (j_V4@411@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@410@01)
      (and
        (<= 0 i_V4@410@01)
        (=>
          (< i_V4@410@01 x_V3@405@01)
          (and
            (< i_V4@410@01 x_V3@405@01)
            (or (not (<= 0 j_V4@411@01)) (<= 0 j_V4@411@01))))
        (or (not (< i_V4@410@01 x_V3@405@01)) (< i_V4@410@01 x_V3@405@01))))
    (or (not (<= 0 i_V4@410@01)) (<= 0 i_V4@410@01))
    (=>
      (and
        (and
          (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
          (< i_V4@410@01 x_V3@405@01))
        (<= 0 i_V4@410@01))
      (and
        (< j_V4@411@01 lenY_V2@398@01)
        (<= 0 j_V4@411@01)
        (< i_V4@410@01 x_V3@405@01)
        (<= 0 i_V4@410@01)
        (< $k@412@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@412@01))
        (< $k@413@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@413@01))
        (<
          i_V4@410@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
        (< $k@414@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@414@01))
        (< $k@415@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@415@01))
        (<
          j_V4@411@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@406@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@406@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01)
        (< $k@416@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@416@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
            (< i_V4@410@01 x_V3@405@01))
          (<= 0 i_V4@410@01)))
      (and
        (and
          (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
          (< i_V4@410@01 x_V3@405@01))
        (<= 0 i_V4@410@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01))
  :qid |prog.l681-aux|)))
(assert (forall ((i_V4@410@01 Int) (j_V4@411@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
        (< i_V4@410@01 x_V3@405@01))
      (<= 0 i_V4@410@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@406@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01)
      (LookupL_4b5075e4_F ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01))
  :qid |prog.l681|)))
; Loop head block: Check well-definedness of edge conditions
(push) ; 5
; [eval] x_V3 < lenX_V2
(pop) ; 5
(push) ; 5
; [eval] !(x_V3 < lenX_V2)
; [eval] x_V3 < lenX_V2
(pop) ; 5
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= x_V3
; [eval] x_V3 <= lenX_V2
(set-option :timeout 0)
(push) ; 5
(assert (not (<= 0 lenX_V2@395@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 lenX_V2@395@01))
; [eval] lenX_V2 == lenX_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(push) ; 5
(declare-const $k@417@01 $Perm)
(assert ($Perm.isReadVar $k@417@01))
(assert (< $k@417@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@417@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@417@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@417@01))
(assert (and
  (< $k@417@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@417@01))))
; [eval] lenY_V2 == lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@418@01 $Perm)
(assert ($Perm.isReadVar $k@418@01))
(assert (< $k@418@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@418@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@418@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@419@01 $Perm)
(assert ($Perm.isReadVar $k@419@01))
(assert (< $k@419@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@419@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@419@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@419@01))
(assert (and
  (< $k@419@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@419@01))))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@418@01))
(assert ($Perm.isReadVar $k@419@01))
(assert (and
  (< $k@418@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@418@01))
  (< $k@419@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@419@01))))
; [eval] (forall i_V4: Int, j_V4: Int :: { lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) } { LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4) } 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2)) ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4))
(declare-const i_V4@420@01 Int)
(declare-const j_V4@421@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2)) ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
; [eval] 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2))
; [eval] 0 <= i_V4
(push) ; 6
; [then-branch: 107 | 0 <= i_V4@420@01 | live]
; [else-branch: 107 | !(0 <= i_V4@420@01) | live]
(push) ; 7
; [then-branch: 107 | 0 <= i_V4@420@01]
(assert (<= 0 i_V4@420@01))
; [eval] i_V4 < x_V3
(push) ; 8
; [then-branch: 108 | i_V4@420@01 < 0 | live]
; [else-branch: 108 | !(i_V4@420@01 < 0) | live]
(push) ; 9
; [then-branch: 108 | i_V4@420@01 < 0]
(assert (< i_V4@420@01 0))
; [eval] 0 <= j_V4
(push) ; 10
; [then-branch: 109 | 0 <= j_V4@421@01 | live]
; [else-branch: 109 | !(0 <= j_V4@421@01) | live]
(push) ; 11
; [then-branch: 109 | 0 <= j_V4@421@01]
(assert (<= 0 j_V4@421@01))
; [eval] j_V4 < lenY_V2
(pop) ; 11
(push) ; 11
; [else-branch: 109 | !(0 <= j_V4@421@01)]
(assert (not (<= 0 j_V4@421@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V4@421@01)) (<= 0 j_V4@421@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 108 | !(i_V4@420@01 < 0)]
(assert (not (< i_V4@420@01 0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (< i_V4@420@01 0)
  (and (< i_V4@420@01 0) (or (not (<= 0 j_V4@421@01)) (<= 0 j_V4@421@01)))))
; Joined path conditions
(assert (or (not (< i_V4@420@01 0)) (< i_V4@420@01 0)))
(pop) ; 7
(push) ; 7
; [else-branch: 107 | !(0 <= i_V4@420@01)]
(assert (not (<= 0 i_V4@420@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (<= 0 i_V4@420@01)
  (and
    (<= 0 i_V4@420@01)
    (=>
      (< i_V4@420@01 0)
      (and (< i_V4@420@01 0) (or (not (<= 0 j_V4@421@01)) (<= 0 j_V4@421@01))))
    (or (not (< i_V4@420@01 0)) (< i_V4@420@01 0)))))
; Joined path conditions
(assert (or (not (<= 0 i_V4@420@01)) (<= 0 i_V4@420@01)))
(push) ; 6
; [then-branch: 110 | j_V4@421@01 < lenY_V2@398@01 && 0 <= j_V4@421@01 && i_V4@420@01 < 0 && 0 <= i_V4@420@01 | live]
; [else-branch: 110 | !(j_V4@421@01 < lenY_V2@398@01 && 0 <= j_V4@421@01 && i_V4@420@01 < 0 && 0 <= i_V4@420@01) | live]
(push) ; 7
; [then-branch: 110 | j_V4@421@01 < lenY_V2@398@01 && 0 <= j_V4@421@01 && i_V4@420@01 < 0 && 0 <= i_V4@420@01]
(assert (and
  (and (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01)) (< i_V4@420@01 0))
  (<= 0 i_V4@420@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4)
(push) ; 8
(declare-const $k@422@01 $Perm)
(assert ($Perm.isReadVar $k@422@01))
(assert (< $k@422@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@422@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@422@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@423@01 $Perm)
(assert ($Perm.isReadVar $k@423@01))
(assert (< $k@423@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@423@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@423@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@423@01))
(assert (and
  (< $k@423@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@423@01))))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  i_V4@420@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@363@01) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  i_V4@420@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@363@01) dm_V0@361@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 9
(declare-const $k@424@01 $Perm)
(assert ($Perm.isReadVar $k@424@01))
(assert (< $k@424@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@424@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@425@01 $Perm)
(assert ($Perm.isReadVar $k@425@01))
(assert (< $k@425@01 (/ (to_real 1) (to_real 2))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@425@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@425@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@425@01))
(assert (and
  (< $k@425@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@425@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@424@01))
(assert ($Perm.isReadVar $k@425@01))
(assert (and
  (< $k@424@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@424@01))
  (< $k@425@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@425@01))))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  j_V4@421@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@363@01) $Snap.unit) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V4@421@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@363@01) $Snap.unit) dm_V0@361@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@363@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@422@01))
(assert ($Perm.isReadVar $k@423@01))
(assert ($Perm.isReadVar $k@424@01))
(assert ($Perm.isReadVar $k@425@01))
(assert (and
  (< $k@422@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@422@01))
  (< $k@423@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@423@01))
  (<
    i_V4@420@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@363@01) dm_V0@361@01))
  (< $k@424@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@424@01))
  (< $k@425@01 (/ (to_real 1) (to_real 2)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@425@01))
  (<
    j_V4@421@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@363@01)
      $Snap.unit) dm_V0@361@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@363@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01)))
; [eval] LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
(push) ; 8
(declare-const $k@426@01 $Perm)
(assert ($Perm.isReadVar $k@426@01))
(assert (< $k@426@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@426@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@426@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@426@01))
(assert (and
  (< $k@426@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@426@01))
  (LookupL_4b5075e4_F%precondition $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 110 | !(j_V4@421@01 < lenY_V2@398@01 && 0 <= j_V4@421@01 && i_V4@420@01 < 0 && 0 <= i_V4@420@01)]
(assert (not
  (and
    (and
      (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
      (< i_V4@420@01 0))
    (<= 0 i_V4@420@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@422@01))
(assert ($Perm.isReadVar $k@423@01))
(assert ($Perm.isReadVar $k@424@01))
(assert ($Perm.isReadVar $k@425@01))
(assert ($Perm.isReadVar $k@426@01))
(assert (=>
  (and
    (and
      (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
      (< i_V4@420@01 0))
    (<= 0 i_V4@420@01))
  (and
    (< j_V4@421@01 lenY_V2@398@01)
    (<= 0 j_V4@421@01)
    (< i_V4@420@01 0)
    (<= 0 i_V4@420@01)
    (< $k@422@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@422@01))
    (< $k@423@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@423@01))
    (<
      i_V4@420@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@363@01) dm_V0@361@01))
    (< $k@424@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@424@01))
    (< $k@425@01 (/ (to_real 1) (to_real 2)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@425@01))
    (<
      j_V4@421@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@363@01)
        $Snap.unit) dm_V0@361@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@363@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01)
    (< $k@426@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@426@01))
    (LookupL_4b5075e4_F%precondition $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
        (< i_V4@420@01 0))
      (<= 0 i_V4@420@01)))
  (and
    (and
      (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
      (< i_V4@420@01 0))
    (<= 0 i_V4@420@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@422@01))
(assert ($Perm.isReadVar $k@423@01))
(assert ($Perm.isReadVar $k@424@01))
(assert ($Perm.isReadVar $k@425@01))
(assert ($Perm.isReadVar $k@426@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V4@420@01 Int) (j_V4@421@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@420@01)
      (and
        (<= 0 i_V4@420@01)
        (=>
          (< i_V4@420@01 0)
          (and
            (< i_V4@420@01 0)
            (or (not (<= 0 j_V4@421@01)) (<= 0 j_V4@421@01))))
        (or (not (< i_V4@420@01 0)) (< i_V4@420@01 0))))
    (or (not (<= 0 i_V4@420@01)) (<= 0 i_V4@420@01))
    (=>
      (and
        (and
          (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
          (< i_V4@420@01 0))
        (<= 0 i_V4@420@01))
      (and
        (< j_V4@421@01 lenY_V2@398@01)
        (<= 0 j_V4@421@01)
        (< i_V4@420@01 0)
        (<= 0 i_V4@420@01)
        (< $k@422@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@422@01))
        (< $k@423@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@423@01))
        (<
          i_V4@420@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@363@01) dm_V0@361@01))
        (< $k@424@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@424@01))
        (< $k@425@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@425@01))
        (<
          j_V4@421@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@363@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@363@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01)
        (< $k@426@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@426@01))
        (LookupL_4b5075e4_F%precondition $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
            (< i_V4@420@01 0))
          (<= 0 i_V4@420@01)))
      (and
        (and
          (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
          (< i_V4@420@01 0))
        (<= 0 i_V4@420@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@363@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01))
  :qid |prog.l681-aux|)))
(assert (forall ((i_V4@420@01 Int) (j_V4@421@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@420@01)
      (and
        (<= 0 i_V4@420@01)
        (=>
          (< i_V4@420@01 0)
          (and
            (< i_V4@420@01 0)
            (or (not (<= 0 j_V4@421@01)) (<= 0 j_V4@421@01))))
        (or (not (< i_V4@420@01 0)) (< i_V4@420@01 0))))
    (or (not (<= 0 i_V4@420@01)) (<= 0 i_V4@420@01))
    (=>
      (and
        (and
          (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
          (< i_V4@420@01 0))
        (<= 0 i_V4@420@01))
      (and
        (< j_V4@421@01 lenY_V2@398@01)
        (<= 0 j_V4@421@01)
        (< i_V4@420@01 0)
        (<= 0 i_V4@420@01)
        (< $k@422@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@422@01))
        (< $k@423@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@423@01))
        (<
          i_V4@420@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@363@01) dm_V0@361@01))
        (< $k@424@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@424@01))
        (< $k@425@01 (/ (to_real 1) (to_real 2)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 2)) $k@425@01))
        (<
          j_V4@421@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@363@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@363@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01)
        (< $k@426@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@426@01))
        (LookupL_4b5075e4_F%precondition $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
            (< i_V4@420@01 0))
          (<= 0 i_V4@420@01)))
      (and
        (and
          (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
          (< i_V4@420@01 0))
        (<= 0 i_V4@420@01))))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01))
  :qid |prog.l681-aux|)))
(assert (forall ((i_V4@420@01 Int) (j_V4@421@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
        (< i_V4@420@01 0))
      (<= 0 i_V4@420@01))
    (and
      (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
        ($Snap.first $t@363@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01)
      (LookupL_4b5075e4_F%precondition $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@363@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01))
  :qid |prog.l681_precondition|)))
(push) ; 5
(assert (not (forall ((i_V4@420@01 Int) (j_V4@421@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and
            (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
            (< i_V4@420@01 0))
          (<= 0 i_V4@420@01))
        (and
          (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
            ($Snap.first $t@363@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01)
          (LookupL_4b5075e4_F%precondition $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01)))
      (and
        (and
          (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
          (< i_V4@420@01 0))
        (<= 0 i_V4@420@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@363@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01)
      (LookupL_4b5075e4_F $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@363@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01))
  :qid |prog.l681|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V4@420@01 Int) (j_V4@421@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V4@421@01 lenY_V2@398@01) (<= 0 j_V4@421@01))
        (< i_V4@420@01 0))
      (<= 0 i_V4@420@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@363@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01)
      (LookupL_4b5075e4_F $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@363@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@420@01 j_V4@421@01))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit sm_V0_CN1@391@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@420@01 j_V4@421@01))
  :qid |prog.l681|)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert ($Perm.isReadVar $k@407@01))
(assert ($Perm.isReadVar $k@408@01))
(assert ($Perm.isReadVar $k@409@01))
(assert ($Perm.isReadVar $k@412@01))
(assert ($Perm.isReadVar $k@413@01))
(assert ($Perm.isReadVar $k@414@01))
(assert ($Perm.isReadVar $k@415@01))
(assert ($Perm.isReadVar $k@416@01))
(assert (= $t@406@01 ($Snap.combine ($Snap.first $t@406@01) ($Snap.second $t@406@01))))
(assert (=
  ($Snap.second $t@406@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@406@01))
    ($Snap.second ($Snap.second $t@406@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@406@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@406@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@406@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@406@01))) $Snap.unit))
(assert (<= 0 x_V3@405@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@406@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@406@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@406@01))))
  $Snap.unit))
(assert (<= x_V3@405@01 lenX_V2@395@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01)))))
  $Snap.unit))
(assert (< $k@407@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@407@01)))
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@406@01) dm_V0@361@01))
(assert (=
  lenX_V2@395@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01))))))
  $Snap.unit))
(assert (< $k@408@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@408@01)))
(assert (< $k@409@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@409@01)))
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01) 0)))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@406@01)
  $Snap.unit) dm_V0@361@01))
(assert (=
  lenY_V2@398@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@406@01) $Snap.unit) dm_V0@361@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@406@01))))))
  $Snap.unit))
(assert (forall ((i_V4@410@01 Int) (j_V4@411@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@410@01)
      (and
        (<= 0 i_V4@410@01)
        (=>
          (< i_V4@410@01 x_V3@405@01)
          (and
            (< i_V4@410@01 x_V3@405@01)
            (or (not (<= 0 j_V4@411@01)) (<= 0 j_V4@411@01))))
        (or (not (< i_V4@410@01 x_V3@405@01)) (< i_V4@410@01 x_V3@405@01))))
    (or (not (<= 0 i_V4@410@01)) (<= 0 i_V4@410@01))
    (=>
      (and
        (and
          (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
          (< i_V4@410@01 x_V3@405@01))
        (<= 0 i_V4@410@01))
      (and
        (< j_V4@411@01 lenY_V2@398@01)
        (<= 0 j_V4@411@01)
        (< i_V4@410@01 x_V3@405@01)
        (<= 0 i_V4@410@01)
        (< $k@412@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@412@01))
        (< $k@413@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@413@01))
        (<
          i_V4@410@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
        (< $k@414@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@414@01))
        (< $k@415@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@415@01))
        (<
          j_V4@411@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@406@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@406@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01)
        (< $k@416@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@416@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
            (< i_V4@410@01 x_V3@405@01))
          (<= 0 i_V4@410@01)))
      (and
        (and
          (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
          (< i_V4@410@01 x_V3@405@01))
        (<= 0 i_V4@410@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01))
  :qid |prog.l681-aux|)))
(assert (forall ((i_V4@410@01 Int) (j_V4@411@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@410@01)
      (and
        (<= 0 i_V4@410@01)
        (=>
          (< i_V4@410@01 x_V3@405@01)
          (and
            (< i_V4@410@01 x_V3@405@01)
            (or (not (<= 0 j_V4@411@01)) (<= 0 j_V4@411@01))))
        (or (not (< i_V4@410@01 x_V3@405@01)) (< i_V4@410@01 x_V3@405@01))))
    (or (not (<= 0 i_V4@410@01)) (<= 0 i_V4@410@01))
    (=>
      (and
        (and
          (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
          (< i_V4@410@01 x_V3@405@01))
        (<= 0 i_V4@410@01))
      (and
        (< j_V4@411@01 lenY_V2@398@01)
        (<= 0 j_V4@411@01)
        (< i_V4@410@01 x_V3@405@01)
        (<= 0 i_V4@410@01)
        (< $k@412@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@412@01))
        (< $k@413@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@413@01))
        (<
          i_V4@410@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
        (< $k@414@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@414@01))
        (< $k@415@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@415@01))
        (<
          j_V4@411@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@406@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@406@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01)
        (< $k@416@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@416@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
            (< i_V4@410@01 x_V3@405@01))
          (<= 0 i_V4@410@01)))
      (and
        (and
          (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
          (< i_V4@410@01 x_V3@405@01))
        (<= 0 i_V4@410@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01))
  :qid |prog.l681-aux|)))
(assert (forall ((i_V4@410@01 Int) (j_V4@411@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V4@411@01 lenY_V2@398@01) (<= 0 j_V4@411@01))
        (< i_V4@410@01 x_V3@405@01))
      (<= 0 i_V4@410@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@406@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01)
      (LookupL_4b5075e4_F ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@410@01 j_V4@411@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@410@01 j_V4@411@01))
  :qid |prog.l681|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] x_V3 < lenX_V2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (< x_V3@405@01 lenX_V2@395@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< x_V3@405@01 lenX_V2@395@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | x_V3@405@01 < lenX_V2@395@01 | live]
; [else-branch: 111 | !(x_V3@405@01 < lenX_V2@395@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 111 | x_V3@405@01 < lenX_V2@395@01]
(assert (< x_V3@405@01 lenX_V2@395@01))
; [exec]
; var y_V5: Int
(declare-const y_V5@427@01 Int)
; [exec]
; inhale y_V5 == 0
(declare-const $t@428@01 $Snap)
(assert (= $t@428@01 $Snap.unit))
; [eval] y_V5 == 0
(assert (= y_V5@427@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; y_V5 := 0
(declare-const N25@429@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const e_V7@430@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const N26@431@01 ShStruct2<Ref~_Ref>)
(declare-const sm_V0_CN1@432@01 ShStruct2<Ref~_Ref>)
(declare-const y_V5@433@01 Int)
(set-option :timeout 0)
(push) ; 7
; Loop head block: Check well-definedness of invariant
(declare-const $t@434@01 $Snap)
(assert (= $t@434@01 ($Snap.combine ($Snap.first $t@434@01) ($Snap.second $t@434@01))))
(assert (=
  ($Snap.second $t@434@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@434@01))
    ($Snap.second ($Snap.second $t@434@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@434@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@434@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@434@01))) $Snap.unit))
; [eval] 0 <= x_V3
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@434@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@01))))
  $Snap.unit))
; [eval] x_V3 < lenX_V2
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))
  $Snap.unit))
; [eval] lenX_V2 == lenX_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(push) ; 8
(declare-const $k@435@01 $Perm)
(assert ($Perm.isReadVar $k@435@01))
(assert (< $k@435@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@435@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@435@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@434@01) dm_V0@361@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@435@01))
(assert (and
  (< $k@435@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@435@01))
  (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@434@01) dm_V0@361@01)))
(assert (=
  lenX_V2@395@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))
  $Snap.unit))
; [eval] 0 <= y_V5
(assert (<= 0 y_V5@433@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))
  $Snap.unit))
; [eval] y_V5 <= lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@436@01 $Perm)
(assert ($Perm.isReadVar $k@436@01))
(assert (< $k@436@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@436@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@436@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@437@01 $Perm)
(assert ($Perm.isReadVar $k@437@01))
(assert (< $k@437@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@437@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@437@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@437@01))
(assert (and
  (< $k@437@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@437@01))))
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01) 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01) 0)))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@434@01)
  $Snap.unit) dm_V0@361@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@436@01))
(assert ($Perm.isReadVar $k@437@01))
(assert (and
  (< $k@436@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@436@01))
  (< $k@437@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@437@01))
  (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01) 0))
  (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@434@01)
    $Snap.unit) dm_V0@361@01)))
(assert (<=
  y_V5@433@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@434@01) $Snap.unit) dm_V0@361@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))
  $Snap.unit))
; [eval] lenY_V2 == lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(push) ; 8
(declare-const $k@438@01 $Perm)
(assert ($Perm.isReadVar $k@438@01))
(assert (< $k@438@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@438@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@438@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@439@01 $Perm)
(assert ($Perm.isReadVar $k@439@01))
(assert (< $k@439@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@439@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@439@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@439@01))
(assert (and
  (< $k@439@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@439@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@438@01))
(assert ($Perm.isReadVar $k@439@01))
(assert (and
  (< $k@438@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@438@01))
  (< $k@439@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@439@01))))
(assert (=
  lenY_V2@398@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@434@01) $Snap.unit) dm_V0@361@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))))
  $Snap.unit))
; [eval] (forall i_V4: Int, j_V4: Int :: { lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) } { LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4) } 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2)) ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4))
(declare-const i_V4@440@01 Int)
(declare-const j_V4@441@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2)) ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
; [eval] 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2))
; [eval] 0 <= i_V4
(push) ; 9
; [then-branch: 112 | 0 <= i_V4@440@01 | live]
; [else-branch: 112 | !(0 <= i_V4@440@01) | live]
(push) ; 10
; [then-branch: 112 | 0 <= i_V4@440@01]
(assert (<= 0 i_V4@440@01))
; [eval] i_V4 < x_V3
(push) ; 11
; [then-branch: 113 | i_V4@440@01 < x_V3@405@01 | live]
; [else-branch: 113 | !(i_V4@440@01 < x_V3@405@01) | live]
(push) ; 12
; [then-branch: 113 | i_V4@440@01 < x_V3@405@01]
(assert (< i_V4@440@01 x_V3@405@01))
; [eval] 0 <= j_V4
(push) ; 13
; [then-branch: 114 | 0 <= j_V4@441@01 | live]
; [else-branch: 114 | !(0 <= j_V4@441@01) | live]
(push) ; 14
; [then-branch: 114 | 0 <= j_V4@441@01]
(assert (<= 0 j_V4@441@01))
; [eval] j_V4 < lenY_V2
(pop) ; 14
(push) ; 14
; [else-branch: 114 | !(0 <= j_V4@441@01)]
(assert (not (<= 0 j_V4@441@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V4@441@01)) (<= 0 j_V4@441@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 113 | !(i_V4@440@01 < x_V3@405@01)]
(assert (not (< i_V4@440@01 x_V3@405@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (< i_V4@440@01 x_V3@405@01)
  (and
    (< i_V4@440@01 x_V3@405@01)
    (or (not (<= 0 j_V4@441@01)) (<= 0 j_V4@441@01)))))
; Joined path conditions
(assert (or (not (< i_V4@440@01 x_V3@405@01)) (< i_V4@440@01 x_V3@405@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 112 | !(0 <= i_V4@440@01)]
(assert (not (<= 0 i_V4@440@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (<= 0 i_V4@440@01)
  (and
    (<= 0 i_V4@440@01)
    (=>
      (< i_V4@440@01 x_V3@405@01)
      (and
        (< i_V4@440@01 x_V3@405@01)
        (or (not (<= 0 j_V4@441@01)) (<= 0 j_V4@441@01))))
    (or (not (< i_V4@440@01 x_V3@405@01)) (< i_V4@440@01 x_V3@405@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V4@440@01)) (<= 0 i_V4@440@01)))
(push) ; 9
; [then-branch: 115 | j_V4@441@01 < lenY_V2@398@01 && 0 <= j_V4@441@01 && i_V4@440@01 < x_V3@405@01 && 0 <= i_V4@440@01 | live]
; [else-branch: 115 | !(j_V4@441@01 < lenY_V2@398@01 && 0 <= j_V4@441@01 && i_V4@440@01 < x_V3@405@01 && 0 <= i_V4@440@01) | live]
(push) ; 10
; [then-branch: 115 | j_V4@441@01 < lenY_V2@398@01 && 0 <= j_V4@441@01 && i_V4@440@01 < x_V3@405@01 && 0 <= i_V4@440@01]
(assert (and
  (and
    (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
    (< i_V4@440@01 x_V3@405@01))
  (<= 0 i_V4@440@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4)
(push) ; 11
(declare-const $k@442@01 $Perm)
(assert ($Perm.isReadVar $k@442@01))
(assert (< $k@442@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@442@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@443@01 $Perm)
(assert ($Perm.isReadVar $k@443@01))
(assert (< $k@443@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@443@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@443@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@443@01))
(assert (and
  (< $k@443@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@443@01))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  i_V4@440@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  i_V4@440@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 12
(declare-const $k@444@01 $Perm)
(assert ($Perm.isReadVar $k@444@01))
(assert (< $k@444@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@444@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@444@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@445@01 $Perm)
(assert ($Perm.isReadVar $k@445@01))
(assert (< $k@445@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@445@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@445@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@445@01))
(assert (and
  (< $k@445@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@445@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@444@01))
(assert ($Perm.isReadVar $k@445@01))
(assert (and
  (< $k@444@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@444@01))
  (< $k@445@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@445@01))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  j_V4@441@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@434@01) $Snap.unit) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V4@441@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@434@01) $Snap.unit) dm_V0@361@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@434@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@442@01))
(assert ($Perm.isReadVar $k@443@01))
(assert ($Perm.isReadVar $k@444@01))
(assert ($Perm.isReadVar $k@445@01))
(assert (and
  (< $k@442@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@442@01))
  (< $k@443@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@443@01))
  (<
    i_V4@440@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
  (< $k@444@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@444@01))
  (< $k@445@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@445@01))
  (<
    j_V4@441@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@434@01)
      $Snap.unit) dm_V0@361@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@434@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01)))
; [eval] LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
(push) ; 11
(declare-const $k@446@01 $Perm)
(assert ($Perm.isReadVar $k@446@01))
(assert (< $k@446@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@446@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@446@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@446@01))
(assert (and
  (< $k@446@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@446@01))
  (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01)))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 115 | !(j_V4@441@01 < lenY_V2@398@01 && 0 <= j_V4@441@01 && i_V4@440@01 < x_V3@405@01 && 0 <= i_V4@440@01)]
(assert (not
  (and
    (and
      (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
      (< i_V4@440@01 x_V3@405@01))
    (<= 0 i_V4@440@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@442@01))
(assert ($Perm.isReadVar $k@443@01))
(assert ($Perm.isReadVar $k@444@01))
(assert ($Perm.isReadVar $k@445@01))
(assert ($Perm.isReadVar $k@446@01))
(assert (=>
  (and
    (and
      (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
      (< i_V4@440@01 x_V3@405@01))
    (<= 0 i_V4@440@01))
  (and
    (< j_V4@441@01 lenY_V2@398@01)
    (<= 0 j_V4@441@01)
    (< i_V4@440@01 x_V3@405@01)
    (<= 0 i_V4@440@01)
    (< $k@442@01 (/ (to_real 1) (to_real 8)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@442@01))
    (< $k@443@01 (/ (to_real 1) (to_real 8)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@443@01))
    (<
      i_V4@440@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
    (< $k@444@01 (/ (to_real 1) (to_real 8)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@444@01))
    (< $k@445@01 (/ (to_real 1) (to_real 8)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@445@01))
    (<
      j_V4@441@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@434@01)
        $Snap.unit) dm_V0@361@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@434@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01)
    (< $k@446@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@446@01))
    (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
        (< i_V4@440@01 x_V3@405@01))
      (<= 0 i_V4@440@01)))
  (and
    (and
      (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
      (< i_V4@440@01 x_V3@405@01))
    (<= 0 i_V4@440@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@442@01))
(assert ($Perm.isReadVar $k@443@01))
(assert ($Perm.isReadVar $k@444@01))
(assert ($Perm.isReadVar $k@445@01))
(assert ($Perm.isReadVar $k@446@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V4@440@01 Int) (j_V4@441@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@440@01)
      (and
        (<= 0 i_V4@440@01)
        (=>
          (< i_V4@440@01 x_V3@405@01)
          (and
            (< i_V4@440@01 x_V3@405@01)
            (or (not (<= 0 j_V4@441@01)) (<= 0 j_V4@441@01))))
        (or (not (< i_V4@440@01 x_V3@405@01)) (< i_V4@440@01 x_V3@405@01))))
    (or (not (<= 0 i_V4@440@01)) (<= 0 i_V4@440@01))
    (=>
      (and
        (and
          (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
          (< i_V4@440@01 x_V3@405@01))
        (<= 0 i_V4@440@01))
      (and
        (< j_V4@441@01 lenY_V2@398@01)
        (<= 0 j_V4@441@01)
        (< i_V4@440@01 x_V3@405@01)
        (<= 0 i_V4@440@01)
        (< $k@442@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@442@01))
        (< $k@443@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@443@01))
        (<
          i_V4@440@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
        (< $k@444@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@444@01))
        (< $k@445@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@445@01))
        (<
          j_V4@441@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@434@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@434@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01)
        (< $k@446@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@446@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
            (< i_V4@440@01 x_V3@405@01))
          (<= 0 i_V4@440@01)))
      (and
        (and
          (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
          (< i_V4@440@01 x_V3@405@01))
        (<= 0 i_V4@440@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@434@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01))
  :qid |prog.l717-aux|)))
(assert (forall ((i_V4@440@01 Int) (j_V4@441@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@440@01)
      (and
        (<= 0 i_V4@440@01)
        (=>
          (< i_V4@440@01 x_V3@405@01)
          (and
            (< i_V4@440@01 x_V3@405@01)
            (or (not (<= 0 j_V4@441@01)) (<= 0 j_V4@441@01))))
        (or (not (< i_V4@440@01 x_V3@405@01)) (< i_V4@440@01 x_V3@405@01))))
    (or (not (<= 0 i_V4@440@01)) (<= 0 i_V4@440@01))
    (=>
      (and
        (and
          (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
          (< i_V4@440@01 x_V3@405@01))
        (<= 0 i_V4@440@01))
      (and
        (< j_V4@441@01 lenY_V2@398@01)
        (<= 0 j_V4@441@01)
        (< i_V4@440@01 x_V3@405@01)
        (<= 0 i_V4@440@01)
        (< $k@442@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@442@01))
        (< $k@443@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@443@01))
        (<
          i_V4@440@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
        (< $k@444@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@444@01))
        (< $k@445@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@445@01))
        (<
          j_V4@441@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@434@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@434@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01)
        (< $k@446@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@446@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
            (< i_V4@440@01 x_V3@405@01))
          (<= 0 i_V4@440@01)))
      (and
        (and
          (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
          (< i_V4@440@01 x_V3@405@01))
        (<= 0 i_V4@440@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01))
  :qid |prog.l717-aux|)))
(assert (forall ((i_V4@440@01 Int) (j_V4@441@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
        (< i_V4@440@01 x_V3@405@01))
      (<= 0 i_V4@440@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@434@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01)
      (LookupL_4b5075e4_F ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@434@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01))
  :qid |prog.l717|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))))
  $Snap.unit))
; [eval] (forall j_V6: Int :: { lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, x_V3, j_V6) } { LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, x_V3, j_V6) } 0 <= j_V6 && j_V6 < y_V5 ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, x_V3, j_V6) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, x_V3, j_V6))
(declare-const j_V6@447@01 Int)
(push) ; 8
; [eval] 0 <= j_V6 && j_V6 < y_V5 ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, x_V3, j_V6) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, x_V3, j_V6)
; [eval] 0 <= j_V6 && j_V6 < y_V5
; [eval] 0 <= j_V6
(push) ; 9
; [then-branch: 116 | 0 <= j_V6@447@01 | live]
; [else-branch: 116 | !(0 <= j_V6@447@01) | live]
(push) ; 10
; [then-branch: 116 | 0 <= j_V6@447@01]
(assert (<= 0 j_V6@447@01))
; [eval] j_V6 < y_V5
(pop) ; 10
(push) ; 10
; [else-branch: 116 | !(0 <= j_V6@447@01)]
(assert (not (<= 0 j_V6@447@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V6@447@01)) (<= 0 j_V6@447@01)))
(push) ; 9
; [then-branch: 117 | j_V6@447@01 < y_V5@433@01 && 0 <= j_V6@447@01 | live]
; [else-branch: 117 | !(j_V6@447@01 < y_V5@433@01 && 0 <= j_V6@447@01) | live]
(push) ; 10
; [then-branch: 117 | j_V6@447@01 < y_V5@433@01 && 0 <= j_V6@447@01]
(assert (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, x_V3, j_V6) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, x_V3, j_V6)
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, x_V3, j_V6)
(push) ; 11
(declare-const $k@448@01 $Perm)
(assert ($Perm.isReadVar $k@448@01))
(assert (< $k@448@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@448@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@448@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@449@01 $Perm)
(assert ($Perm.isReadVar $k@449@01))
(assert (< $k@449@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@449@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@449@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@449@01))
(assert (and
  (< $k@449@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@449@01))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  x_V3@405@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  x_V3@405@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 12
(declare-const $k@450@01 $Perm)
(assert ($Perm.isReadVar $k@450@01))
(assert (< $k@450@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@450@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@450@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@451@01 $Perm)
(assert ($Perm.isReadVar $k@451@01))
(assert (< $k@451@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@451@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@451@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@451@01))
(assert (and
  (< $k@451@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@451@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@450@01))
(assert ($Perm.isReadVar $k@451@01))
(assert (and
  (< $k@450@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@450@01))
  (< $k@451@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@451@01))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  j_V6@447@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@434@01) $Snap.unit) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V6@447@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@434@01) $Snap.unit) dm_V0@361@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@434@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@448@01))
(assert ($Perm.isReadVar $k@449@01))
(assert ($Perm.isReadVar $k@450@01))
(assert ($Perm.isReadVar $k@451@01))
(assert (and
  (< $k@448@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@448@01))
  (< $k@449@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@449@01))
  (<
    x_V3@405@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
  (< $k@450@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@450@01))
  (< $k@451@01 (/ (to_real 1) (to_real 8)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@451@01))
  (<
    j_V6@447@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@434@01)
      $Snap.unit) dm_V0@361@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@434@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01)))
; [eval] LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, x_V3, j_V6)
(push) ; 11
(declare-const $k@452@01 $Perm)
(assert ($Perm.isReadVar $k@452@01))
(assert (< $k@452@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@452@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@452@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@452@01))
(assert (and
  (< $k@452@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@452@01))
  (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01)))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 117 | !(j_V6@447@01 < y_V5@433@01 && 0 <= j_V6@447@01)]
(assert (not (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@448@01))
(assert ($Perm.isReadVar $k@449@01))
(assert ($Perm.isReadVar $k@450@01))
(assert ($Perm.isReadVar $k@451@01))
(assert ($Perm.isReadVar $k@452@01))
(assert (=>
  (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))
  (and
    (< j_V6@447@01 y_V5@433@01)
    (<= 0 j_V6@447@01)
    (< $k@448@01 (/ (to_real 1) (to_real 8)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@448@01))
    (< $k@449@01 (/ (to_real 1) (to_real 8)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@449@01))
    (<
      x_V3@405@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
    (< $k@450@01 (/ (to_real 1) (to_real 8)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@450@01))
    (< $k@451@01 (/ (to_real 1) (to_real 8)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@451@01))
    (<
      j_V6@447@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@434@01)
        $Snap.unit) dm_V0@361@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@434@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01)
    (< $k@452@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@452@01))
    (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01))))
; Joined path conditions
(assert (or
  (not (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01)))
  (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@448@01))
(assert ($Perm.isReadVar $k@449@01))
(assert ($Perm.isReadVar $k@450@01))
(assert ($Perm.isReadVar $k@451@01))
(assert ($Perm.isReadVar $k@452@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j_V6@447@01 Int)) (!
  (and
    (or (not (<= 0 j_V6@447@01)) (<= 0 j_V6@447@01))
    (=>
      (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))
      (and
        (< j_V6@447@01 y_V5@433@01)
        (<= 0 j_V6@447@01)
        (< $k@448@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@448@01))
        (< $k@449@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@449@01))
        (<
          x_V3@405@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
        (< $k@450@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@450@01))
        (< $k@451@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@451@01))
        (<
          j_V6@447@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@434@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@434@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01)
        (< $k@452@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@452@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01)))
    (or
      (not (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01)))
      (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@434@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01))
  :qid |prog.l723-aux|)))
(assert (forall ((j_V6@447@01 Int)) (!
  (and
    (or (not (<= 0 j_V6@447@01)) (<= 0 j_V6@447@01))
    (=>
      (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))
      (and
        (< j_V6@447@01 y_V5@433@01)
        (<= 0 j_V6@447@01)
        (< $k@448@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@448@01))
        (< $k@449@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@449@01))
        (<
          x_V3@405@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
        (< $k@450@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@450@01))
        (< $k@451@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@451@01))
        (<
          j_V6@447@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@434@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@434@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01)
        (< $k@452@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@452@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01)))
    (or
      (not (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01)))
      (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01))
  :qid |prog.l723-aux|)))
(assert (forall ((j_V6@447@01 Int)) (!
  (=>
    (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@434@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01)
      (LookupL_4b5075e4_F ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@434@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01))
  :qid |prog.l723|)))
; Loop head block: Check well-definedness of edge conditions
(push) ; 8
; [eval] y_V5 < lenY_V2
(pop) ; 8
(push) ; 8
; [eval] !(y_V5 < lenY_V2)
; [eval] y_V5 < lenY_V2
(pop) ; 8
(pop) ; 7
(push) ; 7
; Loop head block: Establish invariant
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= x_V3
; [eval] x_V3 < lenX_V2
; [eval] lenX_V2 == lenX_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenX_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@453@01 $Perm)
(assert ($Perm.isReadVar $k@453@01))
(assert (< $k@453@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@453@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@453@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@453@01))
(assert (and
  (< $k@453@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@453@01))))
; [eval] 0 <= y_V5
; [eval] y_V5 <= lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@454@01 $Perm)
(assert ($Perm.isReadVar $k@454@01))
(assert (< $k@454@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@454@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@454@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@455@01 $Perm)
(assert ($Perm.isReadVar $k@455@01))
(assert (< $k@455@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@455@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@455@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@455@01))
(assert (and
  (< $k@455@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@455@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@454@01))
(assert ($Perm.isReadVar $k@455@01))
(assert (and
  (< $k@454@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@454@01))
  (< $k@455@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@455@01))))
(set-option :timeout 0)
(push) ; 8
(assert (not (<=
  0
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@406@01) $Snap.unit) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@406@01) $Snap.unit) dm_V0@361@01)))
; [eval] lenY_V2 == lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
; [eval] lenY_4b5075e4_PMDenseMatrix(dm_V0_CN0)
(push) ; 8
(declare-const $k@456@01 $Perm)
(assert ($Perm.isReadVar $k@456@01))
(assert (< $k@456@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@456@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@456@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@457@01 $Perm)
(assert ($Perm.isReadVar $k@457@01))
(assert (< $k@457@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@457@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@457@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@457@01))
(assert (and
  (< $k@457@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@457@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@456@01))
(assert ($Perm.isReadVar $k@457@01))
(assert (and
  (< $k@456@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@456@01))
  (< $k@457@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@457@01))))
; [eval] (forall i_V4: Int, j_V4: Int :: { lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) } { LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4) } 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2)) ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4))
(declare-const i_V4@458@01 Int)
(declare-const j_V4@459@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2)) ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
; [eval] 0 <= i_V4 && (i_V4 < x_V3 && (0 <= j_V4 && j_V4 < lenY_V2))
; [eval] 0 <= i_V4
(push) ; 9
; [then-branch: 118 | 0 <= i_V4@458@01 | live]
; [else-branch: 118 | !(0 <= i_V4@458@01) | live]
(push) ; 10
; [then-branch: 118 | 0 <= i_V4@458@01]
(assert (<= 0 i_V4@458@01))
; [eval] i_V4 < x_V3
(push) ; 11
; [then-branch: 119 | i_V4@458@01 < x_V3@405@01 | live]
; [else-branch: 119 | !(i_V4@458@01 < x_V3@405@01) | live]
(push) ; 12
; [then-branch: 119 | i_V4@458@01 < x_V3@405@01]
(assert (< i_V4@458@01 x_V3@405@01))
; [eval] 0 <= j_V4
(push) ; 13
; [then-branch: 120 | 0 <= j_V4@459@01 | live]
; [else-branch: 120 | !(0 <= j_V4@459@01) | live]
(push) ; 14
; [then-branch: 120 | 0 <= j_V4@459@01]
(assert (<= 0 j_V4@459@01))
; [eval] j_V4 < lenY_V2
(pop) ; 14
(push) ; 14
; [else-branch: 120 | !(0 <= j_V4@459@01)]
(assert (not (<= 0 j_V4@459@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V4@459@01)) (<= 0 j_V4@459@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 119 | !(i_V4@458@01 < x_V3@405@01)]
(assert (not (< i_V4@458@01 x_V3@405@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (< i_V4@458@01 x_V3@405@01)
  (and
    (< i_V4@458@01 x_V3@405@01)
    (or (not (<= 0 j_V4@459@01)) (<= 0 j_V4@459@01)))))
; Joined path conditions
(assert (or (not (< i_V4@458@01 x_V3@405@01)) (< i_V4@458@01 x_V3@405@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 118 | !(0 <= i_V4@458@01)]
(assert (not (<= 0 i_V4@458@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (<= 0 i_V4@458@01)
  (and
    (<= 0 i_V4@458@01)
    (=>
      (< i_V4@458@01 x_V3@405@01)
      (and
        (< i_V4@458@01 x_V3@405@01)
        (or (not (<= 0 j_V4@459@01)) (<= 0 j_V4@459@01))))
    (or (not (< i_V4@458@01 x_V3@405@01)) (< i_V4@458@01 x_V3@405@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V4@458@01)) (<= 0 i_V4@458@01)))
(push) ; 9
; [then-branch: 121 | j_V4@459@01 < lenY_V2@398@01 && 0 <= j_V4@459@01 && i_V4@458@01 < x_V3@405@01 && 0 <= i_V4@458@01 | live]
; [else-branch: 121 | !(j_V4@459@01 < lenY_V2@398@01 && 0 <= j_V4@459@01 && i_V4@458@01 < x_V3@405@01 && 0 <= i_V4@458@01) | live]
(push) ; 10
; [then-branch: 121 | j_V4@459@01 < lenY_V2@398@01 && 0 <= j_V4@459@01 && i_V4@458@01 < x_V3@405@01 && 0 <= i_V4@458@01]
(assert (and
  (and
    (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
    (< i_V4@458@01 x_V3@405@01))
  (<= 0 i_V4@458@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, i_V4, j_V4)
(push) ; 11
(declare-const $k@460@01 $Perm)
(assert ($Perm.isReadVar $k@460@01))
(assert (< $k@460@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@460@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@460@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@461@01 $Perm)
(assert ($Perm.isReadVar $k@461@01))
(assert (< $k@461@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@461@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@461@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@461@01))
(assert (and
  (< $k@461@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@461@01))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  i_V4@458@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  i_V4@458@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 12
(declare-const $k@462@01 $Perm)
(assert ($Perm.isReadVar $k@462@01))
(assert (< $k@462@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@462@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@462@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@463@01 $Perm)
(assert ($Perm.isReadVar $k@463@01))
(assert (< $k@463@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@463@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@463@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@463@01))
(assert (and
  (< $k@463@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@463@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@462@01))
(assert ($Perm.isReadVar $k@463@01))
(assert (and
  (< $k@462@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@462@01))
  (< $k@463@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@463@01))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  j_V4@459@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@406@01) $Snap.unit) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V4@459@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@406@01) $Snap.unit) dm_V0@361@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@406@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@460@01))
(assert ($Perm.isReadVar $k@461@01))
(assert ($Perm.isReadVar $k@462@01))
(assert ($Perm.isReadVar $k@463@01))
(assert (and
  (< $k@460@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@460@01))
  (< $k@461@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@461@01))
  (<
    i_V4@458@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
  (< $k@462@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@462@01))
  (< $k@463@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@463@01))
  (<
    j_V4@459@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@406@01)
      $Snap.unit) dm_V0@361@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01)))
; [eval] LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, i_V4, j_V4)
(push) ; 11
(declare-const $k@464@01 $Perm)
(assert ($Perm.isReadVar $k@464@01))
(assert (< $k@464@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@464@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@464@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@464@01))
(assert (and
  (< $k@464@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@464@01))
  (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01)))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 121 | !(j_V4@459@01 < lenY_V2@398@01 && 0 <= j_V4@459@01 && i_V4@458@01 < x_V3@405@01 && 0 <= i_V4@458@01)]
(assert (not
  (and
    (and
      (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
      (< i_V4@458@01 x_V3@405@01))
    (<= 0 i_V4@458@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@460@01))
(assert ($Perm.isReadVar $k@461@01))
(assert ($Perm.isReadVar $k@462@01))
(assert ($Perm.isReadVar $k@463@01))
(assert ($Perm.isReadVar $k@464@01))
(assert (=>
  (and
    (and
      (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
      (< i_V4@458@01 x_V3@405@01))
    (<= 0 i_V4@458@01))
  (and
    (< j_V4@459@01 lenY_V2@398@01)
    (<= 0 j_V4@459@01)
    (< i_V4@458@01 x_V3@405@01)
    (<= 0 i_V4@458@01)
    (< $k@460@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@460@01))
    (< $k@461@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@461@01))
    (<
      i_V4@458@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
    (< $k@462@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@462@01))
    (< $k@463@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@463@01))
    (<
      j_V4@459@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@406@01)
        $Snap.unit) dm_V0@361@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@406@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01)
    (< $k@464@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@464@01))
    (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
        (< i_V4@458@01 x_V3@405@01))
      (<= 0 i_V4@458@01)))
  (and
    (and
      (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
      (< i_V4@458@01 x_V3@405@01))
    (<= 0 i_V4@458@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@460@01))
(assert ($Perm.isReadVar $k@461@01))
(assert ($Perm.isReadVar $k@462@01))
(assert ($Perm.isReadVar $k@463@01))
(assert ($Perm.isReadVar $k@464@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V4@458@01 Int) (j_V4@459@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@458@01)
      (and
        (<= 0 i_V4@458@01)
        (=>
          (< i_V4@458@01 x_V3@405@01)
          (and
            (< i_V4@458@01 x_V3@405@01)
            (or (not (<= 0 j_V4@459@01)) (<= 0 j_V4@459@01))))
        (or (not (< i_V4@458@01 x_V3@405@01)) (< i_V4@458@01 x_V3@405@01))))
    (or (not (<= 0 i_V4@458@01)) (<= 0 i_V4@458@01))
    (=>
      (and
        (and
          (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
          (< i_V4@458@01 x_V3@405@01))
        (<= 0 i_V4@458@01))
      (and
        (< j_V4@459@01 lenY_V2@398@01)
        (<= 0 j_V4@459@01)
        (< i_V4@458@01 x_V3@405@01)
        (<= 0 i_V4@458@01)
        (< $k@460@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@460@01))
        (< $k@461@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@461@01))
        (<
          i_V4@458@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
        (< $k@462@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@462@01))
        (< $k@463@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@463@01))
        (<
          j_V4@459@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@406@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@406@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01)
        (< $k@464@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@464@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
            (< i_V4@458@01 x_V3@405@01))
          (<= 0 i_V4@458@01)))
      (and
        (and
          (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
          (< i_V4@458@01 x_V3@405@01))
        (<= 0 i_V4@458@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01))
  :qid |prog.l717-aux|)))
(assert (forall ((i_V4@458@01 Int) (j_V4@459@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@458@01)
      (and
        (<= 0 i_V4@458@01)
        (=>
          (< i_V4@458@01 x_V3@405@01)
          (and
            (< i_V4@458@01 x_V3@405@01)
            (or (not (<= 0 j_V4@459@01)) (<= 0 j_V4@459@01))))
        (or (not (< i_V4@458@01 x_V3@405@01)) (< i_V4@458@01 x_V3@405@01))))
    (or (not (<= 0 i_V4@458@01)) (<= 0 i_V4@458@01))
    (=>
      (and
        (and
          (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
          (< i_V4@458@01 x_V3@405@01))
        (<= 0 i_V4@458@01))
      (and
        (< j_V4@459@01 lenY_V2@398@01)
        (<= 0 j_V4@459@01)
        (< i_V4@458@01 x_V3@405@01)
        (<= 0 i_V4@458@01)
        (< $k@460@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@460@01))
        (< $k@461@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@461@01))
        (<
          i_V4@458@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
        (< $k@462@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@462@01))
        (< $k@463@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@463@01))
        (<
          j_V4@459@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@406@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@406@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01)
        (< $k@464@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@464@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
            (< i_V4@458@01 x_V3@405@01))
          (<= 0 i_V4@458@01)))
      (and
        (and
          (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
          (< i_V4@458@01 x_V3@405@01))
        (<= 0 i_V4@458@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01))
  :qid |prog.l717-aux|)))
(assert (forall ((i_V4@458@01 Int) (j_V4@459@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
        (< i_V4@458@01 x_V3@405@01))
      (<= 0 i_V4@458@01))
    (and
      (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
        ($Snap.first $t@406@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01)
      (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01))
  :qid |prog.l717_precondition|)))
(push) ; 8
(assert (not (forall ((i_V4@458@01 Int) (j_V4@459@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and
            (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
            (< i_V4@458@01 x_V3@405@01))
          (<= 0 i_V4@458@01))
        (and
          (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
            ($Snap.first $t@406@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01)
          (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01)))
      (and
        (and
          (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
          (< i_V4@458@01 x_V3@405@01))
        (<= 0 i_V4@458@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@406@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01)
      (LookupL_4b5075e4_F ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01))
  :qid |prog.l717|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V4@458@01 Int) (j_V4@459@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V4@459@01 lenY_V2@398@01) (<= 0 j_V4@459@01))
        (< i_V4@458@01 x_V3@405@01))
      (<= 0 i_V4@458@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@406@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01)
      (LookupL_4b5075e4_F ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@458@01 j_V4@459@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@458@01 j_V4@459@01))
  :qid |prog.l717|)))
; [eval] (forall j_V6: Int :: { lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, x_V3, j_V6) } { LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, x_V3, j_V6) } 0 <= j_V6 && j_V6 < y_V5 ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, x_V3, j_V6) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, x_V3, j_V6))
(declare-const j_V6@465@01 Int)
(push) ; 8
; [eval] 0 <= j_V6 && j_V6 < y_V5 ==> lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, x_V3, j_V6) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, x_V3, j_V6)
; [eval] 0 <= j_V6 && j_V6 < y_V5
; [eval] 0 <= j_V6
(push) ; 9
; [then-branch: 122 | 0 <= j_V6@465@01 | live]
; [else-branch: 122 | !(0 <= j_V6@465@01) | live]
(push) ; 10
; [then-branch: 122 | 0 <= j_V6@465@01]
(assert (<= 0 j_V6@465@01))
; [eval] j_V6 < y_V5
(pop) ; 10
(push) ; 10
; [else-branch: 122 | !(0 <= j_V6@465@01)]
(assert (not (<= 0 j_V6@465@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V6@465@01)) (<= 0 j_V6@465@01)))
(push) ; 9
; [then-branch: 123 | j_V6@465@01 < 0 && 0 <= j_V6@465@01 | live]
; [else-branch: 123 | !(j_V6@465@01 < 0 && 0 <= j_V6@465@01) | live]
(push) ; 10
; [then-branch: 123 | j_V6@465@01 < 0 && 0 <= j_V6@465@01]
(assert (and (< j_V6@465@01 0) (<= 0 j_V6@465@01)))
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, x_V3, j_V6) == LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, x_V3, j_V6)
; [eval] lookup_4b5075e4_PMDenseMatrix(dm_V0_CN0, x_V3, j_V6)
(push) ; 11
(declare-const $k@466@01 $Perm)
(assert ($Perm.isReadVar $k@466@01))
(assert (< $k@466@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@466@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@466@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= i_V0
; [eval] i_V0 < lenX_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@467@01 $Perm)
(assert ($Perm.isReadVar $k@467@01))
(assert (< $k@467@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@467@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@467@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@467@01))
(assert (and
  (< $k@467@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@467@01))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  x_V3@405@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  x_V3@405@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01)))
; [eval] 0 <= j_V0
; [eval] j_V0 < lenY_4b5075e4_PMDenseMatrix(m_V0)
; [eval] lenY_4b5075e4_PMDenseMatrix(m_V0)
(push) ; 12
(declare-const $k@468@01 $Perm)
(assert ($Perm.isReadVar $k@468@01))
(assert (< $k@468@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@468@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@468@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] !(lenX_4b5075e4_PMDenseMatrix(m_V0) == 0)
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0) == 0
; [eval] lenX_4b5075e4_PMDenseMatrix(m_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@469@01 $Perm)
(assert ($Perm.isReadVar $k@469@01))
(assert (< $k@469@01 (/ (to_real 1) (to_real 4))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@469@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@469@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@469@01))
(assert (and
  (< $k@469@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@469@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@468@01))
(assert ($Perm.isReadVar $k@469@01))
(assert (and
  (< $k@468@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@468@01))
  (< $k@469@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@469@01))))
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  j_V6@465@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@406@01) $Snap.unit) dm_V0@361@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  j_V6@465@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@406@01) $Snap.unit) dm_V0@361@01)))
(assert (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@406@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@466@01))
(assert ($Perm.isReadVar $k@467@01))
(assert ($Perm.isReadVar $k@468@01))
(assert ($Perm.isReadVar $k@469@01))
(assert (and
  (< $k@466@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@466@01))
  (< $k@467@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@467@01))
  (<
    x_V3@405@01
    (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
  (< $k@468@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@468@01))
  (< $k@469@01 (/ (to_real 1) (to_real 4)))
  (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@469@01))
  (<
    j_V6@465@01
    (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
      ($Snap.first $t@406@01)
      $Snap.unit) dm_V0@361@01))
  (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01)))
; [eval] LookupL_4b5075e4_F(sm_V0_CN1, lenX_V2, lenY_V2, x_V3, j_V6)
(push) ; 11
(declare-const $k@470@01 $Perm)
(assert ($Perm.isReadVar $k@470@01))
(assert (< $k@470@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@470@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@470@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@470@01))
(assert (and
  (< $k@470@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@470@01))
  (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01)))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 123 | !(j_V6@465@01 < 0 && 0 <= j_V6@465@01)]
(assert (not (and (< j_V6@465@01 0) (<= 0 j_V6@465@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@466@01))
(assert ($Perm.isReadVar $k@467@01))
(assert ($Perm.isReadVar $k@468@01))
(assert ($Perm.isReadVar $k@469@01))
(assert ($Perm.isReadVar $k@470@01))
(assert (=>
  (and (< j_V6@465@01 0) (<= 0 j_V6@465@01))
  (and
    (< j_V6@465@01 0)
    (<= 0 j_V6@465@01)
    (< $k@466@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@466@01))
    (< $k@467@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@467@01))
    (<
      x_V3@405@01
      (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
    (< $k@468@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@468@01))
    (< $k@469@01 (/ (to_real 1) (to_real 4)))
    (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@469@01))
    (<
      j_V6@465@01
      (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@406@01)
        $Snap.unit) dm_V0@361@01))
    (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
      ($Snap.first $t@406@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01)
    (< $k@470@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@470@01))
    (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01))))
; Joined path conditions
(assert (or
  (not (and (< j_V6@465@01 0) (<= 0 j_V6@465@01)))
  (and (< j_V6@465@01 0) (<= 0 j_V6@465@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@466@01))
(assert ($Perm.isReadVar $k@467@01))
(assert ($Perm.isReadVar $k@468@01))
(assert ($Perm.isReadVar $k@469@01))
(assert ($Perm.isReadVar $k@470@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j_V6@465@01 Int)) (!
  (and
    (or (not (<= 0 j_V6@465@01)) (<= 0 j_V6@465@01))
    (=>
      (and (< j_V6@465@01 0) (<= 0 j_V6@465@01))
      (and
        (< j_V6@465@01 0)
        (<= 0 j_V6@465@01)
        (< $k@466@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@466@01))
        (< $k@467@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@467@01))
        (<
          x_V3@405@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
        (< $k@468@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@468@01))
        (< $k@469@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@469@01))
        (<
          j_V6@465@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@406@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@406@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01)
        (< $k@470@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@470@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01)))
    (or
      (not (and (< j_V6@465@01 0) (<= 0 j_V6@465@01)))
      (and (< j_V6@465@01 0) (<= 0 j_V6@465@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01))
  :qid |prog.l723-aux|)))
(assert (forall ((j_V6@465@01 Int)) (!
  (and
    (or (not (<= 0 j_V6@465@01)) (<= 0 j_V6@465@01))
    (=>
      (and (< j_V6@465@01 0) (<= 0 j_V6@465@01))
      (and
        (< j_V6@465@01 0)
        (<= 0 j_V6@465@01)
        (< $k@466@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@466@01))
        (< $k@467@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@467@01))
        (<
          x_V3@405@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@406@01) dm_V0@361@01))
        (< $k@468@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@468@01))
        (< $k@469@01 (/ (to_real 1) (to_real 4)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 4)) $k@469@01))
        (<
          j_V6@465@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@406@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@406@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01)
        (< $k@470@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@470@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01)))
    (or
      (not (and (< j_V6@465@01 0) (<= 0 j_V6@465@01)))
      (and (< j_V6@465@01 0) (<= 0 j_V6@465@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01))
  :qid |prog.l723-aux|)))
(assert (forall ((j_V6@465@01 Int)) (!
  (=>
    (and (< j_V6@465@01 0) (<= 0 j_V6@465@01))
    (and
      (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
        ($Snap.first $t@406@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01)
      (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01))
  :qid |prog.l723_precondition|)))
(push) ; 8
(assert (not (forall ((j_V6@465@01 Int)) (!
  (=>
    (and
      (=>
        (and (< j_V6@465@01 0) (<= 0 j_V6@465@01))
        (and
          (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
            ($Snap.first $t@406@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01)
          (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01)))
      (and (< j_V6@465@01 0) (<= 0 j_V6@465@01)))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@406@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01)
      (LookupL_4b5075e4_F ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01))
  :qid |prog.l723|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j_V6@465@01 Int)) (!
  (=>
    (and (< j_V6@465@01 0) (<= 0 j_V6@465@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@406@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01)
      (LookupL_4b5075e4_F ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@406@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@465@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@406@01)) sm_V0_CN1@404@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@465@01))
  :qid |prog.l723|)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 8
(assert ($Perm.isReadVar $k@435@01))
(assert ($Perm.isReadVar $k@436@01))
(assert ($Perm.isReadVar $k@437@01))
(assert ($Perm.isReadVar $k@438@01))
(assert ($Perm.isReadVar $k@439@01))
(assert ($Perm.isReadVar $k@442@01))
(assert ($Perm.isReadVar $k@443@01))
(assert ($Perm.isReadVar $k@444@01))
(assert ($Perm.isReadVar $k@445@01))
(assert ($Perm.isReadVar $k@446@01))
(assert ($Perm.isReadVar $k@448@01))
(assert ($Perm.isReadVar $k@449@01))
(assert ($Perm.isReadVar $k@450@01))
(assert ($Perm.isReadVar $k@451@01))
(assert ($Perm.isReadVar $k@452@01))
(assert (= $t@434@01 ($Snap.combine ($Snap.first $t@434@01) ($Snap.second $t@434@01))))
(assert (=
  ($Snap.second $t@434@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@434@01))
    ($Snap.second ($Snap.second $t@434@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@434@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@434@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@434@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@434@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))
  $Snap.unit))
(assert (< $k@435@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@435@01)))
(assert (lenX_4b5075e4_PMDenseMatrix%precondition ($Snap.first $t@434@01) dm_V0@361@01))
(assert (=
  lenX_V2@395@01
  (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))
  $Snap.unit))
(assert (<= 0 y_V5@433@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))
  $Snap.unit))
(assert (< $k@436@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@436@01)))
(assert (< $k@437@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@437@01)))
(assert (not (= (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01) 0)))
(assert (lenY_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
  ($Snap.first $t@434@01)
  $Snap.unit) dm_V0@361@01))
(assert (<=
  y_V5@433@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@434@01) $Snap.unit) dm_V0@361@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))
  $Snap.unit))
(assert (< $k@438@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@438@01)))
(assert (< $k@439@01 (/ (to_real 1) (to_real 8))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@439@01)))
(assert (=
  lenY_V2@398@01
  (lenY_4b5075e4_PMDenseMatrix ($Snap.combine ($Snap.first $t@434@01) $Snap.unit) dm_V0@361@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))))
  $Snap.unit))
(assert (forall ((i_V4@440@01 Int) (j_V4@441@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@440@01)
      (and
        (<= 0 i_V4@440@01)
        (=>
          (< i_V4@440@01 x_V3@405@01)
          (and
            (< i_V4@440@01 x_V3@405@01)
            (or (not (<= 0 j_V4@441@01)) (<= 0 j_V4@441@01))))
        (or (not (< i_V4@440@01 x_V3@405@01)) (< i_V4@440@01 x_V3@405@01))))
    (or (not (<= 0 i_V4@440@01)) (<= 0 i_V4@440@01))
    (=>
      (and
        (and
          (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
          (< i_V4@440@01 x_V3@405@01))
        (<= 0 i_V4@440@01))
      (and
        (< j_V4@441@01 lenY_V2@398@01)
        (<= 0 j_V4@441@01)
        (< i_V4@440@01 x_V3@405@01)
        (<= 0 i_V4@440@01)
        (< $k@442@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@442@01))
        (< $k@443@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@443@01))
        (<
          i_V4@440@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
        (< $k@444@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@444@01))
        (< $k@445@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@445@01))
        (<
          j_V4@441@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@434@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@434@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01)
        (< $k@446@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@446@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
            (< i_V4@440@01 x_V3@405@01))
          (<= 0 i_V4@440@01)))
      (and
        (and
          (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
          (< i_V4@440@01 x_V3@405@01))
        (<= 0 i_V4@440@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@434@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01))
  :qid |prog.l717-aux|)))
(assert (forall ((i_V4@440@01 Int) (j_V4@441@01 Int)) (!
  (and
    (=>
      (<= 0 i_V4@440@01)
      (and
        (<= 0 i_V4@440@01)
        (=>
          (< i_V4@440@01 x_V3@405@01)
          (and
            (< i_V4@440@01 x_V3@405@01)
            (or (not (<= 0 j_V4@441@01)) (<= 0 j_V4@441@01))))
        (or (not (< i_V4@440@01 x_V3@405@01)) (< i_V4@440@01 x_V3@405@01))))
    (or (not (<= 0 i_V4@440@01)) (<= 0 i_V4@440@01))
    (=>
      (and
        (and
          (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
          (< i_V4@440@01 x_V3@405@01))
        (<= 0 i_V4@440@01))
      (and
        (< j_V4@441@01 lenY_V2@398@01)
        (<= 0 j_V4@441@01)
        (< i_V4@440@01 x_V3@405@01)
        (<= 0 i_V4@440@01)
        (< $k@442@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@442@01))
        (< $k@443@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@443@01))
        (<
          i_V4@440@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
        (< $k@444@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@444@01))
        (< $k@445@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@445@01))
        (<
          j_V4@441@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@434@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@434@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01)
        (< $k@446@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@446@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01)))
    (or
      (not
        (and
          (and
            (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
            (< i_V4@440@01 x_V3@405@01))
          (<= 0 i_V4@440@01)))
      (and
        (and
          (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
          (< i_V4@440@01 x_V3@405@01))
        (<= 0 i_V4@440@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01))
  :qid |prog.l717-aux|)))
(assert (forall ((i_V4@440@01 Int) (j_V4@441@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V4@441@01 lenY_V2@398@01) (<= 0 j_V4@441@01))
        (< i_V4@440@01 x_V3@405@01))
      (<= 0 i_V4@440@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@434@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01)
      (LookupL_4b5075e4_F ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@434@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 i_V4@440@01 j_V4@441@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 i_V4@440@01 j_V4@441@01))
  :qid |prog.l717|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@01)))))))))
  $Snap.unit))
(assert (forall ((j_V6@447@01 Int)) (!
  (and
    (or (not (<= 0 j_V6@447@01)) (<= 0 j_V6@447@01))
    (=>
      (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))
      (and
        (< j_V6@447@01 y_V5@433@01)
        (<= 0 j_V6@447@01)
        (< $k@448@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@448@01))
        (< $k@449@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@449@01))
        (<
          x_V3@405@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
        (< $k@450@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@450@01))
        (< $k@451@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@451@01))
        (<
          j_V6@447@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@434@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@434@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01)
        (< $k@452@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@452@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01)))
    (or
      (not (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01)))
      (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@434@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01))
  :qid |prog.l723-aux|)))
(assert (forall ((j_V6@447@01 Int)) (!
  (and
    (or (not (<= 0 j_V6@447@01)) (<= 0 j_V6@447@01))
    (=>
      (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))
      (and
        (< j_V6@447@01 y_V5@433@01)
        (<= 0 j_V6@447@01)
        (< $k@448@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@448@01))
        (< $k@449@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@449@01))
        (<
          x_V3@405@01
          (lenX_4b5075e4_PMDenseMatrix ($Snap.first $t@434@01) dm_V0@361@01))
        (< $k@450@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@450@01))
        (< $k@451@01 (/ (to_real 1) (to_real 8)))
        (<= $Perm.No (- (/ (to_real 1) (to_real 8)) $k@451@01))
        (<
          j_V6@447@01
          (lenY_4b5075e4_PMDenseMatrix ($Snap.combine
            ($Snap.first $t@434@01)
            $Snap.unit) dm_V0@361@01))
        (lookup_4b5075e4_PMDenseMatrix%precondition ($Snap.combine
          ($Snap.first $t@434@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01)
        (< $k@452@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@452@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01)))
    (or
      (not (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01)))
      (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01))
  :qid |prog.l723-aux|)))
(assert (forall ((j_V6@447@01 Int)) (!
  (=>
    (and (< j_V6@447@01 y_V5@433@01) (<= 0 j_V6@447@01))
    (=
      (lookup_4b5075e4_PMDenseMatrix ($Snap.combine
        ($Snap.first $t@434@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01)
      (LookupL_4b5075e4_F ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01)))
  :pattern ((lookup_4b5075e4_PMDenseMatrix%limited ($Snap.combine
    ($Snap.first $t@434@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) dm_V0@361@01 x_V3@405@01 j_V6@447@01))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first ($Snap.second $t@434@01)) sm_V0_CN1@432@01 lenX_V2@395@01 lenY_V2@398@01 x_V3@405@01 j_V6@447@01))
  :qid |prog.l723|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] y_V5 < lenY_V2
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (< y_V5@433@01 lenY_V2@398@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< y_V5@433@01 lenY_V2@398@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | y_V5@433@01 < lenY_V2@398@01 | live]
; [else-branch: 124 | !(y_V5@433@01 < lenY_V2@398@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 124 | y_V5@433@01 < lenY_V2@398@01]
(assert (< y_V5@433@01 lenY_V2@398@01))
; [exec]
; var N26: ShStruct2[Ref, Ref]
(declare-const N26@471@01 ShStruct2<Ref~_Ref>)
; [exec]
; var e_V7: ShStruct3[Ref, Ref, Ref]
(declare-const e_V7@472@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; var N25: ShStruct3[Ref, Ref, Ref]
(declare-const N25@473@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; var fn$$0: ShStruct3[Ref, Ref, Ref]
(declare-const fn$$0@474@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; var fn$$4: ShStruct2[Ref, Ref]
(declare-const fn$$4@475@01 ShStruct2<Ref~_Ref>)
; [exec]
; unfold acc(denseMatrix_4b5075e4_F(dm_V0_CN0), 1 / 8)
(assert (=
  ($Snap.first $t@434@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@434@01))
    ($Snap.second ($Snap.first $t@434@01)))))
; [eval] (ShStructget0of1(m_V0): Ref)
(assert (not (= (ShStructget0of1<Ref> dm_V0@361@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@434@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@434@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@434@01))))))
(declare-const i_V1@476@01 Int)
(push) ; 10
; [eval] 0 <= i_V1 && i_V1 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V1
(push) ; 11
; [then-branch: 125 | 0 <= i_V1@476@01 | live]
; [else-branch: 125 | !(0 <= i_V1@476@01) | live]
(push) ; 12
; [then-branch: 125 | 0 <= i_V1@476@01]
(assert (<= 0 i_V1@476@01))
; [eval] i_V1 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget0of1(m_V0): Ref)
(pop) ; 12
(push) ; 12
; [else-branch: 125 | !(0 <= i_V1@476@01)]
(assert (not (<= 0 i_V1@476@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@476@01)) (<= 0 i_V1@476@01)))
(assert (and
  (<
    i_V1@476@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
  (<= 0 i_V1@476@01)))
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V1): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(pop) ; 10
(declare-fun inv@477@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@476@01 Int)) (!
  (=>
    (and
      (<
        i_V1@476@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 i_V1@476@01))
    (or (not (<= 0 i_V1@476@01)) (<= 0 i_V1@476@01)))
  :pattern ((sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V1@476@01))
  :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@476@01 Int)) (!
  (=>
    (and
      (<
        i_V1@476@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 i_V1@476@01))
    (=
      (inv@477@01 (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V1@476@01))
      i_V1@476@01))
  :pattern ((sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V1@476@01))
  :qid |quant-u-62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@477@01 r))
      r))
  :pattern ((inv@477@01 r))
  :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@476@01 Int)) (!
  (=>
    (and
      (<
        i_V1@476@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 i_V1@476@01))
    (not
      (=
        (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V1@476@01)
        $Ref.null)))
  :pattern ((sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V1@476@01))
  :qid |SliceIntint$$$_S_$$$$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first $t@434@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@434@01)))))))
(declare-const i_V2@478@01 Int)
(declare-const j_V2@479@01 Int)
(push) ; 10
; [eval] 0 <= i_V2 && (i_V2 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int) && (0 <= j_V2 && j_V2 < (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)))
; [eval] 0 <= i_V2
(push) ; 11
; [then-branch: 126 | 0 <= i_V2@478@01 | live]
; [else-branch: 126 | !(0 <= i_V2@478@01) | live]
(push) ; 12
; [then-branch: 126 | 0 <= i_V2@478@01]
(assert (<= 0 i_V2@478@01))
; [eval] i_V2 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget0of1(m_V0): Ref)
(push) ; 13
; [then-branch: 127 | i_V2@478@01 < slen[Int](First:(First:($t@434@01))) | live]
; [else-branch: 127 | !(i_V2@478@01 < slen[Int](First:(First:($t@434@01)))) | live]
(push) ; 14
; [then-branch: 127 | i_V2@478@01 < slen[Int](First:(First:($t@434@01)))]
(assert (<
  i_V2@478@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
; [eval] 0 <= j_V2
(push) ; 15
; [then-branch: 128 | 0 <= j_V2@479@01 | live]
; [else-branch: 128 | !(0 <= j_V2@479@01) | live]
(push) ; 16
; [then-branch: 128 | 0 <= j_V2@479@01]
(assert (<= 0 j_V2@479@01))
; [eval] j_V2 < (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@480@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef27|)))
(declare-const pm@481@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@481@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@481@01  $FPM) r))
  :qid |qp.resPrmSumDef28|)))
(push) ; 17
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@481@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
(push) ; 16
; [else-branch: 128 | !(0 <= j_V2@479@01)]
(assert (not (<= 0 j_V2@479@01)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@481@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@481@01  $FPM) r))
  :qid |qp.resPrmSumDef28|)))
; Joined path conditions
(assert (or (not (<= 0 j_V2@479@01)) (<= 0 j_V2@479@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 127 | !(i_V2@478@01 < slen[Int](First:(First:($t@434@01))))]
(assert (not
  (<
    i_V2@478@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@481@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@481@01  $FPM) r))
  :qid |qp.resPrmSumDef28|)))
(assert (=>
  (<
    i_V2@478@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
  (and
    (<
      i_V2@478@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
    (or (not (<= 0 j_V2@479@01)) (<= 0 j_V2@479@01)))))
; Joined path conditions
(assert (or
  (not
    (<
      i_V2@478@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
  (<
    i_V2@478@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))))
(pop) ; 12
(push) ; 12
; [else-branch: 126 | !(0 <= i_V2@478@01)]
(assert (not (<= 0 i_V2@478@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@481@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@481@01  $FPM) r))
  :qid |qp.resPrmSumDef28|)))
(assert (=>
  (<= 0 i_V2@478@01)
  (and
    (<= 0 i_V2@478@01)
    (=>
      (<
        i_V2@478@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (and
        (<
          i_V2@478@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (or (not (<= 0 j_V2@479@01)) (<= 0 j_V2@479@01))))
    (or
      (not
        (<
          i_V2@478@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<
        i_V2@478@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))))))
; Joined path conditions
(assert (or (not (<= 0 i_V2@478@01)) (<= 0 i_V2@478@01)))
(assert (and
  (and
    (and
      (<
        j_V2@479@01
        (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01))))
      (<= 0 j_V2@479@01))
    (<
      i_V2@478@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
  (<= 0 i_V2@478@01)))
; [eval] (sloc((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, j_V2): Ref)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V2): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@482@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef29|)))
(declare-const pm@483@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@483@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@483@01  $FPM) r))
  :qid |qp.resPrmSumDef30|)))
(push) ; 11
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@483@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(declare-fun inv@484@01 ($Ref) Int)
(declare-fun inv@485@01 ($Ref) Int)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@481@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@481@01  $FPM) r))
  :qid |qp.resPrmSumDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@483@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@483@01  $FPM) r))
  :qid |qp.resPrmSumDef30|)))
; Nested auxiliary terms: non-globals
(assert (forall ((i_V2@478@01 Int) (j_V2@479@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V2@479@01
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01))))
          (<= 0 j_V2@479@01))
        (<
          i_V2@478@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 i_V2@478@01))
    (and
      (=>
        (<= 0 i_V2@478@01)
        (and
          (<= 0 i_V2@478@01)
          (=>
            (<
              i_V2@478@01
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
            (and
              (<
                i_V2@478@01
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
              (or (not (<= 0 j_V2@479@01)) (<= 0 j_V2@479@01))))
          (or
            (not
              (<
                i_V2@478@01
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
            (<
              i_V2@478@01
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))))
      (or (not (<= 0 i_V2@478@01)) (<= 0 i_V2@478@01))))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01))) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01)) j_V2@479@01))
  :pattern ((sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01)) j_V2@479@01))
  :qid |Intint$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V2@478@01 Int) (j_V2@479@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V2@479@01
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01))))
          (<= 0 j_V2@479@01))
        (<
          i_V2@478@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 i_V2@478@01))
    (and
      (=
        (inv@484@01 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01)) j_V2@479@01))
        i_V2@478@01)
      (=
        (inv@485@01 (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01)) j_V2@479@01))
        j_V2@479@01)))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01))) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01)) j_V2@479@01))
  :pattern ((sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01)) j_V2@479@01))
  :qid |quant-u-64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r))) (inv@485@01 r))
      r))
  :pattern ((inv@484@01 r))
  :pattern ((inv@485@01 r))
  :qid |Intint$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V2@478@01 Int) (j_V2@479@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<
            j_V2@479@01
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01))))
          (<= 0 j_V2@479@01))
        (<
          i_V2@478@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 i_V2@478@01))
    (not
      (=
        (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01)) j_V2@479@01)
        $Ref.null)))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01))) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01)) j_V2@479@01))
  :pattern ((sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@482@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V2@478@01)) j_V2@479@01))
  :qid |Intint$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@434@01))))
  $Snap.unit))
; [eval] (forall i_V3: Int :: { (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) } 0 <= i_V3 && i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int) ==> (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) == (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int))
(declare-const i_V3@486@01 Int)
(push) ; 10
; [eval] 0 <= i_V3 && i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int) ==> (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) == (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V3 && i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] 0 <= i_V3
(push) ; 11
; [then-branch: 129 | 0 <= i_V3@486@01 | live]
; [else-branch: 129 | !(0 <= i_V3@486@01) | live]
(push) ; 12
; [then-branch: 129 | 0 <= i_V3@486@01]
(assert (<= 0 i_V3@486@01))
; [eval] i_V3 < (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget0of1(m_V0): Ref)
(pop) ; 12
(push) ; 12
; [else-branch: 129 | !(0 <= i_V3@486@01)]
(assert (not (<= 0 i_V3@486@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V3@486@01)) (<= 0 i_V3@486@01)))
(push) ; 11
; [then-branch: 130 | i_V3@486@01 < slen[Int](First:(First:($t@434@01))) && 0 <= i_V3@486@01 | live]
; [else-branch: 130 | !(i_V3@486@01 < slen[Int](First:(First:($t@434@01))) && 0 <= i_V3@486@01) | live]
(push) ; 12
; [then-branch: 130 | i_V3@486@01 < slen[Int](First:(First:($t@434@01))) && 0 <= i_V3@486@01]
(assert (and
  (<
    i_V3@486@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
  (<= 0 i_V3@486@01)))
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int) == (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, i_V3): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@487@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@487@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@487@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef31|)))
(declare-const pm@488@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@488@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@488@01  $FPM) r))
  :qid |qp.resPrmSumDef32|)))
(push) ; 13
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@488@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V3@486@01)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] (slen((sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (sloc((ShStructget0of1(m_V0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, 0): Ref)
; [eval] (ShStructget0of1(m_V0): Ref)
(declare-const sm@489@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@489@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@489@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef33|)))
(declare-const pm@490@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@490@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@490@01  $FPM) r))
  :qid |qp.resPrmSumDef34|)))
(push) ; 13
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@490@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(push) ; 12
; [else-branch: 130 | !(i_V3@486@01 < slen[Int](First:(First:($t@434@01))) && 0 <= i_V3@486@01)]
(assert (not
  (and
    (<
      i_V3@486@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
    (<= 0 i_V3@486@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@487@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@487@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@488@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@488@01  $FPM) r))
  :qid |qp.resPrmSumDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@489@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@489@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef33|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@490@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@490@01  $FPM) r))
  :qid |qp.resPrmSumDef34|)))
; Joined path conditions
(assert (or
  (not
    (and
      (<
        i_V3@486@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 i_V3@486@01)))
  (and
    (<
      i_V3@486@01
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
    (<= 0 i_V3@486@01))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@487@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@487@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@488@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@488@01  $FPM) r))
  :qid |qp.resPrmSumDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@489@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@489@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef33|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@490@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@490@01  $FPM) r))
  :qid |qp.resPrmSumDef34|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V3@486@01 Int)) (!
  (and
    (or (not (<= 0 i_V3@486@01)) (<= 0 i_V3@486@01))
    (or
      (not
        (and
          (<
            i_V3@486@01
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
          (<= 0 i_V3@486@01)))
      (and
        (<
          i_V3@486@01
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 i_V3@486@01))))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@487@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V3@486@01))))
  :qid |prog.l289-aux|)))
(assert (forall ((i_V3@486@01 Int)) (!
  (=>
    (and
      (<
        i_V3@486@01
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 i_V3@486@01))
    (=
      (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@487@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V3@486@01)))
      (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@489@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) 0)))))
  :pattern ((slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@487@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) i_V3@486@01))))
  :qid |prog.l289|)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (denseMatrix_4b5075e4_F%trigger ($Snap.first $t@434@01) dm_V0@361@01))
; [exec]
; inhale (let fn$$1 ==
;     (fn$$0) in
;     acc((ShStructget0of3(fn$$1): Ref).Intint$$$$_E_$$$, write) &&
;     (acc((ShStructget1of3(fn$$1): Ref).Intint$$$$_E_$$$, write) &&
;     acc((ShStructget2of3(fn$$1): Ref).Intint$$$$_E_$$$, write))) &&
;   (let fn$$2 ==
;     (fn$$0) in
;     (let fn$$3 ==
;       ((tuple3(y_V5, x_V3, (sloc((sloc((ShStructget0of1(dm_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$,
;       x_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, y_V5): Ref).Intint$$$$_E_$$$): Tuple3[Int, Int, Int])) in
;       (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ ==
;       (get0of3(fn$$3): Int) &&
;       ((ShStructget1of3(fn$$2): Ref).Intint$$$$_E_$$$ ==
;       (get1of3(fn$$3): Int) &&
;       (ShStructget2of3(fn$$2): Ref).Intint$$$$_E_$$$ ==
;       (get2of3(fn$$3): Int))))
(declare-const $t@491@01 $Snap)
(assert (= $t@491@01 ($Snap.combine ($Snap.first $t@491@01) ($Snap.second $t@491@01))))
(assert (=
  ($Snap.first $t@491@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@491@01))
    ($Snap.second ($Snap.first $t@491@01)))))
; [eval] (ShStructget0of3(fn$$1): Ref)
(declare-const sm@492@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@491@01)))))
(assert (<=
  $Perm.No
  (ite
    (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
  (not (= (ShStructget0of3<Ref> fn$$0@474@01) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.first $t@491@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@491@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@491@01))))))
; [eval] (ShStructget1of3(fn$$1): Ref)
(declare-const sm@493@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@491@01))))))
(assert (<=
  $Perm.No
  (ite
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
  (not (= (ShStructget1of3<Ref> fn$$0@474@01) $Ref.null))))
; [eval] (ShStructget2of3(fn$$1): Ref)
(declare-const sm@494@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.first $t@491@01))))))
(assert (<=
  $Perm.No
  (ite
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
  (not (= (ShStructget2of3<Ref> fn$$0@474@01) $Ref.null))))
(assert (= ($Snap.second $t@491@01) $Snap.unit))
; [eval] (let fn$$2 == (fn$$0) in (let fn$$3 == ((tuple3(y_V5, x_V3, (sloc((sloc((ShStructget0of1(dm_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, x_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, y_V5): Ref).Intint$$$$_E_$$$): Tuple3[Int, Int, Int])) in (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get1of3(fn$$3): Int) && (ShStructget2of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get2of3(fn$$3): Int))))
(declare-const letvar@495@01 ShStruct3<Ref~_Ref~_Ref>)
(assert (= (as letvar@495@01  ShStruct3<Ref~_Ref~_Ref>) fn$$0@474@01))
; [eval] (let fn$$3 == ((tuple3(y_V5, x_V3, (sloc((sloc((ShStructget0of1(dm_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, x_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, y_V5): Ref).Intint$$$$_E_$$$): Tuple3[Int, Int, Int])) in (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get1of3(fn$$3): Int) && (ShStructget2of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get2of3(fn$$3): Int)))
; [eval] (tuple3(y_V5, x_V3, (sloc((sloc((ShStructget0of1(dm_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, x_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, y_V5): Ref).Intint$$$$_E_$$$): Tuple3[Int, Int, Int])
; [eval] (sloc((sloc((ShStructget0of1(dm_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, x_V3): Ref).SliceIntint$$$_S_$$$$$$$_E_$$$, y_V5): Ref)
; [eval] (sloc((ShStructget0of1(dm_V0_CN0): Ref).SliceSliceIntint$$$_S_$$$$$$_S_$$$$$$$_E_$$$, x_V3): Ref)
; [eval] (ShStructget0of1(dm_V0_CN0): Ref)
(declare-const sm@496@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef35|)))
(declare-const pm@497@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@497@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@497@01  $FPM) r))
  :qid |qp.resPrmSumDef36|)))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@497@01  $FPM) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const sm@498@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef40|)))
(declare-const pm@499@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@499@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@499@01  $FPM) r))
  :qid |qp.resPrmSumDef41|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@499@01  $FPM) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(declare-const letvar@500@01 Tuple3<Int~_Int~_Int>)
(assert (=
  (as letvar@500@01  Tuple3<Int~_Int~_Int>)
  (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01)))))
; [eval] (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get1of3(fn$$3): Int) && (ShStructget2of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get2of3(fn$$3): Int))
; [eval] (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int)
; [eval] (ShStructget0of3(fn$$2): Ref)
(declare-const sm@501@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef45|)))
(declare-const pm@502@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@502@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@502@01  $FPM) r))
  :qid |qp.resPrmSumDef46|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@502@01  $FPM) (ShStructget0of3<Ref> fn$$0@474@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (get0of3(fn$$3): Int)
(push) ; 10
; [then-branch: 131 | Lookup(Intint$$$$_E_$$$, sm@501@01, ShStructget0of3[Ref](fn$$0@474@01)) == get0of3[Int](tuple3[Tuple3[Int, Int, Int]](y_V5@433@01, x_V3@405@01, Lookup(Intint$$$$_E_$$$, sm@498@01, sloc[Ref](Lookup(SliceIntint$$$_S_$$$$$$$_E_$$$, sm@496@01, sloc[Ref](First:(First:($t@434@01)), x_V3@405@01)), y_V5@433@01)))) | live]
; [else-branch: 131 | Lookup(Intint$$$$_E_$$$, sm@501@01, ShStructget0of3[Ref](fn$$0@474@01)) != get0of3[Int](tuple3[Tuple3[Int, Int, Int]](y_V5@433@01, x_V3@405@01, Lookup(Intint$$$$_E_$$$, sm@498@01, sloc[Ref](Lookup(SliceIntint$$$_S_$$$$$$$_E_$$$, sm@496@01, sloc[Ref](First:(First:($t@434@01)), x_V3@405@01)), y_V5@433@01)))) | live]
(push) ; 11
; [then-branch: 131 | Lookup(Intint$$$$_E_$$$, sm@501@01, ShStructget0of3[Ref](fn$$0@474@01)) == get0of3[Int](tuple3[Tuple3[Int, Int, Int]](y_V5@433@01, x_V3@405@01, Lookup(Intint$$$$_E_$$$, sm@498@01, sloc[Ref](Lookup(SliceIntint$$$_S_$$$$$$$_E_$$$, sm@496@01, sloc[Ref](First:(First:($t@434@01)), x_V3@405@01)), y_V5@433@01))))]
(assert (=
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
  (get0of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01))))))
; [eval] (ShStructget1of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get1of3(fn$$3): Int)
; [eval] (ShStructget1of3(fn$$2): Ref)
(declare-const sm@503@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef50|)))
(declare-const pm@504@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@504@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@504@01  $FPM) r))
  :qid |qp.resPrmSumDef51|)))
(push) ; 12
(assert (not (<
  $Perm.No
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@504@01  $FPM) (ShStructget1of3<Ref> fn$$0@474@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (get1of3(fn$$3): Int)
(push) ; 12
; [then-branch: 132 | Lookup(Intint$$$$_E_$$$, sm@503@01, ShStructget1of3[Ref](fn$$0@474@01)) == get1of3[Int](tuple3[Tuple3[Int, Int, Int]](y_V5@433@01, x_V3@405@01, Lookup(Intint$$$$_E_$$$, sm@498@01, sloc[Ref](Lookup(SliceIntint$$$_S_$$$$$$$_E_$$$, sm@496@01, sloc[Ref](First:(First:($t@434@01)), x_V3@405@01)), y_V5@433@01)))) | live]
; [else-branch: 132 | Lookup(Intint$$$$_E_$$$, sm@503@01, ShStructget1of3[Ref](fn$$0@474@01)) != get1of3[Int](tuple3[Tuple3[Int, Int, Int]](y_V5@433@01, x_V3@405@01, Lookup(Intint$$$$_E_$$$, sm@498@01, sloc[Ref](Lookup(SliceIntint$$$_S_$$$$$$$_E_$$$, sm@496@01, sloc[Ref](First:(First:($t@434@01)), x_V3@405@01)), y_V5@433@01)))) | live]
(push) ; 13
; [then-branch: 132 | Lookup(Intint$$$$_E_$$$, sm@503@01, ShStructget1of3[Ref](fn$$0@474@01)) == get1of3[Int](tuple3[Tuple3[Int, Int, Int]](y_V5@433@01, x_V3@405@01, Lookup(Intint$$$$_E_$$$, sm@498@01, sloc[Ref](Lookup(SliceIntint$$$_S_$$$$$$$_E_$$$, sm@496@01, sloc[Ref](First:(First:($t@434@01)), x_V3@405@01)), y_V5@433@01))))]
(assert (=
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
  (get1of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01))))))
; [eval] (ShStructget2of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get2of3(fn$$3): Int)
; [eval] (ShStructget2of3(fn$$2): Ref)
(declare-const sm@505@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef55|)))
(declare-const pm@506@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@506@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@506@01  $FPM) r))
  :qid |qp.resPrmSumDef56|)))
(push) ; 14
(assert (not (<
  $Perm.No
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@506@01  $FPM) (ShStructget2of3<Ref> fn$$0@474@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (get2of3(fn$$3): Int)
(pop) ; 13
(push) ; 13
; [else-branch: 132 | Lookup(Intint$$$$_E_$$$, sm@503@01, ShStructget1of3[Ref](fn$$0@474@01)) != get1of3[Int](tuple3[Tuple3[Int, Int, Int]](y_V5@433@01, x_V3@405@01, Lookup(Intint$$$$_E_$$$, sm@498@01, sloc[Ref](Lookup(SliceIntint$$$_S_$$$$$$$_E_$$$, sm@496@01, sloc[Ref](First:(First:($t@434@01)), x_V3@405@01)), y_V5@433@01))))]
(assert (not
  (=
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
    (get1of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01)))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@506@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@506@01  $FPM) r))
  :qid |qp.resPrmSumDef56|)))
; Joined path conditions
(assert (or
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
      (get1of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01))))))
  (=
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
    (get1of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01)))))))
(pop) ; 11
(push) ; 11
; [else-branch: 131 | Lookup(Intint$$$$_E_$$$, sm@501@01, ShStructget0of3[Ref](fn$$0@474@01)) != get0of3[Int](tuple3[Tuple3[Int, Int, Int]](y_V5@433@01, x_V3@405@01, Lookup(Intint$$$$_E_$$$, sm@498@01, sloc[Ref](Lookup(SliceIntint$$$_S_$$$$$$$_E_$$$, sm@496@01, sloc[Ref](First:(First:($t@434@01)), x_V3@405@01)), y_V5@433@01))))]
(assert (not
  (=
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
    (get0of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01)))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@504@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@504@01  $FPM) r))
  :qid |qp.resPrmSumDef51|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@506@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@506@01  $FPM) r))
  :qid |qp.resPrmSumDef56|)))
(assert (=>
  (=
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
    (get0of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01)))))
  (and
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
      (get0of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01)))))
    (or
      (not
        (=
          ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
          (get1of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01))))))
      (=
        ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
        (get1of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01)))))))))
; Joined path conditions
(assert (or
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
      (get0of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01))))))
  (=
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
    (get0of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01)))))))
(assert (and
  (and
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@505@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01))
      (get2of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01)))))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@503@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
      (get1of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01))))))
  (=
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@501@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
    (get0of3<Int> (tuple3<Tuple3<Int~_Int~_Int>> y_V5@433@01 x_V3@405@01 ($FVF.lookup_Intint$$$$_E_$$$ (as sm@498@01  $FVF<Intint$$$$_E_$$$>) (sloc<Ref> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@496@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) x_V3@405@01)) y_V5@433@01)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; N25 := fn$$0
; [exec]
; inhale e_V7 ==
;   shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$()
(declare-const $t@507@01 $Snap)
(assert (= $t@507@01 $Snap.unit))
; [eval] e_V7 == shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$()
; [eval] shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 10
(assert (shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 10
; Joined path conditions
(assert (shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  e_V7@472@01
  (shStructDefault_$rowA_Intint$$$_S_$$$_columnA_Intint$$$_S_$$$_valueA_Intint$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; e_V7 := N25
; [exec]
; fold acc(entry_4b5075e4_F(e_V7, lenX_V2, lenY_V2), write)
; [eval] (ShStructget0of3(e_V0): Ref)
; Precomputing data for removing quantified permissions
(define-fun pTaken@508@01 ((r $Ref)) $Perm
  (ite
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    ($Perm.min
      (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@509@01 ((r $Ref)) $Perm
  (ite
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    ($Perm.min
      (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@508@01 r)))
    $Perm.No))
(define-fun pTaken@510@01 ((r $Ref)) $Perm
  (ite
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    ($Perm.min
      (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@508@01 r)) (pTaken@509@01 r)))
    $Perm.No))
(define-fun pTaken@511@01 ((r $Ref)) $Perm
  (ite
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    ($Perm.min
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@508@01 r)) (pTaken@509@01 r))
        (pTaken@510@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (pTaken@508@01 (ShStructget0of3<Ref> fn$$0@474@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (= (- $Perm.Write (pTaken@508@01 r)) $Perm.No))
  
  :qid |quant-u-67|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@512@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map domain (instantiated)
(assert (Set_in (ShStructget0of3<Ref> fn$$0@474@01) ($FVF.domain_Intint$$$$_E_$$$ (as sm@512@01  $FVF<Intint$$$$_E_$$$>))))
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
  (=
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@512@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01)))))
(assert (=>
  (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
  (=
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@512@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01)))))
(assert (=>
  (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
  (=
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@512@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01)))))
(assert (=>
  (and
    (and
      (and
        (<
          (inv@485@01 (ShStructget0of3<Ref> fn$$0@474@01))
          (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 (ShStructget0of3<Ref> fn$$0@474@01))))))
        (<= 0 (inv@485@01 (ShStructget0of3<Ref> fn$$0@474@01))))
      (<
        (inv@484@01 (ShStructget0of3<Ref> fn$$0@474@01))
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
    (<= 0 (inv@484@01 (ShStructget0of3<Ref> fn$$0@474@01))))
  (=
    ($FVF.lookup_Intint$$$$_E_$$$ (as sm@512@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
    ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) (ShStructget0of3<Ref> fn$$0@474@01)))))
; [eval] 0 <= (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(e_V0): Ref)
(declare-const sm@513@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@513@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@513@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@513@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@513@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@513@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@513@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@513@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@513@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef65|)))
(declare-const pm@514@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@514@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@514@01  $FPM) r))
  :qid |qp.resPrmSumDef66|)))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@514@01  $FPM) (ShStructget0of3<Ref> fn$$0@474@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<=
  0
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@513@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@513@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))))
; [eval] (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$ < r_V0
; [eval] (ShStructget0of3(e_V0): Ref)
(declare-const sm@515@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@515@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@515@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@515@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@515@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@515@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@515@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@515@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@515@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef70|)))
(declare-const pm@516@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@516@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@516@01  $FPM) r))
  :qid |qp.resPrmSumDef71|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@516@01  $FPM) (ShStructget0of3<Ref> fn$$0@474@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@515@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
  lenX_V2@395@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
    (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
    (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (not
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01)))
    (not
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))))
  (and
    (not
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01)))
    (not
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))))
  (and
    (not
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01)))
    (not
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))))))
(declare-const sm@517@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@517@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@517@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef72|)))
(declare-const pm@518@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@518@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@518@01  $FPM) r))
  :qid |qp.resPrmSumDef73|)))
; Assume upper permission bound for field SliceIntint$$$_S_$$$$$$$_E_$$$
(assert (forall ((r $Ref)) (!
  (<=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@518@01  $FPM) r)
    $Perm.Write)
  :pattern ((inv@477@01 r))
  :qid |qp-fld-prm-bnd|)))
(declare-const sm@519@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@519@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@519@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@519@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@519@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@519@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@519@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@519@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@519@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef77|)))
(declare-const pm@520@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@520@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@520@01  $FPM) r))
  :qid |qp.resPrmSumDef78|)))
(assert (<=
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@520@01  $FPM) (ShStructget2of3<Ref> fn$$0@474@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@520@01  $FPM) (ShStructget1of3<Ref> fn$$0@474@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@520@01  $FPM) (ShStructget0of3<Ref> fn$$0@474@01))
  $Perm.Write))
; Assume upper permission bound for field Intint$$$$_E_$$$
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_Intint$$$$_E_$$$ (as pm@520@01  $FPM) r) $Perm.Write)
  :pattern ((inv@484@01 r))
  :pattern ((inv@485@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$ < r_V0
; [eval] (ShStructget0of3(e_V0): Ref)
(declare-const sm@521@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@521@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@521@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@521@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@521@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@521@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@521@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@521@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@521@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef82|)))
(declare-const pm@522@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@522@01  $FPM) r)
    (+
      (+
        (+
          (ite
            (and
              (and
                (and
                  (<
                    (inv@485@01 r)
                    (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
                  (<= 0 (inv@485@01 r)))
                (<
                  (inv@484@01 r)
                  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
              (<= 0 (inv@484@01 r)))
            (/ (to_real 1) (to_real 8))
            $Perm.No)
          (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@522@01  $FPM) r))
  :qid |qp.resPrmSumDef83|)))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@522@01  $FPM) (ShStructget0of3<Ref> fn$$0@474@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@521@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
  lenX_V2@395@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (and
  (not
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01)))
  (not
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01)))))
(declare-const sm@523@01 $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@477@01 r)
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
      (<= 0 (inv@477@01 r)))
    (=
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@523@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r)
      ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r)))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@523@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<SliceIntint$$$_S_$$$$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.first $t@434@01)))) r))
  :qid |qp.fvfValDef84|)))
(declare-const pm@524@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@524@01  $FPM) r)
    (ite
      (and
        (<
          (inv@477@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01)))))
        (<= 0 (inv@477@01 r)))
      (/ (to_real 1) (to_real 8))
      $Perm.No))
  :pattern (($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@524@01  $FPM) r))
  :qid |qp.resPrmSumDef85|)))
; Assume upper permission bound for field SliceIntint$$$_S_$$$$$$$_E_$$$
(assert (forall ((r $Ref)) (!
  (<=
    ($FVF.perm_SliceIntint$$$_S_$$$$$$$_E_$$$ (as pm@524@01  $FPM) r)
    $Perm.Write)
  :pattern ((inv@477@01 r))
  :qid |qp-fld-prm-bnd|)))
(declare-const sm@525@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@525@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@525@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@525@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@525@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@525@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@525@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef88|)))
(declare-const pm@526@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@526@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (and
              (and
                (<
                  (inv@485@01 r)
                  (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
                (<= 0 (inv@485@01 r)))
              (<
                (inv@484@01 r)
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
            (<= 0 (inv@484@01 r)))
          (/ (to_real 1) (to_real 8))
          $Perm.No)
        (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@526@01  $FPM) r))
  :qid |qp.resPrmSumDef89|)))
; Assume upper permission bound for field Intint$$$$_E_$$$
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_Intint$$$$_E_$$$ (as pm@526@01  $FPM) r) $Perm.Write)
  :pattern ((inv@484@01 r))
  :pattern ((inv@485@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@526@01  $FPM) (ShStructget1of3<Ref> fn$$0@474@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@526@01  $FPM) (ShStructget2of3<Ref> fn$$0@474@01))
  $Perm.Write))
; [eval] (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$ < r_V0
; [eval] (ShStructget0of3(e_V0): Ref)
(declare-const sm@527@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@527@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@527@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@527@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@527@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@527@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@527@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@527@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@527@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef93|)))
(declare-const pm@528@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@528@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@528@01  $FPM) r))
  :qid |qp.resPrmSumDef94|)))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@528@01  $FPM) (ShStructget0of3<Ref> fn$$0@474@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@527@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
  lenX_V2@395@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01))
    (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))
    (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
    (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) (ShStructget2of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (and
    (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))
    (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01)))
  (not
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) (ShStructget1of3<Ref> fn$$0@474@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (not
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01)))
    (not
      (= (ShStructget2of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))))
  (and
    (not
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01)))
    (not
      (= (ShStructget1of3<Ref> fn$$0@474@01) (ShStructget0of3<Ref> fn$$0@474@01))))
  (and
    (not
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget2of3<Ref> fn$$0@474@01)))
    (not
      (= (ShStructget0of3<Ref> fn$$0@474@01) (ShStructget1of3<Ref> fn$$0@474@01))))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field SliceIntint$$$_S_$$$$$$$_E_$$$
(declare-const sm@529@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@529@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@529@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@529@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@529@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@529@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@529@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@529@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@529@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef98|)))
(declare-const pm@530@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@530@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)
          (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (and
            (and
              (<
                (inv@485@01 r)
                (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
              (<= 0 (inv@485@01 r)))
            (<
              (inv@484@01 r)
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
          (<= 0 (inv@484@01 r)))
        (/ (to_real 1) (to_real 8))
        $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@530@01  $FPM) r))
  :qid |qp.resPrmSumDef99|)))
(assert (<=
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@530@01  $FPM) (ShStructget2of3<Ref> fn$$0@474@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@530@01  $FPM) (ShStructget1of3<Ref> fn$$0@474@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@530@01  $FPM) (ShStructget0of3<Ref> fn$$0@474@01))
  $Perm.Write))
; Assume upper permission bound for field Intint$$$$_E_$$$
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_Intint$$$$_E_$$$ (as pm@530@01  $FPM) r) $Perm.Write)
  :pattern ((inv@484@01 r))
  :pattern ((inv@485@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$ < r_V0
; [eval] (ShStructget0of3(e_V0): Ref)
(declare-const sm@531@01 $FVF<Intint$$$$_E_$$$>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<
            (inv@485@01 r)
            (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
          (<= 0 (inv@485@01 r)))
        (<
          (inv@484@01 r)
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
      (<= 0 (inv@484@01 r)))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@531@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@531@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intint$$$$_E_$$$> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@434@01))))) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget0of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@531@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@531@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@492@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget1of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@531@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@531@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@493@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (ShStructget2of3<Ref> fn$$0@474@01))
    (=
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@531@01  $FVF<Intint$$$$_E_$$$>) r)
      ($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@531@01  $FVF<Intint$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intint$$$$_E_$$$ (as sm@494@01  $FVF<Intint$$$$_E_$$$>) r))
  :qid |qp.fvfValDef103|)))
(declare-const pm@532@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intint$$$$_E_$$$ (as pm@532@01  $FPM) r)
    (+
      (+
        (+
          (ite
            (and
              (and
                (and
                  (<
                    (inv@485@01 r)
                    (slen<Int> ($FVF.lookup_SliceIntint$$$_S_$$$$$$$_E_$$$ (as sm@480@01  $FVF<SliceIntint$$$_S_$$$$$$$_E_$$$>) (sloc<Ref> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))) (inv@484@01 r)))))
                  (<= 0 (inv@485@01 r)))
                (<
                  (inv@484@01 r)
                  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.first $t@434@01))))))
              (<= 0 (inv@484@01 r)))
            (/ (to_real 1) (to_real 8))
            $Perm.No)
          (ite (= r (ShStructget0of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
        (ite (= r (ShStructget1of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No))
      (ite (= r (ShStructget2of3<Ref> fn$$0@474@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_Intint$$$$_E_$$$ (as pm@532@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_Intint$$$$_E_$$$ (as pm@532@01  $FPM) (ShStructget0of3<Ref> fn$$0@474@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  ($FVF.lookup_Intint$$$$_E_$$$ (as sm@531@01  $FVF<Intint$$$$_E_$$$>) (ShStructget0of3<Ref> fn$$0@474@01))
  lenX_V2@395@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- transpose_4b5075e4_PMSparseMatrix ----------
(declare-const m_V0@533@01 ShStruct2<Ref~_Ref>)
(declare-const maxRow_V0@534@01 Int)
(declare-const maxColumn_V0@535@01 Int)
(declare-const m_V0@536@01 ShStruct2<Ref~_Ref>)
(declare-const maxRow_V0@537@01 Int)
(declare-const maxColumn_V0@538@01 Int)
(push) ; 1
(declare-const $t@539@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@540@01 $Snap)
(assert (= $t@540@01 ($Snap.combine ($Snap.first $t@540@01) ($Snap.second $t@540@01))))
(assert (= ($Snap.second $t@540@01) $Snap.unit))
; [eval] (forall i_V1: Int, j_V1: Int :: { LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) } { LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1) } 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)))
(declare-const i_V1@541@01 Int)
(declare-const j_V1@542@01 Int)
(push) ; 3
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0))
; [eval] 0 <= i_V1
(push) ; 4
; [then-branch: 133 | 0 <= i_V1@541@01 | live]
; [else-branch: 133 | !(0 <= i_V1@541@01) | live]
(push) ; 5
; [then-branch: 133 | 0 <= i_V1@541@01]
(assert (<= 0 i_V1@541@01))
; [eval] i_V1 < maxRow_V0
(push) ; 6
; [then-branch: 134 | i_V1@541@01 < maxRow_V0@537@01 | live]
; [else-branch: 134 | !(i_V1@541@01 < maxRow_V0@537@01) | live]
(push) ; 7
; [then-branch: 134 | i_V1@541@01 < maxRow_V0@537@01]
(assert (< i_V1@541@01 maxRow_V0@537@01))
; [eval] 0 <= j_V1
(push) ; 8
; [then-branch: 135 | 0 <= j_V1@542@01 | live]
; [else-branch: 135 | !(0 <= j_V1@542@01) | live]
(push) ; 9
; [then-branch: 135 | 0 <= j_V1@542@01]
(assert (<= 0 j_V1@542@01))
; [eval] j_V1 < maxColumn_V0
(pop) ; 9
(push) ; 9
; [else-branch: 135 | !(0 <= j_V1@542@01)]
(assert (not (<= 0 j_V1@542@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V1@542@01)) (<= 0 j_V1@542@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 134 | !(i_V1@541@01 < maxRow_V0@537@01)]
(assert (not (< i_V1@541@01 maxRow_V0@537@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (< i_V1@541@01 maxRow_V0@537@01)
  (and
    (< i_V1@541@01 maxRow_V0@537@01)
    (or (not (<= 0 j_V1@542@01)) (<= 0 j_V1@542@01)))))
; Joined path conditions
(assert (or (not (< i_V1@541@01 maxRow_V0@537@01)) (< i_V1@541@01 maxRow_V0@537@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 133 | !(0 <= i_V1@541@01)]
(assert (not (<= 0 i_V1@541@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (<= 0 i_V1@541@01)
  (and
    (<= 0 i_V1@541@01)
    (=>
      (< i_V1@541@01 maxRow_V0@537@01)
      (and
        (< i_V1@541@01 maxRow_V0@537@01)
        (or (not (<= 0 j_V1@542@01)) (<= 0 j_V1@542@01))))
    (or (not (< i_V1@541@01 maxRow_V0@537@01)) (< i_V1@541@01 maxRow_V0@537@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@541@01)) (<= 0 i_V1@541@01)))
(push) ; 4
; [then-branch: 136 | j_V1@542@01 < maxColumn_V0@538@01 && 0 <= j_V1@542@01 && i_V1@541@01 < maxRow_V0@537@01 && 0 <= i_V1@541@01 | live]
; [else-branch: 136 | !(j_V1@542@01 < maxColumn_V0@538@01 && 0 <= j_V1@542@01 && i_V1@541@01 < maxRow_V0@537@01 && 0 <= i_V1@541@01) | live]
(push) ; 5
; [then-branch: 136 | j_V1@542@01 < maxColumn_V0@538@01 && 0 <= j_V1@542@01 && i_V1@541@01 < maxRow_V0@537@01 && 0 <= i_V1@541@01]
(assert (and
  (and
    (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
    (< i_V1@541@01 maxRow_V0@537@01))
  (<= 0 i_V1@541@01)))
; [eval] LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1)
(push) ; 6
(declare-const $k@543@01 $Perm)
(assert ($Perm.isReadVar $k@543@01))
(assert (< $k@543@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@543@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@543@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.first $t@540@01) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@541@01 j_V1@542@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@543@01))
(assert (and
  (< $k@543@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@543@01))
  (LookupL_4b5075e4_F%precondition ($Snap.first $t@540@01) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@541@01 j_V1@542@01)))
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@544@01 $Perm)
(assert ($Perm.isReadVar $k@544@01))
(assert (< $k@544@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@544@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@544@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@542@01 i_V1@541@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@544@01))
(assert (and
  (< $k@544@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@544@01))
  (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@542@01 i_V1@541@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 136 | !(j_V1@542@01 < maxColumn_V0@538@01 && 0 <= j_V1@542@01 && i_V1@541@01 < maxRow_V0@537@01 && 0 <= i_V1@541@01)]
(assert (not
  (and
    (and
      (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
      (< i_V1@541@01 maxRow_V0@537@01))
    (<= 0 i_V1@541@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@543@01))
(assert ($Perm.isReadVar $k@544@01))
(assert (=>
  (and
    (and
      (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
      (< i_V1@541@01 maxRow_V0@537@01))
    (<= 0 i_V1@541@01))
  (and
    (< j_V1@542@01 maxColumn_V0@538@01)
    (<= 0 j_V1@542@01)
    (< i_V1@541@01 maxRow_V0@537@01)
    (<= 0 i_V1@541@01)
    (< $k@543@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@543@01))
    (LookupL_4b5075e4_F%precondition ($Snap.first $t@540@01) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@541@01 j_V1@542@01)
    (< $k@544@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@544@01))
    (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@542@01 i_V1@541@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
        (< i_V1@541@01 maxRow_V0@537@01))
      (<= 0 i_V1@541@01)))
  (and
    (and
      (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
      (< i_V1@541@01 maxRow_V0@537@01))
    (<= 0 i_V1@541@01))))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)
(push) ; 4
(declare-const $k@545@01 $Perm)
(assert ($Perm.isReadVar $k@545@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const $k@546@01 $Perm)
(assert ($Perm.isReadVar $k@546@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
(pop) ; 4
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@543@01))
(assert ($Perm.isReadVar $k@544@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@541@01 Int) (j_V1@542@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@541@01)
      (and
        (<= 0 i_V1@541@01)
        (=>
          (< i_V1@541@01 maxRow_V0@537@01)
          (and
            (< i_V1@541@01 maxRow_V0@537@01)
            (or (not (<= 0 j_V1@542@01)) (<= 0 j_V1@542@01))))
        (or
          (not (< i_V1@541@01 maxRow_V0@537@01))
          (< i_V1@541@01 maxRow_V0@537@01))))
    (or (not (<= 0 i_V1@541@01)) (<= 0 i_V1@541@01))
    (=>
      (and
        (and
          (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
          (< i_V1@541@01 maxRow_V0@537@01))
        (<= 0 i_V1@541@01))
      (and
        (< j_V1@542@01 maxColumn_V0@538@01)
        (<= 0 j_V1@542@01)
        (< i_V1@541@01 maxRow_V0@537@01)
        (<= 0 i_V1@541@01)
        (< $k@543@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@543@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first $t@540@01) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@541@01 j_V1@542@01)
        (< $k@544@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@544@01))
        (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@542@01 i_V1@541@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
            (< i_V1@541@01 maxRow_V0@537@01))
          (<= 0 i_V1@541@01)))
      (and
        (and
          (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
          (< i_V1@541@01 maxRow_V0@537@01))
        (<= 0 i_V1@541@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first $t@540@01) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@541@01 j_V1@542@01))
  :qid |prog.l845-aux|)))
(assert (forall ((i_V1@541@01 Int) (j_V1@542@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@541@01)
      (and
        (<= 0 i_V1@541@01)
        (=>
          (< i_V1@541@01 maxRow_V0@537@01)
          (and
            (< i_V1@541@01 maxRow_V0@537@01)
            (or (not (<= 0 j_V1@542@01)) (<= 0 j_V1@542@01))))
        (or
          (not (< i_V1@541@01 maxRow_V0@537@01))
          (< i_V1@541@01 maxRow_V0@537@01))))
    (or (not (<= 0 i_V1@541@01)) (<= 0 i_V1@541@01))
    (=>
      (and
        (and
          (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
          (< i_V1@541@01 maxRow_V0@537@01))
        (<= 0 i_V1@541@01))
      (and
        (< j_V1@542@01 maxColumn_V0@538@01)
        (<= 0 j_V1@542@01)
        (< i_V1@541@01 maxRow_V0@537@01)
        (<= 0 i_V1@541@01)
        (< $k@543@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@543@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first $t@540@01) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@541@01 j_V1@542@01)
        (< $k@544@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@544@01))
        (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@542@01 i_V1@541@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
            (< i_V1@541@01 maxRow_V0@537@01))
          (<= 0 i_V1@541@01)))
      (and
        (and
          (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
          (< i_V1@541@01 maxRow_V0@537@01))
        (<= 0 i_V1@541@01))))
  
  :qid |prog.l845-aux|)))
(assert (forall ((i_V1@541@01 Int) (j_V1@542@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@542@01 maxColumn_V0@538@01) (<= 0 j_V1@542@01))
        (< i_V1@541@01 maxRow_V0@537@01))
      (<= 0 i_V1@541@01))
    (=
      (LookupL_4b5075e4_F ($Snap.first $t@540@01) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@541@01 j_V1@542@01)
      (LookupL_4b5075e4_F $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@542@01 i_V1@541@01)))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first $t@540@01) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@541@01 j_V1@542@01))
  :qid |prog.l845|)))
(pop) ; 2
(push) ; 2
; [exec]
; var maxColumn_V0_CN2: Int
(declare-const maxColumn_V0_CN2@547@01 Int)
; [exec]
; var maxRow_V0_CN1: Int
(declare-const maxRow_V0_CN1@548@01 Int)
; [exec]
; var m_V0_CN0: ShStruct2[Ref, Ref]
(declare-const m_V0_CN0@549@01 ShStruct2<Ref~_Ref>)
; [exec]
; inhale m_V0_CN0 ==
;   shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@550@01 $Snap)
(assert (= $t@550@01 $Snap.unit))
; [eval] m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  m_V0_CN0@549@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale maxRow_V0_CN1 == 0
(declare-const $t@551@01 $Snap)
(assert (= $t@551@01 $Snap.unit))
; [eval] maxRow_V0_CN1 == 0
(assert (= maxRow_V0_CN1@548@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale maxColumn_V0_CN2 == 0
(declare-const $t@552@01 $Snap)
(assert (= $t@552@01 $Snap.unit))
; [eval] maxColumn_V0_CN2 == 0
(assert (= maxColumn_V0_CN2@547@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; m_V0_CN0 := m_V0
; [exec]
; maxRow_V0_CN1 := maxRow_V0
; [exec]
; maxColumn_V0_CN2 := maxColumn_V0
; [exec]
; unfold acc(sparseMatrix_4b5075e4_F(m_V0_CN0, maxRow_V0_CN1, maxColumn_V0_CN2), write)
; [eval] !(m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  m_V0@536@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    m_V0@536@01
    (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 137 | m_V0@536@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 137 | m_V0@536@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 137 | m_V0@536@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    m_V0@536@01
    (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (= $t@539@01 ($Snap.combine ($Snap.first $t@539@01) ($Snap.second $t@539@01))))
; [eval] (ShStructget0of2(m_V0): Ref)
(assert (not (= (ShStructget0of2<Ref> m_V0@536@01) $Ref.null)))
(assert (=
  ($Snap.second $t@539@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@539@01))
    ($Snap.second ($Snap.second $t@539@01)))))
; [eval] (ShStructget0of2(m_V0): Ref)
(assert (=
  ($Snap.second ($Snap.second $t@539@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@539@01))))))
; [eval] (ShStructget1of2(m_V0): Ref)
(assert (not (= (ShStructget1of2<Ref> m_V0@536@01) $Ref.null)))
; [eval] (ShStructget1of2(m_V0): Ref)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (sparseMatrix_4b5075e4_F%trigger $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01))
; [eval] !(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  m_V0@536@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | m_V0@536@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 138 | m_V0@536@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 138 | m_V0@536@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var tmp_V2: Int
(declare-const tmp_V2@553@01 Int)
; [exec]
; transpose_4b5075e4_PMSparseMatrix((ShStructget1of2(m_V0_CN0): Ref).PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   maxRow_V0_CN1, maxColumn_V0_CN2)
; [eval] (ShStructget1of2(m_V0_CN0): Ref)
(declare-const $t@554@01 $Snap)
(assert (= $t@554@01 ($Snap.combine ($Snap.first $t@554@01) ($Snap.second $t@554@01))))
(assert (= ($Snap.second $t@554@01) $Snap.unit))
; [eval] (forall i_V1: Int, j_V1: Int :: { LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) } { LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1) } 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)))
(declare-const i_V1@555@01 Int)
(declare-const j_V1@556@01 Int)
(push) ; 5
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0))
; [eval] 0 <= i_V1
(push) ; 6
; [then-branch: 139 | 0 <= i_V1@555@01 | live]
; [else-branch: 139 | !(0 <= i_V1@555@01) | live]
(push) ; 7
; [then-branch: 139 | 0 <= i_V1@555@01]
(assert (<= 0 i_V1@555@01))
; [eval] i_V1 < maxRow_V0
(push) ; 8
; [then-branch: 140 | i_V1@555@01 < maxRow_V0@537@01 | live]
; [else-branch: 140 | !(i_V1@555@01 < maxRow_V0@537@01) | live]
(push) ; 9
; [then-branch: 140 | i_V1@555@01 < maxRow_V0@537@01]
(assert (< i_V1@555@01 maxRow_V0@537@01))
; [eval] 0 <= j_V1
(push) ; 10
; [then-branch: 141 | 0 <= j_V1@556@01 | live]
; [else-branch: 141 | !(0 <= j_V1@556@01) | live]
(push) ; 11
; [then-branch: 141 | 0 <= j_V1@556@01]
(assert (<= 0 j_V1@556@01))
; [eval] j_V1 < maxColumn_V0
(pop) ; 11
(push) ; 11
; [else-branch: 141 | !(0 <= j_V1@556@01)]
(assert (not (<= 0 j_V1@556@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V1@556@01)) (<= 0 j_V1@556@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 140 | !(i_V1@555@01 < maxRow_V0@537@01)]
(assert (not (< i_V1@555@01 maxRow_V0@537@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (< i_V1@555@01 maxRow_V0@537@01)
  (and
    (< i_V1@555@01 maxRow_V0@537@01)
    (or (not (<= 0 j_V1@556@01)) (<= 0 j_V1@556@01)))))
; Joined path conditions
(assert (or (not (< i_V1@555@01 maxRow_V0@537@01)) (< i_V1@555@01 maxRow_V0@537@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 139 | !(0 <= i_V1@555@01)]
(assert (not (<= 0 i_V1@555@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (<= 0 i_V1@555@01)
  (and
    (<= 0 i_V1@555@01)
    (=>
      (< i_V1@555@01 maxRow_V0@537@01)
      (and
        (< i_V1@555@01 maxRow_V0@537@01)
        (or (not (<= 0 j_V1@556@01)) (<= 0 j_V1@556@01))))
    (or (not (< i_V1@555@01 maxRow_V0@537@01)) (< i_V1@555@01 maxRow_V0@537@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@555@01)) (<= 0 i_V1@555@01)))
(push) ; 6
; [then-branch: 142 | j_V1@556@01 < maxColumn_V0@538@01 && 0 <= j_V1@556@01 && i_V1@555@01 < maxRow_V0@537@01 && 0 <= i_V1@555@01 | live]
; [else-branch: 142 | !(j_V1@556@01 < maxColumn_V0@538@01 && 0 <= j_V1@556@01 && i_V1@555@01 < maxRow_V0@537@01 && 0 <= i_V1@555@01) | live]
(push) ; 7
; [then-branch: 142 | j_V1@556@01 < maxColumn_V0@538@01 && 0 <= j_V1@556@01 && i_V1@555@01 < maxRow_V0@537@01 && 0 <= i_V1@555@01]
(assert (and
  (and
    (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
    (< i_V1@555@01 maxRow_V0@537@01))
  (<= 0 i_V1@555@01)))
; [eval] LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1)
(push) ; 8
(declare-const $k@557@01 $Perm)
(assert ($Perm.isReadVar $k@557@01))
(assert (< $k@557@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@557@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@557@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.first $t@554@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@555@01 j_V1@556@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@557@01))
(assert (and
  (< $k@557@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@557@01))
  (LookupL_4b5075e4_F%precondition ($Snap.first $t@554@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@555@01 j_V1@556@01)))
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@558@01 $Perm)
(assert ($Perm.isReadVar $k@558@01))
(assert (< $k@558@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@558@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@558@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.second ($Snap.second ($Snap.second $t@539@01))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@556@01 i_V1@555@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@558@01))
(assert (and
  (< $k@558@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@558@01))
  (LookupL_4b5075e4_F%precondition ($Snap.second ($Snap.second ($Snap.second $t@539@01))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@556@01 i_V1@555@01)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 142 | !(j_V1@556@01 < maxColumn_V0@538@01 && 0 <= j_V1@556@01 && i_V1@555@01 < maxRow_V0@537@01 && 0 <= i_V1@555@01)]
(assert (not
  (and
    (and
      (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
      (< i_V1@555@01 maxRow_V0@537@01))
    (<= 0 i_V1@555@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@557@01))
(assert ($Perm.isReadVar $k@558@01))
(assert (=>
  (and
    (and
      (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
      (< i_V1@555@01 maxRow_V0@537@01))
    (<= 0 i_V1@555@01))
  (and
    (< j_V1@556@01 maxColumn_V0@538@01)
    (<= 0 j_V1@556@01)
    (< i_V1@555@01 maxRow_V0@537@01)
    (<= 0 i_V1@555@01)
    (< $k@557@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@557@01))
    (LookupL_4b5075e4_F%precondition ($Snap.first $t@554@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@555@01 j_V1@556@01)
    (< $k@558@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@558@01))
    (LookupL_4b5075e4_F%precondition ($Snap.second ($Snap.second ($Snap.second $t@539@01))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@556@01 i_V1@555@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
        (< i_V1@555@01 maxRow_V0@537@01))
      (<= 0 i_V1@555@01)))
  (and
    (and
      (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
      (< i_V1@555@01 maxRow_V0@537@01))
    (<= 0 i_V1@555@01))))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)
(push) ; 6
(declare-const $k@559@01 $Perm)
(assert ($Perm.isReadVar $k@559@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const $k@560@01 $Perm)
(assert ($Perm.isReadVar $k@560@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
(pop) ; 6
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@557@01))
(assert ($Perm.isReadVar $k@558@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@555@01 Int) (j_V1@556@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@555@01)
      (and
        (<= 0 i_V1@555@01)
        (=>
          (< i_V1@555@01 maxRow_V0@537@01)
          (and
            (< i_V1@555@01 maxRow_V0@537@01)
            (or (not (<= 0 j_V1@556@01)) (<= 0 j_V1@556@01))))
        (or
          (not (< i_V1@555@01 maxRow_V0@537@01))
          (< i_V1@555@01 maxRow_V0@537@01))))
    (or (not (<= 0 i_V1@555@01)) (<= 0 i_V1@555@01))
    (=>
      (and
        (and
          (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
          (< i_V1@555@01 maxRow_V0@537@01))
        (<= 0 i_V1@555@01))
      (and
        (< j_V1@556@01 maxColumn_V0@538@01)
        (<= 0 j_V1@556@01)
        (< i_V1@555@01 maxRow_V0@537@01)
        (<= 0 i_V1@555@01)
        (< $k@557@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@557@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first $t@554@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@555@01 j_V1@556@01)
        (< $k@558@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@558@01))
        (LookupL_4b5075e4_F%precondition ($Snap.second ($Snap.second ($Snap.second $t@539@01))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@556@01 i_V1@555@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
            (< i_V1@555@01 maxRow_V0@537@01))
          (<= 0 i_V1@555@01)))
      (and
        (and
          (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
          (< i_V1@555@01 maxRow_V0@537@01))
        (<= 0 i_V1@555@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first $t@554@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@555@01 j_V1@556@01))
  :qid |prog.l845-aux|)))
(assert (forall ((i_V1@555@01 Int) (j_V1@556@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@555@01)
      (and
        (<= 0 i_V1@555@01)
        (=>
          (< i_V1@555@01 maxRow_V0@537@01)
          (and
            (< i_V1@555@01 maxRow_V0@537@01)
            (or (not (<= 0 j_V1@556@01)) (<= 0 j_V1@556@01))))
        (or
          (not (< i_V1@555@01 maxRow_V0@537@01))
          (< i_V1@555@01 maxRow_V0@537@01))))
    (or (not (<= 0 i_V1@555@01)) (<= 0 i_V1@555@01))
    (=>
      (and
        (and
          (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
          (< i_V1@555@01 maxRow_V0@537@01))
        (<= 0 i_V1@555@01))
      (and
        (< j_V1@556@01 maxColumn_V0@538@01)
        (<= 0 j_V1@556@01)
        (< i_V1@555@01 maxRow_V0@537@01)
        (<= 0 i_V1@555@01)
        (< $k@557@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@557@01))
        (LookupL_4b5075e4_F%precondition ($Snap.first $t@554@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@555@01 j_V1@556@01)
        (< $k@558@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@558@01))
        (LookupL_4b5075e4_F%precondition ($Snap.second ($Snap.second ($Snap.second $t@539@01))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@556@01 i_V1@555@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
            (< i_V1@555@01 maxRow_V0@537@01))
          (<= 0 i_V1@555@01)))
      (and
        (and
          (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
          (< i_V1@555@01 maxRow_V0@537@01))
        (<= 0 i_V1@555@01))))
  
  :qid |prog.l845-aux|)))
(assert (forall ((i_V1@555@01 Int) (j_V1@556@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@556@01 maxColumn_V0@538@01) (<= 0 j_V1@556@01))
        (< i_V1@555@01 maxRow_V0@537@01))
      (<= 0 i_V1@555@01))
    (=
      (LookupL_4b5075e4_F ($Snap.first $t@554@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@555@01 j_V1@556@01)
      (LookupL_4b5075e4_F ($Snap.second ($Snap.second ($Snap.second $t@539@01))) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@556@01 i_V1@555@01)))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.first $t@554@01) ($SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second $t@539@01)))) maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@555@01 j_V1@556@01))
  :qid |prog.l845|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(entry_4b5075e4_F((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   maxRow_V0_CN1, maxColumn_V0_CN2), write)
; [eval] (ShStructget0of2(m_V0_CN0): Ref)
(assert (=
  ($Snap.first ($Snap.second $t@539@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@539@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))
; [eval] (ShStructget0of3(e_V0): Ref)
(assert (not
  (=
    (ShStructget0of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@539@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@539@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@539@01))))
  $Snap.unit))
; [eval] 0 <= (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(e_V0): Ref)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@539@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))
  $Snap.unit))
; [eval] (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$ < r_V0
; [eval] (ShStructget0of3(e_V0): Ref)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@539@01))))
  maxRow_V0@537@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))))))
; [eval] (ShStructget1of3(e_V0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)))
  (ShStructget1of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget1of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))))
  $Snap.unit))
; [eval] 0 <= (ShStructget1of3(e_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(e_V0): Ref)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))
  $Snap.unit))
; [eval] (ShStructget1of3(e_V0): Ref).Intint$$$$_E_$$$ < c_V0
; [eval] (ShStructget1of3(e_V0): Ref)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))))
  maxColumn_V0@538@01))
; [eval] (ShStructget2of3(e_V0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)))
  (ShStructget2of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)))
  (ShStructget2of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShStructget2of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)))
    $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (entry_4b5075e4_F%trigger ($Snap.first ($Snap.second $t@539@01)) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)) maxRow_V0@537@01 maxColumn_V0@538@01))
; [exec]
; inhale tmp_V2 == 0
(declare-const $t@561@01 $Snap)
(assert (= $t@561@01 $Snap.unit))
; [eval] tmp_V2 == 0
(assert (= tmp_V2@553@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; tmp_V2 := (ShStructget0of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref)
; [eval] (ShStructget0of2(m_V0_CN0): Ref)
(declare-const tmp_V2@562@01 Int)
(assert (=
  tmp_V2@562@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@539@01))))))
; [exec]
; (ShStructget0of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref).Intint$$$$_E_$$$ := (ShStructget1of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref)
; [eval] (ShStructget0of2(m_V0_CN0): Ref)
; [eval] (ShStructget1of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref)
; [eval] (ShStructget0of2(m_V0_CN0): Ref)
(declare-const Intint$$$$_E_$$$@563@01 Int)
(assert (=
  Intint$$$$_E_$$$@563@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget1of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)))
  (ShStructget0of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget2of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)))
  (ShStructget0of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; (ShStructget1of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref).Intint$$$$_E_$$$ := tmp_V2
; [eval] (ShStructget1of3((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$): Ref)
; [eval] (ShStructget0of2(m_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget2of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)))
  (ShStructget1of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShStructget0of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)))
  (ShStructget1of3<Ref> ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(entry_4b5075e4_F((ShStructget0of2(m_V0_CN0): Ref).PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   maxColumn_V0_CN2, maxRow_V0_CN1), write)
; [eval] (ShStructget0of2(m_V0_CN0): Ref)
; [eval] (ShStructget0of3(e_V0): Ref)
; [eval] 0 <= (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(e_V0): Ref)
(set-option :timeout 0)
(push) ; 5
(assert (not (<= 0 Intint$$$$_E_$$$@563@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 Intint$$$$_E_$$$@563@01))
; [eval] (ShStructget0of3(e_V0): Ref).Intint$$$$_E_$$$ < r_V0
; [eval] (ShStructget0of3(e_V0): Ref)
(push) ; 5
(assert (not (< Intint$$$$_E_$$$@563@01 maxColumn_V0@538@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< Intint$$$$_E_$$$@563@01 maxColumn_V0@538@01))
; [eval] (ShStructget1of3(e_V0): Ref)
; [eval] 0 <= (ShStructget1of3(e_V0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget1of3(e_V0): Ref)
(push) ; 5
(assert (not (<= 0 tmp_V2@562@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 tmp_V2@562@01))
; [eval] (ShStructget1of3(e_V0): Ref).Intint$$$$_E_$$$ < c_V0
; [eval] (ShStructget1of3(e_V0): Ref)
(push) ; 5
(assert (not (< tmp_V2@562@01 maxRow_V0@537@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< tmp_V2@562@01 maxRow_V0@537@01))
; [eval] (ShStructget2of3(e_V0): Ref)
(assert (entry_4b5075e4_F%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($SortWrappers.IntTo$Snap tmp_V2@562@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01)))))))))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@539@01)) maxColumn_V0@538@01 maxRow_V0@537@01))
; [exec]
; fold acc(sparseMatrix_4b5075e4_F(m_V0_CN0, maxColumn_V0_CN2, maxRow_V0_CN1), write)
; [eval] !(m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  m_V0@536@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | m_V0@536@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 143 | m_V0@536@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 143 | m_V0@536@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget0of2(m_V0): Ref)
; [eval] (ShStructget0of2(m_V0): Ref)
; [eval] (ShStructget1of2(m_V0): Ref)
; [eval] (ShStructget1of2(m_V0): Ref)
(assert (sparseMatrix_4b5075e4_F%trigger ($Snap.combine
  ($Snap.first $t@539@01)
  ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.IntTo$Snap tmp_V2@562@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
      ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01))
; [exec]
; label returnLabel
; [eval] (forall i_V1: Int, j_V1: Int :: { LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) } { LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1) } 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)))
(declare-const i_V1@564@01 Int)
(declare-const j_V1@565@01 Int)
(push) ; 6
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0))
; [eval] 0 <= i_V1
(push) ; 7
; [then-branch: 144 | 0 <= i_V1@564@01 | live]
; [else-branch: 144 | !(0 <= i_V1@564@01) | live]
(push) ; 8
; [then-branch: 144 | 0 <= i_V1@564@01]
(assert (<= 0 i_V1@564@01))
; [eval] i_V1 < maxRow_V0
(push) ; 9
; [then-branch: 145 | i_V1@564@01 < maxRow_V0@537@01 | live]
; [else-branch: 145 | !(i_V1@564@01 < maxRow_V0@537@01) | live]
(push) ; 10
; [then-branch: 145 | i_V1@564@01 < maxRow_V0@537@01]
(assert (< i_V1@564@01 maxRow_V0@537@01))
; [eval] 0 <= j_V1
(push) ; 11
; [then-branch: 146 | 0 <= j_V1@565@01 | live]
; [else-branch: 146 | !(0 <= j_V1@565@01) | live]
(push) ; 12
; [then-branch: 146 | 0 <= j_V1@565@01]
(assert (<= 0 j_V1@565@01))
; [eval] j_V1 < maxColumn_V0
(pop) ; 12
(push) ; 12
; [else-branch: 146 | !(0 <= j_V1@565@01)]
(assert (not (<= 0 j_V1@565@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V1@565@01)) (<= 0 j_V1@565@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 145 | !(i_V1@564@01 < maxRow_V0@537@01)]
(assert (not (< i_V1@564@01 maxRow_V0@537@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (< i_V1@564@01 maxRow_V0@537@01)
  (and
    (< i_V1@564@01 maxRow_V0@537@01)
    (or (not (<= 0 j_V1@565@01)) (<= 0 j_V1@565@01)))))
; Joined path conditions
(assert (or (not (< i_V1@564@01 maxRow_V0@537@01)) (< i_V1@564@01 maxRow_V0@537@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 144 | !(0 <= i_V1@564@01)]
(assert (not (<= 0 i_V1@564@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (<= 0 i_V1@564@01)
  (and
    (<= 0 i_V1@564@01)
    (=>
      (< i_V1@564@01 maxRow_V0@537@01)
      (and
        (< i_V1@564@01 maxRow_V0@537@01)
        (or (not (<= 0 j_V1@565@01)) (<= 0 j_V1@565@01))))
    (or (not (< i_V1@564@01 maxRow_V0@537@01)) (< i_V1@564@01 maxRow_V0@537@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@564@01)) (<= 0 i_V1@564@01)))
(push) ; 7
; [then-branch: 147 | j_V1@565@01 < maxColumn_V0@538@01 && 0 <= j_V1@565@01 && i_V1@564@01 < maxRow_V0@537@01 && 0 <= i_V1@564@01 | live]
; [else-branch: 147 | !(j_V1@565@01 < maxColumn_V0@538@01 && 0 <= j_V1@565@01 && i_V1@564@01 < maxRow_V0@537@01 && 0 <= i_V1@564@01) | live]
(push) ; 8
; [then-branch: 147 | j_V1@565@01 < maxColumn_V0@538@01 && 0 <= j_V1@565@01 && i_V1@564@01 < maxRow_V0@537@01 && 0 <= i_V1@564@01]
(assert (and
  (and
    (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
    (< i_V1@564@01 maxRow_V0@537@01))
  (<= 0 i_V1@564@01)))
; [eval] LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1)
(push) ; 9
(declare-const $k@566@01 $Perm)
(assert ($Perm.isReadVar $k@566@01))
(assert (< $k@566@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@566@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@566@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition ($Snap.combine
  ($Snap.first $t@539@01)
  ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.IntTo$Snap tmp_V2@562@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
      ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@566@01))
(assert (and
  (< $k@566@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@566@01))
  (LookupL_4b5075e4_F%precondition ($Snap.combine
    ($Snap.first $t@539@01)
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.IntTo$Snap tmp_V2@562@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
        ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01)))
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@567@01 $Perm)
(assert ($Perm.isReadVar $k@567@01))
(assert (< $k@567@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@567@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@567@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@565@01 i_V1@564@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@567@01))
(assert (and
  (< $k@567@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@567@01))
  (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@565@01 i_V1@564@01)))
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 147 | !(j_V1@565@01 < maxColumn_V0@538@01 && 0 <= j_V1@565@01 && i_V1@564@01 < maxRow_V0@537@01 && 0 <= i_V1@564@01)]
(assert (not
  (and
    (and
      (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
      (< i_V1@564@01 maxRow_V0@537@01))
    (<= 0 i_V1@564@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@566@01))
(assert ($Perm.isReadVar $k@567@01))
(assert (=>
  (and
    (and
      (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
      (< i_V1@564@01 maxRow_V0@537@01))
    (<= 0 i_V1@564@01))
  (and
    (< j_V1@565@01 maxColumn_V0@538@01)
    (<= 0 j_V1@565@01)
    (< i_V1@564@01 maxRow_V0@537@01)
    (<= 0 i_V1@564@01)
    (< $k@566@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@566@01))
    (LookupL_4b5075e4_F%precondition ($Snap.combine
      ($Snap.first $t@539@01)
      ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.IntTo$Snap tmp_V2@562@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
          ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01)
    (< $k@567@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@567@01))
    (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@565@01 i_V1@564@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
        (< i_V1@564@01 maxRow_V0@537@01))
      (<= 0 i_V1@564@01)))
  (and
    (and
      (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
      (< i_V1@564@01 maxRow_V0@537@01))
    (<= 0 i_V1@564@01))))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)
(push) ; 7
(declare-const $k@568@01 $Perm)
(assert ($Perm.isReadVar $k@568@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const $k@569@01 $Perm)
(assert ($Perm.isReadVar $k@569@01))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@566@01))
(assert ($Perm.isReadVar $k@567@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@564@01 Int) (j_V1@565@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@564@01)
      (and
        (<= 0 i_V1@564@01)
        (=>
          (< i_V1@564@01 maxRow_V0@537@01)
          (and
            (< i_V1@564@01 maxRow_V0@537@01)
            (or (not (<= 0 j_V1@565@01)) (<= 0 j_V1@565@01))))
        (or
          (not (< i_V1@564@01 maxRow_V0@537@01))
          (< i_V1@564@01 maxRow_V0@537@01))))
    (or (not (<= 0 i_V1@564@01)) (<= 0 i_V1@564@01))
    (=>
      (and
        (and
          (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
          (< i_V1@564@01 maxRow_V0@537@01))
        (<= 0 i_V1@564@01))
      (and
        (< j_V1@565@01 maxColumn_V0@538@01)
        (<= 0 j_V1@565@01)
        (< i_V1@564@01 maxRow_V0@537@01)
        (<= 0 i_V1@564@01)
        (< $k@566@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@566@01))
        (LookupL_4b5075e4_F%precondition ($Snap.combine
          ($Snap.first $t@539@01)
          ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.IntTo$Snap tmp_V2@562@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
              ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01)
        (< $k@567@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@567@01))
        (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@565@01 i_V1@564@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
            (< i_V1@564@01 maxRow_V0@537@01))
          (<= 0 i_V1@564@01)))
      (and
        (and
          (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
          (< i_V1@564@01 maxRow_V0@537@01))
        (<= 0 i_V1@564@01))))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.combine
    ($Snap.first $t@539@01)
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.IntTo$Snap tmp_V2@562@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
        ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01))
  :qid |prog.l845-aux|)))
(assert (forall ((i_V1@564@01 Int) (j_V1@565@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@564@01)
      (and
        (<= 0 i_V1@564@01)
        (=>
          (< i_V1@564@01 maxRow_V0@537@01)
          (and
            (< i_V1@564@01 maxRow_V0@537@01)
            (or (not (<= 0 j_V1@565@01)) (<= 0 j_V1@565@01))))
        (or
          (not (< i_V1@564@01 maxRow_V0@537@01))
          (< i_V1@564@01 maxRow_V0@537@01))))
    (or (not (<= 0 i_V1@564@01)) (<= 0 i_V1@564@01))
    (=>
      (and
        (and
          (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
          (< i_V1@564@01 maxRow_V0@537@01))
        (<= 0 i_V1@564@01))
      (and
        (< j_V1@565@01 maxColumn_V0@538@01)
        (<= 0 j_V1@565@01)
        (< i_V1@564@01 maxRow_V0@537@01)
        (<= 0 i_V1@564@01)
        (< $k@566@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@566@01))
        (LookupL_4b5075e4_F%precondition ($Snap.combine
          ($Snap.first $t@539@01)
          ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.IntTo$Snap tmp_V2@562@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
              ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01)
        (< $k@567@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@567@01))
        (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@565@01 i_V1@564@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
            (< i_V1@564@01 maxRow_V0@537@01))
          (<= 0 i_V1@564@01)))
      (and
        (and
          (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
          (< i_V1@564@01 maxRow_V0@537@01))
        (<= 0 i_V1@564@01))))
  
  :qid |prog.l845-aux|)))
(assert (forall ((i_V1@564@01 Int) (j_V1@565@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
        (< i_V1@564@01 maxRow_V0@537@01))
      (<= 0 i_V1@564@01))
    (and
      (LookupL_4b5075e4_F%precondition ($Snap.combine
        ($Snap.first $t@539@01)
        ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.IntTo$Snap tmp_V2@562@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
            ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01)
      (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@565@01 i_V1@564@01)))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.combine
    ($Snap.first $t@539@01)
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.IntTo$Snap tmp_V2@562@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
        ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01))
  :qid |prog.l845_precondition|)))
(push) ; 6
(assert (not (forall ((i_V1@564@01 Int) (j_V1@565@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and
            (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
            (< i_V1@564@01 maxRow_V0@537@01))
          (<= 0 i_V1@564@01))
        (and
          (LookupL_4b5075e4_F%precondition ($Snap.combine
            ($Snap.first $t@539@01)
            ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.IntTo$Snap tmp_V2@562@01)
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
                ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01)
          (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@565@01 i_V1@564@01)))
      (and
        (and
          (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
          (< i_V1@564@01 maxRow_V0@537@01))
        (<= 0 i_V1@564@01)))
    (=
      (LookupL_4b5075e4_F ($Snap.combine
        ($Snap.first $t@539@01)
        ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.IntTo$Snap tmp_V2@562@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
            ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01)
      (LookupL_4b5075e4_F $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@565@01 i_V1@564@01)))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.combine
    ($Snap.first $t@539@01)
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.IntTo$Snap tmp_V2@562@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
        ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01))
  :qid |prog.l845|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@564@01 Int) (j_V1@565@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@565@01 maxColumn_V0@538@01) (<= 0 j_V1@565@01))
        (< i_V1@564@01 maxRow_V0@537@01))
      (<= 0 i_V1@564@01))
    (=
      (LookupL_4b5075e4_F ($Snap.combine
        ($Snap.first $t@539@01)
        ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.IntTo$Snap tmp_V2@562@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
            ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01)
      (LookupL_4b5075e4_F $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@565@01 i_V1@564@01)))
  :pattern ((LookupL_4b5075e4_F%limited ($Snap.combine
    ($Snap.first $t@539@01)
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap Intint$$$$_E_$$$@563@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.IntTo$Snap tmp_V2@562@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@539@01))))))))))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@539@01)))
        ($Snap.first $t@554@01)))) m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@564@01 j_V1@565@01))
  :qid |prog.l845|)))
(pop) ; 5
(pop) ; 4
; [eval] !!(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
; [then-branch: 148 | m_V0@536@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 148 | m_V0@536@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 4
; [else-branch: 148 | m_V0@536@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 137 | m_V0@536@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  m_V0@536@01
  (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= $t@539@01 $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (sparseMatrix_4b5075e4_F%trigger $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01))
; [eval] !(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [then-branch: 149 | m_V0@536@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 149 | m_V0@536@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 4
; [else-branch: 149 | m_V0@536@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 4
; [eval] !!(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !(m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0_CN0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    m_V0@536@01
    (shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | m_V0@536@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 150 | m_V0@536@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 150 | m_V0@536@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; fold acc(sparseMatrix_4b5075e4_F(m_V0_CN0, maxColumn_V0_CN2, maxRow_V0_CN1), write)
; [eval] !(m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] m_V0 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 151 | m_V0@536@01 != shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 151 | m_V0@536@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 151 | m_V0@536@01 == shStructDefault_$entryA_PointerDefinedEntry_4b5075e4_T$$$_S_$$$$$$_S_$$$_nextA_PointerDefinedSparseMatrix_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (sparseMatrix_4b5075e4_F%trigger $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01))
; [exec]
; label returnLabel
; [eval] (forall i_V1: Int, j_V1: Int :: { LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) } { LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1) } 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)))
(declare-const i_V1@570@01 Int)
(declare-const j_V1@571@01 Int)
(push) ; 6
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0)) ==> LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] 0 <= i_V1 && (i_V1 < maxRow_V0 && (0 <= j_V1 && j_V1 < maxColumn_V0))
; [eval] 0 <= i_V1
(push) ; 7
; [then-branch: 152 | 0 <= i_V1@570@01 | live]
; [else-branch: 152 | !(0 <= i_V1@570@01) | live]
(push) ; 8
; [then-branch: 152 | 0 <= i_V1@570@01]
(assert (<= 0 i_V1@570@01))
; [eval] i_V1 < maxRow_V0
(push) ; 9
; [then-branch: 153 | i_V1@570@01 < maxRow_V0@537@01 | live]
; [else-branch: 153 | !(i_V1@570@01 < maxRow_V0@537@01) | live]
(push) ; 10
; [then-branch: 153 | i_V1@570@01 < maxRow_V0@537@01]
(assert (< i_V1@570@01 maxRow_V0@537@01))
; [eval] 0 <= j_V1
(push) ; 11
; [then-branch: 154 | 0 <= j_V1@571@01 | live]
; [else-branch: 154 | !(0 <= j_V1@571@01) | live]
(push) ; 12
; [then-branch: 154 | 0 <= j_V1@571@01]
(assert (<= 0 j_V1@571@01))
; [eval] j_V1 < maxColumn_V0
(pop) ; 12
(push) ; 12
; [else-branch: 154 | !(0 <= j_V1@571@01)]
(assert (not (<= 0 j_V1@571@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V1@571@01)) (<= 0 j_V1@571@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 153 | !(i_V1@570@01 < maxRow_V0@537@01)]
(assert (not (< i_V1@570@01 maxRow_V0@537@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (< i_V1@570@01 maxRow_V0@537@01)
  (and
    (< i_V1@570@01 maxRow_V0@537@01)
    (or (not (<= 0 j_V1@571@01)) (<= 0 j_V1@571@01)))))
; Joined path conditions
(assert (or (not (< i_V1@570@01 maxRow_V0@537@01)) (< i_V1@570@01 maxRow_V0@537@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 152 | !(0 <= i_V1@570@01)]
(assert (not (<= 0 i_V1@570@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (<= 0 i_V1@570@01)
  (and
    (<= 0 i_V1@570@01)
    (=>
      (< i_V1@570@01 maxRow_V0@537@01)
      (and
        (< i_V1@570@01 maxRow_V0@537@01)
        (or (not (<= 0 j_V1@571@01)) (<= 0 j_V1@571@01))))
    (or (not (< i_V1@570@01 maxRow_V0@537@01)) (< i_V1@570@01 maxRow_V0@537@01)))))
; Joined path conditions
(assert (or (not (<= 0 i_V1@570@01)) (<= 0 i_V1@570@01)))
(push) ; 7
; [then-branch: 155 | j_V1@571@01 < maxColumn_V0@538@01 && 0 <= j_V1@571@01 && i_V1@570@01 < maxRow_V0@537@01 && 0 <= i_V1@570@01 | live]
; [else-branch: 155 | !(j_V1@571@01 < maxColumn_V0@538@01 && 0 <= j_V1@571@01 && i_V1@570@01 < maxRow_V0@537@01 && 0 <= i_V1@570@01) | live]
(push) ; 8
; [then-branch: 155 | j_V1@571@01 < maxColumn_V0@538@01 && 0 <= j_V1@571@01 && i_V1@570@01 < maxRow_V0@537@01 && 0 <= i_V1@570@01]
(assert (and
  (and
    (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
    (< i_V1@570@01 maxRow_V0@537@01))
  (<= 0 i_V1@570@01)))
; [eval] LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1) == old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxColumn_V0, maxRow_V0, i_V1, j_V1)
(push) ; 9
(declare-const $k@572@01 $Perm)
(assert ($Perm.isReadVar $k@572@01))
(assert (< $k@572@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@572@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@572@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@572@01))
(assert (and
  (< $k@572@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@572@01))
  (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01)))
; [eval] old(LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@573@01 $Perm)
(assert ($Perm.isReadVar $k@573@01))
(assert (< $k@573@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@573@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@573@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@571@01 i_V1@570@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@573@01))
(assert (and
  (< $k@573@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@573@01))
  (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@571@01 i_V1@570@01)))
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 155 | !(j_V1@571@01 < maxColumn_V0@538@01 && 0 <= j_V1@571@01 && i_V1@570@01 < maxRow_V0@537@01 && 0 <= i_V1@570@01)]
(assert (not
  (and
    (and
      (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
      (< i_V1@570@01 maxRow_V0@537@01))
    (<= 0 i_V1@570@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@572@01))
(assert ($Perm.isReadVar $k@573@01))
(assert (=>
  (and
    (and
      (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
      (< i_V1@570@01 maxRow_V0@537@01))
    (<= 0 i_V1@570@01))
  (and
    (< j_V1@571@01 maxColumn_V0@538@01)
    (<= 0 j_V1@571@01)
    (< i_V1@570@01 maxRow_V0@537@01)
    (<= 0 i_V1@570@01)
    (< $k@572@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@572@01))
    (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01)
    (< $k@573@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@573@01))
    (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@571@01 i_V1@570@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
        (< i_V1@570@01 maxRow_V0@537@01))
      (<= 0 i_V1@570@01)))
  (and
    (and
      (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
      (< i_V1@570@01 maxRow_V0@537@01))
    (<= 0 i_V1@570@01))))
; [eval] LookupL_4b5075e4_F(m_V0, maxRow_V0, maxColumn_V0, j_V1, i_V1)
(push) ; 7
(declare-const $k@574@01 $Perm)
(assert ($Perm.isReadVar $k@574@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const $k@575@01 $Perm)
(assert ($Perm.isReadVar $k@575@01))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (= maxColumn_V0@538@01 maxRow_V0@537@01)
  (= maxRow_V0@537@01 maxColumn_V0@538@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@572@01))
(assert ($Perm.isReadVar $k@573@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@570@01 Int) (j_V1@571@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@570@01)
      (and
        (<= 0 i_V1@570@01)
        (=>
          (< i_V1@570@01 maxRow_V0@537@01)
          (and
            (< i_V1@570@01 maxRow_V0@537@01)
            (or (not (<= 0 j_V1@571@01)) (<= 0 j_V1@571@01))))
        (or
          (not (< i_V1@570@01 maxRow_V0@537@01))
          (< i_V1@570@01 maxRow_V0@537@01))))
    (or (not (<= 0 i_V1@570@01)) (<= 0 i_V1@570@01))
    (=>
      (and
        (and
          (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
          (< i_V1@570@01 maxRow_V0@537@01))
        (<= 0 i_V1@570@01))
      (and
        (< j_V1@571@01 maxColumn_V0@538@01)
        (<= 0 j_V1@571@01)
        (< i_V1@570@01 maxRow_V0@537@01)
        (<= 0 i_V1@570@01)
        (< $k@572@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@572@01))
        (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01)
        (< $k@573@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@573@01))
        (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@571@01 i_V1@570@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
            (< i_V1@570@01 maxRow_V0@537@01))
          (<= 0 i_V1@570@01)))
      (and
        (and
          (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
          (< i_V1@570@01 maxRow_V0@537@01))
        (<= 0 i_V1@570@01))))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01))
  :qid |prog.l845-aux|)))
(assert (forall ((i_V1@570@01 Int) (j_V1@571@01 Int)) (!
  (and
    (=>
      (<= 0 i_V1@570@01)
      (and
        (<= 0 i_V1@570@01)
        (=>
          (< i_V1@570@01 maxRow_V0@537@01)
          (and
            (< i_V1@570@01 maxRow_V0@537@01)
            (or (not (<= 0 j_V1@571@01)) (<= 0 j_V1@571@01))))
        (or
          (not (< i_V1@570@01 maxRow_V0@537@01))
          (< i_V1@570@01 maxRow_V0@537@01))))
    (or (not (<= 0 i_V1@570@01)) (<= 0 i_V1@570@01))
    (=>
      (and
        (and
          (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
          (< i_V1@570@01 maxRow_V0@537@01))
        (<= 0 i_V1@570@01))
      (and
        (< j_V1@571@01 maxColumn_V0@538@01)
        (<= 0 j_V1@571@01)
        (< i_V1@570@01 maxRow_V0@537@01)
        (<= 0 i_V1@570@01)
        (< $k@572@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@572@01))
        (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01)
        (< $k@573@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@573@01))
        (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@571@01 i_V1@570@01)))
    (or
      (not
        (and
          (and
            (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
            (< i_V1@570@01 maxRow_V0@537@01))
          (<= 0 i_V1@570@01)))
      (and
        (and
          (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
          (< i_V1@570@01 maxRow_V0@537@01))
        (<= 0 i_V1@570@01))))
  
  :qid |prog.l845-aux|)))
(assert (forall ((i_V1@570@01 Int) (j_V1@571@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
        (< i_V1@570@01 maxRow_V0@537@01))
      (<= 0 i_V1@570@01))
    (and
      (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01)
      (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@571@01 i_V1@570@01)))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01))
  :qid |prog.l845_precondition|)))
(push) ; 6
(assert (not (forall ((i_V1@570@01 Int) (j_V1@571@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and
            (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
            (< i_V1@570@01 maxRow_V0@537@01))
          (<= 0 i_V1@570@01))
        (and
          (LookupL_4b5075e4_F%precondition $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01)
          (LookupL_4b5075e4_F%precondition $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@571@01 i_V1@570@01)))
      (and
        (and
          (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
          (< i_V1@570@01 maxRow_V0@537@01))
        (<= 0 i_V1@570@01)))
    (=
      (LookupL_4b5075e4_F $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01)
      (LookupL_4b5075e4_F $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@571@01 i_V1@570@01)))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01))
  :qid |prog.l845|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@570@01 Int) (j_V1@571@01 Int)) (!
  (=>
    (and
      (and
        (and (< j_V1@571@01 maxColumn_V0@538@01) (<= 0 j_V1@571@01))
        (< i_V1@570@01 maxRow_V0@537@01))
      (<= 0 i_V1@570@01))
    (=
      (LookupL_4b5075e4_F $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01)
      (LookupL_4b5075e4_F $t@539@01 m_V0@536@01 maxRow_V0@537@01 maxColumn_V0@538@01 j_V1@571@01 i_V1@570@01)))
  :pattern ((LookupL_4b5075e4_F%limited $Snap.unit m_V0@536@01 maxColumn_V0@538@01 maxRow_V0@537@01 i_V1@570@01 j_V1@571@01))
  :qid |prog.l845|)))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
