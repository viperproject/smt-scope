(get-info :version)
; (:version "4.8.7")
; Started: 2024-11-17 20:14:06
; Silicon.version: 1.1-SNAPSHOT (4d756c79+)
; Input file: /silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Edge> 0)
(declare-sort Set<$Snap> 0)
(declare-sort FramingWisdoms 0)
(declare-sort Edge 0)
(declare-sort TrClo 0)
(declare-sort $FVF<next> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Edge>To$Snap (Set<Edge>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Edge> ($Snap) Set<Edge>)
(assert (forall ((x Set<Edge>)) (!
    (= x ($SortWrappers.$SnapToSet<Edge>($SortWrappers.Set<Edge>To$Snap x)))
    :pattern (($SortWrappers.Set<Edge>To$Snap x))
    :qid |$Snap.$SnapToSet<Edge>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Edge>To$Snap($SortWrappers.$SnapToSet<Edge> x)))
    :pattern (($SortWrappers.$SnapToSet<Edge> x))
    :qid |$Snap.Set<Edge>To$SnapToSet<Edge>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.FramingWisdomsTo$Snap (FramingWisdoms) $Snap)
(declare-fun $SortWrappers.$SnapToFramingWisdoms ($Snap) FramingWisdoms)
(assert (forall ((x FramingWisdoms)) (!
    (= x ($SortWrappers.$SnapToFramingWisdoms($SortWrappers.FramingWisdomsTo$Snap x)))
    :pattern (($SortWrappers.FramingWisdomsTo$Snap x))
    :qid |$Snap.$SnapToFramingWisdomsTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.FramingWisdomsTo$Snap($SortWrappers.$SnapToFramingWisdoms x)))
    :pattern (($SortWrappers.$SnapToFramingWisdoms x))
    :qid |$Snap.FramingWisdomsTo$SnapToFramingWisdoms|
    )))
(declare-fun $SortWrappers.EdgeTo$Snap (Edge) $Snap)
(declare-fun $SortWrappers.$SnapToEdge ($Snap) Edge)
(assert (forall ((x Edge)) (!
    (= x ($SortWrappers.$SnapToEdge($SortWrappers.EdgeTo$Snap x)))
    :pattern (($SortWrappers.EdgeTo$Snap x))
    :qid |$Snap.$SnapToEdgeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.EdgeTo$Snap($SortWrappers.$SnapToEdge x)))
    :pattern (($SortWrappers.$SnapToEdge x))
    :qid |$Snap.EdgeTo$SnapToEdge|
    )))
(declare-fun $SortWrappers.TrCloTo$Snap (TrClo) $Snap)
(declare-fun $SortWrappers.$SnapToTrClo ($Snap) TrClo)
(assert (forall ((x TrClo)) (!
    (= x ($SortWrappers.$SnapToTrClo($SortWrappers.TrCloTo$Snap x)))
    :pattern (($SortWrappers.TrCloTo$Snap x))
    :qid |$Snap.$SnapToTrCloTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TrCloTo$Snap($SortWrappers.$SnapToTrClo x)))
    :pattern (($SortWrappers.$SnapToTrClo x))
    :qid |$Snap.TrCloTo$SnapToTrClo|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<next>To$Snap ($FVF<next>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<next> ($Snap) $FVF<next>)
(assert (forall ((x $FVF<next>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<next>($SortWrappers.$FVF<next>To$Snap x)))
    :pattern (($SortWrappers.$FVF<next>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<next>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<next>To$Snap($SortWrappers.$SnapTo$FVF<next> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<next> x))
    :qid |$Snap.$FVF<next>To$SnapTo$FVF<next>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Edge>) Int)
(declare-const Set_empty Set<Edge>)
(declare-fun Set_in (Edge Set<Edge>) Bool)
(declare-fun Set_singleton (Edge) Set<Edge>)
(declare-fun Set_unionone (Set<Edge> Edge) Set<Edge>)
(declare-fun Set_union (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_intersection (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_difference (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_subset (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_equal (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_skolem_diff (Set<Edge> Set<Edge>) Edge)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun exists_path<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_path_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_spath<Bool> (Set<Edge> Set<$Ref> $Ref) Bool)
(declare-fun apply_noExit<Bool> (Set<Edge> Set<$Ref> Set<$Ref>) Bool)
(declare-fun inst_uReach<Set<Ref>> (Set<Edge> $Ref) Set<$Ref>)
(declare-fun acyclic_graph<Bool> (Set<Edge>) Bool)
(declare-fun unshared_graph<Bool> (Set<Edge>) Bool)
(declare-fun func_graph<Bool> (Set<Edge>) Bool)
(declare-fun edge<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_pred<Ref> (Edge) $Ref)
(declare-fun edge_succ<Ref> (Edge) $Ref)
(declare-fun create_edge<Edge> ($Ref $Ref) Edge)
(declare-fun create_edge_<Edge> ($Ref $Ref) Edge)
; /field_value_functions_declarations.smt2 [next: Ref]
(declare-fun $FVF.domain_next ($FVF<next>) Set<$Ref>)
(declare-fun $FVF.lookup_next ($FVF<next> $Ref) $Ref)
(declare-fun $FVF.after_next ($FVF<next> $FVF<next>) Bool)
(declare-fun $FVF.loc_next ($Ref $Ref) Bool)
(declare-fun $FVF.perm_next ($FPM $Ref) $Perm)
(declare-const $fvfTOP_next $FVF<next>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $$ ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%limited ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%stateless (Set<$Ref>) Bool)
(declare-fun $$%precondition ($Snap Set<$Ref>) Bool)
(declare-fun apply_TCFraming ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%limited ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%stateless (Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%precondition ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun acyclic_list_segment ($Snap Set<$Ref>) Bool)
(declare-fun acyclic_list_segment%limited ($Snap Set<$Ref>) Bool)
(declare-fun acyclic_list_segment%stateless (Set<$Ref>) Bool)
(declare-fun acyclic_list_segment%precondition ($Snap Set<$Ref>) Bool)
(declare-fun is_global_sroot ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun is_global_sroot%limited ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun is_global_sroot%stateless (Set<$Ref> Set<$Ref>) Bool)
(declare-fun is_global_sroot%precondition ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun is_global_root ($Snap Set<$Ref> $Ref) Bool)
(declare-fun is_global_root%limited ($Snap Set<$Ref> $Ref) Bool)
(declare-fun is_global_root%stateless (Set<$Ref> $Ref) Bool)
(declare-fun is_global_root%precondition ($Snap Set<$Ref> $Ref) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Edge>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Edge)) (!
  (not (Set_in o (as Set_empty  Set<Edge>)))
  :pattern ((Set_in o (as Set_empty  Set<Edge>)))
  )))
(assert (forall ((s Set<Edge>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Edge>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Edge))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Edge)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Edge) (o Edge)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Edge)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (o Edge)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (Set_subset a b)
    (forall ((o Edge)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge<Bool> EG p s) (edge_<Bool> EG p s))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_EdgeSynonim|)))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge_<Bool> EG p s) (Set_in (create_edge<Edge> p s) EG))
  :pattern ((Set_in (create_edge<Edge> p s) EG))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_Edge|)))
(assert (forall ((EG Set<Edge>) (U Set<$Ref>) (M Set<$Ref>)) (!
  (=>
    (and
      (apply_noExit<Bool> EG U M)
      (forall ((u $Ref) (v $Ref)) (!
        (=>
          (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
          (not (edge<Bool> EG u v)))
        :pattern ((edge<Bool> EG u v))
        :pattern ((Set_in u M) (Set_in v M))
        )))
    (forall ((u $Ref) (v $Ref)) (!
      (=>
        (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
        (not (exists_path<Bool> EG u v)))
      :pattern ((exists_path<Bool> EG u v))
      :pattern ((Set_in u M) (Set_in v M))
      )))
  :pattern ((apply_noExit<Bool> EG U M))
  :qid |prog.ax_NoExit|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (v $Ref)) (!
  (= (Set_in v (inst_uReach<Set<Ref>> EG x)) (exists_path<Bool> EG x v))
  :pattern ((Set_in v (inst_uReach<Set<Ref>> EG x)))
  :pattern ((exists_path<Bool> EG x v))
  :qid |prog.ax_instantiation_uReach|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (= (exists_path<Bool> EG start end) (exists_path_<Bool> EG start end))
  :pattern ((exists_path<Bool> EG start end))
  :qid |prog.ax_Alias|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (=
    (exists_path_<Bool> EG start end)
    (or
      (= start end)
      (exists ((w $Ref)) (!
        (and (edge<Bool> EG start w) (exists_path_<Bool> EG w end))
        :pattern ((edge<Bool> EG start w))
        :pattern ((exists_path_<Bool> EG w end))
        ))))
  :pattern ((exists_path<Bool> EG start end))
  :pattern ((edge<Bool> EG start end))
  :qid |prog.ax_ExistsPath|)))
(assert (forall ((EG Set<Edge>) (u $Ref) (v $Ref) (w $Ref)) (!
  (=>
    (and (exists_path_<Bool> EG u w) (exists_path_<Bool> EG w v))
    (exists_path_<Bool> EG u v))
  :pattern ((exists_path<Bool> EG u w) (exists_path<Bool> EG w v))
  :qid |prog.ax_ExistsPathTrans|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (acyclic_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref)) (!
      (or (not (edge<Bool> EG v1 v2)) (not (exists_path<Bool> EG v2 v1)))
      :pattern ((edge<Bool> EG v1 v2))
      :pattern ((exists_path<Bool> EG v2 v1))
      )))
  :pattern ((acyclic_graph<Bool> EG))
  :qid |prog.ax_AcyclicGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (unshared_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v1 v) (edge<Bool> EG v2 v)) (= v1 v2))
      :pattern ((edge<Bool> EG v1 v) (edge<Bool> EG v2 v))
      )))
  :pattern ((unshared_graph<Bool> EG))
  :qid |prog.ax_UnsharedGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (func_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v v1) (edge<Bool> EG v v2)) (= v1 v2))
      :pattern ((edge<Bool> EG v v1) (edge<Bool> EG v v2))
      )))
  :pattern ((func_graph<Bool> EG))
  :qid |prog.ax_FuncGraph|)))
(assert (forall ((EG Set<Edge>) (from Set<$Ref>) (to $Ref)) (!
  (=
    (exists_spath<Bool> EG from to)
    (exists ((f $Ref)) (!
      (and (Set_in f from) (exists_path<Bool> EG f to))
      :pattern ((Set_in f from))
      :pattern ((exists_path<Bool> EG f to))
      )))
  :pattern ((exists_spath<Bool> EG from to))
  :qid |prog.ax_ExistsSetPath|)))
(assert (forall ((g0 Set<$Ref>) (g1 Set<$Ref>)) (!
  (=>
    (Set_equal (Set_intersection g0 g1) (as Set_empty  Set<$Ref>))
    (forall ((r $Ref)) (!
      (=> (and (Set_in r g0) (Set_in r g1)) (Set_in r (as Set_empty  Set<$Ref>)))
      :pattern ((Set_in r g0) (Set_in r g1))
      )))
  :pattern ((Set_intersection g0 g1))
  :qid |prog.ax_SetIntersection|)))
(assert (forall ((g Set<Edge>) (e Edge)) (!
  (=>
    (Set_in e g)
    (= (create_edge<Edge> (edge_pred<Ref> e) (edge_succ<Ref> e)) e))
  :pattern ((Set_in e g))
  :qid |prog.ax_EdgeReverse|)))
(assert (forall ((p $Ref) (s $Ref)) (!
  (and
    (= (edge_pred<Ref> (create_edge<Edge> p s)) p)
    (= (edge_succ<Ref> (create_edge<Edge> p s)) s))
  :pattern ((create_edge<Edge> p s))
  :qid |prog.edge_injectivity|)))
; /field_value_functions_axioms.smt2 [next: Ref]
(assert (forall ((vs $FVF<next>) (ws $FVF<next>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_next vs) ($FVF.domain_next ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_next vs))
            (= ($FVF.lookup_next vs x) ($FVF.lookup_next ws x)))
          :pattern (($FVF.lookup_next vs x) ($FVF.lookup_next ws x))
          :qid |qp.$FVF<next>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<next>To$Snap vs)
              ($SortWrappers.$FVF<next>To$Snap ws)
              )
    :qid |qp.$FVF<next>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_next pm r))
    :pattern (($FVF.perm_next pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_next f r) true)
    :pattern (($FVF.loc_next f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun inv@15@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@16@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@14@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@17@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun inv@27@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@28@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@31@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@32@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@38@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@39@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@42@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@43@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@49@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@50@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@54@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@55@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@61@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@62@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@66@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@67@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@73@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@74@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@78@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@79@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@26@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@29@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@40@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@45@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@52@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@57@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@64@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@69@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@76@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@81@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun inv@84@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@85@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@83@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@86@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun inv@89@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@90@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun inv@93@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@94@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun inv@98@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@99@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@91@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@96@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@101@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun inv@104@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@105@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@103@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@106@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun inv@110@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@111@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@112@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun inv@115@00 ($Snap Set<$Ref> $Ref $Ref) $Ref)
(declare-fun img@116@00 ($Snap Set<$Ref> $Ref $Ref) Bool)
(declare-fun sm@114@00 ($Snap Set<$Ref> $Ref) $FVF<next>)
(declare-fun sm@117@00 ($Snap Set<$Ref> $Ref) $FVF<next>)
(declare-fun inv@121@00 ($Snap Set<$Ref> $Ref $Ref) $Ref)
(declare-fun img@122@00 ($Snap Set<$Ref> $Ref $Ref) Bool)
(declare-fun sm@123@00 ($Snap Set<$Ref> $Ref) $FVF<next>)
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (= ($$%limited s@$ refs@0@00) ($$ s@$ refs@0@00))
  :pattern (($$ s@$ refs@0@00))
  :qid |quant-u-0|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  ($$%stateless refs@0@00)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-1|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) (and
    (forall ((n@13@00 $Ref)) (!
      (=>
        (Set_in n@13@00 refs@0@00)
        (and
          (= (inv@15@00 s@$ refs@0@00 n@13@00) n@13@00)
          (img@16@00 s@$ refs@0@00 n@13@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) n@13@00) n@13@00))
      :qid |quant-u-11|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@16@00 s@$ refs@0@00 r)
          (Set_in (inv@15@00 s@$ refs@0@00 r) refs@0@00))
        (= (inv@15@00 s@$ refs@0@00 r) r))
      :pattern ((inv@15@00 s@$ refs@0@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@14@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef0|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@16@00 s@$ refs@0@00 r)
          (Set_in (inv@15@00 s@$ refs@0@00 r) refs@0@00))
        (=
          ($FVF.lookup_next (sm@17@00 s@$ refs@0@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r)))
      :pattern (($FVF.lookup_next (sm@17@00 s@$ refs@0@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r))
      :qid |qp.fvfValDef1|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r) r)
      :pattern (($FVF.lookup_next (sm@17@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef2|))
    (=>
      ($$%precondition s@$ refs@0@00)
      (and
        (forall ((p $Ref) (s $Ref)) (!
          (=
            (and
              (Set_in p refs@0@00)
              (and
                (Set_in s refs@0@00)
                (= ($FVF.lookup_next (sm@17@00 s@$ refs@0@00) p) s)))
            (Set_in (create_edge<Edge> p s) result@1@00))
          :pattern ((create_edge<Edge> p s))
          ))
        (forall ((p $Ref) (s $Ref)) (!
          (=>
            (and (Set_in p refs@0@00) (exists_path<Bool> result@1@00 p s))
            (Set_in s refs@0@00))
          :pattern ((Set_in p refs@0@00) (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
          ))
        (forall ((p $Ref) (s $Ref)) (!
          (=>
            (and (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
            (Set_in p refs@0@00))
          :pattern ((Set_in p refs@0@00) (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
          ))))))
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-13|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-14|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-15|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-16|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (=
    (apply_TCFraming%limited s@$ g0@2@00 g1@3@00)
    (apply_TCFraming s@$ g0@2@00 g1@3@00))
  :pattern ((apply_TCFraming s@$ g0@2@00 g1@3@00))
  :qid |quant-u-2|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (apply_TCFraming%stateless g0@2@00 g1@3@00)
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-3|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (and
    (forall ((n@25@00 $Ref)) (!
      (=>
        (Set_in n@25@00 g0@2@00)
        (and
          (= (inv@27@00 s@$ g0@2@00 g1@3@00 n@25@00) n@25@00)
          (img@28@00 s@$ g0@2@00 g1@3@00 n@25@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) n@25@00) n@25@00))
      :qid |quant-u-18|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@28@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@27@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@27@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@27@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@30@00 $Ref)) (!
      (=>
        (Set_in n@30@00 g1@3@00)
        (and
          (= (inv@31@00 s@$ g0@2@00 g1@3@00 n@30@00) n@30@00)
          (img@32@00 s@$ g0@2@00 g1@3@00 n@30@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n@30@00) n@30@00))
      :qid |quant-u-21|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@32@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@31@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@31@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@31@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@37@00 $Ref)) (!
      (=>
        (Set_in n@37@00 g0@2@00)
        (and
          (= (inv@38@00 s@$ g0@2@00 g1@3@00 n@37@00) n@37@00)
          (img@39@00 s@$ g0@2@00 g1@3@00 n@37@00)))
      :pattern ((Set_in n@37@00 g0@2@00))
      :pattern ((inv@38@00 s@$ g0@2@00 g1@3@00 n@37@00))
      :pattern ((img@39@00 s@$ g0@2@00 g1@3@00 n@37@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@39@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@38@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@38@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@38@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@41@00 $Ref)) (!
      (=>
        (Set_in n@41@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@42@00 s@$ g0@2@00 g1@3@00 n@41@00) n@41@00)
          (img@43@00 s@$ g0@2@00 g1@3@00 n@41@00)))
      :pattern ((Set_in n@41@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@42@00 s@$ g0@2@00 g1@3@00 n@41@00))
      :pattern ((img@43@00 s@$ g0@2@00 g1@3@00 n@41@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@43@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@42@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@42@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@42@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@48@00 $Ref)) (!
      (=>
        (Set_in n@48@00 g1@3@00)
        (and
          (= (inv@49@00 s@$ g0@2@00 g1@3@00 n@48@00) n@48@00)
          (img@50@00 s@$ g0@2@00 g1@3@00 n@48@00)))
      :pattern ((Set_in n@48@00 g1@3@00))
      :pattern ((inv@49@00 s@$ g0@2@00 g1@3@00 n@48@00))
      :pattern ((img@50@00 s@$ g0@2@00 g1@3@00 n@48@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@50@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@49@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@49@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@49@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@53@00 $Ref)) (!
      (=>
        (Set_in n@53@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@54@00 s@$ g0@2@00 g1@3@00 n@53@00) n@53@00)
          (img@55@00 s@$ g0@2@00 g1@3@00 n@53@00)))
      :pattern ((Set_in n@53@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@54@00 s@$ g0@2@00 g1@3@00 n@53@00))
      :pattern ((img@55@00 s@$ g0@2@00 g1@3@00 n@53@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@55@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@54@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@54@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@54@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@60@00 $Ref)) (!
      (=>
        (Set_in n@60@00 g0@2@00)
        (and
          (= (inv@61@00 s@$ g0@2@00 g1@3@00 n@60@00) n@60@00)
          (img@62@00 s@$ g0@2@00 g1@3@00 n@60@00)))
      :pattern ((Set_in n@60@00 g0@2@00))
      :pattern ((inv@61@00 s@$ g0@2@00 g1@3@00 n@60@00))
      :pattern ((img@62@00 s@$ g0@2@00 g1@3@00 n@60@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@62@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@61@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@61@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@61@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@65@00 $Ref)) (!
      (=>
        (Set_in n@65@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@66@00 s@$ g0@2@00 g1@3@00 n@65@00) n@65@00)
          (img@67@00 s@$ g0@2@00 g1@3@00 n@65@00)))
      :pattern ((Set_in n@65@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@66@00 s@$ g0@2@00 g1@3@00 n@65@00))
      :pattern ((img@67@00 s@$ g0@2@00 g1@3@00 n@65@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@67@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@66@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@66@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@66@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@72@00 $Ref)) (!
      (=>
        (Set_in n@72@00 g1@3@00)
        (and
          (= (inv@73@00 s@$ g0@2@00 g1@3@00 n@72@00) n@72@00)
          (img@74@00 s@$ g0@2@00 g1@3@00 n@72@00)))
      :pattern ((Set_in n@72@00 g1@3@00))
      :pattern ((inv@73@00 s@$ g0@2@00 g1@3@00 n@72@00))
      :pattern ((img@74@00 s@$ g0@2@00 g1@3@00 n@72@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@74@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@73@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@73@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@73@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@77@00 $Ref)) (!
      (=>
        (Set_in n@77@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@78@00 s@$ g0@2@00 g1@3@00 n@77@00) n@77@00)
          (img@79@00 s@$ g0@2@00 g1@3@00 n@77@00)))
      :pattern ((Set_in n@77@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@78@00 s@$ g0@2@00 g1@3@00 n@77@00))
      :pattern ((img@79@00 s@$ g0@2@00 g1@3@00 n@77@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@79@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@78@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@78@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@78@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@26@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef3|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@28@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@27@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (=
          ($FVF.lookup_next (sm@29@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@29@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef4|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
      :pattern (($FVF.lookup_next (sm@29@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef5|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@40@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@38@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@39@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@38@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@39@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@40@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@40@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef12|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@38@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@39@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@28@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@27@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@40@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@40@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef9|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@38@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@39@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@32@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@31@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@40@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@40@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef10|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@40@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef11|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@45@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@42@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@43@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@42@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@43@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@45@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@45@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef19|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@42@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@43@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@28@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@27@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@45@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@45@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef16|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@42@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@43@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@32@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@31@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@45@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@45@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef17|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@45@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef18|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@52@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@49@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@50@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@49@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@50@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@52@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@52@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef26|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@49@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@50@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@28@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@27@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@52@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@52@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef23|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@49@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@50@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@32@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@31@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@52@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@52@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef24|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@52@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef25|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@57@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@54@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@55@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@54@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@55@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@57@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@57@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef33|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@54@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@55@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@28@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@27@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@57@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@57@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef30|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@54@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@55@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@32@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@31@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@57@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@57@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef31|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@57@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef32|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@64@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@61@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@62@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@61@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@62@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@64@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@64@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef40|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@61@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@62@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@28@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@27@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@64@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@64@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef37|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@61@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@62@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@32@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@31@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@64@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@64@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef38|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@64@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef39|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@69@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@66@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@67@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@66@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@67@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@69@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@69@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef47|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@66@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@67@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@28@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@27@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@69@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@69@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef44|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@66@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@67@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@32@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@31@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@69@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@69@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef45|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@69@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef46|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@76@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@73@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@74@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@73@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@74@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@76@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@76@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef54|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@73@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@74@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@28@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@27@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@76@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@76@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef51|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@73@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@74@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@32@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@31@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@76@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@76@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef52|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@76@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef53|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@81@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@78@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@79@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@78@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@79@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@81@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@81@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef61|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@78@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@79@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@28@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@27@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@81@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@81@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef58|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@78@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@79@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@32@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@31@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@81@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@81@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef59|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@81@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef60|))
    (=>
      (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
      (and
        (Set_equal (Set_union g0@2@00 g1@3@00) (Set_union g1@3@00 g0@2@00))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ (ite
                  (Set_in v g0@2@00)
                  (ite
                    (Set_in u g0@2@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
            (exists_path<Bool> ($$ (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (exists_path<Bool> ($$ (ite
                  (Set_in v g1@3@00)
                  (ite
                    (Set_in u g1@3@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
            (exists_path<Bool> ($$ (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (not
                  (exists_path<Bool> ($$ (ite
                    (Set_in v g0@2@00)
                    (ite
                      (Set_in u g0@2@00)
                      ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
                    ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))))
            (not
              (exists_path<Bool> ($$ (ite
                (and
                  (Set_in u g0@2@00)
                  (and
                    (Set_in v g0@2@00)
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
                ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)) u v)))
          :pattern ((Set_in u g0@2@00) (Set_in v g0@2@00))
          :pattern ((Set_in u g0@2@00) (exists_path<Bool> ($$ (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
          :pattern ((Set_in u g0@2@00) (exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)) u v))
          :pattern ((Set_in v g0@2@00) (exists_path<Bool> ($$ (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
          :pattern ((Set_in v g0@2@00) (exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (not
                  (exists_path<Bool> ($$ (ite
                    (Set_in v g1@3@00)
                    (ite
                      (Set_in u g1@3@00)
                      ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
                    ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))))
            (not
              (exists_path<Bool> ($$ (ite
                (and
                  (Set_in u g1@3@00)
                  (and
                    (Set_in v g1@3@00)
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
                ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v)))
          :pattern ((Set_in u g1@3@00) (Set_in v g1@3@00))
          :pattern ((Set_in u g1@3@00) (exists_path<Bool> ($$ (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
          :pattern ((Set_in u g1@3@00) (exists_path<Bool> ($$ (ite
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
          :pattern ((Set_in v g1@3@00) (exists_path<Bool> ($$ (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
          :pattern ((Set_in v g1@3@00) (exists_path<Bool> ($$ (ite
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
          ))))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-78|)))
; WARNING: (1586,11): 'if' cannot be used in patterns.
; WARNING: (1586,11): 'if' cannot be used in patterns.
; WARNING: (1586,11): 'and' cannot be used in patterns.
; WARNING: (1586,11): 'and' cannot be used in patterns.
; WARNING: (1586,11): 'if' cannot be used in patterns.
; WARNING: (1623,11): 'if' cannot be used in patterns.
; WARNING: (1623,11): 'if' cannot be used in patterns.
; WARNING: (1623,11): 'and' cannot be used in patterns.
; WARNING: (1623,11): 'and' cannot be used in patterns.
; WARNING: (1623,11): 'if' cannot be used in patterns.
; WARNING: (1693,11): 'if' cannot be used in patterns.
; WARNING: (1693,11): 'if' cannot be used in patterns.
; WARNING: (1693,11): 'and' cannot be used in patterns.
; WARNING: (1693,11): 'and' cannot be used in patterns.
; WARNING: (1693,11): 'if' cannot be used in patterns.
; WARNING: (1693,11): 'if' cannot be used in patterns.
; WARNING: (1693,11): 'if' cannot be used in patterns.
; WARNING: (1693,11): 'and' cannot be used in patterns.
; WARNING: (1693,11): 'and' cannot be used in patterns.
; WARNING: (1693,11): 'if' cannot be used in patterns.
; WARNING: (1693,11): 'if' cannot be used in patterns.
; WARNING: (1693,11): 'if' cannot be used in patterns.
; WARNING: (1693,11): 'and' cannot be used in patterns.
; WARNING: (1693,11): 'and' cannot be used in patterns.
; WARNING: (1693,11): 'if' cannot be used in patterns.
; WARNING: (1763,11): 'if' cannot be used in patterns.
; WARNING: (1763,11): 'if' cannot be used in patterns.
; WARNING: (1763,11): 'and' cannot be used in patterns.
; WARNING: (1763,11): 'and' cannot be used in patterns.
; WARNING: (1763,11): 'if' cannot be used in patterns.
; WARNING: (1763,11): 'if' cannot be used in patterns.
; WARNING: (1763,11): 'if' cannot be used in patterns.
; WARNING: (1763,11): 'and' cannot be used in patterns.
; WARNING: (1763,11): 'and' cannot be used in patterns.
; WARNING: (1763,11): 'if' cannot be used in patterns.
; WARNING: (1763,11): 'if' cannot be used in patterns.
; WARNING: (1763,11): 'if' cannot be used in patterns.
; WARNING: (1763,11): 'and' cannot be used in patterns.
; WARNING: (1763,11): 'and' cannot be used in patterns.
; WARNING: (1763,11): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) true)
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-79|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g0@2@00) (Set_in v g0@2@00))
          ($$%precondition (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00))
        (=>
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (exists_path<Bool> ($$ (ite
                (Set_in v g0@2@00)
                (ite
                  (Set_in u g0@2@00)
                  ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
                ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
          (and
            (=>
              (and (Set_in u g0@2@00) (Set_in v g0@2@00))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00))
            ($$%precondition (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g0@2@00)
        (ite
          (Set_in u g0@2@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-80|)))
; WARNING: (1823,7): 'if' cannot be used in patterns.
; WARNING: (1823,7): 'if' cannot be used in patterns.
; WARNING: (1823,7): 'and' cannot be used in patterns.
; WARNING: (1823,7): 'and' cannot be used in patterns.
; WARNING: (1823,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g1@3@00) (Set_in v g1@3@00))
          ($$%precondition (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00))
        (=>
          (and
            (Set_in u g1@3@00)
            (and
              (Set_in v g1@3@00)
              (exists_path<Bool> ($$ (ite
                (Set_in v g1@3@00)
                (ite
                  (Set_in u g1@3@00)
                  ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
                ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
          (and
            (=>
              (and (Set_in u g1@3@00) (Set_in v g1@3@00))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00))
            ($$%precondition (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g1@3@00)
        (ite
          (Set_in u g1@3@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g1@3@00)
          (and
            (Set_in v g1@3@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-81|)))
; WARNING: (1879,7): 'if' cannot be used in patterns.
; WARNING: (1879,7): 'if' cannot be used in patterns.
; WARNING: (1879,7): 'and' cannot be used in patterns.
; WARNING: (1879,7): 'and' cannot be used in patterns.
; WARNING: (1879,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g0@2@00) (Set_in v g0@2@00))
          ($$%precondition (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00))
        (=>
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (not
                (exists_path<Bool> ($$ (ite
                  (Set_in v g0@2@00)
                  (ite
                    (Set_in u g0@2@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))))
          (and
            (=>
              (and (Set_in u g0@2@00) (Set_in v g0@2@00))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00))
            ($$%precondition (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)))))
      :pattern ((Set_in u g0@2@00) (Set_in v g0@2@00))
      :pattern ((Set_in u g0@2@00) (exists_path<Bool> ($$ (ite
        (Set_in v g0@2@00)
        (ite
          (Set_in u g0@2@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
      :pattern ((Set_in u g0@2@00) (exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)) u v))
      :pattern ((Set_in v g0@2@00) (exists_path<Bool> ($$ (ite
        (Set_in v g0@2@00)
        (ite
          (Set_in u g0@2@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
      :pattern ((Set_in v g0@2@00) (exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g0@2@00)
        (ite
          (Set_in u g0@2@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@64@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@45@00 s@$ g0@2@00 g1@3@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@69@00 s@$ g0@2@00 g1@3@00))) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-82|)))
; WARNING: (1967,7): 'if' cannot be used in patterns.
; WARNING: (1967,7): 'if' cannot be used in patterns.
; WARNING: (1967,7): 'and' cannot be used in patterns.
; WARNING: (1967,7): 'and' cannot be used in patterns.
; WARNING: (1967,7): 'if' cannot be used in patterns.
; WARNING: (1967,7): 'if' cannot be used in patterns.
; WARNING: (1967,7): 'if' cannot be used in patterns.
; WARNING: (1967,7): 'and' cannot be used in patterns.
; WARNING: (1967,7): 'and' cannot be used in patterns.
; WARNING: (1967,7): 'if' cannot be used in patterns.
; WARNING: (1967,7): 'if' cannot be used in patterns.
; WARNING: (1967,7): 'if' cannot be used in patterns.
; WARNING: (1967,7): 'and' cannot be used in patterns.
; WARNING: (1967,7): 'and' cannot be used in patterns.
; WARNING: (1967,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g1@3@00) (Set_in v g1@3@00))
          ($$%precondition (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00))
        (=>
          (and
            (Set_in u g1@3@00)
            (and
              (Set_in v g1@3@00)
              (not
                (exists_path<Bool> ($$ (ite
                  (Set_in v g1@3@00)
                  (ite
                    (Set_in u g1@3@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))))
          (and
            (=>
              (and (Set_in u g1@3@00) (Set_in v g1@3@00))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00))
            ($$%precondition (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)))))
      :pattern ((Set_in u g1@3@00) (Set_in v g1@3@00))
      :pattern ((Set_in u g1@3@00) (exists_path<Bool> ($$ (ite
        (Set_in v g1@3@00)
        (ite
          (Set_in u g1@3@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
      :pattern ((Set_in u g1@3@00) (exists_path<Bool> ($$ (ite
        (and
          (Set_in u g1@3@00)
          (and
            (Set_in v g1@3@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
      :pattern ((Set_in v g1@3@00) (exists_path<Bool> ($$ (ite
        (Set_in v g1@3@00)
        (ite
          (Set_in u g1@3@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
      :pattern ((Set_in v g1@3@00) (exists_path<Bool> ($$ (ite
        (and
          (Set_in u g1@3@00)
          (and
            (Set_in v g1@3@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g1@3@00)
        (ite
          (Set_in u g1@3@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@76@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g1@3@00)
          (and
            (Set_in v g1@3@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@52@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@57@00 s@$ g0@2@00 g1@3@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@81@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-83|)))
; WARNING: (2055,7): 'if' cannot be used in patterns.
; WARNING: (2055,7): 'if' cannot be used in patterns.
; WARNING: (2055,7): 'and' cannot be used in patterns.
; WARNING: (2055,7): 'and' cannot be used in patterns.
; WARNING: (2055,7): 'if' cannot be used in patterns.
; WARNING: (2055,7): 'if' cannot be used in patterns.
; WARNING: (2055,7): 'if' cannot be used in patterns.
; WARNING: (2055,7): 'and' cannot be used in patterns.
; WARNING: (2055,7): 'and' cannot be used in patterns.
; WARNING: (2055,7): 'if' cannot be used in patterns.
; WARNING: (2055,7): 'if' cannot be used in patterns.
; WARNING: (2055,7): 'if' cannot be used in patterns.
; WARNING: (2055,7): 'and' cannot be used in patterns.
; WARNING: (2055,7): 'and' cannot be used in patterns.
; WARNING: (2055,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>)) (!
  (= (acyclic_list_segment%limited s@$ g@5@00) (acyclic_list_segment s@$ g@5@00))
  :pattern ((acyclic_list_segment s@$ g@5@00))
  :qid |quant-u-4|)))
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>)) (!
  (acyclic_list_segment%stateless g@5@00)
  :pattern ((acyclic_list_segment%limited s@$ g@5@00))
  :qid |quant-u-5|)))
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>)) (!
  (and
    (forall ((n@82@00 $Ref)) (!
      (=>
        (Set_in n@82@00 g@5@00)
        (and
          (= (inv@84@00 s@$ g@5@00 n@82@00) n@82@00)
          (img@85@00 s@$ g@5@00 n@82@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n@82@00) n@82@00))
      :qid |quant-u-85|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@85@00 s@$ g@5@00 r) (Set_in (inv@84@00 s@$ g@5@00 r) g@5@00))
        (= (inv@84@00 s@$ g@5@00 r) r))
      :pattern ((inv@84@00 s@$ g@5@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@88@00 $Ref)) (!
      (=>
        (Set_in n@88@00 g@5@00)
        (and
          (= (inv@89@00 s@$ g@5@00 n@88@00) n@88@00)
          (img@90@00 s@$ g@5@00 n@88@00)))
      :pattern ((Set_in n@88@00 g@5@00))
      :pattern ((inv@89@00 s@$ g@5@00 n@88@00))
      :pattern ((img@90@00 s@$ g@5@00 n@88@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@90@00 s@$ g@5@00 r) (Set_in (inv@89@00 s@$ g@5@00 r) g@5@00))
        (= (inv@89@00 s@$ g@5@00 r) r))
      :pattern ((inv@89@00 s@$ g@5@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@92@00 $Ref)) (!
      (=>
        (Set_in n@92@00 g@5@00)
        (and
          (= (inv@93@00 s@$ g@5@00 n@92@00) n@92@00)
          (img@94@00 s@$ g@5@00 n@92@00)))
      :pattern ((Set_in n@92@00 g@5@00))
      :pattern ((inv@93@00 s@$ g@5@00 n@92@00))
      :pattern ((img@94@00 s@$ g@5@00 n@92@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@94@00 s@$ g@5@00 r) (Set_in (inv@93@00 s@$ g@5@00 r) g@5@00))
        (= (inv@93@00 s@$ g@5@00 r) r))
      :pattern ((inv@93@00 s@$ g@5@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@97@00 $Ref)) (!
      (=>
        (Set_in n@97@00 g@5@00)
        (and
          (= (inv@98@00 s@$ g@5@00 n@97@00) n@97@00)
          (img@99@00 s@$ g@5@00 n@97@00)))
      :pattern ((Set_in n@97@00 g@5@00))
      :pattern ((inv@98@00 s@$ g@5@00 n@97@00))
      :pattern ((img@99@00 s@$ g@5@00 n@97@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@99@00 s@$ g@5@00 r) (Set_in (inv@98@00 s@$ g@5@00 r) g@5@00))
        (= (inv@98@00 s@$ g@5@00 r) r))
      :pattern ((inv@98@00 s@$ g@5@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@83@00 s@$ g@5@00) r))
      :qid |qp.fvfResTrgDef62|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@85@00 s@$ g@5@00 r) (Set_in (inv@84@00 s@$ g@5@00 r) g@5@00))
        (=
          ($FVF.lookup_next (sm@86@00 s@$ g@5@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@86@00 s@$ g@5@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef63|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@86@00 s@$ g@5@00) r))
      :qid |qp.fvfResTrgDef64|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@91@00 s@$ g@5@00)))
          (and (Set_in (inv@89@00 s@$ g@5@00 r) g@5@00) (img@90@00 s@$ g@5@00 r)))
        (=>
          (and (Set_in (inv@89@00 s@$ g@5@00 r) g@5@00) (img@90@00 s@$ g@5@00 r))
          (Set_in r ($FVF.domain_next (sm@91@00 s@$ g@5@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@91@00 s@$ g@5@00))))
      :qid |qp.fvfDomDef67|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and (Set_in (inv@89@00 s@$ g@5@00 r) g@5@00) (img@90@00 s@$ g@5@00 r))
          (and (img@85@00 s@$ g@5@00 r) (Set_in (inv@84@00 s@$ g@5@00 r) g@5@00)))
        (=
          ($FVF.lookup_next (sm@91@00 s@$ g@5@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@91@00 s@$ g@5@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef65|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@91@00 s@$ g@5@00) r))
      :qid |qp.fvfResTrgDef66|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@96@00 s@$ g@5@00)))
          (and (Set_in (inv@93@00 s@$ g@5@00 r) g@5@00) (img@94@00 s@$ g@5@00 r)))
        (=>
          (and (Set_in (inv@93@00 s@$ g@5@00 r) g@5@00) (img@94@00 s@$ g@5@00 r))
          (Set_in r ($FVF.domain_next (sm@96@00 s@$ g@5@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@96@00 s@$ g@5@00))))
      :qid |qp.fvfDomDef72|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and (Set_in (inv@93@00 s@$ g@5@00 r) g@5@00) (img@94@00 s@$ g@5@00 r))
          (and (img@85@00 s@$ g@5@00 r) (Set_in (inv@84@00 s@$ g@5@00 r) g@5@00)))
        (=
          ($FVF.lookup_next (sm@96@00 s@$ g@5@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@96@00 s@$ g@5@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef70|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@96@00 s@$ g@5@00) r))
      :qid |qp.fvfResTrgDef71|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@101@00 s@$ g@5@00)))
          (and (Set_in (inv@98@00 s@$ g@5@00 r) g@5@00) (img@99@00 s@$ g@5@00 r)))
        (=>
          (and (Set_in (inv@98@00 s@$ g@5@00 r) g@5@00) (img@99@00 s@$ g@5@00 r))
          (Set_in r ($FVF.domain_next (sm@101@00 s@$ g@5@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@101@00 s@$ g@5@00))))
      :qid |qp.fvfDomDef77|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and (Set_in (inv@98@00 s@$ g@5@00 r) g@5@00) (img@99@00 s@$ g@5@00 r))
          (and (img@85@00 s@$ g@5@00 r) (Set_in (inv@84@00 s@$ g@5@00 r) g@5@00)))
        (=
          ($FVF.lookup_next (sm@101@00 s@$ g@5@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@101@00 s@$ g@5@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef75|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@101@00 s@$ g@5@00) r))
      :qid |qp.fvfResTrgDef76|))
    (=>
      (acyclic_list_segment%precondition s@$ g@5@00)
      (=
        (acyclic_list_segment s@$ g@5@00)
        (and
          (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@91@00 s@$ g@5@00)) g@5@00))
          (and
            (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@91@00 s@$ g@5@00)) g@5@00))
            (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@91@00 s@$ g@5@00)) g@5@00)))))))
  :pattern ((acyclic_list_segment s@$ g@5@00))
  :qid |quant-u-102|)))
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>)) (!
  (=>
    (acyclic_list_segment%precondition s@$ g@5@00)
    (and
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@91@00 s@$ g@5@00)) g@5@00)
      (=>
        (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@91@00 s@$ g@5@00)) g@5@00))
        (and
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@91@00 s@$ g@5@00)) g@5@00)
          (=>
            (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@91@00 s@$ g@5@00)) g@5@00))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@91@00 s@$ g@5@00)) g@5@00))))))
  :pattern ((acyclic_list_segment s@$ g@5@00))
  :qid |quant-u-103|)))
(assert (forall ((s@$ $Snap) (g@7@00 Set<$Ref>) (roots@8@00 Set<$Ref>)) (!
  (=
    (is_global_sroot%limited s@$ g@7@00 roots@8@00)
    (is_global_sroot s@$ g@7@00 roots@8@00))
  :pattern ((is_global_sroot s@$ g@7@00 roots@8@00))
  :qid |quant-u-6|)))
(assert (forall ((s@$ $Snap) (g@7@00 Set<$Ref>) (roots@8@00 Set<$Ref>)) (!
  (is_global_sroot%stateless g@7@00 roots@8@00)
  :pattern ((is_global_sroot%limited s@$ g@7@00 roots@8@00))
  :qid |quant-u-7|)))
(assert (forall ((s@$ $Snap) (g@7@00 Set<$Ref>) (roots@8@00 Set<$Ref>)) (!
  (and
    (forall ((n$0@102@00 $Ref)) (!
      (=>
        (Set_in n$0@102@00 g@7@00)
        (and
          (= (inv@104@00 s@$ g@7@00 roots@8@00 n$0@102@00) n$0@102@00)
          (img@105@00 s@$ g@7@00 roots@8@00 n$0@102@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n$0@102@00) n$0@102@00))
      :qid |quant-u-105|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@105@00 s@$ g@7@00 roots@8@00 r)
          (Set_in (inv@104@00 s@$ g@7@00 roots@8@00 r) g@7@00))
        (= (inv@104@00 s@$ g@7@00 roots@8@00 r) r))
      :pattern ((inv@104@00 s@$ g@7@00 roots@8@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@109@00 $Ref)) (!
      (=>
        (Set_in n@109@00 g@7@00)
        (and
          (= (inv@110@00 s@$ g@7@00 roots@8@00 n@109@00) n@109@00)
          (img@111@00 s@$ g@7@00 roots@8@00 n@109@00)))
      :pattern ((Set_in n@109@00 g@7@00))
      :pattern ((inv@110@00 s@$ g@7@00 roots@8@00 n@109@00))
      :pattern ((img@111@00 s@$ g@7@00 roots@8@00 n@109@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@111@00 s@$ g@7@00 roots@8@00 r)
          (Set_in (inv@110@00 s@$ g@7@00 roots@8@00 r) g@7@00))
        (= (inv@110@00 s@$ g@7@00 roots@8@00 r) r))
      :pattern ((inv@110@00 s@$ g@7@00 roots@8@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@103@00 s@$ g@7@00 roots@8@00) r))
      :qid |qp.fvfResTrgDef78|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@105@00 s@$ g@7@00 roots@8@00 r)
          (Set_in (inv@104@00 s@$ g@7@00 roots@8@00 r) g@7@00))
        (=
          ($FVF.lookup_next (sm@106@00 s@$ g@7@00 roots@8@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@106@00 s@$ g@7@00 roots@8@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef79|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@106@00 s@$ g@7@00 roots@8@00) r))
      :qid |qp.fvfResTrgDef80|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@112@00 s@$ g@7@00 roots@8@00)))
          (and
            (Set_in (inv@110@00 s@$ g@7@00 roots@8@00 r) g@7@00)
            (img@111@00 s@$ g@7@00 roots@8@00 r)))
        (=>
          (and
            (Set_in (inv@110@00 s@$ g@7@00 roots@8@00 r) g@7@00)
            (img@111@00 s@$ g@7@00 roots@8@00 r))
          (Set_in r ($FVF.domain_next (sm@112@00 s@$ g@7@00 roots@8@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@112@00 s@$ g@7@00 roots@8@00))))
      :qid |qp.fvfDomDef83|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@110@00 s@$ g@7@00 roots@8@00 r) g@7@00)
            (img@111@00 s@$ g@7@00 roots@8@00 r))
          (and
            (img@105@00 s@$ g@7@00 roots@8@00 r)
            (Set_in (inv@104@00 s@$ g@7@00 roots@8@00 r) g@7@00)))
        (=
          ($FVF.lookup_next (sm@112@00 s@$ g@7@00 roots@8@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@112@00 s@$ g@7@00 roots@8@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef81|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@112@00 s@$ g@7@00 roots@8@00) r))
      :qid |qp.fvfResTrgDef82|))
    (=>
      (is_global_sroot%precondition s@$ g@7@00 roots@8@00)
      (=
        (is_global_sroot s@$ g@7@00 roots@8@00)
        (forall ((n $Ref)) (!
          (=>
            (Set_in n g@7@00)
            (exists_spath<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@112@00 s@$ g@7@00 roots@8@00)) g@7@00) roots@8@00 n))
          :pattern ((exists_spath<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@112@00 s@$ g@7@00 roots@8@00)) g@7@00) roots@8@00 n))
          )))))
  :pattern ((is_global_sroot s@$ g@7@00 roots@8@00))
  :qid |quant-u-112|)))
(assert (forall ((s@$ $Snap) (g@7@00 Set<$Ref>) (roots@8@00 Set<$Ref>)) (!
  (=>
    (is_global_sroot%precondition s@$ g@7@00 roots@8@00)
    (forall ((n $Ref)) (!
      (=>
        (Set_in n g@7@00)
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@112@00 s@$ g@7@00 roots@8@00)) g@7@00))
      :pattern ((exists_spath<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@112@00 s@$ g@7@00 roots@8@00)) g@7@00) roots@8@00 n))
      )))
  :pattern ((is_global_sroot s@$ g@7@00 roots@8@00))
  :qid |quant-u-113|)))
(assert (forall ((s@$ $Snap) (g@10@00 Set<$Ref>) (root@11@00 $Ref)) (!
  (=
    (is_global_root%limited s@$ g@10@00 root@11@00)
    (is_global_root s@$ g@10@00 root@11@00))
  :pattern ((is_global_root s@$ g@10@00 root@11@00))
  :qid |quant-u-8|)))
(assert (forall ((s@$ $Snap) (g@10@00 Set<$Ref>) (root@11@00 $Ref)) (!
  (is_global_root%stateless g@10@00 root@11@00)
  :pattern ((is_global_root%limited s@$ g@10@00 root@11@00))
  :qid |quant-u-9|)))
(assert (forall ((s@$ $Snap) (g@10@00 Set<$Ref>) (root@11@00 $Ref)) (!
  (and
    (forall ((n$0@113@00 $Ref)) (!
      (=>
        (Set_in n$0@113@00 g@10@00)
        (and
          (= (inv@115@00 s@$ g@10@00 root@11@00 n$0@113@00) n$0@113@00)
          (img@116@00 s@$ g@10@00 root@11@00 n$0@113@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n$0@113@00) n$0@113@00))
      :qid |quant-u-115|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@116@00 s@$ g@10@00 root@11@00 r)
          (Set_in (inv@115@00 s@$ g@10@00 root@11@00 r) g@10@00))
        (= (inv@115@00 s@$ g@10@00 root@11@00 r) r))
      :pattern ((inv@115@00 s@$ g@10@00 root@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@120@00 $Ref)) (!
      (=>
        (Set_in n@120@00 g@10@00)
        (and
          (= (inv@121@00 s@$ g@10@00 root@11@00 n@120@00) n@120@00)
          (img@122@00 s@$ g@10@00 root@11@00 n@120@00)))
      :pattern ((Set_in n@120@00 g@10@00))
      :pattern ((inv@121@00 s@$ g@10@00 root@11@00 n@120@00))
      :pattern ((img@122@00 s@$ g@10@00 root@11@00 n@120@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@122@00 s@$ g@10@00 root@11@00 r)
          (Set_in (inv@121@00 s@$ g@10@00 root@11@00 r) g@10@00))
        (= (inv@121@00 s@$ g@10@00 root@11@00 r) r))
      :pattern ((inv@121@00 s@$ g@10@00 root@11@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@114@00 s@$ g@10@00 root@11@00) r))
      :qid |qp.fvfResTrgDef84|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@116@00 s@$ g@10@00 root@11@00 r)
          (Set_in (inv@115@00 s@$ g@10@00 root@11@00 r) g@10@00))
        (=
          ($FVF.lookup_next (sm@117@00 s@$ g@10@00 root@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@117@00 s@$ g@10@00 root@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef85|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@117@00 s@$ g@10@00 root@11@00) r))
      :qid |qp.fvfResTrgDef86|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@123@00 s@$ g@10@00 root@11@00)))
          (and
            (Set_in (inv@121@00 s@$ g@10@00 root@11@00 r) g@10@00)
            (img@122@00 s@$ g@10@00 root@11@00 r)))
        (=>
          (and
            (Set_in (inv@121@00 s@$ g@10@00 root@11@00 r) g@10@00)
            (img@122@00 s@$ g@10@00 root@11@00 r))
          (Set_in r ($FVF.domain_next (sm@123@00 s@$ g@10@00 root@11@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@123@00 s@$ g@10@00 root@11@00))))
      :qid |qp.fvfDomDef89|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@121@00 s@$ g@10@00 root@11@00 r) g@10@00)
            (img@122@00 s@$ g@10@00 root@11@00 r))
          (and
            (img@116@00 s@$ g@10@00 root@11@00 r)
            (Set_in (inv@115@00 s@$ g@10@00 root@11@00 r) g@10@00)))
        (=
          ($FVF.lookup_next (sm@123@00 s@$ g@10@00 root@11@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@123@00 s@$ g@10@00 root@11@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef87|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@123@00 s@$ g@10@00 root@11@00) r))
      :qid |qp.fvfResTrgDef88|))
    (=>
      (is_global_root%precondition s@$ g@10@00 root@11@00)
      (=
        (is_global_root s@$ g@10@00 root@11@00)
        (forall ((n $Ref)) (!
          (=>
            (Set_in n g@10@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g@10@00 root@11@00)) g@10@00) root@11@00 n))
          :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g@10@00 root@11@00)) g@10@00) root@11@00 n))
          )))))
  :pattern ((is_global_root s@$ g@10@00 root@11@00))
  :qid |quant-u-122|)))
(assert (forall ((s@$ $Snap) (g@10@00 Set<$Ref>) (root@11@00 $Ref)) (!
  (=>
    (is_global_root%precondition s@$ g@10@00 root@11@00)
    (forall ((n $Ref)) (!
      (=>
        (Set_in n g@10@00)
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g@10@00 root@11@00)) g@10@00))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@123@00 s@$ g@10@00 root@11@00)) g@10@00) root@11@00 n))
      )))
  :pattern ((is_global_root s@$ g@10@00 root@11@00))
  :qid |quant-u-123|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- test_graph ----------
(declare-const g0@0@01 Set<$Ref>)
(declare-const g1@1@01 Set<$Ref>)
(declare-const g0@2@01 Set<$Ref>)
(declare-const g1@3@01 Set<$Ref>)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@4@01 $Snap)
(assert (= $t@4@01 ($Snap.combine ($Snap.first $t@4@01) ($Snap.second $t@4@01))))
(assert (= ($Snap.first $t@4@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@2@01)))
(assert (=
  ($Snap.second $t@4@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@4@01))
    ($Snap.second ($Snap.second $t@4@01)))))
(declare-const n@5@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@5@01 g0@2@01))
(declare-const sm@6@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@7@01 ($Ref) $Ref)
(declare-fun img@8@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@5@01 $Ref) (n2@5@01 $Ref)) (!
  (=>
    (and (Set_in n1@5@01 g0@2@01) (Set_in n2@5@01 g0@2@01) (= n1@5@01 n2@5@01))
    (= n1@5@01 n2@5@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@5@01 $Ref)) (!
  (=>
    (Set_in n@5@01 g0@2@01)
    (and (= (inv@7@01 n@5@01) n@5@01) (img@8@01 n@5@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) n@5@01) n@5@01))
  :qid |quant-u-125|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) (= (inv@7@01 r) r))
  :pattern ((inv@7@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@5@01 $Ref)) (!
  (=> (Set_in n@5@01 g0@2@01) (not (= n@5@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) n@5@01) n@5@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@9@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@7@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) r) r))
  :pattern ((inv@7@01 r))
  :qid |quant-u-126|)))
(assert (=
  ($Snap.second ($Snap.second $t@4@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@4@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@4@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@10@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 0 | !(n$0@10@01 in g0@2@01) | live]
; [else-branch: 0 | n$0@10@01 in g0@2@01 | live]
(push) ; 4
; [then-branch: 0 | !(n$0@10@01 in g0@2@01)]
(assert (not (Set_in n$0@10@01 g0@2@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | n$0@10@01 in g0@2@01]
(assert (Set_in n$0@10@01 g0@2@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
(push) ; 5
(assert (not (and (img@8@01 n$0@10@01) (Set_in (inv@7@01 n$0@10@01) g0@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (Set_in n$0@10@01 g0@2@01)
  (and
    (Set_in n$0@10@01 g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))))
(assert (or (Set_in n$0@10@01 g0@2@01) (not (Set_in n$0@10@01 g0@2@01))))
(push) ; 3
; [then-branch: 1 | n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null | live]
; [else-branch: 1 | !(n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null) | live]
(push) ; 4
; [then-branch: 1 | n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null]
(assert (and
  (Set_in n$0@10@01 g0@2@01)
  (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
(push) ; 5
(assert (not (and (img@8@01 n$0@10@01) (Set_in (inv@7@01 n$0@10@01) g0@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null)]
(assert (not
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@10@01 g0@2@01)
      (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@10@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@10@01 g0@2@01)
      (and
        (Set_in n$0@10@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or (Set_in n$0@10@01 g0@2@01) (not (Set_in n$0@10@01 g0@2@01)))
    (=>
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or
      (not
        (and
          (Set_in n$0@10@01 g0@2@01)
          (not
            (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) g0@2@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@14@354@23-aux|)))
(assert (forall ((n$0@10@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@10@01 g0@2@01)
      (and
        (Set_in n$0@10@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or (Set_in n$0@10@01 g0@2@01) (not (Set_in n$0@10@01 g0@2@01)))
    (=>
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or
      (not
        (and
          (Set_in n$0@10@01 g0@2@01)
          (not
            (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
  :pattern ((Set_in n$0@10@01 g0@2@01) ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@14@354@23-aux|)))
(assert (forall ((n$0@10@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@10@01 g0@2@01)
      (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) g0@2@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) g0@2@01))
  :pattern ((Set_in n$0@10@01 g0@2@01) ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@14@354@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@4@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01)))) $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@3@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))))
(declare-const n$1@11@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@11@01 g1@3@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@12@01 ($Ref) $Ref)
(declare-fun img@13@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@11@01 $Ref) (n$12@11@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@11@01 g1@3@01)
      (Set_in n$12@11@01 g1@3@01)
      (= n$11@11@01 n$12@11@01))
    (= n$11@11@01 n$12@11@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@11@01 $Ref)) (!
  (=>
    (Set_in n$1@11@01 g1@3@01)
    (and (= (inv@12@01 n$1@11@01) n$1@11@01) (img@13@01 n$1@11@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) n$1@11@01) n$1@11@01))
  :qid |quant-u-128|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)) (= (inv@12@01 r) r))
  :pattern ((inv@12@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@11@01 $Ref)) (!
  (=> (Set_in n$1@11@01 g1@3@01) (not (= n$1@11@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) n$1@11@01) n$1@11@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@11@01 n@5@01)
    (=
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))))
  
  :qid |quant-u-129|))))
(check-sat)
; unknown
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(declare-const sm@14@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@12@01 r) g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
  :pattern ((inv@12@01 r))
  :qid |quant-u-130|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@15@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 2 | !(n$2@15@01 in g1@3@01) | live]
; [else-branch: 2 | n$2@15@01 in g1@3@01 | live]
(push) ; 4
; [then-branch: 2 | !(n$2@15@01 in g1@3@01)]
(assert (not (Set_in n$2@15@01 g1@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 2 | n$2@15@01 in g1@3@01]
(assert (Set_in n$2@15@01 g1@3@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@8@01 n$2@15@01) (Set_in (inv@7@01 n$2@15@01) g0@2@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@13@01 n$2@15@01) (Set_in (inv@12@01 n$2@15@01) g1@3@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (=>
  (Set_in n$2@15@01 g1@3@01)
  (and
    (Set_in n$2@15@01 g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))))
(assert (or (Set_in n$2@15@01 g1@3@01) (not (Set_in n$2@15@01 g1@3@01))))
(push) ; 3
; [then-branch: 3 | n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null | live]
; [else-branch: 3 | !(n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null) | live]
(push) ; 4
; [then-branch: 3 | n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null]
(assert (and
  (Set_in n$2@15@01 g1@3@01)
  (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@8@01 n$2@15@01) (Set_in (inv@7@01 n$2@15@01) g0@2@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@13@01 n$2@15@01) (Set_in (inv@12@01 n$2@15@01) g1@3@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null)]
(assert (not
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (=>
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@15@01 g1@3@01)
      (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@15@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@15@01 g1@3@01)
      (and
        (Set_in n$2@15@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or (Set_in n$2@15@01 g1@3@01) (not (Set_in n$2@15@01 g1@3@01)))
    (=>
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or
      (not
        (and
          (Set_in n$2@15@01 g1@3@01)
          (not
            (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) g1@3@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@27@354@36-aux|)))
(assert (forall ((n$2@15@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@15@01 g1@3@01)
      (and
        (Set_in n$2@15@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or (Set_in n$2@15@01 g1@3@01) (not (Set_in n$2@15@01 g1@3@01)))
    (=>
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or
      (not
        (and
          (Set_in n$2@15@01 g1@3@01)
          (not
            (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
  :pattern ((Set_in n$2@15@01 g1@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@27@354@36-aux|)))
(assert (forall ((n$2@15@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@15@01 g1@3@01)
      (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) g1@3@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) g1@3@01))
  :pattern ((Set_in n$2@15@01 g1@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@354@27@354@36|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; assert (forall e: Edge ::
;     { (e in $$(g0)) }
;     { (e in ($$(g0) union $$(g1))) }
;     (e in $$(g0)) ==> (e in ($$(g0) union $$(g1))))
; [eval] (forall e: Edge :: { (e in $$(g0)) } { (e in ($$(g0) union $$(g1))) } (e in $$(g0)) ==> (e in ($$(g0) union $$(g1))))
(declare-const e@16@01 Edge)
(push) ; 3
; [eval] (e in $$(g0)) ==> (e in ($$(g0) union $$(g1)))
; [eval] (e in $$(g0))
; [eval] $$(g0)
(push) ; 4
(declare-const n@17@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@17@01 g0@2@01))
(pop) ; 5
(declare-fun inv@18@01 ($Ref) $Ref)
(declare-fun img@19@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@17@01 $Ref) (n2@17@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@17@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n1@17@01) n1@17@01))
      (and
        (Set_in n2@17@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n2@17@01) n2@17@01))
      (= n1@17@01 n2@17@01))
    (= n1@17@01 n2@17@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@17@01 $Ref)) (!
  (=>
    (Set_in n@17@01 g0@2@01)
    (and (= (inv@18@01 n@17@01) n@17@01) (img@19@01 n@17@01)))
  :pattern ((Set_in n@17@01 g0@2@01))
  :pattern ((inv@18@01 n@17@01))
  :pattern ((img@19@01 n@17@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@19@01 r) (Set_in (inv@18@01 r) g0@2@01)) (= (inv@18@01 r) r))
  :pattern ((inv@18@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@18@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
  :pattern ((inv@18@01 r))
  :qid |quant-u-132|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@20@01 ((r $Ref) (e@16@01 Edge)) $Perm
  (ite
    (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r) (= r (inv@18@01 r)))
    ($Perm.min
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@21@01 ((r $Ref) (e@16@01 Edge)) $Perm
  (ite
    (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r) (= r (inv@18@01 r)))
    ($Perm.min
      (ite
        (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@20@01 r e@16@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      (pTaken@20@01 r e@16@01))
    $Perm.No)
  
  :qid |quant-u-134|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r) (= r (inv@18@01 r)))
    (= (- $Perm.Write (pTaken@20@01 r e@16@01)) $Perm.No))
  
  :qid |quant-u-135|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@22@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@22@01  $FVF<next>)))
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r)))
    (=>
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (Set_in r ($FVF.domain_next (as sm@22@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@22@01  $FVF<next>))))
  :qid |qp.fvfDomDef9|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@22@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@22@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@22@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@22@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@22@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef8|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((n@17@01 $Ref)) (!
  (=>
    (Set_in n@17@01 g0@2@01)
    (and (= (inv@18@01 n@17@01) n@17@01) (img@19@01 n@17@01)))
  :pattern ((Set_in n@17@01 g0@2@01))
  :pattern ((inv@18@01 n@17@01))
  :pattern ((img@19@01 n@17@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@19@01 r) (Set_in (inv@18@01 r) g0@2@01)) (= (inv@18@01 r) r))
  :pattern ((inv@18@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@22@01  $FVF<next>)))
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r)))
    (=>
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (Set_in r ($FVF.domain_next (as sm@22@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@22@01  $FVF<next>))))
  :qid |qp.fvfDomDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@22@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@22@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@22@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@22@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@22@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef8|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@18@01 r) g0@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
    :pattern ((inv@18@01 r))
    :qid |quant-u-132|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 4 | e@16@01 in $$(sm@22@01, g0@2@01) | live]
; [else-branch: 4 | !(e@16@01 in $$(sm@22@01, g0@2@01)) | live]
(push) ; 5
; [then-branch: 4 | e@16@01 in $$(sm@22@01, g0@2@01)]
(assert (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)))
; [eval] (e in ($$(g0) union $$(g1)))
; [eval] ($$(g0) union $$(g1))
; [eval] $$(g0)
(push) ; 6
(declare-const n@23@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@23@01 g0@2@01))
(pop) ; 7
(declare-fun inv@24@01 ($Ref) $Ref)
(declare-fun img@25@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@26@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@26@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@26@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@23@01 $Ref) (n2@23@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@23@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@26@01  $FVF<next>) n1@23@01) n1@23@01))
      (and
        (Set_in n2@23@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@26@01  $FVF<next>) n2@23@01) n2@23@01))
      (= n1@23@01 n2@23@01))
    (= n1@23@01 n2@23@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@23@01 $Ref)) (!
  (=>
    (Set_in n@23@01 g0@2@01)
    (and (= (inv@24@01 n@23@01) n@23@01) (img@25@01 n@23@01)))
  :pattern ((Set_in n@23@01 g0@2@01))
  :pattern ((inv@24@01 n@23@01))
  :pattern ((img@25@01 n@23@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@25@01 r) (Set_in (inv@24@01 r) g0@2@01)) (= (inv@24@01 r) r))
  :pattern ((inv@24@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@24@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@26@01  $FVF<next>) r) r))
  :pattern ((inv@24@01 r))
  :qid |quant-u-137|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@27@01 ((r $Ref) (e@16@01 Edge)) $Perm
  (ite
    (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r) (= r (inv@24@01 r)))
    ($Perm.min
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@28@01 ((r $Ref) (e@16@01 Edge)) $Perm
  (ite
    (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r) (= r (inv@24@01 r)))
    ($Perm.min
      (ite
        (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@27@01 r e@16@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      (pTaken@27@01 r e@16@01))
    $Perm.No)
  
  :qid |quant-u-139|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r) (= r (inv@24@01 r)))
    (= (- $Perm.Write (pTaken@27@01 r e@16@01)) $Perm.No))
  
  :qid |quant-u-140|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@29@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r)))
    (=>
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@26@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@26@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@23@01 $Ref)) (!
  (=>
    (Set_in n@23@01 g0@2@01)
    (and (= (inv@24@01 n@23@01) n@23@01) (img@25@01 n@23@01)))
  :pattern ((Set_in n@23@01 g0@2@01))
  :pattern ((inv@24@01 n@23@01))
  :pattern ((img@25@01 n@23@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@25@01 r) (Set_in (inv@24@01 r) g0@2@01)) (= (inv@24@01 r) r))
  :pattern ((inv@24@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r)))
    (=>
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@24@01 r) g0@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@26@01  $FVF<next>) r) r))
    :pattern ((inv@24@01 r))
    :qid |quant-u-137|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01)))
; [eval] $$(g1)
(set-option :timeout 0)
(push) ; 6
(declare-const n@30@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@30@01 g1@3@01))
(pop) ; 7
(declare-fun inv@31@01 ($Ref) $Ref)
(declare-fun img@32@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@33@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@30@01 $Ref) (n2@30@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@30@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@33@01  $FVF<next>) n1@30@01) n1@30@01))
      (and
        (Set_in n2@30@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@33@01  $FVF<next>) n2@30@01) n2@30@01))
      (= n1@30@01 n2@30@01))
    (= n1@30@01 n2@30@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@30@01 $Ref)) (!
  (=>
    (Set_in n@30@01 g1@3@01)
    (and (= (inv@31@01 n@30@01) n@30@01) (img@32@01 n@30@01)))
  :pattern ((Set_in n@30@01 g1@3@01))
  :pattern ((inv@31@01 n@30@01))
  :pattern ((img@32@01 n@30@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@32@01 r) (Set_in (inv@31@01 r) g1@3@01)) (= (inv@31@01 r) r))
  :pattern ((inv@31@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@31@01 r) g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@33@01  $FVF<next>) r) r))
  :pattern ((inv@31@01 r))
  :qid |quant-u-142|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@34@01 ((r $Ref) (e@16@01 Edge)) $Perm
  (ite
    (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r) (= r (inv@31@01 r)))
    ($Perm.min
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@35@01 ((r $Ref) (e@16@01 Edge)) $Perm
  (ite
    (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r) (= r (inv@31@01 r)))
    ($Perm.min
      (ite
        (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@34@01 r e@16@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      (pTaken@34@01 r e@16@01))
    $Perm.No)
  
  :qid |quant-u-144|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@34@01 r e@16@01) $Perm.No)
  
  :qid |quant-u-145|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r) (= r (inv@31@01 r)))
    (= (- $Perm.Write (pTaken@34@01 r e@16@01)) $Perm.No))
  
  :qid |quant-u-146|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
        $Perm.Write
        $Perm.No)
      (pTaken@35@01 r e@16@01))
    $Perm.No)
  
  :qid |quant-u-147|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@35@01 r e@16@01) $Perm.No)
  
  :qid |quant-u-148|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r) (= r (inv@31@01 r)))
    (=
      (- (- $Perm.Write (pTaken@34@01 r e@16@01)) (pTaken@35@01 r e@16@01))
      $Perm.No))
  
  :qid |quant-u-149|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@36@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>)))
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r)))
    (=>
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@36@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@36@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((n@30@01 $Ref)) (!
  (=>
    (Set_in n@30@01 g1@3@01)
    (and (= (inv@31@01 n@30@01) n@30@01) (img@32@01 n@30@01)))
  :pattern ((Set_in n@30@01 g1@3@01))
  :pattern ((inv@31@01 n@30@01))
  :pattern ((img@32@01 n@30@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@32@01 r) (Set_in (inv@31@01 r) g1@3@01)) (= (inv@31@01 r) r))
  :pattern ((inv@31@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>)))
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r)))
    (=>
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@36@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@36@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@31@01 r) g1@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@33@01  $FVF<next>) r) r))
    :pattern ((inv@31@01 r))
    :qid |quant-u-142|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 4 | !(e@16@01 in $$(sm@22@01, g0@2@01))]
(assert (not
  (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@26@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@26@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@23@01 $Ref)) (!
  (=>
    (Set_in n@23@01 g0@2@01)
    (and (= (inv@24@01 n@23@01) n@23@01) (img@25@01 n@23@01)))
  :pattern ((Set_in n@23@01 g0@2@01))
  :pattern ((inv@24@01 n@23@01))
  :pattern ((img@25@01 n@23@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@25@01 r) (Set_in (inv@24@01 r) g0@2@01)) (= (inv@24@01 r) r))
  :pattern ((inv@24@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r)))
    (=>
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((n@30@01 $Ref)) (!
  (=>
    (Set_in n@30@01 g1@3@01)
    (and (= (inv@31@01 n@30@01) n@30@01) (img@32@01 n@30@01)))
  :pattern ((Set_in n@30@01 g1@3@01))
  :pattern ((inv@31@01 n@30@01))
  :pattern ((img@32@01 n@30@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@32@01 r) (Set_in (inv@31@01 r) g1@3@01)) (= (inv@31@01 r) r))
  :pattern ((inv@31@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>)))
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r)))
    (=>
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@36@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@36@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))
  (and
    (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@24@01 r) g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@26@01  $FVF<next>) r) r))
      :pattern ((inv@24@01 r))
      :qid |quant-u-137|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@31@01 r) g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@33@01  $FVF<next>) r) r))
      :pattern ((inv@31@01 r))
      :qid |quant-u-142|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01))))
; Joined path conditions
(assert (or
  (not
    (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)))
  (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@17@01 $Ref)) (!
  (=>
    (Set_in n@17@01 g0@2@01)
    (and (= (inv@18@01 n@17@01) n@17@01) (img@19@01 n@17@01)))
  :pattern ((Set_in n@17@01 g0@2@01))
  :pattern ((inv@18@01 n@17@01))
  :pattern ((img@19@01 n@17@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@19@01 r) (Set_in (inv@18@01 r) g0@2@01)) (= (inv@18@01 r) r))
  :pattern ((inv@18@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@22@01  $FVF<next>)))
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r)))
    (=>
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (Set_in r ($FVF.domain_next (as sm@22@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@22@01  $FVF<next>))))
  :qid |qp.fvfDomDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@22@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@22@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@22@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@22@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@22@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@26@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@26@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@26@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@23@01 $Ref)) (!
  (=>
    (Set_in n@23@01 g0@2@01)
    (and (= (inv@24@01 n@23@01) n@23@01) (img@25@01 n@23@01)))
  :pattern ((Set_in n@23@01 g0@2@01))
  :pattern ((inv@24@01 n@23@01))
  :pattern ((img@25@01 n@23@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@25@01 r) (Set_in (inv@24@01 r) g0@2@01)) (= (inv@24@01 r) r))
  :pattern ((inv@24@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r)))
    (=>
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@29@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@24@01 r) g0@2@01) (img@25@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@33@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@33@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((n@30@01 $Ref)) (!
  (=>
    (Set_in n@30@01 g1@3@01)
    (and (= (inv@31@01 n@30@01) n@30@01) (img@32@01 n@30@01)))
  :pattern ((Set_in n@30@01 g1@3@01))
  :pattern ((inv@31@01 n@30@01))
  :pattern ((img@32@01 n@30@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@32@01 r) (Set_in (inv@31@01 r) g1@3@01)) (= (inv@31@01 r) r))
  :pattern ((inv@31@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>)))
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r)))
    (=>
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@36@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@36@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@31@01 r) g1@3@01) (img@32@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@36@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@36@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@18@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
  :pattern ((inv@18@01 r))
  :qid |quant-u-132|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((e@16@01 Edge)) (!
  (and
    (=>
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))
      (and
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@24@01 r) g0@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@26@01  $FVF<next>) r) r))
          :pattern ((inv@24@01 r))
          :qid |quant-u-137|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@31@01 r) g1@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@33@01  $FVF<next>) r) r))
          :pattern ((inv@31@01 r))
          :qid |quant-u-142|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01)))
    (or
      (not
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)))
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@358@12@358@71-aux|)))
(assert (forall ((e@16@01 Edge)) (!
  (and
    (=>
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))
      (and
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@24@01 r) g0@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@26@01  $FVF<next>) r) r))
          :pattern ((inv@24@01 r))
          :qid |quant-u-137|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@31@01 r) g1@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@33@01  $FVF<next>) r) r))
          :pattern ((inv@31@01 r))
          :qid |quant-u-142|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01)))
    (or
      (not
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)))
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01))))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@358@12@358@71-aux|)))
(assert (forall ((e@16@01 Edge)) (!
  (and
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)
    (=>
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01)
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01))))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@358@12@358@71_precondition|)))
(push) ; 3
(assert (not (forall ((e@16@01 Edge)) (!
  (=>
    (and
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)
        (=>
          (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))
          (and
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01)
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01))))
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)))
    (Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01))))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@358@12@358@71|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((e@16@01 Edge)) (!
  (=>
    (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01))
    (Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@22@01  $FVF<next>)) g0@2@01)))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@29@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@36@01  $FVF<next>)) g1@3@01))))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@358@12@358@71|)))
; [exec]
; assert ($$(g0) union $$(g1)) == $$((g0 union g1))
; [eval] ($$(g0) union $$(g1)) == $$((g0 union g1))
; [eval] ($$(g0) union $$(g1))
; [eval] $$(g0)
(push) ; 3
(declare-const n@37@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@37@01 g0@2@01))
(pop) ; 4
(declare-fun inv@38@01 ($Ref) $Ref)
(declare-fun img@39@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@40@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef26|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@37@01 $Ref) (n2@37@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@37@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@40@01  $FVF<next>) n1@37@01) n1@37@01))
      (and
        (Set_in n2@37@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@40@01  $FVF<next>) n2@37@01) n2@37@01))
      (= n1@37@01 n2@37@01))
    (= n1@37@01 n2@37@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@37@01 $Ref)) (!
  (=>
    (Set_in n@37@01 g0@2@01)
    (and (= (inv@38@01 n@37@01) n@37@01) (img@39@01 n@37@01)))
  :pattern ((Set_in n@37@01 g0@2@01))
  :pattern ((inv@38@01 n@37@01))
  :pattern ((img@39@01 n@37@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@39@01 r) (Set_in (inv@38@01 r) g0@2@01)) (= (inv@38@01 r) r))
  :pattern ((inv@38@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@38@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@40@01  $FVF<next>) r) r))
  :pattern ((inv@38@01 r))
  :qid |quant-u-151|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@41@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@38@01 r) g0@2@01) (img@39@01 r) (= r (inv@38@01 r)))
    ($Perm.min
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@42@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@38@01 r) g0@2@01) (img@39@01 r) (= r (inv@38@01 r)))
    ($Perm.min
      (ite
        (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@41@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      (pTaken@41@01 r))
    $Perm.No)
  
  :qid |quant-u-153|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@38@01 r) g0@2@01) (img@39@01 r) (= r (inv@38@01 r)))
    (= (- $Perm.Write (pTaken@41@01 r)) $Perm.No))
  
  :qid |quant-u-154|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@43@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@43@01  $FVF<next>)))
      (and (Set_in (inv@38@01 r) g0@2@01) (img@39@01 r)))
    (=>
      (and (Set_in (inv@38@01 r) g0@2@01) (img@39@01 r))
      (Set_in r ($FVF.domain_next (as sm@43@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@43@01  $FVF<next>))))
  :qid |qp.fvfDomDef30|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@38@01 r) g0@2@01) (img@39@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@43@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@43@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@38@01 r) g0@2@01) (img@39@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@43@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@43@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@43@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@43@01  $FVF<next>)) g0@2@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((n@37@01 $Ref)) (!
  (=>
    (Set_in n@37@01 g0@2@01)
    (and (= (inv@38@01 n@37@01) n@37@01) (img@39@01 n@37@01)))
  :pattern ((Set_in n@37@01 g0@2@01))
  :pattern ((inv@38@01 n@37@01))
  :pattern ((img@39@01 n@37@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@39@01 r) (Set_in (inv@38@01 r) g0@2@01)) (= (inv@38@01 r) r))
  :pattern ((inv@38@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@43@01  $FVF<next>)))
      (and (Set_in (inv@38@01 r) g0@2@01) (img@39@01 r)))
    (=>
      (and (Set_in (inv@38@01 r) g0@2@01) (img@39@01 r))
      (Set_in r ($FVF.domain_next (as sm@43@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@43@01  $FVF<next>))))
  :qid |qp.fvfDomDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@38@01 r) g0@2@01) (img@39@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@43@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@43@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@38@01 r) g0@2@01) (img@39@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@43@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@43@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@43@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@38@01 r) g0@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@40@01  $FVF<next>) r) r))
    :pattern ((inv@38@01 r))
    :qid |quant-u-151|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@43@01  $FVF<next>)) g0@2@01)))
; [eval] $$(g1)
(set-option :timeout 0)
(push) ; 3
(declare-const n@44@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@44@01 g1@3@01))
(pop) ; 4
(declare-fun inv@45@01 ($Ref) $Ref)
(declare-fun img@46@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@47@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef33|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@44@01 $Ref) (n2@44@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@44@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@47@01  $FVF<next>) n1@44@01) n1@44@01))
      (and
        (Set_in n2@44@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@47@01  $FVF<next>) n2@44@01) n2@44@01))
      (= n1@44@01 n2@44@01))
    (= n1@44@01 n2@44@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@44@01 $Ref)) (!
  (=>
    (Set_in n@44@01 g1@3@01)
    (and (= (inv@45@01 n@44@01) n@44@01) (img@46@01 n@44@01)))
  :pattern ((Set_in n@44@01 g1@3@01))
  :pattern ((inv@45@01 n@44@01))
  :pattern ((img@46@01 n@44@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@46@01 r) (Set_in (inv@45@01 r) g1@3@01)) (= (inv@45@01 r) r))
  :pattern ((inv@45@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@45@01 r) g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@47@01  $FVF<next>) r) r))
  :pattern ((inv@45@01 r))
  :qid |quant-u-156|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@48@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r) (= r (inv@45@01 r)))
    ($Perm.min
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@49@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r) (= r (inv@45@01 r)))
    ($Perm.min
      (ite
        (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@48@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      (pTaken@48@01 r))
    $Perm.No)
  
  :qid |quant-u-158|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@48@01 r) $Perm.No)
  
  :qid |quant-u-159|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r) (= r (inv@45@01 r)))
    (= (- $Perm.Write (pTaken@48@01 r)) $Perm.No))
  
  :qid |quant-u-160|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
        $Perm.Write
        $Perm.No)
      (pTaken@49@01 r))
    $Perm.No)
  
  :qid |quant-u-161|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@49@01 r) $Perm.No)
  
  :qid |quant-u-162|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r) (= r (inv@45@01 r)))
    (= (- (- $Perm.Write (pTaken@48@01 r)) (pTaken@49@01 r)) $Perm.No))
  
  :qid |quant-u-163|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@50@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@50@01  $FVF<next>)))
      (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r)))
    (=>
      (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r))
      (Set_in r ($FVF.domain_next (as sm@50@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@50@01  $FVF<next>))))
  :qid |qp.fvfDomDef37|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@50@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@50@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@50@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@50@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@50@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@50@01  $FVF<next>)) g1@3@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@47@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@47@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((n@44@01 $Ref)) (!
  (=>
    (Set_in n@44@01 g1@3@01)
    (and (= (inv@45@01 n@44@01) n@44@01) (img@46@01 n@44@01)))
  :pattern ((Set_in n@44@01 g1@3@01))
  :pattern ((inv@45@01 n@44@01))
  :pattern ((img@46@01 n@44@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@46@01 r) (Set_in (inv@45@01 r) g1@3@01)) (= (inv@45@01 r) r))
  :pattern ((inv@45@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@50@01  $FVF<next>)))
      (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r)))
    (=>
      (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r))
      (Set_in r ($FVF.domain_next (as sm@50@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@50@01  $FVF<next>))))
  :qid |qp.fvfDomDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@50@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@50@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@45@01 r) g1@3@01) (img@46@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@50@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@50@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@50@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@45@01 r) g1@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@47@01  $FVF<next>) r) r))
    :pattern ((inv@45@01 r))
    :qid |quant-u-156|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@50@01  $FVF<next>)) g1@3@01)))
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(set-option :timeout 0)
(push) ; 3
(declare-const n@51@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@51@01 (Set_union g0@2@01 g1@3@01)))
(pop) ; 4
(declare-fun inv@52@01 ($Ref) $Ref)
(declare-fun img@53@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@54@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef40|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@51@01 $Ref) (n2@51@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@51@01 (Set_union g0@2@01 g1@3@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@54@01  $FVF<next>) n1@51@01) n1@51@01))
      (and
        (Set_in n2@51@01 (Set_union g0@2@01 g1@3@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@54@01  $FVF<next>) n2@51@01) n2@51@01))
      (= n1@51@01 n2@51@01))
    (= n1@51@01 n2@51@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@51@01 $Ref)) (!
  (=>
    (Set_in n@51@01 (Set_union g0@2@01 g1@3@01))
    (and (= (inv@52@01 n@51@01) n@51@01) (img@53@01 n@51@01)))
  :pattern ((Set_in n@51@01 (Set_union g0@2@01 g1@3@01)))
  :pattern ((inv@52@01 n@51@01))
  :pattern ((img@53@01 n@51@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@53@01 r) (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01)))
    (= (inv@52@01 r) r))
  :pattern ((inv@52@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@54@01  $FVF<next>) r) r))
  :pattern ((inv@52@01 r))
  :qid |quant-u-165|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@55@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01))
      (img@53@01 r)
      (= r (inv@52@01 r)))
    ($Perm.min
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@56@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01))
      (img@53@01 r)
      (= r (inv@52@01 r)))
    ($Perm.min
      (ite
        (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@55@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) $Perm.Write $Perm.No)
      (pTaken@55@01 r))
    $Perm.No)
  
  :qid |quant-u-167|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01))
      (img@53@01 r)
      (= r (inv@52@01 r)))
    (= (- $Perm.Write (pTaken@55@01 r)) $Perm.No))
  
  :qid |quant-u-168|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
        $Perm.Write
        $Perm.No)
      (pTaken@56@01 r))
    $Perm.No)
  
  :qid |quant-u-169|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@56@01 r) $Perm.No)
  
  :qid |quant-u-170|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01))
      (img@53@01 r)
      (= r (inv@52@01 r)))
    (= (- (- $Perm.Write (pTaken@55@01 r)) (pTaken@56@01 r)) $Perm.No))
  
  :qid |quant-u-171|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@57@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@57@01  $FVF<next>)))
      (and (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01)) (img@53@01 r)))
    (=>
      (and (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01)) (img@53@01 r))
      (Set_in r ($FVF.domain_next (as sm@57@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@57@01  $FVF<next>))))
  :qid |qp.fvfDomDef44|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01)) (img@53@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@57@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@57@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01)) (img@53@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@57@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@57@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@57@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@57@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert (forall ((n@51@01 $Ref)) (!
  (=>
    (Set_in n@51@01 (Set_union g0@2@01 g1@3@01))
    (and (= (inv@52@01 n@51@01) n@51@01) (img@53@01 n@51@01)))
  :pattern ((Set_in n@51@01 (Set_union g0@2@01 g1@3@01)))
  :pattern ((inv@52@01 n@51@01))
  :pattern ((img@53@01 n@51@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@53@01 r) (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01)))
    (= (inv@52@01 r) r))
  :pattern ((inv@52@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@57@01  $FVF<next>)))
      (and (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01)) (img@53@01 r)))
    (=>
      (and (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01)) (img@53@01 r))
      (Set_in r ($FVF.domain_next (as sm@57@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@57@01  $FVF<next>))))
  :qid |qp.fvfDomDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01)) (img@53@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@57@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@57@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01)) (img@53@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@57@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@57@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@57@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@52@01 r) (Set_union g0@2@01 g1@3@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@54@01  $FVF<next>) r) r))
    :pattern ((inv@52@01 r))
    :qid |quant-u-165|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@57@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01))))
(set-option :timeout 0)
(push) ; 3
(assert (not (Set_equal (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@43@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@50@01  $FVF<next>)) g1@3@01)) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@57@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (Set_equal (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@43@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@50@01  $FVF<next>)) g1@3@01)) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@57@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01))))
(pop) ; 2
(pop) ; 1
; ---------- test_intersection ----------
(declare-const g0@58@01 Set<$Ref>)
(declare-const g1@59@01 Set<$Ref>)
(declare-const g0@60@01 Set<$Ref>)
(declare-const g1@61@01 Set<$Ref>)
(push) ; 1
(declare-const $t@62@01 $Snap)
(assert (= $t@62@01 ($Snap.combine ($Snap.first $t@62@01) ($Snap.second $t@62@01))))
(assert (= ($Snap.first $t@62@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@60@01)))
(assert (=
  ($Snap.second $t@62@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@62@01))
    ($Snap.second ($Snap.second $t@62@01)))))
(declare-const n@63@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@63@01 g0@60@01))
(declare-const sm@64@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@65@01 ($Ref) $Ref)
(declare-fun img@66@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@63@01 $Ref) (n2@63@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@63@01 g0@60@01)
      (Set_in n2@63@01 g0@60@01)
      (= n1@63@01 n2@63@01))
    (= n1@63@01 n2@63@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@63@01 $Ref)) (!
  (=>
    (Set_in n@63@01 g0@60@01)
    (and (= (inv@65@01 n@63@01) n@63@01) (img@66@01 n@63@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) n@63@01) n@63@01))
  :qid |quant-u-173|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01)) (= (inv@65@01 r) r))
  :pattern ((inv@65@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@63@01 $Ref)) (!
  (=> (Set_in n@63@01 g0@60@01) (not (= n@63@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) n@63@01) n@63@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@67@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
    (=
      ($FVF.lookup_next (as sm@67@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
  :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@65@01 r) g0@60@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@67@01  $FVF<next>) r) r))
  :pattern ((inv@65@01 r))
  :qid |quant-u-174|)))
(assert (=
  ($Snap.second ($Snap.second $t@62@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@62@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@62@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@68@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 5 | !(n$0@68@01 in g0@60@01) | live]
; [else-branch: 5 | n$0@68@01 in g0@60@01 | live]
(push) ; 4
; [then-branch: 5 | !(n$0@68@01 in g0@60@01)]
(assert (not (Set_in n$0@68@01 g0@60@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 5 | n$0@68@01 in g0@60@01]
(assert (Set_in n$0@68@01 g0@60@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
      (=
        ($FVF.lookup_next (as sm@67@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
    :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
    :qid |qp.fvfValDef46|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef47|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) n$0@68@01))
(push) ; 5
(assert (not (and (img@66@01 n$0@68@01) (Set_in (inv@65@01 n$0@68@01) g0@60@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
    (=
      ($FVF.lookup_next (as sm@67@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
  :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (=>
  (Set_in n$0@68@01 g0@60@01)
  (and
    (Set_in n$0@68@01 g0@60@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) n$0@68@01))))
(assert (or (Set_in n$0@68@01 g0@60@01) (not (Set_in n$0@68@01 g0@60@01))))
(push) ; 3
; [then-branch: 6 | n$0@68@01 in g0@60@01 && Lookup(next, sm@67@01, n$0@68@01) != Null | live]
; [else-branch: 6 | !(n$0@68@01 in g0@60@01 && Lookup(next, sm@67@01, n$0@68@01) != Null) | live]
(push) ; 4
; [then-branch: 6 | n$0@68@01 in g0@60@01 && Lookup(next, sm@67@01, n$0@68@01) != Null]
(assert (and
  (Set_in n$0@68@01 g0@60@01)
  (not (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
      (=
        ($FVF.lookup_next (as sm@67@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
    :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
    :qid |qp.fvfValDef46|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef47|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) n$0@68@01))
(push) ; 5
(assert (not (and (img@66@01 n$0@68@01) (Set_in (inv@65@01 n$0@68@01) g0@60@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 6 | !(n$0@68@01 in g0@60@01 && Lookup(next, sm@67@01, n$0@68@01) != Null)]
(assert (not
  (and
    (Set_in n$0@68@01 g0@60@01)
    (not (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
    (=
      ($FVF.lookup_next (as sm@67@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
  :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (=>
  (and
    (Set_in n$0@68@01 g0@60@01)
    (not (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null)))
  (and
    (Set_in n$0@68@01 g0@60@01)
    (not (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) n$0@68@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@68@01 g0@60@01)
      (not (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null))))
  (and
    (Set_in n$0@68@01 g0@60@01)
    (not (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
    (=
      ($FVF.lookup_next (as sm@67@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
  :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@67@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@68@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@68@01 g0@60@01)
      (and
        (Set_in n$0@68@01 g0@60@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) n$0@68@01)))
    (or (Set_in n$0@68@01 g0@60@01) (not (Set_in n$0@68@01 g0@60@01)))
    (=>
      (and
        (Set_in n$0@68@01 g0@60@01)
        (not
          (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null)))
      (and
        (Set_in n$0@68@01 g0@60@01)
        (not
          (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) n$0@68@01)))
    (or
      (not
        (and
          (Set_in n$0@68@01 g0@60@01)
          (not
            (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null))))
      (and
        (Set_in n$0@68@01 g0@60@01)
        (not
          (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) g0@60@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@14@363@23-aux|)))
(assert (forall ((n$0@68@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@68@01 g0@60@01)
      (and
        (Set_in n$0@68@01 g0@60@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) n$0@68@01)))
    (or (Set_in n$0@68@01 g0@60@01) (not (Set_in n$0@68@01 g0@60@01)))
    (=>
      (and
        (Set_in n$0@68@01 g0@60@01)
        (not
          (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null)))
      (and
        (Set_in n$0@68@01 g0@60@01)
        (not
          (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) n$0@68@01)))
    (or
      (not
        (and
          (Set_in n$0@68@01 g0@60@01)
          (not
            (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null))))
      (and
        (Set_in n$0@68@01 g0@60@01)
        (not
          (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null)))))
  :pattern ((Set_in n$0@68@01 g0@60@01) ($FVF.loc_next ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) n$0@68@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@14@363@23-aux|)))
(assert (forall ((n$0@68@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@68@01 g0@60@01)
      (not (= ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) g0@60@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) g0@60@01))
  :pattern ((Set_in n$0@68@01 g0@60@01) ($FVF.loc_next ($FVF.lookup_next (as sm@67@01  $FVF<next>) n$0@68@01) n$0@68@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@14@363@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@62@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@61@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))))
(declare-const n$1@69@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@69@01 g1@61@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@70@01 ($Ref) $Ref)
(declare-fun img@71@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@69@01 $Ref) (n$12@69@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@69@01 g1@61@01)
      (Set_in n$12@69@01 g1@61@01)
      (= n$11@69@01 n$12@69@01))
    (= n$11@69@01 n$12@69@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@69@01 $Ref)) (!
  (=>
    (Set_in n$1@69@01 g1@61@01)
    (and (= (inv@70@01 n$1@69@01) n$1@69@01) (img@71@01 n$1@69@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) n$1@69@01) n$1@69@01))
  :qid |quant-u-176|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@71@01 r) (Set_in (inv@70@01 r) g1@61@01)) (= (inv@70@01 r) r))
  :pattern ((inv@70@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@69@01 $Ref)) (!
  (=> (Set_in n$1@69@01 g1@61@01) (not (= n$1@69@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) n$1@69@01) n$1@69@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@69@01 n@63@01)
    (=
      (and (img@71@01 r) (Set_in (inv@70@01 r) g1@61@01))
      (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))))
  
  :qid |quant-u-177|))))
(check-sat)
; unknown
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(declare-const sm@72@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@71@01 r) (Set_in (inv@70@01 r) g1@61@01))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@70@01 r) g1@61@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r))
  :pattern ((inv@70@01 r))
  :qid |quant-u-178|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@73@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 7 | !(n$2@73@01 in g1@61@01) | live]
; [else-branch: 7 | n$2@73@01 in g1@61@01 | live]
(push) ; 4
; [then-branch: 7 | !(n$2@73@01 in g1@61@01)]
(assert (not (Set_in n$2@73@01 g1@61@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 7 | n$2@73@01 in g1@61@01]
(assert (Set_in n$2@73@01 g1@61@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
      (=
        ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
    :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
    :qid |qp.fvfValDef48|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@71@01 r) (Set_in (inv@70@01 r) g1@61@01))
      (=
        ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r))
    :qid |qp.fvfValDef49|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef50|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) n$2@73@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@66@01 n$2@73@01) (Set_in (inv@65@01 n$2@73@01) g0@60@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@71@01 n$2@73@01) (Set_in (inv@70@01 n$2@73@01) g1@61@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@71@01 r) (Set_in (inv@70@01 r) g1@61@01))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert (=>
  (Set_in n$2@73@01 g1@61@01)
  (and
    (Set_in n$2@73@01 g1@61@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) n$2@73@01))))
(assert (or (Set_in n$2@73@01 g1@61@01) (not (Set_in n$2@73@01 g1@61@01))))
(push) ; 3
; [then-branch: 8 | n$2@73@01 in g1@61@01 && Lookup(next, sm@72@01, n$2@73@01) != Null | live]
; [else-branch: 8 | !(n$2@73@01 in g1@61@01 && Lookup(next, sm@72@01, n$2@73@01) != Null) | live]
(push) ; 4
; [then-branch: 8 | n$2@73@01 in g1@61@01 && Lookup(next, sm@72@01, n$2@73@01) != Null]
(assert (and
  (Set_in n$2@73@01 g1@61@01)
  (not (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
      (=
        ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
    :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
    :qid |qp.fvfValDef48|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@71@01 r) (Set_in (inv@70@01 r) g1@61@01))
      (=
        ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r))
    :qid |qp.fvfValDef49|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef50|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) n$2@73@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@66@01 n$2@73@01) (Set_in (inv@65@01 n$2@73@01) g0@60@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@71@01 n$2@73@01) (Set_in (inv@70@01 n$2@73@01) g1@61@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(n$2@73@01 in g1@61@01 && Lookup(next, sm@72@01, n$2@73@01) != Null)]
(assert (not
  (and
    (Set_in n$2@73@01 g1@61@01)
    (not (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@71@01 r) (Set_in (inv@70@01 r) g1@61@01))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert (=>
  (and
    (Set_in n$2@73@01 g1@61@01)
    (not (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null)))
  (and
    (Set_in n$2@73@01 g1@61@01)
    (not (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) n$2@73@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@73@01 g1@61@01)
      (not (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null))))
  (and
    (Set_in n$2@73@01 g1@61@01)
    (not (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@66@01 r) (Set_in (inv@65@01 r) g0@60@01))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@71@01 r) (Set_in (inv@70@01 r) g1@61@01))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@62@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@73@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@73@01 g1@61@01)
      (and
        (Set_in n$2@73@01 g1@61@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) n$2@73@01)))
    (or (Set_in n$2@73@01 g1@61@01) (not (Set_in n$2@73@01 g1@61@01)))
    (=>
      (and
        (Set_in n$2@73@01 g1@61@01)
        (not
          (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null)))
      (and
        (Set_in n$2@73@01 g1@61@01)
        (not
          (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) n$2@73@01)))
    (or
      (not
        (and
          (Set_in n$2@73@01 g1@61@01)
          (not
            (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null))))
      (and
        (Set_in n$2@73@01 g1@61@01)
        (not
          (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) g1@61@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@27@363@36-aux|)))
(assert (forall ((n$2@73@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@73@01 g1@61@01)
      (and
        (Set_in n$2@73@01 g1@61@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) n$2@73@01)))
    (or (Set_in n$2@73@01 g1@61@01) (not (Set_in n$2@73@01 g1@61@01)))
    (=>
      (and
        (Set_in n$2@73@01 g1@61@01)
        (not
          (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null)))
      (and
        (Set_in n$2@73@01 g1@61@01)
        (not
          (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) n$2@73@01)))
    (or
      (not
        (and
          (Set_in n$2@73@01 g1@61@01)
          (not
            (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null))))
      (and
        (Set_in n$2@73@01 g1@61@01)
        (not
          (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null)))))
  :pattern ((Set_in n$2@73@01 g1@61@01) ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) n$2@73@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@27@363@36-aux|)))
(assert (forall ((n$2@73@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@73@01 g1@61@01)
      (not (= ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) g1@61@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) g1@61@01))
  :pattern ((Set_in n$2@73@01 g1@61@01) ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) n$2@73@01) n$2@73@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@363@27@363@36|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@01))))))
  $Snap.unit))
; [eval] (g0 intersection g1) == Set[Ref]()
; [eval] (g0 intersection g1)
; [eval] Set[Ref]()
(assert (Set_equal (Set_intersection g0@60@01 g1@61@01) (as Set_empty  Set<$Ref>)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; assert (forall r: Ref ::
;     { (r in g0), (r in g1) }
;     (r in g0) ==> !((r in g1))) &&
;   (forall r$0: Ref ::
;     { (r$0 in g0), (r$0 in g1) }
;     (r$0 in g1) ==> !((r$0 in g0)))
; [eval] (forall r: Ref :: { (r in g0), (r in g1) } (r in g0) ==> !((r in g1)))
(declare-const r@74@01 $Ref)
(push) ; 3
; [eval] (r in g0) ==> !((r in g1))
; [eval] (r in g0)
(push) ; 4
; [then-branch: 9 | r@74@01 in g0@60@01 | live]
; [else-branch: 9 | !(r@74@01 in g0@60@01) | live]
(push) ; 5
; [then-branch: 9 | r@74@01 in g0@60@01]
(assert (Set_in r@74@01 g0@60@01))
; [eval] !((r in g1))
; [eval] (r in g1)
(pop) ; 5
(push) ; 5
; [else-branch: 9 | !(r@74@01 in g0@60@01)]
(assert (not (Set_in r@74@01 g0@60@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r@74@01 g0@60@01)) (Set_in r@74@01 g0@60@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@74@01 $Ref)) (!
  (or (not (Set_in r@74@01 g0@60@01)) (Set_in r@74@01 g0@60@01))
  :pattern ((Set_in r@74@01 g0@60@01) (Set_in r@74@01 g1@61@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32-aux|)))
(push) ; 3
(assert (not (forall ((r@74@01 $Ref)) (!
  (=> (Set_in r@74@01 g0@60@01) (not (Set_in r@74@01 g1@61@01)))
  :pattern ((Set_in r@74@01 g0@60@01) (Set_in r@74@01 g1@61@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((r@74@01 $Ref)) (!
  (=> (Set_in r@74@01 g0@60@01) (not (Set_in r@74@01 g1@61@01)))
  :pattern ((Set_in r@74@01 g0@60@01) (Set_in r@74@01 g1@61@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32|)))
; [eval] (forall r$0: Ref :: { (r$0 in g0), (r$0 in g1) } (r$0 in g1) ==> !((r$0 in g0)))
(declare-const r$0@75@01 $Ref)
(push) ; 3
; [eval] (r$0 in g1) ==> !((r$0 in g0))
; [eval] (r$0 in g1)
(push) ; 4
; [then-branch: 10 | r$0@75@01 in g1@61@01 | live]
; [else-branch: 10 | !(r$0@75@01 in g1@61@01) | live]
(push) ; 5
; [then-branch: 10 | r$0@75@01 in g1@61@01]
(assert (Set_in r$0@75@01 g1@61@01))
; [eval] !((r$0 in g0))
; [eval] (r$0 in g0)
(pop) ; 5
(push) ; 5
; [else-branch: 10 | !(r$0@75@01 in g1@61@01)]
(assert (not (Set_in r$0@75@01 g1@61@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$0@75@01 g1@61@01)) (Set_in r$0@75@01 g1@61@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$0@75@01 $Ref)) (!
  (or (not (Set_in r$0@75@01 g1@61@01)) (Set_in r$0@75@01 g1@61@01))
  :pattern ((Set_in r$0@75@01 g0@60@01) (Set_in r$0@75@01 g1@61@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32-aux|)))
(push) ; 3
(assert (not (forall ((r$0@75@01 $Ref)) (!
  (=> (Set_in r$0@75@01 g1@61@01) (not (Set_in r$0@75@01 g0@60@01)))
  :pattern ((Set_in r$0@75@01 g0@60@01) (Set_in r$0@75@01 g1@61@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((r$0@75@01 $Ref)) (!
  (=> (Set_in r$0@75@01 g1@61@01) (not (Set_in r$0@75@01 g0@60@01)))
  :pattern ((Set_in r$0@75@01 g0@60@01) (Set_in r$0@75@01 g1@61@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@369@12@369@32|)))
(pop) ; 2
(pop) ; 1
; ---------- test_disjoint ----------
(declare-const g0@76@01 Set<$Ref>)
(declare-const g1@77@01 Set<$Ref>)
(declare-const g0@78@01 Set<$Ref>)
(declare-const g1@79@01 Set<$Ref>)
(push) ; 1
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 ($Snap.combine ($Snap.first $t@80@01) ($Snap.second $t@80@01))))
(assert (= ($Snap.first $t@80@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@78@01)))
(assert (=
  ($Snap.second $t@80@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@80@01))
    ($Snap.second ($Snap.second $t@80@01)))))
(declare-const n@81@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@81@01 g0@78@01))
(declare-const sm@82@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@83@01 ($Ref) $Ref)
(declare-fun img@84@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@81@01 $Ref) (n2@81@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@81@01 g0@78@01)
      (Set_in n2@81@01 g0@78@01)
      (= n1@81@01 n2@81@01))
    (= n1@81@01 n2@81@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@81@01 $Ref)) (!
  (=>
    (Set_in n@81@01 g0@78@01)
    (and (= (inv@83@01 n@81@01) n@81@01) (img@84@01 n@81@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) n@81@01) n@81@01))
  :qid |quant-u-180|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)) (= (inv@83@01 r) r))
  :pattern ((inv@83@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@81@01 $Ref)) (!
  (=> (Set_in n@81@01 g0@78@01) (not (= n@81@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) n@81@01) n@81@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@85@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@83@01 r) g0@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
  :pattern ((inv@83@01 r))
  :qid |quant-u-181|)))
(assert (=
  ($Snap.second ($Snap.second $t@80@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@80@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@80@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@86@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 11 | !(n$0@86@01 in g0@78@01) | live]
; [else-branch: 11 | n$0@86@01 in g0@78@01 | live]
(push) ; 4
; [then-branch: 11 | !(n$0@86@01 in g0@78@01)]
(assert (not (Set_in n$0@86@01 g0@78@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 11 | n$0@86@01 in g0@78@01]
(assert (Set_in n$0@86@01 g0@78@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
      (=
        ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
    :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
    :qid |qp.fvfValDef52|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef53|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) n$0@86@01))
(push) ; 5
(assert (not (and (img@84@01 n$0@86@01) (Set_in (inv@83@01 n$0@86@01) g0@78@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert (=>
  (Set_in n$0@86@01 g0@78@01)
  (and
    (Set_in n$0@86@01 g0@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) n$0@86@01))))
(assert (or (Set_in n$0@86@01 g0@78@01) (not (Set_in n$0@86@01 g0@78@01))))
(push) ; 3
; [then-branch: 12 | n$0@86@01 in g0@78@01 && Lookup(next, sm@85@01, n$0@86@01) != Null | live]
; [else-branch: 12 | !(n$0@86@01 in g0@78@01 && Lookup(next, sm@85@01, n$0@86@01) != Null) | live]
(push) ; 4
; [then-branch: 12 | n$0@86@01 in g0@78@01 && Lookup(next, sm@85@01, n$0@86@01) != Null]
(assert (and
  (Set_in n$0@86@01 g0@78@01)
  (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
      (=
        ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
    :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
    :qid |qp.fvfValDef52|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef53|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) n$0@86@01))
(push) ; 5
(assert (not (and (img@84@01 n$0@86@01) (Set_in (inv@83@01 n$0@86@01) g0@78@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 12 | !(n$0@86@01 in g0@78@01 && Lookup(next, sm@85@01, n$0@86@01) != Null)]
(assert (not
  (and
    (Set_in n$0@86@01 g0@78@01)
    (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert (=>
  (and
    (Set_in n$0@86@01 g0@78@01)
    (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null)))
  (and
    (Set_in n$0@86@01 g0@78@01)
    (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) n$0@86@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@86@01 g0@78@01)
      (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null))))
  (and
    (Set_in n$0@86@01 g0@78@01)
    (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@86@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@86@01 g0@78@01)
      (and
        (Set_in n$0@86@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) n$0@86@01)))
    (or (Set_in n$0@86@01 g0@78@01) (not (Set_in n$0@86@01 g0@78@01)))
    (=>
      (and
        (Set_in n$0@86@01 g0@78@01)
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null)))
      (and
        (Set_in n$0@86@01 g0@78@01)
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) n$0@86@01)))
    (or
      (not
        (and
          (Set_in n$0@86@01 g0@78@01)
          (not
            (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null))))
      (and
        (Set_in n$0@86@01 g0@78@01)
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) g0@78@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@14@375@23-aux|)))
(assert (forall ((n$0@86@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@86@01 g0@78@01)
      (and
        (Set_in n$0@86@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) n$0@86@01)))
    (or (Set_in n$0@86@01 g0@78@01) (not (Set_in n$0@86@01 g0@78@01)))
    (=>
      (and
        (Set_in n$0@86@01 g0@78@01)
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null)))
      (and
        (Set_in n$0@86@01 g0@78@01)
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) n$0@86@01)))
    (or
      (not
        (and
          (Set_in n$0@86@01 g0@78@01)
          (not
            (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null))))
      (and
        (Set_in n$0@86@01 g0@78@01)
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null)))))
  :pattern ((Set_in n$0@86@01 g0@78@01) ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) n$0@86@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@14@375@23-aux|)))
(assert (forall ((n$0@86@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@86@01 g0@78@01)
      (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) g0@78@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) g0@78@01))
  :pattern ((Set_in n$0@86@01 g0@78@01) ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$0@86@01) n$0@86@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@14@375@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@80@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@79@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))
(declare-const n$1@87@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@87@01 g1@79@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@88@01 ($Ref) $Ref)
(declare-fun img@89@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@87@01 $Ref) (n$12@87@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@87@01 g1@79@01)
      (Set_in n$12@87@01 g1@79@01)
      (= n$11@87@01 n$12@87@01))
    (= n$11@87@01 n$12@87@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@87@01 $Ref)) (!
  (=>
    (Set_in n$1@87@01 g1@79@01)
    (and (= (inv@88@01 n$1@87@01) n$1@87@01) (img@89@01 n$1@87@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) n$1@87@01) n$1@87@01))
  :qid |quant-u-183|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)) (= (inv@88@01 r) r))
  :pattern ((inv@88@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@87@01 $Ref)) (!
  (=> (Set_in n$1@87@01 g1@79@01) (not (= n$1@87@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) n$1@87@01) n$1@87@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@87@01 n@81@01)
    (=
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))))
  
  :qid |quant-u-184|))))
(check-sat)
; unknown
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(declare-const sm@90@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@88@01 r) g1@79@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) r) r))
  :pattern ((inv@88@01 r))
  :qid |quant-u-185|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@91@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 13 | !(n$2@91@01 in g1@79@01) | live]
; [else-branch: 13 | n$2@91@01 in g1@79@01 | live]
(push) ; 4
; [then-branch: 13 | !(n$2@91@01 in g1@79@01)]
(assert (not (Set_in n$2@91@01 g1@79@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 13 | n$2@91@01 in g1@79@01]
(assert (Set_in n$2@91@01 g1@79@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
      (=
        ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
    :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
    :qid |qp.fvfValDef54|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
      (=
        ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef56|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) n$2@91@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@84@01 n$2@91@01) (Set_in (inv@83@01 n$2@91@01) g0@78@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@89@01 n$2@91@01) (Set_in (inv@88@01 n$2@91@01) g1@79@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (=>
  (Set_in n$2@91@01 g1@79@01)
  (and
    (Set_in n$2@91@01 g1@79@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) n$2@91@01))))
(assert (or (Set_in n$2@91@01 g1@79@01) (not (Set_in n$2@91@01 g1@79@01))))
(push) ; 3
; [then-branch: 14 | n$2@91@01 in g1@79@01 && Lookup(next, sm@90@01, n$2@91@01) != Null | live]
; [else-branch: 14 | !(n$2@91@01 in g1@79@01 && Lookup(next, sm@90@01, n$2@91@01) != Null) | live]
(push) ; 4
; [then-branch: 14 | n$2@91@01 in g1@79@01 && Lookup(next, sm@90@01, n$2@91@01) != Null]
(assert (and
  (Set_in n$2@91@01 g1@79@01)
  (not (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
      (=
        ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
    :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
    :qid |qp.fvfValDef54|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
      (=
        ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef56|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) n$2@91@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@84@01 n$2@91@01) (Set_in (inv@83@01 n$2@91@01) g0@78@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@89@01 n$2@91@01) (Set_in (inv@88@01 n$2@91@01) g1@79@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !(n$2@91@01 in g1@79@01 && Lookup(next, sm@90@01, n$2@91@01) != Null)]
(assert (not
  (and
    (Set_in n$2@91@01 g1@79@01)
    (not (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (=>
  (and
    (Set_in n$2@91@01 g1@79@01)
    (not (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null)))
  (and
    (Set_in n$2@91@01 g1@79@01)
    (not (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) n$2@91@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@91@01 g1@79@01)
      (not (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null))))
  (and
    (Set_in n$2@91@01 g1@79@01)
    (not (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@90@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@90@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@91@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@91@01 g1@79@01)
      (and
        (Set_in n$2@91@01 g1@79@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) n$2@91@01)))
    (or (Set_in n$2@91@01 g1@79@01) (not (Set_in n$2@91@01 g1@79@01)))
    (=>
      (and
        (Set_in n$2@91@01 g1@79@01)
        (not
          (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null)))
      (and
        (Set_in n$2@91@01 g1@79@01)
        (not
          (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) n$2@91@01)))
    (or
      (not
        (and
          (Set_in n$2@91@01 g1@79@01)
          (not
            (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null))))
      (and
        (Set_in n$2@91@01 g1@79@01)
        (not
          (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) g1@79@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@27@375@36-aux|)))
(assert (forall ((n$2@91@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@91@01 g1@79@01)
      (and
        (Set_in n$2@91@01 g1@79@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) n$2@91@01)))
    (or (Set_in n$2@91@01 g1@79@01) (not (Set_in n$2@91@01 g1@79@01)))
    (=>
      (and
        (Set_in n$2@91@01 g1@79@01)
        (not
          (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null)))
      (and
        (Set_in n$2@91@01 g1@79@01)
        (not
          (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) n$2@91@01)))
    (or
      (not
        (and
          (Set_in n$2@91@01 g1@79@01)
          (not
            (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null))))
      (and
        (Set_in n$2@91@01 g1@79@01)
        (not
          (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null)))))
  :pattern ((Set_in n$2@91@01 g1@79@01) ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) n$2@91@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@27@375@36-aux|)))
(assert (forall ((n$2@91@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@91@01 g1@79@01)
      (not (= ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) g1@79@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) g1@79@01))
  :pattern ((Set_in n$2@91@01 g1@79@01) ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n$2@91@01) n$2@91@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@375@27@375@36|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in g0), (r in g1) } (r in g0) ==> !((r in g1)))
(declare-const r@92@01 $Ref)
(push) ; 2
; [eval] (r in g0) ==> !((r in g1))
; [eval] (r in g0)
(push) ; 3
; [then-branch: 15 | r@92@01 in g0@78@01 | live]
; [else-branch: 15 | !(r@92@01 in g0@78@01) | live]
(push) ; 4
; [then-branch: 15 | r@92@01 in g0@78@01]
(assert (Set_in r@92@01 g0@78@01))
; [eval] !((r in g1))
; [eval] (r in g1)
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !(r@92@01 in g0@78@01)]
(assert (not (Set_in r@92@01 g0@78@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r@92@01 g0@78@01)) (Set_in r@92@01 g0@78@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@92@01 $Ref)) (!
  (or (not (Set_in r@92@01 g0@78@01)) (Set_in r@92@01 g0@78@01))
  :pattern ((Set_in r@92@01 g0@78@01) (Set_in r@92@01 g1@79@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@376@14@376@34-aux|)))
(assert (forall ((r@92@01 $Ref)) (!
  (=> (Set_in r@92@01 g0@78@01) (not (Set_in r@92@01 g1@79@01)))
  :pattern ((Set_in r@92@01 g0@78@01) (Set_in r@92@01 g1@79@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@376@14@376@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  $Snap.unit))
; [eval] (forall r$0: Ref :: { (r$0 in g0), (r$0 in g1) } (r$0 in g1) ==> !((r$0 in g0)))
(declare-const r$0@93@01 $Ref)
(push) ; 2
; [eval] (r$0 in g1) ==> !((r$0 in g0))
; [eval] (r$0 in g1)
(push) ; 3
; [then-branch: 16 | r$0@93@01 in g1@79@01 | live]
; [else-branch: 16 | !(r$0@93@01 in g1@79@01) | live]
(push) ; 4
; [then-branch: 16 | r$0@93@01 in g1@79@01]
(assert (Set_in r$0@93@01 g1@79@01))
; [eval] !((r$0 in g0))
; [eval] (r$0 in g0)
(pop) ; 4
(push) ; 4
; [else-branch: 16 | !(r$0@93@01 in g1@79@01)]
(assert (not (Set_in r$0@93@01 g1@79@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$0@93@01 g1@79@01)) (Set_in r$0@93@01 g1@79@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$0@93@01 $Ref)) (!
  (or (not (Set_in r$0@93@01 g1@79@01)) (Set_in r$0@93@01 g1@79@01))
  :pattern ((Set_in r$0@93@01 g0@78@01) (Set_in r$0@93@01 g1@79@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@376@14@376@34-aux|)))
(assert (forall ((r$0@93@01 $Ref)) (!
  (=> (Set_in r$0@93@01 g1@79@01) (not (Set_in r$0@93@01 g0@78@01)))
  :pattern ((Set_in r$0@93@01 g0@78@01) (Set_in r$0@93@01 g1@79@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@376@14@376@34|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@94@01 $Snap)
(assert (= $t@94@01 ($Snap.combine ($Snap.first $t@94@01) ($Snap.second $t@94@01))))
(assert (= ($Snap.first $t@94@01) $Snap.unit))
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(assert (not (Set_in $Ref.null (Set_union g0@78@01 g1@79@01))))
(assert (=
  ($Snap.second $t@94@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@94@01))
    ($Snap.second ($Snap.second $t@94@01)))))
(declare-const n$3@95@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$3@95@01 (Set_union g0@78@01 g1@79@01)))
(declare-const sm@96@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@97@01 ($Ref) $Ref)
(declare-fun img@98@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@95@01 $Ref) (n$32@95@01 $Ref)) (!
  (=>
    (and
      (Set_in n$31@95@01 (Set_union g0@78@01 g1@79@01))
      (Set_in n$32@95@01 (Set_union g0@78@01 g1@79@01))
      (= n$31@95@01 n$32@95@01))
    (= n$31@95@01 n$32@95@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@95@01 $Ref)) (!
  (=>
    (Set_in n$3@95@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@97@01 n$3@95@01) n$3@95@01) (img@98@01 n$3@95@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) n$3@95@01) n$3@95@01))
  :qid |quant-u-187|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@97@01 r) r))
  :pattern ((inv@97@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@95@01 $Ref)) (!
  (=>
    (Set_in n$3@95@01 (Set_union g0@78@01 g1@79@01))
    (not (= n$3@95@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) n$3@95@01) n$3@95@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@99@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@99@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
  :pattern ((inv@97@01 r))
  :qid |quant-u-188|)))
(assert (=
  ($Snap.second ($Snap.second $t@94@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@94@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@94@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@94@01))) $Snap.unit))
; [eval] (forall n$4: Ref :: { (n$4.next in (g0 union g1)) } { (n$4 in (g0 union g1)), n$4.next } (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1)))
(declare-const n$4@100@01 $Ref)
(push) ; 3
; [eval] (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1))
; [eval] (n$4 in (g0 union g1)) && n$4.next != null
; [eval] (n$4 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 17 | !(n$4@100@01 in g0@78@01 ∪ g1@79@01) | live]
; [else-branch: 17 | n$4@100@01 in g0@78@01 ∪ g1@79@01 | live]
(push) ; 5
; [then-branch: 17 | !(n$4@100@01 in g0@78@01 ∪ g1@79@01)]
(assert (not (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 17 | n$4@100@01 in g0@78@01 ∪ g1@79@01]
(assert (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
      (=
        ($FVF.lookup_next (as sm@99@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
    :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) n$4@100@01))
(push) ; 6
(assert (not (and
  (img@98@01 n$4@100@01)
  (Set_in (inv@97@01 n$4@100@01) (Set_union g0@78@01 g1@79@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@99@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (=>
  (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
  (and
    (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) n$4@100@01))))
(assert (or
  (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
  (not (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01)))))
(push) ; 4
; [then-branch: 18 | n$4@100@01 in g0@78@01 ∪ g1@79@01 && Lookup(next, sm@99@01, n$4@100@01) != Null | live]
; [else-branch: 18 | !(n$4@100@01 in g0@78@01 ∪ g1@79@01 && Lookup(next, sm@99@01, n$4@100@01) != Null) | live]
(push) ; 5
; [then-branch: 18 | n$4@100@01 in g0@78@01 ∪ g1@79@01 && Lookup(next, sm@99@01, n$4@100@01) != Null]
(assert (and
  (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
  (not (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null))))
; [eval] (n$4.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
      (=
        ($FVF.lookup_next (as sm@99@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
    :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) n$4@100@01))
(push) ; 6
(assert (not (and
  (img@98@01 n$4@100@01)
  (Set_in (inv@97@01 n$4@100@01) (Set_union g0@78@01 g1@79@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 18 | !(n$4@100@01 in g0@78@01 ∪ g1@79@01 && Lookup(next, sm@99@01, n$4@100@01) != Null)]
(assert (not
  (and
    (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
    (not (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@99@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (=>
  (and
    (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
    (not (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null)))
  (and
    (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
    (not (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) n$4@100@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
      (not (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null))))
  (and
    (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
    (not (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@99@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@100@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
      (and
        (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) n$4@100@01)))
    (or
      (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
      (not (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))))
    (=>
      (and
        (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null)))
      (and
        (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) n$4@100@01)))
    (or
      (not
        (and
          (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
          (not
            (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null))))
      (and
        (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) (Set_union g0@78@01 g1@79@01)))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31-aux|)))
(assert (forall ((n$4@100@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
      (and
        (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) n$4@100@01)))
    (or
      (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
      (not (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))))
    (=>
      (and
        (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null)))
      (and
        (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) n$4@100@01)))
    (or
      (not
        (and
          (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
          (not
            (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null))))
      (and
        (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null)))))
  :pattern ((Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) n$4@100@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31-aux|)))
(assert (forall ((n$4@100@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01))
      (not (= ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) (Set_union g0@78@01 g1@79@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) (Set_union g0@78@01 g1@79@01)))
  :pattern ((Set_in n$4@100@01 (Set_union g0@78@01 g1@79@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n$4@100@01) n$4@100@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@94@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@01))))
  $Snap.unit))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g1) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v))
(declare-const u@101@01 $Ref)
(declare-const v@102@01 $Ref)
(push) ; 3
; [eval] (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && (v in g1)
; [eval] (u in g0)
(push) ; 4
; [then-branch: 19 | !(u@101@01 in g0@78@01) | live]
; [else-branch: 19 | u@101@01 in g0@78@01 | live]
(push) ; 5
; [then-branch: 19 | !(u@101@01 in g0@78@01)]
(assert (not (Set_in u@101@01 g0@78@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 19 | u@101@01 in g0@78@01]
(assert (Set_in u@101@01 g0@78@01))
; [eval] (v in g1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in u@101@01 g0@78@01) (not (Set_in u@101@01 g0@78@01))))
(push) ; 4
; [then-branch: 20 | u@101@01 in g0@78@01 && v@102@01 in g1@79@01 | live]
; [else-branch: 20 | !(u@101@01 in g0@78@01 && v@102@01 in g1@79@01) | live]
(push) ; 5
; [then-branch: 20 | u@101@01 in g0@78@01 && v@102@01 in g1@79@01]
(assert (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01)))
; [eval] !exists_path($$((g0 union g1)), u, v)
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@103@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@103@01 (Set_union g0@78@01 g1@79@01)))
(pop) ; 7
(declare-fun inv@104@01 ($Ref) $Ref)
(declare-fun img@105@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@103@01 $Ref) (n2@103@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@103@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n1@103@01) n1@103@01))
      (and
        (Set_in n2@103@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n2@103@01) n2@103@01))
      (= n1@103@01 n2@103@01))
    (= n1@103@01 n2@103@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@103@01 $Ref)) (!
  (=>
    (Set_in n@103@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@104@01 n@103@01) n@103@01) (img@105@01 n@103@01)))
  :pattern ((Set_in n@103@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@104@01 n@103@01))
  :pattern ((img@105@01 n@103@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@105@01 r) (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@104@01 r) r))
  :pattern ((inv@104@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
  :pattern ((inv@104@01 r))
  :qid |quant-u-190|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@106@01 ((r $Ref) (u@101@01 $Ref) (v@102@01 $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01))
      (img@105@01 r)
      (= r (inv@104@01 r)))
    ($Perm.min
      (ite
        (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@106@01 r u@101@01 v@102@01))
    $Perm.No)
  
  :qid |quant-u-192|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01))
      (img@105@01 r)
      (= r (inv@104@01 r)))
    (= (- $Perm.Write (pTaken@106@01 r u@101@01 v@102@01)) $Perm.No))
  
  :qid |quant-u-193|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@107@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r)))
    (=>
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r))
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@107@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@103@01 $Ref)) (!
  (=>
    (Set_in n@103@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@104@01 n@103@01) n@103@01) (img@105@01 n@103@01)))
  :pattern ((Set_in n@103@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@104@01 n@103@01))
  :pattern ((img@105@01 n@103@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@105@01 r) (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@104@01 r) r))
  :pattern ((inv@104@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r)))
    (=>
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r))
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@107@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
    :pattern ((inv@104@01 r))
    :qid |quant-u-190|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 20 | !(u@101@01 in g0@78@01 && v@102@01 in g1@79@01)]
(assert (not (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((n@103@01 $Ref)) (!
  (=>
    (Set_in n@103@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@104@01 n@103@01) n@103@01) (img@105@01 n@103@01)))
  :pattern ((Set_in n@103@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@104@01 n@103@01))
  :pattern ((img@105@01 n@103@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@105@01 r) (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@104@01 r) r))
  :pattern ((inv@104@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r)))
    (=>
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r))
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@107@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
(assert (=>
  (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))
  (and
    (Set_in u@101@01 g0@78@01)
    (Set_in v@102@01 g1@79@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
      :pattern ((inv@104@01 r))
      :qid |quant-u-190|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))))
; Joined path conditions
(assert (or
  (not (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01)))
  (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@103@01 $Ref)) (!
  (=>
    (Set_in n@103@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@104@01 n@103@01) n@103@01) (img@105@01 n@103@01)))
  :pattern ((Set_in n@103@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@104@01 n@103@01))
  :pattern ((img@105@01 n@103@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@105@01 r) (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@104@01 r) r))
  :pattern ((inv@104@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r)))
    (=>
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r))
      (Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@107@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01)) (img@105@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@107@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@107@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@101@01 $Ref) (v@102@01 $Ref)) (!
  (and
    (or (Set_in u@101@01 g0@78@01) (not (Set_in u@101@01 g0@78@01)))
    (=>
      (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))
      (and
        (Set_in u@101@01 g0@78@01)
        (Set_in v@102@01 g1@79@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
          :pattern ((inv@104@01 r))
          :qid |quant-u-190|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01)))
      (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))))
  :pattern ((Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@101@01 $Ref) (v@102@01 $Ref)) (!
  (and
    (or (Set_in u@101@01 g0@78@01) (not (Set_in u@101@01 g0@78@01)))
    (=>
      (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))
      (and
        (Set_in u@101@01 g0@78@01)
        (Set_in v@102@01 g1@79@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
          :pattern ((inv@104@01 r))
          :qid |quant-u-190|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01)))
      (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))))
  :pattern ((Set_in u@101@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@101@01 v@102@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@101@01 $Ref) (v@102@01 $Ref)) (!
  (and
    (or (Set_in u@101@01 g0@78@01) (not (Set_in u@101@01 g0@78@01)))
    (=>
      (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))
      (and
        (Set_in u@101@01 g0@78@01)
        (Set_in v@102@01 g1@79@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
          :pattern ((inv@104@01 r))
          :qid |quant-u-190|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01)))
      (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))))
  :pattern ((Set_in v@102@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@101@01 v@102@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@101@01 $Ref) (v@102@01 $Ref)) (!
  (and
    (or (Set_in u@101@01 g0@78@01) (not (Set_in u@101@01 g0@78@01)))
    (=>
      (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))
      (and
        (Set_in u@101@01 g0@78@01)
        (Set_in v@102@01 g1@79@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@104@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
          :pattern ((inv@104@01 r))
          :qid |quant-u-190|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01)))
      (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@101@01 v@102@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@101@01 $Ref) (v@102@01 $Ref)) (!
  (=>
    (and (Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@101@01 v@102@01)))
  :pattern ((Set_in u@101@01 g0@78@01) (Set_in v@102@01 g1@79@01))
  :pattern ((Set_in u@101@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@101@01 v@102@01))
  :pattern ((Set_in v@102@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@101@01 v@102@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@107@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@101@01 v@102@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@01)))))
  $Snap.unit))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g0) } { (u in g0), exists_path($$(g0), u, v) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g0), exists_path($$(g0), u, v) } { (v in g0), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@108@01 $Ref)
(declare-const v@109@01 $Ref)
(push) ; 3
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v))
; [eval] (u in g0)
(push) ; 4
; [then-branch: 21 | !(u@108@01 in g0@78@01) | live]
; [else-branch: 21 | u@108@01 in g0@78@01 | live]
(push) ; 5
; [then-branch: 21 | !(u@108@01 in g0@78@01)]
(assert (not (Set_in u@108@01 g0@78@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 21 | u@108@01 in g0@78@01]
(assert (Set_in u@108@01 g0@78@01))
; [eval] (v in g0)
(push) ; 6
; [then-branch: 22 | !(v@109@01 in g0@78@01) | live]
; [else-branch: 22 | v@109@01 in g0@78@01 | live]
(push) ; 7
; [then-branch: 22 | !(v@109@01 in g0@78@01)]
(assert (not (Set_in v@109@01 g0@78@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 22 | v@109@01 in g0@78@01]
(assert (Set_in v@109@01 g0@78@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@110@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@110@01 g0@78@01))
(pop) ; 9
(declare-fun inv@111@01 ($Ref) $Ref)
(declare-fun img@112@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@110@01 $Ref) (n2@110@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@110@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n1@110@01) n1@110@01))
      (and
        (Set_in n2@110@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) n2@110@01) n2@110@01))
      (= n1@110@01 n2@110@01))
    (= n1@110@01 n2@110@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g0@78@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g0@78@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g0@78@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@111@01 r) g0@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
  :pattern ((inv@111@01 r))
  :qid |quant-u-195|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@113@01 ((r $Ref) (u@108@01 $Ref) (v@109@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r) (= r (inv@111@01 r)))
    ($Perm.min
      (ite
        (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@113@01 r u@108@01 v@109@01))
    $Perm.No)
  
  :qid |quant-u-197|))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@113@01 r u@108@01 v@109@01) $Perm.No)
  
  :qid |quant-u-198|))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r) (= r (inv@111@01 r)))
    (= (- $Perm.Write (pTaken@113@01 r u@108@01 v@109@01)) $Perm.No))
  
  :qid |quant-u-199|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@114@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g0@78@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g0@78@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g0@78@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@111@01 r) g0@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
    :pattern ((inv@111@01 r))
    :qid |quant-u-195|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g0@78@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g0@78@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g0@78@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (=>
  (Set_in v@109@01 g0@78@01)
  (and
    (Set_in v@109@01 g0@78@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@111@01 r) g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
      :pattern ((inv@111@01 r))
      :qid |quant-u-195|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01))))
(assert (or (Set_in v@109@01 g0@78@01) (not (Set_in v@109@01 g0@78@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g0@78@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g0@78@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g0@78@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (=>
  (Set_in u@108@01 g0@78@01)
  (and
    (Set_in u@108@01 g0@78@01)
    (=>
      (Set_in v@109@01 g0@78@01)
      (and
        (Set_in v@109@01 g0@78@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@111@01 r) g0@78@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
          :pattern ((inv@111@01 r))
          :qid |quant-u-195|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01)))
    (or (Set_in v@109@01 g0@78@01) (not (Set_in v@109@01 g0@78@01))))))
(assert (or (Set_in u@108@01 g0@78@01) (not (Set_in u@108@01 g0@78@01))))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 23 | u@108@01 in g0@78@01 && v@109@01 in g0@78@01 && exists_path[Bool]($$(sm@114@01, g0@78@01), u@108@01, v@109@01) | live]
; [else-branch: 23 | !(u@108@01 in g0@78@01 && v@109@01 in g0@78@01 && exists_path[Bool]($$(sm@114@01, g0@78@01), u@108@01, v@109@01)) | live]
(push) ; 5
; [then-branch: 23 | u@108@01 in g0@78@01 && v@109@01 in g0@78@01 && exists_path[Bool]($$(sm@114@01, g0@78@01), u@108@01, v@109@01)]
(assert (and
  (Set_in u@108@01 g0@78@01)
  (and
    (Set_in v@109@01 g0@78@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@115@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@115@01 (Set_union g0@78@01 g1@79@01)))
(pop) ; 7
(declare-fun inv@116@01 ($Ref) $Ref)
(declare-fun img@117@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@118@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@115@01 $Ref) (n2@115@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@115@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) n1@115@01) n1@115@01))
      (and
        (Set_in n2@115@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) n2@115@01) n2@115@01))
      (= n1@115@01 n2@115@01))
    (= n1@115@01 n2@115@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@115@01 $Ref)) (!
  (=>
    (Set_in n@115@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@116@01 n@115@01) n@115@01) (img@117@01 n@115@01)))
  :pattern ((Set_in n@115@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@116@01 n@115@01))
  :pattern ((img@117@01 n@115@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@117@01 r) (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@116@01 r) r))
  :pattern ((inv@116@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
  :pattern ((inv@116@01 r))
  :qid |quant-u-201|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@119@01 ((r $Ref) (u@108@01 $Ref) (v@109@01 $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
      (img@117@01 r)
      (= r (inv@116@01 r)))
    ($Perm.min
      (ite
        (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@119@01 r u@108@01 v@109@01))
    $Perm.No)
  
  :qid |quant-u-203|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
      (img@117@01 r)
      (= r (inv@116@01 r)))
    (= (- $Perm.Write (pTaken@119@01 r u@108@01 v@109@01)) $Perm.No))
  
  :qid |quant-u-204|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@120@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r)))
    (=>
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r))
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
(assert (forall ((n@115@01 $Ref)) (!
  (=>
    (Set_in n@115@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@116@01 n@115@01) n@115@01) (img@117@01 n@115@01)))
  :pattern ((Set_in n@115@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@116@01 n@115@01))
  :pattern ((img@117@01 n@115@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@117@01 r) (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@116@01 r) r))
  :pattern ((inv@116@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r)))
    (=>
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r))
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
    :pattern ((inv@116@01 r))
    :qid |quant-u-201|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 23 | !(u@108@01 in g0@78@01 && v@109@01 in g0@78@01 && exists_path[Bool]($$(sm@114@01, g0@78@01), u@108@01, v@109@01))]
(assert (not
  (and
    (Set_in u@108@01 g0@78@01)
    (and
      (Set_in v@109@01 g0@78@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
(assert (forall ((n@115@01 $Ref)) (!
  (=>
    (Set_in n@115@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@116@01 n@115@01) n@115@01) (img@117@01 n@115@01)))
  :pattern ((Set_in n@115@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@116@01 n@115@01))
  :pattern ((img@117@01 n@115@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@117@01 r) (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@116@01 r) r))
  :pattern ((inv@116@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r)))
    (=>
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r))
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
(assert (=>
  (and
    (Set_in u@108@01 g0@78@01)
    (and
      (Set_in v@109@01 g0@78@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))
  (and
    (Set_in u@108@01 g0@78@01)
    (Set_in v@109@01 g0@78@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
      :pattern ((inv@116@01 r))
      :qid |quant-u-201|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@108@01 g0@78@01)
      (and
        (Set_in v@109@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))))
  (and
    (Set_in u@108@01 g0@78@01)
    (and
      (Set_in v@109@01 g0@78@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g0@78@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g0@78@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g0@78@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@114@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g0@78@01) (img@112@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@118@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@118@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
(assert (forall ((n@115@01 $Ref)) (!
  (=>
    (Set_in n@115@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@116@01 n@115@01) n@115@01) (img@117@01 n@115@01)))
  :pattern ((Set_in n@115@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@116@01 n@115@01))
  :pattern ((img@117@01 n@115@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@117@01 r) (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@116@01 r) r))
  :pattern ((inv@116@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r)))
    (=>
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r))
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01)) (img@117@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@108@01 $Ref) (v@109@01 $Ref)) (!
  (and
    (=>
      (Set_in u@108@01 g0@78@01)
      (and
        (Set_in u@108@01 g0@78@01)
        (=>
          (Set_in v@109@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@111@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
              :pattern ((inv@111@01 r))
              :qid |quant-u-195|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@109@01 g0@78@01) (not (Set_in v@109@01 g0@78@01)))))
    (or (Set_in u@108@01 g0@78@01) (not (Set_in u@108@01 g0@78@01)))
    (=>
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))
      (and
        (Set_in u@108@01 g0@78@01)
        (Set_in v@109@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
          :pattern ((inv@116@01 r))
          :qid |quant-u-201|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@108@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))))
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))))
  :pattern ((Set_in u@108@01 g0@78@01) (Set_in v@109@01 g0@78@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@108@01 $Ref) (v@109@01 $Ref)) (!
  (and
    (=>
      (Set_in u@108@01 g0@78@01)
      (and
        (Set_in u@108@01 g0@78@01)
        (=>
          (Set_in v@109@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@111@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
              :pattern ((inv@111@01 r))
              :qid |quant-u-195|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@109@01 g0@78@01) (not (Set_in v@109@01 g0@78@01)))))
    (or (Set_in u@108@01 g0@78@01) (not (Set_in u@108@01 g0@78@01)))
    (=>
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))
      (and
        (Set_in u@108@01 g0@78@01)
        (Set_in v@109@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
          :pattern ((inv@116@01 r))
          :qid |quant-u-201|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@108@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))))
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))))
  :pattern ((Set_in u@108@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@108@01 $Ref) (v@109@01 $Ref)) (!
  (and
    (=>
      (Set_in u@108@01 g0@78@01)
      (and
        (Set_in u@108@01 g0@78@01)
        (=>
          (Set_in v@109@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@111@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
              :pattern ((inv@111@01 r))
              :qid |quant-u-195|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@109@01 g0@78@01) (not (Set_in v@109@01 g0@78@01)))))
    (or (Set_in u@108@01 g0@78@01) (not (Set_in u@108@01 g0@78@01)))
    (=>
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))
      (and
        (Set_in u@108@01 g0@78@01)
        (Set_in v@109@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
          :pattern ((inv@116@01 r))
          :qid |quant-u-201|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@108@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))))
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))))
  :pattern ((Set_in u@108@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@108@01 v@109@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@108@01 $Ref) (v@109@01 $Ref)) (!
  (and
    (=>
      (Set_in u@108@01 g0@78@01)
      (and
        (Set_in u@108@01 g0@78@01)
        (=>
          (Set_in v@109@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@111@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
              :pattern ((inv@111@01 r))
              :qid |quant-u-195|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@109@01 g0@78@01) (not (Set_in v@109@01 g0@78@01)))))
    (or (Set_in u@108@01 g0@78@01) (not (Set_in u@108@01 g0@78@01)))
    (=>
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))
      (and
        (Set_in u@108@01 g0@78@01)
        (Set_in v@109@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
          :pattern ((inv@116@01 r))
          :qid |quant-u-201|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@108@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))))
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))))
  :pattern ((Set_in v@109@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@108@01 $Ref) (v@109@01 $Ref)) (!
  (and
    (=>
      (Set_in u@108@01 g0@78@01)
      (and
        (Set_in u@108@01 g0@78@01)
        (=>
          (Set_in v@109@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@111@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
              :pattern ((inv@111@01 r))
              :qid |quant-u-195|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@109@01 g0@78@01) (not (Set_in v@109@01 g0@78@01)))))
    (or (Set_in u@108@01 g0@78@01) (not (Set_in u@108@01 g0@78@01)))
    (=>
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))
      (and
        (Set_in u@108@01 g0@78@01)
        (Set_in v@109@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
          :pattern ((inv@116@01 r))
          :qid |quant-u-201|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@108@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))))
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))))
  :pattern ((Set_in v@109@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@108@01 v@109@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@108@01 $Ref) (v@109@01 $Ref)) (!
  (and
    (=>
      (Set_in u@108@01 g0@78@01)
      (and
        (Set_in u@108@01 g0@78@01)
        (=>
          (Set_in v@109@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@111@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
              :pattern ((inv@111@01 r))
              :qid |quant-u-195|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@109@01 g0@78@01) (not (Set_in v@109@01 g0@78@01)))))
    (or (Set_in u@108@01 g0@78@01) (not (Set_in u@108@01 g0@78@01)))
    (=>
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))
      (and
        (Set_in u@108@01 g0@78@01)
        (Set_in v@109@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
          :pattern ((inv@116@01 r))
          :qid |quant-u-201|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@108@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))))
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@108@01 $Ref) (v@109@01 $Ref)) (!
  (and
    (=>
      (Set_in u@108@01 g0@78@01)
      (and
        (Set_in u@108@01 g0@78@01)
        (=>
          (Set_in v@109@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@111@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@99@01  $FVF<next>) r) r))
              :pattern ((inv@111@01 r))
              :qid |quant-u-195|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@109@01 g0@78@01) (not (Set_in v@109@01 g0@78@01)))))
    (or (Set_in u@108@01 g0@78@01) (not (Set_in u@108@01 g0@78@01)))
    (=>
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))
      (and
        (Set_in u@108@01 g0@78@01)
        (Set_in v@109@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@116@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@118@01  $FVF<next>) r) r))
          :pattern ((inv@116@01 r))
          :qid |quant-u-201|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@108@01 g0@78@01)
          (and
            (Set_in v@109@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))))
      (and
        (Set_in u@108@01 g0@78@01)
        (and
          (Set_in v@109@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@108@01 v@109@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@108@01 $Ref) (v@109@01 $Ref)) (!
  (=>
    (and
      (Set_in u@108@01 g0@78@01)
      (and
        (Set_in v@109@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@108@01 v@109@01))
  :pattern ((Set_in u@108@01 g0@78@01) (Set_in v@109@01 g0@78@01))
  :pattern ((Set_in u@108@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))
  :pattern ((Set_in u@108@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@108@01 v@109@01))
  :pattern ((Set_in v@109@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))
  :pattern ((Set_in v@109@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@108@01 v@109@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@114@01  $FVF<next>)) g0@78@01) u@108@01 v@109@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@108@01 v@109@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@01)))))
  $Snap.unit))
; [eval] (forall u: Ref, v: Ref :: { (u in g1), (v in g1) } { (u in g1), exists_path($$(g0), u, v) } { (u in g1), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$(g0), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@121@01 $Ref)
(declare-const v@122@01 $Ref)
(push) ; 3
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v))
; [eval] (u in g1)
(push) ; 4
; [then-branch: 24 | !(u@121@01 in g1@79@01) | live]
; [else-branch: 24 | u@121@01 in g1@79@01 | live]
(push) ; 5
; [then-branch: 24 | !(u@121@01 in g1@79@01)]
(assert (not (Set_in u@121@01 g1@79@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 24 | u@121@01 in g1@79@01]
(assert (Set_in u@121@01 g1@79@01))
; [eval] (v in g1)
(push) ; 6
; [then-branch: 25 | !(v@122@01 in g1@79@01) | live]
; [else-branch: 25 | v@122@01 in g1@79@01 | live]
(push) ; 7
; [then-branch: 25 | !(v@122@01 in g1@79@01)]
(assert (not (Set_in v@122@01 g1@79@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 25 | v@122@01 in g1@79@01]
(assert (Set_in v@122@01 g1@79@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@123@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@123@01 g0@78@01))
(pop) ; 9
(declare-fun inv@124@01 ($Ref) $Ref)
(declare-fun img@125@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@126@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@123@01 $Ref) (n2@123@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@123@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) n1@123@01) n1@123@01))
      (and
        (Set_in n2@123@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) n2@123@01) n2@123@01))
      (= n1@123@01 n2@123@01))
    (= n1@123@01 n2@123@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@123@01 $Ref)) (!
  (=>
    (Set_in n@123@01 g0@78@01)
    (and (= (inv@124@01 n@123@01) n@123@01) (img@125@01 n@123@01)))
  :pattern ((Set_in n@123@01 g0@78@01))
  :pattern ((inv@124@01 n@123@01))
  :pattern ((img@125@01 n@123@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@125@01 r) (Set_in (inv@124@01 r) g0@78@01)) (= (inv@124@01 r) r))
  :pattern ((inv@124@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@124@01 r) g0@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
  :pattern ((inv@124@01 r))
  :qid |quant-u-206|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@127@01 ((r $Ref) (u@121@01 $Ref) (v@122@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r) (= r (inv@124@01 r)))
    ($Perm.min
      (ite
        (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@127@01 r u@121@01 v@122@01))
    $Perm.No)
  
  :qid |quant-u-208|))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@127@01 r u@121@01 v@122@01) $Perm.No)
  
  :qid |quant-u-209|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r) (= r (inv@124@01 r)))
    (= (- $Perm.Write (pTaken@127@01 r u@121@01 v@122@01)) $Perm.No))
  
  :qid |quant-u-210|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@128@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r)))
    (=>
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r))
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@123@01 $Ref)) (!
  (=>
    (Set_in n@123@01 g0@78@01)
    (and (= (inv@124@01 n@123@01) n@123@01) (img@125@01 n@123@01)))
  :pattern ((Set_in n@123@01 g0@78@01))
  :pattern ((inv@124@01 n@123@01))
  :pattern ((img@125@01 n@123@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@125@01 r) (Set_in (inv@124@01 r) g0@78@01)) (= (inv@124@01 r) r))
  :pattern ((inv@124@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r)))
    (=>
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r))
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@124@01 r) g0@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
    :pattern ((inv@124@01 r))
    :qid |quant-u-206|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@123@01 $Ref)) (!
  (=>
    (Set_in n@123@01 g0@78@01)
    (and (= (inv@124@01 n@123@01) n@123@01) (img@125@01 n@123@01)))
  :pattern ((Set_in n@123@01 g0@78@01))
  :pattern ((inv@124@01 n@123@01))
  :pattern ((img@125@01 n@123@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@125@01 r) (Set_in (inv@124@01 r) g0@78@01)) (= (inv@124@01 r) r))
  :pattern ((inv@124@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r)))
    (=>
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r))
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (Set_in v@122@01 g1@79@01)
  (and
    (Set_in v@122@01 g1@79@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@124@01 r) g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
      :pattern ((inv@124@01 r))
      :qid |quant-u-206|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01))))
(assert (or (Set_in v@122@01 g1@79@01) (not (Set_in v@122@01 g1@79@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@123@01 $Ref)) (!
  (=>
    (Set_in n@123@01 g0@78@01)
    (and (= (inv@124@01 n@123@01) n@123@01) (img@125@01 n@123@01)))
  :pattern ((Set_in n@123@01 g0@78@01))
  :pattern ((inv@124@01 n@123@01))
  :pattern ((img@125@01 n@123@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@125@01 r) (Set_in (inv@124@01 r) g0@78@01)) (= (inv@124@01 r) r))
  :pattern ((inv@124@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r)))
    (=>
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r))
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (Set_in u@121@01 g1@79@01)
  (and
    (Set_in u@121@01 g1@79@01)
    (=>
      (Set_in v@122@01 g1@79@01)
      (and
        (Set_in v@122@01 g1@79@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@124@01 r) g0@78@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
          :pattern ((inv@124@01 r))
          :qid |quant-u-206|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01)))
    (or (Set_in v@122@01 g1@79@01) (not (Set_in v@122@01 g1@79@01))))))
(assert (or (Set_in u@121@01 g1@79@01) (not (Set_in u@121@01 g1@79@01))))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 26 | u@121@01 in g1@79@01 && v@122@01 in g1@79@01 && exists_path[Bool]($$(sm@128@01, g0@78@01), u@121@01, v@122@01) | live]
; [else-branch: 26 | !(u@121@01 in g1@79@01 && v@122@01 in g1@79@01 && exists_path[Bool]($$(sm@128@01, g0@78@01), u@121@01, v@122@01)) | live]
(push) ; 5
; [then-branch: 26 | u@121@01 in g1@79@01 && v@122@01 in g1@79@01 && exists_path[Bool]($$(sm@128@01, g0@78@01), u@121@01, v@122@01)]
(assert (and
  (Set_in u@121@01 g1@79@01)
  (and
    (Set_in v@122@01 g1@79@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@129@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@129@01 (Set_union g0@78@01 g1@79@01)))
(pop) ; 7
(declare-fun inv@130@01 ($Ref) $Ref)
(declare-fun img@131@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@132@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@132@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@129@01 $Ref) (n2@129@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@129@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) n1@129@01) n1@129@01))
      (and
        (Set_in n2@129@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) n2@129@01) n2@129@01))
      (= n1@129@01 n2@129@01))
    (= n1@129@01 n2@129@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@129@01 $Ref)) (!
  (=>
    (Set_in n@129@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@130@01 n@129@01) n@129@01) (img@131@01 n@129@01)))
  :pattern ((Set_in n@129@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@130@01 n@129@01))
  :pattern ((img@131@01 n@129@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@131@01 r) (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@130@01 r) r))
  :pattern ((inv@130@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
  :pattern ((inv@130@01 r))
  :qid |quant-u-212|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@133@01 ((r $Ref) (u@121@01 $Ref) (v@122@01 $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
      (img@131@01 r)
      (= r (inv@130@01 r)))
    ($Perm.min
      (ite
        (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@133@01 r u@121@01 v@122@01))
    $Perm.No)
  
  :qid |quant-u-214|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
      (img@131@01 r)
      (= r (inv@130@01 r)))
    (= (- $Perm.Write (pTaken@133@01 r u@121@01 v@122@01)) $Perm.No))
  
  :qid |quant-u-215|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@134@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r)))
    (=>
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r))
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@134@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@132@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((n@129@01 $Ref)) (!
  (=>
    (Set_in n@129@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@130@01 n@129@01) n@129@01) (img@131@01 n@129@01)))
  :pattern ((Set_in n@129@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@130@01 n@129@01))
  :pattern ((img@131@01 n@129@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@131@01 r) (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@130@01 r) r))
  :pattern ((inv@130@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r)))
    (=>
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r))
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@134@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
    :pattern ((inv@130@01 r))
    :qid |quant-u-212|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 26 | !(u@121@01 in g1@79@01 && v@122@01 in g1@79@01 && exists_path[Bool]($$(sm@128@01, g0@78@01), u@121@01, v@122@01))]
(assert (not
  (and
    (Set_in u@121@01 g1@79@01)
    (and
      (Set_in v@122@01 g1@79@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@132@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((n@129@01 $Ref)) (!
  (=>
    (Set_in n@129@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@130@01 n@129@01) n@129@01) (img@131@01 n@129@01)))
  :pattern ((Set_in n@129@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@130@01 n@129@01))
  :pattern ((img@131@01 n@129@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@131@01 r) (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@130@01 r) r))
  :pattern ((inv@130@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r)))
    (=>
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r))
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@134@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
(assert (=>
  (and
    (Set_in u@121@01 g1@79@01)
    (and
      (Set_in v@122@01 g1@79@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))
  (and
    (Set_in u@121@01 g1@79@01)
    (Set_in v@122@01 g1@79@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
      :pattern ((inv@130@01 r))
      :qid |quant-u-212|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@121@01 g1@79@01)
      (and
        (Set_in v@122@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))))
  (and
    (Set_in u@121@01 g1@79@01)
    (and
      (Set_in v@122@01 g1@79@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@123@01 $Ref)) (!
  (=>
    (Set_in n@123@01 g0@78@01)
    (and (= (inv@124@01 n@123@01) n@123@01) (img@125@01 n@123@01)))
  :pattern ((Set_in n@123@01 g0@78@01))
  :pattern ((inv@124@01 n@123@01))
  :pattern ((img@125@01 n@123@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@125@01 r) (Set_in (inv@124@01 r) g0@78@01)) (= (inv@124@01 r) r))
  :pattern ((inv@124@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r)))
    (=>
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r))
      (Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@128@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@124@01 r) g0@78@01) (img@125@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@132@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@132@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((n@129@01 $Ref)) (!
  (=>
    (Set_in n@129@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@130@01 n@129@01) n@129@01) (img@131@01 n@129@01)))
  :pattern ((Set_in n@129@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@130@01 n@129@01))
  :pattern ((img@131@01 n@129@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@131@01 r) (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@130@01 r) r))
  :pattern ((inv@130@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r)))
    (=>
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r))
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01)) (img@131@01 r))
      (and (img@98@01 r) (Set_in (inv@97@01 r) (Set_union g0@78@01 g1@79@01))))
    (=
      ($FVF.lookup_next (as sm@134@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r)))
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@94@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@121@01 $Ref) (v@122@01 $Ref)) (!
  (and
    (=>
      (Set_in u@121@01 g1@79@01)
      (and
        (Set_in u@121@01 g1@79@01)
        (=>
          (Set_in v@122@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@124@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
              :pattern ((inv@124@01 r))
              :qid |quant-u-206|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@122@01 g1@79@01) (not (Set_in v@122@01 g1@79@01)))))
    (or (Set_in u@121@01 g1@79@01) (not (Set_in u@121@01 g1@79@01)))
    (=>
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))
      (and
        (Set_in u@121@01 g1@79@01)
        (Set_in v@122@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
          :pattern ((inv@130@01 r))
          :qid |quant-u-212|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@121@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))))
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))))
  :pattern ((Set_in u@121@01 g1@79@01) (Set_in v@122@01 g1@79@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@121@01 $Ref) (v@122@01 $Ref)) (!
  (and
    (=>
      (Set_in u@121@01 g1@79@01)
      (and
        (Set_in u@121@01 g1@79@01)
        (=>
          (Set_in v@122@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@124@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
              :pattern ((inv@124@01 r))
              :qid |quant-u-206|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@122@01 g1@79@01) (not (Set_in v@122@01 g1@79@01)))))
    (or (Set_in u@121@01 g1@79@01) (not (Set_in u@121@01 g1@79@01)))
    (=>
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))
      (and
        (Set_in u@121@01 g1@79@01)
        (Set_in v@122@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
          :pattern ((inv@130@01 r))
          :qid |quant-u-212|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@121@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))))
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))))
  :pattern ((Set_in u@121@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@121@01 $Ref) (v@122@01 $Ref)) (!
  (and
    (=>
      (Set_in u@121@01 g1@79@01)
      (and
        (Set_in u@121@01 g1@79@01)
        (=>
          (Set_in v@122@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@124@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
              :pattern ((inv@124@01 r))
              :qid |quant-u-206|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@122@01 g1@79@01) (not (Set_in v@122@01 g1@79@01)))))
    (or (Set_in u@121@01 g1@79@01) (not (Set_in u@121@01 g1@79@01)))
    (=>
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))
      (and
        (Set_in u@121@01 g1@79@01)
        (Set_in v@122@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
          :pattern ((inv@130@01 r))
          :qid |quant-u-212|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@121@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))))
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))))
  :pattern ((Set_in u@121@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@121@01 v@122@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@121@01 $Ref) (v@122@01 $Ref)) (!
  (and
    (=>
      (Set_in u@121@01 g1@79@01)
      (and
        (Set_in u@121@01 g1@79@01)
        (=>
          (Set_in v@122@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@124@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
              :pattern ((inv@124@01 r))
              :qid |quant-u-206|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@122@01 g1@79@01) (not (Set_in v@122@01 g1@79@01)))))
    (or (Set_in u@121@01 g1@79@01) (not (Set_in u@121@01 g1@79@01)))
    (=>
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))
      (and
        (Set_in u@121@01 g1@79@01)
        (Set_in v@122@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
          :pattern ((inv@130@01 r))
          :qid |quant-u-212|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@121@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))))
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))))
  :pattern ((Set_in v@122@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@121@01 $Ref) (v@122@01 $Ref)) (!
  (and
    (=>
      (Set_in u@121@01 g1@79@01)
      (and
        (Set_in u@121@01 g1@79@01)
        (=>
          (Set_in v@122@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@124@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
              :pattern ((inv@124@01 r))
              :qid |quant-u-206|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@122@01 g1@79@01) (not (Set_in v@122@01 g1@79@01)))))
    (or (Set_in u@121@01 g1@79@01) (not (Set_in u@121@01 g1@79@01)))
    (=>
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))
      (and
        (Set_in u@121@01 g1@79@01)
        (Set_in v@122@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
          :pattern ((inv@130@01 r))
          :qid |quant-u-212|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@121@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))))
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))))
  :pattern ((Set_in v@122@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@121@01 v@122@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@121@01 $Ref) (v@122@01 $Ref)) (!
  (and
    (=>
      (Set_in u@121@01 g1@79@01)
      (and
        (Set_in u@121@01 g1@79@01)
        (=>
          (Set_in v@122@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@124@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
              :pattern ((inv@124@01 r))
              :qid |quant-u-206|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@122@01 g1@79@01) (not (Set_in v@122@01 g1@79@01)))))
    (or (Set_in u@121@01 g1@79@01) (not (Set_in u@121@01 g1@79@01)))
    (=>
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))
      (and
        (Set_in u@121@01 g1@79@01)
        (Set_in v@122@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
          :pattern ((inv@130@01 r))
          :qid |quant-u-212|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@121@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))))
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@121@01 $Ref) (v@122@01 $Ref)) (!
  (and
    (=>
      (Set_in u@121@01 g1@79@01)
      (and
        (Set_in u@121@01 g1@79@01)
        (=>
          (Set_in v@122@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@124@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
              :pattern ((inv@124@01 r))
              :qid |quant-u-206|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@122@01 g1@79@01) (not (Set_in v@122@01 g1@79@01)))))
    (or (Set_in u@121@01 g1@79@01) (not (Set_in u@121@01 g1@79@01)))
    (=>
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))
      (and
        (Set_in u@121@01 g1@79@01)
        (Set_in v@122@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@130@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@132@01  $FVF<next>) r) r))
          :pattern ((inv@130@01 r))
          :qid |quant-u-212|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@121@01 g1@79@01)
          (and
            (Set_in v@122@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))))
      (and
        (Set_in u@121@01 g1@79@01)
        (and
          (Set_in v@122@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@121@01 v@122@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@121@01 $Ref) (v@122@01 $Ref)) (!
  (=>
    (and
      (Set_in u@121@01 g1@79@01)
      (and
        (Set_in v@122@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@121@01 v@122@01))
  :pattern ((Set_in u@121@01 g1@79@01) (Set_in v@122@01 g1@79@01))
  :pattern ((Set_in u@121@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))
  :pattern ((Set_in u@121@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@121@01 v@122@01))
  :pattern ((Set_in v@122@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))
  :pattern ((Set_in v@122@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@121@01 v@122@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@128@01  $FVF<next>)) g0@78@01) u@121@01 v@122@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@121@01 v@122@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117|)))
(pop) ; 2
(push) ; 2
; [exec]
; inhale apply_noExit($$((g0 union g1)), (g0 union g1), g0)
(declare-const $t@135@01 $Snap)
(assert (= $t@135@01 $Snap.unit))
; [eval] apply_noExit($$((g0 union g1)), (g0 union g1), g0)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@136@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@136@01 (Set_union g0@78@01 g1@79@01)))
(pop) ; 4
(declare-fun inv@137@01 ($Ref) $Ref)
(declare-fun img@138@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@136@01 $Ref) (n2@136@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@136@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n1@136@01) n1@136@01))
      (and
        (Set_in n2@136@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) n2@136@01) n2@136@01))
      (= n1@136@01 n2@136@01))
    (= n1@136@01 n2@136@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@136@01 $Ref)) (!
  (=>
    (Set_in n@136@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@137@01 n@136@01) n@136@01) (img@138@01 n@136@01)))
  :pattern ((Set_in n@136@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@137@01 n@136@01))
  :pattern ((img@138@01 n@136@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@138@01 r) (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@137@01 r) r))
  :pattern ((inv@137@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) r) r))
  :pattern ((inv@137@01 r))
  :qid |quant-u-217|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@139@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    ($Perm.min
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@140@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    ($Perm.min
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@139@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      (pTaken@139@01 r))
    $Perm.No)
  
  :qid |quant-u-219|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    (= (- $Perm.Write (pTaken@139@01 r)) $Perm.No))
  
  :qid |quant-u-220|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (pTaken@140@01 r))
    $Perm.No)
  
  :qid |quant-u-221|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    (= (- (- $Perm.Write (pTaken@139@01 r)) (pTaken@140@01 r)) $Perm.No))
  
  :qid |quant-u-222|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@141@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@141@01  $FVF<next>)))
      (and (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01)) (img@138@01 r)))
    (=>
      (and (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01)) (img@138@01 r))
      (Set_in r ($FVF.domain_next (as sm@141@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@141@01  $FVF<next>))))
  :qid |qp.fvfDomDef84|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01)) (img@138@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01)) (img@138@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef83|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@141@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@136@01 $Ref)) (!
  (=>
    (Set_in n@136@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@137@01 n@136@01) n@136@01) (img@138@01 n@136@01)))
  :pattern ((Set_in n@136@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@137@01 n@136@01))
  :pattern ((img@138@01 n@136@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@138@01 r) (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@137@01 r) r))
  :pattern ((inv@137@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@141@01  $FVF<next>)))
      (and (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01)) (img@138@01 r)))
    (=>
      (and (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01)) (img@138@01 r))
      (Set_in r ($FVF.domain_next (as sm@141@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@141@01  $FVF<next>))))
  :qid |qp.fvfDomDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01)) (img@138@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01)) (img@138@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@141@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@141@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef83|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@137@01 r) (Set_union g0@78@01 g1@79@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@90@01  $FVF<next>) r) r))
    :pattern ((inv@137@01 r))
    :qid |quant-u-217|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@141@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
; [eval] (g0 union g1)
(assert (apply_noExit<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@141@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) (Set_union g0@78@01 g1@79@01) g0@78@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale apply_TCFraming(g0, g1)
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 $Snap.unit))
; [eval] apply_TCFraming(g0, g1)
(set-option :timeout 0)
(push) ; 3
(declare-const n@143@01 $Ref)
(push) ; 4
; [eval] (n in g0)
(assert (Set_in n@143@01 g0@78@01))
(pop) ; 4
(declare-fun inv@144@01 ($Ref) $Ref)
(declare-fun img@145@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@146@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@146@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@146@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@146@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@146@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@146@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef87|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@143@01 $Ref) (n2@143@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@143@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@146@01  $FVF<next>) n1@143@01) n1@143@01))
      (and
        (Set_in n2@143@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@146@01  $FVF<next>) n2@143@01) n2@143@01))
      (= n1@143@01 n2@143@01))
    (= n1@143@01 n2@143@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@143@01 $Ref)) (!
  (=>
    (Set_in n@143@01 g0@78@01)
    (and (= (inv@144@01 n@143@01) n@143@01) (img@145@01 n@143@01)))
  :pattern ((Set_in n@143@01 g0@78@01))
  :pattern ((inv@144@01 n@143@01))
  :pattern ((img@145@01 n@143@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@145@01 r) (Set_in (inv@144@01 r) g0@78@01)) (= (inv@144@01 r) r))
  :pattern ((inv@144@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@144@01 r) g0@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@146@01  $FVF<next>) r) r))
  :pattern ((inv@144@01 r))
  :qid |quant-u-224|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@147@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@144@01 r) g0@78@01) (img@145@01 r) (= r (inv@144@01 r)))
    ($Perm.min
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@148@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@144@01 r) g0@78@01) (img@145@01 r) (= r (inv@144@01 r)))
    ($Perm.min
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@147@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      (pTaken@147@01 r))
    $Perm.No)
  
  :qid |quant-u-226|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@144@01 r) g0@78@01) (img@145@01 r) (= r (inv@144@01 r)))
    (= (- $Perm.Write (pTaken@147@01 r)) $Perm.No))
  
  :qid |quant-u-227|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@149@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@149@01  $FVF<next>)))
      (and (Set_in (inv@144@01 r) g0@78@01) (img@145@01 r)))
    (=>
      (and (Set_in (inv@144@01 r) g0@78@01) (img@145@01 r))
      (Set_in r ($FVF.domain_next (as sm@149@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@149@01  $FVF<next>))))
  :qid |qp.fvfDomDef91|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@144@01 r) g0@78@01) (img@145@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@149@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@149@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@144@01 r) g0@78@01) (img@145@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@149@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@149@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@149@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef90|)))
(declare-const n@150@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n in g1)
(assert (Set_in n@150@01 g1@79@01))
(pop) ; 4
(declare-fun inv@151@01 ($Ref) $Ref)
(declare-fun img@152@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@153@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef93|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@150@01 $Ref) (n2@150@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@150@01 g1@79@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@153@01  $FVF<next>) n1@150@01) n1@150@01))
      (and
        (Set_in n2@150@01 g1@79@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@153@01  $FVF<next>) n2@150@01) n2@150@01))
      (= n1@150@01 n2@150@01))
    (= n1@150@01 n2@150@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g1@79@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g1@79@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g1@79@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@151@01 r) g1@79@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@153@01  $FVF<next>) r) r))
  :pattern ((inv@151@01 r))
  :qid |quant-u-229|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@154@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@151@01 r) g1@79@01) (img@152@01 r) (= r (inv@151@01 r)))
    ($Perm.min
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (pTaken@154@01 r))
    $Perm.No)
  
  :qid |quant-u-231|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@151@01 r) g1@79@01) (img@152@01 r) (= r (inv@151@01 r)))
    (= (- $Perm.Write (pTaken@154@01 r)) $Perm.No))
  
  :qid |quant-u-232|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@155@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@155@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g1@79@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g1@79@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@155@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@155@01  $FVF<next>))))
  :qid |qp.fvfDomDef96|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g1@79@01) (img@152@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef95|)))
; [eval] (g1 intersection g0) == Set[Ref]()
; [eval] (g1 intersection g0)
; [eval] Set[Ref]()
(set-option :timeout 0)
(push) ; 4
(assert (not (Set_equal (Set_intersection g1@79@01 g0@78@01) (as Set_empty  Set<$Ref>))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (Set_equal (Set_intersection g1@79@01 g0@78@01) (as Set_empty  Set<$Ref>)))
(assert (apply_TCFraming%precondition ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@149@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@155@01  $FVF<next>))
    $Snap.unit)) g0@78@01 g1@79@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@146@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@146@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@146@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@146@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@146@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef87|)))
(assert (forall ((n@143@01 $Ref)) (!
  (=>
    (Set_in n@143@01 g0@78@01)
    (and (= (inv@144@01 n@143@01) n@143@01) (img@145@01 n@143@01)))
  :pattern ((Set_in n@143@01 g0@78@01))
  :pattern ((inv@144@01 n@143@01))
  :pattern ((img@145@01 n@143@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@145@01 r) (Set_in (inv@144@01 r) g0@78@01)) (= (inv@144@01 r) r))
  :pattern ((inv@144@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@149@01  $FVF<next>)))
      (and (Set_in (inv@144@01 r) g0@78@01) (img@145@01 r)))
    (=>
      (and (Set_in (inv@144@01 r) g0@78@01) (img@145@01 r))
      (Set_in r ($FVF.domain_next (as sm@149@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@149@01  $FVF<next>))))
  :qid |qp.fvfDomDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@144@01 r) g0@78@01) (img@145@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@149@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@149@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@144@01 r) g0@78@01) (img@145@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@149@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@149@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@149@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef93|)))
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g1@79@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g1@79@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g1@79@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@155@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g1@79@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g1@79@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@155@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@155@01  $FVF<next>))))
  :qid |qp.fvfDomDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g1@79@01) (img@152@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@144@01 r) g0@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@146@01  $FVF<next>) r) r))
    :pattern ((inv@144@01 r))
    :qid |quant-u-224|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@151@01 r) g1@79@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@153@01  $FVF<next>) r) r))
    :pattern ((inv@151@01 r))
    :qid |quant-u-229|))
  (Set_equal (Set_intersection g1@79@01 g0@78@01) (as Set_empty  Set<$Ref>))
  (apply_TCFraming%precondition ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@149@01  $FVF<next>))
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@155@01  $FVF<next>))
      $Snap.unit)) g0@78@01 g1@79@01)))
(assert (apply_TCFraming ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@149@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@155@01  $FVF<next>))
    $Snap.unit)) g0@78@01 g1@79@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (Set_in $Ref.null (Set_union g0@78@01 g1@79@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null (Set_union g0@78@01 g1@79@01))))
(declare-const n$3@156@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$3@156@01 (Set_union g0@78@01 g1@79@01)))
(declare-const sm@157@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(pop) ; 3
(declare-fun inv@158@01 ($Ref) $Ref)
(declare-fun img@159@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
; Nested auxiliary terms: non-globals
(declare-const sm@160@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@156@01 $Ref) (n$32@156@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$31@156@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$31@156@01) n$31@156@01))
      (and
        (Set_in n$32@156@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$32@156@01) n$32@156@01))
      (= n$31@156@01 n$32@156@01))
    (= n$31@156@01 n$32@156@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@156@01 $Ref)) (!
  (=>
    (Set_in n$3@156@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@158@01 n$3@156@01) n$3@156@01) (img@159@01 n$3@156@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) n$3@156@01) n$3@156@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@159@01 r) (Set_in (inv@158@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@158@01 r) r))
  :pattern ((inv@158@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@158@01 r) (Set_union g0@78@01 g1@79@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
  :pattern ((inv@158@01 r))
  :qid |quant-u-234|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@161@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@158@01 r) (Set_union g0@78@01 g1@79@01))
      (img@159@01 r)
      (= r (inv@158@01 r)))
    ($Perm.min
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@162@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@158@01 r) (Set_union g0@78@01 g1@79@01))
      (img@159@01 r)
      (= r (inv@158@01 r)))
    ($Perm.min
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@161@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      (pTaken@161@01 r))
    $Perm.No)
  
  :qid |quant-u-236|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@158@01 r) (Set_union g0@78@01 g1@79@01))
      (img@159@01 r)
      (= r (inv@158@01 r)))
    (= (- $Perm.Write (pTaken@161@01 r)) $Perm.No))
  
  :qid |quant-u-237|))))
(check-sat)
; unknown
(pop) ; 3
; 0,47s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (pTaken@162@01 r))
    $Perm.No)
  
  :qid |quant-u-238|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@158@01 r) (Set_union g0@78@01 g1@79@01))
      (img@159@01 r)
      (= r (inv@158@01 r)))
    (= (- (- $Perm.Write (pTaken@161@01 r)) (pTaken@162@01 r)) $Perm.No))
  
  :qid |quant-u-239|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$4: Ref :: { (n$4.next in (g0 union g1)) } { (n$4 in (g0 union g1)), n$4.next } (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1)))
(declare-const n$4@163@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1))
; [eval] (n$4 in (g0 union g1)) && n$4.next != null
; [eval] (n$4 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 27 | !(n$4@163@01 in g0@78@01 ∪ g1@79@01) | live]
; [else-branch: 27 | n$4@163@01 in g0@78@01 ∪ g1@79@01 | live]
(push) ; 5
; [then-branch: 27 | !(n$4@163@01 in g0@78@01 ∪ g1@79@01)]
(assert (not (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 27 | n$4@163@01 in g0@78@01 ∪ g1@79@01]
(assert (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
      (=
        ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
    :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
    :qid |qp.fvfValDef100|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
      (=
        ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
    :qid |qp.fvfValDef101|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef102|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) n$4@163@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@84@01 n$4@163@01) (Set_in (inv@83@01 n$4@163@01) g0@78@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@89@01 n$4@163@01) (Set_in (inv@88@01 n$4@163@01) g1@79@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (=>
  (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
  (and
    (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) n$4@163@01))))
(assert (or
  (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
  (not (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01)))))
(push) ; 4
; [then-branch: 28 | n$4@163@01 in g0@78@01 ∪ g1@79@01 && Lookup(next, sm@160@01, n$4@163@01) != Null | live]
; [else-branch: 28 | !(n$4@163@01 in g0@78@01 ∪ g1@79@01 && Lookup(next, sm@160@01, n$4@163@01) != Null) | live]
(push) ; 5
; [then-branch: 28 | n$4@163@01 in g0@78@01 ∪ g1@79@01 && Lookup(next, sm@160@01, n$4@163@01) != Null]
(assert (and
  (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
  (not (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null))))
; [eval] (n$4.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
      (=
        ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
    :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
    :qid |qp.fvfValDef100|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
      (=
        ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
    :qid |qp.fvfValDef101|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef102|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) n$4@163@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@84@01 n$4@163@01) (Set_in (inv@83@01 n$4@163@01) g0@78@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@89@01 n$4@163@01) (Set_in (inv@88@01 n$4@163@01) g1@79@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 28 | !(n$4@163@01 in g0@78@01 ∪ g1@79@01 && Lookup(next, sm@160@01, n$4@163@01) != Null)]
(assert (not
  (and
    (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
    (not (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (=>
  (and
    (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
    (not (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null)))
  (and
    (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
    (not (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) n$4@163@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
      (not
        (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null))))
  (and
    (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
    (not (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@160@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@160@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@163@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
      (and
        (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) n$4@163@01)))
    (or
      (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
      (not (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))))
    (=>
      (and
        (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null)))
      (and
        (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) n$4@163@01)))
    (or
      (not
        (and
          (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
          (not
            (=
              ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01)
              $Ref.null))))
      (and
        (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) (Set_union g0@78@01 g1@79@01)))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31-aux|)))
(assert (forall ((n$4@163@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
      (and
        (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) n$4@163@01)))
    (or
      (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
      (not (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))))
    (=>
      (and
        (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null)))
      (and
        (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) n$4@163@01)))
    (or
      (not
        (and
          (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
          (not
            (=
              ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01)
              $Ref.null))))
      (and
        (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
        (not
          (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null)))))
  :pattern ((Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) n$4@163@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31-aux|)))
(push) ; 3
(assert (not (forall ((n$4@163@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
      (not
        (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) (Set_union g0@78@01 g1@79@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) (Set_union g0@78@01 g1@79@01)))
  :pattern ((Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) n$4@163@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$4@163@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01))
      (not
        (= ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) (Set_union g0@78@01 g1@79@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) (Set_union g0@78@01 g1@79@01)))
  :pattern ((Set_in n$4@163@01 (Set_union g0@78@01 g1@79@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n$4@163@01) n$4@163@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@378@13@378@31|)))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g1) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v))
(declare-const u@164@01 $Ref)
(declare-const v@165@01 $Ref)
(push) ; 3
; [eval] (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && (v in g1)
; [eval] (u in g0)
(push) ; 4
; [then-branch: 29 | !(u@164@01 in g0@78@01) | live]
; [else-branch: 29 | u@164@01 in g0@78@01 | live]
(push) ; 5
; [then-branch: 29 | !(u@164@01 in g0@78@01)]
(assert (not (Set_in u@164@01 g0@78@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 29 | u@164@01 in g0@78@01]
(assert (Set_in u@164@01 g0@78@01))
; [eval] (v in g1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in u@164@01 g0@78@01) (not (Set_in u@164@01 g0@78@01))))
(push) ; 4
; [then-branch: 30 | u@164@01 in g0@78@01 && v@165@01 in g1@79@01 | live]
; [else-branch: 30 | !(u@164@01 in g0@78@01 && v@165@01 in g1@79@01) | live]
(push) ; 5
; [then-branch: 30 | u@164@01 in g0@78@01 && v@165@01 in g1@79@01]
(assert (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01)))
; [eval] !exists_path($$((g0 union g1)), u, v)
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@166@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@166@01 (Set_union g0@78@01 g1@79@01)))
(pop) ; 7
(declare-fun inv@167@01 ($Ref) $Ref)
(declare-fun img@168@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@166@01 $Ref) (n2@166@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@166@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n1@166@01) n1@166@01))
      (and
        (Set_in n2@166@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n2@166@01) n2@166@01))
      (= n1@166@01 n2@166@01))
    (= n1@166@01 n2@166@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
  :pattern ((inv@167@01 r))
  :qid |quant-u-241|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@169@01 ((r $Ref) (u@164@01 $Ref) (v@165@01 $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01))
      (img@168@01 r)
      (= r (inv@167@01 r)))
    ($Perm.min
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@170@01 ((r $Ref) (u@164@01 $Ref) (v@165@01 $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01))
      (img@168@01 r)
      (= r (inv@167@01 r)))
    ($Perm.min
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@169@01 r u@164@01 v@165@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      (pTaken@169@01 r u@164@01 v@165@01))
    $Perm.No)
  
  :qid |quant-u-243|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01))
      (img@168@01 r)
      (= r (inv@167@01 r)))
    (= (- $Perm.Write (pTaken@169@01 r u@164@01 v@165@01)) $Perm.No))
  
  :qid |quant-u-244|))))
(check-sat)
; unknown
(pop) ; 7
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (pTaken@170@01 r u@164@01 v@165@01))
    $Perm.No)
  
  :qid |quant-u-245|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01))
      (img@168@01 r)
      (= r (inv@167@01 r)))
    (=
      (-
        (- $Perm.Write (pTaken@169@01 r u@164@01 v@165@01))
        (pTaken@170@01 r u@164@01 v@165@01))
      $Perm.No))
  
  :qid |quant-u-246|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@171@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>))))
  :qid |qp.fvfDomDef106|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@171@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@171@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@171@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@171@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
    :pattern ((inv@167@01 r))
    :qid |quant-u-241|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 30 | !(u@164@01 in g0@78@01 && v@165@01 in g1@79@01)]
(assert (not (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@171@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@171@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef105|)))
(assert (=>
  (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
  (and
    (Set_in u@164@01 g0@78@01)
    (Set_in v@165@01 g1@79@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
      :pattern ((inv@167@01 r))
      :qid |quant-u-241|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))))
; Joined path conditions
(assert (or
  (not (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01)))
  (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@171@01  $FVF<next>))))
  :qid |qp.fvfDomDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@171@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01)) (img@168@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@171@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@171@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef105|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@164@01 $Ref) (v@165@01 $Ref)) (!
  (and
    (or (Set_in u@164@01 g0@78@01) (not (Set_in u@164@01 g0@78@01)))
    (=>
      (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
      (and
        (Set_in u@164@01 g0@78@01)
        (Set_in v@165@01 g1@79@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-241|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01)))
      (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))))
  :pattern ((Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@164@01 $Ref) (v@165@01 $Ref)) (!
  (and
    (or (Set_in u@164@01 g0@78@01) (not (Set_in u@164@01 g0@78@01)))
    (=>
      (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
      (and
        (Set_in u@164@01 g0@78@01)
        (Set_in v@165@01 g1@79@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-241|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01)))
      (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))))
  :pattern ((Set_in u@164@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@164@01 $Ref) (v@165@01 $Ref)) (!
  (and
    (or (Set_in u@164@01 g0@78@01) (not (Set_in u@164@01 g0@78@01)))
    (=>
      (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
      (and
        (Set_in u@164@01 g0@78@01)
        (Set_in v@165@01 g1@79@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-241|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01)))
      (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))))
  :pattern ((Set_in v@165@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@164@01 $Ref) (v@165@01 $Ref)) (!
  (and
    (or (Set_in u@164@01 g0@78@01) (not (Set_in u@164@01 g0@78@01)))
    (=>
      (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
      (and
        (Set_in u@164@01 g0@78@01)
        (Set_in v@165@01 g1@79@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-241|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01)))
      (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91-aux|)))
(assert (forall ((u@164@01 $Ref) (v@165@01 $Ref)) (!
  (=>
    (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))
  :pattern ((Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
  :pattern ((Set_in u@164@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :pattern ((Set_in v@165@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91_precondition|)))
(push) ; 3
(assert (not (forall ((u@164@01 $Ref) (v@165@01 $Ref)) (!
  (=>
    (and
      (=>
        (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))
      (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01)))
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01)))
  :pattern ((Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
  :pattern ((Set_in u@164@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :pattern ((Set_in v@165@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91|))))
(check-sat)
; unsat
(pop) ; 3
; 0,03s
; (get-info :all-statistics)
(assert (forall ((u@164@01 $Ref) (v@165@01 $Ref)) (!
  (=>
    (and (Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01)))
  :pattern ((Set_in u@164@01 g0@78@01) (Set_in v@165@01 g1@79@01))
  :pattern ((Set_in u@164@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :pattern ((Set_in v@165@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@171@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@164@01 v@165@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@379@13@379@91|)))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g0) } { (u in g0), exists_path($$(g0), u, v) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g0), exists_path($$(g0), u, v) } { (v in g0), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@172@01 $Ref)
(declare-const v@173@01 $Ref)
(push) ; 3
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v))
; [eval] (u in g0)
(push) ; 4
; [then-branch: 31 | !(u@172@01 in g0@78@01) | live]
; [else-branch: 31 | u@172@01 in g0@78@01 | live]
(push) ; 5
; [then-branch: 31 | !(u@172@01 in g0@78@01)]
(assert (not (Set_in u@172@01 g0@78@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 31 | u@172@01 in g0@78@01]
(assert (Set_in u@172@01 g0@78@01))
; [eval] (v in g0)
(push) ; 6
; [then-branch: 32 | !(v@173@01 in g0@78@01) | live]
; [else-branch: 32 | v@173@01 in g0@78@01 | live]
(push) ; 7
; [then-branch: 32 | !(v@173@01 in g0@78@01)]
(assert (not (Set_in v@173@01 g0@78@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 32 | v@173@01 in g0@78@01]
(assert (Set_in v@173@01 g0@78@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@174@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@174@01 g0@78@01))
(pop) ; 9
(declare-fun inv@175@01 ($Ref) $Ref)
(declare-fun img@176@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@174@01 $Ref) (n2@174@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@174@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n1@174@01) n1@174@01))
      (and
        (Set_in n2@174@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) n2@174@01) n2@174@01))
      (= n1@174@01 n2@174@01))
    (= n1@174@01 n2@174@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@174@01 $Ref)) (!
  (=>
    (Set_in n@174@01 g0@78@01)
    (and (= (inv@175@01 n@174@01) n@174@01) (img@176@01 n@174@01)))
  :pattern ((Set_in n@174@01 g0@78@01))
  :pattern ((inv@175@01 n@174@01))
  :pattern ((img@176@01 n@174@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@176@01 r) (Set_in (inv@175@01 r) g0@78@01)) (= (inv@175@01 r) r))
  :pattern ((inv@175@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@175@01 r) g0@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
  :pattern ((inv@175@01 r))
  :qid |quant-u-248|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@177@01 ((r $Ref) (u@172@01 $Ref) (v@173@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r) (= r (inv@175@01 r)))
    ($Perm.min
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@178@01 ((r $Ref) (u@172@01 $Ref) (v@173@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r) (= r (inv@175@01 r)))
    ($Perm.min
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@177@01 r u@172@01 v@173@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      (pTaken@177@01 r u@172@01 v@173@01))
    $Perm.No)
  
  :qid |quant-u-250|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r) (= r (inv@175@01 r)))
    (= (- $Perm.Write (pTaken@177@01 r u@172@01 v@173@01)) $Perm.No))
  
  :qid |quant-u-251|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@179@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>)))
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r)))
    (=>
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@179@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@179@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@174@01 $Ref)) (!
  (=>
    (Set_in n@174@01 g0@78@01)
    (and (= (inv@175@01 n@174@01) n@174@01) (img@176@01 n@174@01)))
  :pattern ((Set_in n@174@01 g0@78@01))
  :pattern ((inv@175@01 n@174@01))
  :pattern ((img@176@01 n@174@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@176@01 r) (Set_in (inv@175@01 r) g0@78@01)) (= (inv@175@01 r) r))
  :pattern ((inv@175@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>)))
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r)))
    (=>
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@179@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@179@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@175@01 r) g0@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
    :pattern ((inv@175@01 r))
    :qid |quant-u-248|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((n@174@01 $Ref)) (!
  (=>
    (Set_in n@174@01 g0@78@01)
    (and (= (inv@175@01 n@174@01) n@174@01) (img@176@01 n@174@01)))
  :pattern ((Set_in n@174@01 g0@78@01))
  :pattern ((inv@175@01 n@174@01))
  :pattern ((img@176@01 n@174@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@176@01 r) (Set_in (inv@175@01 r) g0@78@01)) (= (inv@175@01 r) r))
  :pattern ((inv@175@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>)))
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r)))
    (=>
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@179@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@179@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (=>
  (Set_in v@173@01 g0@78@01)
  (and
    (Set_in v@173@01 g0@78@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@175@01 r) g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
      :pattern ((inv@175@01 r))
      :qid |quant-u-248|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01))))
(assert (or (Set_in v@173@01 g0@78@01) (not (Set_in v@173@01 g0@78@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((n@174@01 $Ref)) (!
  (=>
    (Set_in n@174@01 g0@78@01)
    (and (= (inv@175@01 n@174@01) n@174@01) (img@176@01 n@174@01)))
  :pattern ((Set_in n@174@01 g0@78@01))
  :pattern ((inv@175@01 n@174@01))
  :pattern ((img@176@01 n@174@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@176@01 r) (Set_in (inv@175@01 r) g0@78@01)) (= (inv@175@01 r) r))
  :pattern ((inv@175@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>)))
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r)))
    (=>
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@179@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@179@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (=>
  (Set_in u@172@01 g0@78@01)
  (and
    (Set_in u@172@01 g0@78@01)
    (=>
      (Set_in v@173@01 g0@78@01)
      (and
        (Set_in v@173@01 g0@78@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@175@01 r) g0@78@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
          :pattern ((inv@175@01 r))
          :qid |quant-u-248|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01)))
    (or (Set_in v@173@01 g0@78@01) (not (Set_in v@173@01 g0@78@01))))))
(assert (or (Set_in u@172@01 g0@78@01) (not (Set_in u@172@01 g0@78@01))))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 33 | u@172@01 in g0@78@01 && v@173@01 in g0@78@01 && exists_path[Bool]($$(sm@179@01, g0@78@01), u@172@01, v@173@01) | live]
; [else-branch: 33 | !(u@172@01 in g0@78@01 && v@173@01 in g0@78@01 && exists_path[Bool]($$(sm@179@01, g0@78@01), u@172@01, v@173@01)) | live]
(push) ; 5
; [then-branch: 33 | u@172@01 in g0@78@01 && v@173@01 in g0@78@01 && exists_path[Bool]($$(sm@179@01, g0@78@01), u@172@01, v@173@01)]
(assert (and
  (Set_in u@172@01 g0@78@01)
  (and
    (Set_in v@173@01 g0@78@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@180@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@180@01 (Set_union g0@78@01 g1@79@01)))
(pop) ; 7
(declare-fun inv@181@01 ($Ref) $Ref)
(declare-fun img@182@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@183@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@180@01 $Ref) (n2@180@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@180@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) n1@180@01) n1@180@01))
      (and
        (Set_in n2@180@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) n2@180@01) n2@180@01))
      (= n1@180@01 n2@180@01))
    (= n1@180@01 n2@180@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@180@01 $Ref)) (!
  (=>
    (Set_in n@180@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@181@01 n@180@01) n@180@01) (img@182@01 n@180@01)))
  :pattern ((Set_in n@180@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@181@01 n@180@01))
  :pattern ((img@182@01 n@180@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@182@01 r) (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@181@01 r) r))
  :pattern ((inv@181@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) r) r))
  :pattern ((inv@181@01 r))
  :qid |quant-u-253|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@184@01 ((r $Ref) (u@172@01 $Ref) (v@173@01 $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
      (img@182@01 r)
      (= r (inv@181@01 r)))
    ($Perm.min
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@185@01 ((r $Ref) (u@172@01 $Ref) (v@173@01 $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
      (img@182@01 r)
      (= r (inv@181@01 r)))
    ($Perm.min
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@184@01 r u@172@01 v@173@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      (pTaken@184@01 r u@172@01 v@173@01))
    $Perm.No)
  
  :qid |quant-u-255|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
      (img@182@01 r)
      (= r (inv@181@01 r)))
    (= (- $Perm.Write (pTaken@184@01 r u@172@01 v@173@01)) $Perm.No))
  
  :qid |quant-u-256|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (pTaken@185@01 r u@172@01 v@173@01))
    $Perm.No)
  
  :qid |quant-u-257|))))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
      (img@182@01 r)
      (= r (inv@181@01 r)))
    (=
      (-
        (- $Perm.Write (pTaken@184@01 r u@172@01 v@173@01))
        (pTaken@185@01 r u@172@01 v@173@01))
      $Perm.No))
  
  :qid |quant-u-258|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@186@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r)))
    (=>
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@180@01 $Ref)) (!
  (=>
    (Set_in n@180@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@181@01 n@180@01) n@180@01) (img@182@01 n@180@01)))
  :pattern ((Set_in n@180@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@181@01 n@180@01))
  :pattern ((img@182@01 n@180@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@182@01 r) (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@181@01 r) r))
  :pattern ((inv@181@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r)))
    (=>
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) r) r))
    :pattern ((inv@181@01 r))
    :qid |quant-u-253|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 33 | !(u@172@01 in g0@78@01 && v@173@01 in g0@78@01 && exists_path[Bool]($$(sm@179@01, g0@78@01), u@172@01, v@173@01))]
(assert (not
  (and
    (Set_in u@172@01 g0@78@01)
    (and
      (Set_in v@173@01 g0@78@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@180@01 $Ref)) (!
  (=>
    (Set_in n@180@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@181@01 n@180@01) n@180@01) (img@182@01 n@180@01)))
  :pattern ((Set_in n@180@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@181@01 n@180@01))
  :pattern ((img@182@01 n@180@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@182@01 r) (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@181@01 r) r))
  :pattern ((inv@181@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r)))
    (=>
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert (=>
  (and
    (Set_in u@172@01 g0@78@01)
    (and
      (Set_in v@173@01 g0@78@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))
  (and
    (Set_in u@172@01 g0@78@01)
    (Set_in v@173@01 g0@78@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) r) r))
      :pattern ((inv@181@01 r))
      :qid |quant-u-253|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@172@01 g0@78@01)
      (and
        (Set_in v@173@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))))
  (and
    (Set_in u@172@01 g0@78@01)
    (and
      (Set_in v@173@01 g0@78@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@174@01 $Ref)) (!
  (=>
    (Set_in n@174@01 g0@78@01)
    (and (= (inv@175@01 n@174@01) n@174@01) (img@176@01 n@174@01)))
  :pattern ((Set_in n@174@01 g0@78@01))
  :pattern ((inv@175@01 n@174@01))
  :pattern ((img@176@01 n@174@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@176@01 r) (Set_in (inv@175@01 r) g0@78@01)) (= (inv@175@01 r) r))
  :pattern ((inv@175@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>)))
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r)))
    (=>
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@179@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@179@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@175@01 r) g0@78@01) (img@176@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@179@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@179@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@180@01 $Ref)) (!
  (=>
    (Set_in n@180@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@181@01 n@180@01) n@180@01) (img@182@01 n@180@01)))
  :pattern ((Set_in n@180@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@181@01 n@180@01))
  :pattern ((img@182@01 n@180@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@182@01 r) (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@181@01 r) r))
  :pattern ((inv@181@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r)))
    (=>
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@186@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01)) (img@182@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@186@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@186@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@172@01 $Ref) (v@173@01 $Ref)) (!
  (and
    (=>
      (Set_in u@172@01 g0@78@01)
      (and
        (Set_in u@172@01 g0@78@01)
        (=>
          (Set_in v@173@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@175@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
              :pattern ((inv@175@01 r))
              :qid |quant-u-248|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@173@01 g0@78@01) (not (Set_in v@173@01 g0@78@01)))))
    (or (Set_in u@172@01 g0@78@01) (not (Set_in u@172@01 g0@78@01)))
    (=>
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))
      (and
        (Set_in u@172@01 g0@78@01)
        (Set_in v@173@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) r) r))
          :pattern ((inv@181@01 r))
          :qid |quant-u-253|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@172@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))))
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))))
  :pattern ((Set_in u@172@01 g0@78@01) (Set_in v@173@01 g0@78@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@172@01 $Ref) (v@173@01 $Ref)) (!
  (and
    (=>
      (Set_in u@172@01 g0@78@01)
      (and
        (Set_in u@172@01 g0@78@01)
        (=>
          (Set_in v@173@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@175@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
              :pattern ((inv@175@01 r))
              :qid |quant-u-248|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@173@01 g0@78@01) (not (Set_in v@173@01 g0@78@01)))))
    (or (Set_in u@172@01 g0@78@01) (not (Set_in u@172@01 g0@78@01)))
    (=>
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))
      (and
        (Set_in u@172@01 g0@78@01)
        (Set_in v@173@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) r) r))
          :pattern ((inv@181@01 r))
          :qid |quant-u-253|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@172@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))))
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))))
  :pattern ((Set_in u@172@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@172@01 $Ref) (v@173@01 $Ref)) (!
  (and
    (=>
      (Set_in u@172@01 g0@78@01)
      (and
        (Set_in u@172@01 g0@78@01)
        (=>
          (Set_in v@173@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@175@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
              :pattern ((inv@175@01 r))
              :qid |quant-u-248|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@173@01 g0@78@01) (not (Set_in v@173@01 g0@78@01)))))
    (or (Set_in u@172@01 g0@78@01) (not (Set_in u@172@01 g0@78@01)))
    (=>
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))
      (and
        (Set_in u@172@01 g0@78@01)
        (Set_in v@173@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) r) r))
          :pattern ((inv@181@01 r))
          :qid |quant-u-253|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@172@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))))
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))))
  :pattern ((Set_in u@172@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@172@01 $Ref) (v@173@01 $Ref)) (!
  (and
    (=>
      (Set_in u@172@01 g0@78@01)
      (and
        (Set_in u@172@01 g0@78@01)
        (=>
          (Set_in v@173@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@175@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
              :pattern ((inv@175@01 r))
              :qid |quant-u-248|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@173@01 g0@78@01) (not (Set_in v@173@01 g0@78@01)))))
    (or (Set_in u@172@01 g0@78@01) (not (Set_in u@172@01 g0@78@01)))
    (=>
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))
      (and
        (Set_in u@172@01 g0@78@01)
        (Set_in v@173@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) r) r))
          :pattern ((inv@181@01 r))
          :qid |quant-u-253|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@172@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))))
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))))
  :pattern ((Set_in v@173@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@172@01 $Ref) (v@173@01 $Ref)) (!
  (and
    (=>
      (Set_in u@172@01 g0@78@01)
      (and
        (Set_in u@172@01 g0@78@01)
        (=>
          (Set_in v@173@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@175@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
              :pattern ((inv@175@01 r))
              :qid |quant-u-248|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@173@01 g0@78@01) (not (Set_in v@173@01 g0@78@01)))))
    (or (Set_in u@172@01 g0@78@01) (not (Set_in u@172@01 g0@78@01)))
    (=>
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))
      (and
        (Set_in u@172@01 g0@78@01)
        (Set_in v@173@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) r) r))
          :pattern ((inv@181@01 r))
          :qid |quant-u-253|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@172@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))))
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))))
  :pattern ((Set_in v@173@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@172@01 $Ref) (v@173@01 $Ref)) (!
  (and
    (=>
      (Set_in u@172@01 g0@78@01)
      (and
        (Set_in u@172@01 g0@78@01)
        (=>
          (Set_in v@173@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@175@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
              :pattern ((inv@175@01 r))
              :qid |quant-u-248|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@173@01 g0@78@01) (not (Set_in v@173@01 g0@78@01)))))
    (or (Set_in u@172@01 g0@78@01) (not (Set_in u@172@01 g0@78@01)))
    (=>
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))
      (and
        (Set_in u@172@01 g0@78@01)
        (Set_in v@173@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) r) r))
          :pattern ((inv@181@01 r))
          :qid |quant-u-253|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@172@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))))
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@172@01 $Ref) (v@173@01 $Ref)) (!
  (and
    (=>
      (Set_in u@172@01 g0@78@01)
      (and
        (Set_in u@172@01 g0@78@01)
        (=>
          (Set_in v@173@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@175@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@160@01  $FVF<next>) r) r))
              :pattern ((inv@175@01 r))
              :qid |quant-u-248|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@173@01 g0@78@01) (not (Set_in v@173@01 g0@78@01)))))
    (or (Set_in u@172@01 g0@78@01) (not (Set_in u@172@01 g0@78@01)))
    (=>
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))
      (and
        (Set_in u@172@01 g0@78@01)
        (Set_in v@173@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@181@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@183@01  $FVF<next>) r) r))
          :pattern ((inv@181@01 r))
          :qid |quant-u-253|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@172@01 g0@78@01)
          (and
            (Set_in v@173@01 g0@78@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))))
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117-aux|)))
(assert (forall ((u@172@01 $Ref) (v@173@01 $Ref)) (!
  (and
    (=>
      (and (Set_in u@172@01 g0@78@01) (Set_in v@173@01 g0@78@01))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01))
    (=>
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
  :pattern ((Set_in u@172@01 g0@78@01) (Set_in v@173@01 g0@78@01))
  :pattern ((Set_in u@172@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :pattern ((Set_in u@172@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :pattern ((Set_in v@173@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :pattern ((Set_in v@173@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117_precondition|)))
(push) ; 3
(assert (not (forall ((u@172@01 $Ref) (v@173@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (and (Set_in u@172@01 g0@78@01) (Set_in v@173@01 g0@78@01))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01))
        (=>
          (and
            (Set_in u@172@01 g0@78@01)
            (and
              (Set_in v@173@01 g0@78@01)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
      (and
        (Set_in u@172@01 g0@78@01)
        (and
          (Set_in v@173@01 g0@78@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :pattern ((Set_in u@172@01 g0@78@01) (Set_in v@173@01 g0@78@01))
  :pattern ((Set_in u@172@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :pattern ((Set_in u@172@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :pattern ((Set_in v@173@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :pattern ((Set_in v@173@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117|))))
(check-sat)
; unsat
(pop) ; 3
; 0,24s
; (get-info :all-statistics)
(assert (forall ((u@172@01 $Ref) (v@173@01 $Ref)) (!
  (=>
    (and
      (Set_in u@172@01 g0@78@01)
      (and
        (Set_in v@173@01 g0@78@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :pattern ((Set_in u@172@01 g0@78@01) (Set_in v@173@01 g0@78@01))
  :pattern ((Set_in u@172@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :pattern ((Set_in u@172@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :pattern ((Set_in v@173@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :pattern ((Set_in v@173@01 g0@78@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@179@01  $FVF<next>)) g0@78@01) u@172@01 v@173@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@186@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@172@01 v@173@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@380@13@380@117|)))
; [eval] (forall u: Ref, v: Ref :: { (u in g1), (v in g1) } { (u in g1), exists_path($$(g0), u, v) } { (u in g1), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$(g0), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@187@01 $Ref)
(declare-const v@188@01 $Ref)
(push) ; 3
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v))
; [eval] (u in g1)
(push) ; 4
; [then-branch: 34 | !(u@187@01 in g1@79@01) | live]
; [else-branch: 34 | u@187@01 in g1@79@01 | live]
(push) ; 5
; [then-branch: 34 | !(u@187@01 in g1@79@01)]
(assert (not (Set_in u@187@01 g1@79@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 34 | u@187@01 in g1@79@01]
(assert (Set_in u@187@01 g1@79@01))
; [eval] (v in g1)
(push) ; 6
; [then-branch: 35 | !(v@188@01 in g1@79@01) | live]
; [else-branch: 35 | v@188@01 in g1@79@01 | live]
(push) ; 7
; [then-branch: 35 | !(v@188@01 in g1@79@01)]
(assert (not (Set_in v@188@01 g1@79@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 35 | v@188@01 in g1@79@01]
(assert (Set_in v@188@01 g1@79@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@189@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@189@01 g0@78@01))
(pop) ; 9
(declare-fun inv@190@01 ($Ref) $Ref)
(declare-fun img@191@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@192@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@192@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@192@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@189@01 $Ref) (n2@189@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@189@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) n1@189@01) n1@189@01))
      (and
        (Set_in n2@189@01 g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) n2@189@01) n2@189@01))
      (= n1@189@01 n2@189@01))
    (= n1@189@01 n2@189@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@189@01 $Ref)) (!
  (=>
    (Set_in n@189@01 g0@78@01)
    (and (= (inv@190@01 n@189@01) n@189@01) (img@191@01 n@189@01)))
  :pattern ((Set_in n@189@01 g0@78@01))
  :pattern ((inv@190@01 n@189@01))
  :pattern ((img@191@01 n@189@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@191@01 r) (Set_in (inv@190@01 r) g0@78@01)) (= (inv@190@01 r) r))
  :pattern ((inv@190@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@190@01 r) g0@78@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) r) r))
  :pattern ((inv@190@01 r))
  :qid |quant-u-260|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@193@01 ((r $Ref) (u@187@01 $Ref) (v@188@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r) (= r (inv@190@01 r)))
    ($Perm.min
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@194@01 ((r $Ref) (u@187@01 $Ref) (v@188@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r) (= r (inv@190@01 r)))
    ($Perm.min
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@193@01 r u@187@01 v@188@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      (pTaken@193@01 r u@187@01 v@188@01))
    $Perm.No)
  
  :qid |quant-u-262|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r) (= r (inv@190@01 r)))
    (= (- $Perm.Write (pTaken@193@01 r u@187@01 v@188@01)) $Perm.No))
  
  :qid |quant-u-263|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@195@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r)))
    (=>
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@192@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@192@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@189@01 $Ref)) (!
  (=>
    (Set_in n@189@01 g0@78@01)
    (and (= (inv@190@01 n@189@01) n@189@01) (img@191@01 n@189@01)))
  :pattern ((Set_in n@189@01 g0@78@01))
  :pattern ((inv@190@01 n@189@01))
  :pattern ((img@191@01 n@189@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@191@01 r) (Set_in (inv@190@01 r) g0@78@01)) (= (inv@190@01 r) r))
  :pattern ((inv@190@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r)))
    (=>
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@190@01 r) g0@78@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) r) r))
    :pattern ((inv@190@01 r))
    :qid |quant-u-260|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@192@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@192@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@189@01 $Ref)) (!
  (=>
    (Set_in n@189@01 g0@78@01)
    (and (= (inv@190@01 n@189@01) n@189@01) (img@191@01 n@189@01)))
  :pattern ((Set_in n@189@01 g0@78@01))
  :pattern ((inv@190@01 n@189@01))
  :pattern ((img@191@01 n@189@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@191@01 r) (Set_in (inv@190@01 r) g0@78@01)) (= (inv@190@01 r) r))
  :pattern ((inv@190@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r)))
    (=>
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (=>
  (Set_in v@188@01 g1@79@01)
  (and
    (Set_in v@188@01 g1@79@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@190@01 r) g0@78@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) r) r))
      :pattern ((inv@190@01 r))
      :qid |quant-u-260|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01))))
(assert (or (Set_in v@188@01 g1@79@01) (not (Set_in v@188@01 g1@79@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@192@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@192@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@189@01 $Ref)) (!
  (=>
    (Set_in n@189@01 g0@78@01)
    (and (= (inv@190@01 n@189@01) n@189@01) (img@191@01 n@189@01)))
  :pattern ((Set_in n@189@01 g0@78@01))
  :pattern ((inv@190@01 n@189@01))
  :pattern ((img@191@01 n@189@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@191@01 r) (Set_in (inv@190@01 r) g0@78@01)) (= (inv@190@01 r) r))
  :pattern ((inv@190@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r)))
    (=>
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (=>
  (Set_in u@187@01 g1@79@01)
  (and
    (Set_in u@187@01 g1@79@01)
    (=>
      (Set_in v@188@01 g1@79@01)
      (and
        (Set_in v@188@01 g1@79@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@190@01 r) g0@78@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) r) r))
          :pattern ((inv@190@01 r))
          :qid |quant-u-260|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01)))
    (or (Set_in v@188@01 g1@79@01) (not (Set_in v@188@01 g1@79@01))))))
(assert (or (Set_in u@187@01 g1@79@01) (not (Set_in u@187@01 g1@79@01))))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 36 | u@187@01 in g1@79@01 && v@188@01 in g1@79@01 && exists_path[Bool]($$(sm@195@01, g0@78@01), u@187@01, v@188@01) | live]
; [else-branch: 36 | !(u@187@01 in g1@79@01 && v@188@01 in g1@79@01 && exists_path[Bool]($$(sm@195@01, g0@78@01), u@187@01, v@188@01)) | live]
(push) ; 5
; [then-branch: 36 | u@187@01 in g1@79@01 && v@188@01 in g1@79@01 && exists_path[Bool]($$(sm@195@01, g0@78@01), u@187@01, v@188@01)]
(assert (and
  (Set_in u@187@01 g1@79@01)
  (and
    (Set_in v@188@01 g1@79@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@196@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@196@01 (Set_union g0@78@01 g1@79@01)))
(pop) ; 7
(declare-fun inv@197@01 ($Ref) $Ref)
(declare-fun img@198@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@199@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@196@01 $Ref) (n2@196@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@196@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) n1@196@01) n1@196@01))
      (and
        (Set_in n2@196@01 (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) n2@196@01) n2@196@01))
      (= n1@196@01 n2@196@01))
    (= n1@196@01 n2@196@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@196@01 $Ref)) (!
  (=>
    (Set_in n@196@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@197@01 n@196@01) n@196@01) (img@198@01 n@196@01)))
  :pattern ((Set_in n@196@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@197@01 n@196@01))
  :pattern ((img@198@01 n@196@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@198@01 r) (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@197@01 r) r))
  :pattern ((inv@197@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
  :pattern ((inv@197@01 r))
  :qid |quant-u-265|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@200@01 ((r $Ref) (u@187@01 $Ref) (v@188@01 $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
      (img@198@01 r)
      (= r (inv@197@01 r)))
    ($Perm.min
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@201@01 ((r $Ref) (u@187@01 $Ref) (v@188@01 $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
      (img@198@01 r)
      (= r (inv@197@01 r)))
    ($Perm.min
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@200@01 r u@187@01 v@188@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
        $Perm.Write
        $Perm.No)
      (pTaken@200@01 r u@187@01 v@188@01))
    $Perm.No)
  
  :qid |quant-u-267|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
      (img@198@01 r)
      (= r (inv@197@01 r)))
    (= (- $Perm.Write (pTaken@200@01 r u@187@01 v@188@01)) $Perm.No))
  
  :qid |quant-u-268|))))
(check-sat)
; unknown
(pop) ; 7
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
        $Perm.Write
        $Perm.No)
      (pTaken@201@01 r u@187@01 v@188@01))
    $Perm.No)
  
  :qid |quant-u-269|))))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
      (img@198@01 r)
      (= r (inv@197@01 r)))
    (=
      (-
        (- $Perm.Write (pTaken@200@01 r u@187@01 v@188@01))
        (pTaken@201@01 r u@187@01 v@188@01))
      $Perm.No))
  
  :qid |quant-u-270|))))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@202@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r)))
    (=>
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@196@01 $Ref)) (!
  (=>
    (Set_in n@196@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@197@01 n@196@01) n@196@01) (img@198@01 n@196@01)))
  :pattern ((Set_in n@196@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@197@01 n@196@01))
  :pattern ((img@198@01 n@196@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@198@01 r) (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@197@01 r) r))
  :pattern ((inv@197@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r)))
    (=>
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
    :pattern ((inv@197@01 r))
    :qid |quant-u-265|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 36 | !(u@187@01 in g1@79@01 && v@188@01 in g1@79@01 && exists_path[Bool]($$(sm@195@01, g0@78@01), u@187@01, v@188@01))]
(assert (not
  (and
    (Set_in u@187@01 g1@79@01)
    (and
      (Set_in v@188@01 g1@79@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@196@01 $Ref)) (!
  (=>
    (Set_in n@196@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@197@01 n@196@01) n@196@01) (img@198@01 n@196@01)))
  :pattern ((Set_in n@196@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@197@01 n@196@01))
  :pattern ((img@198@01 n@196@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@198@01 r) (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@197@01 r) r))
  :pattern ((inv@197@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r)))
    (=>
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (=>
  (and
    (Set_in u@187@01 g1@79@01)
    (and
      (Set_in v@188@01 g1@79@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))
  (and
    (Set_in u@187@01 g1@79@01)
    (Set_in v@188@01 g1@79@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
      :pattern ((inv@197@01 r))
      :qid |quant-u-265|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@187@01 g1@79@01)
      (and
        (Set_in v@188@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))))
  (and
    (Set_in u@187@01 g1@79@01)
    (and
      (Set_in v@188@01 g1@79@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@192@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@192@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@192@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@189@01 $Ref)) (!
  (=>
    (Set_in n@189@01 g0@78@01)
    (and (= (inv@190@01 n@189@01) n@189@01) (img@191@01 n@189@01)))
  :pattern ((Set_in n@189@01 g0@78@01))
  :pattern ((inv@190@01 n@189@01))
  :pattern ((img@191@01 n@189@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@191@01 r) (Set_in (inv@190@01 r) g0@78@01)) (= (inv@190@01 r) r))
  :pattern ((inv@190@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r)))
    (=>
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@195@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@190@01 r) g0@78@01) (img@191@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01))
    (=
      ($FVF.lookup_next (as sm@199@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@199@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@196@01 $Ref)) (!
  (=>
    (Set_in n@196@01 (Set_union g0@78@01 g1@79@01))
    (and (= (inv@197@01 n@196@01) n@196@01) (img@198@01 n@196@01)))
  :pattern ((Set_in n@196@01 (Set_union g0@78@01 g1@79@01)))
  :pattern ((inv@197@01 n@196@01))
  :pattern ((img@198@01 n@196@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@198@01 r) (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)))
    (= (inv@197@01 r) r))
  :pattern ((inv@197@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r)))
    (=>
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) g0@78@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01)) (img@198@01 r))
      (and (img@89@01 r) (Set_in (inv@88@01 r) g1@79@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@187@01 $Ref) (v@188@01 $Ref)) (!
  (and
    (=>
      (Set_in u@187@01 g1@79@01)
      (and
        (Set_in u@187@01 g1@79@01)
        (=>
          (Set_in v@188@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@190@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) r) r))
              :pattern ((inv@190@01 r))
              :qid |quant-u-260|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@188@01 g1@79@01) (not (Set_in v@188@01 g1@79@01)))))
    (or (Set_in u@187@01 g1@79@01) (not (Set_in u@187@01 g1@79@01)))
    (=>
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))
      (and
        (Set_in u@187@01 g1@79@01)
        (Set_in v@188@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
          :pattern ((inv@197@01 r))
          :qid |quant-u-265|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@187@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))))
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))))
  :pattern ((Set_in u@187@01 g1@79@01) (Set_in v@188@01 g1@79@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@187@01 $Ref) (v@188@01 $Ref)) (!
  (and
    (=>
      (Set_in u@187@01 g1@79@01)
      (and
        (Set_in u@187@01 g1@79@01)
        (=>
          (Set_in v@188@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@190@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) r) r))
              :pattern ((inv@190@01 r))
              :qid |quant-u-260|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@188@01 g1@79@01) (not (Set_in v@188@01 g1@79@01)))))
    (or (Set_in u@187@01 g1@79@01) (not (Set_in u@187@01 g1@79@01)))
    (=>
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))
      (and
        (Set_in u@187@01 g1@79@01)
        (Set_in v@188@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
          :pattern ((inv@197@01 r))
          :qid |quant-u-265|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@187@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))))
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))))
  :pattern ((Set_in u@187@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@187@01 $Ref) (v@188@01 $Ref)) (!
  (and
    (=>
      (Set_in u@187@01 g1@79@01)
      (and
        (Set_in u@187@01 g1@79@01)
        (=>
          (Set_in v@188@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@190@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) r) r))
              :pattern ((inv@190@01 r))
              :qid |quant-u-260|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@188@01 g1@79@01) (not (Set_in v@188@01 g1@79@01)))))
    (or (Set_in u@187@01 g1@79@01) (not (Set_in u@187@01 g1@79@01)))
    (=>
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))
      (and
        (Set_in u@187@01 g1@79@01)
        (Set_in v@188@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
          :pattern ((inv@197@01 r))
          :qid |quant-u-265|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@187@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))))
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))))
  :pattern ((Set_in u@187@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@187@01 $Ref) (v@188@01 $Ref)) (!
  (and
    (=>
      (Set_in u@187@01 g1@79@01)
      (and
        (Set_in u@187@01 g1@79@01)
        (=>
          (Set_in v@188@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@190@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) r) r))
              :pattern ((inv@190@01 r))
              :qid |quant-u-260|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@188@01 g1@79@01) (not (Set_in v@188@01 g1@79@01)))))
    (or (Set_in u@187@01 g1@79@01) (not (Set_in u@187@01 g1@79@01)))
    (=>
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))
      (and
        (Set_in u@187@01 g1@79@01)
        (Set_in v@188@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
          :pattern ((inv@197@01 r))
          :qid |quant-u-265|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@187@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))))
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))))
  :pattern ((Set_in v@188@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@187@01 $Ref) (v@188@01 $Ref)) (!
  (and
    (=>
      (Set_in u@187@01 g1@79@01)
      (and
        (Set_in u@187@01 g1@79@01)
        (=>
          (Set_in v@188@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@190@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) r) r))
              :pattern ((inv@190@01 r))
              :qid |quant-u-260|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@188@01 g1@79@01) (not (Set_in v@188@01 g1@79@01)))))
    (or (Set_in u@187@01 g1@79@01) (not (Set_in u@187@01 g1@79@01)))
    (=>
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))
      (and
        (Set_in u@187@01 g1@79@01)
        (Set_in v@188@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
          :pattern ((inv@197@01 r))
          :qid |quant-u-265|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@187@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))))
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))))
  :pattern ((Set_in v@188@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@187@01 $Ref) (v@188@01 $Ref)) (!
  (and
    (=>
      (Set_in u@187@01 g1@79@01)
      (and
        (Set_in u@187@01 g1@79@01)
        (=>
          (Set_in v@188@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@190@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) r) r))
              :pattern ((inv@190@01 r))
              :qid |quant-u-260|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@188@01 g1@79@01) (not (Set_in v@188@01 g1@79@01)))))
    (or (Set_in u@187@01 g1@79@01) (not (Set_in u@187@01 g1@79@01)))
    (=>
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))
      (and
        (Set_in u@187@01 g1@79@01)
        (Set_in v@188@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
          :pattern ((inv@197@01 r))
          :qid |quant-u-265|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@187@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))))
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@187@01 $Ref) (v@188@01 $Ref)) (!
  (and
    (=>
      (Set_in u@187@01 g1@79@01)
      (and
        (Set_in u@187@01 g1@79@01)
        (=>
          (Set_in v@188@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@190@01 r) g0@78@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@192@01  $FVF<next>) r) r))
              :pattern ((inv@190@01 r))
              :qid |quant-u-260|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01)))
        (or (Set_in v@188@01 g1@79@01) (not (Set_in v@188@01 g1@79@01)))))
    (or (Set_in u@187@01 g1@79@01) (not (Set_in u@187@01 g1@79@01)))
    (=>
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))
      (and
        (Set_in u@187@01 g1@79@01)
        (Set_in v@188@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@197@01 r) (Set_union g0@78@01 g1@79@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@199@01  $FVF<next>) r) r))
          :pattern ((inv@197@01 r))
          :qid |quant-u-265|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
    (or
      (not
        (and
          (Set_in u@187@01 g1@79@01)
          (and
            (Set_in v@188@01 g1@79@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))))
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117-aux|)))
(assert (forall ((u@187@01 $Ref) (v@188@01 $Ref)) (!
  (and
    (=>
      (and (Set_in u@187@01 g1@79@01) (Set_in v@188@01 g1@79@01))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01))
    (=>
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
  :pattern ((Set_in u@187@01 g1@79@01) (Set_in v@188@01 g1@79@01))
  :pattern ((Set_in u@187@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :pattern ((Set_in u@187@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :pattern ((Set_in v@188@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :pattern ((Set_in v@188@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117_precondition|)))
(push) ; 3
(assert (not (forall ((u@187@01 $Ref) (v@188@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (and (Set_in u@187@01 g1@79@01) (Set_in v@188@01 g1@79@01))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01))
        (=>
          (and
            (Set_in u@187@01 g1@79@01)
            (and
              (Set_in v@188@01 g1@79@01)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01))))
      (and
        (Set_in u@187@01 g1@79@01)
        (and
          (Set_in v@188@01 g1@79@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :pattern ((Set_in u@187@01 g1@79@01) (Set_in v@188@01 g1@79@01))
  :pattern ((Set_in u@187@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :pattern ((Set_in u@187@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :pattern ((Set_in v@188@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :pattern ((Set_in v@188@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((u@187@01 $Ref) (v@188@01 $Ref)) (!
  (=>
    (and
      (Set_in u@187@01 g1@79@01)
      (and
        (Set_in v@188@01 g1@79@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :pattern ((Set_in u@187@01 g1@79@01) (Set_in v@188@01 g1@79@01))
  :pattern ((Set_in u@187@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :pattern ((Set_in u@187@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :pattern ((Set_in v@188@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :pattern ((Set_in v@188@01 g1@79@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@195@01  $FVF<next>)) g0@78@01) u@187@01 v@188@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) (Set_union g0@78@01 g1@79@01)) u@187@01 v@188@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@381@13@381@117|)))
(pop) ; 2
(pop) ; 1
; ---------- test_framing_sets ----------
(declare-const g0@203@01 Set<$Ref>)
(declare-const g1@204@01 Set<$Ref>)
(declare-const x0@205@01 $Ref)
(declare-const y0@206@01 $Ref)
(declare-const x1@207@01 $Ref)
(declare-const y1@208@01 $Ref)
(declare-const x@209@01 $Ref)
(declare-const g0@210@01 Set<$Ref>)
(declare-const g1@211@01 Set<$Ref>)
(declare-const x0@212@01 $Ref)
(declare-const y0@213@01 $Ref)
(declare-const x1@214@01 $Ref)
(declare-const y1@215@01 $Ref)
(declare-const x@216@01 $Ref)
(push) ; 1
(declare-const $t@217@01 $Snap)
(assert (= $t@217@01 ($Snap.combine ($Snap.first $t@217@01) ($Snap.second $t@217@01))))
(assert (= ($Snap.first $t@217@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@210@01)))
(assert (=
  ($Snap.second $t@217@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@217@01))
    ($Snap.second ($Snap.second $t@217@01)))))
(declare-const n@218@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@218@01 g0@210@01))
(declare-const sm@219@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@220@01 ($Ref) $Ref)
(declare-fun img@221@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@218@01 $Ref) (n2@218@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@218@01 g0@210@01)
      (Set_in n2@218@01 g0@210@01)
      (= n1@218@01 n2@218@01))
    (= n1@218@01 n2@218@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g0@210@01)
    (and (= (inv@220@01 n@218@01) n@218@01) (img@221@01 n@218@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) n@218@01) n@218@01))
  :qid |quant-u-272|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (= (inv@220@01 r) r))
  :pattern ((inv@220@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@218@01 $Ref)) (!
  (=> (Set_in n@218@01 g0@210@01) (not (= n@218@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) n@218@01) n@218@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@222@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@220@01 r) g0@210@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) r) r))
  :pattern ((inv@220@01 r))
  :qid |quant-u-273|)))
(assert (=
  ($Snap.second ($Snap.second $t@217@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@217@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@217@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@223@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 37 | !(n$0@223@01 in g0@210@01) | live]
; [else-branch: 37 | n$0@223@01 in g0@210@01 | live]
(push) ; 4
; [then-branch: 37 | !(n$0@223@01 in g0@210@01)]
(assert (not (Set_in n$0@223@01 g0@210@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 37 | n$0@223@01 in g0@210@01]
(assert (Set_in n$0@223@01 g0@210@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
      (=
        ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
    :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
    :qid |qp.fvfValDef133|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef134|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) n$0@223@01))
(push) ; 5
(assert (not (and (img@221@01 n$0@223@01) (Set_in (inv@220@01 n$0@223@01) g0@210@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (=>
  (Set_in n$0@223@01 g0@210@01)
  (and
    (Set_in n$0@223@01 g0@210@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) n$0@223@01))))
(assert (or (Set_in n$0@223@01 g0@210@01) (not (Set_in n$0@223@01 g0@210@01))))
(push) ; 3
; [then-branch: 38 | n$0@223@01 in g0@210@01 && Lookup(next, sm@222@01, n$0@223@01) != Null | live]
; [else-branch: 38 | !(n$0@223@01 in g0@210@01 && Lookup(next, sm@222@01, n$0@223@01) != Null) | live]
(push) ; 4
; [then-branch: 38 | n$0@223@01 in g0@210@01 && Lookup(next, sm@222@01, n$0@223@01) != Null]
(assert (and
  (Set_in n$0@223@01 g0@210@01)
  (not (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
      (=
        ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
    :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
    :qid |qp.fvfValDef133|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef134|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) n$0@223@01))
(push) ; 5
(assert (not (and (img@221@01 n$0@223@01) (Set_in (inv@220@01 n$0@223@01) g0@210@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 38 | !(n$0@223@01 in g0@210@01 && Lookup(next, sm@222@01, n$0@223@01) != Null)]
(assert (not
  (and
    (Set_in n$0@223@01 g0@210@01)
    (not (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (=>
  (and
    (Set_in n$0@223@01 g0@210@01)
    (not (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null)))
  (and
    (Set_in n$0@223@01 g0@210@01)
    (not (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) n$0@223@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@223@01 g0@210@01)
      (not
        (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null))))
  (and
    (Set_in n$0@223@01 g0@210@01)
    (not (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@223@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@223@01 g0@210@01)
      (and
        (Set_in n$0@223@01 g0@210@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) n$0@223@01)))
    (or (Set_in n$0@223@01 g0@210@01) (not (Set_in n$0@223@01 g0@210@01)))
    (=>
      (and
        (Set_in n$0@223@01 g0@210@01)
        (not
          (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null)))
      (and
        (Set_in n$0@223@01 g0@210@01)
        (not
          (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) n$0@223@01)))
    (or
      (not
        (and
          (Set_in n$0@223@01 g0@210@01)
          (not
            (=
              ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01)
              $Ref.null))))
      (and
        (Set_in n$0@223@01 g0@210@01)
        (not
          (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) g0@210@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@393@14@393@23-aux|)))
(assert (forall ((n$0@223@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@223@01 g0@210@01)
      (and
        (Set_in n$0@223@01 g0@210@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) n$0@223@01)))
    (or (Set_in n$0@223@01 g0@210@01) (not (Set_in n$0@223@01 g0@210@01)))
    (=>
      (and
        (Set_in n$0@223@01 g0@210@01)
        (not
          (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null)))
      (and
        (Set_in n$0@223@01 g0@210@01)
        (not
          (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) n$0@223@01)))
    (or
      (not
        (and
          (Set_in n$0@223@01 g0@210@01)
          (not
            (=
              ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01)
              $Ref.null))))
      (and
        (Set_in n$0@223@01 g0@210@01)
        (not
          (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null)))))
  :pattern ((Set_in n$0@223@01 g0@210@01) ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) n$0@223@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@393@14@393@23-aux|)))
(assert (forall ((n$0@223@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@223@01 g0@210@01)
      (not
        (= ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) g0@210@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) g0@210@01))
  :pattern ((Set_in n$0@223@01 g0@210@01) ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n$0@223@01) n$0@223@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@393@14@393@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@217@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@217@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@211@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))
(declare-const n$1@224@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@224@01 g1@211@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@225@01 ($Ref) $Ref)
(declare-fun img@226@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@224@01 $Ref) (n$12@224@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@224@01 g1@211@01)
      (Set_in n$12@224@01 g1@211@01)
      (= n$11@224@01 n$12@224@01))
    (= n$11@224@01 n$12@224@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@224@01 $Ref)) (!
  (=>
    (Set_in n$1@224@01 g1@211@01)
    (and (= (inv@225@01 n$1@224@01) n$1@224@01) (img@226@01 n$1@224@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) n$1@224@01) n$1@224@01))
  :qid |quant-u-275|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (= (inv@225@01 r) r))
  :pattern ((inv@225@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@224@01 $Ref)) (!
  (=> (Set_in n$1@224@01 g1@211@01) (not (= n$1@224@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) n$1@224@01) n$1@224@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@224@01 n@218@01)
    (=
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))))
  
  :qid |quant-u-276|))))
(check-sat)
; unknown
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(declare-const sm@227@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@225@01 r) g1@211@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) r) r))
  :pattern ((inv@225@01 r))
  :qid |quant-u-277|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@228@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 39 | !(n$2@228@01 in g1@211@01) | live]
; [else-branch: 39 | n$2@228@01 in g1@211@01 | live]
(push) ; 4
; [then-branch: 39 | !(n$2@228@01 in g1@211@01)]
(assert (not (Set_in n$2@228@01 g1@211@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 39 | n$2@228@01 in g1@211@01]
(assert (Set_in n$2@228@01 g1@211@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
      (=
        ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
    :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
    :qid |qp.fvfValDef135|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
      (=
        ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
    :qid |qp.fvfValDef136|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef137|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) n$2@228@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@221@01 n$2@228@01) (Set_in (inv@220@01 n$2@228@01) g0@210@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@226@01 n$2@228@01) (Set_in (inv@225@01 n$2@228@01) g1@211@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (=>
  (Set_in n$2@228@01 g1@211@01)
  (and
    (Set_in n$2@228@01 g1@211@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) n$2@228@01))))
(assert (or (Set_in n$2@228@01 g1@211@01) (not (Set_in n$2@228@01 g1@211@01))))
(push) ; 3
; [then-branch: 40 | n$2@228@01 in g1@211@01 && Lookup(next, sm@227@01, n$2@228@01) != Null | live]
; [else-branch: 40 | !(n$2@228@01 in g1@211@01 && Lookup(next, sm@227@01, n$2@228@01) != Null) | live]
(push) ; 4
; [then-branch: 40 | n$2@228@01 in g1@211@01 && Lookup(next, sm@227@01, n$2@228@01) != Null]
(assert (and
  (Set_in n$2@228@01 g1@211@01)
  (not (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
      (=
        ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
    :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
    :qid |qp.fvfValDef135|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
      (=
        ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
    :qid |qp.fvfValDef136|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef137|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) n$2@228@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@221@01 n$2@228@01) (Set_in (inv@220@01 n$2@228@01) g0@210@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@226@01 n$2@228@01) (Set_in (inv@225@01 n$2@228@01) g1@211@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 40 | !(n$2@228@01 in g1@211@01 && Lookup(next, sm@227@01, n$2@228@01) != Null)]
(assert (not
  (and
    (Set_in n$2@228@01 g1@211@01)
    (not (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (=>
  (and
    (Set_in n$2@228@01 g1@211@01)
    (not (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null)))
  (and
    (Set_in n$2@228@01 g1@211@01)
    (not (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) n$2@228@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@228@01 g1@211@01)
      (not
        (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null))))
  (and
    (Set_in n$2@228@01 g1@211@01)
    (not (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@227@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@227@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@228@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@228@01 g1@211@01)
      (and
        (Set_in n$2@228@01 g1@211@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) n$2@228@01)))
    (or (Set_in n$2@228@01 g1@211@01) (not (Set_in n$2@228@01 g1@211@01)))
    (=>
      (and
        (Set_in n$2@228@01 g1@211@01)
        (not
          (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null)))
      (and
        (Set_in n$2@228@01 g1@211@01)
        (not
          (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) n$2@228@01)))
    (or
      (not
        (and
          (Set_in n$2@228@01 g1@211@01)
          (not
            (=
              ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01)
              $Ref.null))))
      (and
        (Set_in n$2@228@01 g1@211@01)
        (not
          (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) g1@211@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@394@14@394@23-aux|)))
(assert (forall ((n$2@228@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@228@01 g1@211@01)
      (and
        (Set_in n$2@228@01 g1@211@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) n$2@228@01)))
    (or (Set_in n$2@228@01 g1@211@01) (not (Set_in n$2@228@01 g1@211@01)))
    (=>
      (and
        (Set_in n$2@228@01 g1@211@01)
        (not
          (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null)))
      (and
        (Set_in n$2@228@01 g1@211@01)
        (not
          (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) n$2@228@01)))
    (or
      (not
        (and
          (Set_in n$2@228@01 g1@211@01)
          (not
            (=
              ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01)
              $Ref.null))))
      (and
        (Set_in n$2@228@01 g1@211@01)
        (not
          (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null)))))
  :pattern ((Set_in n$2@228@01 g1@211@01) ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) n$2@228@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@394@14@394@23-aux|)))
(assert (forall ((n$2@228@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@228@01 g1@211@01)
      (not
        (= ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) g1@211@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) g1@211@01))
  :pattern ((Set_in n$2@228@01 g1@211@01) ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n$2@228@01) n$2@228@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@394@14@394@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))
  $Snap.unit))
; [eval] (x0 in g0)
(assert (Set_in x0@212@01 g0@210@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))
  $Snap.unit))
; [eval] (y0 in g0)
(assert (Set_in y0@213@01 g0@210@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))
  $Snap.unit))
; [eval] (x1 in g1)
(assert (Set_in x1@214@01 g1@211@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))))
  $Snap.unit))
; [eval] (y1 in g1)
(assert (Set_in y1@215@01 g1@211@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in g0), (r in g1) } (r in g0) ==> !((r in g1)))
(declare-const r@229@01 $Ref)
(push) ; 2
; [eval] (r in g0) ==> !((r in g1))
; [eval] (r in g0)
(push) ; 3
; [then-branch: 41 | r@229@01 in g0@210@01 | live]
; [else-branch: 41 | !(r@229@01 in g0@210@01) | live]
(push) ; 4
; [then-branch: 41 | r@229@01 in g0@210@01]
(assert (Set_in r@229@01 g0@210@01))
; [eval] !((r in g1))
; [eval] (r in g1)
(pop) ; 4
(push) ; 4
; [else-branch: 41 | !(r@229@01 in g0@210@01)]
(assert (not (Set_in r@229@01 g0@210@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r@229@01 g0@210@01)) (Set_in r@229@01 g0@210@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@229@01 $Ref)) (!
  (or (not (Set_in r@229@01 g0@210@01)) (Set_in r@229@01 g0@210@01))
  :pattern ((Set_in r@229@01 g0@210@01) (Set_in r@229@01 g1@211@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@397@14@397@34-aux|)))
(assert (forall ((r@229@01 $Ref)) (!
  (=> (Set_in r@229@01 g0@210@01) (not (Set_in r@229@01 g1@211@01)))
  :pattern ((Set_in r@229@01 g0@210@01) (Set_in r@229@01 g1@211@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@397@14@397@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))))))
  $Snap.unit))
; [eval] (forall r$0: Ref :: { (r$0 in g0), (r$0 in g1) } (r$0 in g1) ==> !((r$0 in g0)))
(declare-const r$0@230@01 $Ref)
(push) ; 2
; [eval] (r$0 in g1) ==> !((r$0 in g0))
; [eval] (r$0 in g1)
(push) ; 3
; [then-branch: 42 | r$0@230@01 in g1@211@01 | live]
; [else-branch: 42 | !(r$0@230@01 in g1@211@01) | live]
(push) ; 4
; [then-branch: 42 | r$0@230@01 in g1@211@01]
(assert (Set_in r$0@230@01 g1@211@01))
; [eval] !((r$0 in g0))
; [eval] (r$0 in g0)
(pop) ; 4
(push) ; 4
; [else-branch: 42 | !(r$0@230@01 in g1@211@01)]
(assert (not (Set_in r$0@230@01 g1@211@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$0@230@01 g1@211@01)) (Set_in r$0@230@01 g1@211@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$0@230@01 $Ref)) (!
  (or (not (Set_in r$0@230@01 g1@211@01)) (Set_in r$0@230@01 g1@211@01))
  :pattern ((Set_in r$0@230@01 g0@210@01) (Set_in r$0@230@01 g1@211@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@397@14@397@34-aux|)))
(assert (forall ((r$0@230@01 $Ref)) (!
  (=> (Set_in r$0@230@01 g1@211@01) (not (Set_in r$0@230@01 g0@210@01)))
  :pattern ((Set_in r$0@230@01 g0@210@01) (Set_in r$0@230@01 g1@211@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@397@14@397@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))))))
  $Snap.unit))
; [eval] exists_path($$(g0), x0, y0)
; [eval] $$(g0)
(push) ; 2
(declare-const n@231@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@231@01 g0@210@01))
(pop) ; 3
(declare-fun inv@232@01 ($Ref) $Ref)
(declare-fun img@233@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@231@01 $Ref) (n2@231@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@231@01 g0@210@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n1@231@01) n1@231@01))
      (and
        (Set_in n2@231@01 g0@210@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) n2@231@01) n2@231@01))
      (= n1@231@01 n2@231@01))
    (= n1@231@01 n2@231@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@231@01 $Ref)) (!
  (=>
    (Set_in n@231@01 g0@210@01)
    (and (= (inv@232@01 n@231@01) n@231@01) (img@233@01 n@231@01)))
  :pattern ((Set_in n@231@01 g0@210@01))
  :pattern ((inv@232@01 n@231@01))
  :pattern ((img@233@01 n@231@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@233@01 r) (Set_in (inv@232@01 r) g0@210@01))
    (= (inv@232@01 r) r))
  :pattern ((inv@232@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@232@01 r) g0@210@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) r) r))
  :pattern ((inv@232@01 r))
  :qid |quant-u-279|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@234@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@232@01 r) g0@210@01) (img@233@01 r) (= r (inv@232@01 r)))
    ($Perm.min
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@235@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@232@01 r) g0@210@01) (img@233@01 r) (= r (inv@232@01 r)))
    ($Perm.min
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@234@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      (pTaken@234@01 r))
    $Perm.No)
  
  :qid |quant-u-281|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@232@01 r) g0@210@01) (img@233@01 r) (= r (inv@232@01 r)))
    (= (- $Perm.Write (pTaken@234@01 r)) $Perm.No))
  
  :qid |quant-u-282|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@236@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>)))
      (and (Set_in (inv@232@01 r) g0@210@01) (img@233@01 r)))
    (=>
      (and (Set_in (inv@232@01 r) g0@210@01) (img@233@01 r))
      (Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>))))
  :qid |qp.fvfDomDef141|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@232@01 r) g0@210@01) (img@233@01 r))
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@232@01 r) g0@210@01) (img@233@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef140|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@236@01  $FVF<next>)) g0@210@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@231@01 $Ref)) (!
  (=>
    (Set_in n@231@01 g0@210@01)
    (and (= (inv@232@01 n@231@01) n@231@01) (img@233@01 n@231@01)))
  :pattern ((Set_in n@231@01 g0@210@01))
  :pattern ((inv@232@01 n@231@01))
  :pattern ((img@233@01 n@231@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@233@01 r) (Set_in (inv@232@01 r) g0@210@01))
    (= (inv@232@01 r) r))
  :pattern ((inv@232@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>)))
      (and (Set_in (inv@232@01 r) g0@210@01) (img@233@01 r)))
    (=>
      (and (Set_in (inv@232@01 r) g0@210@01) (img@233@01 r))
      (Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@236@01  $FVF<next>))))
  :qid |qp.fvfDomDef141|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@232@01 r) g0@210@01) (img@233@01 r))
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@232@01 r) g0@210@01) (img@233@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef140|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@232@01 r) g0@210@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@227@01  $FVF<next>) r) r))
    :pattern ((inv@232@01 r))
    :qid |quant-u-279|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@236@01  $FVF<next>)) g0@210@01)))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@236@01  $FVF<next>)) g0@210@01) x0@212@01 y0@213@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))))))))))
  $Snap.unit))
; [eval] exists_path($$(g1), x1, y1)
; [eval] $$(g1)
(set-option :timeout 0)
(push) ; 2
(declare-const n@237@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@237@01 g1@211@01))
(pop) ; 3
(declare-fun inv@238@01 ($Ref) $Ref)
(declare-fun img@239@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@240@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@240@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@240@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@237@01 $Ref) (n2@237@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@237@01 g1@211@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@240@01  $FVF<next>) n1@237@01) n1@237@01))
      (and
        (Set_in n2@237@01 g1@211@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@240@01  $FVF<next>) n2@237@01) n2@237@01))
      (= n1@237@01 n2@237@01))
    (= n1@237@01 n2@237@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@237@01 $Ref)) (!
  (=>
    (Set_in n@237@01 g1@211@01)
    (and (= (inv@238@01 n@237@01) n@237@01) (img@239@01 n@237@01)))
  :pattern ((Set_in n@237@01 g1@211@01))
  :pattern ((inv@238@01 n@237@01))
  :pattern ((img@239@01 n@237@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@239@01 r) (Set_in (inv@238@01 r) g1@211@01))
    (= (inv@238@01 r) r))
  :pattern ((inv@238@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@238@01 r) g1@211@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@240@01  $FVF<next>) r) r))
  :pattern ((inv@238@01 r))
  :qid |quant-u-284|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@241@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r) (= r (inv@238@01 r)))
    ($Perm.min
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@242@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r) (= r (inv@238@01 r)))
    ($Perm.min
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@241@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      (pTaken@241@01 r))
    $Perm.No)
  
  :qid |quant-u-286|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@241@01 r) $Perm.No)
  
  :qid |quant-u-287|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r) (= r (inv@238@01 r)))
    (= (- $Perm.Write (pTaken@241@01 r)) $Perm.No))
  
  :qid |quant-u-288|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      (pTaken@242@01 r))
    $Perm.No)
  
  :qid |quant-u-289|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r) (= r (inv@238@01 r)))
    (= (- (- $Perm.Write (pTaken@241@01 r)) (pTaken@242@01 r)) $Perm.No))
  
  :qid |quant-u-290|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@243@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@243@01  $FVF<next>)))
      (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r)))
    (=>
      (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r))
      (Set_in r ($FVF.domain_next (as sm@243@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@243@01  $FVF<next>))))
  :qid |qp.fvfDomDef148|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r))
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@243@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@243@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@243@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@243@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@243@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef147|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@243@01  $FVF<next>)) g1@211@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@240@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@240@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@240@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((n@237@01 $Ref)) (!
  (=>
    (Set_in n@237@01 g1@211@01)
    (and (= (inv@238@01 n@237@01) n@237@01) (img@239@01 n@237@01)))
  :pattern ((Set_in n@237@01 g1@211@01))
  :pattern ((inv@238@01 n@237@01))
  :pattern ((img@239@01 n@237@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@239@01 r) (Set_in (inv@238@01 r) g1@211@01))
    (= (inv@238@01 r) r))
  :pattern ((inv@238@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@243@01  $FVF<next>)))
      (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r)))
    (=>
      (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r))
      (Set_in r ($FVF.domain_next (as sm@243@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@243@01  $FVF<next>))))
  :qid |qp.fvfDomDef148|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r))
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@243@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@243@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@238@01 r) g1@211@01) (img@239@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@243@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@243@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@243@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef147|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@238@01 r) g1@211@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@240@01  $FVF<next>) r) r))
    :pattern ((inv@238@01 r))
    :qid |quant-u-284|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@243@01  $FVF<next>)) g1@211@01)))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@243@01  $FVF<next>)) g1@211@01) x1@214@01 y1@215@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 ($Snap.combine ($Snap.first $t@244@01) ($Snap.second $t@244@01))))
(assert (= ($Snap.first $t@244@01) $Snap.unit))
; [eval] !((null in (g1 union g0)))
; [eval] (null in (g1 union g0))
; [eval] (g1 union g0)
(assert (not (Set_in $Ref.null (Set_union g1@211@01 g0@210@01))))
(assert (=
  ($Snap.second $t@244@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@244@01))
    ($Snap.second ($Snap.second $t@244@01)))))
(declare-const n$3@245@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g1 union g0))
; [eval] (g1 union g0)
(assert (Set_in n$3@245@01 (Set_union g1@211@01 g0@210@01)))
(declare-const sm@246@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@247@01 ($Ref) $Ref)
(declare-fun img@248@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@245@01 $Ref) (n$32@245@01 $Ref)) (!
  (=>
    (and
      (Set_in n$31@245@01 (Set_union g1@211@01 g0@210@01))
      (Set_in n$32@245@01 (Set_union g1@211@01 g0@210@01))
      (= n$31@245@01 n$32@245@01))
    (= n$31@245@01 n$32@245@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@245@01 $Ref)) (!
  (=>
    (Set_in n$3@245@01 (Set_union g1@211@01 g0@210@01))
    (and (= (inv@247@01 n$3@245@01) n$3@245@01) (img@248@01 n$3@245@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) n$3@245@01) n$3@245@01))
  :qid |quant-u-292|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@248@01 r) (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
    (= (inv@247@01 r) r))
  :pattern ((inv@247@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@245@01 $Ref)) (!
  (=>
    (Set_in n$3@245@01 (Set_union g1@211@01 g0@210@01))
    (not (= n$3@245@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) n$3@245@01) n$3@245@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@249@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@248@01 r) (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) r) r))
  :pattern ((inv@247@01 r))
  :qid |quant-u-293|)))
(assert (=
  ($Snap.second ($Snap.second $t@244@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@244@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@244@01))) $Snap.unit))
; [eval] (forall n$4: Ref :: { (n$4.next in (g1 union g0)) } { (n$4 in (g1 union g0)), n$4.next } (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0)))
(declare-const n$4@250@01 $Ref)
(push) ; 3
; [eval] (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0))
; [eval] (n$4 in (g1 union g0)) && n$4.next != null
; [eval] (n$4 in (g1 union g0))
; [eval] (g1 union g0)
(push) ; 4
; [then-branch: 43 | !(n$4@250@01 in g1@211@01 ∪ g0@210@01) | live]
; [else-branch: 43 | n$4@250@01 in g1@211@01 ∪ g0@210@01 | live]
(push) ; 5
; [then-branch: 43 | !(n$4@250@01 in g1@211@01 ∪ g0@210@01)]
(assert (not (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 43 | n$4@250@01 in g1@211@01 ∪ g0@210@01]
(assert (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@248@01 r)
        (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
      (=
        ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
    :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
    :qid |qp.fvfValDef150|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef151|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) n$4@250@01))
(push) ; 6
(assert (not (and
  (img@248@01 n$4@250@01)
  (Set_in (inv@247@01 n$4@250@01) (Set_union g1@211@01 g0@210@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@248@01 r) (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (=>
  (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
  (and
    (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) n$4@250@01))))
(assert (or
  (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
  (not (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01)))))
(push) ; 4
; [then-branch: 44 | n$4@250@01 in g1@211@01 ∪ g0@210@01 && Lookup(next, sm@249@01, n$4@250@01) != Null | live]
; [else-branch: 44 | !(n$4@250@01 in g1@211@01 ∪ g0@210@01 && Lookup(next, sm@249@01, n$4@250@01) != Null) | live]
(push) ; 5
; [then-branch: 44 | n$4@250@01 in g1@211@01 ∪ g0@210@01 && Lookup(next, sm@249@01, n$4@250@01) != Null]
(assert (and
  (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
  (not (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null))))
; [eval] (n$4.next in (g1 union g0))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@248@01 r)
        (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
      (=
        ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
    :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
    :qid |qp.fvfValDef150|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef151|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) n$4@250@01))
(push) ; 6
(assert (not (and
  (img@248@01 n$4@250@01)
  (Set_in (inv@247@01 n$4@250@01) (Set_union g1@211@01 g0@210@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] (g1 union g0)
(pop) ; 5
(push) ; 5
; [else-branch: 44 | !(n$4@250@01 in g1@211@01 ∪ g0@210@01 && Lookup(next, sm@249@01, n$4@250@01) != Null)]
(assert (not
  (and
    (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
    (not (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@248@01 r) (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (=>
  (and
    (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
    (not (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null)))
  (and
    (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
    (not (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) n$4@250@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
      (not
        (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null))))
  (and
    (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
    (not (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@248@01 r) (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@250@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
      (and
        (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) n$4@250@01)))
    (or
      (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
      (not (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))))
    (=>
      (and
        (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null)))
      (and
        (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) n$4@250@01)))
    (or
      (not
        (and
          (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
          (not
            (=
              ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01)
              $Ref.null))))
      (and
        (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) (Set_union g1@211@01 g0@210@01)))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31-aux|)))
(assert (forall ((n$4@250@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
      (and
        (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) n$4@250@01)))
    (or
      (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
      (not (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))))
    (=>
      (and
        (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null)))
      (and
        (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) n$4@250@01)))
    (or
      (not
        (and
          (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
          (not
            (=
              ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01)
              $Ref.null))))
      (and
        (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null)))))
  :pattern ((Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) n$4@250@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31-aux|)))
(assert (forall ((n$4@250@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01))
      (not
        (= ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) (Set_union g1@211@01 g0@210@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) (Set_union g1@211@01 g0@210@01)))
  :pattern ((Set_in n$4@250@01 (Set_union g1@211@01 g0@210@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n$4@250@01) n$4@250@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@244@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
  $Snap.unit))
; [eval] exists_path($$((g0 union g1)), x1, y1)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@251@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@251@01 (Set_union g0@210@01 g1@211@01)))
(pop) ; 4
(declare-fun inv@252@01 ($Ref) $Ref)
(declare-fun img@253@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@251@01 $Ref) (n2@251@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@251@01 (Set_union g0@210@01 g1@211@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n1@251@01) n1@251@01))
      (and
        (Set_in n2@251@01 (Set_union g0@210@01 g1@211@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) n2@251@01) n2@251@01))
      (= n1@251@01 n2@251@01))
    (= n1@251@01 n2@251@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@251@01 $Ref)) (!
  (=>
    (Set_in n@251@01 (Set_union g0@210@01 g1@211@01))
    (and (= (inv@252@01 n@251@01) n@251@01) (img@253@01 n@251@01)))
  :pattern ((Set_in n@251@01 (Set_union g0@210@01 g1@211@01)))
  :pattern ((inv@252@01 n@251@01))
  :pattern ((img@253@01 n@251@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@253@01 r) (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01)))
    (= (inv@252@01 r) r))
  :pattern ((inv@252@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) r) r))
  :pattern ((inv@252@01 r))
  :qid |quant-u-295|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@254@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01))
      (img@253@01 r)
      (= r (inv@252@01 r)))
    ($Perm.min
      (ite
        (and
          (img@248@01 r)
          (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@248@01 r)
          (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@254@01 r))
    $Perm.No)
  
  :qid |quant-u-297|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01))
      (img@253@01 r)
      (= r (inv@252@01 r)))
    (= (- $Perm.Write (pTaken@254@01 r)) $Perm.No))
  
  :qid |quant-u-298|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@255@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@255@01  $FVF<next>)))
      (and
        (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01))
        (img@253@01 r)))
    (=>
      (and
        (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01))
        (img@253@01 r))
      (Set_in r ($FVF.domain_next (as sm@255@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@255@01  $FVF<next>))))
  :qid |qp.fvfDomDef154|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01))
        (img@253@01 r))
      (and
        (img@248@01 r)
        (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01))))
    (=
      ($FVF.lookup_next (as sm@255@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef153|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@255@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@251@01 $Ref)) (!
  (=>
    (Set_in n@251@01 (Set_union g0@210@01 g1@211@01))
    (and (= (inv@252@01 n@251@01) n@251@01) (img@253@01 n@251@01)))
  :pattern ((Set_in n@251@01 (Set_union g0@210@01 g1@211@01)))
  :pattern ((inv@252@01 n@251@01))
  :pattern ((img@253@01 n@251@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@253@01 r) (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01)))
    (= (inv@252@01 r) r))
  :pattern ((inv@252@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@255@01  $FVF<next>)))
      (and
        (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01))
        (img@253@01 r)))
    (=>
      (and
        (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01))
        (img@253@01 r))
      (Set_in r ($FVF.domain_next (as sm@255@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@255@01  $FVF<next>))))
  :qid |qp.fvfDomDef154|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01))
        (img@253@01 r))
      (and
        (img@248@01 r)
        (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01))))
    (=
      ($FVF.lookup_next (as sm@255@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@255@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef153|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@252@01 r) (Set_union g0@210@01 g1@211@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@249@01  $FVF<next>) r) r))
    :pattern ((inv@252@01 r))
    :qid |quant-u-295|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@255@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01))))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@255@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01)) x1@214@01 y1@215@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
  $Snap.unit))
; [eval] exists_path($$((g0 union g1)), x0, y0)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(set-option :timeout 0)
(push) ; 3
(declare-const n@256@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@256@01 (Set_union g0@210@01 g1@211@01)))
(pop) ; 4
(declare-fun inv@257@01 ($Ref) $Ref)
(declare-fun img@258@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@259@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@248@01 r) (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@259@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
  :pattern (($FVF.lookup_next (as sm@259@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
  :qid |qp.fvfValDef155|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@259@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef156|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@256@01 $Ref) (n2@256@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@256@01 (Set_union g0@210@01 g1@211@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@259@01  $FVF<next>) n1@256@01) n1@256@01))
      (and
        (Set_in n2@256@01 (Set_union g0@210@01 g1@211@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@259@01  $FVF<next>) n2@256@01) n2@256@01))
      (= n1@256@01 n2@256@01))
    (= n1@256@01 n2@256@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@256@01 $Ref)) (!
  (=>
    (Set_in n@256@01 (Set_union g0@210@01 g1@211@01))
    (and (= (inv@257@01 n@256@01) n@256@01) (img@258@01 n@256@01)))
  :pattern ((Set_in n@256@01 (Set_union g0@210@01 g1@211@01)))
  :pattern ((inv@257@01 n@256@01))
  :pattern ((img@258@01 n@256@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@258@01 r) (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01)))
    (= (inv@257@01 r) r))
  :pattern ((inv@257@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@259@01  $FVF<next>) r) r))
  :pattern ((inv@257@01 r))
  :qid |quant-u-300|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@260@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01))
      (img@258@01 r)
      (= r (inv@257@01 r)))
    ($Perm.min
      (ite
        (and
          (img@248@01 r)
          (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@248@01 r)
          (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@260@01 r))
    $Perm.No)
  
  :qid |quant-u-302|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01))
      (img@258@01 r)
      (= r (inv@257@01 r)))
    (= (- $Perm.Write (pTaken@260@01 r)) $Perm.No))
  
  :qid |quant-u-303|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@261@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@261@01  $FVF<next>)))
      (and
        (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01))
        (img@258@01 r)))
    (=>
      (and
        (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01))
        (img@258@01 r))
      (Set_in r ($FVF.domain_next (as sm@261@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@261@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01))
        (img@258@01 r))
      (and
        (img@248@01 r)
        (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01))))
    (=
      ($FVF.lookup_next (as sm@261@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
  :pattern (($FVF.lookup_next (as sm@261@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@261@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@261@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@248@01 r) (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@259@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
  :pattern (($FVF.lookup_next (as sm@259@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
  :qid |qp.fvfValDef155|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@259@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef156|)))
(assert (forall ((n@256@01 $Ref)) (!
  (=>
    (Set_in n@256@01 (Set_union g0@210@01 g1@211@01))
    (and (= (inv@257@01 n@256@01) n@256@01) (img@258@01 n@256@01)))
  :pattern ((Set_in n@256@01 (Set_union g0@210@01 g1@211@01)))
  :pattern ((inv@257@01 n@256@01))
  :pattern ((img@258@01 n@256@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@258@01 r) (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01)))
    (= (inv@257@01 r) r))
  :pattern ((inv@257@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@261@01  $FVF<next>)))
      (and
        (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01))
        (img@258@01 r)))
    (=>
      (and
        (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01))
        (img@258@01 r))
      (Set_in r ($FVF.domain_next (as sm@261@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@261@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01))
        (img@258@01 r))
      (and
        (img@248@01 r)
        (Set_in (inv@247@01 r) (Set_union g1@211@01 g0@210@01))))
    (=
      ($FVF.lookup_next (as sm@261@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r)))
  :pattern (($FVF.lookup_next (as sm@261@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@244@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@261@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@257@01 r) (Set_union g0@210@01 g1@211@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@259@01  $FVF<next>) r) r))
    :pattern ((inv@257@01 r))
    :qid |quant-u-300|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@261@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01))))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@261@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01)) x0@212@01 y0@213@01))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; inhale apply_TCFraming(g0, g1)
(declare-const $t@262@01 $Snap)
(assert (= $t@262@01 $Snap.unit))
; [eval] apply_TCFraming(g0, g1)
(push) ; 3
(declare-const n@263@01 $Ref)
(push) ; 4
; [eval] (n in g0)
(assert (Set_in n@263@01 g0@210@01))
(pop) ; 4
(declare-fun inv@264@01 ($Ref) $Ref)
(declare-fun img@265@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@266@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@263@01 $Ref) (n2@263@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@263@01 g0@210@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) n1@263@01) n1@263@01))
      (and
        (Set_in n2@263@01 g0@210@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) n2@263@01) n2@263@01))
      (= n1@263@01 n2@263@01))
    (= n1@263@01 n2@263@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@263@01 $Ref)) (!
  (=>
    (Set_in n@263@01 g0@210@01)
    (and (= (inv@264@01 n@263@01) n@263@01) (img@265@01 n@263@01)))
  :pattern ((Set_in n@263@01 g0@210@01))
  :pattern ((inv@264@01 n@263@01))
  :pattern ((img@265@01 n@263@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@265@01 r) (Set_in (inv@264@01 r) g0@210@01))
    (= (inv@264@01 r) r))
  :pattern ((inv@264@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@264@01 r) g0@210@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) r) r))
  :pattern ((inv@264@01 r))
  :qid |quant-u-305|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@267@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@264@01 r) g0@210@01) (img@265@01 r) (= r (inv@264@01 r)))
    ($Perm.min
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@268@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@264@01 r) g0@210@01) (img@265@01 r) (= r (inv@264@01 r)))
    ($Perm.min
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@267@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      (pTaken@267@01 r))
    $Perm.No)
  
  :qid |quant-u-307|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@264@01 r) g0@210@01) (img@265@01 r) (= r (inv@264@01 r)))
    (= (- $Perm.Write (pTaken@267@01 r)) $Perm.No))
  
  :qid |quant-u-308|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@269@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@269@01  $FVF<next>)))
      (and (Set_in (inv@264@01 r) g0@210@01) (img@265@01 r)))
    (=>
      (and (Set_in (inv@264@01 r) g0@210@01) (img@265@01 r))
      (Set_in r ($FVF.domain_next (as sm@269@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@269@01  $FVF<next>))))
  :qid |qp.fvfDomDef166|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@264@01 r) g0@210@01) (img@265@01 r))
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@264@01 r) g0@210@01) (img@265@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef165|)))
(declare-const n@270@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n in g1)
(assert (Set_in n@270@01 g1@211@01))
(pop) ; 4
(declare-fun inv@271@01 ($Ref) $Ref)
(declare-fun img@272@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@273@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@273@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef168|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@270@01 $Ref) (n2@270@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@270@01 g1@211@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@273@01  $FVF<next>) n1@270@01) n1@270@01))
      (and
        (Set_in n2@270@01 g1@211@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@273@01  $FVF<next>) n2@270@01) n2@270@01))
      (= n1@270@01 n2@270@01))
    (= n1@270@01 n2@270@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@270@01 $Ref)) (!
  (=>
    (Set_in n@270@01 g1@211@01)
    (and (= (inv@271@01 n@270@01) n@270@01) (img@272@01 n@270@01)))
  :pattern ((Set_in n@270@01 g1@211@01))
  :pattern ((inv@271@01 n@270@01))
  :pattern ((img@272@01 n@270@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@272@01 r) (Set_in (inv@271@01 r) g1@211@01))
    (= (inv@271@01 r) r))
  :pattern ((inv@271@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@271@01 r) g1@211@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@273@01  $FVF<next>) r) r))
  :pattern ((inv@271@01 r))
  :qid |quant-u-310|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@274@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@271@01 r) g1@211@01) (img@272@01 r) (= r (inv@271@01 r)))
    ($Perm.min
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      (pTaken@274@01 r))
    $Perm.No)
  
  :qid |quant-u-312|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@271@01 r) g1@211@01) (img@272@01 r) (= r (inv@271@01 r)))
    (= (- $Perm.Write (pTaken@274@01 r)) $Perm.No))
  
  :qid |quant-u-313|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@275@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>)))
      (and (Set_in (inv@271@01 r) g1@211@01) (img@272@01 r)))
    (=>
      (and (Set_in (inv@271@01 r) g1@211@01) (img@272@01 r))
      (Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>))))
  :qid |qp.fvfDomDef171|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@271@01 r) g1@211@01) (img@272@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@275@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@275@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@275@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
; [eval] (g1 intersection g0) == Set[Ref]()
; [eval] (g1 intersection g0)
; [eval] Set[Ref]()
(set-option :timeout 0)
(push) ; 4
(assert (not (Set_equal (Set_intersection g1@211@01 g0@210@01) (as Set_empty  Set<$Ref>))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (Set_equal (Set_intersection g1@211@01 g0@210@01) (as Set_empty  Set<$Ref>)))
(assert (apply_TCFraming%precondition ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@269@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@275@01  $FVF<next>))
    $Snap.unit)) g0@210@01 g1@211@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@263@01 $Ref)) (!
  (=>
    (Set_in n@263@01 g0@210@01)
    (and (= (inv@264@01 n@263@01) n@263@01) (img@265@01 n@263@01)))
  :pattern ((Set_in n@263@01 g0@210@01))
  :pattern ((inv@264@01 n@263@01))
  :pattern ((img@265@01 n@263@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@265@01 r) (Set_in (inv@264@01 r) g0@210@01))
    (= (inv@264@01 r) r))
  :pattern ((inv@264@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@269@01  $FVF<next>)))
      (and (Set_in (inv@264@01 r) g0@210@01) (img@265@01 r)))
    (=>
      (and (Set_in (inv@264@01 r) g0@210@01) (img@265@01 r))
      (Set_in r ($FVF.domain_next (as sm@269@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@269@01  $FVF<next>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@264@01 r) g0@210@01) (img@265@01 r))
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@264@01 r) g0@210@01) (img@265@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@273@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef168|)))
(assert (forall ((n@270@01 $Ref)) (!
  (=>
    (Set_in n@270@01 g1@211@01)
    (and (= (inv@271@01 n@270@01) n@270@01) (img@272@01 n@270@01)))
  :pattern ((Set_in n@270@01 g1@211@01))
  :pattern ((inv@271@01 n@270@01))
  :pattern ((img@272@01 n@270@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@272@01 r) (Set_in (inv@271@01 r) g1@211@01))
    (= (inv@271@01 r) r))
  :pattern ((inv@271@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>)))
      (and (Set_in (inv@271@01 r) g1@211@01) (img@272@01 r)))
    (=>
      (and (Set_in (inv@271@01 r) g1@211@01) (img@272@01 r))
      (Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@275@01  $FVF<next>))))
  :qid |qp.fvfDomDef171|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@271@01 r) g1@211@01) (img@272@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@275@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@275@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@275@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@264@01 r) g0@210@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@266@01  $FVF<next>) r) r))
    :pattern ((inv@264@01 r))
    :qid |quant-u-305|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@271@01 r) g1@211@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@273@01  $FVF<next>) r) r))
    :pattern ((inv@271@01 r))
    :qid |quant-u-310|))
  (Set_equal (Set_intersection g1@211@01 g0@210@01) (as Set_empty  Set<$Ref>))
  (apply_TCFraming%precondition ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@269@01  $FVF<next>))
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@275@01  $FVF<next>))
      $Snap.unit)) g0@210@01 g1@211@01)))
(assert (apply_TCFraming ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@269@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@275@01  $FVF<next>))
    $Snap.unit)) g0@210@01 g1@211@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !((null in (g1 union g0)))
; [eval] (null in (g1 union g0))
; [eval] (g1 union g0)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (Set_in $Ref.null (Set_union g1@211@01 g0@210@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null (Set_union g1@211@01 g0@210@01))))
(declare-const n$3@276@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g1 union g0))
; [eval] (g1 union g0)
(assert (Set_in n$3@276@01 (Set_union g1@211@01 g0@210@01)))
(declare-const sm@277@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@277@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@277@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@277@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@277@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@277@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
(pop) ; 3
(declare-fun inv@278@01 ($Ref) $Ref)
(declare-fun img@279@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@277@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@277@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@277@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@277@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@277@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef174|)))
; Nested auxiliary terms: non-globals
(declare-const sm@280@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@276@01 $Ref) (n$32@276@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$31@276@01 (Set_union g1@211@01 g0@210@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$31@276@01) n$31@276@01))
      (and
        (Set_in n$32@276@01 (Set_union g1@211@01 g0@210@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$32@276@01) n$32@276@01))
      (= n$31@276@01 n$32@276@01))
    (= n$31@276@01 n$32@276@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@276@01 $Ref)) (!
  (=>
    (Set_in n$3@276@01 (Set_union g1@211@01 g0@210@01))
    (and (= (inv@278@01 n$3@276@01) n$3@276@01) (img@279@01 n$3@276@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@277@01  $FVF<next>) n$3@276@01) n$3@276@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@279@01 r) (Set_in (inv@278@01 r) (Set_union g1@211@01 g0@210@01)))
    (= (inv@278@01 r) r))
  :pattern ((inv@278@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@278@01 r) (Set_union g1@211@01 g0@210@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) r) r))
  :pattern ((inv@278@01 r))
  :qid |quant-u-315|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@281@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@278@01 r) (Set_union g1@211@01 g0@210@01))
      (img@279@01 r)
      (= r (inv@278@01 r)))
    ($Perm.min
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@282@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@278@01 r) (Set_union g1@211@01 g0@210@01))
      (img@279@01 r)
      (= r (inv@278@01 r)))
    ($Perm.min
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@281@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      (pTaken@281@01 r))
    $Perm.No)
  
  :qid |quant-u-317|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@278@01 r) (Set_union g1@211@01 g0@210@01))
      (img@279@01 r)
      (= r (inv@278@01 r)))
    (= (- $Perm.Write (pTaken@281@01 r)) $Perm.No))
  
  :qid |quant-u-318|))))
(check-sat)
; unknown
(pop) ; 3
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      (pTaken@282@01 r))
    $Perm.No)
  
  :qid |quant-u-319|))))
(check-sat)
; unsat
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@278@01 r) (Set_union g1@211@01 g0@210@01))
      (img@279@01 r)
      (= r (inv@278@01 r)))
    (= (- (- $Perm.Write (pTaken@281@01 r)) (pTaken@282@01 r)) $Perm.No))
  
  :qid |quant-u-320|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$4: Ref :: { (n$4.next in (g1 union g0)) } { (n$4 in (g1 union g0)), n$4.next } (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0)))
(declare-const n$4@283@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0))
; [eval] (n$4 in (g1 union g0)) && n$4.next != null
; [eval] (n$4 in (g1 union g0))
; [eval] (g1 union g0)
(push) ; 4
; [then-branch: 45 | !(n$4@283@01 in g1@211@01 ∪ g0@210@01) | live]
; [else-branch: 45 | n$4@283@01 in g1@211@01 ∪ g0@210@01 | live]
(push) ; 5
; [then-branch: 45 | !(n$4@283@01 in g1@211@01 ∪ g0@210@01)]
(assert (not (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 45 | n$4@283@01 in g1@211@01 ∪ g0@210@01]
(assert (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
      (=
        ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
    :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
    :qid |qp.fvfValDef175|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
      (=
        ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
    :qid |qp.fvfValDef176|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef177|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) n$4@283@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@221@01 n$4@283@01) (Set_in (inv@220@01 n$4@283@01) g0@210@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@226@01 n$4@283@01) (Set_in (inv@225@01 n$4@283@01) g1@211@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
(assert (=>
  (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
  (and
    (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) n$4@283@01))))
(assert (or
  (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
  (not (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01)))))
(push) ; 4
; [then-branch: 46 | n$4@283@01 in g1@211@01 ∪ g0@210@01 && Lookup(next, sm@280@01, n$4@283@01) != Null | live]
; [else-branch: 46 | !(n$4@283@01 in g1@211@01 ∪ g0@210@01 && Lookup(next, sm@280@01, n$4@283@01) != Null) | live]
(push) ; 5
; [then-branch: 46 | n$4@283@01 in g1@211@01 ∪ g0@210@01 && Lookup(next, sm@280@01, n$4@283@01) != Null]
(assert (and
  (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
  (not (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null))))
; [eval] (n$4.next in (g1 union g0))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
      (=
        ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
    :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
    :qid |qp.fvfValDef175|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
      (=
        ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
    :qid |qp.fvfValDef176|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef177|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) n$4@283@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@221@01 n$4@283@01) (Set_in (inv@220@01 n$4@283@01) g0@210@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@226@01 n$4@283@01) (Set_in (inv@225@01 n$4@283@01) g1@211@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] (g1 union g0)
(pop) ; 5
(push) ; 5
; [else-branch: 46 | !(n$4@283@01 in g1@211@01 ∪ g0@210@01 && Lookup(next, sm@280@01, n$4@283@01) != Null)]
(assert (not
  (and
    (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
    (not (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
(assert (=>
  (and
    (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
    (not (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null)))
  (and
    (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
    (not (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) n$4@283@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
      (not
        (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null))))
  (and
    (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
    (not (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@280@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@280@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef177|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@283@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
      (and
        (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) n$4@283@01)))
    (or
      (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
      (not (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))))
    (=>
      (and
        (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null)))
      (and
        (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) n$4@283@01)))
    (or
      (not
        (and
          (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
          (not
            (=
              ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01)
              $Ref.null))))
      (and
        (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) (Set_union g1@211@01 g0@210@01)))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31-aux|)))
(assert (forall ((n$4@283@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
      (and
        (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) n$4@283@01)))
    (or
      (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
      (not (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))))
    (=>
      (and
        (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null)))
      (and
        (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) n$4@283@01)))
    (or
      (not
        (and
          (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
          (not
            (=
              ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01)
              $Ref.null))))
      (and
        (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
        (not
          (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null)))))
  :pattern ((Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) n$4@283@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31-aux|)))
(push) ; 3
(assert (not (forall ((n$4@283@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
      (not
        (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) (Set_union g1@211@01 g0@210@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) (Set_union g1@211@01 g0@210@01)))
  :pattern ((Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) n$4@283@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$4@283@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01))
      (not
        (= ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) (Set_union g1@211@01 g0@210@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) (Set_union g1@211@01 g0@210@01)))
  :pattern ((Set_in n$4@283@01 (Set_union g1@211@01 g0@210@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n$4@283@01) n$4@283@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@401@13@401@31|)))
; [eval] exists_path($$((g0 union g1)), x1, y1)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@284@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@284@01 (Set_union g0@210@01 g1@211@01)))
(pop) ; 4
(declare-fun inv@285@01 ($Ref) $Ref)
(declare-fun img@286@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@284@01 $Ref) (n2@284@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@284@01 (Set_union g0@210@01 g1@211@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n1@284@01) n1@284@01))
      (and
        (Set_in n2@284@01 (Set_union g0@210@01 g1@211@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) n2@284@01) n2@284@01))
      (= n1@284@01 n2@284@01))
    (= n1@284@01 n2@284@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@284@01 $Ref)) (!
  (=>
    (Set_in n@284@01 (Set_union g0@210@01 g1@211@01))
    (and (= (inv@285@01 n@284@01) n@284@01) (img@286@01 n@284@01)))
  :pattern ((Set_in n@284@01 (Set_union g0@210@01 g1@211@01)))
  :pattern ((inv@285@01 n@284@01))
  :pattern ((img@286@01 n@284@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@286@01 r) (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01)))
    (= (inv@285@01 r) r))
  :pattern ((inv@285@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) r) r))
  :pattern ((inv@285@01 r))
  :qid |quant-u-322|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@287@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
      (img@286@01 r)
      (= r (inv@285@01 r)))
    ($Perm.min
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@288@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
      (img@286@01 r)
      (= r (inv@285@01 r)))
    ($Perm.min
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@287@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      (pTaken@287@01 r))
    $Perm.No)
  
  :qid |quant-u-324|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
      (img@286@01 r)
      (= r (inv@285@01 r)))
    (= (- $Perm.Write (pTaken@287@01 r)) $Perm.No))
  
  :qid |quant-u-325|))))
(check-sat)
; unknown
(pop) ; 4
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      (pTaken@288@01 r))
    $Perm.No)
  
  :qid |quant-u-326|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
      (img@286@01 r)
      (= r (inv@285@01 r)))
    (= (- (- $Perm.Write (pTaken@287@01 r)) (pTaken@288@01 r)) $Perm.No))
  
  :qid |quant-u-327|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@289@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@289@01  $FVF<next>)))
      (and
        (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
        (img@286@01 r)))
    (=>
      (and
        (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
        (img@286@01 r))
      (Set_in r ($FVF.domain_next (as sm@289@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@289@01  $FVF<next>))))
  :qid |qp.fvfDomDef181|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
        (img@286@01 r))
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@289@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@289@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
        (img@286@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@289@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@289@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@289@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef180|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@289@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@284@01 $Ref)) (!
  (=>
    (Set_in n@284@01 (Set_union g0@210@01 g1@211@01))
    (and (= (inv@285@01 n@284@01) n@284@01) (img@286@01 n@284@01)))
  :pattern ((Set_in n@284@01 (Set_union g0@210@01 g1@211@01)))
  :pattern ((inv@285@01 n@284@01))
  :pattern ((img@286@01 n@284@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@286@01 r) (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01)))
    (= (inv@285@01 r) r))
  :pattern ((inv@285@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@289@01  $FVF<next>)))
      (and
        (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
        (img@286@01 r)))
    (=>
      (and
        (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
        (img@286@01 r))
      (Set_in r ($FVF.domain_next (as sm@289@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@289@01  $FVF<next>))))
  :qid |qp.fvfDomDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
        (img@286@01 r))
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@289@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@289@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
        (img@286@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@289@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@289@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef179|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@289@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef180|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@285@01 r) (Set_union g0@210@01 g1@211@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@280@01  $FVF<next>) r) r))
    :pattern ((inv@285@01 r))
    :qid |quant-u-322|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@289@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01))))
(set-option :timeout 0)
(push) ; 3
(assert (not (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@289@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01)) x1@214@01 y1@215@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,11s
; (get-info :all-statistics)
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@289@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01)) x1@214@01 y1@215@01))
; [eval] exists_path($$((g0 union g1)), x0, y0)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@290@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@290@01 (Set_union g0@210@01 g1@211@01)))
(pop) ; 4
(declare-fun inv@291@01 ($Ref) $Ref)
(declare-fun img@292@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@293@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@290@01 $Ref) (n2@290@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@290@01 (Set_union g0@210@01 g1@211@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n1@290@01) n1@290@01))
      (and
        (Set_in n2@290@01 (Set_union g0@210@01 g1@211@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n2@290@01) n2@290@01))
      (= n1@290@01 n2@290@01))
    (= n1@290@01 n2@290@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@290@01 $Ref)) (!
  (=>
    (Set_in n@290@01 (Set_union g0@210@01 g1@211@01))
    (and (= (inv@291@01 n@290@01) n@290@01) (img@292@01 n@290@01)))
  :pattern ((Set_in n@290@01 (Set_union g0@210@01 g1@211@01)))
  :pattern ((inv@291@01 n@290@01))
  :pattern ((img@292@01 n@290@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@292@01 r) (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01)))
    (= (inv@291@01 r) r))
  :pattern ((inv@291@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
  :pattern ((inv@291@01 r))
  :qid |quant-u-329|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@294@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
      (img@292@01 r)
      (= r (inv@291@01 r)))
    ($Perm.min
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@295@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
      (img@292@01 r)
      (= r (inv@291@01 r)))
    ($Perm.min
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@294@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
        $Perm.Write
        $Perm.No)
      (pTaken@294@01 r))
    $Perm.No)
  
  :qid |quant-u-331|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
      (img@292@01 r)
      (= r (inv@291@01 r)))
    (= (- $Perm.Write (pTaken@294@01 r)) $Perm.No))
  
  :qid |quant-u-332|))))
(check-sat)
; unknown
(pop) ; 4
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
        $Perm.Write
        $Perm.No)
      (pTaken@295@01 r))
    $Perm.No)
  
  :qid |quant-u-333|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
      (img@292@01 r)
      (= r (inv@291@01 r)))
    (= (- (- $Perm.Write (pTaken@294@01 r)) (pTaken@295@01 r)) $Perm.No))
  
  :qid |quant-u-334|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@296@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@296@01  $FVF<next>)))
      (and
        (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
        (img@292@01 r)))
    (=>
      (and
        (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
        (img@292@01 r))
      (Set_in r ($FVF.domain_next (as sm@296@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@296@01  $FVF<next>))))
  :qid |qp.fvfDomDef188|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
        (img@292@01 r))
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@296@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@296@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
        (img@292@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@296@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@296@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@296@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@296@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef183|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef184|)))
(assert (forall ((n@290@01 $Ref)) (!
  (=>
    (Set_in n@290@01 (Set_union g0@210@01 g1@211@01))
    (and (= (inv@291@01 n@290@01) n@290@01) (img@292@01 n@290@01)))
  :pattern ((Set_in n@290@01 (Set_union g0@210@01 g1@211@01)))
  :pattern ((inv@291@01 n@290@01))
  :pattern ((img@292@01 n@290@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@292@01 r) (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01)))
    (= (inv@291@01 r) r))
  :pattern ((inv@291@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@296@01  $FVF<next>)))
      (and
        (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
        (img@292@01 r)))
    (=>
      (and
        (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
        (img@292@01 r))
      (Set_in r ($FVF.domain_next (as sm@296@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@296@01  $FVF<next>))))
  :qid |qp.fvfDomDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
        (img@292@01 r))
      (and (img@221@01 r) (Set_in (inv@220@01 r) g0@210@01)))
    (=
      ($FVF.lookup_next (as sm@296@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r)))
  :pattern (($FVF.lookup_next (as sm@296@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
        (img@292@01 r))
      (and (img@226@01 r) (Set_in (inv@225@01 r) g1@211@01)))
    (=
      ($FVF.lookup_next (as sm@296@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@296@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r))
  :qid |qp.fvfValDef186|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@217@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@217@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@296@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef187|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@291@01 r) (Set_union g0@210@01 g1@211@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
    :pattern ((inv@291@01 r))
    :qid |quant-u-329|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@296@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01))))
(set-option :timeout 0)
(push) ; 3
(assert (not (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@296@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01)) x0@212@01 y0@213@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,69s
; (get-info :all-statistics)
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@296@01  $FVF<next>)) (Set_union g0@210@01 g1@211@01)) x0@212@01 y0@213@01))
(pop) ; 2
(pop) ; 1
; ---------- test_union ----------
(declare-const g0@297@01 Set<$Ref>)
(declare-const g1@298@01 Set<$Ref>)
(declare-const x0@299@01 $Ref)
(declare-const x1@300@01 $Ref)
(declare-const x@301@01 $Ref)
(declare-const g0@302@01 Set<$Ref>)
(declare-const g1@303@01 Set<$Ref>)
(declare-const x0@304@01 $Ref)
(declare-const x1@305@01 $Ref)
(declare-const x@306@01 $Ref)
(push) ; 1
(declare-const $t@307@01 $Snap)
(assert (= $t@307@01 ($Snap.combine ($Snap.first $t@307@01) ($Snap.second $t@307@01))))
(assert (= ($Snap.first $t@307@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@302@01)))
(assert (=
  ($Snap.second $t@307@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@307@01))
    ($Snap.second ($Snap.second $t@307@01)))))
(declare-const n@308@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@308@01 g0@302@01))
(declare-const sm@309@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@310@01 ($Ref) $Ref)
(declare-fun img@311@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@308@01 $Ref) (n2@308@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@308@01 g0@302@01)
      (Set_in n2@308@01 g0@302@01)
      (= n1@308@01 n2@308@01))
    (= n1@308@01 n2@308@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 g0@302@01)
    (and (= (inv@310@01 n@308@01) n@308@01) (img@311@01 n@308@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) n@308@01) n@308@01))
  :qid |quant-u-336|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (= (inv@310@01 r) r))
  :pattern ((inv@310@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@308@01 $Ref)) (!
  (=> (Set_in n@308@01 g0@302@01) (not (= n@308@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) n@308@01) n@308@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@312@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@310@01 r) g0@302@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@312@01  $FVF<next>) r) r))
  :pattern ((inv@310@01 r))
  :qid |quant-u-337|)))
(assert (=
  ($Snap.second ($Snap.second $t@307@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@307@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@307@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@313@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 47 | !(n$0@313@01 in g0@302@01) | live]
; [else-branch: 47 | n$0@313@01 in g0@302@01 | live]
(push) ; 4
; [then-branch: 47 | !(n$0@313@01 in g0@302@01)]
(assert (not (Set_in n$0@313@01 g0@302@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 47 | n$0@313@01 in g0@302@01]
(assert (Set_in n$0@313@01 g0@302@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
      (=
        ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
    :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
    :qid |qp.fvfValDef190|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef191|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) n$0@313@01))
(push) ; 5
(assert (not (and (img@311@01 n$0@313@01) (Set_in (inv@310@01 n$0@313@01) g0@302@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (=>
  (Set_in n$0@313@01 g0@302@01)
  (and
    (Set_in n$0@313@01 g0@302@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) n$0@313@01))))
(assert (or (Set_in n$0@313@01 g0@302@01) (not (Set_in n$0@313@01 g0@302@01))))
(push) ; 3
; [then-branch: 48 | n$0@313@01 in g0@302@01 && Lookup(next, sm@312@01, n$0@313@01) != Null | live]
; [else-branch: 48 | !(n$0@313@01 in g0@302@01 && Lookup(next, sm@312@01, n$0@313@01) != Null) | live]
(push) ; 4
; [then-branch: 48 | n$0@313@01 in g0@302@01 && Lookup(next, sm@312@01, n$0@313@01) != Null]
(assert (and
  (Set_in n$0@313@01 g0@302@01)
  (not (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
      (=
        ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
    :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
    :qid |qp.fvfValDef190|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef191|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) n$0@313@01))
(push) ; 5
(assert (not (and (img@311@01 n$0@313@01) (Set_in (inv@310@01 n$0@313@01) g0@302@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 48 | !(n$0@313@01 in g0@302@01 && Lookup(next, sm@312@01, n$0@313@01) != Null)]
(assert (not
  (and
    (Set_in n$0@313@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef191|)))
(assert (=>
  (and
    (Set_in n$0@313@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null)))
  (and
    (Set_in n$0@313@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) n$0@313@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@313@01 g0@302@01)
      (not
        (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null))))
  (and
    (Set_in n$0@313@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef190|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef191|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@313@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@313@01 g0@302@01)
      (and
        (Set_in n$0@313@01 g0@302@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) n$0@313@01)))
    (or (Set_in n$0@313@01 g0@302@01) (not (Set_in n$0@313@01 g0@302@01)))
    (=>
      (and
        (Set_in n$0@313@01 g0@302@01)
        (not
          (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null)))
      (and
        (Set_in n$0@313@01 g0@302@01)
        (not
          (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) n$0@313@01)))
    (or
      (not
        (and
          (Set_in n$0@313@01 g0@302@01)
          (not
            (=
              ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01)
              $Ref.null))))
      (and
        (Set_in n$0@313@01 g0@302@01)
        (not
          (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) g0@302@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@14@409@23-aux|)))
(assert (forall ((n$0@313@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@313@01 g0@302@01)
      (and
        (Set_in n$0@313@01 g0@302@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) n$0@313@01)))
    (or (Set_in n$0@313@01 g0@302@01) (not (Set_in n$0@313@01 g0@302@01)))
    (=>
      (and
        (Set_in n$0@313@01 g0@302@01)
        (not
          (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null)))
      (and
        (Set_in n$0@313@01 g0@302@01)
        (not
          (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) n$0@313@01)))
    (or
      (not
        (and
          (Set_in n$0@313@01 g0@302@01)
          (not
            (=
              ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01)
              $Ref.null))))
      (and
        (Set_in n$0@313@01 g0@302@01)
        (not
          (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null)))))
  :pattern ((Set_in n$0@313@01 g0@302@01) ($FVF.loc_next ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) n$0@313@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@14@409@23-aux|)))
(assert (forall ((n$0@313@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@313@01 g0@302@01)
      (not
        (= ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) g0@302@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) g0@302@01))
  :pattern ((Set_in n$0@313@01 g0@302@01) ($FVF.loc_next ($FVF.lookup_next (as sm@312@01  $FVF<next>) n$0@313@01) n$0@313@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@14@409@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@307@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@307@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@307@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@303@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))
(declare-const n$1@314@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@314@01 g1@303@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@315@01 ($Ref) $Ref)
(declare-fun img@316@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@314@01 $Ref) (n$12@314@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@314@01 g1@303@01)
      (Set_in n$12@314@01 g1@303@01)
      (= n$11@314@01 n$12@314@01))
    (= n$11@314@01 n$12@314@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@314@01 $Ref)) (!
  (=>
    (Set_in n$1@314@01 g1@303@01)
    (and (= (inv@315@01 n$1@314@01) n$1@314@01) (img@316@01 n$1@314@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) n$1@314@01) n$1@314@01))
  :qid |quant-u-339|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (= (inv@315@01 r) r))
  :pattern ((inv@315@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@314@01 $Ref)) (!
  (=> (Set_in n$1@314@01 g1@303@01) (not (= n$1@314@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) n$1@314@01) n$1@314@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@314@01 n@308@01)
    (=
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))))
  
  :qid |quant-u-340|))))
(check-sat)
; unknown
(pop) ; 2
; 0,01s
; (get-info :all-statistics)
(declare-const sm@317@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@315@01 r) g1@303@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) r) r))
  :pattern ((inv@315@01 r))
  :qid |quant-u-341|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@318@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 49 | !(n$2@318@01 in g1@303@01) | live]
; [else-branch: 49 | n$2@318@01 in g1@303@01 | live]
(push) ; 4
; [then-branch: 49 | !(n$2@318@01 in g1@303@01)]
(assert (not (Set_in n$2@318@01 g1@303@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 49 | n$2@318@01 in g1@303@01]
(assert (Set_in n$2@318@01 g1@303@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
      (=
        ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
    :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
    :qid |qp.fvfValDef192|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
      (=
        ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
    :qid |qp.fvfValDef193|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef194|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) n$2@318@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@311@01 n$2@318@01) (Set_in (inv@310@01 n$2@318@01) g0@302@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@316@01 n$2@318@01) (Set_in (inv@315@01 n$2@318@01) g1@303@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
(assert (=>
  (Set_in n$2@318@01 g1@303@01)
  (and
    (Set_in n$2@318@01 g1@303@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) n$2@318@01))))
(assert (or (Set_in n$2@318@01 g1@303@01) (not (Set_in n$2@318@01 g1@303@01))))
(push) ; 3
; [then-branch: 50 | n$2@318@01 in g1@303@01 && Lookup(next, sm@317@01, n$2@318@01) != Null | live]
; [else-branch: 50 | !(n$2@318@01 in g1@303@01 && Lookup(next, sm@317@01, n$2@318@01) != Null) | live]
(push) ; 4
; [then-branch: 50 | n$2@318@01 in g1@303@01 && Lookup(next, sm@317@01, n$2@318@01) != Null]
(assert (and
  (Set_in n$2@318@01 g1@303@01)
  (not (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
      (=
        ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
    :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
    :qid |qp.fvfValDef192|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
      (=
        ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
    :qid |qp.fvfValDef193|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef194|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) n$2@318@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@311@01 n$2@318@01) (Set_in (inv@310@01 n$2@318@01) g0@302@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@316@01 n$2@318@01) (Set_in (inv@315@01 n$2@318@01) g1@303@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 50 | !(n$2@318@01 in g1@303@01 && Lookup(next, sm@317@01, n$2@318@01) != Null)]
(assert (not
  (and
    (Set_in n$2@318@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
(assert (=>
  (and
    (Set_in n$2@318@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null)))
  (and
    (Set_in n$2@318@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) n$2@318@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@318@01 g1@303@01)
      (not
        (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null))))
  (and
    (Set_in n$2@318@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef194|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@318@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@318@01 g1@303@01)
      (and
        (Set_in n$2@318@01 g1@303@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) n$2@318@01)))
    (or (Set_in n$2@318@01 g1@303@01) (not (Set_in n$2@318@01 g1@303@01)))
    (=>
      (and
        (Set_in n$2@318@01 g1@303@01)
        (not
          (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null)))
      (and
        (Set_in n$2@318@01 g1@303@01)
        (not
          (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) n$2@318@01)))
    (or
      (not
        (and
          (Set_in n$2@318@01 g1@303@01)
          (not
            (=
              ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01)
              $Ref.null))))
      (and
        (Set_in n$2@318@01 g1@303@01)
        (not
          (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) g1@303@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@27@409@36-aux|)))
(assert (forall ((n$2@318@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@318@01 g1@303@01)
      (and
        (Set_in n$2@318@01 g1@303@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) n$2@318@01)))
    (or (Set_in n$2@318@01 g1@303@01) (not (Set_in n$2@318@01 g1@303@01)))
    (=>
      (and
        (Set_in n$2@318@01 g1@303@01)
        (not
          (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null)))
      (and
        (Set_in n$2@318@01 g1@303@01)
        (not
          (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) n$2@318@01)))
    (or
      (not
        (and
          (Set_in n$2@318@01 g1@303@01)
          (not
            (=
              ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01)
              $Ref.null))))
      (and
        (Set_in n$2@318@01 g1@303@01)
        (not
          (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null)))))
  :pattern ((Set_in n$2@318@01 g1@303@01) ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) n$2@318@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@27@409@36-aux|)))
(assert (forall ((n$2@318@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@318@01 g1@303@01)
      (not
        (= ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) g1@303@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) g1@303@01))
  :pattern ((Set_in n$2@318@01 g1@303@01) ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$2@318@01) n$2@318@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@409@27@409@36|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))
  $Snap.unit))
; [eval] (x0 in g0)
(assert (Set_in x0@304@01 g0@302@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))
  $Snap.unit))
; [eval] (x1 in g1)
(assert (Set_in x1@305@01 g1@303@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in g0), (r in g1) } (r in g0) ==> !((r in g1)))
(declare-const r@319@01 $Ref)
(push) ; 2
; [eval] (r in g0) ==> !((r in g1))
; [eval] (r in g0)
(push) ; 3
; [then-branch: 51 | r@319@01 in g0@302@01 | live]
; [else-branch: 51 | !(r@319@01 in g0@302@01) | live]
(push) ; 4
; [then-branch: 51 | r@319@01 in g0@302@01]
(assert (Set_in r@319@01 g0@302@01))
; [eval] !((r in g1))
; [eval] (r in g1)
(pop) ; 4
(push) ; 4
; [else-branch: 51 | !(r@319@01 in g0@302@01)]
(assert (not (Set_in r@319@01 g0@302@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r@319@01 g0@302@01)) (Set_in r@319@01 g0@302@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@319@01 $Ref)) (!
  (or (not (Set_in r@319@01 g0@302@01)) (Set_in r@319@01 g0@302@01))
  :pattern ((Set_in r@319@01 g0@302@01) (Set_in r@319@01 g1@303@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@412@14@412@34-aux|)))
(assert (forall ((r@319@01 $Ref)) (!
  (=> (Set_in r@319@01 g0@302@01) (not (Set_in r@319@01 g1@303@01)))
  :pattern ((Set_in r@319@01 g0@302@01) (Set_in r@319@01 g1@303@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@412@14@412@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))))
  $Snap.unit))
; [eval] (forall r$0: Ref :: { (r$0 in g0), (r$0 in g1) } (r$0 in g1) ==> !((r$0 in g0)))
(declare-const r$0@320@01 $Ref)
(push) ; 2
; [eval] (r$0 in g1) ==> !((r$0 in g0))
; [eval] (r$0 in g1)
(push) ; 3
; [then-branch: 52 | r$0@320@01 in g1@303@01 | live]
; [else-branch: 52 | !(r$0@320@01 in g1@303@01) | live]
(push) ; 4
; [then-branch: 52 | r$0@320@01 in g1@303@01]
(assert (Set_in r$0@320@01 g1@303@01))
; [eval] !((r$0 in g0))
; [eval] (r$0 in g0)
(pop) ; 4
(push) ; 4
; [else-branch: 52 | !(r$0@320@01 in g1@303@01)]
(assert (not (Set_in r$0@320@01 g1@303@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$0@320@01 g1@303@01)) (Set_in r$0@320@01 g1@303@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$0@320@01 $Ref)) (!
  (or (not (Set_in r$0@320@01 g1@303@01)) (Set_in r$0@320@01 g1@303@01))
  :pattern ((Set_in r$0@320@01 g0@302@01) (Set_in r$0@320@01 g1@303@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@412@14@412@34-aux|)))
(assert (forall ((r$0@320@01 $Ref)) (!
  (=> (Set_in r$0@320@01 g1@303@01) (not (Set_in r$0@320@01 g0@302@01)))
  :pattern ((Set_in r$0@320@01 g0@302@01) (Set_in r$0@320@01 g1@303@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@412@14@412@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))))
  $Snap.unit))
; [eval] is_global_root(g0, x0)
(push) ; 2
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$0@321@01 $Ref)
(push) ; 3
; [eval] (n$0 in g)
(assert (Set_in n$0@321@01 g0@302@01))
(pop) ; 3
(declare-fun inv@322@01 ($Ref) $Ref)
(declare-fun img@323@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$01@321@01 $Ref) (n$02@321@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@321@01 g0@302@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$01@321@01) n$01@321@01))
      (and
        (Set_in n$02@321@01 g0@302@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n$02@321@01) n$02@321@01))
      (= n$01@321@01 n$02@321@01))
    (= n$01@321@01 n$02@321@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@321@01 $Ref)) (!
  (=>
    (Set_in n$0@321@01 g0@302@01)
    (and (= (inv@322@01 n$0@321@01) n$0@321@01) (img@323@01 n$0@321@01)))
  :pattern ((Set_in n$0@321@01 g0@302@01))
  :pattern ((inv@322@01 n$0@321@01))
  :pattern ((img@323@01 n$0@321@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@323@01 r) (Set_in (inv@322@01 r) g0@302@01))
    (= (inv@322@01 r) r))
  :pattern ((inv@322@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@322@01 r) g0@302@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) r) r))
  :pattern ((inv@322@01 r))
  :qid |quant-u-343|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@324@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@322@01 r) g0@302@01) (img@323@01 r) (= r (inv@322@01 r)))
    ($Perm.min
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@325@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@322@01 r) g0@302@01) (img@323@01 r) (= r (inv@322@01 r)))
    ($Perm.min
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@324@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (pTaken@324@01 r))
    $Perm.No)
  
  :qid |quant-u-345|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@322@01 r) g0@302@01) (img@323@01 r) (= r (inv@322@01 r)))
    (= (- $Perm.Write (pTaken@324@01 r)) $Perm.No))
  
  :qid |quant-u-346|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@326@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))
      (and (Set_in (inv@322@01 r) g0@302@01) (img@323@01 r)))
    (=>
      (and (Set_in (inv@322@01 r) g0@302@01) (img@323@01 r))
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>))))
  :qid |qp.fvfDomDef198|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@322@01 r) g0@302@01) (img@323@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@326@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@322@01 r) g0@302@01) (img@323@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@326@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef197|)))
; [eval] (forall n$1: Ref ::(n$1 in g) && n$1.next != null ==> (n$1.next in g))
(declare-const n$1@327@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$1 in g) && n$1.next != null ==> (n$1.next in g)
; [eval] (n$1 in g) && n$1.next != null
; [eval] (n$1 in g)
(push) ; 4
; [then-branch: 53 | !(n$1@327@01 in g0@302@01) | live]
; [else-branch: 53 | n$1@327@01 in g0@302@01 | live]
(push) ; 5
; [then-branch: 53 | !(n$1@327@01 in g0@302@01)]
(assert (not (Set_in n$1@327@01 g0@302@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 53 | n$1@327@01 in g0@302@01]
(assert (Set_in n$1@327@01 g0@302@01))
; [eval] n$1.next != null
(declare-const sm@328@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(declare-const pm@329@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@329@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resPrmSumDef202|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resTrgDef203|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) n$1@327@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@329@01  $FPM) n$1@327@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@329@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resPrmSumDef202|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resTrgDef203|)))
(assert (=>
  (Set_in n$1@327@01 g0@302@01)
  (and
    (Set_in n$1@327@01 g0@302@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) n$1@327@01))))
(assert (or (Set_in n$1@327@01 g0@302@01) (not (Set_in n$1@327@01 g0@302@01))))
(push) ; 4
; [then-branch: 54 | n$1@327@01 in g0@302@01 && Lookup(next, sm@328@01, n$1@327@01) != Null | live]
; [else-branch: 54 | !(n$1@327@01 in g0@302@01 && Lookup(next, sm@328@01, n$1@327@01) != Null) | live]
(push) ; 5
; [then-branch: 54 | n$1@327@01 in g0@302@01 && Lookup(next, sm@328@01, n$1@327@01) != Null]
(assert (and
  (Set_in n$1@327@01 g0@302@01)
  (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) $Ref.null))))
; [eval] (n$1.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
      (=
        ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
    :qid |qp.fvfValDef199|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
      (=
        ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
    :qid |qp.fvfValDef200|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef201|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) n$1@327@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@311@01 n$1@327@01) (Set_in (inv@310@01 n$1@327@01) g0@302@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@316@01 n$1@327@01) (Set_in (inv@315@01 n$1@327@01) g1@303@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 54 | !(n$1@327@01 in g0@302@01 && Lookup(next, sm@328@01, n$1@327@01) != Null)]
(assert (not
  (and
    (Set_in n$1@327@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert (=>
  (and
    (Set_in n$1@327@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) $Ref.null)))
  (and
    (Set_in n$1@327@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) n$1@327@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@327@01 g0@302@01)
      (not
        (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) $Ref.null))))
  (and
    (Set_in n$1@327@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) $Ref.null)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@329@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resPrmSumDef202|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resTrgDef203|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 3
(assert (not (forall ((n$1@327@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@327@01 g0@302@01)
      (not
        (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) g0@302@01))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$1@327@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@327@01 g0@302@01)
      (not
        (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) g0@302@01))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|)))
; [eval] (root in g)
(assert (is_global_root%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@326@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) g0@302@01 x0@304@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n$0@321@01 $Ref)) (!
  (=>
    (Set_in n$0@321@01 g0@302@01)
    (and (= (inv@322@01 n$0@321@01) n$0@321@01) (img@323@01 n$0@321@01)))
  :pattern ((Set_in n$0@321@01 g0@302@01))
  :pattern ((inv@322@01 n$0@321@01))
  :pattern ((img@323@01 n$0@321@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@323@01 r) (Set_in (inv@322@01 r) g0@302@01))
    (= (inv@322@01 r) r))
  :pattern ((inv@322@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))
      (and (Set_in (inv@322@01 r) g0@302@01) (img@323@01 r)))
    (=>
      (and (Set_in (inv@322@01 r) g0@302@01) (img@323@01 r))
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>))))
  :qid |qp.fvfDomDef198|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@322@01 r) g0@302@01) (img@323@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@326@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@322@01 r) g0@302@01) (img@323@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@326@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef201|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@329@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resPrmSumDef202|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resTrgDef203|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@322@01 r) g0@302@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) r) r))
    :pattern ((inv@322@01 r))
    :qid |quant-u-343|))
  (forall ((n$1@327@01 $Ref)) (!
    (=>
      (and
        (Set_in n$1@327@01 g0@302@01)
        (not
          (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$1@327@01) g0@302@01))
    
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|))
  (is_global_root%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@326@01  $FVF<next>))
      ($Snap.combine $Snap.unit $Snap.unit))) g0@302@01 x0@304@01)))
(assert (is_global_root ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@326@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) g0@302@01 x0@304@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))))))
  $Snap.unit))
; [eval] is_global_root(g1, x1)
(push) ; 2
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$0@330@01 $Ref)
(push) ; 3
; [eval] (n$0 in g)
(assert (Set_in n$0@330@01 g1@303@01))
(pop) ; 3
(declare-fun inv@331@01 ($Ref) $Ref)
(declare-fun img@332@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$01@330@01 $Ref) (n$02@330@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@330@01 g1@303@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$01@330@01) n$01@330@01))
      (and
        (Set_in n$02@330@01 g1@303@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$02@330@01) n$02@330@01))
      (= n$01@330@01 n$02@330@01))
    (= n$01@330@01 n$02@330@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@330@01 $Ref)) (!
  (=>
    (Set_in n$0@330@01 g1@303@01)
    (and (= (inv@331@01 n$0@330@01) n$0@330@01) (img@332@01 n$0@330@01)))
  :pattern ((Set_in n$0@330@01 g1@303@01))
  :pattern ((inv@331@01 n$0@330@01))
  :pattern ((img@332@01 n$0@330@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@332@01 r) (Set_in (inv@331@01 r) g1@303@01))
    (= (inv@331@01 r) r))
  :pattern ((inv@331@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@331@01 r) g1@303@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r))
  :pattern ((inv@331@01 r))
  :qid |quant-u-348|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@333@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r) (= r (inv@331@01 r)))
    ($Perm.min
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@334@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r) (= r (inv@331@01 r)))
    ($Perm.min
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@333@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (pTaken@333@01 r))
    $Perm.No)
  
  :qid |quant-u-350|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@333@01 r) $Perm.No)
  
  :qid |quant-u-351|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r) (= r (inv@331@01 r)))
    (= (- $Perm.Write (pTaken@333@01 r)) $Perm.No))
  
  :qid |quant-u-352|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (pTaken@334@01 r))
    $Perm.No)
  
  :qid |quant-u-353|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r) (= r (inv@331@01 r)))
    (= (- (- $Perm.Write (pTaken@333@01 r)) (pTaken@334@01 r)) $Perm.No))
  
  :qid |quant-u-354|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@335@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@335@01  $FVF<next>)))
      (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r)))
    (=>
      (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r))
      (Set_in r ($FVF.domain_next (as sm@335@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@335@01  $FVF<next>))))
  :qid |qp.fvfDomDef207|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@335@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@335@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@335@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@335@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef205|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@335@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef206|)))
; [eval] (forall n$1: Ref ::(n$1 in g) && n$1.next != null ==> (n$1.next in g))
(declare-const n$1@336@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$1 in g) && n$1.next != null ==> (n$1.next in g)
; [eval] (n$1 in g) && n$1.next != null
; [eval] (n$1 in g)
(push) ; 4
; [then-branch: 55 | !(n$1@336@01 in g1@303@01) | live]
; [else-branch: 55 | n$1@336@01 in g1@303@01 | live]
(push) ; 5
; [then-branch: 55 | !(n$1@336@01 in g1@303@01)]
(assert (not (Set_in n$1@336@01 g1@303@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 55 | n$1@336@01 in g1@303@01]
(assert (Set_in n$1@336@01 g1@303@01))
; [eval] n$1.next != null
(declare-const sm@337@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef210|)))
(declare-const pm@338@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@338@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@338@01  $FPM) r))
  :qid |qp.resPrmSumDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@338@01  $FPM) r))
  :qid |qp.resTrgDef212|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) n$1@336@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@338@01  $FPM) n$1@336@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef210|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@338@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@338@01  $FPM) r))
  :qid |qp.resPrmSumDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@338@01  $FPM) r))
  :qid |qp.resTrgDef212|)))
(assert (=>
  (Set_in n$1@336@01 g1@303@01)
  (and
    (Set_in n$1@336@01 g1@303@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) n$1@336@01))))
(assert (or (Set_in n$1@336@01 g1@303@01) (not (Set_in n$1@336@01 g1@303@01))))
(push) ; 4
; [then-branch: 56 | n$1@336@01 in g1@303@01 && Lookup(next, sm@337@01, n$1@336@01) != Null | live]
; [else-branch: 56 | !(n$1@336@01 in g1@303@01 && Lookup(next, sm@337@01, n$1@336@01) != Null) | live]
(push) ; 5
; [then-branch: 56 | n$1@336@01 in g1@303@01 && Lookup(next, sm@337@01, n$1@336@01) != Null]
(assert (and
  (Set_in n$1@336@01 g1@303@01)
  (not (= ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) $Ref.null))))
; [eval] (n$1.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
      (=
        ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
    :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
    :qid |qp.fvfValDef208|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
      (=
        ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
    :qid |qp.fvfValDef209|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef210|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) n$1@336@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@311@01 n$1@336@01) (Set_in (inv@310@01 n$1@336@01) g0@302@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@316@01 n$1@336@01) (Set_in (inv@315@01 n$1@336@01) g1@303@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 56 | !(n$1@336@01 in g1@303@01 && Lookup(next, sm@337@01, n$1@336@01) != Null)]
(assert (not
  (and
    (Set_in n$1@336@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef210|)))
(assert (=>
  (and
    (Set_in n$1@336@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) $Ref.null)))
  (and
    (Set_in n$1@336@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) n$1@336@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@336@01 g1@303@01)
      (not
        (= ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) $Ref.null))))
  (and
    (Set_in n$1@336@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) $Ref.null)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef210|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@338@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@338@01  $FPM) r))
  :qid |qp.resPrmSumDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@338@01  $FPM) r))
  :qid |qp.resTrgDef212|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 3
(assert (not (forall ((n$1@336@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@336@01 g1@303@01)
      (not
        (= ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) g1@303@01))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$1@336@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@336@01 g1@303@01)
      (not
        (= ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) g1@303@01))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|)))
; [eval] (root in g)
(assert (is_global_root%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@335@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) g1@303@01 x1@305@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n$0@330@01 $Ref)) (!
  (=>
    (Set_in n$0@330@01 g1@303@01)
    (and (= (inv@331@01 n$0@330@01) n$0@330@01) (img@332@01 n$0@330@01)))
  :pattern ((Set_in n$0@330@01 g1@303@01))
  :pattern ((inv@331@01 n$0@330@01))
  :pattern ((img@332@01 n$0@330@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@332@01 r) (Set_in (inv@331@01 r) g1@303@01))
    (= (inv@331@01 r) r))
  :pattern ((inv@331@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@335@01  $FVF<next>)))
      (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r)))
    (=>
      (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r))
      (Set_in r ($FVF.domain_next (as sm@335@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@335@01  $FVF<next>))))
  :qid |qp.fvfDomDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@335@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@335@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g1@303@01) (img@332@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@335@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@335@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef205|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@335@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@337@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@337@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef210|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@338@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@338@01  $FPM) r))
  :qid |qp.resPrmSumDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@338@01  $FPM) r))
  :qid |qp.resTrgDef212|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@331@01 r) g1@303@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r))
    :pattern ((inv@331@01 r))
    :qid |quant-u-348|))
  (forall ((n$1@336@01 $Ref)) (!
    (=>
      (and
        (Set_in n$1@336@01 g1@303@01)
        (not
          (= ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@337@01  $FVF<next>) n$1@336@01) g1@303@01))
    
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@332@14@332@22|))
  (is_global_root%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@335@01  $FVF<next>))
      ($Snap.combine $Snap.unit $Snap.unit))) g1@303@01 x1@305@01)))
(assert (is_global_root ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@335@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) g1@303@01 x1@305@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))))))
  $Snap.unit))
; [eval] acyclic_list_segment(g0)
(push) ; 2
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n@339@01 $Ref)
(push) ; 3
; [eval] (n in g)
(assert (Set_in n@339@01 g0@302@01))
(pop) ; 3
(declare-fun inv@340@01 ($Ref) $Ref)
(declare-fun img@341@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@339@01 $Ref) (n2@339@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@339@01 g0@302@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) n1@339@01) n1@339@01))
      (and
        (Set_in n2@339@01 g0@302@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) n2@339@01) n2@339@01))
      (= n1@339@01 n2@339@01))
    (= n1@339@01 n2@339@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@339@01 $Ref)) (!
  (=>
    (Set_in n@339@01 g0@302@01)
    (and (= (inv@340@01 n@339@01) n@339@01) (img@341@01 n@339@01)))
  :pattern ((Set_in n@339@01 g0@302@01))
  :pattern ((inv@340@01 n@339@01))
  :pattern ((img@341@01 n@339@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@341@01 r) (Set_in (inv@340@01 r) g0@302@01))
    (= (inv@340@01 r) r))
  :pattern ((inv@340@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@340@01 r) g0@302@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) r) r))
  :pattern ((inv@340@01 r))
  :qid |quant-u-356|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@342@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@340@01 r) g0@302@01) (img@341@01 r) (= r (inv@340@01 r)))
    ($Perm.min
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@343@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@340@01 r) g0@302@01) (img@341@01 r) (= r (inv@340@01 r)))
    ($Perm.min
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@342@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (pTaken@342@01 r))
    $Perm.No)
  
  :qid |quant-u-358|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@340@01 r) g0@302@01) (img@341@01 r) (= r (inv@340@01 r)))
    (= (- $Perm.Write (pTaken@342@01 r)) $Perm.No))
  
  :qid |quant-u-359|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@344@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and (Set_in (inv@340@01 r) g0@302@01) (img@341@01 r)))
    (=>
      (and (Set_in (inv@340@01 r) g0@302@01) (img@341@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef216|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@340@01 r) g0@302@01) (img@341@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@340@01 r) g0@302@01) (img@341@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef215|)))
; [eval] (forall n$0: Ref ::(n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@345@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 4
; [then-branch: 57 | !(n$0@345@01 in g0@302@01) | live]
; [else-branch: 57 | n$0@345@01 in g0@302@01 | live]
(push) ; 5
; [then-branch: 57 | !(n$0@345@01 in g0@302@01)]
(assert (not (Set_in n$0@345@01 g0@302@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 57 | n$0@345@01 in g0@302@01]
(assert (Set_in n$0@345@01 g0@302@01))
; [eval] n$0.next != null
(declare-const sm@346@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(declare-const pm@347@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@347@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@347@01  $FPM) r))
  :qid |qp.resPrmSumDef220|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@347@01  $FPM) r))
  :qid |qp.resTrgDef221|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) n$0@345@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@347@01  $FPM) n$0@345@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@347@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@347@01  $FPM) r))
  :qid |qp.resPrmSumDef220|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@347@01  $FPM) r))
  :qid |qp.resTrgDef221|)))
(assert (=>
  (Set_in n$0@345@01 g0@302@01)
  (and
    (Set_in n$0@345@01 g0@302@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) n$0@345@01))))
(assert (or (Set_in n$0@345@01 g0@302@01) (not (Set_in n$0@345@01 g0@302@01))))
(push) ; 4
; [then-branch: 58 | n$0@345@01 in g0@302@01 && Lookup(next, sm@346@01, n$0@345@01) != Null | live]
; [else-branch: 58 | !(n$0@345@01 in g0@302@01 && Lookup(next, sm@346@01, n$0@345@01) != Null) | live]
(push) ; 5
; [then-branch: 58 | n$0@345@01 in g0@302@01 && Lookup(next, sm@346@01, n$0@345@01) != Null]
(assert (and
  (Set_in n$0@345@01 g0@302@01)
  (not (= ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
      (=
        ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
    :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
    :qid |qp.fvfValDef217|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
      (=
        ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
    :qid |qp.fvfValDef218|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef219|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) n$0@345@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@311@01 n$0@345@01) (Set_in (inv@310@01 n$0@345@01) g0@302@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@316@01 n$0@345@01) (Set_in (inv@315@01 n$0@345@01) g1@303@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 58 | !(n$0@345@01 in g0@302@01 && Lookup(next, sm@346@01, n$0@345@01) != Null)]
(assert (not
  (and
    (Set_in n$0@345@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (=>
  (and
    (Set_in n$0@345@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) $Ref.null)))
  (and
    (Set_in n$0@345@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) n$0@345@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@345@01 g0@302@01)
      (not
        (= ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) $Ref.null))))
  (and
    (Set_in n$0@345@01 g0@302@01)
    (not (= ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) $Ref.null)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@347@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@347@01  $FPM) r))
  :qid |qp.resPrmSumDef220|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@347@01  $FPM) r))
  :qid |qp.resTrgDef221|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 3
(assert (not (forall ((n$0@345@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@345@01 g0@302@01)
      (not
        (= ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) g0@302@01))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$0@345@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@345@01 g0@302@01)
      (not
        (= ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) g0@302@01))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|)))
(assert (acyclic_list_segment%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>))
    $Snap.unit)) g0@302@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@339@01 $Ref)) (!
  (=>
    (Set_in n@339@01 g0@302@01)
    (and (= (inv@340@01 n@339@01) n@339@01) (img@341@01 n@339@01)))
  :pattern ((Set_in n@339@01 g0@302@01))
  :pattern ((inv@340@01 n@339@01))
  :pattern ((img@341@01 n@339@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@341@01 r) (Set_in (inv@340@01 r) g0@302@01))
    (= (inv@340@01 r) r))
  :pattern ((inv@340@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and (Set_in (inv@340@01 r) g0@302@01) (img@341@01 r)))
    (=>
      (and (Set_in (inv@340@01 r) g0@302@01) (img@341@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef216|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@340@01 r) g0@302@01) (img@341@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@340@01 r) g0@302@01) (img@341@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef215|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@346@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@346@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@347@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@347@01  $FPM) r))
  :qid |qp.resPrmSumDef220|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@347@01  $FPM) r))
  :qid |qp.resTrgDef221|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@340@01 r) g0@302@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@337@01  $FVF<next>) r) r))
    :pattern ((inv@340@01 r))
    :qid |quant-u-356|))
  (forall ((n$0@345@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@345@01 g0@302@01)
        (not
          (= ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@346@01  $FVF<next>) n$0@345@01) g0@302@01))
    
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))
  (acyclic_list_segment%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>))
      $Snap.unit)) g0@302@01)))
(assert (acyclic_list_segment ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>))
    $Snap.unit)) g0@302@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))))))))
  $Snap.unit))
; [eval] acyclic_list_segment(g1)
(push) ; 2
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n@348@01 $Ref)
(push) ; 3
; [eval] (n in g)
(assert (Set_in n@348@01 g1@303@01))
(pop) ; 3
(declare-fun inv@349@01 ($Ref) $Ref)
(declare-fun img@350@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@348@01 $Ref) (n2@348@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@348@01 g1@303@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) n1@348@01) n1@348@01))
      (and
        (Set_in n2@348@01 g1@303@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) n2@348@01) n2@348@01))
      (= n1@348@01 n2@348@01))
    (= n1@348@01 n2@348@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@348@01 $Ref)) (!
  (=>
    (Set_in n@348@01 g1@303@01)
    (and (= (inv@349@01 n@348@01) n@348@01) (img@350@01 n@348@01)))
  :pattern ((Set_in n@348@01 g1@303@01))
  :pattern ((inv@349@01 n@348@01))
  :pattern ((img@350@01 n@348@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@350@01 r) (Set_in (inv@349@01 r) g1@303@01))
    (= (inv@349@01 r) r))
  :pattern ((inv@349@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@349@01 r) g1@303@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) r) r))
  :pattern ((inv@349@01 r))
  :qid |quant-u-361|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@351@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r) (= r (inv@349@01 r)))
    ($Perm.min
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@352@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r) (= r (inv@349@01 r)))
    ($Perm.min
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@351@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (pTaken@351@01 r))
    $Perm.No)
  
  :qid |quant-u-363|))))
(check-sat)
; unknown
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@351@01 r) $Perm.No)
  
  :qid |quant-u-364|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r) (= r (inv@349@01 r)))
    (= (- $Perm.Write (pTaken@351@01 r)) $Perm.No))
  
  :qid |quant-u-365|))))
(check-sat)
; unknown
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (pTaken@352@01 r))
    $Perm.No)
  
  :qid |quant-u-366|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r) (= r (inv@349@01 r)))
    (= (- (- $Perm.Write (pTaken@351@01 r)) (pTaken@352@01 r)) $Perm.No))
  
  :qid |quant-u-367|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@353@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@353@01  $FVF<next>)))
      (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r)))
    (=>
      (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r))
      (Set_in r ($FVF.domain_next (as sm@353@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@353@01  $FVF<next>))))
  :qid |qp.fvfDomDef225|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@353@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@353@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@353@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@353@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@353@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef224|)))
; [eval] (forall n$0: Ref ::(n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@354@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 4
; [then-branch: 59 | !(n$0@354@01 in g1@303@01) | live]
; [else-branch: 59 | n$0@354@01 in g1@303@01 | live]
(push) ; 5
; [then-branch: 59 | !(n$0@354@01 in g1@303@01)]
(assert (not (Set_in n$0@354@01 g1@303@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 59 | n$0@354@01 in g1@303@01]
(assert (Set_in n$0@354@01 g1@303@01))
; [eval] n$0.next != null
(declare-const sm@355@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef228|)))
(declare-const pm@356@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@356@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@356@01  $FPM) r))
  :qid |qp.resPrmSumDef229|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@356@01  $FPM) r))
  :qid |qp.resTrgDef230|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) n$0@354@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@356@01  $FPM) n$0@354@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef228|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@356@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@356@01  $FPM) r))
  :qid |qp.resPrmSumDef229|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@356@01  $FPM) r))
  :qid |qp.resTrgDef230|)))
(assert (=>
  (Set_in n$0@354@01 g1@303@01)
  (and
    (Set_in n$0@354@01 g1@303@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) n$0@354@01))))
(assert (or (Set_in n$0@354@01 g1@303@01) (not (Set_in n$0@354@01 g1@303@01))))
(push) ; 4
; [then-branch: 60 | n$0@354@01 in g1@303@01 && Lookup(next, sm@355@01, n$0@354@01) != Null | live]
; [else-branch: 60 | !(n$0@354@01 in g1@303@01 && Lookup(next, sm@355@01, n$0@354@01) != Null) | live]
(push) ; 5
; [then-branch: 60 | n$0@354@01 in g1@303@01 && Lookup(next, sm@355@01, n$0@354@01) != Null]
(assert (and
  (Set_in n$0@354@01 g1@303@01)
  (not (= ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
      (=
        ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
    :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
    :qid |qp.fvfValDef226|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
      (=
        ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
    :qid |qp.fvfValDef227|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef228|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) n$0@354@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@311@01 n$0@354@01) (Set_in (inv@310@01 n$0@354@01) g0@302@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@316@01 n$0@354@01) (Set_in (inv@315@01 n$0@354@01) g1@303@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 60 | !(n$0@354@01 in g1@303@01 && Lookup(next, sm@355@01, n$0@354@01) != Null)]
(assert (not
  (and
    (Set_in n$0@354@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef228|)))
(assert (=>
  (and
    (Set_in n$0@354@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) $Ref.null)))
  (and
    (Set_in n$0@354@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) n$0@354@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@354@01 g1@303@01)
      (not
        (= ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) $Ref.null))))
  (and
    (Set_in n$0@354@01 g1@303@01)
    (not (= ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) $Ref.null)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef228|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@356@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@356@01  $FPM) r))
  :qid |qp.resPrmSumDef229|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@356@01  $FPM) r))
  :qid |qp.resTrgDef230|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 3
(assert (not (forall ((n$0@354@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@354@01 g1@303@01)
      (not
        (= ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) g1@303@01))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$0@354@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@354@01 g1@303@01)
      (not
        (= ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) g1@303@01))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|)))
(assert (acyclic_list_segment%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@353@01  $FVF<next>))
    $Snap.unit)) g1@303@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@348@01 $Ref)) (!
  (=>
    (Set_in n@348@01 g1@303@01)
    (and (= (inv@349@01 n@348@01) n@348@01) (img@350@01 n@348@01)))
  :pattern ((Set_in n@348@01 g1@303@01))
  :pattern ((inv@349@01 n@348@01))
  :pattern ((img@350@01 n@348@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@350@01 r) (Set_in (inv@349@01 r) g1@303@01))
    (= (inv@349@01 r) r))
  :pattern ((inv@349@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@353@01  $FVF<next>)))
      (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r)))
    (=>
      (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r))
      (Set_in r ($FVF.domain_next (as sm@353@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@353@01  $FVF<next>))))
  :qid |qp.fvfDomDef225|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@353@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@353@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@349@01 r) g1@303@01) (img@350@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@353@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@353@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@353@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@355@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@355@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef228|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@356@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@356@01  $FPM) r))
  :qid |qp.resPrmSumDef229|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@356@01  $FPM) r))
  :qid |qp.resTrgDef230|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@349@01 r) g1@303@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@346@01  $FVF<next>) r) r))
    :pattern ((inv@349@01 r))
    :qid |quant-u-361|))
  (forall ((n$0@354@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@354@01 g1@303@01)
        (not
          (= ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@355@01  $FVF<next>) n$0@354@01) g1@303@01))
    
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))
  (acyclic_list_segment%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@353@01  $FVF<next>))
      $Snap.unit)) g1@303@01)))
(assert (acyclic_list_segment ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@353@01  $FVF<next>))
    $Snap.unit)) g1@303@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@357@01 $Snap)
(assert (= $t@357@01 ($Snap.combine ($Snap.first $t@357@01) ($Snap.second $t@357@01))))
(assert (= ($Snap.first $t@357@01) $Snap.unit))
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(assert (not (Set_in $Ref.null (Set_union g0@302@01 g1@303@01))))
(assert (=
  ($Snap.second $t@357@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@357@01))
    ($Snap.second ($Snap.second $t@357@01)))))
(declare-const n$3@358@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$3@358@01 (Set_union g0@302@01 g1@303@01)))
(declare-const sm@359@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@360@01 ($Ref) $Ref)
(declare-fun img@361@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@358@01 $Ref) (n$32@358@01 $Ref)) (!
  (=>
    (and
      (Set_in n$31@358@01 (Set_union g0@302@01 g1@303@01))
      (Set_in n$32@358@01 (Set_union g0@302@01 g1@303@01))
      (= n$31@358@01 n$32@358@01))
    (= n$31@358@01 n$32@358@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@358@01 $Ref)) (!
  (=>
    (Set_in n$3@358@01 (Set_union g0@302@01 g1@303@01))
    (and (= (inv@360@01 n$3@358@01) n$3@358@01) (img@361@01 n$3@358@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$3@358@01) n$3@358@01))
  :qid |quant-u-369|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@361@01 r) (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
    (= (inv@360@01 r) r))
  :pattern ((inv@360@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@358@01 $Ref)) (!
  (=>
    (Set_in n$3@358@01 (Set_union g0@302@01 g1@303@01))
    (not (= n$3@358@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$3@358@01) n$3@358@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@362@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@361@01 r) (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef233|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
  :pattern ((inv@360@01 r))
  :qid |quant-u-370|)))
(assert (=
  ($Snap.second ($Snap.second $t@357@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@357@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@357@01))) $Snap.unit))
; [eval] (forall n$4: Ref :: { (n$4.next in (g0 union g1)) } { (n$4 in (g0 union g1)), n$4.next } (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1)))
(declare-const n$4@363@01 $Ref)
(push) ; 3
; [eval] (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1))
; [eval] (n$4 in (g0 union g1)) && n$4.next != null
; [eval] (n$4 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 61 | !(n$4@363@01 in g0@302@01 ∪ g1@303@01) | live]
; [else-branch: 61 | n$4@363@01 in g0@302@01 ∪ g1@303@01 | live]
(push) ; 5
; [then-branch: 61 | !(n$4@363@01 in g0@302@01 ∪ g1@303@01)]
(assert (not (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 61 | n$4@363@01 in g0@302@01 ∪ g1@303@01]
(assert (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@361@01 r)
        (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
      (=
        ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
    :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef233|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) n$4@363@01))
(push) ; 6
(assert (not (and
  (img@361@01 n$4@363@01)
  (Set_in (inv@360@01 n$4@363@01) (Set_union g0@302@01 g1@303@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@361@01 r) (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef233|)))
(assert (=>
  (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
  (and
    (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) n$4@363@01))))
(assert (or
  (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
  (not (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01)))))
(push) ; 4
; [then-branch: 62 | n$4@363@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@362@01, n$4@363@01) != Null | live]
; [else-branch: 62 | !(n$4@363@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@362@01, n$4@363@01) != Null) | live]
(push) ; 5
; [then-branch: 62 | n$4@363@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@362@01, n$4@363@01) != Null]
(assert (and
  (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
  (not (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null))))
; [eval] (n$4.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@361@01 r)
        (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
      (=
        ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
    :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
    :qid |qp.fvfValDef232|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef233|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) n$4@363@01))
(push) ; 6
(assert (not (and
  (img@361@01 n$4@363@01)
  (Set_in (inv@360@01 n$4@363@01) (Set_union g0@302@01 g1@303@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 62 | !(n$4@363@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@362@01, n$4@363@01) != Null)]
(assert (not
  (and
    (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@361@01 r) (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef233|)))
(assert (=>
  (and
    (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null)))
  (and
    (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) n$4@363@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
      (not
        (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null))))
  (and
    (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@361@01 r) (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@362@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@362@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef233|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@363@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
      (and
        (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) n$4@363@01)))
    (or
      (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
      (not (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))))
    (=>
      (and
        (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null)))
      (and
        (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) n$4@363@01)))
    (or
      (not
        (and
          (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
          (not
            (=
              ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01)
              $Ref.null))))
      (and
        (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) (Set_union g0@302@01 g1@303@01)))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31-aux|)))
(assert (forall ((n$4@363@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
      (and
        (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) n$4@363@01)))
    (or
      (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
      (not (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))))
    (=>
      (and
        (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null)))
      (and
        (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) n$4@363@01)))
    (or
      (not
        (and
          (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
          (not
            (=
              ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01)
              $Ref.null))))
      (and
        (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null)))))
  :pattern ((Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) n$4@363@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31-aux|)))
(assert (forall ((n$4@363@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01))
      (not
        (= ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) (Set_union g0@302@01 g1@303@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) (Set_union g0@302@01 g1@303@01)))
  :pattern ((Set_in n$4@363@01 (Set_union g0@302@01 g1@303@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$4@363@01) n$4@363@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@357@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@357@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@357@01))))
  $Snap.unit))
; [eval] is_global_sroot((g0 union g1), Set(x0, x1))
; [eval] (g0 union g1)
; [eval] Set(x0, x1)
(push) ; 3
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$0@364@01 $Ref)
(push) ; 4
; [eval] (n$0 in g)
(assert (Set_in n$0@364@01 (Set_union g0@302@01 g1@303@01)))
(pop) ; 4
(declare-fun inv@365@01 ($Ref) $Ref)
(declare-fun img@366@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$01@364@01 $Ref) (n$02@364@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@364@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$01@364@01) n$01@364@01))
      (and
        (Set_in n$02@364@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) n$02@364@01) n$02@364@01))
      (= n$01@364@01 n$02@364@01))
    (= n$01@364@01 n$02@364@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@364@01 $Ref)) (!
  (=>
    (Set_in n$0@364@01 (Set_union g0@302@01 g1@303@01))
    (and (= (inv@365@01 n$0@364@01) n$0@364@01) (img@366@01 n$0@364@01)))
  :pattern ((Set_in n$0@364@01 (Set_union g0@302@01 g1@303@01)))
  :pattern ((inv@365@01 n$0@364@01))
  :pattern ((img@366@01 n$0@364@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@366@01 r) (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01)))
    (= (inv@365@01 r) r))
  :pattern ((inv@365@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
  :pattern ((inv@365@01 r))
  :qid |quant-u-372|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@367@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01))
      (img@366@01 r)
      (= r (inv@365@01 r)))
    ($Perm.min
      (ite
        (and
          (img@361@01 r)
          (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@361@01 r)
          (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@367@01 r))
    $Perm.No)
  
  :qid |quant-u-374|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01))
      (img@366@01 r)
      (= r (inv@365@01 r)))
    (= (- $Perm.Write (pTaken@367@01 r)) $Perm.No))
  
  :qid |quant-u-375|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@368@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))
      (and
        (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01))
        (img@366@01 r)))
    (=>
      (and
        (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01))
        (img@366@01 r))
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>))))
  :qid |qp.fvfDomDef236|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01))
        (img@366@01 r))
      (and
        (img@361@01 r)
        (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01))))
    (=
      ($FVF.lookup_next (as sm@368@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef234|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef235|)))
; [eval] (forall n$1: Ref ::(n$1 in g) && n$1.next != null ==> (n$1.next in g))
(declare-const n$1@369@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$1 in g) && n$1.next != null ==> (n$1.next in g)
; [eval] (n$1 in g) && n$1.next != null
; [eval] (n$1 in g)
(push) ; 5
; [then-branch: 63 | !(n$1@369@01 in g0@302@01 ∪ g1@303@01) | live]
; [else-branch: 63 | n$1@369@01 in g0@302@01 ∪ g1@303@01 | live]
(push) ; 6
; [then-branch: 63 | !(n$1@369@01 in g0@302@01 ∪ g1@303@01)]
(assert (not (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 63 | n$1@369@01 in g0@302@01 ∪ g1@303@01]
(assert (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01)))
; [eval] n$1.next != null
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01) n$1@369@01))
(push) ; 7
(assert (not (and
  (img@361@01 n$1@369@01)
  (Set_in (inv@360@01 n$1@369@01) (Set_union g0@302@01 g1@303@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
  (and
    (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01) n$1@369@01))))
(assert (or
  (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
  (not (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01)))))
(push) ; 5
; [then-branch: 64 | n$1@369@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, First:(Second:($t@357@01)), n$1@369@01) != Null | live]
; [else-branch: 64 | !(n$1@369@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, First:(Second:($t@357@01)), n$1@369@01) != Null) | live]
(push) ; 6
; [then-branch: 64 | n$1@369@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, First:(Second:($t@357@01)), n$1@369@01) != Null]
(assert (and
  (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
  (not
    (=
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01)
      $Ref.null))))
; [eval] (n$1.next in g)
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01) n$1@369@01))
(push) ; 7
(assert (not (and
  (img@361@01 n$1@369@01)
  (Set_in (inv@360@01 n$1@369@01) (Set_union g0@302@01 g1@303@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 64 | !(n$1@369@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, First:(Second:($t@357@01)), n$1@369@01) != Null)]
(assert (not
  (and
    (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01)
        $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01)
        $Ref.null)))
  (and
    (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01)
        $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01) n$1@369@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01)
          $Ref.null))))
  (and
    (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01)
        $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$1@369@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01) (Set_union g0@302@01 g1@303@01)))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$1@369@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01) (Set_union g0@302@01 g1@303@01)))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|)))
; [eval] (roots subset g)
(push) ; 4
(assert (not (Set_subset (Set_unionone (Set_singleton x0@304@01) x1@305@01) (Set_union g0@302@01 g1@303@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (Set_subset (Set_unionone (Set_singleton x0@304@01) x1@305@01) (Set_union g0@302@01 g1@303@01)))
(assert (is_global_sroot%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@368@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@302@01 g1@303@01) (Set_unionone (Set_singleton x0@304@01) x1@305@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n$0@364@01 $Ref)) (!
  (=>
    (Set_in n$0@364@01 (Set_union g0@302@01 g1@303@01))
    (and (= (inv@365@01 n$0@364@01) n$0@364@01) (img@366@01 n$0@364@01)))
  :pattern ((Set_in n$0@364@01 (Set_union g0@302@01 g1@303@01)))
  :pattern ((inv@365@01 n$0@364@01))
  :pattern ((img@366@01 n$0@364@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@366@01 r) (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01)))
    (= (inv@365@01 r) r))
  :pattern ((inv@365@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))
      (and
        (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01))
        (img@366@01 r)))
    (=>
      (and
        (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01))
        (img@366@01 r))
      (Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@368@01  $FVF<next>))))
  :qid |qp.fvfDomDef236|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01))
        (img@366@01 r))
      (and
        (img@361@01 r)
        (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01))))
    (=
      ($FVF.lookup_next (as sm@368@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef234|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@368@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef235|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@365@01 r) (Set_union g0@302@01 g1@303@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@362@01  $FVF<next>) r) r))
    :pattern ((inv@365@01 r))
    :qid |quant-u-372|))
  (forall ((n$1@369@01 $Ref)) (!
    (=>
      (and
        (Set_in n$1@369@01 (Set_union g0@302@01 g1@303@01))
        (not
          (=
            ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01)
            $Ref.null)))
      (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$1@369@01) (Set_union g0@302@01 g1@303@01)))
    
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|))
  (Set_subset (Set_unionone (Set_singleton x0@304@01) x1@305@01) (Set_union g0@302@01 g1@303@01))
  (is_global_sroot%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@368@01  $FVF<next>))
      ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@302@01 g1@303@01) (Set_unionone (Set_singleton x0@304@01) x1@305@01))))
(assert (is_global_sroot ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@368@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@302@01 g1@303@01) (Set_unionone (Set_singleton x0@304@01) x1@305@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))
  $Snap.unit))
; [eval] acyclic_list_segment((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n@370@01 $Ref)
(push) ; 4
; [eval] (n in g)
(assert (Set_in n@370@01 (Set_union g0@302@01 g1@303@01)))
(pop) ; 4
(declare-fun inv@371@01 ($Ref) $Ref)
(declare-fun img@372@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@373@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@361@01 r) (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@373@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@373@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef237|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@373@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef238|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@370@01 $Ref) (n2@370@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@370@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@373@01  $FVF<next>) n1@370@01) n1@370@01))
      (and
        (Set_in n2@370@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@373@01  $FVF<next>) n2@370@01) n2@370@01))
      (= n1@370@01 n2@370@01))
    (= n1@370@01 n2@370@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@370@01 $Ref)) (!
  (=>
    (Set_in n@370@01 (Set_union g0@302@01 g1@303@01))
    (and (= (inv@371@01 n@370@01) n@370@01) (img@372@01 n@370@01)))
  :pattern ((Set_in n@370@01 (Set_union g0@302@01 g1@303@01)))
  :pattern ((inv@371@01 n@370@01))
  :pattern ((img@372@01 n@370@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@372@01 r) (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01)))
    (= (inv@371@01 r) r))
  :pattern ((inv@371@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@373@01  $FVF<next>) r) r))
  :pattern ((inv@371@01 r))
  :qid |quant-u-377|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@374@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01))
      (img@372@01 r)
      (= r (inv@371@01 r)))
    ($Perm.min
      (ite
        (and
          (img@361@01 r)
          (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@361@01 r)
          (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@374@01 r))
    $Perm.No)
  
  :qid |quant-u-379|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01))
      (img@372@01 r)
      (= r (inv@371@01 r)))
    (= (- $Perm.Write (pTaken@374@01 r)) $Perm.No))
  
  :qid |quant-u-380|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@375@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@375@01  $FVF<next>)))
      (and
        (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01))
        (img@372@01 r)))
    (=>
      (and
        (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01))
        (img@372@01 r))
      (Set_in r ($FVF.domain_next (as sm@375@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@375@01  $FVF<next>))))
  :qid |qp.fvfDomDef241|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01))
        (img@372@01 r))
      (and
        (img@361@01 r)
        (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01))))
    (=
      ($FVF.lookup_next (as sm@375@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@375@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@375@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef240|)))
; [eval] (forall n$0: Ref ::(n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@376@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 5
; [then-branch: 65 | !(n$0@376@01 in g0@302@01 ∪ g1@303@01) | live]
; [else-branch: 65 | n$0@376@01 in g0@302@01 ∪ g1@303@01 | live]
(push) ; 6
; [then-branch: 65 | !(n$0@376@01 in g0@302@01 ∪ g1@303@01)]
(assert (not (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 65 | n$0@376@01 in g0@302@01 ∪ g1@303@01]
(assert (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01)))
; [eval] n$0.next != null
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01) n$0@376@01))
(push) ; 7
(assert (not (and
  (img@361@01 n$0@376@01)
  (Set_in (inv@360@01 n$0@376@01) (Set_union g0@302@01 g1@303@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
  (and
    (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01) n$0@376@01))))
(assert (or
  (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
  (not (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01)))))
(push) ; 5
; [then-branch: 66 | n$0@376@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, First:(Second:($t@357@01)), n$0@376@01) != Null | live]
; [else-branch: 66 | !(n$0@376@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, First:(Second:($t@357@01)), n$0@376@01) != Null) | live]
(push) ; 6
; [then-branch: 66 | n$0@376@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, First:(Second:($t@357@01)), n$0@376@01) != Null]
(assert (and
  (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
  (not
    (=
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01)
      $Ref.null))))
; [eval] (n$0.next in g)
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01) n$0@376@01))
(push) ; 7
(assert (not (and
  (img@361@01 n$0@376@01)
  (Set_in (inv@360@01 n$0@376@01) (Set_union g0@302@01 g1@303@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 66 | !(n$0@376@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, First:(Second:($t@357@01)), n$0@376@01) != Null)]
(assert (not
  (and
    (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01)
        $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01)
        $Ref.null)))
  (and
    (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01)
        $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01) n$0@376@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01)
          $Ref.null))))
  (and
    (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01)
        $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$0@376@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01) (Set_union g0@302@01 g1@303@01)))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$0@376@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01) (Set_union g0@302@01 g1@303@01)))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|)))
(assert (acyclic_list_segment%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@375@01  $FVF<next>))
    $Snap.unit)) (Set_union g0@302@01 g1@303@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@361@01 r) (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@373@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@373@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef237|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@373@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef238|)))
(assert (forall ((n@370@01 $Ref)) (!
  (=>
    (Set_in n@370@01 (Set_union g0@302@01 g1@303@01))
    (and (= (inv@371@01 n@370@01) n@370@01) (img@372@01 n@370@01)))
  :pattern ((Set_in n@370@01 (Set_union g0@302@01 g1@303@01)))
  :pattern ((inv@371@01 n@370@01))
  :pattern ((img@372@01 n@370@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@372@01 r) (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01)))
    (= (inv@371@01 r) r))
  :pattern ((inv@371@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@375@01  $FVF<next>)))
      (and
        (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01))
        (img@372@01 r)))
    (=>
      (and
        (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01))
        (img@372@01 r))
      (Set_in r ($FVF.domain_next (as sm@375@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@375@01  $FVF<next>))))
  :qid |qp.fvfDomDef241|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01))
        (img@372@01 r))
      (and
        (img@361@01 r)
        (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01))))
    (=
      ($FVF.lookup_next (as sm@375@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@375@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@375@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef240|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@371@01 r) (Set_union g0@302@01 g1@303@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@373@01  $FVF<next>) r) r))
    :pattern ((inv@371@01 r))
    :qid |quant-u-377|))
  (forall ((n$0@376@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@376@01 (Set_union g0@302@01 g1@303@01))
        (not
          (=
            ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01)
            $Ref.null)))
      (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) n$0@376@01) (Set_union g0@302@01 g1@303@01)))
    
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@346@14@346@22|))
  (acyclic_list_segment%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@375@01  $FVF<next>))
      $Snap.unit)) (Set_union g0@302@01 g1@303@01))))
(assert (acyclic_list_segment ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@375@01  $FVF<next>))
    $Snap.unit)) (Set_union g0@302@01 g1@303@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))
  $Snap.unit))
; [eval] unshared_graph($$((g0 union g1)))
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@377@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@377@01 (Set_union g0@302@01 g1@303@01)))
(pop) ; 4
(declare-fun inv@378@01 ($Ref) $Ref)
(declare-fun img@379@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@380@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@361@01 r) (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef243|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@377@01 $Ref) (n2@377@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@377@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) n1@377@01) n1@377@01))
      (and
        (Set_in n2@377@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) n2@377@01) n2@377@01))
      (= n1@377@01 n2@377@01))
    (= n1@377@01 n2@377@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@377@01 $Ref)) (!
  (=>
    (Set_in n@377@01 (Set_union g0@302@01 g1@303@01))
    (and (= (inv@378@01 n@377@01) n@377@01) (img@379@01 n@377@01)))
  :pattern ((Set_in n@377@01 (Set_union g0@302@01 g1@303@01)))
  :pattern ((inv@378@01 n@377@01))
  :pattern ((img@379@01 n@377@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@379@01 r) (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01)))
    (= (inv@378@01 r) r))
  :pattern ((inv@378@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r))
  :pattern ((inv@378@01 r))
  :qid |quant-u-382|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@381@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01))
      (img@379@01 r)
      (= r (inv@378@01 r)))
    ($Perm.min
      (ite
        (and
          (img@361@01 r)
          (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@361@01 r)
          (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@381@01 r))
    $Perm.No)
  
  :qid |quant-u-384|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01))
      (img@379@01 r)
      (= r (inv@378@01 r)))
    (= (- $Perm.Write (pTaken@381@01 r)) $Perm.No))
  
  :qid |quant-u-385|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@382@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@382@01  $FVF<next>)))
      (and
        (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01))
        (img@379@01 r)))
    (=>
      (and
        (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01))
        (img@379@01 r))
      (Set_in r ($FVF.domain_next (as sm@382@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@382@01  $FVF<next>))))
  :qid |qp.fvfDomDef246|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01))
        (img@379@01 r))
      (and
        (img@361@01 r)
        (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01))))
    (=
      ($FVF.lookup_next (as sm@382@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@382@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef244|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@382@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef245|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@382@01  $FVF<next>)) (Set_union g0@302@01 g1@303@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@361@01 r) (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@380@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef242|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@380@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef243|)))
(assert (forall ((n@377@01 $Ref)) (!
  (=>
    (Set_in n@377@01 (Set_union g0@302@01 g1@303@01))
    (and (= (inv@378@01 n@377@01) n@377@01) (img@379@01 n@377@01)))
  :pattern ((Set_in n@377@01 (Set_union g0@302@01 g1@303@01)))
  :pattern ((inv@378@01 n@377@01))
  :pattern ((img@379@01 n@377@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@379@01 r) (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01)))
    (= (inv@378@01 r) r))
  :pattern ((inv@378@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@382@01  $FVF<next>)))
      (and
        (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01))
        (img@379@01 r)))
    (=>
      (and
        (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01))
        (img@379@01 r))
      (Set_in r ($FVF.domain_next (as sm@382@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@382@01  $FVF<next>))))
  :qid |qp.fvfDomDef246|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01))
        (img@379@01 r))
      (and
        (img@361@01 r)
        (Set_in (inv@360@01 r) (Set_union g0@302@01 g1@303@01))))
    (=
      ($FVF.lookup_next (as sm@382@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r)))
  :pattern (($FVF.lookup_next (as sm@382@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r))
  :qid |qp.fvfValDef244|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@357@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@382@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef245|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@378@01 r) (Set_union g0@302@01 g1@303@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@380@01  $FVF<next>) r) r))
    :pattern ((inv@378@01 r))
    :qid |quant-u-382|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@382@01  $FVF<next>)) (Set_union g0@302@01 g1@303@01))))
(assert (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@382@01  $FVF<next>)) (Set_union g0@302@01 g1@303@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
  $Snap.unit))
; [eval] (forall r$1: Ref :: { (r$1 in g0), (r$1 in g1) } (r$1 in g0) ==> !((r$1 in g1)))
(declare-const r$1@383@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (r$1 in g0) ==> !((r$1 in g1))
; [eval] (r$1 in g0)
(push) ; 4
; [then-branch: 67 | r$1@383@01 in g0@302@01 | live]
; [else-branch: 67 | !(r$1@383@01 in g0@302@01) | live]
(push) ; 5
; [then-branch: 67 | r$1@383@01 in g0@302@01]
(assert (Set_in r$1@383@01 g0@302@01))
; [eval] !((r$1 in g1))
; [eval] (r$1 in g1)
(pop) ; 5
(push) ; 5
; [else-branch: 67 | !(r$1@383@01 in g0@302@01)]
(assert (not (Set_in r$1@383@01 g0@302@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$1@383@01 g0@302@01)) (Set_in r$1@383@01 g0@302@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$1@383@01 $Ref)) (!
  (or (not (Set_in r$1@383@01 g0@302@01)) (Set_in r$1@383@01 g0@302@01))
  :pattern ((Set_in r$1@383@01 g0@302@01) (Set_in r$1@383@01 g1@303@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@425@13@425@33-aux|)))
(assert (forall ((r$1@383@01 $Ref)) (!
  (=> (Set_in r$1@383@01 g0@302@01) (not (Set_in r$1@383@01 g1@303@01)))
  :pattern ((Set_in r$1@383@01 g0@302@01) (Set_in r$1@383@01 g1@303@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@425@13@425@33|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
  $Snap.unit))
; [eval] (forall r$2: Ref :: { (r$2 in g0), (r$2 in g1) } (r$2 in g1) ==> !((r$2 in g0)))
(declare-const r$2@384@01 $Ref)
(push) ; 3
; [eval] (r$2 in g1) ==> !((r$2 in g0))
; [eval] (r$2 in g1)
(push) ; 4
; [then-branch: 68 | r$2@384@01 in g1@303@01 | live]
; [else-branch: 68 | !(r$2@384@01 in g1@303@01) | live]
(push) ; 5
; [then-branch: 68 | r$2@384@01 in g1@303@01]
(assert (Set_in r$2@384@01 g1@303@01))
; [eval] !((r$2 in g0))
; [eval] (r$2 in g0)
(pop) ; 5
(push) ; 5
; [else-branch: 68 | !(r$2@384@01 in g1@303@01)]
(assert (not (Set_in r$2@384@01 g1@303@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$2@384@01 g1@303@01)) (Set_in r$2@384@01 g1@303@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$2@384@01 $Ref)) (!
  (or (not (Set_in r$2@384@01 g1@303@01)) (Set_in r$2@384@01 g1@303@01))
  :pattern ((Set_in r$2@384@01 g0@302@01) (Set_in r$2@384@01 g1@303@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@425@13@425@33-aux|)))
(assert (forall ((r$2@384@01 $Ref)) (!
  (=> (Set_in r$2@384@01 g1@303@01) (not (Set_in r$2@384@01 g0@302@01)))
  :pattern ((Set_in r$2@384@01 g0@302@01) (Set_in r$2@384@01 g1@303@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@425@13@425@33|)))
(pop) ; 2
(push) ; 2
; [exec]
; inhale apply_TCFraming(g0, g1)
(declare-const $t@385@01 $Snap)
(assert (= $t@385@01 $Snap.unit))
; [eval] apply_TCFraming(g0, g1)
(push) ; 3
(declare-const n@386@01 $Ref)
(push) ; 4
; [eval] (n in g0)
(assert (Set_in n@386@01 g0@302@01))
(pop) ; 4
(declare-fun inv@387@01 ($Ref) $Ref)
(declare-fun img@388@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@386@01 $Ref) (n2@386@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@386@01 g0@302@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) n1@386@01) n1@386@01))
      (and
        (Set_in n2@386@01 g0@302@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) n2@386@01) n2@386@01))
      (= n1@386@01 n2@386@01))
    (= n1@386@01 n2@386@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@386@01 $Ref)) (!
  (=>
    (Set_in n@386@01 g0@302@01)
    (and (= (inv@387@01 n@386@01) n@386@01) (img@388@01 n@386@01)))
  :pattern ((Set_in n@386@01 g0@302@01))
  :pattern ((inv@387@01 n@386@01))
  :pattern ((img@388@01 n@386@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) g0@302@01))
    (= (inv@387@01 r) r))
  :pattern ((inv@387@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@387@01 r) g0@302@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) r) r))
  :pattern ((inv@387@01 r))
  :qid |quant-u-387|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@389@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@387@01 r) g0@302@01) (img@388@01 r) (= r (inv@387@01 r)))
    ($Perm.min
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@390@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@387@01 r) g0@302@01) (img@388@01 r) (= r (inv@387@01 r)))
    ($Perm.min
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@389@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (pTaken@389@01 r))
    $Perm.No)
  
  :qid |quant-u-389|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@387@01 r) g0@302@01) (img@388@01 r) (= r (inv@387@01 r)))
    (= (- $Perm.Write (pTaken@389@01 r)) $Perm.No))
  
  :qid |quant-u-390|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@391@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@391@01  $FVF<next>)))
      (and (Set_in (inv@387@01 r) g0@302@01) (img@388@01 r)))
    (=>
      (and (Set_in (inv@387@01 r) g0@302@01) (img@388@01 r))
      (Set_in r ($FVF.domain_next (as sm@391@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@391@01  $FVF<next>))))
  :qid |qp.fvfDomDef250|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@387@01 r) g0@302@01) (img@388@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@391@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@391@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef247|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@387@01 r) g0@302@01) (img@388@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@391@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@391@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@391@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef249|)))
(declare-const n@392@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n in g1)
(assert (Set_in n@392@01 g1@303@01))
(pop) ; 4
(declare-fun inv@393@01 ($Ref) $Ref)
(declare-fun img@394@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@395@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@395@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@395@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@395@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@392@01 $Ref) (n2@392@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@392@01 g1@303@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@395@01  $FVF<next>) n1@392@01) n1@392@01))
      (and
        (Set_in n2@392@01 g1@303@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@395@01  $FVF<next>) n2@392@01) n2@392@01))
      (= n1@392@01 n2@392@01))
    (= n1@392@01 n2@392@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@392@01 $Ref)) (!
  (=>
    (Set_in n@392@01 g1@303@01)
    (and (= (inv@393@01 n@392@01) n@392@01) (img@394@01 n@392@01)))
  :pattern ((Set_in n@392@01 g1@303@01))
  :pattern ((inv@393@01 n@392@01))
  :pattern ((img@394@01 n@392@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@394@01 r) (Set_in (inv@393@01 r) g1@303@01))
    (= (inv@393@01 r) r))
  :pattern ((inv@393@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@393@01 r) g1@303@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@395@01  $FVF<next>) r) r))
  :pattern ((inv@393@01 r))
  :qid |quant-u-392|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@396@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@393@01 r) g1@303@01) (img@394@01 r) (= r (inv@393@01 r)))
    ($Perm.min
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (pTaken@396@01 r))
    $Perm.No)
  
  :qid |quant-u-394|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@393@01 r) g1@303@01) (img@394@01 r) (= r (inv@393@01 r)))
    (= (- $Perm.Write (pTaken@396@01 r)) $Perm.No))
  
  :qid |quant-u-395|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@397@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@397@01  $FVF<next>)))
      (and (Set_in (inv@393@01 r) g1@303@01) (img@394@01 r)))
    (=>
      (and (Set_in (inv@393@01 r) g1@303@01) (img@394@01 r))
      (Set_in r ($FVF.domain_next (as sm@397@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@397@01  $FVF<next>))))
  :qid |qp.fvfDomDef255|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@393@01 r) g1@303@01) (img@394@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@397@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@397@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@397@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef254|)))
; [eval] (g1 intersection g0) == Set[Ref]()
; [eval] (g1 intersection g0)
; [eval] Set[Ref]()
(set-option :timeout 0)
(push) ; 4
(assert (not (Set_equal (Set_intersection g1@303@01 g0@302@01) (as Set_empty  Set<$Ref>))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (Set_equal (Set_intersection g1@303@01 g0@302@01) (as Set_empty  Set<$Ref>)))
(assert (apply_TCFraming%precondition ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@391@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@397@01  $FVF<next>))
    $Snap.unit)) g0@302@01 g1@303@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@386@01 $Ref)) (!
  (=>
    (Set_in n@386@01 g0@302@01)
    (and (= (inv@387@01 n@386@01) n@386@01) (img@388@01 n@386@01)))
  :pattern ((Set_in n@386@01 g0@302@01))
  :pattern ((inv@387@01 n@386@01))
  :pattern ((img@388@01 n@386@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) g0@302@01))
    (= (inv@387@01 r) r))
  :pattern ((inv@387@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@391@01  $FVF<next>)))
      (and (Set_in (inv@387@01 r) g0@302@01) (img@388@01 r)))
    (=>
      (and (Set_in (inv@387@01 r) g0@302@01) (img@388@01 r))
      (Set_in r ($FVF.domain_next (as sm@391@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@391@01  $FVF<next>))))
  :qid |qp.fvfDomDef250|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@387@01 r) g0@302@01) (img@388@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@391@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@391@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef247|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@387@01 r) g0@302@01) (img@388@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@391@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@391@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@391@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef249|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@395@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@395@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@395@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
(assert (forall ((n@392@01 $Ref)) (!
  (=>
    (Set_in n@392@01 g1@303@01)
    (and (= (inv@393@01 n@392@01) n@392@01) (img@394@01 n@392@01)))
  :pattern ((Set_in n@392@01 g1@303@01))
  :pattern ((inv@393@01 n@392@01))
  :pattern ((img@394@01 n@392@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@394@01 r) (Set_in (inv@393@01 r) g1@303@01))
    (= (inv@393@01 r) r))
  :pattern ((inv@393@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@397@01  $FVF<next>)))
      (and (Set_in (inv@393@01 r) g1@303@01) (img@394@01 r)))
    (=>
      (and (Set_in (inv@393@01 r) g1@303@01) (img@394@01 r))
      (Set_in r ($FVF.domain_next (as sm@397@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@397@01  $FVF<next>))))
  :qid |qp.fvfDomDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@393@01 r) g1@303@01) (img@394@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@397@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@397@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r)
  :pattern (($FVF.lookup_next (as sm@397@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef254|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@387@01 r) g0@302@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@355@01  $FVF<next>) r) r))
    :pattern ((inv@387@01 r))
    :qid |quant-u-387|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@393@01 r) g1@303@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@395@01  $FVF<next>) r) r))
    :pattern ((inv@393@01 r))
    :qid |quant-u-392|))
  (Set_equal (Set_intersection g1@303@01 g0@302@01) (as Set_empty  Set<$Ref>))
  (apply_TCFraming%precondition ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@391@01  $FVF<next>))
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@397@01  $FVF<next>))
      $Snap.unit)) g0@302@01 g1@303@01)))
(assert (apply_TCFraming ($Snap.combine
  ($SortWrappers.$FVF<next>To$Snap (as sm@391@01  $FVF<next>))
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@397@01  $FVF<next>))
    $Snap.unit)) g0@302@01 g1@303@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (Set_in $Ref.null (Set_union g0@302@01 g1@303@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null (Set_union g0@302@01 g1@303@01))))
(declare-const n$3@398@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$3@398@01 (Set_union g0@302@01 g1@303@01)))
(declare-const sm@399@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@399@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@399@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@399@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@399@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef257|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@399@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef258|)))
(pop) ; 3
(declare-fun inv@400@01 ($Ref) $Ref)
(declare-fun img@401@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@399@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@399@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@399@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@399@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef257|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@399@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef258|)))
; Nested auxiliary terms: non-globals
(declare-const sm@402@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@398@01 $Ref) (n$32@398@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$31@398@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$31@398@01) n$31@398@01))
      (and
        (Set_in n$32@398@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$32@398@01) n$32@398@01))
      (= n$31@398@01 n$32@398@01))
    (= n$31@398@01 n$32@398@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@398@01 $Ref)) (!
  (=>
    (Set_in n$3@398@01 (Set_union g0@302@01 g1@303@01))
    (and (= (inv@400@01 n$3@398@01) n$3@398@01) (img@401@01 n$3@398@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@399@01  $FVF<next>) n$3@398@01) n$3@398@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@401@01 r) (Set_in (inv@400@01 r) (Set_union g0@302@01 g1@303@01)))
    (= (inv@400@01 r) r))
  :pattern ((inv@400@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@400@01 r) (Set_union g0@302@01 g1@303@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) r) r))
  :pattern ((inv@400@01 r))
  :qid |quant-u-397|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@403@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@400@01 r) (Set_union g0@302@01 g1@303@01))
      (img@401@01 r)
      (= r (inv@400@01 r)))
    ($Perm.min
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@404@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@400@01 r) (Set_union g0@302@01 g1@303@01))
      (img@401@01 r)
      (= r (inv@400@01 r)))
    ($Perm.min
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@403@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (pTaken@403@01 r))
    $Perm.No)
  
  :qid |quant-u-399|))))
(check-sat)
; unsat
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@400@01 r) (Set_union g0@302@01 g1@303@01))
      (img@401@01 r)
      (= r (inv@400@01 r)))
    (= (- $Perm.Write (pTaken@403@01 r)) $Perm.No))
  
  :qid |quant-u-400|))))
(check-sat)
; unknown
(pop) ; 3
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (pTaken@404@01 r))
    $Perm.No)
  
  :qid |quant-u-401|))))
(check-sat)
; unsat
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@400@01 r) (Set_union g0@302@01 g1@303@01))
      (img@401@01 r)
      (= r (inv@400@01 r)))
    (= (- (- $Perm.Write (pTaken@403@01 r)) (pTaken@404@01 r)) $Perm.No))
  
  :qid |quant-u-402|))))
(check-sat)
; unsat
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$4: Ref :: { (n$4.next in (g0 union g1)) } { (n$4 in (g0 union g1)), n$4.next } (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1)))
(declare-const n$4@405@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1))
; [eval] (n$4 in (g0 union g1)) && n$4.next != null
; [eval] (n$4 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 69 | !(n$4@405@01 in g0@302@01 ∪ g1@303@01) | live]
; [else-branch: 69 | n$4@405@01 in g0@302@01 ∪ g1@303@01 | live]
(push) ; 5
; [then-branch: 69 | !(n$4@405@01 in g0@302@01 ∪ g1@303@01)]
(assert (not (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 69 | n$4@405@01 in g0@302@01 ∪ g1@303@01]
(assert (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
      (=
        ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
    :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
      (=
        ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) n$4@405@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@311@01 n$4@405@01) (Set_in (inv@310@01 n$4@405@01) g0@302@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@316@01 n$4@405@01) (Set_in (inv@315@01 n$4@405@01) g1@303@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (=>
  (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
  (and
    (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) n$4@405@01))))
(assert (or
  (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
  (not (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01)))))
(push) ; 4
; [then-branch: 70 | n$4@405@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@402@01, n$4@405@01) != Null | live]
; [else-branch: 70 | !(n$4@405@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@402@01, n$4@405@01) != Null) | live]
(push) ; 5
; [then-branch: 70 | n$4@405@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@402@01, n$4@405@01) != Null]
(assert (and
  (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
  (not (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null))))
; [eval] (n$4.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
      (=
        ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
    :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
    :qid |qp.fvfValDef259|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
      (=
        ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
    :qid |qp.fvfValDef260|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef261|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) n$4@405@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@311@01 n$4@405@01) (Set_in (inv@310@01 n$4@405@01) g0@302@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@316@01 n$4@405@01) (Set_in (inv@315@01 n$4@405@01) g1@303@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,01s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 70 | !(n$4@405@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@402@01, n$4@405@01) != Null)]
(assert (not
  (and
    (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
(assert (=>
  (and
    (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null)))
  (and
    (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) n$4@405@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
      (not
        (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null))))
  (and
    (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@402@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@402@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef261|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@405@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
      (and
        (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) n$4@405@01)))
    (or
      (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
      (not (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))))
    (=>
      (and
        (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null)))
      (and
        (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) n$4@405@01)))
    (or
      (not
        (and
          (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
          (not
            (=
              ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01)
              $Ref.null))))
      (and
        (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) (Set_union g0@302@01 g1@303@01)))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31-aux|)))
(assert (forall ((n$4@405@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
      (and
        (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) n$4@405@01)))
    (or
      (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
      (not (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))))
    (=>
      (and
        (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null)))
      (and
        (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) n$4@405@01)))
    (or
      (not
        (and
          (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
          (not
            (=
              ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01)
              $Ref.null))))
      (and
        (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null)))))
  :pattern ((Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) n$4@405@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31-aux|)))
(push) ; 3
(assert (not (forall ((n$4@405@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
      (not
        (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) (Set_union g0@302@01 g1@303@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) (Set_union g0@302@01 g1@303@01)))
  :pattern ((Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) n$4@405@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31|))))
(check-sat)
; unsat
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
(assert (forall ((n$4@405@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01))
      (not
        (= ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) (Set_union g0@302@01 g1@303@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) (Set_union g0@302@01 g1@303@01)))
  :pattern ((Set_in n$4@405@01 (Set_union g0@302@01 g1@303@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$4@405@01) n$4@405@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@419@13@419@31|)))
; [eval] is_global_sroot((g0 union g1), Set(x0, x1))
; [eval] (g0 union g1)
; [eval] Set(x0, x1)
(push) ; 3
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$0@406@01 $Ref)
(push) ; 4
; [eval] (n$0 in g)
(assert (Set_in n$0@406@01 (Set_union g0@302@01 g1@303@01)))
(pop) ; 4
(declare-fun inv@407@01 ($Ref) $Ref)
(declare-fun img@408@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$01@406@01 $Ref) (n$02@406@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@406@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$01@406@01) n$01@406@01))
      (and
        (Set_in n$02@406@01 (Set_union g0@302@01 g1@303@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) n$02@406@01) n$02@406@01))
      (= n$01@406@01 n$02@406@01))
    (= n$01@406@01 n$02@406@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@406@01 $Ref)) (!
  (=>
    (Set_in n$0@406@01 (Set_union g0@302@01 g1@303@01))
    (and (= (inv@407@01 n$0@406@01) n$0@406@01) (img@408@01 n$0@406@01)))
  :pattern ((Set_in n$0@406@01 (Set_union g0@302@01 g1@303@01)))
  :pattern ((inv@407@01 n$0@406@01))
  :pattern ((img@408@01 n$0@406@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@408@01 r) (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01)))
    (= (inv@407@01 r) r))
  :pattern ((inv@407@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) r) r))
  :pattern ((inv@407@01 r))
  :qid |quant-u-404|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@409@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
      (img@408@01 r)
      (= r (inv@407@01 r)))
    ($Perm.min
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@410@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
      (img@408@01 r)
      (= r (inv@407@01 r)))
    ($Perm.min
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@409@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (pTaken@409@01 r))
    $Perm.No)
  
  :qid |quant-u-406|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
      (img@408@01 r)
      (= r (inv@407@01 r)))
    (= (- $Perm.Write (pTaken@409@01 r)) $Perm.No))
  
  :qid |quant-u-407|))))
(check-sat)
; unknown
(pop) ; 4
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)
      (pTaken@410@01 r))
    $Perm.No)
  
  :qid |quant-u-408|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
      (img@408@01 r)
      (= r (inv@407@01 r)))
    (= (- (- $Perm.Write (pTaken@409@01 r)) (pTaken@410@01 r)) $Perm.No))
  
  :qid |quant-u-409|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@411@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@411@01  $FVF<next>)))
      (and
        (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
        (img@408@01 r)))
    (=>
      (and
        (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
        (img@408@01 r))
      (Set_in r ($FVF.domain_next (as sm@411@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@411@01  $FVF<next>))))
  :qid |qp.fvfDomDef265|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
        (img@408@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@411@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@411@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
        (img@408@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@411@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@411@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@411@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef264|)))
; [eval] (forall n$1: Ref ::(n$1 in g) && n$1.next != null ==> (n$1.next in g))
(declare-const n$1@412@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$1 in g) && n$1.next != null ==> (n$1.next in g)
; [eval] (n$1 in g) && n$1.next != null
; [eval] (n$1 in g)
(push) ; 5
; [then-branch: 71 | !(n$1@412@01 in g0@302@01 ∪ g1@303@01) | live]
; [else-branch: 71 | n$1@412@01 in g0@302@01 ∪ g1@303@01 | live]
(push) ; 6
; [then-branch: 71 | !(n$1@412@01 in g0@302@01 ∪ g1@303@01)]
(assert (not (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 71 | n$1@412@01 in g0@302@01 ∪ g1@303@01]
(assert (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01)))
; [eval] n$1.next != null
(declare-const sm@413@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef268|)))
(declare-const pm@414@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@414@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@414@01  $FPM) r))
  :qid |qp.resPrmSumDef269|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@413@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@414@01  $FPM) r))
  :qid |qp.resTrgDef270|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) n$1@412@01))
(push) ; 7
(assert (not (< $Perm.No ($FVF.perm_next (as pm@414@01  $FPM) n$1@412@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@414@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@414@01  $FPM) r))
  :qid |qp.resPrmSumDef269|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@413@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@414@01  $FPM) r))
  :qid |qp.resTrgDef270|)))
(assert (=>
  (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
  (and
    (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) n$1@412@01))))
(assert (or
  (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
  (not (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01)))))
(push) ; 5
; [then-branch: 72 | n$1@412@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@413@01, n$1@412@01) != Null | live]
; [else-branch: 72 | !(n$1@412@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@413@01, n$1@412@01) != Null) | live]
(push) ; 6
; [then-branch: 72 | n$1@412@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@413@01, n$1@412@01) != Null]
(assert (and
  (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
  (not (= ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) $Ref.null))))
; [eval] (n$1.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
      (=
        ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
    :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
    :qid |qp.fvfValDef266|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
      (=
        ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
    :qid |qp.fvfValDef267|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef268|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) n$1@412@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@311@01 n$1@412@01) (Set_in (inv@310@01 n$1@412@01) g0@302@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@316@01 n$1@412@01) (Set_in (inv@315@01 n$1@412@01) g1@303@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 72 | !(n$1@412@01 in g0@302@01 ∪ g1@303@01 && Lookup(next, sm@413@01, n$1@412@01) != Null)]
(assert (not
  (and
    (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (=>
  (and
    (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) $Ref.null)))
  (and
    (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) n$1@412@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
      (not
        (= ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) $Ref.null))))
  (and
    (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
    (not (= ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@414@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@414@01  $FPM) r))
  :qid |qp.resPrmSumDef269|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@413@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@414@01  $FPM) r))
  :qid |qp.resTrgDef270|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$1@412@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
      (not
        (= ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) (Set_union g0@302@01 g1@303@01)))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(assert (forall ((n$1@412@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
      (not
        (= ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) (Set_union g0@302@01 g1@303@01)))
  
  :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|)))
; [eval] (roots subset g)
(push) ; 4
(assert (not (Set_subset (Set_unionone (Set_singleton x0@304@01) x1@305@01) (Set_union g0@302@01 g1@303@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(assert (Set_subset (Set_unionone (Set_singleton x0@304@01) x1@305@01) (Set_union g0@302@01 g1@303@01)))
(assert (is_global_sroot%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@411@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@302@01 g1@303@01) (Set_unionone (Set_singleton x0@304@01) x1@305@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n$0@406@01 $Ref)) (!
  (=>
    (Set_in n$0@406@01 (Set_union g0@302@01 g1@303@01))
    (and (= (inv@407@01 n$0@406@01) n$0@406@01) (img@408@01 n$0@406@01)))
  :pattern ((Set_in n$0@406@01 (Set_union g0@302@01 g1@303@01)))
  :pattern ((inv@407@01 n$0@406@01))
  :pattern ((img@408@01 n$0@406@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@408@01 r) (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01)))
    (= (inv@407@01 r) r))
  :pattern ((inv@407@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@411@01  $FVF<next>)))
      (and
        (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
        (img@408@01 r)))
    (=>
      (and
        (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
        (img@408@01 r))
      (Set_in r ($FVF.domain_next (as sm@411@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@411@01  $FVF<next>))))
  :qid |qp.fvfDomDef265|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
        (img@408@01 r))
      (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01)))
    (=
      ($FVF.lookup_next (as sm@411@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@411@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
        (img@408@01 r))
      (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01)))
    (=
      ($FVF.lookup_next (as sm@411@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@411@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef263|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@411@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef264|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
    (=
      ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r)))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r))
  :qid |qp.fvfValDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
    (=
      ($FVF.lookup_next (as sm@413@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r))
  :qid |qp.fvfValDef267|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@413@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef268|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@414@01  $FPM) r)
    (+
      (ite
        (and (img@311@01 r) (Set_in (inv@310@01 r) g0@302@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@316@01 r) (Set_in (inv@315@01 r) g1@303@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@414@01  $FPM) r))
  :qid |qp.resPrmSumDef269|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@413@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@307@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@414@01  $FPM) r))
  :qid |qp.resTrgDef270|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@407@01 r) (Set_union g0@302@01 g1@303@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@402@01  $FVF<next>) r) r))
    :pattern ((inv@407@01 r))
    :qid |quant-u-404|))
  (forall ((n$1@412@01 $Ref)) (!
    (=>
      (and
        (Set_in n$1@412@01 (Set_union g0@302@01 g1@303@01))
        (not
          (= ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@413@01  $FVF<next>) n$1@412@01) (Set_union g0@302@01 g1@303@01)))
    
    :qid |prog./silicon/silver/src/test/resources/graphs/static/tests/lists/framing1.vpr@339@14@339@22|))
  (Set_subset (Set_unionone (Set_singleton x0@304@01) x1@305@01) (Set_union g0@302@01 g1@303@01))
  (is_global_sroot%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@411@01  $FVF<next>))
      ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@302@01 g1@303@01) (Set_unionone (Set_singleton x0@304@01) x1@305@01))))
(push) ; 3
(assert (not (is_global_sroot ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@411@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@302@01 g1@303@01) (Set_unionone (Set_singleton x0@304@01) x1@305@01))))
(check-sat)
; ---------- test_unframing ----------
