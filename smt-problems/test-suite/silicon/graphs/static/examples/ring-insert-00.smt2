(get-info :version)
; (:version "4.8.7")
; Started: 2024-11-17 20:11:55
; Silicon.version: 1.1-SNAPSHOT (4d756c79+)
; Input file: /silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Edge> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<$Snap> 0)
(declare-sort Edge 0)
(declare-sort TrClo 0)
(declare-sort ZeroOnePathGraphTCs 0)
(declare-sort TriggerWisdoms 0)
(declare-sort $FVF<next> 0)
(declare-sort $FVF<val> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Edge>To$Snap (Set<Edge>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Edge> ($Snap) Set<Edge>)
(assert (forall ((x Set<Edge>)) (!
    (= x ($SortWrappers.$SnapToSet<Edge>($SortWrappers.Set<Edge>To$Snap x)))
    :pattern (($SortWrappers.Set<Edge>To$Snap x))
    :qid |$Snap.$SnapToSet<Edge>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Edge>To$Snap($SortWrappers.$SnapToSet<Edge> x)))
    :pattern (($SortWrappers.$SnapToSet<Edge> x))
    :qid |$Snap.Set<Edge>To$SnapToSet<Edge>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.EdgeTo$Snap (Edge) $Snap)
(declare-fun $SortWrappers.$SnapToEdge ($Snap) Edge)
(assert (forall ((x Edge)) (!
    (= x ($SortWrappers.$SnapToEdge($SortWrappers.EdgeTo$Snap x)))
    :pattern (($SortWrappers.EdgeTo$Snap x))
    :qid |$Snap.$SnapToEdgeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.EdgeTo$Snap($SortWrappers.$SnapToEdge x)))
    :pattern (($SortWrappers.$SnapToEdge x))
    :qid |$Snap.EdgeTo$SnapToEdge|
    )))
(declare-fun $SortWrappers.TrCloTo$Snap (TrClo) $Snap)
(declare-fun $SortWrappers.$SnapToTrClo ($Snap) TrClo)
(assert (forall ((x TrClo)) (!
    (= x ($SortWrappers.$SnapToTrClo($SortWrappers.TrCloTo$Snap x)))
    :pattern (($SortWrappers.TrCloTo$Snap x))
    :qid |$Snap.$SnapToTrCloTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TrCloTo$Snap($SortWrappers.$SnapToTrClo x)))
    :pattern (($SortWrappers.$SnapToTrClo x))
    :qid |$Snap.TrCloTo$SnapToTrClo|
    )))
(declare-fun $SortWrappers.ZeroOnePathGraphTCsTo$Snap (ZeroOnePathGraphTCs) $Snap)
(declare-fun $SortWrappers.$SnapToZeroOnePathGraphTCs ($Snap) ZeroOnePathGraphTCs)
(assert (forall ((x ZeroOnePathGraphTCs)) (!
    (= x ($SortWrappers.$SnapToZeroOnePathGraphTCs($SortWrappers.ZeroOnePathGraphTCsTo$Snap x)))
    :pattern (($SortWrappers.ZeroOnePathGraphTCsTo$Snap x))
    :qid |$Snap.$SnapToZeroOnePathGraphTCsTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ZeroOnePathGraphTCsTo$Snap($SortWrappers.$SnapToZeroOnePathGraphTCs x)))
    :pattern (($SortWrappers.$SnapToZeroOnePathGraphTCs x))
    :qid |$Snap.ZeroOnePathGraphTCsTo$SnapToZeroOnePathGraphTCs|
    )))
(declare-fun $SortWrappers.TriggerWisdomsTo$Snap (TriggerWisdoms) $Snap)
(declare-fun $SortWrappers.$SnapToTriggerWisdoms ($Snap) TriggerWisdoms)
(assert (forall ((x TriggerWisdoms)) (!
    (= x ($SortWrappers.$SnapToTriggerWisdoms($SortWrappers.TriggerWisdomsTo$Snap x)))
    :pattern (($SortWrappers.TriggerWisdomsTo$Snap x))
    :qid |$Snap.$SnapToTriggerWisdomsTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TriggerWisdomsTo$Snap($SortWrappers.$SnapToTriggerWisdoms x)))
    :pattern (($SortWrappers.$SnapToTriggerWisdoms x))
    :qid |$Snap.TriggerWisdomsTo$SnapToTriggerWisdoms|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<next>To$Snap ($FVF<next>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<next> ($Snap) $FVF<next>)
(assert (forall ((x $FVF<next>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<next>($SortWrappers.$FVF<next>To$Snap x)))
    :pattern (($SortWrappers.$FVF<next>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<next>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<next>To$Snap($SortWrappers.$SnapTo$FVF<next> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<next> x))
    :qid |$Snap.$FVF<next>To$SnapTo$FVF<next>|
    )))
(declare-fun $SortWrappers.$FVF<val>To$Snap ($FVF<val>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<val> ($Snap) $FVF<val>)
(assert (forall ((x $FVF<val>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<val>($SortWrappers.$FVF<val>To$Snap x)))
    :pattern (($SortWrappers.$FVF<val>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<val>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<val>To$Snap($SortWrappers.$SnapTo$FVF<val> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<val> x))
    :qid |$Snap.$FVF<val>To$SnapTo$FVF<val>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Edge>) Int)
(declare-const Set_empty Set<Edge>)
(declare-fun Set_in (Edge Set<Edge>) Bool)
(declare-fun Set_singleton (Edge) Set<Edge>)
(declare-fun Set_unionone (Set<Edge> Edge) Set<Edge>)
(declare-fun Set_union (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_intersection (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_difference (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_subset (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_equal (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_skolem_diff (Set<Edge> Set<Edge>) Edge)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun __learn_trigger__<Bool> (Bool) Bool)
(declare-fun __trigger_ref__<Bool> ($Ref) Bool)
(declare-fun exists_path<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_path_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_spath<Bool> (Set<Edge> Set<$Ref> $Ref) Bool)
(declare-fun apply_noExit<Bool> (Set<Edge> Set<$Ref> Set<$Ref>) Bool)
(declare-fun inst_uReach<Set<Ref>> (Set<Edge> $Ref) Set<$Ref>)
(declare-fun inst_uReach_rev<Set<Ref>> (Set<Edge> $Ref) Set<$Ref>)
(declare-fun acyclic_graph<Bool> (Set<Edge>) Bool)
(declare-fun unshared_graph<Bool> (Set<Edge>) Bool)
(declare-fun func_graph<Bool> (Set<Edge>) Bool)
(declare-fun edge<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun succs<Set<Ref>> (Set<Edge> $Ref) Set<$Ref>)
(declare-fun edge_pred<Ref> (Edge) $Ref)
(declare-fun edge_succ<Ref> (Edge) $Ref)
(declare-fun create_edge<Edge> ($Ref $Ref) Edge)
(declare-fun create_edge_<Edge> ($Ref $Ref) Edge)
(declare-fun DEP<Bool> (Set<Edge> $Ref $Ref $Ref $Ref) Bool)
(declare-fun DEP_<Bool> (Set<Edge> $Ref $Ref $Ref $Ref) Bool)
; /field_value_functions_declarations.smt2 [next: Ref]
(declare-fun $FVF.domain_next ($FVF<next>) Set<$Ref>)
(declare-fun $FVF.lookup_next ($FVF<next> $Ref) $Ref)
(declare-fun $FVF.after_next ($FVF<next> $FVF<next>) Bool)
(declare-fun $FVF.loc_next ($Ref $Ref) Bool)
(declare-fun $FVF.perm_next ($FPM $Ref) $Perm)
(declare-const $fvfTOP_next $FVF<next>)
; /field_value_functions_declarations.smt2 [val: Int]
(declare-fun $FVF.domain_val ($FVF<val>) Set<$Ref>)
(declare-fun $FVF.lookup_val ($FVF<val> $Ref) Int)
(declare-fun $FVF.after_val ($FVF<val> $FVF<val>) Bool)
(declare-fun $FVF.loc_val (Int $Ref) Bool)
(declare-fun $FVF.perm_val ($FPM $Ref) $Perm)
(declare-const $fvfTOP_val $FVF<val>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $$ ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%limited ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%stateless (Set<$Ref>) Bool)
(declare-fun $$%precondition ($Snap Set<$Ref>) Bool)
(declare-fun apply_TCFraming ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%limited ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%stateless (Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%precondition ($Snap Set<$Ref> Set<$Ref>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Edge>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Edge)) (!
  (not (Set_in o (as Set_empty  Set<Edge>)))
  :pattern ((Set_in o (as Set_empty  Set<Edge>)))
  )))
(assert (forall ((s Set<Edge>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Edge>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Edge))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Edge)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Edge) (o Edge)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Edge)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (o Edge)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (Set_subset a b)
    (forall ((o Edge)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((EG Set<Edge>) (pred $Ref) (succ $Ref)) (!
  (= (Set_in succ (succs<Set<Ref>> EG pred)) (edge_<Bool> EG pred succ))
  :pattern ((Set_in succ (succs<Set<Ref>> EG pred)))
  :qid |prog.ax_Succs|)))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge<Bool> EG p s) (edge_<Bool> EG p s))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_EdgeSynonim|)))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge_<Bool> EG p s) (Set_in (create_edge<Edge> p s) EG))
  :pattern ((Set_in (create_edge<Edge> p s) EG))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_Edge|)))
(assert (forall ((EG Set<Edge>) (U Set<$Ref>) (M Set<$Ref>)) (!
  (=>
    (and
      (apply_noExit<Bool> EG U M)
      (forall ((u $Ref) (v $Ref)) (!
        (=>
          (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
          (not (edge<Bool> EG u v)))
        :pattern ((edge<Bool> EG u v))
        :pattern ((Set_in u M) (Set_in v M))
        )))
    (forall ((u $Ref) (v $Ref)) (!
      (=>
        (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
        (not (exists_path<Bool> EG u v)))
      :pattern ((exists_path<Bool> EG u v))
      :pattern ((Set_in u M) (Set_in v M))
      )))
  :pattern ((apply_noExit<Bool> EG U M))
  :qid |prog.ax_NoExit|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (v $Ref)) (!
  (= (Set_in v (inst_uReach<Set<Ref>> EG x)) (exists_path<Bool> EG x v))
  :pattern ((Set_in v (inst_uReach<Set<Ref>> EG x)))
  :pattern ((exists_path<Bool> EG x v))
  :qid |prog.ax_instantiation_uReach|)))
(assert (forall ((EG Set<Edge>) (u $Ref) (y $Ref)) (!
  (= (Set_in u (inst_uReach_rev<Set<Ref>> EG y)) (exists_path<Bool> EG u y))
  :pattern ((Set_in u (inst_uReach_rev<Set<Ref>> EG y)))
  :pattern ((exists_path<Bool> EG u y))
  :qid |prog.ax_instantiation_uReach_rev|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (= (exists_path<Bool> EG start end) (exists_path_<Bool> EG start end))
  :pattern ((exists_path<Bool> EG start end))
  :qid |prog.ax_Alias|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (=
    (exists_path_<Bool> EG start end)
    (or
      (= start end)
      (exists ((w $Ref)) (!
        (and (edge<Bool> EG start w) (exists_path_<Bool> EG w end))
        :pattern ((edge<Bool> EG start w))
        :pattern ((exists_path_<Bool> EG w end))
        ))))
  :pattern ((exists_path<Bool> EG start end))
  :pattern ((edge<Bool> EG start end))
  :qid |prog.ax_ExistsPath|)))
(assert (forall ((EG Set<Edge>) (u $Ref) (v $Ref) (w $Ref)) (!
  (=>
    (and (exists_path<Bool> EG u w) (exists_path<Bool> EG w v))
    (exists_path_<Bool> EG u v))
  :pattern ((exists_path<Bool> EG u w) (exists_path<Bool> EG w v))
  :qid |prog.ax_ExistsPathTrans|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (acyclic_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref)) (!
      (or (not (edge<Bool> EG v1 v2)) (not (exists_path<Bool> EG v2 v1)))
      :pattern ((edge<Bool> EG v1 v2))
      :pattern ((exists_path<Bool> EG v2 v1))
      )))
  :pattern ((acyclic_graph<Bool> EG))
  :qid |prog.ax_AcyclicGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (unshared_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v1 v) (edge<Bool> EG v2 v)) (= v1 v2))
      :pattern ((edge<Bool> EG v1 v) (edge<Bool> EG v2 v))
      )))
  :pattern ((unshared_graph<Bool> EG))
  :qid |prog.ax_UnsharedGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (func_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v v1) (edge<Bool> EG v v2)) (= v1 v2))
      :pattern ((edge<Bool> EG v v1) (edge<Bool> EG v v2))
      )))
  :pattern ((func_graph<Bool> EG))
  :qid |prog.ax_FuncGraph|)))
(assert (forall ((p $Ref) (s $Ref)) (!
  (and
    (= (edge_pred<Ref> (create_edge<Edge> p s)) p)
    (= (edge_succ<Ref> (create_edge<Edge> p s)) s))
  :pattern ((create_edge<Edge> p s))
  :qid |prog.edge_injectivity|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (y $Ref) (u $Ref) (v $Ref)) (!
  (= (DEP<Bool> EG x y u v) (DEP_<Bool> EG x y u v))
  :pattern ((DEP<Bool> EG x y u v))
  :qid |prog.ax_DEP_alias|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (y $Ref)) (!
  (= (edge<Bool> EG x y) (DEP_<Bool> EG x y x y))
  :pattern ((DEP<Bool> EG x y x y))
  :pattern ((edge<Bool> EG x y))
  :qid |prog.ax_DEP_0_2|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (y $Ref) (v $Ref)) (!
  (=>
    (and
      (exists_path_<Bool> EG x y)
      (and (edge<Bool> EG x v) (exists_path_<Bool> EG v y)))
    (DEP_<Bool> EG x y x v))
  :pattern ((DEP<Bool> EG x y x v))
  :pattern ((exists_path_<Bool> EG x y) (exists_path<Bool> EG v y))
  :pattern ((edge<Bool> EG x v) (exists_path_<Bool> EG v y))
  :qid |prog.ax_HeadTriangleImposable|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (y $Ref) (u $Ref)) (!
  (=>
    (and
      (exists_path_<Bool> EG x y)
      (and (exists_path_<Bool> EG x u) (edge<Bool> EG u y)))
    (DEP_<Bool> EG x y u y))
  :pattern ((DEP<Bool> EG x y u y))
  :pattern ((exists_path_<Bool> EG x y) (exists_path<Bool> EG x u))
  :pattern ((edge<Bool> EG u y) (exists_path_<Bool> EG x u))
  :qid |prog.ax_TailTriangleImposable|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (y $Ref) (u $Ref) (v $Ref)) (!
  (=> (not (edge<Bool> EG u v)) (not (DEP_<Bool> EG x y u v)))
  :pattern ((DEP<Bool> EG x y u v))
  :qid |prog.ax_NoEdgeNoDEP|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (y $Ref) (u $Ref) (v $Ref)) (!
  (=>
    (DEP<Bool> EG x y u v)
    (and (exists_path<Bool> EG x y) (edge<Bool> EG u v)))
  :pattern ((DEP<Bool> EG x y u v))
  :qid |prog.ax_DEP_trigger_magic|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (y $Ref) (n $Ref)) (!
  (=> (not (= n y)) (not (DEP_<Bool> EG y n x y)))
  :pattern ((DEP<Bool> EG y n x y))
  :qid |prog.ax_DEP_6_head|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (y $Ref) (n $Ref)) (!
  (=> (not (= n x)) (not (DEP_<Bool> EG n x x y)))
  :pattern ((DEP<Bool> EG n x x y))
  :qid |prog.ax_DEP_6_tail|)))
(assert (forall ((EG Set<Edge>) (nu $Ref) (n $Ref) (mu $Ref) (sigma $Ref)) (!
  (=>
    (and
      (not (= nu n))
      (and
        (not (= n sigma))
        (and
          (not (= nu mu))
          (and (edge<Bool> EG nu sigma) (edge<Bool> EG mu sigma)))))
    (not (DEP_<Bool> EG nu n mu sigma)))
  :pattern ((DEP<Bool> EG nu n mu sigma))
  :qid |prog.ax_DEP_7|)))
; /field_value_functions_axioms.smt2 [next: Ref]
(assert (forall ((vs $FVF<next>) (ws $FVF<next>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_next vs) ($FVF.domain_next ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_next vs))
            (= ($FVF.lookup_next vs x) ($FVF.lookup_next ws x)))
          :pattern (($FVF.lookup_next vs x) ($FVF.lookup_next ws x))
          :qid |qp.$FVF<next>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<next>To$Snap vs)
              ($SortWrappers.$FVF<next>To$Snap ws)
              )
    :qid |qp.$FVF<next>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_next pm r))
    :pattern (($FVF.perm_next pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_next f r) true)
    :pattern (($FVF.loc_next f r)))))
; /field_value_functions_axioms.smt2 [val: Int]
(assert (forall ((vs $FVF<val>) (ws $FVF<val>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_val vs) ($FVF.domain_val ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_val vs))
            (= ($FVF.lookup_val vs x) ($FVF.lookup_val ws x)))
          :pattern (($FVF.lookup_val vs x) ($FVF.lookup_val ws x))
          :qid |qp.$FVF<val>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<val>To$Snap vs)
              ($SortWrappers.$FVF<val>To$Snap ws)
              )
    :qid |qp.$FVF<val>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_val pm r))
    :pattern (($FVF.perm_val pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_val f r) true)
    :pattern (($FVF.loc_val f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun inv@7@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@8@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@6@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@9@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun inv@19@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@20@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@23@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@24@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@30@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@31@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@34@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@35@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@41@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@42@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@46@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@47@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@53@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@54@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@58@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@59@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@65@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@66@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@70@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@71@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@82@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@83@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@18@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@21@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@32@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@37@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@44@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@49@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@56@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@61@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@68@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@73@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@85@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun $unresolved@100@00 () $Ref)
(declare-fun $unresolved@101@00 () $Ref)
(declare-fun $unresolved@102@00 () $Ref)
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (= ($$%limited s@$ refs@0@00) ($$ s@$ refs@0@00))
  :pattern (($$ s@$ refs@0@00))
  :qid |quant-u-0|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  ($$%stateless refs@0@00)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-1|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) (and
    (forall ((n@5@00 $Ref)) (!
      (=>
        (Set_in n@5@00 refs@0@00)
        (and
          (= (inv@7@00 s@$ refs@0@00 n@5@00) n@5@00)
          (img@8@00 s@$ refs@0@00 n@5@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) n@5@00) n@5@00))
      :qid |quant-u-5|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@8@00 s@$ refs@0@00 r)
          (Set_in (inv@7@00 s@$ refs@0@00 r) refs@0@00))
        (= (inv@7@00 s@$ refs@0@00 r) r))
      :pattern ((inv@7@00 s@$ refs@0@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@6@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef0|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@8@00 s@$ refs@0@00 r)
          (Set_in (inv@7@00 s@$ refs@0@00 r) refs@0@00))
        (=
          ($FVF.lookup_next (sm@9@00 s@$ refs@0@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r)))
      :pattern (($FVF.lookup_next (sm@9@00 s@$ refs@0@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r))
      :qid |qp.fvfValDef1|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r) r)
      :pattern (($FVF.lookup_next (sm@9@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef2|))
    (=>
      ($$%precondition s@$ refs@0@00)
      (and
        (forall ((p $Ref) (s $Ref)) (!
          (=
            (and
              (Set_in p refs@0@00)
              (and
                (Set_in s refs@0@00)
                (and
                  (= ($FVF.lookup_next (sm@9@00 s@$ refs@0@00) p) s)
                  (not (= p s)))))
            (Set_in (create_edge<Edge> p s) result@1@00))
          :pattern ((create_edge<Edge> p s))
          ))
        (forall ((p $Ref) (s $Ref)) (!
          (=>
            (and (Set_in p refs@0@00) (exists_path<Bool> result@1@00 p s))
            (Set_in s refs@0@00))
          :pattern ((Set_in p refs@0@00) (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
          ))
        (forall ((p $Ref) (s $Ref)) (!
          (=>
            (and (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
            (Set_in p refs@0@00))
          :pattern ((Set_in p refs@0@00) (Set_in s refs@0@00) (exists_path<Bool> result@1@00 p s))
          ))))))
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-7|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-8|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-9|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-10|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (=
    (apply_TCFraming%limited s@$ g0@2@00 g1@3@00)
    (apply_TCFraming s@$ g0@2@00 g1@3@00))
  :pattern ((apply_TCFraming s@$ g0@2@00 g1@3@00))
  :qid |quant-u-2|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (apply_TCFraming%stateless g0@2@00 g1@3@00)
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-3|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (and
    (forall ((n@17@00 $Ref)) (!
      (=>
        (Set_in n@17@00 g0@2@00)
        (and
          (= (inv@19@00 s@$ g0@2@00 g1@3@00 n@17@00) n@17@00)
          (img@20@00 s@$ g0@2@00 g1@3@00 n@17@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) n@17@00) n@17@00))
      :qid |quant-u-12|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@20@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@19@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@19@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@19@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@22@00 $Ref)) (!
      (=>
        (Set_in n@22@00 g1@3@00)
        (and
          (= (inv@23@00 s@$ g0@2@00 g1@3@00 n@22@00) n@22@00)
          (img@24@00 s@$ g0@2@00 g1@3@00 n@22@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n@22@00) n@22@00))
      :qid |quant-u-15|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@24@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@23@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@23@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@23@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@29@00 $Ref)) (!
      (=>
        (Set_in n@29@00 g0@2@00)
        (and
          (= (inv@30@00 s@$ g0@2@00 g1@3@00 n@29@00) n@29@00)
          (img@31@00 s@$ g0@2@00 g1@3@00 n@29@00)))
      :pattern ((Set_in n@29@00 g0@2@00))
      :pattern ((inv@30@00 s@$ g0@2@00 g1@3@00 n@29@00))
      :pattern ((img@31@00 s@$ g0@2@00 g1@3@00 n@29@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@31@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@30@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@30@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@30@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@33@00 $Ref)) (!
      (=>
        (Set_in n@33@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@34@00 s@$ g0@2@00 g1@3@00 n@33@00) n@33@00)
          (img@35@00 s@$ g0@2@00 g1@3@00 n@33@00)))
      :pattern ((Set_in n@33@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@34@00 s@$ g0@2@00 g1@3@00 n@33@00))
      :pattern ((img@35@00 s@$ g0@2@00 g1@3@00 n@33@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@35@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@34@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@34@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@34@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@40@00 $Ref)) (!
      (=>
        (Set_in n@40@00 g1@3@00)
        (and
          (= (inv@41@00 s@$ g0@2@00 g1@3@00 n@40@00) n@40@00)
          (img@42@00 s@$ g0@2@00 g1@3@00 n@40@00)))
      :pattern ((Set_in n@40@00 g1@3@00))
      :pattern ((inv@41@00 s@$ g0@2@00 g1@3@00 n@40@00))
      :pattern ((img@42@00 s@$ g0@2@00 g1@3@00 n@40@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@42@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@41@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@41@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@41@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@45@00 $Ref)) (!
      (=>
        (Set_in n@45@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@46@00 s@$ g0@2@00 g1@3@00 n@45@00) n@45@00)
          (img@47@00 s@$ g0@2@00 g1@3@00 n@45@00)))
      :pattern ((Set_in n@45@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@46@00 s@$ g0@2@00 g1@3@00 n@45@00))
      :pattern ((img@47@00 s@$ g0@2@00 g1@3@00 n@45@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@47@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@46@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@46@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@52@00 $Ref)) (!
      (=>
        (Set_in n@52@00 g0@2@00)
        (and
          (= (inv@53@00 s@$ g0@2@00 g1@3@00 n@52@00) n@52@00)
          (img@54@00 s@$ g0@2@00 g1@3@00 n@52@00)))
      :pattern ((Set_in n@52@00 g0@2@00))
      :pattern ((inv@53@00 s@$ g0@2@00 g1@3@00 n@52@00))
      :pattern ((img@54@00 s@$ g0@2@00 g1@3@00 n@52@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@54@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@53@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@53@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@53@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@57@00 $Ref)) (!
      (=>
        (Set_in n@57@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@58@00 s@$ g0@2@00 g1@3@00 n@57@00) n@57@00)
          (img@59@00 s@$ g0@2@00 g1@3@00 n@57@00)))
      :pattern ((Set_in n@57@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@58@00 s@$ g0@2@00 g1@3@00 n@57@00))
      :pattern ((img@59@00 s@$ g0@2@00 g1@3@00 n@57@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@59@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@58@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@58@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@58@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@64@00 $Ref)) (!
      (=>
        (Set_in n@64@00 g1@3@00)
        (and
          (= (inv@65@00 s@$ g0@2@00 g1@3@00 n@64@00) n@64@00)
          (img@66@00 s@$ g0@2@00 g1@3@00 n@64@00)))
      :pattern ((Set_in n@64@00 g1@3@00))
      :pattern ((inv@65@00 s@$ g0@2@00 g1@3@00 n@64@00))
      :pattern ((img@66@00 s@$ g0@2@00 g1@3@00 n@64@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@66@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@65@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@65@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@65@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@69@00 $Ref)) (!
      (=>
        (Set_in n@69@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@70@00 s@$ g0@2@00 g1@3@00 n@69@00) n@69@00)
          (img@71@00 s@$ g0@2@00 g1@3@00 n@69@00)))
      :pattern ((Set_in n@69@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@70@00 s@$ g0@2@00 g1@3@00 n@69@00))
      :pattern ((img@71@00 s@$ g0@2@00 g1@3@00 n@69@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@71@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@70@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@70@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@70@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@81@00 $Ref)) (!
      (=>
        (Set_in n@81@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@82@00 s@$ g0@2@00 g1@3@00 n@81@00) n@81@00)
          (img@83@00 s@$ g0@2@00 g1@3@00 n@81@00)))
      :pattern ((Set_in n@81@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@82@00 s@$ g0@2@00 g1@3@00 n@81@00))
      :pattern ((img@83@00 s@$ g0@2@00 g1@3@00 n@81@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@83@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@82@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@82@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@18@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef3|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@20@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@19@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (=
          ($FVF.lookup_next (sm@21@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@21@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef4|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
      :pattern (($FVF.lookup_next (sm@21@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef5|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@32@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@30@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@31@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@30@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@31@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@32@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@32@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef12|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@30@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@31@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@20@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@19@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@32@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@32@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef9|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@30@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@31@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@24@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@23@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@32@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@32@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef10|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@32@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef11|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@37@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@34@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@35@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@34@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@35@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@37@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@37@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef19|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@34@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@35@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@20@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@19@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@37@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@37@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef16|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@34@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@35@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@24@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@23@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@37@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@37@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef17|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@37@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef18|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@44@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@41@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@42@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@41@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@42@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@44@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@44@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef26|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@41@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@42@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@20@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@19@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@44@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@44@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef23|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@41@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@42@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@24@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@23@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@44@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@44@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef24|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@44@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef25|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@49@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@47@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@47@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@49@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@49@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef33|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@47@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@20@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@19@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@49@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@49@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef30|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@46@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@47@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@24@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@23@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@49@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@49@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef31|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@49@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef32|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@56@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@53@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@54@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@53@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@54@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@56@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@56@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef40|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@53@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@54@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@20@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@19@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@56@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@56@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef37|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@53@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@54@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@24@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@23@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@56@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@56@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef38|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@56@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef39|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@61@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@58@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@59@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@58@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@59@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@61@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@61@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef47|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@58@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@59@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@20@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@19@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@61@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@61@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef44|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@58@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@59@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@24@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@23@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@61@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@61@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef45|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@61@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef46|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@68@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@65@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@66@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@65@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@66@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@68@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@68@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef54|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@65@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@66@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@20@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@19@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@68@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@68@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef51|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@65@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@66@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@24@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@23@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@68@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@68@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef52|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@68@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef53|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@73@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@70@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@71@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@70@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@71@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@73@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@73@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef61|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@70@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@71@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@20@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@19@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@73@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@73@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef58|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@70@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@71@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@24@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@23@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@73@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@73@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef59|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@73@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef60|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@85@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@85@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@85@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef75|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@20@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@19@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@85@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r)))
      :pattern (($FVF.lookup_next (sm@85@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r))
      :qid |qp.fvfValDef72|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@82@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@83@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@24@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@23@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@85@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@85@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef73|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first s@$)) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r))
      :pattern (($FVF.lookup_next (sm@85@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef74|))
    (=>
      (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
      (and
        (Set_equal (Set_union g0@2@00 g1@3@00) (Set_union g1@3@00 g0@2@00))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ (ite
                  (Set_in v g0@2@00)
                  (ite
                    (Set_in u g0@2@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
            (exists_path<Bool> ($$ (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
              (ite
                (and
                  (Set_in u g0@2@00)
                  (and
                    (Set_in v g0@2@00)
                    (not
                      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
                ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
            (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
              ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (exists_path<Bool> ($$ (ite
                  (Set_in v g1@3@00)
                  (ite
                    (Set_in u g1@3@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
            (exists_path<Bool> ($$ (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@49@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@73@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@49@00 s@$ g0@2@00 g1@3@00))
            ($SortWrappers.$FVF<next>To$Snap (sm@73@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (not
                  (exists_path<Bool> ($$ (ite
                    (Set_in v g0@2@00)
                    (ite
                      (Set_in u g0@2@00)
                      ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)))
                    ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))))
            (not
              (exists_path<Bool> ($$ (ite
                (and
                  (Set_in u g0@2@00)
                  (and
                    (Set_in v g0@2@00)
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
                ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
                (ite
                  (and
                    (Set_in u g0@2@00)
                    (and
                      (Set_in v g0@2@00)
                      (not
                        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
                  ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v)))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
            (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
              ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and
              (Set_in u g1@3@00)
              (and
                (Set_in v g1@3@00)
                (not
                  (exists_path<Bool> ($$ (ite
                    (Set_in v g1@3@00)
                    (ite
                      (Set_in u g1@3@00)
                      ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00))
                      ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00)))
                    ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))))
            (not
              (exists_path<Bool> ($$ (ite
                (and
                  (Set_in u g1@3@00)
                  (and
                    (Set_in v g1@3@00)
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
                ($SortWrappers.$FVF<next>To$Snap (sm@49@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<next>To$Snap (sm@73@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v)))
          :pattern ((exists_path<Bool> ($$ (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
          :pattern ((exists_path<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
            (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
              ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and (Set_in u g0@2@00) (Set_in v g0@2@00))
            (__learn_trigger__<Bool> (exists_path<Bool> ($$ (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
              (ite
                (and
                  (Set_in u g0@2@00)
                  (and
                    (Set_in v g0@2@00)
                    (not
                      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
                ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v)))
          :pattern ((DEP<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
            (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
              ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v u $unresolved@100@00))
          :pattern ((DEP<Bool> ($$ (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
            (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
              ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u $unresolved@101@00 v $unresolved@102@00))
          ))))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-100|)))
; WARNING: (1902,11): 'if' cannot be used in patterns.
; WARNING: (1902,11): 'if' cannot be used in patterns.
; WARNING: (1902,11): 'and' cannot be used in patterns.
; WARNING: (1902,11): 'and' cannot be used in patterns.
; WARNING: (1902,11): 'not' cannot be used in patterns.
; WARNING: (1902,11): 'and' cannot be used in patterns.
; WARNING: (1902,11): 'and' cannot be used in patterns.
; WARNING: (1902,11): 'if' cannot be used in patterns.
; WARNING: (1902,11): 'if' cannot be used in patterns.
; WARNING: (1939,11): 'if' cannot be used in patterns.
; WARNING: (1939,11): 'if' cannot be used in patterns.
; WARNING: (1939,11): 'and' cannot be used in patterns.
; WARNING: (1939,11): 'and' cannot be used in patterns.
; WARNING: (1939,11): 'if' cannot be used in patterns.
; WARNING: (1994,11): 'if' cannot be used in patterns.
; WARNING: (1994,11): 'if' cannot be used in patterns.
; WARNING: (1994,11): 'and' cannot be used in patterns.
; WARNING: (1994,11): 'and' cannot be used in patterns.
; WARNING: (1994,11): 'not' cannot be used in patterns.
; WARNING: (1994,11): 'and' cannot be used in patterns.
; WARNING: (1994,11): 'and' cannot be used in patterns.
; WARNING: (1994,11): 'if' cannot be used in patterns.
; WARNING: (1994,11): 'if' cannot be used in patterns.
; WARNING: (2041,11): 'if' cannot be used in patterns.
; WARNING: (2041,11): 'if' cannot be used in patterns.
; WARNING: (2041,11): 'and' cannot be used in patterns.
; WARNING: (2041,11): 'and' cannot be used in patterns.
; WARNING: (2041,11): 'not' cannot be used in patterns.
; WARNING: (2041,11): 'and' cannot be used in patterns.
; WARNING: (2041,11): 'and' cannot be used in patterns.
; WARNING: (2041,11): 'if' cannot be used in patterns.
; WARNING: (2041,11): 'if' cannot be used in patterns.
; WARNING: (2093,11): 'and' cannot be used in patterns.
; WARNING: (2093,11): 'and' cannot be used in patterns.
; WARNING: (2093,11): 'not' cannot be used in patterns.
; WARNING: (2093,11): 'and' cannot be used in patterns.
; WARNING: (2093,11): 'and' cannot be used in patterns.
; WARNING: (2093,11): 'if' cannot be used in patterns.
; WARNING: (2093,11): 'if' cannot be used in patterns.
; WARNING: (2093,11): 'and' cannot be used in patterns.
; WARNING: (2093,11): 'and' cannot be used in patterns.
; WARNING: (2093,11): 'not' cannot be used in patterns.
; WARNING: (2093,11): 'and' cannot be used in patterns.
; WARNING: (2093,11): 'and' cannot be used in patterns.
; WARNING: (2093,11): 'if' cannot be used in patterns.
; WARNING: (2093,11): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) true)
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-101|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g0@2@00) (Set_in v g0@2@00))
          ($$%precondition (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00))) g0@2@00))
        (=>
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (exists_path<Bool> ($$ (ite
                (Set_in v g0@2@00)
                (ite
                  (Set_in u g0@2@00)
                  ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)))
                ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v)))
          (and
            (and
              (=>
                (and (Set_in u g0@2@00) (Set_in v g0@2@00))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00))
              (ite
                (and
                  (Set_in u g0@2@00)
                  (and
                    (Set_in v g0@2@00)
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
                true
                (=>
                  (and (Set_in u g0@2@00) (Set_in v g0@2@00))
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00))))
            ($$%precondition (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
              (ite
                (and
                  (Set_in u g0@2@00)
                  (and
                    (Set_in v g0@2@00)
                    (not
                      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
                ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g0@2@00)
        (ite
          (Set_in u g0@2@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
        (ite
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
          ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-102|)))
; WARNING: (2180,7): 'if' cannot be used in patterns.
; WARNING: (2180,7): 'if' cannot be used in patterns.
; WARNING: (2180,7): 'and' cannot be used in patterns.
; WARNING: (2180,7): 'and' cannot be used in patterns.
; WARNING: (2180,7): 'not' cannot be used in patterns.
; WARNING: (2180,7): 'and' cannot be used in patterns.
; WARNING: (2180,7): 'and' cannot be used in patterns.
; WARNING: (2180,7): 'if' cannot be used in patterns.
; WARNING: (2180,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g1@3@00) (Set_in v g1@3@00))
          ($$%precondition (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00))) g1@3@00))
        (=>
          (and
            (Set_in u g1@3@00)
            (and
              (Set_in v g1@3@00)
              (exists_path<Bool> ($$ (ite
                (Set_in v g1@3@00)
                (ite
                  (Set_in u g1@3@00)
                  ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00))
                  ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00)))
                ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v)))
          (and
            (=>
              (and (Set_in u g1@3@00) (Set_in v g1@3@00))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00)) g1@3@00))
            ($$%precondition (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@49@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@73@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g1@3@00)
        (ite
          (Set_in u g1@3@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g1@3@00)
          (and
            (Set_in v g1@3@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@49@00 s@$ g0@2@00 g1@3@00))
        ($SortWrappers.$FVF<next>To$Snap (sm@73@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-103|)))
; WARNING: (2236,7): 'if' cannot be used in patterns.
; WARNING: (2236,7): 'if' cannot be used in patterns.
; WARNING: (2236,7): 'and' cannot be used in patterns.
; WARNING: (2236,7): 'and' cannot be used in patterns.
; WARNING: (2236,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g0@2@00) (Set_in v g0@2@00))
          ($$%precondition (ite
            (Set_in v g0@2@00)
            (ite
              (Set_in u g0@2@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00))) g0@2@00))
        (=>
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (not
                (exists_path<Bool> ($$ (ite
                  (Set_in v g0@2@00)
                  (ite
                    (Set_in u g0@2@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))))
          (and
            (and
              (=>
                (and (Set_in u g0@2@00) (Set_in v g0@2@00))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00))
              (ite
                (and
                  (Set_in u g0@2@00)
                  (and
                    (Set_in v g0@2@00)
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
                true
                (=>
                  (and (Set_in u g0@2@00) (Set_in v g0@2@00))
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00))))
            ($$%precondition (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
              (ite
                (and
                  (Set_in u g0@2@00)
                  (and
                    (Set_in v g0@2@00)
                    (not
                      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
                ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
                ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g0@2@00)
        (ite
          (Set_in u g0@2@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00))) g0@2@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
        (ite
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
          ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-104|)))
; WARNING: (2320,7): 'if' cannot be used in patterns.
; WARNING: (2320,7): 'if' cannot be used in patterns.
; WARNING: (2320,7): 'and' cannot be used in patterns.
; WARNING: (2320,7): 'and' cannot be used in patterns.
; WARNING: (2320,7): 'not' cannot be used in patterns.
; WARNING: (2320,7): 'and' cannot be used in patterns.
; WARNING: (2320,7): 'and' cannot be used in patterns.
; WARNING: (2320,7): 'if' cannot be used in patterns.
; WARNING: (2320,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (and
        (=>
          (and (Set_in u g1@3@00) (Set_in v g1@3@00))
          ($$%precondition (ite
            (Set_in v g1@3@00)
            (ite
              (Set_in u g1@3@00)
              ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00)))
            ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00))) g1@3@00))
        (=>
          (and
            (Set_in u g1@3@00)
            (and
              (Set_in v g1@3@00)
              (not
                (exists_path<Bool> ($$ (ite
                  (Set_in v g1@3@00)
                  (ite
                    (Set_in u g1@3@00)
                    ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00))
                    ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00)))
                  ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))))
          (and
            (=>
              (and (Set_in u g1@3@00) (Set_in v g1@3@00))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00)) g1@3@00))
            ($$%precondition (ite
              (and
                (Set_in u g1@3@00)
                (and
                  (Set_in v g1@3@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)))
              ($SortWrappers.$FVF<next>To$Snap (sm@49@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@73@00 s@$ g0@2@00 g1@3@00))) (Set_union g1@3@00 g0@2@00)))))
      :pattern ((exists_path<Bool> ($$ (ite
        (Set_in v g1@3@00)
        (ite
          (Set_in u g1@3@00)
          ($SortWrappers.$FVF<next>To$Snap (sm@44@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00)))
        ($SortWrappers.$FVF<next>To$Snap (sm@68@00 s@$ g0@2@00 g1@3@00))) g1@3@00) u v))
      :pattern ((exists_path<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
        (ite
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
          ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-105|)))
; WARNING: (2385,7): 'if' cannot be used in patterns.
; WARNING: (2385,7): 'if' cannot be used in patterns.
; WARNING: (2385,7): 'and' cannot be used in patterns.
; WARNING: (2385,7): 'and' cannot be used in patterns.
; WARNING: (2385,7): 'not' cannot be used in patterns.
; WARNING: (2385,7): 'and' cannot be used in patterns.
; WARNING: (2385,7): 'and' cannot be used in patterns.
; WARNING: (2385,7): 'if' cannot be used in patterns.
; WARNING: (2385,7): 'if' cannot be used in patterns.
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (=>
        (and (Set_in u g0@2@00) (Set_in v g0@2@00))
        (and
          (and
            (=>
              (and (Set_in u g0@2@00) (Set_in v g0@2@00))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00))
            (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
              true
              (=>
                (and (Set_in u g0@2@00) (Set_in v g0@2@00))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00))))
          ($$%precondition (ite
            (and
              (Set_in u g0@2@00)
              (and
                (Set_in v g0@2@00)
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
            ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
            (ite
              (and
                (Set_in u g0@2@00)
                (and
                  (Set_in v g0@2@00)
                  (not
                    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
              ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
              ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00))))
      :pattern ((DEP<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
        (ite
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
          ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u v u $unresolved@100@00))
      :pattern ((DEP<Bool> ($$ (ite
        (and
          (Set_in u g0@2@00)
          (and
            (Set_in v g0@2@00)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@32@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)))
        ($SortWrappers.$FVF<next>To$Snap (sm@37@00 s@$ g0@2@00 g1@3@00))
        (ite
          (and
            (Set_in u g0@2@00)
            (and
              (Set_in v g0@2@00)
              (not
                (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@56@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))))
          ($SortWrappers.$FVF<next>To$Snap (sm@61@00 s@$ g0@2@00 g1@3@00))
          ($SortWrappers.$FVF<next>To$Snap (sm@85@00 s@$ g0@2@00 g1@3@00)))) (Set_union g0@2@00 g1@3@00)) u $unresolved@101@00 v $unresolved@102@00))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-106|)))
; WARNING: (2457,7): 'and' cannot be used in patterns.
; WARNING: (2457,7): 'and' cannot be used in patterns.
; WARNING: (2457,7): 'not' cannot be used in patterns.
; WARNING: (2457,7): 'and' cannot be used in patterns.
; WARNING: (2457,7): 'and' cannot be used in patterns.
; WARNING: (2457,7): 'if' cannot be used in patterns.
; WARNING: (2457,7): 'if' cannot be used in patterns.
; WARNING: (2457,7): 'and' cannot be used in patterns.
; WARNING: (2457,7): 'and' cannot be used in patterns.
; WARNING: (2457,7): 'not' cannot be used in patterns.
; WARNING: (2457,7): 'and' cannot be used in patterns.
; WARNING: (2457,7): 'and' cannot be used in patterns.
; WARNING: (2457,7): 'if' cannot be used in patterns.
; WARNING: (2457,7): 'if' cannot be used in patterns.
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- unlink_01PG_next ----------
(declare-const g@0@01 Set<$Ref>)
(declare-const node@1@01 $Ref)
(declare-const g@2@01 Set<$Ref>)
(declare-const node@3@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@4@01 $Snap)
(assert (= $t@4@01 ($Snap.combine ($Snap.first $t@4@01) ($Snap.second $t@4@01))))
(assert (= ($Snap.first $t@4@01) $Snap.unit))
; [eval] (node in g)
(assert (Set_in node@3@01 g@2@01))
(assert (=
  ($Snap.second $t@4@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@4@01))
    ($Snap.second ($Snap.second $t@4@01)))))
(assert (= ($Snap.first ($Snap.second $t@4@01)) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@2@01)))
(assert (=
  ($Snap.second ($Snap.second $t@4@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@4@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@4@01))) $Snap.unit))
; [eval] (node in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@4@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))))
(declare-const sm@5@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@5@01  $FVF<next>) node@3@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))))
(assert (not (= node@3@01 $Ref.null)))
(declare-const sm@6@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@6@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@6@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@6@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@6@01  $FVF<next>) node@3@01) node@3@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))))
(declare-const n@7@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != node
; [eval] (n in g)
(push) ; 3
; [then-branch: 0 | !(n@7@01 in g@2@01) | live]
; [else-branch: 0 | n@7@01 in g@2@01 | live]
(push) ; 4
; [then-branch: 0 | !(n@7@01 in g@2@01)]
(assert (not (Set_in n@7@01 g@2@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | n@7@01 in g@2@01]
(assert (Set_in n@7@01 g@2@01))
; [eval] n != node
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@7@01 g@2@01) (not (Set_in n@7@01 g@2@01))))
(assert (and (Set_in n@7@01 g@2@01) (not (= n@7@01 node@3@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@8@01 ($Ref) $Ref)
(declare-fun img@9@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@7@01 $Ref)) (!
  (=>
    (and (Set_in n@7@01 g@2@01) (not (= n@7@01 node@3@01)))
    (or (Set_in n@7@01 g@2@01) (not (Set_in n@7@01 g@2@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) n@7@01) n@7@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@7@01 $Ref) (n2@7@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@7@01 g@2@01) (not (= n1@7@01 node@3@01)))
      (and (Set_in n2@7@01 g@2@01) (not (= n2@7@01 node@3@01)))
      (= n1@7@01 n2@7@01))
    (= n1@7@01 n2@7@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@7@01 $Ref)) (!
  (=>
    (and (Set_in n@7@01 g@2@01) (not (= n@7@01 node@3@01)))
    (and (= (inv@8@01 n@7@01) n@7@01) (img@9@01 n@7@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) n@7@01) n@7@01))
  :qid |quant-u-108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (= (inv@8@01 r) r))
  :pattern ((inv@8@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@7@01 $Ref)) (!
  (=>
    (and (Set_in n@7@01 g@2@01) (not (= n@7@01 node@3@01)))
    (not (= n@7@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) n@7@01) n@7@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@10@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
  :pattern ((inv@8@01 r))
  :qid |quant-u-109|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))
  $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@11@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 1 | !(n$0@11@01 in g@2@01) | live]
; [else-branch: 1 | n$0@11@01 in g@2@01 | live]
(push) ; 4
; [then-branch: 1 | !(n$0@11@01 in g@2@01)]
(assert (not (Set_in n$0@11@01 g@2@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1 | n$0@11@01 in g@2@01]
(assert (Set_in n$0@11@01 g@2@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
      (=
        ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef4|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) n$0@11@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@11@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@9@01 n$0@11@01)
        (and
          (Set_in (inv@8@01 n$0@11@01) g@2@01)
          (not (= (inv@8@01 n$0@11@01) node@3@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
(assert (=>
  (Set_in n$0@11@01 g@2@01)
  (and
    (Set_in n$0@11@01 g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) n$0@11@01))))
(assert (or (Set_in n$0@11@01 g@2@01) (not (Set_in n$0@11@01 g@2@01))))
(push) ; 3
; [then-branch: 2 | n$0@11@01 in g@2@01 && Lookup(next, sm@10@01, n$0@11@01) != Null | live]
; [else-branch: 2 | !(n$0@11@01 in g@2@01 && Lookup(next, sm@10@01, n$0@11@01) != Null) | live]
(push) ; 4
; [then-branch: 2 | n$0@11@01 in g@2@01 && Lookup(next, sm@10@01, n$0@11@01) != Null]
(assert (and
  (Set_in n$0@11@01 g@2@01)
  (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
      (=
        ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef4|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) n$0@11@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@11@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@9@01 n$0@11@01)
        (and
          (Set_in (inv@8@01 n$0@11@01) g@2@01)
          (not (= (inv@8@01 n$0@11@01) node@3@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 2 | !(n$0@11@01 in g@2@01 && Lookup(next, sm@10@01, n$0@11@01) != Null)]
(assert (not
  (and
    (Set_in n$0@11@01 g@2@01)
    (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
(assert (=>
  (and
    (Set_in n$0@11@01 g@2@01)
    (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null)))
  (and
    (Set_in n$0@11@01 g@2@01)
    (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) n$0@11@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@11@01 g@2@01)
      (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null))))
  (and
    (Set_in n$0@11@01 g@2@01)
    (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef4|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@11@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@11@01 g@2@01)
      (and
        (Set_in n$0@11@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) n$0@11@01)))
    (or (Set_in n$0@11@01 g@2@01) (not (Set_in n$0@11@01 g@2@01)))
    (=>
      (and
        (Set_in n$0@11@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null)))
      (and
        (Set_in n$0@11@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) n$0@11@01)))
    (or
      (not
        (and
          (Set_in n$0@11@01 g@2@01)
          (not
            (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null))))
      (and
        (Set_in n$0@11@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) g@2@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@410@14@410@37-aux|)))
(assert (forall ((n$0@11@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@11@01 g@2@01)
      (and
        (Set_in n$0@11@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) n$0@11@01)))
    (or (Set_in n$0@11@01 g@2@01) (not (Set_in n$0@11@01 g@2@01)))
    (=>
      (and
        (Set_in n$0@11@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null)))
      (and
        (Set_in n$0@11@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) n$0@11@01)))
    (or
      (not
        (and
          (Set_in n$0@11@01 g@2@01)
          (not
            (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null))))
      (and
        (Set_in n$0@11@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null)))))
  :pattern ((Set_in n$0@11@01 g@2@01) ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) n$0@11@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@410@14@410@37-aux|)))
(assert (forall ((n$0@11@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@11@01 g@2@01)
      (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) g@2@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) g@2@01))
  :pattern ((Set_in n$0@11@01 g@2@01) ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n$0@11@01) n$0@11@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@410@14@410@37|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 ($Snap.combine ($Snap.first $t@12@01) ($Snap.second $t@12@01))))
(assert (= ($Snap.first $t@12@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@12@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@12@01))
    ($Snap.second ($Snap.second $t@12@01)))))
(assert (= ($Snap.first ($Snap.second $t@12@01)) $Snap.unit))
; [eval] (node in g)
(assert (=
  ($Snap.second ($Snap.second $t@12@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@12@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
(declare-const sm@13@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@13@01  $FVF<next>) node@3@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@12@01))))))
(declare-const sm@14@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef6|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) node@3@01) node@3@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@12@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
(declare-const n$1@15@01 $Ref)
(push) ; 3
; [eval] (n$1 in g) && n$1 != node
; [eval] (n$1 in g)
(push) ; 4
; [then-branch: 3 | !(n$1@15@01 in g@2@01) | live]
; [else-branch: 3 | n$1@15@01 in g@2@01 | live]
(push) ; 5
; [then-branch: 3 | !(n$1@15@01 in g@2@01)]
(assert (not (Set_in n$1@15@01 g@2@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | n$1@15@01 in g@2@01]
(assert (Set_in n$1@15@01 g@2@01))
; [eval] n$1 != node
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$1@15@01 g@2@01) (not (Set_in n$1@15@01 g@2@01))))
(assert (and (Set_in n$1@15@01 g@2@01) (not (= n$1@15@01 node@3@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@16@01 ($Ref) $Ref)
(declare-fun img@17@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$1@15@01 $Ref)) (!
  (=>
    (and (Set_in n$1@15@01 g@2@01) (not (= n$1@15@01 node@3@01)))
    (or (Set_in n$1@15@01 g@2@01) (not (Set_in n$1@15@01 g@2@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) n$1@15@01) n$1@15@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$11@15@01 $Ref) (n$12@15@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$11@15@01 g@2@01) (not (= n$11@15@01 node@3@01)))
      (and (Set_in n$12@15@01 g@2@01) (not (= n$12@15@01 node@3@01)))
      (= n$11@15@01 n$12@15@01))
    (= n$11@15@01 n$12@15@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@15@01 $Ref)) (!
  (=>
    (and (Set_in n$1@15@01 g@2@01) (not (= n$1@15@01 node@3@01)))
    (and (= (inv@16@01 n$1@15@01) n$1@15@01) (img@17@01 n$1@15@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) n$1@15@01) n$1@15@01))
  :qid |quant-u-111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
    (= (inv@16@01 r) r))
  :pattern ((inv@16@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@15@01 $Ref)) (!
  (=>
    (and (Set_in n$1@15@01 g@2@01) (not (= n$1@15@01 node@3@01)))
    (not (= n$1@15@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) n$1@15@01) n$1@15@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@18@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
  :pattern ((inv@16@01 r))
  :qid |quant-u-112|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@19@01 $Ref)
(push) ; 3
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 4
; [then-branch: 4 | !(n$2@19@01 in g@2@01) | live]
; [else-branch: 4 | n$2@19@01 in g@2@01 | live]
(push) ; 5
; [then-branch: 4 | !(n$2@19@01 in g@2@01)]
(assert (not (Set_in n$2@19@01 g@2@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | n$2@19@01 in g@2@01]
(assert (Set_in n$2@19@01 g@2@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
      (=
        ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) n$2@19@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@19@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@17@01 n$2@19@01)
        (and
          (Set_in (inv@16@01 n$2@19@01) g@2@01)
          (not (= (inv@16@01 n$2@19@01) node@3@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (Set_in n$2@19@01 g@2@01)
  (and
    (Set_in n$2@19@01 g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) n$2@19@01))))
(assert (or (Set_in n$2@19@01 g@2@01) (not (Set_in n$2@19@01 g@2@01))))
(push) ; 4
; [then-branch: 5 | n$2@19@01 in g@2@01 && Lookup(next, sm@18@01, n$2@19@01) != Null | live]
; [else-branch: 5 | !(n$2@19@01 in g@2@01 && Lookup(next, sm@18@01, n$2@19@01) != Null) | live]
(push) ; 5
; [then-branch: 5 | n$2@19@01 in g@2@01 && Lookup(next, sm@18@01, n$2@19@01) != Null]
(assert (and
  (Set_in n$2@19@01 g@2@01)
  (not (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
      (=
        ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) n$2@19@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@19@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@17@01 n$2@19@01)
        (and
          (Set_in (inv@16@01 n$2@19@01) g@2@01)
          (not (= (inv@16@01 n$2@19@01) node@3@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(n$2@19@01 in g@2@01 && Lookup(next, sm@18@01, n$2@19@01) != Null)]
(assert (not
  (and
    (Set_in n$2@19@01 g@2@01)
    (not (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (and
    (Set_in n$2@19@01 g@2@01)
    (not (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null)))
  (and
    (Set_in n$2@19@01 g@2@01)
    (not (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) n$2@19@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@19@01 g@2@01)
      (not (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null))))
  (and
    (Set_in n$2@19@01 g@2@01)
    (not (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef9|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@19@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@19@01 g@2@01)
      (and
        (Set_in n$2@19@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) n$2@19@01)))
    (or (Set_in n$2@19@01 g@2@01) (not (Set_in n$2@19@01 g@2@01)))
    (=>
      (and
        (Set_in n$2@19@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null)))
      (and
        (Set_in n$2@19@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) n$2@19@01)))
    (or
      (not
        (and
          (Set_in n$2@19@01 g@2@01)
          (not
            (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null))))
      (and
        (Set_in n$2@19@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) g@2@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@411@13@411@36-aux|)))
(assert (forall ((n$2@19@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@19@01 g@2@01)
      (and
        (Set_in n$2@19@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) n$2@19@01)))
    (or (Set_in n$2@19@01 g@2@01) (not (Set_in n$2@19@01 g@2@01)))
    (=>
      (and
        (Set_in n$2@19@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null)))
      (and
        (Set_in n$2@19@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) n$2@19@01)))
    (or
      (not
        (and
          (Set_in n$2@19@01 g@2@01)
          (not
            (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null))))
      (and
        (Set_in n$2@19@01 g@2@01)
        (not
          (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null)))))
  :pattern ((Set_in n$2@19@01 g@2@01) ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) n$2@19@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@411@13@411@36-aux|)))
(assert (forall ((n$2@19@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@19@01 g@2@01)
      (not (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) g@2@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) g@2@01))
  :pattern ((Set_in n$2@19@01 g@2@01) ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n$2@19@01) n$2@19@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@411@13@411@36|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
  $Snap.unit))
; [eval] node.next == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
      (=
        ($FVF.lookup_next (as sm@18@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@18@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) node@3@01) node@3@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@17@01 node@3@01)
        (and
          (Set_in (inv@16@01 node@3@01) g@2@01)
          (not (= (inv@16@01 node@3@01) node@3@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@18@01  $FVF<next>) node@3@01) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
  $Snap.unit))
; [eval] old(node.next) == null ==> $$(g) == old($$(g))
; [eval] old(node.next) == null
; [eval] old(node.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
      (=
        ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef4|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) node@3@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@9@01 node@3@01)
        (and
          (Set_in (inv@8@01 node@3@01) g@2@01)
          (not (= (inv@8@01 node@3@01) node@3@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 6 | Lookup(next, sm@10@01, node@3@01) == Null | live]
; [else-branch: 6 | Lookup(next, sm@10@01, node@3@01) != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 6 | Lookup(next, sm@10@01, node@3@01) == Null]
(assert (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))
; [eval] $$(g) == old($$(g))
; [eval] $$(g)
(push) ; 5
(declare-const n@20@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@20@01 g@2@01))
(pop) ; 6
(declare-fun inv@21@01 ($Ref) $Ref)
(declare-fun img@22@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@20@01 $Ref) (n2@20@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@20@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n1@20@01) n1@20@01))
      (and
        (Set_in n2@20@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n2@20@01) n2@20@01))
      (= n1@20@01 n2@20@01))
    (= n1@20@01 n2@20@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@20@01 $Ref)) (!
  (=>
    (Set_in n@20@01 g@2@01)
    (and (= (inv@21@01 n@20@01) n@20@01) (img@22@01 n@20@01)))
  :pattern ((Set_in n@20@01 g@2@01))
  :pattern ((inv@21@01 n@20@01))
  :pattern ((img@22@01 n@20@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@22@01 r) (Set_in (inv@21@01 r) g@2@01)) (= (inv@21@01 r) r))
  :pattern ((inv@21@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@21@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
  :pattern ((inv@21@01 r))
  :qid |quant-u-114|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@23@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r) (= r (inv@21@01 r)))
    ($Perm.min
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@24@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r) (= r (inv@21@01 r)))
    ($Perm.min
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@23@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@23@01 r))
    $Perm.No)
  
  :qid |quant-u-116|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r) (= r (inv@21@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@23@01 r)) $Perm.No))
  
  :qid |quant-u-117|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@24@01 node@3@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@24@01 r) $Perm.No)
  
  :qid |quant-u-119|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r) (= r (inv@21@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@23@01 r)) (pTaken@24@01 r))
      $Perm.No))
  
  :qid |quant-u-120|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@25@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r)))
    (=>
      (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef13|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g@2@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@20@01 $Ref)) (!
  (=>
    (Set_in n@20@01 g@2@01)
    (and (= (inv@21@01 n@20@01) n@20@01) (img@22@01 n@20@01)))
  :pattern ((Set_in n@20@01 g@2@01))
  :pattern ((inv@21@01 n@20@01))
  :pattern ((img@22@01 n@20@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@22@01 r) (Set_in (inv@21@01 r) g@2@01)) (= (inv@21@01 r) r))
  :pattern ((inv@21@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r)))
    (=>
      (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@21@01 r) g@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
    :pattern ((inv@21@01 r))
    :qid |quant-u-114|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g@2@01)))
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 5
(declare-const n@26@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@26@01 g@2@01))
(pop) ; 6
(declare-fun inv@27@01 ($Ref) $Ref)
(declare-fun img@28@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@26@01 $Ref) (n2@26@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@26@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n1@26@01) n1@26@01))
      (and
        (Set_in n2@26@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n2@26@01) n2@26@01))
      (= n1@26@01 n2@26@01))
    (= n1@26@01 n2@26@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g@2@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g@2@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g@2@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@27@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
  :pattern ((inv@27@01 r))
  :qid |quant-u-122|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@29@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r) (= r (inv@27@01 r)))
    ($Perm.min
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@30@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r) (= r (inv@27@01 r)))
    ($Perm.min
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@29@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@29@01 r))
    $Perm.No)
  
  :qid |quant-u-124|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r) (= r (inv@27@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@29@01 r)) $Perm.No))
  
  :qid |quant-u-125|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@30@01 node@3@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@30@01 r) $Perm.No)
  
  :qid |quant-u-127|))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r) (= r (inv@27@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@29@01 r)) (pTaken@30@01 r))
      $Perm.No))
  
  :qid |quant-u-128|))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@31@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@31@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@31@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@31@01  $FVF<next>))))
  :qid |qp.fvfDomDef17|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@31@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@31@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@31@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@31@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@31@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@31@01  $FVF<next>)) g@2@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g@2@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g@2@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g@2@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@31@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@31@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@31@01  $FVF<next>))))
  :qid |qp.fvfDomDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@31@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@31@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@31@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@31@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@31@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@27@01 r) g@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
    :pattern ((inv@27@01 r))
    :qid |quant-u-122|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@31@01  $FVF<next>)) g@2@01)))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 6 | Lookup(next, sm@10@01, node@3@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@20@01 $Ref)) (!
  (=>
    (Set_in n@20@01 g@2@01)
    (and (= (inv@21@01 n@20@01) n@20@01) (img@22@01 n@20@01)))
  :pattern ((Set_in n@20@01 g@2@01))
  :pattern ((inv@21@01 n@20@01))
  :pattern ((img@22@01 n@20@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@22@01 r) (Set_in (inv@21@01 r) g@2@01)) (= (inv@21@01 r) r))
  :pattern ((inv@21@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r)))
    (=>
      (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@21@01 r) g@2@01) (img@22@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g@2@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g@2@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g@2@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@31@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@31@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@31@01  $FVF<next>))))
  :qid |qp.fvfDomDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@31@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@31@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g@2@01) (img@28@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@31@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@31@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@31@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef16|)))
(assert (=>
  (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null)
  (and
    (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@21@01 r) g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
      :pattern ((inv@21@01 r))
      :qid |quant-u-114|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g@2@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@27@01 r) g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
      :pattern ((inv@27@01 r))
      :qid |quant-u-122|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@31@01  $FVF<next>)) g@2@01))))
; Joined path conditions
(assert (or
  (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))
  (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null)))
(assert (=>
  (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null)
  (Set_equal ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@31@01  $FVF<next>)) g@2@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  $Snap.unit))
; [eval] old(node.next) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } { exists_path($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == node && v2 == old(node.next))))
; [eval] old(node.next) != null
; [eval] old(node.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
      (=
        ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef4|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@9@01 node@3@01)
        (and
          (Set_in (inv@8@01 node@3@01) g@2@01)
          (not (= (inv@8@01 node@3@01) node@3@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 7 | Lookup(next, sm@10@01, node@3@01) != Null | live]
; [else-branch: 7 | Lookup(next, sm@10@01, node@3@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 7 | Lookup(next, sm@10@01, node@3@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null)))
; [eval] (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } { exists_path($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == node && v2 == old(node.next))))
(declare-const v1@32@01 $Ref)
(declare-const v2@33@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == node && v2 == old(node.next)))
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@34@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@34@01 g@2@01))
(pop) ; 7
(declare-fun inv@35@01 ($Ref) $Ref)
(declare-fun img@36@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@34@01 $Ref) (n2@34@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@34@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n1@34@01) n1@34@01))
      (and
        (Set_in n2@34@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n2@34@01) n2@34@01))
      (= n1@34@01 n2@34@01))
    (= n1@34@01 n2@34@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@34@01 $Ref)) (!
  (=>
    (Set_in n@34@01 g@2@01)
    (and (= (inv@35@01 n@34@01) n@34@01) (img@36@01 n@34@01)))
  :pattern ((Set_in n@34@01 g@2@01))
  :pattern ((inv@35@01 n@34@01))
  :pattern ((img@36@01 n@34@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@36@01 r) (Set_in (inv@35@01 r) g@2@01)) (= (inv@35@01 r) r))
  :pattern ((inv@35@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@35@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
  :pattern ((inv@35@01 r))
  :qid |quant-u-130|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@37@01 ((r $Ref) (v1@32@01 $Ref) (v2@33@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r) (= r (inv@35@01 r)))
    ($Perm.min
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@38@01 ((r $Ref) (v1@32@01 $Ref) (v2@33@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r) (= r (inv@35@01 r)))
    ($Perm.min
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@37@01 r v1@32@01 v2@33@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@37@01 r v1@32@01 v2@33@01))
    $Perm.No)
  
  :qid |quant-u-132|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r) (= r (inv@35@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@37@01 r v1@32@01 v2@33@01))
      $Perm.No))
  
  :qid |quant-u-133|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@38@01 node@3@01 v1@32@01 v2@33@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@38@01 r v1@32@01 v2@33@01) $Perm.No)
  
  :qid |quant-u-135|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r) (= r (inv@35@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@37@01 r v1@32@01 v2@33@01))
        (pTaken@38@01 r v1@32@01 v2@33@01))
      $Perm.No))
  
  :qid |quant-u-136|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@39@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r)))
    (=>
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r))
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@2@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@34@01 $Ref)) (!
  (=>
    (Set_in n@34@01 g@2@01)
    (and (= (inv@35@01 n@34@01) n@34@01) (img@36@01 n@34@01)))
  :pattern ((Set_in n@34@01 g@2@01))
  :pattern ((inv@35@01 n@34@01))
  :pattern ((img@36@01 n@34@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@36@01 r) (Set_in (inv@35@01 r) g@2@01)) (= (inv@35@01 r) r))
  :pattern ((inv@35@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r)))
    (=>
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r))
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@35@01 r) g@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
    :pattern ((inv@35@01 r))
    :qid |quant-u-130|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@2@01)))
; [eval] edge(old($$(g)), v1, v2) && !(v1 == node && v2 == old(node.next))
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 6
(declare-const n@40@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@40@01 g@2@01))
(pop) ; 7
(declare-fun inv@41@01 ($Ref) $Ref)
(declare-fun img@42@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@40@01 $Ref) (n2@40@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@40@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n1@40@01) n1@40@01))
      (and
        (Set_in n2@40@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n2@40@01) n2@40@01))
      (= n1@40@01 n2@40@01))
    (= n1@40@01 n2@40@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@40@01 $Ref)) (!
  (=>
    (Set_in n@40@01 g@2@01)
    (and (= (inv@41@01 n@40@01) n@40@01) (img@42@01 n@40@01)))
  :pattern ((Set_in n@40@01 g@2@01))
  :pattern ((inv@41@01 n@40@01))
  :pattern ((img@42@01 n@40@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@42@01 r) (Set_in (inv@41@01 r) g@2@01)) (= (inv@41@01 r) r))
  :pattern ((inv@41@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@41@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
  :pattern ((inv@41@01 r))
  :qid |quant-u-138|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@43@01 ((r $Ref) (v1@32@01 $Ref) (v2@33@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r) (= r (inv@41@01 r)))
    ($Perm.min
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@44@01 ((r $Ref) (v1@32@01 $Ref) (v2@33@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r) (= r (inv@41@01 r)))
    ($Perm.min
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@43@01 r v1@32@01 v2@33@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@43@01 r v1@32@01 v2@33@01))
    $Perm.No)
  
  :qid |quant-u-140|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r) (= r (inv@41@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@43@01 r v1@32@01 v2@33@01))
      $Perm.No))
  
  :qid |quant-u-141|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@44@01 node@3@01 v1@32@01 v2@33@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@44@01 r v1@32@01 v2@33@01) $Perm.No)
  
  :qid |quant-u-143|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r) (= r (inv@41@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@43@01 r v1@32@01 v2@33@01))
        (pTaken@44@01 r v1@32@01 v2@33@01))
      $Perm.No))
  
  :qid |quant-u-144|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@45@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r)))
    (=>
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@40@01 $Ref)) (!
  (=>
    (Set_in n@40@01 g@2@01)
    (and (= (inv@41@01 n@40@01) n@40@01) (img@42@01 n@40@01)))
  :pattern ((Set_in n@40@01 g@2@01))
  :pattern ((inv@41@01 n@40@01))
  :pattern ((img@42@01 n@40@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@42@01 r) (Set_in (inv@41@01 r) g@2@01)) (= (inv@41@01 r) r))
  :pattern ((inv@41@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r)))
    (=>
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@41@01 r) g@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
    :pattern ((inv@41@01 r))
    :qid |quant-u-138|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01)))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 8 | !(edge[Bool]($$(sm@45@01, g@2@01), v1@32@01, v2@33@01)) | live]
; [else-branch: 8 | edge[Bool]($$(sm@45@01, g@2@01), v1@32@01, v2@33@01) | live]
(push) ; 7
; [then-branch: 8 | !(edge[Bool]($$(sm@45@01, g@2@01), v1@32@01, v2@33@01))]
(assert (not
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 8 | edge[Bool]($$(sm@45@01, g@2@01), v1@32@01, v2@33@01)]
(assert (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))
; [eval] !(v1 == node && v2 == old(node.next))
; [eval] v1 == node && v2 == old(node.next)
; [eval] v1 == node
(push) ; 8
; [then-branch: 9 | v1@32@01 != node@3@01 | live]
; [else-branch: 9 | v1@32@01 == node@3@01 | live]
(push) ; 9
; [then-branch: 9 | v1@32@01 != node@3@01]
(assert (not (= v1@32@01 node@3@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 9 | v1@32@01 == node@3@01]
(assert (= v1@32@01 node@3@01))
; [eval] v2 == old(node.next)
; [eval] old(node.next)
(declare-const sm@46@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@46@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@46@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(declare-const pm@47@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@47@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@47@01  $FPM) r))
  :qid |qp.resPrmSumDef29|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@47@01  $FPM) r))
  :qid |qp.resTrgDef30|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) node@3@01) node@3@01))
(push) ; 10
(assert (not (< $Perm.No ($FVF.perm_next (as pm@47@01  $FPM) node@3@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@46@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@46@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@47@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@47@01  $FPM) r))
  :qid |qp.resPrmSumDef29|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@47@01  $FPM) r))
  :qid |qp.resTrgDef30|)))
(assert (=>
  (= v1@32@01 node@3@01)
  (and
    (= v1@32@01 node@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) node@3@01) node@3@01))))
(assert (or (= v1@32@01 node@3@01) (not (= v1@32@01 node@3@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@46@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@46@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@47@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@47@01  $FPM) r))
  :qid |qp.resPrmSumDef29|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@47@01  $FPM) r))
  :qid |qp.resTrgDef30|)))
(assert (=>
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
  (and
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
    (=>
      (= v1@32@01 node@3@01)
      (and
        (= v1@32@01 node@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) node@3@01) node@3@01)))
    (or (= v1@32@01 node@3@01) (not (= v1@32@01 node@3@01))))))
(assert (or
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@48@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@48@01 g@2@01))
(pop) ; 7
(declare-fun inv@49@01 ($Ref) $Ref)
(declare-fun img@50@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@51@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@51@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@51@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef33|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@48@01 $Ref) (n2@48@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@48@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@51@01  $FVF<next>) n1@48@01) n1@48@01))
      (and
        (Set_in n2@48@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@51@01  $FVF<next>) n2@48@01) n2@48@01))
      (= n1@48@01 n2@48@01))
    (= n1@48@01 n2@48@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@48@01 $Ref)) (!
  (=>
    (Set_in n@48@01 g@2@01)
    (and (= (inv@49@01 n@48@01) n@48@01) (img@50@01 n@48@01)))
  :pattern ((Set_in n@48@01 g@2@01))
  :pattern ((inv@49@01 n@48@01))
  :pattern ((img@50@01 n@48@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@50@01 r) (Set_in (inv@49@01 r) g@2@01)) (= (inv@49@01 r) r))
  :pattern ((inv@49@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@49@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@51@01  $FVF<next>) r) r))
  :pattern ((inv@49@01 r))
  :qid |quant-u-146|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@52@01 ((r $Ref) (v1@32@01 $Ref) (v2@33@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r) (= r (inv@49@01 r)))
    ($Perm.min
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@53@01 ((r $Ref) (v1@32@01 $Ref) (v2@33@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r) (= r (inv@49@01 r)))
    ($Perm.min
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@52@01 r v1@32@01 v2@33@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@52@01 r v1@32@01 v2@33@01))
    $Perm.No)
  
  :qid |quant-u-148|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r) (= r (inv@49@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@52@01 r v1@32@01 v2@33@01))
      $Perm.No))
  
  :qid |quant-u-149|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@53@01 node@3@01 v1@32@01 v2@33@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@53@01 r v1@32@01 v2@33@01) $Perm.No)
  
  :qid |quant-u-151|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r) (= r (inv@49@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@52@01 r v1@32@01 v2@33@01))
        (pTaken@53@01 r v1@32@01 v2@33@01))
      $Perm.No))
  
  :qid |quant-u-152|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@54@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r)))
    (=>
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r))
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>))))
  :qid |qp.fvfDomDef37|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@2@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@51@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@51@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((n@48@01 $Ref)) (!
  (=>
    (Set_in n@48@01 g@2@01)
    (and (= (inv@49@01 n@48@01) n@48@01) (img@50@01 n@48@01)))
  :pattern ((Set_in n@48@01 g@2@01))
  :pattern ((inv@49@01 n@48@01))
  :pattern ((img@50@01 n@48@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@50@01 r) (Set_in (inv@49@01 r) g@2@01)) (= (inv@49@01 r) r))
  :pattern ((inv@49@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r)))
    (=>
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r))
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>))))
  :qid |qp.fvfDomDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@49@01 r) g@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@51@01  $FVF<next>) r) r))
    :pattern ((inv@49@01 r))
    :qid |quant-u-146|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@2@01)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@51@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@51@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((n@48@01 $Ref)) (!
  (=>
    (Set_in n@48@01 g@2@01)
    (and (= (inv@49@01 n@48@01) n@48@01) (img@50@01 n@48@01)))
  :pattern ((Set_in n@48@01 g@2@01))
  :pattern ((inv@49@01 n@48@01))
  :pattern ((img@50@01 n@48@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@50@01 r) (Set_in (inv@49@01 r) g@2@01)) (= (inv@49@01 r) r))
  :pattern ((inv@49@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r)))
    (=>
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r))
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>))))
  :qid |qp.fvfDomDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@49@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@51@01  $FVF<next>) r) r))
  :pattern ((inv@49@01 r))
  :qid |quant-u-146|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@2@01))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@34@01 $Ref)) (!
  (=>
    (Set_in n@34@01 g@2@01)
    (and (= (inv@35@01 n@34@01) n@34@01) (img@36@01 n@34@01)))
  :pattern ((Set_in n@34@01 g@2@01))
  :pattern ((inv@35@01 n@34@01))
  :pattern ((img@36@01 n@34@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@36@01 r) (Set_in (inv@35@01 r) g@2@01)) (= (inv@35@01 r) r))
  :pattern ((inv@35@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r)))
    (=>
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r))
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((n@40@01 $Ref)) (!
  (=>
    (Set_in n@40@01 g@2@01)
    (and (= (inv@41@01 n@40@01) n@40@01) (img@42@01 n@40@01)))
  :pattern ((Set_in n@40@01 g@2@01))
  :pattern ((inv@41@01 n@40@01))
  :pattern ((img@42@01 n@40@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@42@01 r) (Set_in (inv@41@01 r) g@2@01)) (= (inv@41@01 r) r))
  :pattern ((inv@41@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r)))
    (=>
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@46@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@46@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@47@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@47@01  $FPM) r))
  :qid |qp.resPrmSumDef29|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@47@01  $FPM) r))
  :qid |qp.resTrgDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@51@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@51@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((n@48@01 $Ref)) (!
  (=>
    (Set_in n@48@01 g@2@01)
    (and (= (inv@49@01 n@48@01) n@48@01) (img@50@01 n@48@01)))
  :pattern ((Set_in n@48@01 g@2@01))
  :pattern ((inv@49@01 n@48@01))
  :pattern ((img@50@01 n@48@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@50@01 r) (Set_in (inv@49@01 r) g@2@01)) (= (inv@49@01 r) r))
  :pattern ((inv@49@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r)))
    (=>
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r))
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>))))
  :qid |qp.fvfDomDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@35@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
  :pattern ((inv@35@01 r))
  :qid |quant-u-130|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@2@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@41@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
  :pattern ((inv@41@01 r))
  :qid |quant-u-138|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@49@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@51@01  $FVF<next>) r) r))
  :pattern ((inv@49@01 r))
  :qid |quant-u-146|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@2@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@32@01 $Ref) (v2@33@01 $Ref)) (!
  (and
    (=>
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
      (and
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
        (=>
          (= v1@32@01 node@3@01)
          (and
            (= v1@32@01 node@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) node@3@01) node@3@01)))
        (or (= v1@32@01 node@3@01) (not (= v1@32@01 node@3@01)))))
    (or
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@414@40@417@95-aux|)))
(assert (forall ((v1@32@01 $Ref) (v2@33@01 $Ref)) (!
  (and
    (=>
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
      (and
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
        (=>
          (= v1@32@01 node@3@01)
          (and
            (= v1@32@01 node@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) node@3@01) node@3@01)))
        (or (= v1@32@01 node@3@01) (not (= v1@32@01 node@3@01)))))
    (or
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@414@40@417@95-aux|)))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 7 | Lookup(next, sm@10@01, node@3@01) == Null]
(assert (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@34@01 $Ref)) (!
  (=>
    (Set_in n@34@01 g@2@01)
    (and (= (inv@35@01 n@34@01) n@34@01) (img@36@01 n@34@01)))
  :pattern ((Set_in n@34@01 g@2@01))
  :pattern ((inv@35@01 n@34@01))
  :pattern ((img@36@01 n@34@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@36@01 r) (Set_in (inv@35@01 r) g@2@01)) (= (inv@35@01 r) r))
  :pattern ((inv@35@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r)))
    (=>
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r))
      (Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@39@01  $FVF<next>))))
  :qid |qp.fvfDomDef21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@35@01 r) g@2@01) (img@36@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((n@40@01 $Ref)) (!
  (=>
    (Set_in n@40@01 g@2@01)
    (and (= (inv@41@01 n@40@01) n@40@01) (img@42@01 n@40@01)))
  :pattern ((Set_in n@40@01 g@2@01))
  :pattern ((inv@41@01 n@40@01))
  :pattern ((img@42@01 n@40@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@42@01 r) (Set_in (inv@41@01 r) g@2@01)) (= (inv@41@01 r) r))
  :pattern ((inv@41@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r)))
    (=>
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@41@01 r) g@2@01) (img@42@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@46@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@46@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@46@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@47@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@47@01  $FPM) r))
  :qid |qp.resPrmSumDef29|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@47@01  $FPM) r))
  :qid |qp.resTrgDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@51@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@17@01 r)
      (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@51@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@51@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((n@48@01 $Ref)) (!
  (=>
    (Set_in n@48@01 g@2@01)
    (and (= (inv@49@01 n@48@01) n@48@01) (img@50@01 n@48@01)))
  :pattern ((Set_in n@48@01 g@2@01))
  :pattern ((inv@49@01 n@48@01))
  :pattern ((img@50@01 n@48@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@50@01 r) (Set_in (inv@49@01 r) g@2@01)) (= (inv@49@01 r) r))
  :pattern ((inv@49@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r)))
    (=>
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r))
      (Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@54@01  $FVF<next>))))
  :qid |qp.fvfDomDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@49@01 r) g@2@01) (img@50@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@54@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@54@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@35@01 r) g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
      :pattern ((inv@35@01 r))
      :qid |quant-u-130|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@2@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@41@01 r) g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
      :pattern ((inv@41@01 r))
      :qid |quant-u-138|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@49@01 r) g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@51@01  $FVF<next>) r) r))
      :pattern ((inv@49@01 r))
      :qid |quant-u-146|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@2@01)
    (forall ((v1@32@01 $Ref) (v2@33@01 $Ref)) (!
      (and
        (=>
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
          (and
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
            (=>
              (= v1@32@01 node@3@01)
              (and
                (= v1@32@01 node@3@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) node@3@01) node@3@01)))
            (or (= v1@32@01 node@3@01) (not (= v1@32@01 node@3@01)))))
        (or
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))))
      :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@414@40@417@95-aux|))
    (forall ((v1@32@01 $Ref) (v2@33@01 $Ref)) (!
      (and
        (=>
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
          (and
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
            (=>
              (= v1@32@01 node@3@01)
              (and
                (= v1@32@01 node@3@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@46@01  $FVF<next>) node@3@01) node@3@01)))
            (or (= v1@32@01 node@3@01) (not (= v1@32@01 node@3@01)))))
        (or
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@414@40@417@95-aux|)))))
; Joined path conditions
(assert (or
  (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null)
  (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))
  (forall ((v1@32@01 $Ref) (v2@33@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
      (and
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01)
        (not
          (and
            (= v1@32@01 node@3@01)
            (= v2@33@01 ($FVF.lookup_next (as sm@46@01  $FVF<next>) node@3@01))))))
    :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@39@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))
    :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@54@01  $FVF<next>)) g@2@01) v1@32@01 v2@33@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@414@40@417@95|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  $Snap.unit))
; [eval] old(node.next) != null ==> (forall x: Ref, y: Ref, u: Ref, v: Ref :: { DEP($$(g), x, y, u, v) } { DEP(old($$(g)), x, y, u, v) } DEP(old($$(g)), x, y, u, v) && !DEP(old($$(g)), x, y, node, old(node.next)) ==> DEP($$(g), x, y, u, v))
; [eval] old(node.next) != null
; [eval] old(node.next)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
      (=
        ($FVF.lookup_next (as sm@10@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@10@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef4|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@9@01 node@3@01)
        (and
          (Set_in (inv@8@01 node@3@01) g@2@01)
          (not (= (inv@8@01 node@3@01) node@3@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; [then-branch: 10 | Lookup(next, sm@10@01, node@3@01) != Null | live]
; [else-branch: 10 | Lookup(next, sm@10@01, node@3@01) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 10 | Lookup(next, sm@10@01, node@3@01) != Null]
(assert (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null)))
; [eval] (forall x: Ref, y: Ref, u: Ref, v: Ref :: { DEP($$(g), x, y, u, v) } { DEP(old($$(g)), x, y, u, v) } DEP(old($$(g)), x, y, u, v) && !DEP(old($$(g)), x, y, node, old(node.next)) ==> DEP($$(g), x, y, u, v))
(declare-const x@55@01 $Ref)
(declare-const y@56@01 $Ref)
(declare-const u@57@01 $Ref)
(declare-const v@58@01 $Ref)
(push) ; 5
; [eval] DEP(old($$(g)), x, y, u, v) && !DEP(old($$(g)), x, y, node, old(node.next)) ==> DEP($$(g), x, y, u, v)
; [eval] DEP(old($$(g)), x, y, u, v) && !DEP(old($$(g)), x, y, node, old(node.next))
; [eval] DEP(old($$(g)), x, y, u, v)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 6
(declare-const n@59@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@59@01 g@2@01))
(pop) ; 7
(declare-fun inv@60@01 ($Ref) $Ref)
(declare-fun img@61@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@59@01 $Ref) (n2@59@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@59@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n1@59@01) n1@59@01))
      (and
        (Set_in n2@59@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) n2@59@01) n2@59@01))
      (= n1@59@01 n2@59@01))
    (= n1@59@01 n2@59@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@59@01 $Ref)) (!
  (=>
    (Set_in n@59@01 g@2@01)
    (and (= (inv@60@01 n@59@01) n@59@01) (img@61@01 n@59@01)))
  :pattern ((Set_in n@59@01 g@2@01))
  :pattern ((inv@60@01 n@59@01))
  :pattern ((img@61@01 n@59@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@61@01 r) (Set_in (inv@60@01 r) g@2@01)) (= (inv@60@01 r) r))
  :pattern ((inv@60@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@60@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
  :pattern ((inv@60@01 r))
  :qid |quant-u-154|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@62@01 ((r $Ref) (x@55@01 $Ref) (y@56@01 $Ref) (u@57@01 $Ref) (v@58@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r) (= r (inv@60@01 r)))
    ($Perm.min
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@63@01 ((r $Ref) (x@55@01 $Ref) (y@56@01 $Ref) (u@57@01 $Ref) (v@58@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r) (= r (inv@60@01 r)))
    ($Perm.min
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@62@01 r x@55@01 y@56@01 u@57@01 v@58@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@62@01 r x@55@01 y@56@01 u@57@01 v@58@01))
    $Perm.No)
  
  :qid |quant-u-156|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r) (= r (inv@60@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@62@01 r x@55@01 y@56@01 u@57@01 v@58@01))
      $Perm.No))
  
  :qid |quant-u-157|))))
(check-sat)
; unknown
(pop) ; 7
; 0,04s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (- $Perm.Write (pTaken@63@01 node@3@01 x@55@01 y@56@01 u@57@01 v@58@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,05s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@63@01 r x@55@01 y@56@01 u@57@01 v@58@01) $Perm.No)
  
  :qid |quant-u-159|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r) (= r (inv@60@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@62@01 r x@55@01 y@56@01 u@57@01 v@58@01))
        (pTaken@63@01 r x@55@01 y@56@01 u@57@01 v@58@01))
      $Perm.No))
  
  :qid |quant-u-160|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@64@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>)))
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r)))
    (=>
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r))
      (Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>))))
  :qid |qp.fvfDomDef41|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@64@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@64@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@59@01 $Ref)) (!
  (=>
    (Set_in n@59@01 g@2@01)
    (and (= (inv@60@01 n@59@01) n@59@01) (img@61@01 n@59@01)))
  :pattern ((Set_in n@59@01 g@2@01))
  :pattern ((inv@60@01 n@59@01))
  :pattern ((img@61@01 n@59@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@61@01 r) (Set_in (inv@60@01 r) g@2@01)) (= (inv@60@01 r) r))
  :pattern ((inv@60@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>)))
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r)))
    (=>
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r))
      (Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>))))
  :qid |qp.fvfDomDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@64@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@64@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@60@01 r) g@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
    :pattern ((inv@60@01 r))
    :qid |quant-u-154|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01)))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 11 | !(DEP[Bool]($$(sm@64@01, g@2@01), x@55@01, y@56@01, u@57@01, v@58@01)) | live]
; [else-branch: 11 | DEP[Bool]($$(sm@64@01, g@2@01), x@55@01, y@56@01, u@57@01, v@58@01) | live]
(push) ; 7
; [then-branch: 11 | !(DEP[Bool]($$(sm@64@01, g@2@01), x@55@01, y@56@01, u@57@01, v@58@01))]
(assert (not
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 11 | DEP[Bool]($$(sm@64@01, g@2@01), x@55@01, y@56@01, u@57@01, v@58@01)]
(assert (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01))
; [eval] !DEP(old($$(g)), x, y, node, old(node.next))
; [eval] DEP(old($$(g)), x, y, node, old(node.next))
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@65@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@65@01 g@2@01))
(pop) ; 9
(declare-fun inv@66@01 ($Ref) $Ref)
(declare-fun img@67@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@68@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef44|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@65@01 $Ref) (n2@65@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@65@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@68@01  $FVF<next>) n1@65@01) n1@65@01))
      (and
        (Set_in n2@65@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@68@01  $FVF<next>) n2@65@01) n2@65@01))
      (= n1@65@01 n2@65@01))
    (= n1@65@01 n2@65@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@65@01 $Ref)) (!
  (=>
    (Set_in n@65@01 g@2@01)
    (and (= (inv@66@01 n@65@01) n@65@01) (img@67@01 n@65@01)))
  :pattern ((Set_in n@65@01 g@2@01))
  :pattern ((inv@66@01 n@65@01))
  :pattern ((img@67@01 n@65@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@67@01 r) (Set_in (inv@66@01 r) g@2@01)) (= (inv@66@01 r) r))
  :pattern ((inv@66@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@66@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@68@01  $FVF<next>) r) r))
  :pattern ((inv@66@01 r))
  :qid |quant-u-162|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@69@01 ((r $Ref) (x@55@01 $Ref) (y@56@01 $Ref) (u@57@01 $Ref) (v@58@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r) (= r (inv@66@01 r)))
    ($Perm.min
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@70@01 ((r $Ref) (x@55@01 $Ref) (y@56@01 $Ref) (u@57@01 $Ref) (v@58@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r) (= r (inv@66@01 r)))
    ($Perm.min
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@69@01 r x@55@01 y@56@01 u@57@01 v@58@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@69@01 r x@55@01 y@56@01 u@57@01 v@58@01))
    $Perm.No)
  
  :qid |quant-u-164|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r) (= r (inv@66@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@69@01 r x@55@01 y@56@01 u@57@01 v@58@01))
      $Perm.No))
  
  :qid |quant-u-165|))))
(check-sat)
; unknown
(pop) ; 9
; 0,03s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (- $Perm.Write (pTaken@70@01 node@3@01 x@55@01 y@56@01 u@57@01 v@58@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,03s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@70@01 r x@55@01 y@56@01 u@57@01 v@58@01) $Perm.No)
  
  :qid |quant-u-167|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r) (= r (inv@66@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@69@01 r x@55@01 y@56@01 u@57@01 v@58@01))
        (pTaken@70@01 r x@55@01 y@56@01 u@57@01 v@58@01))
      $Perm.No))
  
  :qid |quant-u-168|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@71@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>)))
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r)))
    (=>
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r))
      (Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>))))
  :qid |qp.fvfDomDef48|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@71@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@71@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((n@65@01 $Ref)) (!
  (=>
    (Set_in n@65@01 g@2@01)
    (and (= (inv@66@01 n@65@01) n@65@01) (img@67@01 n@65@01)))
  :pattern ((Set_in n@65@01 g@2@01))
  :pattern ((inv@66@01 n@65@01))
  :pattern ((img@67@01 n@65@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@67@01 r) (Set_in (inv@66@01 r) g@2@01)) (= (inv@66@01 r) r))
  :pattern ((inv@66@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>)))
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r)))
    (=>
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r))
      (Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>))))
  :qid |qp.fvfDomDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@71@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@71@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@66@01 r) g@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@68@01  $FVF<next>) r) r))
    :pattern ((inv@66@01 r))
    :qid |quant-u-162|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01)))
; [eval] old(node.next)
(declare-const sm@72@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef51|)))
(declare-const pm@73@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@73@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@73@01  $FPM) r))
  :qid |qp.resPrmSumDef52|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@73@01  $FPM) r))
  :qid |qp.resTrgDef53|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01) node@3@01))
(set-option :timeout 0)
(push) ; 8
(assert (not (< $Perm.No ($FVF.perm_next (as pm@73@01  $FPM) node@3@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((n@65@01 $Ref)) (!
  (=>
    (Set_in n@65@01 g@2@01)
    (and (= (inv@66@01 n@65@01) n@65@01) (img@67@01 n@65@01)))
  :pattern ((Set_in n@65@01 g@2@01))
  :pattern ((inv@66@01 n@65@01))
  :pattern ((img@67@01 n@65@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@67@01 r) (Set_in (inv@66@01 r) g@2@01)) (= (inv@66@01 r) r))
  :pattern ((inv@66@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>)))
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r)))
    (=>
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r))
      (Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>))))
  :qid |qp.fvfDomDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@71@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@71@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@73@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@73@01  $FPM) r))
  :qid |qp.resPrmSumDef52|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@73@01  $FPM) r))
  :qid |qp.resTrgDef53|)))
(assert (=>
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@66@01 r) g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@68@01  $FVF<next>) r) r))
      :pattern ((inv@66@01 r))
      :qid |quant-u-162|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01) node@3@01))))
(assert (or
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01))))
(push) ; 6
; [then-branch: 12 | DEP[Bool]($$(sm@64@01, g@2@01), x@55@01, y@56@01, u@57@01, v@58@01) && !(DEP[Bool]($$(sm@71@01, g@2@01), x@55@01, y@56@01, node@3@01, Lookup(next, sm@72@01, node@3@01))) | live]
; [else-branch: 12 | !(DEP[Bool]($$(sm@64@01, g@2@01), x@55@01, y@56@01, u@57@01, v@58@01) && !(DEP[Bool]($$(sm@71@01, g@2@01), x@55@01, y@56@01, node@3@01, Lookup(next, sm@72@01, node@3@01)))) | live]
(push) ; 7
; [then-branch: 12 | DEP[Bool]($$(sm@64@01, g@2@01), x@55@01, y@56@01, u@57@01, v@58@01) && !(DEP[Bool]($$(sm@71@01, g@2@01), x@55@01, y@56@01, node@3@01, Lookup(next, sm@72@01, node@3@01)))]
(assert (and
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01)))))
; [eval] DEP($$(g), x, y, u, v)
; [eval] $$(g)
(push) ; 8
(declare-const n@74@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@74@01 g@2@01))
(pop) ; 9
(declare-fun inv@75@01 ($Ref) $Ref)
(declare-fun img@76@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@74@01 $Ref) (n2@74@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@74@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n1@74@01) n1@74@01))
      (and
        (Set_in n2@74@01 g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) n2@74@01) n2@74@01))
      (= n1@74@01 n2@74@01))
    (= n1@74@01 n2@74@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@74@01 $Ref)) (!
  (=>
    (Set_in n@74@01 g@2@01)
    (and (= (inv@75@01 n@74@01) n@74@01) (img@76@01 n@74@01)))
  :pattern ((Set_in n@74@01 g@2@01))
  :pattern ((inv@75@01 n@74@01))
  :pattern ((img@76@01 n@74@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@76@01 r) (Set_in (inv@75@01 r) g@2@01)) (= (inv@75@01 r) r))
  :pattern ((inv@75@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@75@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
  :pattern ((inv@75@01 r))
  :qid |quant-u-170|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@77@01 ((r $Ref) (x@55@01 $Ref) (y@56@01 $Ref) (u@57@01 $Ref) (v@58@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r) (= r (inv@75@01 r)))
    ($Perm.min
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@78@01 ((r $Ref) (x@55@01 $Ref) (y@56@01 $Ref) (u@57@01 $Ref) (v@58@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r) (= r (inv@75@01 r)))
    ($Perm.min
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@77@01 r x@55@01 y@56@01 u@57@01 v@58@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@17@01 r)
          (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@77@01 r x@55@01 y@56@01 u@57@01 v@58@01))
    $Perm.No)
  
  :qid |quant-u-172|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r) (= r (inv@75@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@77@01 r x@55@01 y@56@01 u@57@01 v@58@01))
      $Perm.No))
  
  :qid |quant-u-173|))))
(check-sat)
; unknown
(pop) ; 9
; 0,04s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (- $Perm.Write (pTaken@78@01 node@3@01 x@55@01 y@56@01 u@57@01 v@58@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,07s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@78@01 r x@55@01 y@56@01 u@57@01 v@58@01) $Perm.No)
  
  :qid |quant-u-175|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r) (= r (inv@75@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@77@01 r x@55@01 y@56@01 u@57@01 v@58@01))
        (pTaken@78@01 r x@55@01 y@56@01 u@57@01 v@58@01))
      $Perm.No))
  
  :qid |quant-u-176|))))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@79@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>)))
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r)))
    (=>
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r))
      (Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>))))
  :qid |qp.fvfDomDef57|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@79@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@79@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@79@01  $FVF<next>)) g@2@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@74@01 $Ref)) (!
  (=>
    (Set_in n@74@01 g@2@01)
    (and (= (inv@75@01 n@74@01) n@74@01) (img@76@01 n@74@01)))
  :pattern ((Set_in n@74@01 g@2@01))
  :pattern ((inv@75@01 n@74@01))
  :pattern ((img@76@01 n@74@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@76@01 r) (Set_in (inv@75@01 r) g@2@01)) (= (inv@75@01 r) r))
  :pattern ((inv@75@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>)))
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r)))
    (=>
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r))
      (Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>))))
  :qid |qp.fvfDomDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@79@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@79@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@75@01 r) g@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
    :pattern ((inv@75@01 r))
    :qid |quant-u-170|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@79@01  $FVF<next>)) g@2@01)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 12 | !(DEP[Bool]($$(sm@64@01, g@2@01), x@55@01, y@56@01, u@57@01, v@58@01) && !(DEP[Bool]($$(sm@71@01, g@2@01), x@55@01, y@56@01, node@3@01, Lookup(next, sm@72@01, node@3@01))))]
(assert (not
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((n@74@01 $Ref)) (!
  (=>
    (Set_in n@74@01 g@2@01)
    (and (= (inv@75@01 n@74@01) n@74@01) (img@76@01 n@74@01)))
  :pattern ((Set_in n@74@01 g@2@01))
  :pattern ((inv@75@01 n@74@01))
  :pattern ((img@76@01 n@74@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@76@01 r) (Set_in (inv@75@01 r) g@2@01)) (= (inv@75@01 r) r))
  :pattern ((inv@75@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>)))
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r)))
    (=>
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r))
      (Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>))))
  :qid |qp.fvfDomDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@79@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@79@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (=>
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01)))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@75@01 r) g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
      :pattern ((inv@75@01 r))
      :qid |quant-u-170|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@79@01  $FVF<next>)) g@2@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01)))))
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@59@01 $Ref)) (!
  (=>
    (Set_in n@59@01 g@2@01)
    (and (= (inv@60@01 n@59@01) n@59@01) (img@61@01 n@59@01)))
  :pattern ((Set_in n@59@01 g@2@01))
  :pattern ((inv@60@01 n@59@01))
  :pattern ((img@61@01 n@59@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@61@01 r) (Set_in (inv@60@01 r) g@2@01)) (= (inv@60@01 r) r))
  :pattern ((inv@60@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>)))
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r)))
    (=>
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r))
      (Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>))))
  :qid |qp.fvfDomDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@64@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@64@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((n@65@01 $Ref)) (!
  (=>
    (Set_in n@65@01 g@2@01)
    (and (= (inv@66@01 n@65@01) n@65@01) (img@67@01 n@65@01)))
  :pattern ((Set_in n@65@01 g@2@01))
  :pattern ((inv@66@01 n@65@01))
  :pattern ((img@67@01 n@65@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@67@01 r) (Set_in (inv@66@01 r) g@2@01)) (= (inv@66@01 r) r))
  :pattern ((inv@66@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>)))
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r)))
    (=>
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r))
      (Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>))))
  :qid |qp.fvfDomDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@71@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@71@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@73@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@73@01  $FPM) r))
  :qid |qp.resPrmSumDef52|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@73@01  $FPM) r))
  :qid |qp.resTrgDef53|)))
(assert (forall ((n@74@01 $Ref)) (!
  (=>
    (Set_in n@74@01 g@2@01)
    (and (= (inv@75@01 n@74@01) n@74@01) (img@76@01 n@74@01)))
  :pattern ((Set_in n@74@01 g@2@01))
  :pattern ((inv@75@01 n@74@01))
  :pattern ((img@76@01 n@74@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@76@01 r) (Set_in (inv@75@01 r) g@2@01)) (= (inv@75@01 r) r))
  :pattern ((inv@75@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>)))
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r)))
    (=>
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r))
      (Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>))))
  :qid |qp.fvfDomDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@79@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@79@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@60@01 r) g@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
  :pattern ((inv@60@01 r))
  :qid |quant-u-154|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((x@55@01 $Ref) (y@56@01 $Ref) (u@57@01 $Ref) (v@58@01 $Ref)) (!
  (and
    (=>
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@66@01 r) g@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@68@01  $FVF<next>) r) r))
          :pattern ((inv@66@01 r))
          :qid |quant-u-162|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01) node@3@01)))
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)))
    (=>
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01)))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@75@01 r) g@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
          :pattern ((inv@75@01 r))
          :qid |quant-u-170|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@79@01  $FVF<next>)) g@2@01)))
    (or
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01)))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@79@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@419@13@425@22-aux|)))
(assert (forall ((x@55@01 $Ref) (y@56@01 $Ref) (u@57@01 $Ref) (v@58@01 $Ref)) (!
  (and
    (=>
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@66@01 r) g@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@68@01  $FVF<next>) r) r))
          :pattern ((inv@66@01 r))
          :qid |quant-u-162|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01) node@3@01)))
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)))
    (=>
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01)))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@75@01 r) g@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
          :pattern ((inv@75@01 r))
          :qid |quant-u-170|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@79@01  $FVF<next>)) g@2@01)))
    (or
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01)))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@419@13@425@22-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 10 | Lookup(next, sm@10@01, node@3@01) == Null]
(assert (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@59@01 $Ref)) (!
  (=>
    (Set_in n@59@01 g@2@01)
    (and (= (inv@60@01 n@59@01) n@59@01) (img@61@01 n@59@01)))
  :pattern ((Set_in n@59@01 g@2@01))
  :pattern ((inv@60@01 n@59@01))
  :pattern ((img@61@01 n@59@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@61@01 r) (Set_in (inv@60@01 r) g@2@01)) (= (inv@60@01 r) r))
  :pattern ((inv@60@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>)))
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r)))
    (=>
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r))
      (Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@64@01  $FVF<next>))))
  :qid |qp.fvfDomDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@64@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@60@01 r) g@2@01) (img@61@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@64@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@64@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@68@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@68@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((n@65@01 $Ref)) (!
  (=>
    (Set_in n@65@01 g@2@01)
    (and (= (inv@66@01 n@65@01) n@65@01) (img@67@01 n@65@01)))
  :pattern ((Set_in n@65@01 g@2@01))
  :pattern ((inv@66@01 n@65@01))
  :pattern ((img@67@01 n@65@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@67@01 r) (Set_in (inv@66@01 r) g@2@01)) (= (inv@66@01 r) r))
  :pattern ((inv@66@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>)))
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r)))
    (=>
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r))
      (Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@71@01  $FVF<next>))))
  :qid |qp.fvfDomDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@71@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@66@01 r) g@2@01) (img@67@01 r))
      (and
        (img@9@01 r)
        (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@71@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@71@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@5@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@5@01  $FVF<next>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@9@01 r)
      (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
    (=
      ($FVF.lookup_next (as sm@72@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@72@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@73@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@9@01 r)
          (and (Set_in (inv@8@01 r) g@2@01) (not (= (inv@8@01 r) node@3@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@73@01  $FPM) r))
  :qid |qp.resPrmSumDef52|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@5@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@73@01  $FPM) r))
  :qid |qp.resTrgDef53|)))
(assert (forall ((n@74@01 $Ref)) (!
  (=>
    (Set_in n@74@01 g@2@01)
    (and (= (inv@75@01 n@74@01) n@74@01) (img@76@01 n@74@01)))
  :pattern ((Set_in n@74@01 g@2@01))
  :pattern ((inv@75@01 n@74@01))
  :pattern ((img@76@01 n@74@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@76@01 r) (Set_in (inv@75@01 r) g@2@01)) (= (inv@75@01 r) r))
  :pattern ((inv@75@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>)))
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r)))
    (=>
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r))
      (Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@79@01  $FVF<next>))))
  :qid |qp.fvfDomDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r)) (= r node@3@01))
    (=
      ($FVF.lookup_next (as sm@79@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@13@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@13@01  $FVF<next>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@75@01 r) g@2@01) (img@76@01 r))
      (and
        (img@17@01 r)
        (and (Set_in (inv@16@01 r) g@2@01) (not (= (inv@16@01 r) node@3@01)))))
    (=
      ($FVF.lookup_next (as sm@79@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@13@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@79@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (=>
  (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@60@01 r) g@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@10@01  $FVF<next>) r) r))
      :pattern ((inv@60@01 r))
      :qid |quant-u-154|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01)
    (forall ((x@55@01 $Ref) (y@56@01 $Ref) (u@57@01 $Ref) (v@58@01 $Ref)) (!
      (and
        (=>
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@66@01 r) g@2@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@68@01  $FVF<next>) r) r))
              :pattern ((inv@66@01 r))
              :qid |quant-u-162|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01) node@3@01)))
        (or
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)))
        (=>
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01)))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@75@01 r) g@2@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
              :pattern ((inv@75@01 r))
              :qid |quant-u-170|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@79@01  $FVF<next>)) g@2@01)))
        (or
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01)))))
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@79@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@419@13@425@22-aux|))
    (forall ((x@55@01 $Ref) (y@56@01 $Ref) (u@57@01 $Ref) (v@58@01 $Ref)) (!
      (and
        (=>
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@66@01 r) g@2@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@68@01  $FVF<next>) r) r))
              :pattern ((inv@66@01 r))
              :qid |quant-u-162|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01) node@3@01)))
        (or
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)))
        (=>
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01)))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@75@01 r) g@2@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@18@01  $FVF<next>) r) r))
              :pattern ((inv@75@01 r))
              :qid |quant-u-170|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@79@01  $FVF<next>)) g@2@01)))
        (or
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01)))))
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@419@13@425@22-aux|)))))
; Joined path conditions
(assert (=>
  (not (= ($FVF.lookup_next (as sm@10@01  $FVF<next>) node@3@01) $Ref.null))
  (forall ((x@55@01 $Ref) (y@56@01 $Ref) (u@57@01 $Ref) (v@58@01 $Ref)) (!
    (=>
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@71@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 node@3@01 ($FVF.lookup_next (as sm@72@01  $FVF<next>) node@3@01))))
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@79@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@79@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@64@01  $FVF<next>)) g@2@01) x@55@01 y@56@01 u@57@01 v@58@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@419@13@425@22|))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- link_01PG_next ----------
(declare-const g@80@01 Set<$Ref>)
(declare-const from@81@01 $Ref)
(declare-const to@82@01 $Ref)
(declare-const g@83@01 Set<$Ref>)
(declare-const from@84@01 $Ref)
(declare-const to@85@01 $Ref)
(push) ; 1
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 ($Snap.combine ($Snap.first $t@86@01) ($Snap.second $t@86@01))))
(assert (= ($Snap.first $t@86@01) $Snap.unit))
; [eval] (from in g)
(assert (Set_in from@84@01 g@83@01))
(assert (=
  ($Snap.second $t@86@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@86@01))
    ($Snap.second ($Snap.second $t@86@01)))))
(assert (= ($Snap.first ($Snap.second $t@86@01)) $Snap.unit))
; [eval] to != null
(assert (not (= to@85@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@86@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@86@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@86@01))) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (not (Set_in $Ref.null g@83@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@86@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
  $Snap.unit))
; [eval] (from in g)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
(declare-const sm@87@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@87@01  $FVF<next>) from@84@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
(assert (not (= from@84@01 $Ref.null)))
(declare-const sm@88@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@88@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@88@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@88@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@88@01  $FVF<next>) from@84@01) from@84@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
(declare-const n@89@01 $Ref)
(push) ; 2
; [eval] (n in g) && n != from
; [eval] (n in g)
(push) ; 3
; [then-branch: 13 | !(n@89@01 in g@83@01) | live]
; [else-branch: 13 | n@89@01 in g@83@01 | live]
(push) ; 4
; [then-branch: 13 | !(n@89@01 in g@83@01)]
(assert (not (Set_in n@89@01 g@83@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 13 | n@89@01 in g@83@01]
(assert (Set_in n@89@01 g@83@01))
; [eval] n != from
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@89@01 g@83@01) (not (Set_in n@89@01 g@83@01))))
(assert (and (Set_in n@89@01 g@83@01) (not (= n@89@01 from@84@01))))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@90@01 ($Ref) $Ref)
(declare-fun img@91@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (and (Set_in n@89@01 g@83@01) (not (= n@89@01 from@84@01)))
    (or (Set_in n@89@01 g@83@01) (not (Set_in n@89@01 g@83@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) n@89@01) n@89@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@89@01 $Ref) (n2@89@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n1@89@01 g@83@01) (not (= n1@89@01 from@84@01)))
      (and (Set_in n2@89@01 g@83@01) (not (= n2@89@01 from@84@01)))
      (= n1@89@01 n2@89@01))
    (= n1@89@01 n2@89@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (and (Set_in n@89@01 g@83@01) (not (= n@89@01 from@84@01)))
    (and (= (inv@90@01 n@89@01) n@89@01) (img@91@01 n@89@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) n@89@01) n@89@01))
  :qid |quant-u-178|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (= (inv@90@01 r) r))
  :pattern ((inv@90@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (and (Set_in n@89@01 g@83@01) (not (= n@89@01 from@84@01)))
    (not (= n@89@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) n@89@01) n@89@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@92@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) r) r))
  :pattern ((inv@90@01 r))
  :qid |quant-u-179|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
  $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g) } { (n$0 in g), n$0.next } (n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@93@01 $Ref)
(push) ; 2
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 3
; [then-branch: 14 | !(n$0@93@01 in g@83@01) | live]
; [else-branch: 14 | n$0@93@01 in g@83@01 | live]
(push) ; 4
; [then-branch: 14 | !(n$0@93@01 in g@83@01)]
(assert (not (Set_in n$0@93@01 g@83@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 14 | n$0@93@01 in g@83@01]
(assert (Set_in n$0@93@01 g@83@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r from@84@01)
      (=
        ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
    :qid |qp.fvfValDef60|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
      (=
        ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
    :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
    :qid |qp.fvfValDef61|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
    :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef62|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) n$0@93@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@93@01 from@84@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@91@01 n$0@93@01)
        (and
          (Set_in (inv@90@01 n$0@93@01) g@83@01)
          (not (= (inv@90@01 n$0@93@01) from@84@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert (=>
  (Set_in n$0@93@01 g@83@01)
  (and
    (Set_in n$0@93@01 g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) n$0@93@01))))
(assert (or (Set_in n$0@93@01 g@83@01) (not (Set_in n$0@93@01 g@83@01))))
(push) ; 3
; [then-branch: 15 | n$0@93@01 in g@83@01 && Lookup(next, sm@92@01, n$0@93@01) != Null | live]
; [else-branch: 15 | !(n$0@93@01 in g@83@01 && Lookup(next, sm@92@01, n$0@93@01) != Null) | live]
(push) ; 4
; [then-branch: 15 | n$0@93@01 in g@83@01 && Lookup(next, sm@92@01, n$0@93@01) != Null]
(assert (and
  (Set_in n$0@93@01 g@83@01)
  (not (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r from@84@01)
      (=
        ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
    :qid |qp.fvfValDef60|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
      (=
        ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
    :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
    :qid |qp.fvfValDef61|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
    :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef62|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) n$0@93@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite (= n$0@93@01 from@84@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@91@01 n$0@93@01)
        (and
          (Set_in (inv@90@01 n$0@93@01) g@83@01)
          (not (= (inv@90@01 n$0@93@01) from@84@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !(n$0@93@01 in g@83@01 && Lookup(next, sm@92@01, n$0@93@01) != Null)]
(assert (not
  (and
    (Set_in n$0@93@01 g@83@01)
    (not (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef62|)))
(assert (=>
  (and
    (Set_in n$0@93@01 g@83@01)
    (not (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null)))
  (and
    (Set_in n$0@93@01 g@83@01)
    (not (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) n$0@93@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@93@01 g@83@01)
      (not (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null))))
  (and
    (Set_in n$0@93@01 g@83@01)
    (not (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef61|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef62|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@93@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@93@01 g@83@01)
      (and
        (Set_in n$0@93@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) n$0@93@01)))
    (or (Set_in n$0@93@01 g@83@01) (not (Set_in n$0@93@01 g@83@01)))
    (=>
      (and
        (Set_in n$0@93@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null)))
      (and
        (Set_in n$0@93@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) n$0@93@01)))
    (or
      (not
        (and
          (Set_in n$0@93@01 g@83@01)
          (not
            (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null))))
      (and
        (Set_in n$0@93@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) g@83@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@474@14@474@37-aux|)))
(assert (forall ((n$0@93@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@93@01 g@83@01)
      (and
        (Set_in n$0@93@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) n$0@93@01)))
    (or (Set_in n$0@93@01 g@83@01) (not (Set_in n$0@93@01 g@83@01)))
    (=>
      (and
        (Set_in n$0@93@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null)))
      (and
        (Set_in n$0@93@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) n$0@93@01)))
    (or
      (not
        (and
          (Set_in n$0@93@01 g@83@01)
          (not
            (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null))))
      (and
        (Set_in n$0@93@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null)))))
  :pattern ((Set_in n$0@93@01 g@83@01) ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) n$0@93@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@474@14@474@37-aux|)))
(assert (forall ((n$0@93@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@93@01 g@83@01)
      (not (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) g@83@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) g@83@01))
  :pattern ((Set_in n$0@93@01 g@83@01) ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n$0@93@01) n$0@93@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@474@14@474@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
  $Snap.unit))
; [eval] from.next == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r from@84@01)
      (=
        ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
    :qid |qp.fvfValDef60|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
      (=
        ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
    :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
    :qid |qp.fvfValDef61|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
    :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef62|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) from@84@01) from@84@01))
(push) ; 2
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@91@01 from@84@01)
        (and
          (Set_in (inv@90@01 from@84@01) g@83@01)
          (not (= (inv@90@01 from@84@01) from@84@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@92@01  $FVF<next>) from@84@01) $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
  $Snap.unit))
; [eval] !exists_path($$(g), from, to)
; [eval] exists_path($$(g), from, to)
; [eval] $$(g)
(push) ; 2
(declare-const n@94@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@94@01 g@83@01))
(pop) ; 3
(declare-fun inv@95@01 ($Ref) $Ref)
(declare-fun img@96@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@94@01 $Ref) (n2@94@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@94@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n1@94@01) n1@94@01))
      (and
        (Set_in n2@94@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) n2@94@01) n2@94@01))
      (= n1@94@01 n2@94@01))
    (= n1@94@01 n2@94@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@83@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@83@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@83@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@95@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) r) r))
  :pattern ((inv@95@01 r))
  :qid |quant-u-181|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@97@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r) (= r (inv@95@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@98@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r) (= r (inv@95@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@97@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@97@01 r))
    $Perm.No)
  
  :qid |quant-u-183|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r) (= r (inv@95@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@97@01 r)) $Perm.No))
  
  :qid |quant-u-184|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@98@01 from@84@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@98@01 r) $Perm.No)
  
  :qid |quant-u-186|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r) (= r (inv@95@01 r)))
    (=
      (- (- (/ (to_real 1) (to_real 2)) (pTaken@97@01 r)) (pTaken@98@01 r))
      $Perm.No))
  
  :qid |quant-u-187|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@99@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@99@01  $FVF<next>)))
      (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r))
      (Set_in r ($FVF.domain_next (as sm@99@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@99@01  $FVF<next>))))
  :qid |qp.fvfDomDef66|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@99@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@99@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef65|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@99@01  $FVF<next>)) g@83@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@94@01 $Ref)) (!
  (=>
    (Set_in n@94@01 g@83@01)
    (and (= (inv@95@01 n@94@01) n@94@01) (img@96@01 n@94@01)))
  :pattern ((Set_in n@94@01 g@83@01))
  :pattern ((inv@95@01 n@94@01))
  :pattern ((img@96@01 n@94@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@96@01 r) (Set_in (inv@95@01 r) g@83@01)) (= (inv@95@01 r) r))
  :pattern ((inv@95@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@99@01  $FVF<next>)))
      (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r)))
    (=>
      (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r))
      (Set_in r ($FVF.domain_next (as sm@99@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@99@01  $FVF<next>))))
  :qid |qp.fvfDomDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@99@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@95@01 r) g@83@01) (img@96@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@99@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@99@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef65|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@95@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@92@01  $FVF<next>) r) r))
    :pattern ((inv@95@01 r))
    :qid |quant-u-181|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@99@01  $FVF<next>)) g@83@01)))
(assert (not
  (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@99@01  $FVF<next>)) g@83@01) from@84@01 to@85@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@100@01 $Snap)
(assert (= $t@100@01 ($Snap.combine ($Snap.first $t@100@01) ($Snap.second $t@100@01))))
(assert (= ($Snap.first $t@100@01) $Snap.unit))
; [eval] !((null in g))
; [eval] (null in g)
(assert (=
  ($Snap.second $t@100@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@100@01))
    ($Snap.second ($Snap.second $t@100@01)))))
(assert (= ($Snap.first ($Snap.second $t@100@01)) $Snap.unit))
; [eval] (from in g)
(assert (=
  ($Snap.second ($Snap.second $t@100@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@100@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))
(declare-const sm@101@01 $FVF<next>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_next (as sm@101@01  $FVF<next>) from@84@01)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@100@01))))))
(declare-const sm@102@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@102@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@102@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
  :pattern (($FVF.lookup_next (as sm@102@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) from@84@01) from@84@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@100@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))
(declare-const n$1@103@01 $Ref)
(push) ; 3
; [eval] (n$1 in g) && n$1 != from
; [eval] (n$1 in g)
(push) ; 4
; [then-branch: 16 | !(n$1@103@01 in g@83@01) | live]
; [else-branch: 16 | n$1@103@01 in g@83@01 | live]
(push) ; 5
; [then-branch: 16 | !(n$1@103@01 in g@83@01)]
(assert (not (Set_in n$1@103@01 g@83@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 16 | n$1@103@01 in g@83@01]
(assert (Set_in n$1@103@01 g@83@01))
; [eval] n$1 != from
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n$1@103@01 g@83@01) (not (Set_in n$1@103@01 g@83@01))))
(assert (and (Set_in n$1@103@01 g@83@01) (not (= n$1@103@01 from@84@01))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@104@01 ($Ref) $Ref)
(declare-fun img@105@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((n$1@103@01 $Ref)) (!
  (=>
    (and (Set_in n$1@103@01 g@83@01) (not (= n$1@103@01 from@84@01)))
    (or (Set_in n$1@103@01 g@83@01) (not (Set_in n$1@103@01 g@83@01))))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) n$1@103@01) n$1@103@01))
  :qid |next-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$11@103@01 $Ref) (n$12@103@01 $Ref)) (!
  (=>
    (and
      (and (Set_in n$11@103@01 g@83@01) (not (= n$11@103@01 from@84@01)))
      (and (Set_in n$12@103@01 g@83@01) (not (= n$12@103@01 from@84@01)))
      (= n$11@103@01 n$12@103@01))
    (= n$11@103@01 n$12@103@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@103@01 $Ref)) (!
  (=>
    (and (Set_in n$1@103@01 g@83@01) (not (= n$1@103@01 from@84@01)))
    (and (= (inv@104@01 n$1@103@01) n$1@103@01) (img@105@01 n$1@103@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) n$1@103@01) n$1@103@01))
  :qid |quant-u-189|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (= (inv@104@01 r) r))
  :pattern ((inv@104@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@103@01 $Ref)) (!
  (=>
    (and (Set_in n$1@103@01 g@83@01) (not (= n$1@103@01 from@84@01)))
    (not (= n$1@103@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) n$1@103@01) n$1@103@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@106@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))
    ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) r) r))
  :pattern ((inv@104@01 r))
  :qid |quant-u-190|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g) } { (n$2 in g), n$2.next } (n$2 in g) && n$2.next != null ==> (n$2.next in g))
(declare-const n$2@107@01 $Ref)
(push) ; 3
; [eval] (n$2 in g) && n$2.next != null ==> (n$2.next in g)
; [eval] (n$2 in g) && n$2.next != null
; [eval] (n$2 in g)
(push) ; 4
; [then-branch: 17 | !(n$2@107@01 in g@83@01) | live]
; [else-branch: 17 | n$2@107@01 in g@83@01 | live]
(push) ; 5
; [then-branch: 17 | !(n$2@107@01 in g@83@01)]
(assert (not (Set_in n$2@107@01 g@83@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 17 | n$2@107@01 in g@83@01]
(assert (Set_in n$2@107@01 g@83@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r from@84@01)
      (=
        ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
    :qid |qp.fvfValDef69|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
      (=
        ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) n$2@107@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@107@01 from@84@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@105@01 n$2@107@01)
        (and
          (Set_in (inv@104@01 n$2@107@01) g@83@01)
          (not (= (inv@104@01 n$2@107@01) from@84@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (Set_in n$2@107@01 g@83@01)
  (and
    (Set_in n$2@107@01 g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) n$2@107@01))))
(assert (or (Set_in n$2@107@01 g@83@01) (not (Set_in n$2@107@01 g@83@01))))
(push) ; 4
; [then-branch: 18 | n$2@107@01 in g@83@01 && Lookup(next, sm@106@01, n$2@107@01) != Null | live]
; [else-branch: 18 | !(n$2@107@01 in g@83@01 && Lookup(next, sm@106@01, n$2@107@01) != Null) | live]
(push) ; 5
; [then-branch: 18 | n$2@107@01 in g@83@01 && Lookup(next, sm@106@01, n$2@107@01) != Null]
(assert (and
  (Set_in n$2@107@01 g@83@01)
  (not (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null))))
; [eval] (n$2.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r from@84@01)
      (=
        ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
    :qid |qp.fvfValDef69|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
      (=
        ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) n$2@107@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@107@01 from@84@01) $Perm.Write $Perm.No)
    (ite
      (and
        (img@105@01 n$2@107@01)
        (and
          (Set_in (inv@104@01 n$2@107@01) g@83@01)
          (not (= (inv@104@01 n$2@107@01) from@84@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 18 | !(n$2@107@01 in g@83@01 && Lookup(next, sm@106@01, n$2@107@01) != Null)]
(assert (not
  (and
    (Set_in n$2@107@01 g@83@01)
    (not (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (and
    (Set_in n$2@107@01 g@83@01)
    (not (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null)))
  (and
    (Set_in n$2@107@01 g@83@01)
    (not (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) n$2@107@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@107@01 g@83@01)
      (not
        (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null))))
  (and
    (Set_in n$2@107@01 g@83@01)
    (not (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef71|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@107@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@107@01 g@83@01)
      (and
        (Set_in n$2@107@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) n$2@107@01)))
    (or (Set_in n$2@107@01 g@83@01) (not (Set_in n$2@107@01 g@83@01)))
    (=>
      (and
        (Set_in n$2@107@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null)))
      (and
        (Set_in n$2@107@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) n$2@107@01)))
    (or
      (not
        (and
          (Set_in n$2@107@01 g@83@01)
          (not
            (=
              ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01)
              $Ref.null))))
      (and
        (Set_in n$2@107@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) g@83@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@477@13@477@36-aux|)))
(assert (forall ((n$2@107@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@107@01 g@83@01)
      (and
        (Set_in n$2@107@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) n$2@107@01)))
    (or (Set_in n$2@107@01 g@83@01) (not (Set_in n$2@107@01 g@83@01)))
    (=>
      (and
        (Set_in n$2@107@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null)))
      (and
        (Set_in n$2@107@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) n$2@107@01)))
    (or
      (not
        (and
          (Set_in n$2@107@01 g@83@01)
          (not
            (=
              ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01)
              $Ref.null))))
      (and
        (Set_in n$2@107@01 g@83@01)
        (not
          (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null)))))
  :pattern ((Set_in n$2@107@01 g@83@01) ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) n$2@107@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@477@13@477@36-aux|)))
(assert (forall ((n$2@107@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@107@01 g@83@01)
      (not
        (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) g@83@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) g@83@01))
  :pattern ((Set_in n$2@107@01 g@83@01) ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n$2@107@01) n$2@107@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@477@13@477@36|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))
  $Snap.unit))
; [eval] from.next == to
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r from@84@01)
      (=
        ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
        ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
    :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
    :qid |qp.fvfValDef69|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
      (=
        ($FVF.lookup_next (as sm@106@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
    :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
    :pattern (($FVF.lookup_next (as sm@106@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) from@84@01) from@84@01))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and
        (img@105@01 from@84@01)
        (and
          (Set_in (inv@104@01 from@84@01) g@83@01)
          (not (= (inv@104@01 from@84@01) from@84@01))))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (= ($FVF.lookup_next (as sm@106@01  $FVF<next>) from@84@01) to@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))
  $Snap.unit))
; [eval] to == null ==> $$(g) == old($$(g))
; [eval] to == null
(push) ; 3
; [then-branch: 19 | to@85@01 == Null | dead]
; [else-branch: 19 | to@85@01 != Null | live]
(push) ; 4
; [else-branch: 19 | to@85@01 != Null]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))
  $Snap.unit))
; [eval] to != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } { exists_path($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == from && v2 == to))
; [eval] to != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= to@85@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 20 | to@85@01 != Null | live]
; [else-branch: 20 | to@85@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 20 | to@85@01 != Null]
; [eval] (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } { exists_path($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == from && v2 == to))
(declare-const v1@108@01 $Ref)
(declare-const v2@109@01 $Ref)
(push) ; 5
; [eval] edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) || v1 == from && v2 == to)
; [eval] edge($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@110@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@110@01 g@83@01))
(pop) ; 7
(declare-fun inv@111@01 ($Ref) $Ref)
(declare-fun img@112@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@110@01 $Ref) (n2@110@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@110@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n1@110@01) n1@110@01))
      (and
        (Set_in n2@110@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) n2@110@01) n2@110@01))
      (= n1@110@01 n2@110@01))
    (= n1@110@01 n2@110@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@83@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@83@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@83@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@111@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) r) r))
  :pattern ((inv@111@01 r))
  :qid |quant-u-192|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@113@01 ((r $Ref) (v1@108@01 $Ref) (v2@109@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r) (= r (inv@111@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@114@01 ((r $Ref) (v1@108@01 $Ref) (v2@109@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r) (= r (inv@111@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@113@01 r v1@108@01 v2@109@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@113@01 r v1@108@01 v2@109@01))
    $Perm.No)
  
  :qid |quant-u-194|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r) (= r (inv@111@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@113@01 r v1@108@01 v2@109@01))
      $Perm.No))
  
  :qid |quant-u-195|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@114@01 from@84@01 v1@108@01 v2@109@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@114@01 r v1@108@01 v2@109@01) $Perm.No)
  
  :qid |quant-u-197|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r) (= r (inv@111@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@113@01 r v1@108@01 v2@109@01))
        (pTaken@114@01 r v1@108@01 v2@109@01))
      $Perm.No))
  
  :qid |quant-u-198|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@115@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@83@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@83@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@83@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@83@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@111@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) r) r))
    :pattern ((inv@111@01 r))
    :qid |quant-u-192|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@83@01)))
; [eval] edge(old($$(g)), v1, v2) || v1 == from && v2 == to
; [eval] edge(old($$(g)), v1, v2)
; [eval] old($$(g))
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 6
(declare-const n@116@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@116@01 g@83@01))
(pop) ; 7
(declare-fun inv@117@01 ($Ref) $Ref)
(declare-fun img@118@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@119@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef78|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@116@01 $Ref) (n2@116@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@116@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@119@01  $FVF<next>) n1@116@01) n1@116@01))
      (and
        (Set_in n2@116@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@119@01  $FVF<next>) n2@116@01) n2@116@01))
      (= n1@116@01 n2@116@01))
    (= n1@116@01 n2@116@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@116@01 $Ref)) (!
  (=>
    (Set_in n@116@01 g@83@01)
    (and (= (inv@117@01 n@116@01) n@116@01) (img@118@01 n@116@01)))
  :pattern ((Set_in n@116@01 g@83@01))
  :pattern ((inv@117@01 n@116@01))
  :pattern ((img@118@01 n@116@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@118@01 r) (Set_in (inv@117@01 r) g@83@01)) (= (inv@117@01 r) r))
  :pattern ((inv@117@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@117@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@119@01  $FVF<next>) r) r))
  :pattern ((inv@117@01 r))
  :qid |quant-u-200|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@120@01 ((r $Ref) (v1@108@01 $Ref) (v2@109@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r) (= r (inv@117@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@121@01 ((r $Ref) (v1@108@01 $Ref) (v2@109@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r) (= r (inv@117@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@120@01 r v1@108@01 v2@109@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@120@01 r v1@108@01 v2@109@01))
    $Perm.No)
  
  :qid |quant-u-202|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r) (= r (inv@117@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@120@01 r v1@108@01 v2@109@01))
      $Perm.No))
  
  :qid |quant-u-203|))))
(check-sat)
; unknown
(pop) ; 7
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@121@01 from@84@01 v1@108@01 v2@109@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,51s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@121@01 r v1@108@01 v2@109@01) $Perm.No)
  
  :qid |quant-u-205|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r) (= r (inv@117@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@120@01 r v1@108@01 v2@109@01))
        (pTaken@121@01 r v1@108@01 v2@109@01))
      $Perm.No))
  
  :qid |quant-u-206|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@122@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r)))
    (=>
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r))
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (forall ((n@116@01 $Ref)) (!
  (=>
    (Set_in n@116@01 g@83@01)
    (and (= (inv@117@01 n@116@01) n@116@01) (img@118@01 n@116@01)))
  :pattern ((Set_in n@116@01 g@83@01))
  :pattern ((inv@117@01 n@116@01))
  :pattern ((img@118@01 n@116@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@118@01 r) (Set_in (inv@117@01 r) g@83@01)) (= (inv@117@01 r) r))
  :pattern ((inv@117@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r)))
    (=>
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r))
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@117@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@119@01  $FVF<next>) r) r))
    :pattern ((inv@117@01 r))
    :qid |quant-u-200|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01)))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 21 | edge[Bool]($$(sm@122@01, g@83@01), v1@108@01, v2@109@01) | live]
; [else-branch: 21 | !(edge[Bool]($$(sm@122@01, g@83@01), v1@108@01, v2@109@01)) | live]
(push) ; 7
; [then-branch: 21 | edge[Bool]($$(sm@122@01, g@83@01), v1@108@01, v2@109@01)]
(assert (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
(pop) ; 7
(push) ; 7
; [else-branch: 21 | !(edge[Bool]($$(sm@122@01, g@83@01), v1@108@01, v2@109@01))]
(assert (not
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01)))
; [eval] v1 == from && v2 == to
; [eval] v1 == from
(push) ; 8
; [then-branch: 22 | v1@108@01 != from@84@01 | live]
; [else-branch: 22 | v1@108@01 == from@84@01 | live]
(push) ; 9
; [then-branch: 22 | v1@108@01 != from@84@01]
(assert (not (= v1@108@01 from@84@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 22 | v1@108@01 == from@84@01]
(assert (= v1@108@01 from@84@01))
; [eval] v2 == to
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (= v1@108@01 from@84@01) (not (= v1@108@01 from@84@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
  (and
    (not
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
    (or (= v1@108@01 from@84@01) (not (= v1@108@01 from@84@01))))))
(assert (or
  (not
    (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
  (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01)))
; [eval] exists_path($$(g), v1, v2)
; [eval] $$(g)
(push) ; 6
(declare-const n@123@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@123@01 g@83@01))
(pop) ; 7
(declare-fun inv@124@01 ($Ref) $Ref)
(declare-fun img@125@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@126@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@123@01 $Ref) (n2@123@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@123@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) n1@123@01) n1@123@01))
      (and
        (Set_in n2@123@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) n2@123@01) n2@123@01))
      (= n1@123@01 n2@123@01))
    (= n1@123@01 n2@123@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@123@01 $Ref)) (!
  (=>
    (Set_in n@123@01 g@83@01)
    (and (= (inv@124@01 n@123@01) n@123@01) (img@125@01 n@123@01)))
  :pattern ((Set_in n@123@01 g@83@01))
  :pattern ((inv@124@01 n@123@01))
  :pattern ((img@125@01 n@123@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@125@01 r) (Set_in (inv@124@01 r) g@83@01)) (= (inv@124@01 r) r))
  :pattern ((inv@124@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@124@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
  :pattern ((inv@124@01 r))
  :qid |quant-u-208|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@127@01 ((r $Ref) (v1@108@01 $Ref) (v2@109@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r) (= r (inv@124@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@128@01 ((r $Ref) (v1@108@01 $Ref) (v2@109@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r) (= r (inv@124@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@127@01 r v1@108@01 v2@109@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@127@01 r v1@108@01 v2@109@01))
    $Perm.No)
  
  :qid |quant-u-210|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r) (= r (inv@124@01 r)))
    (=
      (- (/ (to_real 1) (to_real 2)) (pTaken@127@01 r v1@108@01 v2@109@01))
      $Perm.No))
  
  :qid |quant-u-211|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@128@01 from@84@01 v1@108@01 v2@109@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@128@01 r v1@108@01 v2@109@01) $Perm.No)
  
  :qid |quant-u-213|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r) (= r (inv@124@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@127@01 r v1@108@01 v2@109@01))
        (pTaken@128@01 r v1@108@01 v2@109@01))
      $Perm.No))
  
  :qid |quant-u-214|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@129@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>)))
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r)))
    (=>
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r))
      (Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>))))
  :qid |qp.fvfDomDef89|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@129@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@129@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@129@01  $FVF<next>)) g@83@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (forall ((n@123@01 $Ref)) (!
  (=>
    (Set_in n@123@01 g@83@01)
    (and (= (inv@124@01 n@123@01) n@123@01) (img@125@01 n@123@01)))
  :pattern ((Set_in n@123@01 g@83@01))
  :pattern ((inv@124@01 n@123@01))
  :pattern ((img@125@01 n@123@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@125@01 r) (Set_in (inv@124@01 r) g@83@01)) (= (inv@124@01 r) r))
  :pattern ((inv@124@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>)))
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r)))
    (=>
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r))
      (Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>))))
  :qid |qp.fvfDomDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@129@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@129@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@124@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
    :pattern ((inv@124@01 r))
    :qid |quant-u-208|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@129@01  $FVF<next>)) g@83@01)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (forall ((n@123@01 $Ref)) (!
  (=>
    (Set_in n@123@01 g@83@01)
    (and (= (inv@124@01 n@123@01) n@123@01) (img@125@01 n@123@01)))
  :pattern ((Set_in n@123@01 g@83@01))
  :pattern ((inv@124@01 n@123@01))
  :pattern ((img@125@01 n@123@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@125@01 r) (Set_in (inv@124@01 r) g@83@01)) (= (inv@124@01 r) r))
  :pattern ((inv@124@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>)))
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r)))
    (=>
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r))
      (Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>))))
  :qid |qp.fvfDomDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@129@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@129@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@124@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
  :pattern ((inv@124@01 r))
  :qid |quant-u-208|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@129@01  $FVF<next>)) g@83@01))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@83@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@83@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@83@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (forall ((n@116@01 $Ref)) (!
  (=>
    (Set_in n@116@01 g@83@01)
    (and (= (inv@117@01 n@116@01) n@116@01) (img@118@01 n@116@01)))
  :pattern ((Set_in n@116@01 g@83@01))
  :pattern ((inv@117@01 n@116@01))
  :pattern ((img@118@01 n@116@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@118@01 r) (Set_in (inv@117@01 r) g@83@01)) (= (inv@117@01 r) r))
  :pattern ((inv@117@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r)))
    (=>
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r))
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (forall ((n@123@01 $Ref)) (!
  (=>
    (Set_in n@123@01 g@83@01)
    (and (= (inv@124@01 n@123@01) n@123@01) (img@125@01 n@123@01)))
  :pattern ((Set_in n@123@01 g@83@01))
  :pattern ((inv@124@01 n@123@01))
  :pattern ((img@125@01 n@123@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@125@01 r) (Set_in (inv@124@01 r) g@83@01)) (= (inv@124@01 r) r))
  :pattern ((inv@124@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>)))
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r)))
    (=>
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r))
      (Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>))))
  :qid |qp.fvfDomDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@129@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@129@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@111@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) r) r))
  :pattern ((inv@111@01 r))
  :qid |quant-u-192|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@83@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@117@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@119@01  $FVF<next>) r) r))
  :pattern ((inv@117@01 r))
  :qid |quant-u-200|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@124@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
  :pattern ((inv@124@01 r))
  :qid |quant-u-208|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@129@01  $FVF<next>)) g@83@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((v1@108@01 $Ref) (v2@109@01 $Ref)) (!
  (and
    (=>
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
      (and
        (not
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
        (or (= v1@108@01 from@84@01) (not (= v1@108@01 from@84@01)))))
    (or
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01)))
  :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@480@28@483@82-aux|)))
(assert (forall ((v1@108@01 $Ref) (v2@109@01 $Ref)) (!
  (and
    (=>
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
      (and
        (not
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
        (or (= v1@108@01 from@84@01) (not (= v1@108@01 from@84@01)))))
    (or
      (not
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@129@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@480@28@483@82-aux|)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (Set_in n@110@01 g@83@01)
    (and (= (inv@111@01 n@110@01) n@110@01) (img@112@01 n@110@01)))
  :pattern ((Set_in n@110@01 g@83@01))
  :pattern ((inv@111@01 n@110@01))
  :pattern ((img@112@01 n@110@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@112@01 r) (Set_in (inv@111@01 r) g@83@01)) (= (inv@111@01 r) r))
  :pattern ((inv@111@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r)))
    (=>
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@111@01 r) g@83@01) (img@112@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@119@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@119@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (forall ((n@116@01 $Ref)) (!
  (=>
    (Set_in n@116@01 g@83@01)
    (and (= (inv@117@01 n@116@01) n@116@01) (img@118@01 n@116@01)))
  :pattern ((Set_in n@116@01 g@83@01))
  :pattern ((inv@117@01 n@116@01))
  :pattern ((img@118@01 n@116@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@118@01 r) (Set_in (inv@117@01 r) g@83@01)) (= (inv@117@01 r) r))
  :pattern ((inv@117@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r)))
    (=>
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r))
      (Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@122@01  $FVF<next>))))
  :qid |qp.fvfDomDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@117@01 r) g@83@01) (img@118@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@122@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@122@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef85|)))
(assert (forall ((n@123@01 $Ref)) (!
  (=>
    (Set_in n@123@01 g@83@01)
    (and (= (inv@124@01 n@123@01) n@123@01) (img@125@01 n@123@01)))
  :pattern ((Set_in n@123@01 g@83@01))
  :pattern ((inv@124@01 n@123@01))
  :pattern ((img@125@01 n@123@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@125@01 r) (Set_in (inv@124@01 r) g@83@01)) (= (inv@124@01 r) r))
  :pattern ((inv@124@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>)))
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r)))
    (=>
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r))
      (Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@129@01  $FVF<next>))))
  :qid |qp.fvfDomDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@129@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@124@01 r) g@83@01) (img@125@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@129@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@129@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef88|)))
(assert (=>
  (not (= to@85@01 $Ref.null))
  (and
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@111@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@106@01  $FVF<next>) r) r))
      :pattern ((inv@111@01 r))
      :qid |quant-u-192|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@83@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@117@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@119@01  $FVF<next>) r) r))
      :pattern ((inv@117@01 r))
      :qid |quant-u-200|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@124@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@126@01  $FVF<next>) r) r))
      :pattern ((inv@124@01 r))
      :qid |quant-u-208|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@129@01  $FVF<next>)) g@83@01)
    (forall ((v1@108@01 $Ref) (v2@109@01 $Ref)) (!
      (and
        (=>
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
          (and
            (not
              (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
            (or (= v1@108@01 from@84@01) (not (= v1@108@01 from@84@01)))))
        (or
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01)))
      :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@480@28@483@82-aux|))
    (forall ((v1@108@01 $Ref) (v2@109@01 $Ref)) (!
      (and
        (=>
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
          (and
            (not
              (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
            (or (= v1@108@01 from@84@01) (not (= v1@108@01 from@84@01)))))
        (or
          (not
            (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
          (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01)))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@129@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@480@28@483@82-aux|)))))
(assert (=>
  (not (= to@85@01 $Ref.null))
  (forall ((v1@108@01 $Ref) (v2@109@01 $Ref)) (!
    (=
      (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01)
      (or
        (edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@122@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01)
        (and (= v1@108@01 from@84@01) (= v2@109@01 to@85@01))))
    :pattern ((edge<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
    :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@129@01  $FVF<next>)) g@83@01) v1@108@01 v2@109@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@480@28@483@82|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))
  $Snap.unit))
; [eval] to != null ==> (forall x: Ref, y: Ref, u: Ref, v: Ref :: { DEP($$(g), x, y, u, v) } { DEP(old($$(g)), x, y, u, v) } from != to && (u != v && x != y) ==> DEP(old($$(g)), x, y, u, v) || (x == from && (u == from && (y == to && v == to)) || ((exists w: Ref, z: Ref :: { DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, u, v) && x != from || x == u && (u == from && v == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))) || ((exists U: Ref, V: Ref :: { DEP(old($$(g)), x, from, U, V) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, u, v) && to != y || from == u && (to == v && v == y)))) || u == from && (v == to && (exists U: Ref, V: Ref, w: Ref, z: Ref :: { DEP(old($$(g)), x, from, U, V), DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))))))) ==> DEP($$(g), x, y, u, v))
; [eval] to != null
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= to@85@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,02s
; (get-info :all-statistics)
; [then-branch: 23 | to@85@01 != Null | live]
; [else-branch: 23 | to@85@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 23 | to@85@01 != Null]
; [eval] (forall x: Ref, y: Ref, u: Ref, v: Ref :: { DEP($$(g), x, y, u, v) } { DEP(old($$(g)), x, y, u, v) } from != to && (u != v && x != y) ==> DEP(old($$(g)), x, y, u, v) || (x == from && (u == from && (y == to && v == to)) || ((exists w: Ref, z: Ref :: { DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, u, v) && x != from || x == u && (u == from && v == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))) || ((exists U: Ref, V: Ref :: { DEP(old($$(g)), x, from, U, V) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, u, v) && to != y || from == u && (to == v && v == y)))) || u == from && (v == to && (exists U: Ref, V: Ref, w: Ref, z: Ref :: { DEP(old($$(g)), x, from, U, V), DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))))))) ==> DEP($$(g), x, y, u, v))
(declare-const x@130@01 $Ref)
(declare-const y@131@01 $Ref)
(declare-const u@132@01 $Ref)
(declare-const v@133@01 $Ref)
(push) ; 5
; [eval] from != to && (u != v && x != y) ==> DEP(old($$(g)), x, y, u, v) || (x == from && (u == from && (y == to && v == to)) || ((exists w: Ref, z: Ref :: { DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, u, v) && x != from || x == u && (u == from && v == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))) || ((exists U: Ref, V: Ref :: { DEP(old($$(g)), x, from, U, V) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, u, v) && to != y || from == u && (to == v && v == y)))) || u == from && (v == to && (exists U: Ref, V: Ref, w: Ref, z: Ref :: { DEP(old($$(g)), x, from, U, V), DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))))))) ==> DEP($$(g), x, y, u, v)
; [eval] from != to && (u != v && x != y)
; [eval] from != to
(push) ; 6
; [then-branch: 24 | from@84@01 == to@85@01 | live]
; [else-branch: 24 | from@84@01 != to@85@01 | live]
(push) ; 7
; [then-branch: 24 | from@84@01 == to@85@01]
(assert (= from@84@01 to@85@01))
(pop) ; 7
(push) ; 7
; [else-branch: 24 | from@84@01 != to@85@01]
(assert (not (= from@84@01 to@85@01)))
; [eval] u != v
(push) ; 8
; [then-branch: 25 | u@132@01 == v@133@01 | live]
; [else-branch: 25 | u@132@01 != v@133@01 | live]
(push) ; 9
; [then-branch: 25 | u@132@01 == v@133@01]
(assert (= u@132@01 v@133@01))
(pop) ; 9
(push) ; 9
; [else-branch: 25 | u@132@01 != v@133@01]
(assert (not (= u@132@01 v@133@01)))
; [eval] x != y
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (not (= u@132@01 v@133@01)) (= u@132@01 v@133@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= from@84@01 to@85@01))
  (and
    (not (= from@84@01 to@85@01))
    (or (not (= u@132@01 v@133@01)) (= u@132@01 v@133@01)))))
(assert (or (not (= from@84@01 to@85@01)) (= from@84@01 to@85@01)))
(push) ; 6
; [then-branch: 26 | from@84@01 != to@85@01 && u@132@01 != v@133@01 && x@130@01 != y@131@01 | live]
; [else-branch: 26 | !(from@84@01 != to@85@01 && u@132@01 != v@133@01 && x@130@01 != y@131@01) | live]
(push) ; 7
; [then-branch: 26 | from@84@01 != to@85@01 && u@132@01 != v@133@01 && x@130@01 != y@131@01]
(assert (and
  (not (= from@84@01 to@85@01))
  (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01)))))
; [eval] DEP(old($$(g)), x, y, u, v) || (x == from && (u == from && (y == to && v == to)) || ((exists w: Ref, z: Ref :: { DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, u, v) && x != from || x == u && (u == from && v == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))) || ((exists U: Ref, V: Ref :: { DEP(old($$(g)), x, from, U, V) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, u, v) && to != y || from == u && (to == v && v == y)))) || u == from && (v == to && (exists U: Ref, V: Ref, w: Ref, z: Ref :: { DEP(old($$(g)), x, from, U, V), DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))))))) ==> DEP($$(g), x, y, u, v)
; [eval] DEP(old($$(g)), x, y, u, v) || (x == from && (u == from && (y == to && v == to)) || ((exists w: Ref, z: Ref :: { DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, u, v) && x != from || x == u && (u == from && v == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))) || ((exists U: Ref, V: Ref :: { DEP(old($$(g)), x, from, U, V) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, u, v) && to != y || from == u && (to == v && v == y)))) || u == from && (v == to && (exists U: Ref, V: Ref, w: Ref, z: Ref :: { DEP(old($$(g)), x, from, U, V), DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y))))))))
; [eval] DEP(old($$(g)), x, y, u, v)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@134@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@134@01 g@83@01))
(pop) ; 9
(declare-fun inv@135@01 ($Ref) $Ref)
(declare-fun img@136@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@137@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@134@01 $Ref) (n2@134@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@134@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@137@01  $FVF<next>) n1@134@01) n1@134@01))
      (and
        (Set_in n2@134@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@137@01  $FVF<next>) n2@134@01) n2@134@01))
      (= n1@134@01 n2@134@01))
    (= n1@134@01 n2@134@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@134@01 $Ref)) (!
  (=>
    (Set_in n@134@01 g@83@01)
    (and (= (inv@135@01 n@134@01) n@134@01) (img@136@01 n@134@01)))
  :pattern ((Set_in n@134@01 g@83@01))
  :pattern ((inv@135@01 n@134@01))
  :pattern ((img@136@01 n@134@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@136@01 r) (Set_in (inv@135@01 r) g@83@01)) (= (inv@135@01 r) r))
  :pattern ((inv@135@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@135@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@137@01  $FVF<next>) r) r))
  :pattern ((inv@135@01 r))
  :qid |quant-u-216|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@138@01 ((r $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r) (= r (inv@135@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@139@01 ((r $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r) (= r (inv@135@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@138@01 r x@130@01 y@131@01 u@132@01 v@133@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@138@01 r x@130@01 y@131@01 u@132@01 v@133@01))
    $Perm.No)
  
  :qid |quant-u-218|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r) (= r (inv@135@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@138@01 r x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-219|))))
(check-sat)
; unknown
(pop) ; 9
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (- $Perm.Write (pTaken@139@01 from@84@01 x@130@01 y@131@01 u@132@01 v@133@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@139@01 r x@130@01 y@131@01 u@132@01 v@133@01) $Perm.No)
  
  :qid |quant-u-221|))))
(check-sat)
; unknown
(pop) ; 9
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r) (= r (inv@135@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@138@01 r x@130@01 y@131@01 u@132@01 v@133@01))
        (pTaken@139@01 r x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-222|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@140@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>)))
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r)))
    (=>
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r))
      (Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>))))
  :qid |qp.fvfDomDef96|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@140@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@140@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((n@134@01 $Ref)) (!
  (=>
    (Set_in n@134@01 g@83@01)
    (and (= (inv@135@01 n@134@01) n@134@01) (img@136@01 n@134@01)))
  :pattern ((Set_in n@134@01 g@83@01))
  :pattern ((inv@135@01 n@134@01))
  :pattern ((img@136@01 n@134@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@136@01 r) (Set_in (inv@135@01 r) g@83@01)) (= (inv@135@01 r) r))
  :pattern ((inv@135@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>)))
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r)))
    (=>
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r))
      (Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>))))
  :qid |qp.fvfDomDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@140@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@140@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@135@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@137@01  $FVF<next>) r) r))
    :pattern ((inv@135@01 r))
    :qid |quant-u-216|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01)))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 27 | DEP[Bool]($$(sm@140@01, g@83@01), x@130@01, y@131@01, u@132@01, v@133@01) | live]
; [else-branch: 27 | !(DEP[Bool]($$(sm@140@01, g@83@01), x@130@01, y@131@01, u@132@01, v@133@01)) | live]
(push) ; 9
; [then-branch: 27 | DEP[Bool]($$(sm@140@01, g@83@01), x@130@01, y@131@01, u@132@01, v@133@01)]
(assert (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
(pop) ; 9
(push) ; 9
; [else-branch: 27 | !(DEP[Bool]($$(sm@140@01, g@83@01), x@130@01, y@131@01, u@132@01, v@133@01))]
(assert (not
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)))
; [eval] x == from && (u == from && (y == to && v == to))
; [eval] x == from
(push) ; 10
; [then-branch: 28 | x@130@01 != from@84@01 | live]
; [else-branch: 28 | x@130@01 == from@84@01 | live]
(push) ; 11
; [then-branch: 28 | x@130@01 != from@84@01]
(assert (not (= x@130@01 from@84@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 28 | x@130@01 == from@84@01]
(assert (= x@130@01 from@84@01))
; [eval] u == from
(push) ; 12
; [then-branch: 29 | u@132@01 != from@84@01 | live]
; [else-branch: 29 | u@132@01 == from@84@01 | live]
(push) ; 13
; [then-branch: 29 | u@132@01 != from@84@01]
(assert (not (= u@132@01 from@84@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 29 | u@132@01 == from@84@01]
(assert (= u@132@01 from@84@01))
; [eval] y == to
(push) ; 14
; [then-branch: 30 | y@131@01 != to@85@01 | live]
; [else-branch: 30 | y@131@01 == to@85@01 | live]
(push) ; 15
; [then-branch: 30 | y@131@01 != to@85@01]
(assert (not (= y@131@01 to@85@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 30 | y@131@01 == to@85@01]
(assert (= y@131@01 to@85@01))
; [eval] v == to
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (= y@131@01 to@85@01) (not (= y@131@01 to@85@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (= u@132@01 from@84@01)
  (and
    (= u@132@01 from@84@01)
    (or (= y@131@01 to@85@01) (not (= y@131@01 to@85@01))))))
(assert (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (= x@130@01 from@84@01)
  (and
    (= x@130@01 from@84@01)
    (=>
      (= u@132@01 from@84@01)
      (and
        (= u@132@01 from@84@01)
        (or (= y@131@01 to@85@01) (not (= y@131@01 to@85@01)))))
    (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01))))))
(assert (or (= x@130@01 from@84@01) (not (= x@130@01 from@84@01))))
(push) ; 10
; [then-branch: 31 | x@130@01 == from@84@01 && u@132@01 == from@84@01 && y@131@01 == to@85@01 && v@133@01 == to@85@01 | live]
; [else-branch: 31 | !(x@130@01 == from@84@01 && u@132@01 == from@84@01 && y@131@01 == to@85@01 && v@133@01 == to@85@01) | live]
(push) ; 11
; [then-branch: 31 | x@130@01 == from@84@01 && u@132@01 == from@84@01 && y@131@01 == to@85@01 && v@133@01 == to@85@01]
(assert (and
  (= x@130@01 from@84@01)
  (and (= u@132@01 from@84@01) (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 31 | !(x@130@01 == from@84@01 && u@132@01 == from@84@01 && y@131@01 == to@85@01 && v@133@01 == to@85@01)]
(assert (not
  (and
    (= x@130@01 from@84@01)
    (and
      (= u@132@01 from@84@01)
      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))))
; [eval] (exists w: Ref, z: Ref :: { DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, u, v) && x != from || x == u && (u == from && v == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y))))
(declare-const w@141@01 $Ref)
(declare-const z@142@01 $Ref)
(push) ; 12
; [eval] (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, u, v) && x != from || x == u && (u == from && v == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))
; [eval] (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_))
(declare-const u_@143@01 $Ref)
(declare-const v_@144@01 $Ref)
(push) ; 13
; [eval] !DEP(old($$(g)), x, y, u_, v_)
; [eval] DEP(old($$(g)), x, y, u_, v_)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 14
(declare-const n@145@01 $Ref)
(push) ; 15
; [eval] (n in refs)
(assert (Set_in n@145@01 g@83@01))
(pop) ; 15
(declare-fun inv@146@01 ($Ref) $Ref)
(declare-fun img@147@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@148@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
; Check receiver injectivity
(push) ; 15
(assert (not (forall ((n1@145@01 $Ref) (n2@145@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@145@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) n1@145@01) n1@145@01))
      (and
        (Set_in n2@145@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) n2@145@01) n2@145@01))
      (= n1@145@01 n2@145@01))
    (= n1@145@01 n2@145@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 15
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@83@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@83@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@83@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@146@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
  :pattern ((inv@146@01 r))
  :qid |quant-u-224|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@149@01 ((r $Ref) (u_@143@01 $Ref) (v_@144@01 $Ref) (w@141@01 $Ref) (z@142@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r) (= r (inv@146@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@150@01 ((r $Ref) (u_@143@01 $Ref) (v_@144@01 $Ref) (w@141@01 $Ref) (z@142@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r) (= r (inv@146@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@149@01 r u_@143@01 v_@144@01 w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@149@01 r u_@143@01 v_@144@01 w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
    $Perm.No)
  
  :qid |quant-u-226|))))
(check-sat)
; unsat
(pop) ; 15
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r) (= r (inv@146@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@149@01 r u_@143@01 v_@144@01 w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-227|))))
(check-sat)
; unknown
(pop) ; 15
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 500)
(assert (not (=
  (-
    $Perm.Write
    (pTaken@150@01 from@84@01 u_@143@01 v_@144@01 w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 15
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (=
    (pTaken@150@01 r u_@143@01 v_@144@01 w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01)
    $Perm.No)
  
  :qid |quant-u-229|))))
(check-sat)
; unknown
(pop) ; 15
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r) (= r (inv@146@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@149@01 r u_@143@01 v_@144@01 w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
        (pTaken@150@01 r u_@143@01 v_@144@01 w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-230|))))
(check-sat)
; unsat
(pop) ; 15
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@151@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef103|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01))
(pop) ; 14
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@83@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@83@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@83@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@146@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
    :pattern ((inv@146@01 r))
    :qid |quant-u-224|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)))
(pop) ; 13
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@83@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@83@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@83@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@146@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
  :pattern ((inv@146@01 r))
  :qid |quant-u-224|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01))
; Nested auxiliary terms: non-globals (aux)
(set-option :timeout 0)
(push) ; 13
; [then-branch: 32 | !(QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01))) | live]
; [else-branch: 32 | QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01)) | live]
(push) ; 14
; [then-branch: 32 | !(QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01)))]
(assert (not
  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))))
(pop) ; 14
(push) ; 14
; [else-branch: 32 | QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01))]
(assert (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|)))
; [eval] DEP(old($$(g)), x, from, u, v) && x != from || x == u && (u == from && v == to)
; [eval] DEP(old($$(g)), x, from, u, v) && x != from
; [eval] DEP(old($$(g)), x, from, u, v)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 15
(declare-const n@152@01 $Ref)
(push) ; 16
; [eval] (n in refs)
(assert (Set_in n@152@01 g@83@01))
(pop) ; 16
(declare-fun inv@153@01 ($Ref) $Ref)
(declare-fun img@154@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@155@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
; Check receiver injectivity
(push) ; 16
(assert (not (forall ((n1@152@01 $Ref) (n2@152@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@152@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) n1@152@01) n1@152@01))
      (and
        (Set_in n2@152@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) n2@152@01) n2@152@01))
      (= n1@152@01 n2@152@01))
    (= n1@152@01 n2@152@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@152@01 $Ref)) (!
  (=>
    (Set_in n@152@01 g@83@01)
    (and (= (inv@153@01 n@152@01) n@152@01) (img@154@01 n@152@01)))
  :pattern ((Set_in n@152@01 g@83@01))
  :pattern ((inv@153@01 n@152@01))
  :pattern ((img@154@01 n@152@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@154@01 r) (Set_in (inv@153@01 r) g@83@01)) (= (inv@153@01 r) r))
  :pattern ((inv@153@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@153@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) r) r))
  :pattern ((inv@153@01 r))
  :qid |quant-u-232|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@156@01 ((r $Ref) (w@141@01 $Ref) (z@142@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r) (= r (inv@153@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@157@01 ((r $Ref) (w@141@01 $Ref) (z@142@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r) (= r (inv@153@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@156@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@156@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
    $Perm.No)
  
  :qid |quant-u-234|))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r) (= r (inv@153@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@156@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-235|))))
(check-sat)
; unknown
(pop) ; 16
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 500)
(assert (not (=
  (-
    $Perm.Write
    (pTaken@157@01 from@84@01 w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 16
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (=
    (pTaken@157@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01)
    $Perm.No)
  
  :qid |quant-u-237|))))
(check-sat)
; unknown
(pop) ; 16
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r) (= r (inv@153@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@156@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
        (pTaken@157@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-238|))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@158@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)))
    (=>
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01))
(pop) ; 15
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
(assert (forall ((n@152@01 $Ref)) (!
  (=>
    (Set_in n@152@01 g@83@01)
    (and (= (inv@153@01 n@152@01) n@152@01) (img@154@01 n@152@01)))
  :pattern ((Set_in n@152@01 g@83@01))
  :pattern ((inv@153@01 n@152@01))
  :pattern ((img@154@01 n@152@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@154@01 r) (Set_in (inv@153@01 r) g@83@01)) (= (inv@153@01 r) r))
  :pattern ((inv@153@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)))
    (=>
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@153@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) r) r))
    :pattern ((inv@153@01 r))
    :qid |quant-u-232|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)))
(set-option :timeout 0)
(push) ; 15
; [then-branch: 33 | !(DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01)) | live]
; [else-branch: 33 | DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) | live]
(push) ; 16
; [then-branch: 33 | !(DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01))]
(assert (not
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 33 | DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01)]
(assert (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01))
; [eval] x != from
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01))))
(push) ; 15
; [then-branch: 34 | DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 | live]
; [else-branch: 34 | !(DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01) | live]
(push) ; 16
; [then-branch: 34 | DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01]
(assert (and
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
  (not (= x@130@01 from@84@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 34 | !(DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01)]
(assert (not
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
    (not (= x@130@01 from@84@01)))))
; [eval] x == u && (u == from && v == to)
; [eval] x == u
(push) ; 17
; [then-branch: 35 | x@130@01 != u@132@01 | live]
; [else-branch: 35 | x@130@01 == u@132@01 | live]
(push) ; 18
; [then-branch: 35 | x@130@01 != u@132@01]
(assert (not (= x@130@01 u@132@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 35 | x@130@01 == u@132@01]
(assert (= x@130@01 u@132@01))
; [eval] u == from
(push) ; 19
; [then-branch: 36 | u@132@01 != from@84@01 | live]
; [else-branch: 36 | u@132@01 == from@84@01 | live]
(push) ; 20
; [then-branch: 36 | u@132@01 != from@84@01]
(assert (not (= u@132@01 from@84@01)))
(pop) ; 20
(push) ; 20
; [else-branch: 36 | u@132@01 == from@84@01]
(assert (= u@132@01 from@84@01))
; [eval] v == to
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (= x@130@01 u@132@01)
  (and
    (= x@130@01 u@132@01)
    (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01))))))
(assert (or (= x@130@01 u@132@01) (not (= x@130@01 u@132@01))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
      (not (= x@130@01 from@84@01))))
  (and
    (not
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
        (not (= x@130@01 from@84@01))))
    (=>
      (= x@130@01 u@132@01)
      (and
        (= x@130@01 u@132@01)
        (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
    (or (= x@130@01 u@132@01) (not (= x@130@01 u@132@01))))))
(assert (or
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
      (not (= x@130@01 from@84@01))))
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
    (not (= x@130@01 from@84@01)))))
(push) ; 15
; [then-branch: 37 | !(DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01) | live]
; [else-branch: 37 | DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01 | live]
(push) ; 16
; [then-branch: 37 | !(DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01)]
(assert (not
  (or
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
      (not (= x@130@01 from@84@01)))
    (and
      (= x@130@01 u@132@01)
      (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))))
(pop) ; 16
(push) ; 16
; [else-branch: 37 | DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01]
(assert (or
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
    (not (= x@130@01 from@84@01)))
  (and (= x@130@01 u@132@01) (and (= u@132@01 from@84@01) (= v@133@01 to@85@01)))))
; [eval] DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)
; [eval] DEP(old($$(g)), to, y, w, z) && to != y
; [eval] DEP(old($$(g)), to, y, w, z)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 17
(declare-const n@159@01 $Ref)
(push) ; 18
; [eval] (n in refs)
(assert (Set_in n@159@01 g@83@01))
(pop) ; 18
(declare-fun inv@160@01 ($Ref) $Ref)
(declare-fun img@161@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@162@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
; Check receiver injectivity
(push) ; 18
(assert (not (forall ((n1@159@01 $Ref) (n2@159@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@159@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) n1@159@01) n1@159@01))
      (and
        (Set_in n2@159@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) n2@159@01) n2@159@01))
      (= n1@159@01 n2@159@01))
    (= n1@159@01 n2@159@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 18
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@83@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@83@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@83@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@160@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
  :pattern ((inv@160@01 r))
  :qid |quant-u-240|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@163@01 ((r $Ref) (w@141@01 $Ref) (z@142@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r) (= r (inv@160@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@164@01 ((r $Ref) (w@141@01 $Ref) (z@142@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r) (= r (inv@160@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@163@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@163@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
    $Perm.No)
  
  :qid |quant-u-242|))))
(check-sat)
; unsat
(pop) ; 18
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r) (= r (inv@160@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@163@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-243|))))
(check-sat)
; unknown
(pop) ; 18
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 500)
(assert (not (=
  (-
    $Perm.Write
    (pTaken@164@01 from@84@01 w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 18
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (=
    (pTaken@164@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01)
    $Perm.No)
  
  :qid |quant-u-245|))))
(check-sat)
; unknown
(pop) ; 18
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r) (= r (inv@160@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@163@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
        (pTaken@164@01 r w@141@01 z@142@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-246|))))
(check-sat)
; unsat
(pop) ; 18
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@165@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01))
(pop) ; 17
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@83@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@83@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@83@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@160@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
    :pattern ((inv@160@01 r))
    :qid |quant-u-240|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)))
(set-option :timeout 0)
(push) ; 17
; [then-branch: 38 | !(DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01)) | live]
; [else-branch: 38 | DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) | live]
(push) ; 18
; [then-branch: 38 | !(DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01))]
(assert (not
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 38 | DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01)]
(assert (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
; [eval] to != y
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))))
(push) ; 17
; [then-branch: 39 | DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01 | live]
; [else-branch: 39 | !(DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01) | live]
(push) ; 18
; [then-branch: 39 | DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01]
(assert (and
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
  (not (= to@85@01 y@131@01))))
(pop) ; 18
(push) ; 18
; [else-branch: 39 | !(DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01)]
(assert (not
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
    (not (= to@85@01 y@131@01)))))
; [eval] from == w && (to == z && z == y)
; [eval] from == w
(push) ; 19
; [then-branch: 40 | from@84@01 != w@141@01 | live]
; [else-branch: 40 | from@84@01 == w@141@01 | live]
(push) ; 20
; [then-branch: 40 | from@84@01 != w@141@01]
(assert (not (= from@84@01 w@141@01)))
(pop) ; 20
(push) ; 20
; [else-branch: 40 | from@84@01 == w@141@01]
(assert (= from@84@01 w@141@01))
; [eval] to == z
(push) ; 21
; [then-branch: 41 | to@85@01 != z@142@01 | live]
; [else-branch: 41 | to@85@01 == z@142@01 | live]
(push) ; 22
; [then-branch: 41 | to@85@01 != z@142@01]
(assert (not (= to@85@01 z@142@01)))
(pop) ; 22
(push) ; 22
; [else-branch: 41 | to@85@01 == z@142@01]
(assert (= to@85@01 z@142@01))
; [eval] z == y
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (= to@85@01 z@142@01) (not (= to@85@01 z@142@01))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (= from@84@01 w@141@01)
  (and
    (= from@84@01 w@141@01)
    (or (= to@85@01 z@142@01) (not (= to@85@01 z@142@01))))))
(assert (or (= from@84@01 w@141@01) (not (= from@84@01 w@141@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
      (not (= to@85@01 y@131@01))))
  (and
    (not
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
        (not (= to@85@01 y@131@01))))
    (=>
      (= from@84@01 w@141@01)
      (and
        (= from@84@01 w@141@01)
        (or (= to@85@01 z@142@01) (not (= to@85@01 z@142@01)))))
    (or (= from@84@01 w@141@01) (not (= from@84@01 w@141@01))))))
(assert (or
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
      (not (= to@85@01 y@131@01))))
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
    (not (= to@85@01 y@131@01)))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@83@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@83@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@83@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert (=>
  (or
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
      (not (= x@130@01 from@84@01)))
    (and
      (= x@130@01 u@132@01)
      (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
  (and
    (or
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
        (not (= x@130@01 from@84@01)))
      (and
        (= x@130@01 u@132@01)
        (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@160@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
      :pattern ((inv@160@01 r))
      :qid |quant-u-240|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)))
    (=>
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
          (not (= to@85@01 y@131@01))))
      (and
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
            (not (= to@85@01 y@131@01))))
        (=>
          (= from@84@01 w@141@01)
          (and
            (= from@84@01 w@141@01)
            (or (= to@85@01 z@142@01) (not (= to@85@01 z@142@01)))))
        (or (= from@84@01 w@141@01) (not (= from@84@01 w@141@01)))))
    (or
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
          (not (= to@85@01 y@131@01))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
        (not (= to@85@01 y@131@01)))))))
(assert (or
  (or
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
      (not (= x@130@01 from@84@01)))
    (and
      (= x@130@01 u@132@01)
      (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
  (not
    (or
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
        (not (= x@130@01 from@84@01)))
      (and
        (= x@130@01 u@132@01)
        (and (= u@132@01 from@84@01) (= v@133@01 to@85@01)))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
(assert (forall ((n@152@01 $Ref)) (!
  (=>
    (Set_in n@152@01 g@83@01)
    (and (= (inv@153@01 n@152@01) n@152@01) (img@154@01 n@152@01)))
  :pattern ((Set_in n@152@01 g@83@01))
  :pattern ((inv@153@01 n@152@01))
  :pattern ((img@154@01 n@152@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@154@01 r) (Set_in (inv@153@01 r) g@83@01)) (= (inv@153@01 r) r))
  :pattern ((inv@153@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)))
    (=>
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@83@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@83@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@83@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert (=>
  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
  (and
    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@153@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) r) r))
      :pattern ((inv@153@01 r))
      :qid |quant-u-232|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)))
    (=>
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
          (not (= x@130@01 from@84@01))))
      (and
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
            (not (= x@130@01 from@84@01))))
        (=>
          (= x@130@01 u@132@01)
          (and
            (= x@130@01 u@132@01)
            (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
        (or (= x@130@01 u@132@01) (not (= x@130@01 u@132@01)))))
    (or
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
          (not (= x@130@01 from@84@01))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
        (not (= x@130@01 from@84@01))))
    (=>
      (or
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
          (not (= x@130@01 from@84@01)))
        (and
          (= x@130@01 u@132@01)
          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
      (and
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 u@132@01)
            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@160@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
          :pattern ((inv@160@01 r))
          :qid |quant-u-240|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)
        (or
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)))
        (=>
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
              (not (= to@85@01 y@131@01))))
          (and
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                (not (= to@85@01 y@131@01))))
            (=>
              (= from@84@01 w@141@01)
              (and
                (= from@84@01 w@141@01)
                (or (= to@85@01 z@142@01) (not (= to@85@01 z@142@01)))))
            (or (= from@84@01 w@141@01) (not (= from@84@01 w@141@01)))))
        (or
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
              (not (= to@85@01 y@131@01))))
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
            (not (= to@85@01 y@131@01))))))
    (or
      (or
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
          (not (= x@130@01 from@84@01)))
        (and
          (= x@130@01 u@132@01)
          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
      (not
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 u@132@01)
            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01)))))))))
(assert (or
  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
  (not
    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|)))))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@83@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@83@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@83@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
(assert (forall ((n@152@01 $Ref)) (!
  (=>
    (Set_in n@152@01 g@83@01)
    (and (= (inv@153@01 n@152@01) n@152@01) (img@154@01 n@152@01)))
  :pattern ((Set_in n@152@01 g@83@01))
  :pattern ((inv@153@01 n@152@01))
  :pattern ((img@154@01 n@152@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@154@01 r) (Set_in (inv@153@01 r) g@83@01)) (= (inv@153@01 r) r))
  :pattern ((inv@153@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)))
    (=>
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@83@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@83@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@83@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@146@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
  :pattern ((inv@146@01 r))
  :qid |quant-u-224|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01))
(assert (or
  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
  (not
    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|)))))
; Nested auxiliary terms: non-globals (aux)
(assert (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
  (=>
    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
    (and
      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
      (forall ((r $Ref)) (!
        (=>
          (Set_in (inv@153@01 r) g@83@01)
          ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) r) r))
        :pattern ((inv@153@01 r))
        :qid |quant-u-232|))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
      (or
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)))
      (=>
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
            (not (= x@130@01 from@84@01))))
        (and
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
              (not (= x@130@01 from@84@01))))
          (=>
            (= x@130@01 u@132@01)
            (and
              (= x@130@01 u@132@01)
              (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
          (or (= x@130@01 u@132@01) (not (= x@130@01 u@132@01)))))
      (or
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
            (not (= x@130@01 from@84@01))))
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
          (not (= x@130@01 from@84@01))))
      (=>
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 u@132@01)
            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
        (and
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 u@132@01)
              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
          (forall ((r $Ref)) (!
            (=>
              (Set_in (inv@160@01 r) g@83@01)
              ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
            :pattern ((inv@160@01 r))
            :qid |quant-u-240|))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)
          (or
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)))
          (=>
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                (not (= to@85@01 y@131@01))))
            (and
              (not
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                  (not (= to@85@01 y@131@01))))
              (=>
                (= from@84@01 w@141@01)
                (and
                  (= from@84@01 w@141@01)
                  (or (= to@85@01 z@142@01) (not (= to@85@01 z@142@01)))))
              (or (= from@84@01 w@141@01) (not (= from@84@01 w@141@01)))))
          (or
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                (not (= to@85@01 y@131@01))))
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
              (not (= to@85@01 y@131@01))))))
      (or
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 u@132@01)
            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
        (not
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 u@132@01)
              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96-aux|)))
(assert (forall ((w@141@01 $Ref) (z@142@01 $Ref)) (!
  (and
    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
    (=>
      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
        (=>
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 u@132@01)
              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
(push) ; 12
; [then-branch: 42 | QE w@141@01,z@142@01 :: QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01)) && DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01 && DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01 || from@84@01 == w@141@01 && to@85@01 == z@142@01 && z@142@01 == y@131@01 | live]
; [else-branch: 42 | !(QE w@141@01,z@142@01 :: QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01)) && DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01 && DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01 || from@84@01 == w@141@01 && to@85@01 == z@142@01 && z@142@01 == y@131@01) | live]
(push) ; 13
; [then-branch: 42 | QE w@141@01,z@142@01 :: QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01)) && DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01 && DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01 || from@84@01 == w@141@01 && to@85@01 == z@142@01 && z@142@01 == y@131@01]
(assert (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
  (and
    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
    (and
      (or
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
          (not (= x@130@01 from@84@01)))
        (and
          (= x@130@01 u@132@01)
          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
      (or
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
          (not (= to@85@01 y@131@01)))
        (and
          (= from@84@01 w@141@01)
          (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
(pop) ; 13
(push) ; 13
; [else-branch: 42 | !(QE w@141@01,z@142@01 :: QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01)) && DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01 && DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01 || from@84@01 == w@141@01 && to@85@01 == z@142@01 && z@142@01 == y@131@01)]
(assert (not
  (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
    (and
      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
      (and
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 u@132@01)
            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
            (not (= to@85@01 y@131@01)))
          (and
            (= from@84@01 w@141@01)
            (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))))
; [eval] (exists U: Ref, V: Ref :: { DEP(old($$(g)), x, from, U, V) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, u, v) && to != y || from == u && (to == v && v == y))))
(declare-const U@166@01 $Ref)
(declare-const V@167@01 $Ref)
(push) ; 14
; [eval] (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, u, v) && to != y || from == u && (to == v && v == y)))
; [eval] (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_))
(declare-const u_@168@01 $Ref)
(declare-const v_@169@01 $Ref)
(push) ; 15
; [eval] !DEP(old($$(g)), x, y, u_, v_)
; [eval] DEP(old($$(g)), x, y, u_, v_)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 16
(declare-const n@170@01 $Ref)
(push) ; 17
; [eval] (n in refs)
(assert (Set_in n@170@01 g@83@01))
(pop) ; 17
(declare-fun inv@171@01 ($Ref) $Ref)
(declare-fun img@172@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@173@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
; Check receiver injectivity
(push) ; 17
(assert (not (forall ((n1@170@01 $Ref) (n2@170@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@170@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) n1@170@01) n1@170@01))
      (and
        (Set_in n2@170@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) n2@170@01) n2@170@01))
      (= n1@170@01 n2@170@01))
    (= n1@170@01 n2@170@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 17
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@83@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@83@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@83@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@171@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
  :pattern ((inv@171@01 r))
  :qid |quant-u-248|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@174@01 ((r $Ref) (u_@168@01 $Ref) (v_@169@01 $Ref) (U@166@01 $Ref) (V@167@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r) (= r (inv@171@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@175@01 ((r $Ref) (u_@168@01 $Ref) (v_@169@01 $Ref) (U@166@01 $Ref) (V@167@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r) (= r (inv@171@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@174@01 r u_@168@01 v_@169@01 U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@174@01 r u_@168@01 v_@169@01 U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
    $Perm.No)
  
  :qid |quant-u-250|))))
(check-sat)
; unsat
(pop) ; 17
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r) (= r (inv@171@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@174@01 r u_@168@01 v_@169@01 U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-251|))))
(check-sat)
; unknown
(pop) ; 17
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 500)
(assert (not (=
  (-
    $Perm.Write
    (pTaken@175@01 from@84@01 u_@168@01 v_@169@01 U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 17
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (=
    (pTaken@175@01 r u_@168@01 v_@169@01 U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01)
    $Perm.No)
  
  :qid |quant-u-253|))))
(check-sat)
; unknown
(pop) ; 17
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r) (= r (inv@171@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@174@01 r u_@168@01 v_@169@01 U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
        (pTaken@175@01 r u_@168@01 v_@169@01 U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-254|))))
(check-sat)
; unsat
(pop) ; 17
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@176@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01))
(pop) ; 16
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@83@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@83@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@83@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@171@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
    :pattern ((inv@171@01 r))
    :qid |quant-u-248|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)))
(pop) ; 15
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@83@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@83@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@83@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@171@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
  :pattern ((inv@171@01 r))
  :qid |quant-u-248|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01))
; Nested auxiliary terms: non-globals (aux)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 43 | !(QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01))) | live]
; [else-branch: 43 | QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01)) | live]
(push) ; 16
; [then-branch: 43 | !(QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01)))]
(assert (not
  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))))
(pop) ; 16
(push) ; 16
; [else-branch: 43 | QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01))]
(assert (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|)))
; [eval] DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)
; [eval] DEP(old($$(g)), x, from, U, V) && x != from
; [eval] DEP(old($$(g)), x, from, U, V)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 17
(declare-const n@177@01 $Ref)
(push) ; 18
; [eval] (n in refs)
(assert (Set_in n@177@01 g@83@01))
(pop) ; 18
(declare-fun inv@178@01 ($Ref) $Ref)
(declare-fun img@179@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@180@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
; Check receiver injectivity
(push) ; 18
(assert (not (forall ((n1@177@01 $Ref) (n2@177@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@177@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) n1@177@01) n1@177@01))
      (and
        (Set_in n2@177@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) n2@177@01) n2@177@01))
      (= n1@177@01 n2@177@01))
    (= n1@177@01 n2@177@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 18
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@83@01)
    (and (= (inv@178@01 n@177@01) n@177@01) (img@179@01 n@177@01)))
  :pattern ((Set_in n@177@01 g@83@01))
  :pattern ((inv@178@01 n@177@01))
  :pattern ((img@179@01 n@177@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@179@01 r) (Set_in (inv@178@01 r) g@83@01)) (= (inv@178@01 r) r))
  :pattern ((inv@178@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@178@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
  :pattern ((inv@178@01 r))
  :qid |quant-u-256|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@181@01 ((r $Ref) (U@166@01 $Ref) (V@167@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r) (= r (inv@178@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@182@01 ((r $Ref) (U@166@01 $Ref) (V@167@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r) (= r (inv@178@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@181@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@181@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
    $Perm.No)
  
  :qid |quant-u-258|))))
(check-sat)
; unsat
(pop) ; 18
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r) (= r (inv@178@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@181@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-259|))))
(check-sat)
; unknown
(pop) ; 18
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 500)
(assert (not (=
  (-
    $Perm.Write
    (pTaken@182@01 from@84@01 U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 18
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (=
    (pTaken@182@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01)
    $Perm.No)
  
  :qid |quant-u-261|))))
(check-sat)
; unknown
(pop) ; 18
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r) (= r (inv@178@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@181@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
        (pTaken@182@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-262|))))
(check-sat)
; unsat
(pop) ; 18
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@183@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)))
    (=>
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01))
(pop) ; 17
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@83@01)
    (and (= (inv@178@01 n@177@01) n@177@01) (img@179@01 n@177@01)))
  :pattern ((Set_in n@177@01 g@83@01))
  :pattern ((inv@178@01 n@177@01))
  :pattern ((img@179@01 n@177@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@179@01 r) (Set_in (inv@178@01 r) g@83@01)) (= (inv@178@01 r) r))
  :pattern ((inv@178@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)))
    (=>
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@178@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
    :pattern ((inv@178@01 r))
    :qid |quant-u-256|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)))
(set-option :timeout 0)
(push) ; 17
; [then-branch: 44 | !(DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01)) | live]
; [else-branch: 44 | DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) | live]
(push) ; 18
; [then-branch: 44 | !(DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01))]
(assert (not
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 44 | DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01)]
(assert (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
; [eval] x != from
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))))
(push) ; 17
; [then-branch: 45 | DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 | live]
; [else-branch: 45 | !(DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01) | live]
(push) ; 18
; [then-branch: 45 | DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01]
(assert (and
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
  (not (= x@130@01 from@84@01))))
(pop) ; 18
(push) ; 18
; [else-branch: 45 | !(DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01)]
(assert (not
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
    (not (= x@130@01 from@84@01)))))
; [eval] x == U && (U == from && V == to)
; [eval] x == U
(push) ; 19
; [then-branch: 46 | x@130@01 != U@166@01 | live]
; [else-branch: 46 | x@130@01 == U@166@01 | live]
(push) ; 20
; [then-branch: 46 | x@130@01 != U@166@01]
(assert (not (= x@130@01 U@166@01)))
(pop) ; 20
(push) ; 20
; [else-branch: 46 | x@130@01 == U@166@01]
(assert (= x@130@01 U@166@01))
; [eval] U == from
(push) ; 21
; [then-branch: 47 | U@166@01 != from@84@01 | live]
; [else-branch: 47 | U@166@01 == from@84@01 | live]
(push) ; 22
; [then-branch: 47 | U@166@01 != from@84@01]
(assert (not (= U@166@01 from@84@01)))
(pop) ; 22
(push) ; 22
; [else-branch: 47 | U@166@01 == from@84@01]
(assert (= U@166@01 from@84@01))
; [eval] V == to
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or (= U@166@01 from@84@01) (not (= U@166@01 from@84@01))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (= x@130@01 U@166@01)
  (and
    (= x@130@01 U@166@01)
    (or (= U@166@01 from@84@01) (not (= U@166@01 from@84@01))))))
(assert (or (= x@130@01 U@166@01) (not (= x@130@01 U@166@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
      (not (= x@130@01 from@84@01))))
  (and
    (not
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
        (not (= x@130@01 from@84@01))))
    (=>
      (= x@130@01 U@166@01)
      (and
        (= x@130@01 U@166@01)
        (or (= U@166@01 from@84@01) (not (= U@166@01 from@84@01)))))
    (or (= x@130@01 U@166@01) (not (= x@130@01 U@166@01))))))
(assert (or
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
      (not (= x@130@01 from@84@01))))
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
    (not (= x@130@01 from@84@01)))))
(push) ; 17
; [then-branch: 48 | !(DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01) | live]
; [else-branch: 48 | DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01 | live]
(push) ; 18
; [then-branch: 48 | !(DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01)]
(assert (not
  (or
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
      (not (= x@130@01 from@84@01)))
    (and
      (= x@130@01 U@166@01)
      (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))))
(pop) ; 18
(push) ; 18
; [else-branch: 48 | DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01]
(assert (or
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
    (not (= x@130@01 from@84@01)))
  (and (= x@130@01 U@166@01) (and (= U@166@01 from@84@01) (= V@167@01 to@85@01)))))
; [eval] DEP(old($$(g)), to, y, u, v) && to != y || from == u && (to == v && v == y)
; [eval] DEP(old($$(g)), to, y, u, v) && to != y
; [eval] DEP(old($$(g)), to, y, u, v)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 19
(declare-const n@184@01 $Ref)
(push) ; 20
; [eval] (n in refs)
(assert (Set_in n@184@01 g@83@01))
(pop) ; 20
(declare-fun inv@185@01 ($Ref) $Ref)
(declare-fun img@186@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@187@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
; Check receiver injectivity
(push) ; 20
(assert (not (forall ((n1@184@01 $Ref) (n2@184@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@184@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) n1@184@01) n1@184@01))
      (and
        (Set_in n2@184@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) n2@184@01) n2@184@01))
      (= n1@184@01 n2@184@01))
    (= n1@184@01 n2@184@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 20
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 g@83@01)
    (and (= (inv@185@01 n@184@01) n@184@01) (img@186@01 n@184@01)))
  :pattern ((Set_in n@184@01 g@83@01))
  :pattern ((inv@185@01 n@184@01))
  :pattern ((img@186@01 n@184@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@186@01 r) (Set_in (inv@185@01 r) g@83@01)) (= (inv@185@01 r) r))
  :pattern ((inv@185@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@185@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
  :pattern ((inv@185@01 r))
  :qid |quant-u-264|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@188@01 ((r $Ref) (U@166@01 $Ref) (V@167@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r) (= r (inv@185@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@189@01 ((r $Ref) (U@166@01 $Ref) (V@167@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r) (= r (inv@185@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@188@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@188@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
    $Perm.No)
  
  :qid |quant-u-266|))))
(check-sat)
; unsat
(pop) ; 20
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r) (= r (inv@185@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@188@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-267|))))
(check-sat)
; unknown
(pop) ; 20
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 500)
(assert (not (=
  (-
    $Perm.Write
    (pTaken@189@01 from@84@01 U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 20
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (=
    (pTaken@189@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01)
    $Perm.No)
  
  :qid |quant-u-269|))))
(check-sat)
; unknown
(pop) ; 20
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r) (= r (inv@185@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@188@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
        (pTaken@189@01 r U@166@01 V@167@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-270|))))
(check-sat)
; unsat
(pop) ; 20
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@190@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)))
    (=>
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef138|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01))
(pop) ; 19
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 g@83@01)
    (and (= (inv@185@01 n@184@01) n@184@01) (img@186@01 n@184@01)))
  :pattern ((Set_in n@184@01 g@83@01))
  :pattern ((inv@185@01 n@184@01))
  :pattern ((img@186@01 n@184@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@186@01 r) (Set_in (inv@185@01 r) g@83@01)) (= (inv@185@01 r) r))
  :pattern ((inv@185@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)))
    (=>
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@185@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
    :pattern ((inv@185@01 r))
    :qid |quant-u-264|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)))
(set-option :timeout 0)
(push) ; 19
; [then-branch: 49 | !(DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01)) | live]
; [else-branch: 49 | DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) | live]
(push) ; 20
; [then-branch: 49 | !(DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01))]
(assert (not
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
(pop) ; 20
(push) ; 20
; [else-branch: 49 | DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01)]
(assert (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01))
; [eval] to != y
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01))))
(push) ; 19
; [then-branch: 50 | DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01 | live]
; [else-branch: 50 | !(DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01) | live]
(push) ; 20
; [then-branch: 50 | DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01]
(assert (and
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
  (not (= to@85@01 y@131@01))))
(pop) ; 20
(push) ; 20
; [else-branch: 50 | !(DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01)]
(assert (not
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
    (not (= to@85@01 y@131@01)))))
; [eval] from == u && (to == v && v == y)
; [eval] from == u
(push) ; 21
; [then-branch: 51 | from@84@01 != u@132@01 | live]
; [else-branch: 51 | from@84@01 == u@132@01 | live]
(push) ; 22
; [then-branch: 51 | from@84@01 != u@132@01]
(assert (not (= from@84@01 u@132@01)))
(pop) ; 22
(push) ; 22
; [else-branch: 51 | from@84@01 == u@132@01]
(assert (= from@84@01 u@132@01))
; [eval] to == v
(push) ; 23
; [then-branch: 52 | to@85@01 != v@133@01 | live]
; [else-branch: 52 | to@85@01 == v@133@01 | live]
(push) ; 24
; [then-branch: 52 | to@85@01 != v@133@01]
(assert (not (= to@85@01 v@133@01)))
(pop) ; 24
(push) ; 24
; [else-branch: 52 | to@85@01 == v@133@01]
(assert (= to@85@01 v@133@01))
; [eval] v == y
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (= to@85@01 v@133@01) (not (= to@85@01 v@133@01))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=>
  (= from@84@01 u@132@01)
  (and
    (= from@84@01 u@132@01)
    (or (= to@85@01 v@133@01) (not (= to@85@01 v@133@01))))))
(assert (or (= from@84@01 u@132@01) (not (= from@84@01 u@132@01))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
      (not (= to@85@01 y@131@01))))
  (and
    (not
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
        (not (= to@85@01 y@131@01))))
    (=>
      (= from@84@01 u@132@01)
      (and
        (= from@84@01 u@132@01)
        (or (= to@85@01 v@133@01) (not (= to@85@01 v@133@01)))))
    (or (= from@84@01 u@132@01) (not (= from@84@01 u@132@01))))))
(assert (or
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
      (not (= to@85@01 y@131@01))))
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
    (not (= to@85@01 y@131@01)))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 g@83@01)
    (and (= (inv@185@01 n@184@01) n@184@01) (img@186@01 n@184@01)))
  :pattern ((Set_in n@184@01 g@83@01))
  :pattern ((inv@185@01 n@184@01))
  :pattern ((img@186@01 n@184@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@186@01 r) (Set_in (inv@185@01 r) g@83@01)) (= (inv@185@01 r) r))
  :pattern ((inv@185@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)))
    (=>
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (=>
  (or
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
      (not (= x@130@01 from@84@01)))
    (and
      (= x@130@01 U@166@01)
      (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
  (and
    (or
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
        (not (= x@130@01 from@84@01)))
      (and
        (= x@130@01 U@166@01)
        (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@185@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
      :pattern ((inv@185@01 r))
      :qid |quant-u-264|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
    (=>
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
          (not (= to@85@01 y@131@01))))
      (and
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
            (not (= to@85@01 y@131@01))))
        (=>
          (= from@84@01 u@132@01)
          (and
            (= from@84@01 u@132@01)
            (or (= to@85@01 v@133@01) (not (= to@85@01 v@133@01)))))
        (or (= from@84@01 u@132@01) (not (= from@84@01 u@132@01)))))
    (or
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
          (not (= to@85@01 y@131@01))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
        (not (= to@85@01 y@131@01)))))))
(assert (or
  (or
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
      (not (= x@130@01 from@84@01)))
    (and
      (= x@130@01 U@166@01)
      (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
  (not
    (or
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
        (not (= x@130@01 from@84@01)))
      (and
        (= x@130@01 U@166@01)
        (and (= U@166@01 from@84@01) (= V@167@01 to@85@01)))))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@83@01)
    (and (= (inv@178@01 n@177@01) n@177@01) (img@179@01 n@177@01)))
  :pattern ((Set_in n@177@01 g@83@01))
  :pattern ((inv@178@01 n@177@01))
  :pattern ((img@179@01 n@177@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@179@01 r) (Set_in (inv@178@01 r) g@83@01)) (= (inv@178@01 r) r))
  :pattern ((inv@178@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)))
    (=>
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 g@83@01)
    (and (= (inv@185@01 n@184@01) n@184@01) (img@186@01 n@184@01)))
  :pattern ((Set_in n@184@01 g@83@01))
  :pattern ((inv@185@01 n@184@01))
  :pattern ((img@186@01 n@184@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@186@01 r) (Set_in (inv@185@01 r) g@83@01)) (= (inv@185@01 r) r))
  :pattern ((inv@185@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)))
    (=>
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (=>
  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
  (and
    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@178@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
      :pattern ((inv@178@01 r))
      :qid |quant-u-256|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)))
    (=>
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
          (not (= x@130@01 from@84@01))))
      (and
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
            (not (= x@130@01 from@84@01))))
        (=>
          (= x@130@01 U@166@01)
          (and
            (= x@130@01 U@166@01)
            (or (= U@166@01 from@84@01) (not (= U@166@01 from@84@01)))))
        (or (= x@130@01 U@166@01) (not (= x@130@01 U@166@01)))))
    (or
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
          (not (= x@130@01 from@84@01))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
        (not (= x@130@01 from@84@01))))
    (=>
      (or
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
          (not (= x@130@01 from@84@01)))
        (and
          (= x@130@01 U@166@01)
          (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
      (and
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 U@166@01)
            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@185@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
          :pattern ((inv@185@01 r))
          :qid |quant-u-264|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)
        (or
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
        (=>
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
              (not (= to@85@01 y@131@01))))
          (and
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                (not (= to@85@01 y@131@01))))
            (=>
              (= from@84@01 u@132@01)
              (and
                (= from@84@01 u@132@01)
                (or (= to@85@01 v@133@01) (not (= to@85@01 v@133@01)))))
            (or (= from@84@01 u@132@01) (not (= from@84@01 u@132@01)))))
        (or
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
              (not (= to@85@01 y@131@01))))
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
            (not (= to@85@01 y@131@01))))))
    (or
      (or
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
          (not (= x@130@01 from@84@01)))
        (and
          (= x@130@01 U@166@01)
          (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
      (not
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 U@166@01)
            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01)))))))))
(assert (or
  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
  (not
    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|)))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@83@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@83@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@83@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@83@01)
    (and (= (inv@178@01 n@177@01) n@177@01) (img@179@01 n@177@01)))
  :pattern ((Set_in n@177@01 g@83@01))
  :pattern ((inv@178@01 n@177@01))
  :pattern ((img@179@01 n@177@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@179@01 r) (Set_in (inv@178@01 r) g@83@01)) (= (inv@178@01 r) r))
  :pattern ((inv@178@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)))
    (=>
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 g@83@01)
    (and (= (inv@185@01 n@184@01) n@184@01) (img@186@01 n@184@01)))
  :pattern ((Set_in n@184@01 g@83@01))
  :pattern ((inv@185@01 n@184@01))
  :pattern ((img@186@01 n@184@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@186@01 r) (Set_in (inv@185@01 r) g@83@01)) (= (inv@185@01 r) r))
  :pattern ((inv@185@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)))
    (=>
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@171@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
  :pattern ((inv@171@01 r))
  :qid |quant-u-248|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01))
(assert (or
  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
  (not
    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|)))))
; Nested auxiliary terms: non-globals (aux)
(assert (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
  (=>
    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
    (and
      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
      (forall ((r $Ref)) (!
        (=>
          (Set_in (inv@178@01 r) g@83@01)
          ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
        :pattern ((inv@178@01 r))
        :qid |quant-u-256|))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
      (or
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)))
      (=>
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
            (not (= x@130@01 from@84@01))))
        (and
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
              (not (= x@130@01 from@84@01))))
          (=>
            (= x@130@01 U@166@01)
            (and
              (= x@130@01 U@166@01)
              (or (= U@166@01 from@84@01) (not (= U@166@01 from@84@01)))))
          (or (= x@130@01 U@166@01) (not (= x@130@01 U@166@01)))))
      (or
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
            (not (= x@130@01 from@84@01))))
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
          (not (= x@130@01 from@84@01))))
      (=>
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 U@166@01)
            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
        (and
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 U@166@01)
              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
          (forall ((r $Ref)) (!
            (=>
              (Set_in (inv@185@01 r) g@83@01)
              ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
            :pattern ((inv@185@01 r))
            :qid |quant-u-264|))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)
          (or
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
          (=>
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                (not (= to@85@01 y@131@01))))
            (and
              (not
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                  (not (= to@85@01 y@131@01))))
              (=>
                (= from@84@01 u@132@01)
                (and
                  (= from@84@01 u@132@01)
                  (or (= to@85@01 v@133@01) (not (= to@85@01 v@133@01)))))
              (or (= from@84@01 u@132@01) (not (= from@84@01 u@132@01)))))
          (or
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                (not (= to@85@01 y@131@01))))
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
              (not (= to@85@01 y@131@01))))))
      (or
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 U@166@01)
            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
        (not
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 U@166@01)
              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96-aux|)))
(assert (forall ((U@166@01 $Ref) (V@167@01 $Ref)) (!
  (and
    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
    (=>
      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
        (=>
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 U@166@01)
              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
(push) ; 14
; [then-branch: 53 | QE U@166@01,V@167@01 :: QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01)) && DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01 && DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01 || from@84@01 == u@132@01 && to@85@01 == v@133@01 && v@133@01 == y@131@01 | live]
; [else-branch: 53 | !(QE U@166@01,V@167@01 :: QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01)) && DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01 && DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01 || from@84@01 == u@132@01 && to@85@01 == v@133@01 && v@133@01 == y@131@01) | live]
(push) ; 15
; [then-branch: 53 | QE U@166@01,V@167@01 :: QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01)) && DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01 && DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01 || from@84@01 == u@132@01 && to@85@01 == v@133@01 && v@133@01 == y@131@01]
(assert (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
  (and
    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
    (and
      (or
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
          (not (= x@130@01 from@84@01)))
        (and
          (= x@130@01 U@166@01)
          (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
      (or
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
          (not (= to@85@01 y@131@01)))
        (and
          (= from@84@01 u@132@01)
          (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
(pop) ; 15
(push) ; 15
; [else-branch: 53 | !(QE U@166@01,V@167@01 :: QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01)) && DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01 && DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01 || from@84@01 == u@132@01 && to@85@01 == v@133@01 && v@133@01 == y@131@01)]
(assert (not
  (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
    (and
      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
      (and
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 U@166@01)
            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
            (not (= to@85@01 y@131@01)))
          (and
            (= from@84@01 u@132@01)
            (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))))
; [eval] u == from && (v == to && (exists U: Ref, V: Ref, w: Ref, z: Ref :: { DEP(old($$(g)), x, from, U, V), DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))))
; [eval] u == from
(push) ; 16
; [then-branch: 54 | u@132@01 != from@84@01 | live]
; [else-branch: 54 | u@132@01 == from@84@01 | live]
(push) ; 17
; [then-branch: 54 | u@132@01 != from@84@01]
(assert (not (= u@132@01 from@84@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 54 | u@132@01 == from@84@01]
(assert (= u@132@01 from@84@01))
; [eval] v == to
(push) ; 18
; [then-branch: 55 | v@133@01 != to@85@01 | live]
; [else-branch: 55 | v@133@01 == to@85@01 | live]
(push) ; 19
; [then-branch: 55 | v@133@01 != to@85@01]
(assert (not (= v@133@01 to@85@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 55 | v@133@01 == to@85@01]
(assert (= v@133@01 to@85@01))
; [eval] (exists U: Ref, V: Ref, w: Ref, z: Ref :: { DEP(old($$(g)), x, from, U, V), DEP(old($$(g)), to, y, w, z) } (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y))))
(declare-const U@191@01 $Ref)
(declare-const V@192@01 $Ref)
(declare-const w@193@01 $Ref)
(declare-const z@194@01 $Ref)
(push) ; 20
; [eval] (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_)) && ((DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)) && (DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)))
; [eval] (forall u_: Ref, v_: Ref :: { DEP(old($$(g)), x, y, u_, v_) } !DEP(old($$(g)), x, y, u_, v_))
(declare-const u_@195@01 $Ref)
(declare-const v_@196@01 $Ref)
(push) ; 21
; [eval] !DEP(old($$(g)), x, y, u_, v_)
; [eval] DEP(old($$(g)), x, y, u_, v_)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 22
(declare-const n@197@01 $Ref)
(push) ; 23
; [eval] (n in refs)
(assert (Set_in n@197@01 g@83@01))
(pop) ; 23
(declare-fun inv@198@01 ($Ref) $Ref)
(declare-fun img@199@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@200@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
; Check receiver injectivity
(push) ; 23
(assert (not (forall ((n1@197@01 $Ref) (n2@197@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@197@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) n1@197@01) n1@197@01))
      (and
        (Set_in n2@197@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) n2@197@01) n2@197@01))
      (= n1@197@01 n2@197@01))
    (= n1@197@01 n2@197@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 23
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@198@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
  :pattern ((inv@198@01 r))
  :qid |quant-u-272|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@201@01 ((r $Ref) (u_@195@01 $Ref) (v_@196@01 $Ref) (U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r) (= r (inv@198@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@202@01 ((r $Ref) (u_@195@01 $Ref) (v_@196@01 $Ref) (U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r) (= r (inv@198@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@201@01 r u_@195@01 v_@196@01 U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@201@01 r u_@195@01 v_@196@01 U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
    $Perm.No)
  
  :qid |quant-u-274|))))
(check-sat)
; unsat
(pop) ; 23
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r) (= r (inv@198@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@201@01 r u_@195@01 v_@196@01 U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-275|))))
(check-sat)
; unknown
(pop) ; 23
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 500)
(assert (not (=
  (-
    $Perm.Write
    (pTaken@202@01 from@84@01 u_@195@01 v_@196@01 U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 23
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (=
    (pTaken@202@01 r u_@195@01 v_@196@01 U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01)
    $Perm.No)
  
  :qid |quant-u-277|))))
(check-sat)
; unknown
(pop) ; 23
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r) (= r (inv@198@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@201@01 r u_@195@01 v_@196@01 U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
        (pTaken@202@01 r u_@195@01 v_@196@01 U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-278|))))
(check-sat)
; unsat
(pop) ; 23
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@203@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01))
(pop) ; 22
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@198@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
    :pattern ((inv@198@01 r))
    :qid |quant-u-272|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)))
(pop) ; 21
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@198@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
  :pattern ((inv@198@01 r))
  :qid |quant-u-272|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01))
; Nested auxiliary terms: non-globals (aux)
(set-option :timeout 0)
(push) ; 21
; [then-branch: 56 | !(QA u_@195@01,v_@196@01 :: !(DEP[Bool]($$(sm@203@01, g@83@01), x@130@01, y@131@01, u_@195@01, v_@196@01))) | live]
; [else-branch: 56 | QA u_@195@01,v_@196@01 :: !(DEP[Bool]($$(sm@203@01, g@83@01), x@130@01, y@131@01, u_@195@01, v_@196@01)) | live]
(push) ; 22
; [then-branch: 56 | !(QA u_@195@01,v_@196@01 :: !(DEP[Bool]($$(sm@203@01, g@83@01), x@130@01, y@131@01, u_@195@01, v_@196@01)))]
(assert (not
  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
(pop) ; 22
(push) ; 22
; [else-branch: 56 | QA u_@195@01,v_@196@01 :: !(DEP[Bool]($$(sm@203@01, g@83@01), x@130@01, y@131@01, u_@195@01, v_@196@01))]
(assert (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|)))
; [eval] DEP(old($$(g)), x, from, U, V) && x != from || x == U && (U == from && V == to)
; [eval] DEP(old($$(g)), x, from, U, V) && x != from
; [eval] DEP(old($$(g)), x, from, U, V)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 23
(declare-const n@204@01 $Ref)
(push) ; 24
; [eval] (n in refs)
(assert (Set_in n@204@01 g@83@01))
(pop) ; 24
(declare-fun inv@205@01 ($Ref) $Ref)
(declare-fun img@206@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@207@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
; Check receiver injectivity
(push) ; 24
(assert (not (forall ((n1@204@01 $Ref) (n2@204@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@204@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) n1@204@01) n1@204@01))
      (and
        (Set_in n2@204@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) n2@204@01) n2@204@01))
      (= n1@204@01 n2@204@01))
    (= n1@204@01 n2@204@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 24
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@205@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
  :pattern ((inv@205@01 r))
  :qid |quant-u-280|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@208@01 ((r $Ref) (U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r) (= r (inv@205@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@209@01 ((r $Ref) (U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r) (= r (inv@205@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@208@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@208@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
    $Perm.No)
  
  :qid |quant-u-282|))))
(check-sat)
; unsat
(pop) ; 24
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r) (= r (inv@205@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@208@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-283|))))
(check-sat)
; unknown
(pop) ; 24
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 500)
(assert (not (=
  (-
    $Perm.Write
    (pTaken@209@01 from@84@01 U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 24
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (=
    (pTaken@209@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01)
    $Perm.No)
  
  :qid |quant-u-285|))))
(check-sat)
; unknown
(pop) ; 24
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r) (= r (inv@205@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@208@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
        (pTaken@209@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-286|))))
(check-sat)
; unsat
(pop) ; 24
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@210@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01))
(pop) ; 23
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@205@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
    :pattern ((inv@205@01 r))
    :qid |quant-u-280|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)))
(set-option :timeout 0)
(push) ; 23
; [then-branch: 57 | !(DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01)) | live]
; [else-branch: 57 | DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) | live]
(push) ; 24
; [then-branch: 57 | !(DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01))]
(assert (not
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
(pop) ; 24
(push) ; 24
; [else-branch: 57 | DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01)]
(assert (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01))
; [eval] x != from
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01))))
(push) ; 23
; [then-branch: 58 | DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01 | live]
; [else-branch: 58 | !(DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01) | live]
(push) ; 24
; [then-branch: 58 | DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01]
(assert (and
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
  (not (= x@130@01 from@84@01))))
(pop) ; 24
(push) ; 24
; [else-branch: 58 | !(DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01)]
(assert (not
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
    (not (= x@130@01 from@84@01)))))
; [eval] x == U && (U == from && V == to)
; [eval] x == U
(push) ; 25
; [then-branch: 59 | x@130@01 != U@191@01 | live]
; [else-branch: 59 | x@130@01 == U@191@01 | live]
(push) ; 26
; [then-branch: 59 | x@130@01 != U@191@01]
(assert (not (= x@130@01 U@191@01)))
(pop) ; 26
(push) ; 26
; [else-branch: 59 | x@130@01 == U@191@01]
(assert (= x@130@01 U@191@01))
; [eval] U == from
(push) ; 27
; [then-branch: 60 | U@191@01 != from@84@01 | live]
; [else-branch: 60 | U@191@01 == from@84@01 | live]
(push) ; 28
; [then-branch: 60 | U@191@01 != from@84@01]
(assert (not (= U@191@01 from@84@01)))
(pop) ; 28
(push) ; 28
; [else-branch: 60 | U@191@01 == from@84@01]
(assert (= U@191@01 from@84@01))
; [eval] V == to
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (= U@191@01 from@84@01) (not (= U@191@01 from@84@01))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (= x@130@01 U@191@01)
  (and
    (= x@130@01 U@191@01)
    (or (= U@191@01 from@84@01) (not (= U@191@01 from@84@01))))))
(assert (or (= x@130@01 U@191@01) (not (= x@130@01 U@191@01))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
      (not (= x@130@01 from@84@01))))
  (and
    (not
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
        (not (= x@130@01 from@84@01))))
    (=>
      (= x@130@01 U@191@01)
      (and
        (= x@130@01 U@191@01)
        (or (= U@191@01 from@84@01) (not (= U@191@01 from@84@01)))))
    (or (= x@130@01 U@191@01) (not (= x@130@01 U@191@01))))))
(assert (or
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
      (not (= x@130@01 from@84@01))))
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
    (not (= x@130@01 from@84@01)))))
(push) ; 23
; [then-branch: 61 | !(DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01 || x@130@01 == U@191@01 && U@191@01 == from@84@01 && V@192@01 == to@85@01) | live]
; [else-branch: 61 | DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01 || x@130@01 == U@191@01 && U@191@01 == from@84@01 && V@192@01 == to@85@01 | live]
(push) ; 24
; [then-branch: 61 | !(DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01 || x@130@01 == U@191@01 && U@191@01 == from@84@01 && V@192@01 == to@85@01)]
(assert (not
  (or
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
      (not (= x@130@01 from@84@01)))
    (and
      (= x@130@01 U@191@01)
      (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))))
(pop) ; 24
(push) ; 24
; [else-branch: 61 | DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01 || x@130@01 == U@191@01 && U@191@01 == from@84@01 && V@192@01 == to@85@01]
(assert (or
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
    (not (= x@130@01 from@84@01)))
  (and (= x@130@01 U@191@01) (and (= U@191@01 from@84@01) (= V@192@01 to@85@01)))))
; [eval] DEP(old($$(g)), to, y, w, z) && to != y || from == w && (to == z && z == y)
; [eval] DEP(old($$(g)), to, y, w, z) && to != y
; [eval] DEP(old($$(g)), to, y, w, z)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 25
(declare-const n@211@01 $Ref)
(push) ; 26
; [eval] (n in refs)
(assert (Set_in n@211@01 g@83@01))
(pop) ; 26
(declare-fun inv@212@01 ($Ref) $Ref)
(declare-fun img@213@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@214@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
; Check receiver injectivity
(push) ; 26
(assert (not (forall ((n1@211@01 $Ref) (n2@211@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@211@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) n1@211@01) n1@211@01))
      (and
        (Set_in n2@211@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) n2@211@01) n2@211@01))
      (= n1@211@01 n2@211@01))
    (= n1@211@01 n2@211@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 26
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@212@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
  :pattern ((inv@212@01 r))
  :qid |quant-u-288|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@215@01 ((r $Ref) (U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r) (= r (inv@212@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@216@01 ((r $Ref) (U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r) (= r (inv@212@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@215@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 26
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@215@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
    $Perm.No)
  
  :qid |quant-u-290|))))
(check-sat)
; unsat
(pop) ; 26
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 26
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r) (= r (inv@212@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@215@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-291|))))
(check-sat)
; unknown
(pop) ; 26
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 26
(set-option :timeout 500)
(assert (not (=
  (-
    $Perm.Write
    (pTaken@216@01 from@84@01 U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 26
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (=
    (pTaken@216@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01)
    $Perm.No)
  
  :qid |quant-u-293|))))
(check-sat)
; unknown
(pop) ; 26
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 26
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r) (= r (inv@212@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@215@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
        (pTaken@216@01 r U@191@01 V@192@01 w@193@01 z@194@01 x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-294|))))
(check-sat)
; unsat
(pop) ; 26
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@217@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01))
(pop) ; 25
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@212@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
    :pattern ((inv@212@01 r))
    :qid |quant-u-288|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))
(set-option :timeout 0)
(push) ; 25
; [then-branch: 62 | !(DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01)) | live]
; [else-branch: 62 | DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01) | live]
(push) ; 26
; [then-branch: 62 | !(DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01))]
(assert (not
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
(pop) ; 26
(push) ; 26
; [else-branch: 62 | DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01)]
(assert (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
; [eval] to != y
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))))
(push) ; 25
; [then-branch: 63 | DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01) && to@85@01 != y@131@01 | live]
; [else-branch: 63 | !(DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01) && to@85@01 != y@131@01) | live]
(push) ; 26
; [then-branch: 63 | DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01) && to@85@01 != y@131@01]
(assert (and
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
  (not (= to@85@01 y@131@01))))
(pop) ; 26
(push) ; 26
; [else-branch: 63 | !(DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01) && to@85@01 != y@131@01)]
(assert (not
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
    (not (= to@85@01 y@131@01)))))
; [eval] from == w && (to == z && z == y)
; [eval] from == w
(push) ; 27
; [then-branch: 64 | from@84@01 != w@193@01 | live]
; [else-branch: 64 | from@84@01 == w@193@01 | live]
(push) ; 28
; [then-branch: 64 | from@84@01 != w@193@01]
(assert (not (= from@84@01 w@193@01)))
(pop) ; 28
(push) ; 28
; [else-branch: 64 | from@84@01 == w@193@01]
(assert (= from@84@01 w@193@01))
; [eval] to == z
(push) ; 29
; [then-branch: 65 | to@85@01 != z@194@01 | live]
; [else-branch: 65 | to@85@01 == z@194@01 | live]
(push) ; 30
; [then-branch: 65 | to@85@01 != z@194@01]
(assert (not (= to@85@01 z@194@01)))
(pop) ; 30
(push) ; 30
; [else-branch: 65 | to@85@01 == z@194@01]
(assert (= to@85@01 z@194@01))
; [eval] z == y
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (or (= to@85@01 z@194@01) (not (= to@85@01 z@194@01))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (=>
  (= from@84@01 w@193@01)
  (and
    (= from@84@01 w@193@01)
    (or (= to@85@01 z@194@01) (not (= to@85@01 z@194@01))))))
(assert (or (= from@84@01 w@193@01) (not (= from@84@01 w@193@01))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
      (not (= to@85@01 y@131@01))))
  (and
    (not
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
        (not (= to@85@01 y@131@01))))
    (=>
      (= from@84@01 w@193@01)
      (and
        (= from@84@01 w@193@01)
        (or (= to@85@01 z@194@01) (not (= to@85@01 z@194@01)))))
    (or (= from@84@01 w@193@01) (not (= from@84@01 w@193@01))))))
(assert (or
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
      (not (= to@85@01 y@131@01))))
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
    (not (= to@85@01 y@131@01)))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (=>
  (or
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
      (not (= x@130@01 from@84@01)))
    (and
      (= x@130@01 U@191@01)
      (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
  (and
    (or
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
        (not (= x@130@01 from@84@01)))
      (and
        (= x@130@01 U@191@01)
        (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@212@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
      :pattern ((inv@212@01 r))
      :qid |quant-u-288|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
    (=>
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
          (not (= to@85@01 y@131@01))))
      (and
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
            (not (= to@85@01 y@131@01))))
        (=>
          (= from@84@01 w@193@01)
          (and
            (= from@84@01 w@193@01)
            (or (= to@85@01 z@194@01) (not (= to@85@01 z@194@01)))))
        (or (= from@84@01 w@193@01) (not (= from@84@01 w@193@01)))))
    (or
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
          (not (= to@85@01 y@131@01))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
        (not (= to@85@01 y@131@01)))))))
(assert (or
  (or
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
      (not (= x@130@01 from@84@01)))
    (and
      (= x@130@01 U@191@01)
      (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
  (not
    (or
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
        (not (= x@130@01 from@84@01)))
      (and
        (= x@130@01 U@191@01)
        (and (= U@191@01 from@84@01) (= V@192@01 to@85@01)))))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (=>
  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
  (and
    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@205@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
      :pattern ((inv@205@01 r))
      :qid |quant-u-280|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
    (=>
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
          (not (= x@130@01 from@84@01))))
      (and
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
            (not (= x@130@01 from@84@01))))
        (=>
          (= x@130@01 U@191@01)
          (and
            (= x@130@01 U@191@01)
            (or (= U@191@01 from@84@01) (not (= U@191@01 from@84@01)))))
        (or (= x@130@01 U@191@01) (not (= x@130@01 U@191@01)))))
    (or
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
          (not (= x@130@01 from@84@01))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
        (not (= x@130@01 from@84@01))))
    (=>
      (or
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
          (not (= x@130@01 from@84@01)))
        (and
          (= x@130@01 U@191@01)
          (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
      (and
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 U@191@01)
            (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@212@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
          :pattern ((inv@212@01 r))
          :qid |quant-u-288|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
        (or
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
        (=>
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
              (not (= to@85@01 y@131@01))))
          (and
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                (not (= to@85@01 y@131@01))))
            (=>
              (= from@84@01 w@193@01)
              (and
                (= from@84@01 w@193@01)
                (or (= to@85@01 z@194@01) (not (= to@85@01 z@194@01)))))
            (or (= from@84@01 w@193@01) (not (= from@84@01 w@193@01)))))
        (or
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
              (not (= to@85@01 y@131@01))))
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
            (not (= to@85@01 y@131@01))))))
    (or
      (or
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
          (not (= x@130@01 from@84@01)))
        (and
          (= x@130@01 U@191@01)
          (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
      (not
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 U@191@01)
            (and (= U@191@01 from@84@01) (= V@192@01 to@85@01)))))))))
(assert (or
  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
  (not
    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|)))))
(pop) ; 20
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@198@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
  :pattern ((inv@198@01 r))
  :qid |quant-u-272|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01))
(assert (or
  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
  (not
    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|)))))
; Nested auxiliary terms: non-globals (aux)
(assert (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
  (=>
    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
    (and
      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
      (forall ((r $Ref)) (!
        (=>
          (Set_in (inv@205@01 r) g@83@01)
          ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
        :pattern ((inv@205@01 r))
        :qid |quant-u-280|))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
      (or
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
      (=>
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
            (not (= x@130@01 from@84@01))))
        (and
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
              (not (= x@130@01 from@84@01))))
          (=>
            (= x@130@01 U@191@01)
            (and
              (= x@130@01 U@191@01)
              (or (= U@191@01 from@84@01) (not (= U@191@01 from@84@01)))))
          (or (= x@130@01 U@191@01) (not (= x@130@01 U@191@01)))))
      (or
        (not
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
            (not (= x@130@01 from@84@01))))
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
          (not (= x@130@01 from@84@01))))
      (=>
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 U@191@01)
            (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
        (and
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 U@191@01)
              (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
          (forall ((r $Ref)) (!
            (=>
              (Set_in (inv@212@01 r) g@83@01)
              ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
            :pattern ((inv@212@01 r))
            :qid |quant-u-288|))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
          (or
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
          (=>
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                (not (= to@85@01 y@131@01))))
            (and
              (not
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                  (not (= to@85@01 y@131@01))))
              (=>
                (= from@84@01 w@193@01)
                (and
                  (= from@84@01 w@193@01)
                  (or (= to@85@01 z@194@01) (not (= to@85@01 z@194@01)))))
              (or (= from@84@01 w@193@01) (not (= from@84@01 w@193@01)))))
          (or
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                (not (= to@85@01 y@131@01))))
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
              (not (= to@85@01 y@131@01))))))
      (or
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 U@191@01)
            (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
        (not
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 U@191@01)
              (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|)))
(assert (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
  (and
    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
    (=>
      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
        (=>
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 U@191@01)
              (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (=>
  (= v@133@01 to@85@01)
  (and
    (= v@133@01 to@85@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@198@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
      :pattern ((inv@198@01 r))
      :qid |quant-u-272|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
    (or
      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
      (not
        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
    (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
      (=>
        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
        (and
          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
          (forall ((r $Ref)) (!
            (=>
              (Set_in (inv@205@01 r) g@83@01)
              ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
            :pattern ((inv@205@01 r))
            :qid |quant-u-280|))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
          (or
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
          (=>
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                (not (= x@130@01 from@84@01))))
            (and
              (not
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                  (not (= x@130@01 from@84@01))))
              (=>
                (= x@130@01 U@191@01)
                (and
                  (= x@130@01 U@191@01)
                  (or (= U@191@01 from@84@01) (not (= U@191@01 from@84@01)))))
              (or (= x@130@01 U@191@01) (not (= x@130@01 U@191@01)))))
          (or
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                (not (= x@130@01 from@84@01))))
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
              (not (= x@130@01 from@84@01))))
          (=>
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                (not (= x@130@01 from@84@01)))
              (and
                (= x@130@01 U@191@01)
                (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
            (and
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 U@191@01)
                  (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
              (forall ((r $Ref)) (!
                (=>
                  (Set_in (inv@212@01 r) g@83@01)
                  ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
                :pattern ((inv@212@01 r))
                :qid |quant-u-288|))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
              (or
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
              (=>
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                    (not (= to@85@01 y@131@01))))
                (and
                  (not
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                      (not (= to@85@01 y@131@01))))
                  (=>
                    (= from@84@01 w@193@01)
                    (and
                      (= from@84@01 w@193@01)
                      (or (= to@85@01 z@194@01) (not (= to@85@01 z@194@01)))))
                  (or (= from@84@01 w@193@01) (not (= from@84@01 w@193@01)))))
              (or
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                    (not (= to@85@01 y@131@01))))
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                  (not (= to@85@01 y@131@01))))))
          (or
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                (not (= x@130@01 from@84@01)))
              (and
                (= x@130@01 U@191@01)
                (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
            (not
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 U@191@01)
                  (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|))
    (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
      (and
        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
        (=>
          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
          (and
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
            (=>
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 U@191@01)
                  (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))
(assert (or (= v@133@01 to@85@01) (not (= v@133@01 to@85@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (=>
  (= u@132@01 from@84@01)
  (and
    (= u@132@01 from@84@01)
    (=>
      (= v@133@01 to@85@01)
      (and
        (= v@133@01 to@85@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@198@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
          :pattern ((inv@198@01 r))
          :qid |quant-u-272|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
        (or
          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
          (not
            (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
        (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
          (=>
            (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
            (and
              (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
              (forall ((r $Ref)) (!
                (=>
                  (Set_in (inv@205@01 r) g@83@01)
                  ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
                :pattern ((inv@205@01 r))
                :qid |quant-u-280|))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
              (or
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
              (=>
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                    (not (= x@130@01 from@84@01))))
                (and
                  (not
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                      (not (= x@130@01 from@84@01))))
                  (=>
                    (= x@130@01 U@191@01)
                    (and
                      (= x@130@01 U@191@01)
                      (or (= U@191@01 from@84@01) (not (= U@191@01 from@84@01)))))
                  (or (= x@130@01 U@191@01) (not (= x@130@01 U@191@01)))))
              (or
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                    (not (= x@130@01 from@84@01))))
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                  (not (= x@130@01 from@84@01))))
              (=>
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 U@191@01)
                    (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 U@191@01)
                      (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                  (forall ((r $Ref)) (!
                    (=>
                      (Set_in (inv@212@01 r) g@83@01)
                      ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
                    :pattern ((inv@212@01 r))
                    :qid |quant-u-288|))
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
                  (or
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
                  (=>
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                        (not (= to@85@01 y@131@01))))
                    (and
                      (not
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                          (not (= to@85@01 y@131@01))))
                      (=>
                        (= from@84@01 w@193@01)
                        (and
                          (= from@84@01 w@193@01)
                          (or (= to@85@01 z@194@01) (not (= to@85@01 z@194@01)))))
                      (or (= from@84@01 w@193@01) (not (= from@84@01 w@193@01)))))
                  (or
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                        (not (= to@85@01 y@131@01))))
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                      (not (= to@85@01 y@131@01))))))
              (or
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 U@191@01)
                    (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                (not
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 U@191@01)
                      (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|))
        (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
          (and
            (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
            (=>
              (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
              (and
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                (=>
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 U@191@01)
                      (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))
    (or (= v@133@01 to@85@01) (not (= v@133@01 to@85@01))))))
(assert (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (=>
  (not
    (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
      (and
        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
        (and
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 U@166@01)
              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
              (not (= to@85@01 y@131@01)))
            (and
              (= from@84@01 u@132@01)
              (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
  (and
    (not
      (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
        (and
          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
          (and
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                (not (= x@130@01 from@84@01)))
              (and
                (= x@130@01 U@166@01)
                (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                (not (= to@85@01 y@131@01)))
              (and
                (= from@84@01 u@132@01)
                (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
    (=>
      (= u@132@01 from@84@01)
      (and
        (= u@132@01 from@84@01)
        (=>
          (= v@133@01 to@85@01)
          (and
            (= v@133@01 to@85@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@198@01 r) g@83@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
              :pattern ((inv@198@01 r))
              :qid |quant-u-272|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
            (or
              (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
              (not
                (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
            (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
              (=>
                (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                (and
                  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                  (forall ((r $Ref)) (!
                    (=>
                      (Set_in (inv@205@01 r) g@83@01)
                      ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
                    :pattern ((inv@205@01 r))
                    :qid |quant-u-280|))
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                  (or
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
                  (=>
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                        (not (= x@130@01 from@84@01))))
                    (and
                      (not
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                          (not (= x@130@01 from@84@01))))
                      (=>
                        (= x@130@01 U@191@01)
                        (and
                          (= x@130@01 U@191@01)
                          (or
                            (= U@191@01 from@84@01)
                            (not (= U@191@01 from@84@01)))))
                      (or (= x@130@01 U@191@01) (not (= x@130@01 U@191@01)))))
                  (or
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                        (not (= x@130@01 from@84@01))))
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                      (not (= x@130@01 from@84@01))))
                  (=>
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 U@191@01)
                        (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@191@01)
                          (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                      (forall ((r $Ref)) (!
                        (=>
                          (Set_in (inv@212@01 r) g@83@01)
                          ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
                        :pattern ((inv@212@01 r))
                        :qid |quant-u-288|))
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
                      (or
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
                      (=>
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                            (not (= to@85@01 y@131@01))))
                        (and
                          (not
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                              (not (= to@85@01 y@131@01))))
                          (=>
                            (= from@84@01 w@193@01)
                            (and
                              (= from@84@01 w@193@01)
                              (or
                                (= to@85@01 z@194@01)
                                (not (= to@85@01 z@194@01)))))
                          (or
                            (= from@84@01 w@193@01)
                            (not (= from@84@01 w@193@01)))))
                      (or
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                            (not (= to@85@01 y@131@01))))
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                          (not (= to@85@01 y@131@01))))))
                  (or
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 U@191@01)
                        (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                    (not
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@191@01)
                          (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|))
            (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
              (and
                (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                (=>
                  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                  (and
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                    (=>
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@191@01)
                          (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))
        (or (= v@133@01 to@85@01) (not (= v@133@01 to@85@01)))))
    (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01))))))
(assert (or
  (not
    (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
      (and
        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
        (and
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 U@166@01)
              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
              (not (= to@85@01 y@131@01)))
            (and
              (= from@84@01 u@132@01)
              (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
  (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
    (and
      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
      (and
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 U@166@01)
            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
            (not (= to@85@01 y@131@01)))
          (and
            (= from@84@01 u@132@01)
            (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@83@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@83@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@83@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@83@01)
    (and (= (inv@178@01 n@177@01) n@177@01) (img@179@01 n@177@01)))
  :pattern ((Set_in n@177@01 g@83@01))
  :pattern ((inv@178@01 n@177@01))
  :pattern ((img@179@01 n@177@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@179@01 r) (Set_in (inv@178@01 r) g@83@01)) (= (inv@178@01 r) r))
  :pattern ((inv@178@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)))
    (=>
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 g@83@01)
    (and (= (inv@185@01 n@184@01) n@184@01) (img@186@01 n@184@01)))
  :pattern ((Set_in n@184@01 g@83@01))
  :pattern ((inv@185@01 n@184@01))
  :pattern ((img@186@01 n@184@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@186@01 r) (Set_in (inv@185@01 r) g@83@01)) (= (inv@185@01 r) r))
  :pattern ((inv@185@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)))
    (=>
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (=>
  (not
    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
      (and
        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
        (and
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 u@132@01)
              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
              (not (= to@85@01 y@131@01)))
            (and
              (= from@84@01 w@141@01)
              (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
  (and
    (not
      (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
        (and
          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
          (and
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                (not (= x@130@01 from@84@01)))
              (and
                (= x@130@01 u@132@01)
                (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                (not (= to@85@01 y@131@01)))
              (and
                (= from@84@01 w@141@01)
                (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@171@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
      :pattern ((inv@171@01 r))
      :qid |quant-u-248|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
    (or
      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
      (not
        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))))
    (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
      (=>
        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
        (and
          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
          (forall ((r $Ref)) (!
            (=>
              (Set_in (inv@178@01 r) g@83@01)
              ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
            :pattern ((inv@178@01 r))
            :qid |quant-u-256|))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
          (or
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)))
          (=>
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                (not (= x@130@01 from@84@01))))
            (and
              (not
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                  (not (= x@130@01 from@84@01))))
              (=>
                (= x@130@01 U@166@01)
                (and
                  (= x@130@01 U@166@01)
                  (or (= U@166@01 from@84@01) (not (= U@166@01 from@84@01)))))
              (or (= x@130@01 U@166@01) (not (= x@130@01 U@166@01)))))
          (or
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                (not (= x@130@01 from@84@01))))
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
              (not (= x@130@01 from@84@01))))
          (=>
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                (not (= x@130@01 from@84@01)))
              (and
                (= x@130@01 U@166@01)
                (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
            (and
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 U@166@01)
                  (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
              (forall ((r $Ref)) (!
                (=>
                  (Set_in (inv@185@01 r) g@83@01)
                  ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
                :pattern ((inv@185@01 r))
                :qid |quant-u-264|))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)
              (or
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
              (=>
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                    (not (= to@85@01 y@131@01))))
                (and
                  (not
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                      (not (= to@85@01 y@131@01))))
                  (=>
                    (= from@84@01 u@132@01)
                    (and
                      (= from@84@01 u@132@01)
                      (or (= to@85@01 v@133@01) (not (= to@85@01 v@133@01)))))
                  (or (= from@84@01 u@132@01) (not (= from@84@01 u@132@01)))))
              (or
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                    (not (= to@85@01 y@131@01))))
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                  (not (= to@85@01 y@131@01))))))
          (or
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                (not (= x@130@01 from@84@01)))
              (and
                (= x@130@01 U@166@01)
                (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
            (not
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 U@166@01)
                  (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96-aux|))
    (forall ((U@166@01 $Ref) (V@167@01 $Ref)) (!
      (and
        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
        (=>
          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
          (and
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
            (=>
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 U@166@01)
                  (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
    (=>
      (not
        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
          (and
            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
            (and
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 U@166@01)
                  (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                  (not (= to@85@01 y@131@01)))
                (and
                  (= from@84@01 u@132@01)
                  (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
      (and
        (not
          (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
            (and
              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
              (and
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 U@166@01)
                    (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                    (not (= to@85@01 y@131@01)))
                  (and
                    (= from@84@01 u@132@01)
                    (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
        (=>
          (= u@132@01 from@84@01)
          (and
            (= u@132@01 from@84@01)
            (=>
              (= v@133@01 to@85@01)
              (and
                (= v@133@01 to@85@01)
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@198@01 r) g@83@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
                  :pattern ((inv@198@01 r))
                  :qid |quant-u-272|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                (or
                  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                  (not
                    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
                (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                  (=>
                    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                    (and
                      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                      (forall ((r $Ref)) (!
                        (=>
                          (Set_in (inv@205@01 r) g@83@01)
                          ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
                        :pattern ((inv@205@01 r))
                        :qid |quant-u-280|))
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                      (or
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
                      (=>
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                            (not (= x@130@01 from@84@01))))
                        (and
                          (not
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                              (not (= x@130@01 from@84@01))))
                          (=>
                            (= x@130@01 U@191@01)
                            (and
                              (= x@130@01 U@191@01)
                              (or
                                (= U@191@01 from@84@01)
                                (not (= U@191@01 from@84@01)))))
                          (or (= x@130@01 U@191@01) (not (= x@130@01 U@191@01)))))
                      (or
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                            (not (= x@130@01 from@84@01))))
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                          (not (= x@130@01 from@84@01))))
                      (=>
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@191@01)
                            (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@191@01)
                              (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                          (forall ((r $Ref)) (!
                            (=>
                              (Set_in (inv@212@01 r) g@83@01)
                              ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
                            :pattern ((inv@212@01 r))
                            :qid |quant-u-288|))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
                          (or
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
                          (=>
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                (not (= to@85@01 y@131@01))))
                            (and
                              (not
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                  (not (= to@85@01 y@131@01))))
                              (=>
                                (= from@84@01 w@193@01)
                                (and
                                  (= from@84@01 w@193@01)
                                  (or
                                    (= to@85@01 z@194@01)
                                    (not (= to@85@01 z@194@01)))))
                              (or
                                (= from@84@01 w@193@01)
                                (not (= from@84@01 w@193@01)))))
                          (or
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                (not (= to@85@01 y@131@01))))
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                              (not (= to@85@01 y@131@01))))))
                      (or
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@191@01)
                            (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                        (not
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@191@01)
                              (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|))
                (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                  (and
                    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                    (=>
                      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                      (and
                        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                        (=>
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@191@01)
                              (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))
            (or (= v@133@01 to@85@01) (not (= v@133@01 to@85@01)))))
        (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
    (or
      (not
        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
          (and
            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
            (and
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 U@166@01)
                  (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                  (not (= to@85@01 y@131@01)))
                (and
                  (= from@84@01 u@132@01)
                  (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
      (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
        (and
          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
          (and
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                (not (= x@130@01 from@84@01)))
              (and
                (= x@130@01 U@166@01)
                (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                (not (= to@85@01 y@131@01)))
              (and
                (= from@84@01 u@132@01)
                (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))))))
(assert (or
  (not
    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
      (and
        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
        (and
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
              (not (= x@130@01 from@84@01)))
            (and
              (= x@130@01 u@132@01)
              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
          (or
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
              (not (= to@85@01 y@131@01)))
            (and
              (= from@84@01 w@141@01)
              (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
  (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
    (and
      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
      (and
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
            (not (= x@130@01 from@84@01)))
          (and
            (= x@130@01 u@132@01)
            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
        (or
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
            (not (= to@85@01 y@131@01)))
          (and
            (= from@84@01 w@141@01)
            (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (= x@130@01 from@84@01)
    (and
      (= u@132@01 from@84@01)
      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
  (and
    (= x@130@01 from@84@01)
    (= u@132@01 from@84@01)
    (= y@131@01 to@85@01)
    (= v@133@01 to@85@01))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@83@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@83@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@83@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
(assert (forall ((n@152@01 $Ref)) (!
  (=>
    (Set_in n@152@01 g@83@01)
    (and (= (inv@153@01 n@152@01) n@152@01) (img@154@01 n@152@01)))
  :pattern ((Set_in n@152@01 g@83@01))
  :pattern ((inv@153@01 n@152@01))
  :pattern ((img@154@01 n@152@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@154@01 r) (Set_in (inv@153@01 r) g@83@01)) (= (inv@153@01 r) r))
  :pattern ((inv@153@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)))
    (=>
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@83@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@83@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@83@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@83@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@83@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@83@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@83@01)
    (and (= (inv@178@01 n@177@01) n@177@01) (img@179@01 n@177@01)))
  :pattern ((Set_in n@177@01 g@83@01))
  :pattern ((inv@178@01 n@177@01))
  :pattern ((img@179@01 n@177@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@179@01 r) (Set_in (inv@178@01 r) g@83@01)) (= (inv@178@01 r) r))
  :pattern ((inv@178@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)))
    (=>
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 g@83@01)
    (and (= (inv@185@01 n@184@01) n@184@01) (img@186@01 n@184@01)))
  :pattern ((Set_in n@184@01 g@83@01))
  :pattern ((inv@185@01 n@184@01))
  :pattern ((img@186@01 n@184@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@186@01 r) (Set_in (inv@185@01 r) g@83@01)) (= (inv@185@01 r) r))
  :pattern ((inv@185@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)))
    (=>
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (=>
  (not
    (and
      (= x@130@01 from@84@01)
      (and
        (= u@132@01 from@84@01)
        (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
  (and
    (not
      (and
        (= x@130@01 from@84@01)
        (and
          (= u@132@01 from@84@01)
          (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@146@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
      :pattern ((inv@146@01 r))
      :qid |quant-u-224|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
    (or
      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
      (not
        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))))
    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
      (=>
        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
        (and
          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
          (forall ((r $Ref)) (!
            (=>
              (Set_in (inv@153@01 r) g@83@01)
              ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) r) r))
            :pattern ((inv@153@01 r))
            :qid |quant-u-232|))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
          (or
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)))
          (=>
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                (not (= x@130@01 from@84@01))))
            (and
              (not
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                  (not (= x@130@01 from@84@01))))
              (=>
                (= x@130@01 u@132@01)
                (and
                  (= x@130@01 u@132@01)
                  (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
              (or (= x@130@01 u@132@01) (not (= x@130@01 u@132@01)))))
          (or
            (not
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                (not (= x@130@01 from@84@01))))
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
              (not (= x@130@01 from@84@01))))
          (=>
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                (not (= x@130@01 from@84@01)))
              (and
                (= x@130@01 u@132@01)
                (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
            (and
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 u@132@01)
                  (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
              (forall ((r $Ref)) (!
                (=>
                  (Set_in (inv@160@01 r) g@83@01)
                  ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
                :pattern ((inv@160@01 r))
                :qid |quant-u-240|))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)
              (or
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)))
              (=>
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                    (not (= to@85@01 y@131@01))))
                (and
                  (not
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                      (not (= to@85@01 y@131@01))))
                  (=>
                    (= from@84@01 w@141@01)
                    (and
                      (= from@84@01 w@141@01)
                      (or (= to@85@01 z@142@01) (not (= to@85@01 z@142@01)))))
                  (or (= from@84@01 w@141@01) (not (= from@84@01 w@141@01)))))
              (or
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                    (not (= to@85@01 y@131@01))))
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                  (not (= to@85@01 y@131@01))))))
          (or
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                (not (= x@130@01 from@84@01)))
              (and
                (= x@130@01 u@132@01)
                (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
            (not
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 u@132@01)
                  (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96-aux|))
    (forall ((w@141@01 $Ref) (z@142@01 $Ref)) (!
      (and
        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
        (=>
          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
          (and
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
            (=>
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 u@132@01)
                  (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
    (=>
      (not
        (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
          (and
            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
            (and
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 u@132@01)
                  (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                  (not (= to@85@01 y@131@01)))
                (and
                  (= from@84@01 w@141@01)
                  (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
      (and
        (not
          (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
            (and
              (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
              (and
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 u@132@01)
                    (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                    (not (= to@85@01 y@131@01)))
                  (and
                    (= from@84@01 w@141@01)
                    (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@171@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
          :pattern ((inv@171@01 r))
          :qid |quant-u-248|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
        (or
          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
          (not
            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))))
        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
          (=>
            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
            (and
              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
              (forall ((r $Ref)) (!
                (=>
                  (Set_in (inv@178@01 r) g@83@01)
                  ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
                :pattern ((inv@178@01 r))
                :qid |quant-u-256|))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
              (or
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)))
              (=>
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                    (not (= x@130@01 from@84@01))))
                (and
                  (not
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                      (not (= x@130@01 from@84@01))))
                  (=>
                    (= x@130@01 U@166@01)
                    (and
                      (= x@130@01 U@166@01)
                      (or (= U@166@01 from@84@01) (not (= U@166@01 from@84@01)))))
                  (or (= x@130@01 U@166@01) (not (= x@130@01 U@166@01)))))
              (or
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                    (not (= x@130@01 from@84@01))))
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                  (not (= x@130@01 from@84@01))))
              (=>
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 U@166@01)
                    (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 U@166@01)
                      (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                  (forall ((r $Ref)) (!
                    (=>
                      (Set_in (inv@185@01 r) g@83@01)
                      ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
                    :pattern ((inv@185@01 r))
                    :qid |quant-u-264|))
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)
                  (or
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
                  (=>
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                        (not (= to@85@01 y@131@01))))
                    (and
                      (not
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                          (not (= to@85@01 y@131@01))))
                      (=>
                        (= from@84@01 u@132@01)
                        (and
                          (= from@84@01 u@132@01)
                          (or (= to@85@01 v@133@01) (not (= to@85@01 v@133@01)))))
                      (or (= from@84@01 u@132@01) (not (= from@84@01 u@132@01)))))
                  (or
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                        (not (= to@85@01 y@131@01))))
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                      (not (= to@85@01 y@131@01))))))
              (or
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 U@166@01)
                    (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                (not
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 U@166@01)
                      (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96-aux|))
        (forall ((U@166@01 $Ref) (V@167@01 $Ref)) (!
          (and
            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
            (=>
              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
              (and
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                (=>
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 U@166@01)
                      (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
        (=>
          (not
            (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
              (and
                (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 U@166@01)
                      (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                      (not (= to@85@01 y@131@01)))
                    (and
                      (= from@84@01 u@132@01)
                      (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
          (and
            (not
              (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                (and
                  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 U@166@01)
                        (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 u@132@01)
                        (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
            (=>
              (= u@132@01 from@84@01)
              (and
                (= u@132@01 from@84@01)
                (=>
                  (= v@133@01 to@85@01)
                  (and
                    (= v@133@01 to@85@01)
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@198@01 r) g@83@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
                      :pattern ((inv@198@01 r))
                      :qid |quant-u-272|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                    (or
                      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                      (not
                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
                    (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                      (=>
                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                        (and
                          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                          (forall ((r $Ref)) (!
                            (=>
                              (Set_in (inv@205@01 r) g@83@01)
                              ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
                            :pattern ((inv@205@01 r))
                            :qid |quant-u-280|))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                          (or
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
                          (=>
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                (not (= x@130@01 from@84@01))))
                            (and
                              (not
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                  (not (= x@130@01 from@84@01))))
                              (=>
                                (= x@130@01 U@191@01)
                                (and
                                  (= x@130@01 U@191@01)
                                  (or
                                    (= U@191@01 from@84@01)
                                    (not (= U@191@01 from@84@01)))))
                              (or
                                (= x@130@01 U@191@01)
                                (not (= x@130@01 U@191@01)))))
                          (or
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                (not (= x@130@01 from@84@01))))
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                              (not (= x@130@01 from@84@01))))
                          (=>
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@191@01)
                                (and
                                  (= U@191@01 from@84@01)
                                  (= V@192@01 to@85@01))))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@191@01)
                                  (and
                                    (= U@191@01 from@84@01)
                                    (= V@192@01 to@85@01))))
                              (forall ((r $Ref)) (!
                                (=>
                                  (Set_in (inv@212@01 r) g@83@01)
                                  ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
                                :pattern ((inv@212@01 r))
                                :qid |quant-u-288|))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
                              (or
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
                              (=>
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                    (not (= to@85@01 y@131@01))))
                                (and
                                  (not
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                      (not (= to@85@01 y@131@01))))
                                  (=>
                                    (= from@84@01 w@193@01)
                                    (and
                                      (= from@84@01 w@193@01)
                                      (or
                                        (= to@85@01 z@194@01)
                                        (not (= to@85@01 z@194@01)))))
                                  (or
                                    (= from@84@01 w@193@01)
                                    (not (= from@84@01 w@193@01)))))
                              (or
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                    (not (= to@85@01 y@131@01))))
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                  (not (= to@85@01 y@131@01))))))
                          (or
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@191@01)
                                (and
                                  (= U@191@01 from@84@01)
                                  (= V@192@01 to@85@01))))
                            (not
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@191@01)
                                  (and
                                    (= U@191@01 from@84@01)
                                    (= V@192@01 to@85@01))))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|))
                    (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                      (and
                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                        (=>
                          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                          (and
                            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                            (=>
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@191@01)
                                  (and
                                    (= U@191@01 from@84@01)
                                    (= V@192@01 to@85@01))))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))
                (or (= v@133@01 to@85@01) (not (= v@133@01 to@85@01)))))
            (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
        (or
          (not
            (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
              (and
                (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 U@166@01)
                      (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                      (not (= to@85@01 y@131@01)))
                    (and
                      (= from@84@01 u@132@01)
                      (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
          (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
            (and
              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
              (and
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 U@166@01)
                    (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                    (not (= to@85@01 y@131@01)))
                  (and
                    (= from@84@01 u@132@01)
                    (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))))
    (or
      (not
        (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
          (and
            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
            (and
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 u@132@01)
                  (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                  (not (= to@85@01 y@131@01)))
                (and
                  (= from@84@01 w@141@01)
                  (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
      (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
        (and
          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
          (and
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                (not (= x@130@01 from@84@01)))
              (and
                (= x@130@01 u@132@01)
                (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                (not (= to@85@01 y@131@01)))
              (and
                (= from@84@01 w@141@01)
                (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))))))
(assert (or
  (not
    (and
      (= x@130@01 from@84@01)
      (and
        (= u@132@01 from@84@01)
        (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
  (and
    (= x@130@01 from@84@01)
    (and
      (= u@132@01 from@84@01)
      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@83@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@83@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@83@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
(assert (forall ((n@152@01 $Ref)) (!
  (=>
    (Set_in n@152@01 g@83@01)
    (and (= (inv@153@01 n@152@01) n@152@01) (img@154@01 n@152@01)))
  :pattern ((Set_in n@152@01 g@83@01))
  :pattern ((inv@153@01 n@152@01))
  :pattern ((img@154@01 n@152@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@154@01 r) (Set_in (inv@153@01 r) g@83@01)) (= (inv@153@01 r) r))
  :pattern ((inv@153@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)))
    (=>
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@83@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@83@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@83@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@83@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@83@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@83@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@83@01)
    (and (= (inv@178@01 n@177@01) n@177@01) (img@179@01 n@177@01)))
  :pattern ((Set_in n@177@01 g@83@01))
  :pattern ((inv@178@01 n@177@01))
  :pattern ((img@179@01 n@177@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@179@01 r) (Set_in (inv@178@01 r) g@83@01)) (= (inv@178@01 r) r))
  :pattern ((inv@178@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)))
    (=>
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 g@83@01)
    (and (= (inv@185@01 n@184@01) n@184@01) (img@186@01 n@184@01)))
  :pattern ((Set_in n@184@01 g@83@01))
  :pattern ((inv@185@01 n@184@01))
  :pattern ((img@186@01 n@184@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@186@01 r) (Set_in (inv@185@01 r) g@83@01)) (= (inv@185@01 r) r))
  :pattern ((inv@185@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)))
    (=>
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (=>
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
  (and
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
    (=>
      (= x@130@01 from@84@01)
      (and
        (= x@130@01 from@84@01)
        (=>
          (= u@132@01 from@84@01)
          (and
            (= u@132@01 from@84@01)
            (or (= y@131@01 to@85@01) (not (= y@131@01 to@85@01)))))
        (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
    (or (= x@130@01 from@84@01) (not (= x@130@01 from@84@01)))
    (=>
      (and
        (= x@130@01 from@84@01)
        (and
          (= u@132@01 from@84@01)
          (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
      (and
        (= x@130@01 from@84@01)
        (= u@132@01 from@84@01)
        (= y@131@01 to@85@01)
        (= v@133@01 to@85@01)))
    (=>
      (not
        (and
          (= x@130@01 from@84@01)
          (and
            (= u@132@01 from@84@01)
            (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
      (and
        (not
          (and
            (= x@130@01 from@84@01)
            (and
              (= u@132@01 from@84@01)
              (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@146@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
          :pattern ((inv@146@01 r))
          :qid |quant-u-224|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
        (or
          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
          (not
            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))))
        (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
          (=>
            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
            (and
              (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
              (forall ((r $Ref)) (!
                (=>
                  (Set_in (inv@153@01 r) g@83@01)
                  ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) r) r))
                :pattern ((inv@153@01 r))
                :qid |quant-u-232|))
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
              (or
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)))
              (=>
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                    (not (= x@130@01 from@84@01))))
                (and
                  (not
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                      (not (= x@130@01 from@84@01))))
                  (=>
                    (= x@130@01 u@132@01)
                    (and
                      (= x@130@01 u@132@01)
                      (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
                  (or (= x@130@01 u@132@01) (not (= x@130@01 u@132@01)))))
              (or
                (not
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                    (not (= x@130@01 from@84@01))))
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                  (not (= x@130@01 from@84@01))))
              (=>
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 u@132@01)
                    (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 u@132@01)
                      (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                  (forall ((r $Ref)) (!
                    (=>
                      (Set_in (inv@160@01 r) g@83@01)
                      ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
                    :pattern ((inv@160@01 r))
                    :qid |quant-u-240|))
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)
                  (or
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)))
                  (=>
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                        (not (= to@85@01 y@131@01))))
                    (and
                      (not
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                          (not (= to@85@01 y@131@01))))
                      (=>
                        (= from@84@01 w@141@01)
                        (and
                          (= from@84@01 w@141@01)
                          (or (= to@85@01 z@142@01) (not (= to@85@01 z@142@01)))))
                      (or (= from@84@01 w@141@01) (not (= from@84@01 w@141@01)))))
                  (or
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                        (not (= to@85@01 y@131@01))))
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                      (not (= to@85@01 y@131@01))))))
              (or
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 u@132@01)
                    (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                (not
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 u@132@01)
                      (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96-aux|))
        (forall ((w@141@01 $Ref) (z@142@01 $Ref)) (!
          (and
            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
            (=>
              (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
              (and
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
                (=>
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 u@132@01)
                      (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
        (=>
          (not
            (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
              (and
                (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 u@132@01)
                      (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                      (not (= to@85@01 y@131@01)))
                    (and
                      (= from@84@01 w@141@01)
                      (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
          (and
            (not
              (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                (and
                  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 u@132@01)
                        (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 w@141@01)
                        (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@171@01 r) g@83@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
              :pattern ((inv@171@01 r))
              :qid |quant-u-248|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
            (or
              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
              (not
                (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))))
            (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
              (=>
                (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                (and
                  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                  (forall ((r $Ref)) (!
                    (=>
                      (Set_in (inv@178@01 r) g@83@01)
                      ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
                    :pattern ((inv@178@01 r))
                    :qid |quant-u-256|))
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                  (or
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)))
                  (=>
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                        (not (= x@130@01 from@84@01))))
                    (and
                      (not
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                          (not (= x@130@01 from@84@01))))
                      (=>
                        (= x@130@01 U@166@01)
                        (and
                          (= x@130@01 U@166@01)
                          (or
                            (= U@166@01 from@84@01)
                            (not (= U@166@01 from@84@01)))))
                      (or (= x@130@01 U@166@01) (not (= x@130@01 U@166@01)))))
                  (or
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                        (not (= x@130@01 from@84@01))))
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                      (not (= x@130@01 from@84@01))))
                  (=>
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 U@166@01)
                        (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@166@01)
                          (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                      (forall ((r $Ref)) (!
                        (=>
                          (Set_in (inv@185@01 r) g@83@01)
                          ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
                        :pattern ((inv@185@01 r))
                        :qid |quant-u-264|))
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)
                      (or
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
                      (=>
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                            (not (= to@85@01 y@131@01))))
                        (and
                          (not
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                              (not (= to@85@01 y@131@01))))
                          (=>
                            (= from@84@01 u@132@01)
                            (and
                              (= from@84@01 u@132@01)
                              (or
                                (= to@85@01 v@133@01)
                                (not (= to@85@01 v@133@01)))))
                          (or
                            (= from@84@01 u@132@01)
                            (not (= from@84@01 u@132@01)))))
                      (or
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                            (not (= to@85@01 y@131@01))))
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                          (not (= to@85@01 y@131@01))))))
                  (or
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 U@166@01)
                        (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                    (not
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@166@01)
                          (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96-aux|))
            (forall ((U@166@01 $Ref) (V@167@01 $Ref)) (!
              (and
                (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                (=>
                  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                  (and
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                    (=>
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@166@01)
                          (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
            (=>
              (not
                (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                  (and
                    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@166@01)
                          (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 u@132@01)
                          (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
              (and
                (not
                  (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                    (and
                      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@166@01)
                            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 u@132@01)
                            (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                (=>
                  (= u@132@01 from@84@01)
                  (and
                    (= u@132@01 from@84@01)
                    (=>
                      (= v@133@01 to@85@01)
                      (and
                        (= v@133@01 to@85@01)
                        (forall ((r $Ref)) (!
                          (=>
                            (Set_in (inv@198@01 r) g@83@01)
                            ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
                          :pattern ((inv@198@01 r))
                          :qid |quant-u-272|))
                        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                        (or
                          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                          (not
                            (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
                        (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                          (=>
                            (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                            (and
                              (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                              (forall ((r $Ref)) (!
                                (=>
                                  (Set_in (inv@205@01 r) g@83@01)
                                  ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
                                :pattern ((inv@205@01 r))
                                :qid |quant-u-280|))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                              (or
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
                              (=>
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                    (not (= x@130@01 from@84@01))))
                                (and
                                  (not
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                      (not (= x@130@01 from@84@01))))
                                  (=>
                                    (= x@130@01 U@191@01)
                                    (and
                                      (= x@130@01 U@191@01)
                                      (or
                                        (= U@191@01 from@84@01)
                                        (not (= U@191@01 from@84@01)))))
                                  (or
                                    (= x@130@01 U@191@01)
                                    (not (= x@130@01 U@191@01)))))
                              (or
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                    (not (= x@130@01 from@84@01))))
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                  (not (= x@130@01 from@84@01))))
                              (=>
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@191@01)
                                    (and
                                      (= U@191@01 from@84@01)
                                      (= V@192@01 to@85@01))))
                                (and
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@191@01)
                                      (and
                                        (= U@191@01 from@84@01)
                                        (= V@192@01 to@85@01))))
                                  (forall ((r $Ref)) (!
                                    (=>
                                      (Set_in (inv@212@01 r) g@83@01)
                                      ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
                                    :pattern ((inv@212@01 r))
                                    :qid |quant-u-288|))
                                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
                                  (or
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                    (not
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
                                  (=>
                                    (not
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                        (not (= to@85@01 y@131@01))))
                                    (and
                                      (not
                                        (and
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                          (not (= to@85@01 y@131@01))))
                                      (=>
                                        (= from@84@01 w@193@01)
                                        (and
                                          (= from@84@01 w@193@01)
                                          (or
                                            (= to@85@01 z@194@01)
                                            (not (= to@85@01 z@194@01)))))
                                      (or
                                        (= from@84@01 w@193@01)
                                        (not (= from@84@01 w@193@01)))))
                                  (or
                                    (not
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                        (not (= to@85@01 y@131@01))))
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                      (not (= to@85@01 y@131@01))))))
                              (or
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@191@01)
                                    (and
                                      (= U@191@01 from@84@01)
                                      (= V@192@01 to@85@01))))
                                (not
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@191@01)
                                      (and
                                        (= U@191@01 from@84@01)
                                        (= V@192@01 to@85@01))))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|))
                        (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                          (and
                            (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                            (=>
                              (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                              (and
                                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                                (=>
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@191@01)
                                      (and
                                        (= U@191@01 from@84@01)
                                        (= V@192@01 to@85@01))))
                                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))
                    (or (= v@133@01 to@85@01) (not (= v@133@01 to@85@01)))))
                (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
            (or
              (not
                (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                  (and
                    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@166@01)
                          (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 u@132@01)
                          (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
              (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                (and
                  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 U@166@01)
                        (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 u@132@01)
                        (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))))
        (or
          (not
            (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
              (and
                (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 u@132@01)
                      (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                      (not (= to@85@01 y@131@01)))
                    (and
                      (= from@84@01 w@141@01)
                      (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
          (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
            (and
              (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
              (and
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 u@132@01)
                    (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                    (not (= to@85@01 y@131@01)))
                  (and
                    (= from@84@01 w@141@01)
                    (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))))
    (or
      (not
        (and
          (= x@130@01 from@84@01)
          (and
            (= u@132@01 from@84@01)
            (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
      (and
        (= x@130@01 from@84@01)
        (and
          (= u@132@01 from@84@01)
          (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))))))
(assert (or
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)))
(push) ; 8
; [then-branch: 66 | DEP[Bool]($$(sm@140@01, g@83@01), x@130@01, y@131@01, u@132@01, v@133@01) || x@130@01 == from@84@01 && u@132@01 == from@84@01 && y@131@01 == to@85@01 && v@133@01 == to@85@01 || QE w@141@01,z@142@01 :: QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01)) && DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01 && DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01 || from@84@01 == w@141@01 && to@85@01 == z@142@01 && z@142@01 == y@131@01 || QE U@166@01,V@167@01 :: QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01)) && DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01 && DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01 || from@84@01 == u@132@01 && to@85@01 == v@133@01 && v@133@01 == y@131@01 || u@132@01 == from@84@01 && v@133@01 == to@85@01 && QE U@191@01,V@192@01,w@193@01,z@194@01 :: QA u_@195@01,v_@196@01 :: !(DEP[Bool]($$(sm@203@01, g@83@01), x@130@01, y@131@01, u_@195@01, v_@196@01)) && DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01 || x@130@01 == U@191@01 && U@191@01 == from@84@01 && V@192@01 == to@85@01 && DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01) && to@85@01 != y@131@01 || from@84@01 == w@193@01 && to@85@01 == z@194@01 && z@194@01 == y@131@01 | live]
; [else-branch: 66 | !(DEP[Bool]($$(sm@140@01, g@83@01), x@130@01, y@131@01, u@132@01, v@133@01) || x@130@01 == from@84@01 && u@132@01 == from@84@01 && y@131@01 == to@85@01 && v@133@01 == to@85@01 || QE w@141@01,z@142@01 :: QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01)) && DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01 && DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01 || from@84@01 == w@141@01 && to@85@01 == z@142@01 && z@142@01 == y@131@01 || QE U@166@01,V@167@01 :: QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01)) && DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01 && DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01 || from@84@01 == u@132@01 && to@85@01 == v@133@01 && v@133@01 == y@131@01 || u@132@01 == from@84@01 && v@133@01 == to@85@01 && QE U@191@01,V@192@01,w@193@01,z@194@01 :: QA u_@195@01,v_@196@01 :: !(DEP[Bool]($$(sm@203@01, g@83@01), x@130@01, y@131@01, u_@195@01, v_@196@01)) && DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01 || x@130@01 == U@191@01 && U@191@01 == from@84@01 && V@192@01 == to@85@01 && DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01) && to@85@01 != y@131@01 || from@84@01 == w@193@01 && to@85@01 == z@194@01 && z@194@01 == y@131@01) | live]
(push) ; 9
; [then-branch: 66 | DEP[Bool]($$(sm@140@01, g@83@01), x@130@01, y@131@01, u@132@01, v@133@01) || x@130@01 == from@84@01 && u@132@01 == from@84@01 && y@131@01 == to@85@01 && v@133@01 == to@85@01 || QE w@141@01,z@142@01 :: QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01)) && DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01 && DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01 || from@84@01 == w@141@01 && to@85@01 == z@142@01 && z@142@01 == y@131@01 || QE U@166@01,V@167@01 :: QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01)) && DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01 && DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01 || from@84@01 == u@132@01 && to@85@01 == v@133@01 && v@133@01 == y@131@01 || u@132@01 == from@84@01 && v@133@01 == to@85@01 && QE U@191@01,V@192@01,w@193@01,z@194@01 :: QA u_@195@01,v_@196@01 :: !(DEP[Bool]($$(sm@203@01, g@83@01), x@130@01, y@131@01, u_@195@01, v_@196@01)) && DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01 || x@130@01 == U@191@01 && U@191@01 == from@84@01 && V@192@01 == to@85@01 && DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01) && to@85@01 != y@131@01 || from@84@01 == w@193@01 && to@85@01 == z@194@01 && z@194@01 == y@131@01]
(assert (or
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
  (or
    (and
      (= x@130@01 from@84@01)
      (and
        (= u@132@01 from@84@01)
        (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
    (or
      (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
        (and
          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
          (and
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                (not (= x@130@01 from@84@01)))
              (and
                (= x@130@01 u@132@01)
                (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
            (or
              (and
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                (not (= to@85@01 y@131@01)))
              (and
                (= from@84@01 w@141@01)
                (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
      (or
        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
          (and
            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
            (and
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 U@166@01)
                  (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                  (not (= to@85@01 y@131@01)))
                (and
                  (= from@84@01 u@132@01)
                  (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
        (and
          (= u@132@01 from@84@01)
          (and
            (= v@133@01 to@85@01)
            (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
              (and
                (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 U@191@01)
                      (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                      (not (= to@85@01 y@131@01)))
                    (and
                      (= from@84@01 w@193@01)
                      (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))
; [eval] DEP($$(g), x, y, u, v)
; [eval] $$(g)
(push) ; 10
(declare-const n@218@01 $Ref)
(push) ; 11
; [eval] (n in refs)
(assert (Set_in n@218@01 g@83@01))
(pop) ; 11
(declare-fun inv@219@01 ($Ref) $Ref)
(declare-fun img@220@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@221@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((n1@218@01 $Ref) (n2@218@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@218@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) n1@218@01) n1@218@01))
      (and
        (Set_in n2@218@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) n2@218@01) n2@218@01))
      (= n1@218@01 n2@218@01))
    (= n1@218@01 n2@218@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@83@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@83@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@83@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@219@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
  :pattern ((inv@219@01 r))
  :qid |quant-u-296|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@222@01 ((r $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r) (= r (inv@219@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@223@01 ((r $Ref) (x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r) (= r (inv@219@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@222@01 r x@130@01 y@131@01 u@132@01 v@133@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@222@01 r x@130@01 y@131@01 u@132@01 v@133@01))
    $Perm.No)
  
  :qid |quant-u-298|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r) (= r (inv@219@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@222@01 r x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-299|))))
(check-sat)
; unknown
(pop) ; 11
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (=
  (- $Perm.Write (pTaken@223@01 from@84@01 x@130@01 y@131@01 u@132@01 v@133@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@223@01 r x@130@01 y@131@01 u@132@01 v@133@01) $Perm.No)
  
  :qid |quant-u-301|))))
(check-sat)
; unknown
(pop) ; 11
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r) (= r (inv@219@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@222@01 r x@130@01 y@131@01 u@132@01 v@133@01))
        (pTaken@223@01 r x@130@01 y@131@01 u@132@01 v@133@01))
      $Perm.No))
  
  :qid |quant-u-302|))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@224@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>))))
  :qid |qp.fvfDomDef166|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01))
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@83@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@83@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@83@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@219@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
    :pattern ((inv@219@01 r))
    :qid |quant-u-296|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01)))
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 66 | !(DEP[Bool]($$(sm@140@01, g@83@01), x@130@01, y@131@01, u@132@01, v@133@01) || x@130@01 == from@84@01 && u@132@01 == from@84@01 && y@131@01 == to@85@01 && v@133@01 == to@85@01 || QE w@141@01,z@142@01 :: QA u_@143@01,v_@144@01 :: !(DEP[Bool]($$(sm@151@01, g@83@01), x@130@01, y@131@01, u_@143@01, v_@144@01)) && DEP[Bool]($$(sm@158@01, g@83@01), x@130@01, from@84@01, u@132@01, v@133@01) && x@130@01 != from@84@01 || x@130@01 == u@132@01 && u@132@01 == from@84@01 && v@133@01 == to@85@01 && DEP[Bool]($$(sm@165@01, g@83@01), to@85@01, y@131@01, w@141@01, z@142@01) && to@85@01 != y@131@01 || from@84@01 == w@141@01 && to@85@01 == z@142@01 && z@142@01 == y@131@01 || QE U@166@01,V@167@01 :: QA u_@168@01,v_@169@01 :: !(DEP[Bool]($$(sm@176@01, g@83@01), x@130@01, y@131@01, u_@168@01, v_@169@01)) && DEP[Bool]($$(sm@183@01, g@83@01), x@130@01, from@84@01, U@166@01, V@167@01) && x@130@01 != from@84@01 || x@130@01 == U@166@01 && U@166@01 == from@84@01 && V@167@01 == to@85@01 && DEP[Bool]($$(sm@190@01, g@83@01), to@85@01, y@131@01, u@132@01, v@133@01) && to@85@01 != y@131@01 || from@84@01 == u@132@01 && to@85@01 == v@133@01 && v@133@01 == y@131@01 || u@132@01 == from@84@01 && v@133@01 == to@85@01 && QE U@191@01,V@192@01,w@193@01,z@194@01 :: QA u_@195@01,v_@196@01 :: !(DEP[Bool]($$(sm@203@01, g@83@01), x@130@01, y@131@01, u_@195@01, v_@196@01)) && DEP[Bool]($$(sm@210@01, g@83@01), x@130@01, from@84@01, U@191@01, V@192@01) && x@130@01 != from@84@01 || x@130@01 == U@191@01 && U@191@01 == from@84@01 && V@192@01 == to@85@01 && DEP[Bool]($$(sm@217@01, g@83@01), to@85@01, y@131@01, w@193@01, z@194@01) && to@85@01 != y@131@01 || from@84@01 == w@193@01 && to@85@01 == z@194@01 && z@194@01 == y@131@01)]
(assert (not
  (or
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
    (or
      (and
        (= x@130@01 from@84@01)
        (and
          (= u@132@01 from@84@01)
          (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
      (or
        (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
          (and
            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
            (and
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 u@132@01)
                  (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                  (not (= to@85@01 y@131@01)))
                (and
                  (= from@84@01 w@141@01)
                  (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
        (or
          (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
            (and
              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
              (and
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 U@166@01)
                    (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                    (not (= to@85@01 y@131@01)))
                  (and
                    (= from@84@01 u@132@01)
                    (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
          (and
            (= u@132@01 from@84@01)
            (and
              (= v@133@01 to@85@01)
              (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                (and
                  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 U@191@01)
                        (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 w@193@01)
                        (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@83@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@83@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@83@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (=>
  (or
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
    (or
      (and
        (= x@130@01 from@84@01)
        (and
          (= u@132@01 from@84@01)
          (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
      (or
        (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
          (and
            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
            (and
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 u@132@01)
                  (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                  (not (= to@85@01 y@131@01)))
                (and
                  (= from@84@01 w@141@01)
                  (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
        (or
          (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
            (and
              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
              (and
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 U@166@01)
                    (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                    (not (= to@85@01 y@131@01)))
                  (and
                    (= from@84@01 u@132@01)
                    (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
          (and
            (= u@132@01 from@84@01)
            (and
              (= v@133@01 to@85@01)
              (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                (and
                  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 U@191@01)
                        (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 w@193@01)
                        (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
  (and
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
      (or
        (and
          (= x@130@01 from@84@01)
          (and
            (= u@132@01 from@84@01)
            (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
        (or
          (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
            (and
              (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
              (and
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 u@132@01)
                    (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                    (not (= to@85@01 y@131@01)))
                  (and
                    (= from@84@01 w@141@01)
                    (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
          (or
            (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
              (and
                (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 U@166@01)
                      (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                      (not (= to@85@01 y@131@01)))
                    (and
                      (= from@84@01 u@132@01)
                      (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
            (and
              (= u@132@01 from@84@01)
              (and
                (= v@133@01 to@85@01)
                (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                  (and
                    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@191@01)
                          (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 w@193@01)
                          (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@219@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
      :pattern ((inv@219@01 r))
      :qid |quant-u-296|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01))))
; Joined path conditions
(assert (or
  (not
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
      (or
        (and
          (= x@130@01 from@84@01)
          (and
            (= u@132@01 from@84@01)
            (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
        (or
          (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
            (and
              (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
              (and
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 u@132@01)
                    (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                    (not (= to@85@01 y@131@01)))
                  (and
                    (= from@84@01 w@141@01)
                    (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
          (or
            (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
              (and
                (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 U@166@01)
                      (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                      (not (= to@85@01 y@131@01)))
                    (and
                      (= from@84@01 u@132@01)
                      (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
            (and
              (= u@132@01 from@84@01)
              (and
                (= v@133@01 to@85@01)
                (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                  (and
                    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@191@01)
                          (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 w@193@01)
                          (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))
  (or
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
    (or
      (and
        (= x@130@01 from@84@01)
        (and
          (= u@132@01 from@84@01)
          (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
      (or
        (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
          (and
            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
            (and
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                  (not (= x@130@01 from@84@01)))
                (and
                  (= x@130@01 u@132@01)
                  (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
              (or
                (and
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                  (not (= to@85@01 y@131@01)))
                (and
                  (= from@84@01 w@141@01)
                  (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
        (or
          (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
            (and
              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
              (and
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                    (not (= x@130@01 from@84@01)))
                  (and
                    (= x@130@01 U@166@01)
                    (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                (or
                  (and
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                    (not (= to@85@01 y@131@01)))
                  (and
                    (= from@84@01 u@132@01)
                    (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
          (and
            (= u@132@01 from@84@01)
            (and
              (= v@133@01 to@85@01)
              (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                (and
                  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 U@191@01)
                        (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 w@193@01)
                        (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 26 | !(from@84@01 != to@85@01 && u@132@01 != v@133@01 && x@130@01 != y@131@01)]
(assert (not
  (and
    (not (= from@84@01 to@85@01))
    (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((n@134@01 $Ref)) (!
  (=>
    (Set_in n@134@01 g@83@01)
    (and (= (inv@135@01 n@134@01) n@134@01) (img@136@01 n@134@01)))
  :pattern ((Set_in n@134@01 g@83@01))
  :pattern ((inv@135@01 n@134@01))
  :pattern ((img@136@01 n@134@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@136@01 r) (Set_in (inv@135@01 r) g@83@01)) (= (inv@135@01 r) r))
  :pattern ((inv@135@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>)))
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r)))
    (=>
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r))
      (Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>))))
  :qid |qp.fvfDomDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@140@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@140@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@83@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@83@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@83@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
(assert (forall ((n@152@01 $Ref)) (!
  (=>
    (Set_in n@152@01 g@83@01)
    (and (= (inv@153@01 n@152@01) n@152@01) (img@154@01 n@152@01)))
  :pattern ((Set_in n@152@01 g@83@01))
  :pattern ((inv@153@01 n@152@01))
  :pattern ((img@154@01 n@152@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@154@01 r) (Set_in (inv@153@01 r) g@83@01)) (= (inv@153@01 r) r))
  :pattern ((inv@153@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)))
    (=>
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@83@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@83@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@83@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@83@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@83@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@83@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@83@01)
    (and (= (inv@178@01 n@177@01) n@177@01) (img@179@01 n@177@01)))
  :pattern ((Set_in n@177@01 g@83@01))
  :pattern ((inv@178@01 n@177@01))
  :pattern ((img@179@01 n@177@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@179@01 r) (Set_in (inv@178@01 r) g@83@01)) (= (inv@178@01 r) r))
  :pattern ((inv@178@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)))
    (=>
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 g@83@01)
    (and (= (inv@185@01 n@184@01) n@184@01) (img@186@01 n@184@01)))
  :pattern ((Set_in n@184@01 g@83@01))
  :pattern ((inv@185@01 n@184@01))
  :pattern ((img@186@01 n@184@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@186@01 r) (Set_in (inv@185@01 r) g@83@01)) (= (inv@185@01 r) r))
  :pattern ((inv@185@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)))
    (=>
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@83@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@83@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@83@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (=>
  (and
    (not (= from@84@01 to@85@01))
    (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))
  (and
    (not (= from@84@01 to@85@01))
    (not (= u@132@01 v@133@01))
    (not (= x@130@01 y@131@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@135@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@137@01  $FVF<next>) r) r))
      :pattern ((inv@135@01 r))
      :qid |quant-u-216|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01)
    (=>
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
      (and
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
        (=>
          (= x@130@01 from@84@01)
          (and
            (= x@130@01 from@84@01)
            (=>
              (= u@132@01 from@84@01)
              (and
                (= u@132@01 from@84@01)
                (or (= y@131@01 to@85@01) (not (= y@131@01 to@85@01)))))
            (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
        (or (= x@130@01 from@84@01) (not (= x@130@01 from@84@01)))
        (=>
          (and
            (= x@130@01 from@84@01)
            (and
              (= u@132@01 from@84@01)
              (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
          (and
            (= x@130@01 from@84@01)
            (= u@132@01 from@84@01)
            (= y@131@01 to@85@01)
            (= v@133@01 to@85@01)))
        (=>
          (not
            (and
              (= x@130@01 from@84@01)
              (and
                (= u@132@01 from@84@01)
                (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
          (and
            (not
              (and
                (= x@130@01 from@84@01)
                (and
                  (= u@132@01 from@84@01)
                  (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@146@01 r) g@83@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
              :pattern ((inv@146@01 r))
              :qid |quant-u-224|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
            (or
              (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
              (not
                (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))))
            (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
              (=>
                (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                (and
                  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                  (forall ((r $Ref)) (!
                    (=>
                      (Set_in (inv@153@01 r) g@83@01)
                      ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) r) r))
                    :pattern ((inv@153@01 r))
                    :qid |quant-u-232|))
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
                  (or
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)))
                  (=>
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                        (not (= x@130@01 from@84@01))))
                    (and
                      (not
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01))))
                      (=>
                        (= x@130@01 u@132@01)
                        (and
                          (= x@130@01 u@132@01)
                          (or
                            (= u@132@01 from@84@01)
                            (not (= u@132@01 from@84@01)))))
                      (or (= x@130@01 u@132@01) (not (= x@130@01 u@132@01)))))
                  (or
                    (not
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                        (not (= x@130@01 from@84@01))))
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                      (not (= x@130@01 from@84@01))))
                  (=>
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 u@132@01)
                        (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 u@132@01)
                          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                      (forall ((r $Ref)) (!
                        (=>
                          (Set_in (inv@160@01 r) g@83@01)
                          ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
                        :pattern ((inv@160@01 r))
                        :qid |quant-u-240|))
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)
                      (or
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)))
                      (=>
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                            (not (= to@85@01 y@131@01))))
                        (and
                          (not
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                              (not (= to@85@01 y@131@01))))
                          (=>
                            (= from@84@01 w@141@01)
                            (and
                              (= from@84@01 w@141@01)
                              (or
                                (= to@85@01 z@142@01)
                                (not (= to@85@01 z@142@01)))))
                          (or
                            (= from@84@01 w@141@01)
                            (not (= from@84@01 w@141@01)))))
                      (or
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                            (not (= to@85@01 y@131@01))))
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                          (not (= to@85@01 y@131@01))))))
                  (or
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 u@132@01)
                        (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                    (not
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 u@132@01)
                          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96-aux|))
            (forall ((w@141@01 $Ref) (z@142@01 $Ref)) (!
              (and
                (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                (=>
                  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                  (and
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
                    (=>
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 u@132@01)
                          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
            (=>
              (not
                (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                  (and
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 u@132@01)
                          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 w@141@01)
                          (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
              (and
                (not
                  (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                    (and
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 u@132@01)
                            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 w@141@01)
                            (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@171@01 r) g@83@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
                  :pattern ((inv@171@01 r))
                  :qid |quant-u-248|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
                (or
                  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                  (not
                    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))))
                (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                  (=>
                    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                    (and
                      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                      (forall ((r $Ref)) (!
                        (=>
                          (Set_in (inv@178@01 r) g@83@01)
                          ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
                        :pattern ((inv@178@01 r))
                        :qid |quant-u-256|))
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                      (or
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)))
                      (=>
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not (= x@130@01 from@84@01))))
                        (and
                          (not
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01))))
                          (=>
                            (= x@130@01 U@166@01)
                            (and
                              (= x@130@01 U@166@01)
                              (or
                                (= U@166@01 from@84@01)
                                (not (= U@166@01 from@84@01)))))
                          (or (= x@130@01 U@166@01) (not (= x@130@01 U@166@01)))))
                      (or
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not (= x@130@01 from@84@01))))
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                          (not (= x@130@01 from@84@01))))
                      (=>
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@166@01)
                            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@166@01)
                              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                          (forall ((r $Ref)) (!
                            (=>
                              (Set_in (inv@185@01 r) g@83@01)
                              ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
                            :pattern ((inv@185@01 r))
                            :qid |quant-u-264|))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)
                          (or
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
                          (=>
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                (not (= to@85@01 y@131@01))))
                            (and
                              (not
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                  (not (= to@85@01 y@131@01))))
                              (=>
                                (= from@84@01 u@132@01)
                                (and
                                  (= from@84@01 u@132@01)
                                  (or
                                    (= to@85@01 v@133@01)
                                    (not (= to@85@01 v@133@01)))))
                              (or
                                (= from@84@01 u@132@01)
                                (not (= from@84@01 u@132@01)))))
                          (or
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                (not (= to@85@01 y@131@01))))
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                              (not (= to@85@01 y@131@01))))))
                      (or
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@166@01)
                            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                        (not
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@166@01)
                              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96-aux|))
                (forall ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                  (and
                    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                    (=>
                      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                      (and
                        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                        (=>
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@166@01)
                              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                (=>
                  (not
                    (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                      (and
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@166@01)
                              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 u@132@01)
                              (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                  (and
                    (not
                      (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                        (and
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@166@01)
                                (and
                                  (= U@166@01 from@84@01)
                                  (= V@167@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 u@132@01)
                                (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                    (=>
                      (= u@132@01 from@84@01)
                      (and
                        (= u@132@01 from@84@01)
                        (=>
                          (= v@133@01 to@85@01)
                          (and
                            (= v@133@01 to@85@01)
                            (forall ((r $Ref)) (!
                              (=>
                                (Set_in (inv@198@01 r) g@83@01)
                                ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
                              :pattern ((inv@198@01 r))
                              :qid |quant-u-272|))
                            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                            (or
                              (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                              (not
                                (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                  (not
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
                            (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                              (=>
                                (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                  (not
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                (and
                                  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                    (not
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                  (forall ((r $Ref)) (!
                                    (=>
                                      (Set_in (inv@205@01 r) g@83@01)
                                      ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
                                    :pattern ((inv@205@01 r))
                                    :qid |quant-u-280|))
                                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                                  (or
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                    (not
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
                                  (=>
                                    (not
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                        (not (= x@130@01 from@84@01))))
                                    (and
                                      (not
                                        (and
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                          (not (= x@130@01 from@84@01))))
                                      (=>
                                        (= x@130@01 U@191@01)
                                        (and
                                          (= x@130@01 U@191@01)
                                          (or
                                            (= U@191@01 from@84@01)
                                            (not (= U@191@01 from@84@01)))))
                                      (or
                                        (= x@130@01 U@191@01)
                                        (not (= x@130@01 U@191@01)))))
                                  (or
                                    (not
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                        (not (= x@130@01 from@84@01))))
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                      (not (= x@130@01 from@84@01))))
                                  (=>
                                    (or
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                        (not (= x@130@01 from@84@01)))
                                      (and
                                        (= x@130@01 U@191@01)
                                        (and
                                          (= U@191@01 from@84@01)
                                          (= V@192@01 to@85@01))))
                                    (and
                                      (or
                                        (and
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                          (not (= x@130@01 from@84@01)))
                                        (and
                                          (= x@130@01 U@191@01)
                                          (and
                                            (= U@191@01 from@84@01)
                                            (= V@192@01 to@85@01))))
                                      (forall ((r $Ref)) (!
                                        (=>
                                          (Set_in (inv@212@01 r) g@83@01)
                                          ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
                                        :pattern ((inv@212@01 r))
                                        :qid |quant-u-288|))
                                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
                                      (or
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                        (not
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
                                      (=>
                                        (not
                                          (and
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                            (not (= to@85@01 y@131@01))))
                                        (and
                                          (not
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                              (not (= to@85@01 y@131@01))))
                                          (=>
                                            (= from@84@01 w@193@01)
                                            (and
                                              (= from@84@01 w@193@01)
                                              (or
                                                (= to@85@01 z@194@01)
                                                (not (= to@85@01 z@194@01)))))
                                          (or
                                            (= from@84@01 w@193@01)
                                            (not (= from@84@01 w@193@01)))))
                                      (or
                                        (not
                                          (and
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                            (not (= to@85@01 y@131@01))))
                                        (and
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                          (not (= to@85@01 y@131@01))))))
                                  (or
                                    (or
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                        (not (= x@130@01 from@84@01)))
                                      (and
                                        (= x@130@01 U@191@01)
                                        (and
                                          (= U@191@01 from@84@01)
                                          (= V@192@01 to@85@01))))
                                    (not
                                      (or
                                        (and
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                          (not (= x@130@01 from@84@01)))
                                        (and
                                          (= x@130@01 U@191@01)
                                          (and
                                            (= U@191@01 from@84@01)
                                            (= V@192@01 to@85@01))))))))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|))
                            (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                              (and
                                (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                (=>
                                  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                    (not
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                  (and
                                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                                    (=>
                                      (or
                                        (and
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                          (not (= x@130@01 from@84@01)))
                                        (and
                                          (= x@130@01 U@191@01)
                                          (and
                                            (= U@191@01 from@84@01)
                                            (= V@192@01 to@85@01))))
                                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))
                        (or (= v@133@01 to@85@01) (not (= v@133@01 to@85@01)))))
                    (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
                (or
                  (not
                    (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                      (and
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@166@01)
                              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 u@132@01)
                              (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                  (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                    (and
                      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@166@01)
                            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 u@132@01)
                            (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))))
            (or
              (not
                (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                  (and
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 u@132@01)
                          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 w@141@01)
                          (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
              (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                (and
                  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 u@132@01)
                        (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 w@141@01)
                        (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))))
        (or
          (not
            (and
              (= x@130@01 from@84@01)
              (and
                (= u@132@01 from@84@01)
                (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
          (and
            (= x@130@01 from@84@01)
            (and
              (= u@132@01 from@84@01)
              (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))))
    (or
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
    (=>
      (or
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
        (or
          (and
            (= x@130@01 from@84@01)
            (and
              (= u@132@01 from@84@01)
              (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
          (or
            (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
              (and
                (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 u@132@01)
                      (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                      (not (= to@85@01 y@131@01)))
                    (and
                      (= from@84@01 w@141@01)
                      (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
            (or
              (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                (and
                  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 U@166@01)
                        (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 u@132@01)
                        (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
              (and
                (= u@132@01 from@84@01)
                (and
                  (= v@133@01 to@85@01)
                  (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                    (and
                      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@191@01)
                            (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 w@193@01)
                            (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
      (and
        (or
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
          (or
            (and
              (= x@130@01 from@84@01)
              (and
                (= u@132@01 from@84@01)
                (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
            (or
              (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                (and
                  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 u@132@01)
                        (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 w@141@01)
                        (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
              (or
                (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                  (and
                    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@166@01)
                          (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 u@132@01)
                          (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                (and
                  (= u@132@01 from@84@01)
                  (and
                    (= v@133@01 to@85@01)
                    (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                      (and
                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@191@01)
                              (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 w@193@01)
                              (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@219@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
          :pattern ((inv@219@01 r))
          :qid |quant-u-296|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01)))
    (or
      (not
        (or
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
          (or
            (and
              (= x@130@01 from@84@01)
              (and
                (= u@132@01 from@84@01)
                (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
            (or
              (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                (and
                  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 u@132@01)
                        (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 w@141@01)
                        (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
              (or
                (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                  (and
                    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@166@01)
                          (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 u@132@01)
                          (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                (and
                  (= u@132@01 from@84@01)
                  (and
                    (= v@133@01 to@85@01)
                    (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                      (and
                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@191@01)
                              (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 w@193@01)
                              (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))
      (or
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
        (or
          (and
            (= x@130@01 from@84@01)
            (and
              (= u@132@01 from@84@01)
              (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
          (or
            (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
              (and
                (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                  (not
                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                (and
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                      (not (= x@130@01 from@84@01)))
                    (and
                      (= x@130@01 u@132@01)
                      (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                  (or
                    (and
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                      (not (= to@85@01 y@131@01)))
                    (and
                      (= from@84@01 w@141@01)
                      (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
            (or
              (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                (and
                  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 U@166@01)
                        (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 u@132@01)
                        (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
              (and
                (= u@132@01 from@84@01)
                (and
                  (= v@133@01 to@85@01)
                  (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                    (and
                      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@191@01)
                            (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 w@193@01)
                            (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not (= from@84@01 to@85@01))
      (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01)))))
  (and
    (not (= from@84@01 to@85@01))
    (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((n@134@01 $Ref)) (!
  (=>
    (Set_in n@134@01 g@83@01)
    (and (= (inv@135@01 n@134@01) n@134@01) (img@136@01 n@134@01)))
  :pattern ((Set_in n@134@01 g@83@01))
  :pattern ((inv@135@01 n@134@01))
  :pattern ((img@136@01 n@134@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@136@01 r) (Set_in (inv@135@01 r) g@83@01)) (= (inv@135@01 r) r))
  :pattern ((inv@135@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>)))
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r)))
    (=>
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r))
      (Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>))))
  :qid |qp.fvfDomDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@140@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@140@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@83@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@83@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@83@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
(assert (forall ((n@152@01 $Ref)) (!
  (=>
    (Set_in n@152@01 g@83@01)
    (and (= (inv@153@01 n@152@01) n@152@01) (img@154@01 n@152@01)))
  :pattern ((Set_in n@152@01 g@83@01))
  :pattern ((inv@153@01 n@152@01))
  :pattern ((img@154@01 n@152@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@154@01 r) (Set_in (inv@153@01 r) g@83@01)) (= (inv@153@01 r) r))
  :pattern ((inv@153@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)))
    (=>
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@83@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@83@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@83@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@83@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@83@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@83@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@83@01)
    (and (= (inv@178@01 n@177@01) n@177@01) (img@179@01 n@177@01)))
  :pattern ((Set_in n@177@01 g@83@01))
  :pattern ((inv@178@01 n@177@01))
  :pattern ((img@179@01 n@177@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@179@01 r) (Set_in (inv@178@01 r) g@83@01)) (= (inv@178@01 r) r))
  :pattern ((inv@178@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)))
    (=>
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 g@83@01)
    (and (= (inv@185@01 n@184@01) n@184@01) (img@186@01 n@184@01)))
  :pattern ((Set_in n@184@01 g@83@01))
  :pattern ((inv@185@01 n@184@01))
  :pattern ((img@186@01 n@184@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@186@01 r) (Set_in (inv@185@01 r) g@83@01)) (= (inv@185@01 r) r))
  :pattern ((inv@185@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)))
    (=>
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@83@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@83@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@83@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (or (not (= from@84@01 to@85@01)) (= from@84@01 to@85@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) (!
  (and
    (=>
      (not (= from@84@01 to@85@01))
      (and
        (not (= from@84@01 to@85@01))
        (or (not (= u@132@01 v@133@01)) (= u@132@01 v@133@01))))
    (=>
      (and
        (not (= from@84@01 to@85@01))
        (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))
      (and
        (not (= from@84@01 to@85@01))
        (not (= u@132@01 v@133@01))
        (not (= x@130@01 y@131@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@135@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@137@01  $FVF<next>) r) r))
          :pattern ((inv@135@01 r))
          :qid |quant-u-216|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01)
        (=>
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
          (and
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
            (=>
              (= x@130@01 from@84@01)
              (and
                (= x@130@01 from@84@01)
                (=>
                  (= u@132@01 from@84@01)
                  (and
                    (= u@132@01 from@84@01)
                    (or (= y@131@01 to@85@01) (not (= y@131@01 to@85@01)))))
                (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
            (or (= x@130@01 from@84@01) (not (= x@130@01 from@84@01)))
            (=>
              (and
                (= x@130@01 from@84@01)
                (and
                  (= u@132@01 from@84@01)
                  (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
              (and
                (= x@130@01 from@84@01)
                (= u@132@01 from@84@01)
                (= y@131@01 to@85@01)
                (= v@133@01 to@85@01)))
            (=>
              (not
                (and
                  (= x@130@01 from@84@01)
                  (and
                    (= u@132@01 from@84@01)
                    (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
              (and
                (not
                  (and
                    (= x@130@01 from@84@01)
                    (and
                      (= u@132@01 from@84@01)
                      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@146@01 r) g@83@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
                  :pattern ((inv@146@01 r))
                  :qid |quant-u-224|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
                (or
                  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                  (not
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))))
                (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                  (=>
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                    (and
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (forall ((r $Ref)) (!
                        (=>
                          (Set_in (inv@153@01 r) g@83@01)
                          ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) r) r))
                        :pattern ((inv@153@01 r))
                        :qid |quant-u-232|))
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
                      (or
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)))
                      (=>
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01))))
                        (and
                          (not
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01))))
                          (=>
                            (= x@130@01 u@132@01)
                            (and
                              (= x@130@01 u@132@01)
                              (or
                                (= u@132@01 from@84@01)
                                (not (= u@132@01 from@84@01)))))
                          (or (= x@130@01 u@132@01) (not (= x@130@01 u@132@01)))))
                      (or
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01))))
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01))))
                      (=>
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 u@132@01)
                            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          (forall ((r $Ref)) (!
                            (=>
                              (Set_in (inv@160@01 r) g@83@01)
                              ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
                            :pattern ((inv@160@01 r))
                            :qid |quant-u-240|))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)
                          (or
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)))
                          (=>
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01))))
                            (and
                              (not
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                  (not (= to@85@01 y@131@01))))
                              (=>
                                (= from@84@01 w@141@01)
                                (and
                                  (= from@84@01 w@141@01)
                                  (or
                                    (= to@85@01 z@142@01)
                                    (not (= to@85@01 z@142@01)))))
                              (or
                                (= from@84@01 w@141@01)
                                (not (= from@84@01 w@141@01)))))
                          (or
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01))))
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                              (not (= to@85@01 y@131@01))))))
                      (or
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 u@132@01)
                            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                        (not
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96-aux|))
                (forall ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                  (and
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                    (=>
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (and
                        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
                        (=>
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                (=>
                  (not
                    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (and
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 w@141@01)
                              (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                  (and
                    (not
                      (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                        (and
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@141@01)
                                (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@171@01 r) g@83@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
                      :pattern ((inv@171@01 r))
                      :qid |quant-u-248|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
                    (or
                      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                      (not
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))))
                    (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                      (=>
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                        (and
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (forall ((r $Ref)) (!
                            (=>
                              (Set_in (inv@178@01 r) g@83@01)
                              ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
                            :pattern ((inv@178@01 r))
                            :qid |quant-u-256|))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                          (or
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)))
                          (=>
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01))))
                            (and
                              (not
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01))))
                              (=>
                                (= x@130@01 U@166@01)
                                (and
                                  (= x@130@01 U@166@01)
                                  (or
                                    (= U@166@01 from@84@01)
                                    (not (= U@166@01 from@84@01)))))
                              (or
                                (= x@130@01 U@166@01)
                                (not (= x@130@01 U@166@01)))))
                          (or
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01))))
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01))))
                          (=>
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@166@01)
                                (and
                                  (= U@166@01 from@84@01)
                                  (= V@167@01 to@85@01))))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              (forall ((r $Ref)) (!
                                (=>
                                  (Set_in (inv@185@01 r) g@83@01)
                                  ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
                                :pattern ((inv@185@01 r))
                                :qid |quant-u-264|))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)
                              (or
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
                              (=>
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                    (not (= to@85@01 y@131@01))))
                                (and
                                  (not
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                      (not (= to@85@01 y@131@01))))
                                  (=>
                                    (= from@84@01 u@132@01)
                                    (and
                                      (= from@84@01 u@132@01)
                                      (or
                                        (= to@85@01 v@133@01)
                                        (not (= to@85@01 v@133@01)))))
                                  (or
                                    (= from@84@01 u@132@01)
                                    (not (= from@84@01 u@132@01)))))
                              (or
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                    (not (= to@85@01 y@131@01))))
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                  (not (= to@85@01 y@131@01))))))
                          (or
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@166@01)
                                (and
                                  (= U@166@01 from@84@01)
                                  (= V@167@01 to@85@01))))
                            (not
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96-aux|))
                    (forall ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                      (and
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                        (=>
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (and
                            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                            (=>
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                    (=>
                      (not
                        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (and
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 u@132@01)
                                  (and
                                    (= to@85@01 v@133@01)
                                    (= v@133@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                      (and
                        (not
                          (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                            (and
                              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                              (and
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@166@01)
                                    (and
                                      (= U@166@01 from@84@01)
                                      (= V@167@01 to@85@01))))
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                    (not (= to@85@01 y@131@01)))
                                  (and
                                    (= from@84@01 u@132@01)
                                    (and
                                      (= to@85@01 v@133@01)
                                      (= v@133@01 y@131@01))))))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                        (=>
                          (= u@132@01 from@84@01)
                          (and
                            (= u@132@01 from@84@01)
                            (=>
                              (= v@133@01 to@85@01)
                              (and
                                (= v@133@01 to@85@01)
                                (forall ((r $Ref)) (!
                                  (=>
                                    (Set_in (inv@198@01 r) g@83@01)
                                    ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
                                  :pattern ((inv@198@01 r))
                                  :qid |quant-u-272|))
                                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                                (or
                                  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                    (not
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                  (not
                                    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                      (not
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
                                (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                                  (=>
                                    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                      (not
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                    (and
                                      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                        (not
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                      (forall ((r $Ref)) (!
                                        (=>
                                          (Set_in (inv@205@01 r) g@83@01)
                                          ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
                                        :pattern ((inv@205@01 r))
                                        :qid |quant-u-280|))
                                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                                      (or
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                        (not
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
                                      (=>
                                        (not
                                          (and
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                            (not (= x@130@01 from@84@01))))
                                        (and
                                          (not
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                              (not (= x@130@01 from@84@01))))
                                          (=>
                                            (= x@130@01 U@191@01)
                                            (and
                                              (= x@130@01 U@191@01)
                                              (or
                                                (= U@191@01 from@84@01)
                                                (not (= U@191@01 from@84@01)))))
                                          (or
                                            (= x@130@01 U@191@01)
                                            (not (= x@130@01 U@191@01)))))
                                      (or
                                        (not
                                          (and
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                            (not (= x@130@01 from@84@01))))
                                        (and
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                          (not (= x@130@01 from@84@01))))
                                      (=>
                                        (or
                                          (and
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                            (not (= x@130@01 from@84@01)))
                                          (and
                                            (= x@130@01 U@191@01)
                                            (and
                                              (= U@191@01 from@84@01)
                                              (= V@192@01 to@85@01))))
                                        (and
                                          (or
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                              (not (= x@130@01 from@84@01)))
                                            (and
                                              (= x@130@01 U@191@01)
                                              (and
                                                (= U@191@01 from@84@01)
                                                (= V@192@01 to@85@01))))
                                          (forall ((r $Ref)) (!
                                            (=>
                                              (Set_in (inv@212@01 r) g@83@01)
                                              ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
                                            :pattern ((inv@212@01 r))
                                            :qid |quant-u-288|))
                                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
                                          (or
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                            (not
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
                                          (=>
                                            (not
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                (not (= to@85@01 y@131@01))))
                                            (and
                                              (not
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                  (not (= to@85@01 y@131@01))))
                                              (=>
                                                (= from@84@01 w@193@01)
                                                (and
                                                  (= from@84@01 w@193@01)
                                                  (or
                                                    (= to@85@01 z@194@01)
                                                    (not (= to@85@01 z@194@01)))))
                                              (or
                                                (= from@84@01 w@193@01)
                                                (not (= from@84@01 w@193@01)))))
                                          (or
                                            (not
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                (not (= to@85@01 y@131@01))))
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                              (not (= to@85@01 y@131@01))))))
                                      (or
                                        (or
                                          (and
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                            (not (= x@130@01 from@84@01)))
                                          (and
                                            (= x@130@01 U@191@01)
                                            (and
                                              (= U@191@01 from@84@01)
                                              (= V@192@01 to@85@01))))
                                        (not
                                          (or
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                              (not (= x@130@01 from@84@01)))
                                            (and
                                              (= x@130@01 U@191@01)
                                              (and
                                                (= U@191@01 from@84@01)
                                                (= V@192@01 to@85@01))))))))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|))
                                (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                                  (and
                                    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                    (=>
                                      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                        (not
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                      (and
                                        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                                        (=>
                                          (or
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                              (not (= x@130@01 from@84@01)))
                                            (and
                                              (= x@130@01 U@191@01)
                                              (and
                                                (= U@191@01 from@84@01)
                                                (= V@192@01 to@85@01))))
                                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))
                            (or
                              (= v@133@01 to@85@01)
                              (not (= v@133@01 to@85@01)))))
                        (or
                          (= u@132@01 from@84@01)
                          (not (= u@132@01 from@84@01)))))
                    (or
                      (not
                        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (and
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 u@132@01)
                                  (and
                                    (= to@85@01 v@133@01)
                                    (= v@133@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                      (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                        (and
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@166@01)
                                (and
                                  (= U@166@01 from@84@01)
                                  (= V@167@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 u@132@01)
                                (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))))
                (or
                  (not
                    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (and
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 w@141@01)
                              (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                  (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                    (and
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 u@132@01)
                            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 w@141@01)
                            (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))))
            (or
              (not
                (and
                  (= x@130@01 from@84@01)
                  (and
                    (= u@132@01 from@84@01)
                    (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
              (and
                (= x@130@01 from@84@01)
                (and
                  (= u@132@01 from@84@01)
                  (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))))
        (or
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
        (=>
          (or
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
            (or
              (and
                (= x@130@01 from@84@01)
                (and
                  (= u@132@01 from@84@01)
                  (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
              (or
                (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                  (and
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 u@132@01)
                          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 w@141@01)
                          (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                (or
                  (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                    (and
                      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@166@01)
                            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 u@132@01)
                            (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                  (and
                    (= u@132@01 from@84@01)
                    (and
                      (= v@133@01 to@85@01)
                      (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                        (and
                          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@191@01)
                                (and
                                  (= U@191@01 from@84@01)
                                  (= V@192@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@193@01)
                                (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
          (and
            (or
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
              (or
                (and
                  (= x@130@01 from@84@01)
                  (and
                    (= u@132@01 from@84@01)
                    (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                (or
                  (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                    (and
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 u@132@01)
                            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 w@141@01)
                            (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                  (or
                    (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                      (and
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@166@01)
                              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 u@132@01)
                              (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                    (and
                      (= u@132@01 from@84@01)
                      (and
                        (= v@133@01 to@85@01)
                        (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                          (and
                            (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@191@01)
                                  (and
                                    (= U@191@01 from@84@01)
                                    (= V@192@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 w@193@01)
                                  (and
                                    (= to@85@01 z@194@01)
                                    (= z@194@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@219@01 r) g@83@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
              :pattern ((inv@219@01 r))
              :qid |quant-u-296|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01)))
        (or
          (not
            (or
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
              (or
                (and
                  (= x@130@01 from@84@01)
                  (and
                    (= u@132@01 from@84@01)
                    (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                (or
                  (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                    (and
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 u@132@01)
                            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 w@141@01)
                            (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                  (or
                    (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                      (and
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@166@01)
                              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 u@132@01)
                              (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                    (and
                      (= u@132@01 from@84@01)
                      (and
                        (= v@133@01 to@85@01)
                        (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                          (and
                            (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@191@01)
                                  (and
                                    (= U@191@01 from@84@01)
                                    (= V@192@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 w@193@01)
                                  (and
                                    (= to@85@01 z@194@01)
                                    (= z@194@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))
          (or
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
            (or
              (and
                (= x@130@01 from@84@01)
                (and
                  (= u@132@01 from@84@01)
                  (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
              (or
                (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                  (and
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 u@132@01)
                          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 w@141@01)
                          (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                (or
                  (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                    (and
                      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@166@01)
                            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 u@132@01)
                            (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                  (and
                    (= u@132@01 from@84@01)
                    (and
                      (= v@133@01 to@85@01)
                      (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                        (and
                          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@191@01)
                                (and
                                  (= U@191@01 from@84@01)
                                  (= V@192@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@193@01)
                                (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))))
    (or
      (not
        (and
          (not (= from@84@01 to@85@01))
          (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01)))))
      (and
        (not (= from@84@01 to@85@01))
        (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@485@13@495@57-aux|)))
(assert (forall ((x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) (!
  (and
    (=>
      (not (= from@84@01 to@85@01))
      (and
        (not (= from@84@01 to@85@01))
        (or (not (= u@132@01 v@133@01)) (= u@132@01 v@133@01))))
    (=>
      (and
        (not (= from@84@01 to@85@01))
        (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))
      (and
        (not (= from@84@01 to@85@01))
        (not (= u@132@01 v@133@01))
        (not (= x@130@01 y@131@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@135@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@137@01  $FVF<next>) r) r))
          :pattern ((inv@135@01 r))
          :qid |quant-u-216|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01)
        (=>
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
          (and
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
            (=>
              (= x@130@01 from@84@01)
              (and
                (= x@130@01 from@84@01)
                (=>
                  (= u@132@01 from@84@01)
                  (and
                    (= u@132@01 from@84@01)
                    (or (= y@131@01 to@85@01) (not (= y@131@01 to@85@01)))))
                (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
            (or (= x@130@01 from@84@01) (not (= x@130@01 from@84@01)))
            (=>
              (and
                (= x@130@01 from@84@01)
                (and
                  (= u@132@01 from@84@01)
                  (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
              (and
                (= x@130@01 from@84@01)
                (= u@132@01 from@84@01)
                (= y@131@01 to@85@01)
                (= v@133@01 to@85@01)))
            (=>
              (not
                (and
                  (= x@130@01 from@84@01)
                  (and
                    (= u@132@01 from@84@01)
                    (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
              (and
                (not
                  (and
                    (= x@130@01 from@84@01)
                    (and
                      (= u@132@01 from@84@01)
                      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@146@01 r) g@83@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
                  :pattern ((inv@146@01 r))
                  :qid |quant-u-224|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
                (or
                  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                  (not
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))))
                (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                  (=>
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                    (and
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (forall ((r $Ref)) (!
                        (=>
                          (Set_in (inv@153@01 r) g@83@01)
                          ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) r) r))
                        :pattern ((inv@153@01 r))
                        :qid |quant-u-232|))
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
                      (or
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)))
                      (=>
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01))))
                        (and
                          (not
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01))))
                          (=>
                            (= x@130@01 u@132@01)
                            (and
                              (= x@130@01 u@132@01)
                              (or
                                (= u@132@01 from@84@01)
                                (not (= u@132@01 from@84@01)))))
                          (or (= x@130@01 u@132@01) (not (= x@130@01 u@132@01)))))
                      (or
                        (not
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01))))
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01))))
                      (=>
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 u@132@01)
                            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          (forall ((r $Ref)) (!
                            (=>
                              (Set_in (inv@160@01 r) g@83@01)
                              ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
                            :pattern ((inv@160@01 r))
                            :qid |quant-u-240|))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)
                          (or
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)))
                          (=>
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01))))
                            (and
                              (not
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                  (not (= to@85@01 y@131@01))))
                              (=>
                                (= from@84@01 w@141@01)
                                (and
                                  (= from@84@01 w@141@01)
                                  (or
                                    (= to@85@01 z@142@01)
                                    (not (= to@85@01 z@142@01)))))
                              (or
                                (= from@84@01 w@141@01)
                                (not (= from@84@01 w@141@01)))))
                          (or
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01))))
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                              (not (= to@85@01 y@131@01))))))
                      (or
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 u@132@01)
                            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                        (not
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96-aux|))
                (forall ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                  (and
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                    (=>
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (and
                        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
                        (=>
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                (=>
                  (not
                    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (and
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 w@141@01)
                              (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                  (and
                    (not
                      (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                        (and
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@141@01)
                                (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@171@01 r) g@83@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
                      :pattern ((inv@171@01 r))
                      :qid |quant-u-248|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
                    (or
                      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                      (not
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))))
                    (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                      (=>
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                        (and
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (forall ((r $Ref)) (!
                            (=>
                              (Set_in (inv@178@01 r) g@83@01)
                              ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
                            :pattern ((inv@178@01 r))
                            :qid |quant-u-256|))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                          (or
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)))
                          (=>
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01))))
                            (and
                              (not
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01))))
                              (=>
                                (= x@130@01 U@166@01)
                                (and
                                  (= x@130@01 U@166@01)
                                  (or
                                    (= U@166@01 from@84@01)
                                    (not (= U@166@01 from@84@01)))))
                              (or
                                (= x@130@01 U@166@01)
                                (not (= x@130@01 U@166@01)))))
                          (or
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01))))
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01))))
                          (=>
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@166@01)
                                (and
                                  (= U@166@01 from@84@01)
                                  (= V@167@01 to@85@01))))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              (forall ((r $Ref)) (!
                                (=>
                                  (Set_in (inv@185@01 r) g@83@01)
                                  ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
                                :pattern ((inv@185@01 r))
                                :qid |quant-u-264|))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)
                              (or
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
                              (=>
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                    (not (= to@85@01 y@131@01))))
                                (and
                                  (not
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                      (not (= to@85@01 y@131@01))))
                                  (=>
                                    (= from@84@01 u@132@01)
                                    (and
                                      (= from@84@01 u@132@01)
                                      (or
                                        (= to@85@01 v@133@01)
                                        (not (= to@85@01 v@133@01)))))
                                  (or
                                    (= from@84@01 u@132@01)
                                    (not (= from@84@01 u@132@01)))))
                              (or
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                    (not (= to@85@01 y@131@01))))
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                  (not (= to@85@01 y@131@01))))))
                          (or
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@166@01)
                                (and
                                  (= U@166@01 from@84@01)
                                  (= V@167@01 to@85@01))))
                            (not
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96-aux|))
                    (forall ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                      (and
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                        (=>
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (and
                            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                            (=>
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                    (=>
                      (not
                        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (and
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 u@132@01)
                                  (and
                                    (= to@85@01 v@133@01)
                                    (= v@133@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                      (and
                        (not
                          (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                            (and
                              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                              (and
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@166@01)
                                    (and
                                      (= U@166@01 from@84@01)
                                      (= V@167@01 to@85@01))))
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                    (not (= to@85@01 y@131@01)))
                                  (and
                                    (= from@84@01 u@132@01)
                                    (and
                                      (= to@85@01 v@133@01)
                                      (= v@133@01 y@131@01))))))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                        (=>
                          (= u@132@01 from@84@01)
                          (and
                            (= u@132@01 from@84@01)
                            (=>
                              (= v@133@01 to@85@01)
                              (and
                                (= v@133@01 to@85@01)
                                (forall ((r $Ref)) (!
                                  (=>
                                    (Set_in (inv@198@01 r) g@83@01)
                                    ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
                                  :pattern ((inv@198@01 r))
                                  :qid |quant-u-272|))
                                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                                (or
                                  (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                    (not
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                  (not
                                    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                      (not
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
                                (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                                  (=>
                                    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                      (not
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                    (and
                                      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                        (not
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                      (forall ((r $Ref)) (!
                                        (=>
                                          (Set_in (inv@205@01 r) g@83@01)
                                          ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
                                        :pattern ((inv@205@01 r))
                                        :qid |quant-u-280|))
                                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                                      (or
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                        (not
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
                                      (=>
                                        (not
                                          (and
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                            (not (= x@130@01 from@84@01))))
                                        (and
                                          (not
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                              (not (= x@130@01 from@84@01))))
                                          (=>
                                            (= x@130@01 U@191@01)
                                            (and
                                              (= x@130@01 U@191@01)
                                              (or
                                                (= U@191@01 from@84@01)
                                                (not (= U@191@01 from@84@01)))))
                                          (or
                                            (= x@130@01 U@191@01)
                                            (not (= x@130@01 U@191@01)))))
                                      (or
                                        (not
                                          (and
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                            (not (= x@130@01 from@84@01))))
                                        (and
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                          (not (= x@130@01 from@84@01))))
                                      (=>
                                        (or
                                          (and
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                            (not (= x@130@01 from@84@01)))
                                          (and
                                            (= x@130@01 U@191@01)
                                            (and
                                              (= U@191@01 from@84@01)
                                              (= V@192@01 to@85@01))))
                                        (and
                                          (or
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                              (not (= x@130@01 from@84@01)))
                                            (and
                                              (= x@130@01 U@191@01)
                                              (and
                                                (= U@191@01 from@84@01)
                                                (= V@192@01 to@85@01))))
                                          (forall ((r $Ref)) (!
                                            (=>
                                              (Set_in (inv@212@01 r) g@83@01)
                                              ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
                                            :pattern ((inv@212@01 r))
                                            :qid |quant-u-288|))
                                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
                                          (or
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                            (not
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
                                          (=>
                                            (not
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                (not (= to@85@01 y@131@01))))
                                            (and
                                              (not
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                  (not (= to@85@01 y@131@01))))
                                              (=>
                                                (= from@84@01 w@193@01)
                                                (and
                                                  (= from@84@01 w@193@01)
                                                  (or
                                                    (= to@85@01 z@194@01)
                                                    (not (= to@85@01 z@194@01)))))
                                              (or
                                                (= from@84@01 w@193@01)
                                                (not (= from@84@01 w@193@01)))))
                                          (or
                                            (not
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                (not (= to@85@01 y@131@01))))
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                              (not (= to@85@01 y@131@01))))))
                                      (or
                                        (or
                                          (and
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                            (not (= x@130@01 from@84@01)))
                                          (and
                                            (= x@130@01 U@191@01)
                                            (and
                                              (= U@191@01 from@84@01)
                                              (= V@192@01 to@85@01))))
                                        (not
                                          (or
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                              (not (= x@130@01 from@84@01)))
                                            (and
                                              (= x@130@01 U@191@01)
                                              (and
                                                (= U@191@01 from@84@01)
                                                (= V@192@01 to@85@01))))))))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|))
                                (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                                  (and
                                    (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                    (=>
                                      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                        (not
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                      (and
                                        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                                        (=>
                                          (or
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                              (not (= x@130@01 from@84@01)))
                                            (and
                                              (= x@130@01 U@191@01)
                                              (and
                                                (= U@191@01 from@84@01)
                                                (= V@192@01 to@85@01))))
                                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))
                            (or
                              (= v@133@01 to@85@01)
                              (not (= v@133@01 to@85@01)))))
                        (or
                          (= u@132@01 from@84@01)
                          (not (= u@132@01 from@84@01)))))
                    (or
                      (not
                        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (and
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 u@132@01)
                                  (and
                                    (= to@85@01 v@133@01)
                                    (= v@133@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                      (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                        (and
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@166@01)
                                (and
                                  (= U@166@01 from@84@01)
                                  (= V@167@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 u@132@01)
                                (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))))
                (or
                  (not
                    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (and
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 w@141@01)
                              (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                  (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                    (and
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 u@132@01)
                            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 w@141@01)
                            (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))))
            (or
              (not
                (and
                  (= x@130@01 from@84@01)
                  (and
                    (= u@132@01 from@84@01)
                    (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
              (and
                (= x@130@01 from@84@01)
                (and
                  (= u@132@01 from@84@01)
                  (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))))
        (or
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
        (=>
          (or
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
            (or
              (and
                (= x@130@01 from@84@01)
                (and
                  (= u@132@01 from@84@01)
                  (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
              (or
                (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                  (and
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 u@132@01)
                          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 w@141@01)
                          (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                (or
                  (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                    (and
                      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@166@01)
                            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 u@132@01)
                            (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                  (and
                    (= u@132@01 from@84@01)
                    (and
                      (= v@133@01 to@85@01)
                      (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                        (and
                          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@191@01)
                                (and
                                  (= U@191@01 from@84@01)
                                  (= V@192@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@193@01)
                                (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
          (and
            (or
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
              (or
                (and
                  (= x@130@01 from@84@01)
                  (and
                    (= u@132@01 from@84@01)
                    (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                (or
                  (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                    (and
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 u@132@01)
                            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 w@141@01)
                            (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                  (or
                    (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                      (and
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@166@01)
                              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 u@132@01)
                              (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                    (and
                      (= u@132@01 from@84@01)
                      (and
                        (= v@133@01 to@85@01)
                        (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                          (and
                            (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@191@01)
                                  (and
                                    (= U@191@01 from@84@01)
                                    (= V@192@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 w@193@01)
                                  (and
                                    (= to@85@01 z@194@01)
                                    (= z@194@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@219@01 r) g@83@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
              :pattern ((inv@219@01 r))
              :qid |quant-u-296|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01)))
        (or
          (not
            (or
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
              (or
                (and
                  (= x@130@01 from@84@01)
                  (and
                    (= u@132@01 from@84@01)
                    (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                (or
                  (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                    (and
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 u@132@01)
                            (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 w@141@01)
                            (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                  (or
                    (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                      (and
                        (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@166@01)
                              (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 u@132@01)
                              (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                    (and
                      (= u@132@01 from@84@01)
                      (and
                        (= v@133@01 to@85@01)
                        (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                          (and
                            (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@191@01)
                                  (and
                                    (= U@191@01 from@84@01)
                                    (= V@192@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 w@193@01)
                                  (and
                                    (= to@85@01 z@194@01)
                                    (= z@194@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))
          (or
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
            (or
              (and
                (= x@130@01 from@84@01)
                (and
                  (= u@132@01 from@84@01)
                  (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
              (or
                (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                  (and
                    (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 u@132@01)
                          (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 w@141@01)
                          (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                (or
                  (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                    (and
                      (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                      (and
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                            (not (= x@130@01 from@84@01)))
                          (and
                            (= x@130@01 U@166@01)
                            (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                        (or
                          (and
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                            (not (= to@85@01 y@131@01)))
                          (and
                            (= from@84@01 u@132@01)
                            (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                  (and
                    (= u@132@01 from@84@01)
                    (and
                      (= v@133@01 to@85@01)
                      (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                        (and
                          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@191@01)
                                (and
                                  (= U@191@01 from@84@01)
                                  (= V@192@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@193@01)
                                (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))))
    (or
      (not
        (and
          (not (= from@84@01 to@85@01))
          (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01)))))
      (and
        (not (= from@84@01 to@85@01))
        (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@485@13@495@57-aux|)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@137@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@137@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert (forall ((n@134@01 $Ref)) (!
  (=>
    (Set_in n@134@01 g@83@01)
    (and (= (inv@135@01 n@134@01) n@134@01) (img@136@01 n@134@01)))
  :pattern ((Set_in n@134@01 g@83@01))
  :pattern ((inv@135@01 n@134@01))
  :pattern ((img@136@01 n@134@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@136@01 r) (Set_in (inv@135@01 r) g@83@01)) (= (inv@135@01 r) r))
  :pattern ((inv@135@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>)))
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r)))
    (=>
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r))
      (Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@140@01  $FVF<next>))))
  :qid |qp.fvfDomDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@140@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@135@01 r) g@83@01) (img@136@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@140@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@140@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@148@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@148@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (Set_in n@145@01 g@83@01)
    (and (= (inv@146@01 n@145@01) n@145@01) (img@147@01 n@145@01)))
  :pattern ((Set_in n@145@01 g@83@01))
  :pattern ((inv@146@01 n@145@01))
  :pattern ((img@147@01 n@145@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@147@01 r) (Set_in (inv@146@01 r) g@83@01)) (= (inv@146@01 r) r))
  :pattern ((inv@146@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)))
    (=>
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@151@01  $FVF<next>))))
  :qid |qp.fvfDomDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@146@01 r) g@83@01) (img@147@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@151@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@151@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@155@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@155@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
(assert (forall ((n@152@01 $Ref)) (!
  (=>
    (Set_in n@152@01 g@83@01)
    (and (= (inv@153@01 n@152@01) n@152@01) (img@154@01 n@152@01)))
  :pattern ((Set_in n@152@01 g@83@01))
  :pattern ((inv@153@01 n@152@01))
  :pattern ((img@154@01 n@152@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@154@01 r) (Set_in (inv@153@01 r) g@83@01)) (= (inv@153@01 r) r))
  :pattern ((inv@153@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)))
    (=>
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@153@01 r) g@83@01) (img@154@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@162@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@162@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((n@159@01 $Ref)) (!
  (=>
    (Set_in n@159@01 g@83@01)
    (and (= (inv@160@01 n@159@01) n@159@01) (img@161@01 n@159@01)))
  :pattern ((Set_in n@159@01 g@83@01))
  :pattern ((inv@160@01 n@159@01))
  :pattern ((img@161@01 n@159@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@161@01 r) (Set_in (inv@160@01 r) g@83@01)) (= (inv@160@01 r) r))
  :pattern ((inv@160@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)))
    (=>
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@160@01 r) g@83@01) (img@161@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef116|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@173@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@173@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef120|)))
(assert (forall ((n@170@01 $Ref)) (!
  (=>
    (Set_in n@170@01 g@83@01)
    (and (= (inv@171@01 n@170@01) n@170@01) (img@172@01 n@170@01)))
  :pattern ((Set_in n@170@01 g@83@01))
  :pattern ((inv@171@01 n@170@01))
  :pattern ((img@172@01 n@170@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@172@01 r) (Set_in (inv@171@01 r) g@83@01)) (= (inv@171@01 r) r))
  :pattern ((inv@171@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)))
    (=>
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@176@01  $FVF<next>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@171@01 r) g@83@01) (img@172@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@176@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@176@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@180@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@180@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef127|)))
(assert (forall ((n@177@01 $Ref)) (!
  (=>
    (Set_in n@177@01 g@83@01)
    (and (= (inv@178@01 n@177@01) n@177@01) (img@179@01 n@177@01)))
  :pattern ((Set_in n@177@01 g@83@01))
  :pattern ((inv@178@01 n@177@01))
  :pattern ((img@179@01 n@177@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@179@01 r) (Set_in (inv@178@01 r) g@83@01)) (= (inv@178@01 r) r))
  :pattern ((inv@178@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)))
    (=>
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@183@01  $FVF<next>))))
  :qid |qp.fvfDomDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@178@01 r) g@83@01) (img@179@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@183@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@183@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@187@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@187@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef134|)))
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 g@83@01)
    (and (= (inv@185@01 n@184@01) n@184@01) (img@186@01 n@184@01)))
  :pattern ((Set_in n@184@01 g@83@01))
  :pattern ((inv@185@01 n@184@01))
  :pattern ((img@186@01 n@184@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@186@01 r) (Set_in (inv@185@01 r) g@83@01)) (= (inv@185@01 r) r))
  :pattern ((inv@185@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)))
    (=>
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@190@01  $FVF<next>))))
  :qid |qp.fvfDomDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@185@01 r) g@83@01) (img@186@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@200@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@200@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (forall ((n@197@01 $Ref)) (!
  (=>
    (Set_in n@197@01 g@83@01)
    (and (= (inv@198@01 n@197@01) n@197@01) (img@199@01 n@197@01)))
  :pattern ((Set_in n@197@01 g@83@01))
  :pattern ((inv@198@01 n@197@01))
  :pattern ((img@199@01 n@197@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@199@01 r) (Set_in (inv@198@01 r) g@83@01)) (= (inv@198@01 r) r))
  :pattern ((inv@198@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)))
    (=>
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@203@01  $FVF<next>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@198@01 r) g@83@01) (img@199@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@203@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@203@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (Set_in n@204@01 g@83@01)
    (and (= (inv@205@01 n@204@01) n@204@01) (img@206@01 n@204@01)))
  :pattern ((Set_in n@204@01 g@83@01))
  :pattern ((inv@205@01 n@204@01))
  :pattern ((img@206@01 n@204@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@206@01 r) (Set_in (inv@205@01 r) g@83@01)) (= (inv@205@01 r) r))
  :pattern ((inv@205@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)))
    (=>
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@210@01  $FVF<next>))))
  :qid |qp.fvfDomDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@205@01 r) g@83@01) (img@206@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@210@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@210@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@214@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef154|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@214@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef155|)))
(assert (forall ((n@211@01 $Ref)) (!
  (=>
    (Set_in n@211@01 g@83@01)
    (and (= (inv@212@01 n@211@01) n@211@01) (img@213@01 n@211@01)))
  :pattern ((Set_in n@211@01 g@83@01))
  :pattern ((inv@212@01 n@211@01))
  :pattern ((img@213@01 n@211@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@213@01 r) (Set_in (inv@212@01 r) g@83@01)) (= (inv@212@01 r) r))
  :pattern ((inv@212@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)))
    (=>
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@217@01  $FVF<next>))))
  :qid |qp.fvfDomDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@212@01 r) g@83@01) (img@213@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@217@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@217@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef158|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@221@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@221@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef162|)))
(assert (forall ((n@218@01 $Ref)) (!
  (=>
    (Set_in n@218@01 g@83@01)
    (and (= (inv@219@01 n@218@01) n@218@01) (img@220@01 n@218@01)))
  :pattern ((Set_in n@218@01 g@83@01))
  :pattern ((inv@219@01 n@218@01))
  :pattern ((img@220@01 n@218@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@220@01 r) (Set_in (inv@219@01 r) g@83@01)) (= (inv@219@01 r) r))
  :pattern ((inv@219@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)))
    (=>
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@224@01  $FVF<next>))))
  :qid |qp.fvfDomDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef163|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@219@01 r) g@83@01) (img@220@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@224@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@224@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef165|)))
(assert (=>
  (not (= to@85@01 $Ref.null))
  (and
    (or (not (= from@84@01 to@85@01)) (= from@84@01 to@85@01))
    (forall ((x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) (!
      (and
        (=>
          (not (= from@84@01 to@85@01))
          (and
            (not (= from@84@01 to@85@01))
            (or (not (= u@132@01 v@133@01)) (= u@132@01 v@133@01))))
        (=>
          (and
            (not (= from@84@01 to@85@01))
            (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))
          (and
            (not (= from@84@01 to@85@01))
            (not (= u@132@01 v@133@01))
            (not (= x@130@01 y@131@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@135@01 r) g@83@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@137@01  $FVF<next>) r) r))
              :pattern ((inv@135@01 r))
              :qid |quant-u-216|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01)
            (=>
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
              (and
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
                (=>
                  (= x@130@01 from@84@01)
                  (and
                    (= x@130@01 from@84@01)
                    (=>
                      (= u@132@01 from@84@01)
                      (and
                        (= u@132@01 from@84@01)
                        (or (= y@131@01 to@85@01) (not (= y@131@01 to@85@01)))))
                    (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
                (or (= x@130@01 from@84@01) (not (= x@130@01 from@84@01)))
                (=>
                  (and
                    (= x@130@01 from@84@01)
                    (and
                      (= u@132@01 from@84@01)
                      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                  (and
                    (= x@130@01 from@84@01)
                    (= u@132@01 from@84@01)
                    (= y@131@01 to@85@01)
                    (= v@133@01 to@85@01)))
                (=>
                  (not
                    (and
                      (= x@130@01 from@84@01)
                      (and
                        (= u@132@01 from@84@01)
                        (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
                  (and
                    (not
                      (and
                        (= x@130@01 from@84@01)
                        (and
                          (= u@132@01 from@84@01)
                          (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@146@01 r) g@83@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
                      :pattern ((inv@146@01 r))
                      :qid |quant-u-224|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
                    (or
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (not
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))))
                    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (=>
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (and
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (forall ((r $Ref)) (!
                            (=>
                              (Set_in (inv@153@01 r) g@83@01)
                              ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) r) r))
                            :pattern ((inv@153@01 r))
                            :qid |quant-u-232|))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
                          (or
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)))
                          (=>
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01))))
                            (and
                              (not
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01))))
                              (=>
                                (= x@130@01 u@132@01)
                                (and
                                  (= x@130@01 u@132@01)
                                  (or
                                    (= u@132@01 from@84@01)
                                    (not (= u@132@01 from@84@01)))))
                              (or
                                (= x@130@01 u@132@01)
                                (not (= x@130@01 u@132@01)))))
                          (or
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01))))
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01))))
                          (=>
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 u@132@01)
                                  (and
                                    (= u@132@01 from@84@01)
                                    (= v@133@01 to@85@01))))
                              (forall ((r $Ref)) (!
                                (=>
                                  (Set_in (inv@160@01 r) g@83@01)
                                  ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
                                :pattern ((inv@160@01 r))
                                :qid |quant-u-240|))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)
                              (or
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)))
                              (=>
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                    (not (= to@85@01 y@131@01))))
                                (and
                                  (not
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                      (not (= to@85@01 y@131@01))))
                                  (=>
                                    (= from@84@01 w@141@01)
                                    (and
                                      (= from@84@01 w@141@01)
                                      (or
                                        (= to@85@01 z@142@01)
                                        (not (= to@85@01 z@142@01)))))
                                  (or
                                    (= from@84@01 w@141@01)
                                    (not (= from@84@01 w@141@01)))))
                              (or
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                    (not (= to@85@01 y@131@01))))
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                  (not (= to@85@01 y@131@01))))))
                          (or
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (not
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 u@132@01)
                                  (and
                                    (= u@132@01 from@84@01)
                                    (= v@133@01 to@85@01))))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96-aux|))
                    (forall ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (and
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (=>
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (and
                            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
                            (=>
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 u@132@01)
                                  (and
                                    (= u@132@01 from@84@01)
                                    (= v@133@01 to@85@01))))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                    (=>
                      (not
                        (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                          (and
                            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 u@132@01)
                                  (and
                                    (= u@132@01 from@84@01)
                                    (= v@133@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 w@141@01)
                                  (and
                                    (= to@85@01 z@142@01)
                                    (= z@142@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                      (and
                        (not
                          (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                            (and
                              (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                              (and
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 u@132@01)
                                    (and
                                      (= u@132@01 from@84@01)
                                      (= v@133@01 to@85@01))))
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                    (not (= to@85@01 y@131@01)))
                                  (and
                                    (= from@84@01 w@141@01)
                                    (and
                                      (= to@85@01 z@142@01)
                                      (= z@142@01 y@131@01))))))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                        (forall ((r $Ref)) (!
                          (=>
                            (Set_in (inv@171@01 r) g@83@01)
                            ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
                          :pattern ((inv@171@01 r))
                          :qid |quant-u-248|))
                        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
                        (or
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (not
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))))
                        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (=>
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (and
                              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                              (forall ((r $Ref)) (!
                                (=>
                                  (Set_in (inv@178@01 r) g@83@01)
                                  ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
                                :pattern ((inv@178@01 r))
                                :qid |quant-u-256|))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                              (or
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)))
                              (=>
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01))))
                                (and
                                  (not
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01))))
                                  (=>
                                    (= x@130@01 U@166@01)
                                    (and
                                      (= x@130@01 U@166@01)
                                      (or
                                        (= U@166@01 from@84@01)
                                        (not (= U@166@01 from@84@01)))))
                                  (or
                                    (= x@130@01 U@166@01)
                                    (not (= x@130@01 U@166@01)))))
                              (or
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01))))
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01))))
                              (=>
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@166@01)
                                    (and
                                      (= U@166@01 from@84@01)
                                      (= V@167@01 to@85@01))))
                                (and
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@166@01)
                                      (and
                                        (= U@166@01 from@84@01)
                                        (= V@167@01 to@85@01))))
                                  (forall ((r $Ref)) (!
                                    (=>
                                      (Set_in (inv@185@01 r) g@83@01)
                                      ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
                                    :pattern ((inv@185@01 r))
                                    :qid |quant-u-264|))
                                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)
                                  (or
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                    (not
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
                                  (=>
                                    (not
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                        (not (= to@85@01 y@131@01))))
                                    (and
                                      (not
                                        (and
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                          (not (= to@85@01 y@131@01))))
                                      (=>
                                        (= from@84@01 u@132@01)
                                        (and
                                          (= from@84@01 u@132@01)
                                          (or
                                            (= to@85@01 v@133@01)
                                            (not (= to@85@01 v@133@01)))))
                                      (or
                                        (= from@84@01 u@132@01)
                                        (not (= from@84@01 u@132@01)))))
                                  (or
                                    (not
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                        (not (= to@85@01 y@131@01))))
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                      (not (= to@85@01 y@131@01))))))
                              (or
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@166@01)
                                    (and
                                      (= U@166@01 from@84@01)
                                      (= V@167@01 to@85@01))))
                                (not
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@166@01)
                                      (and
                                        (= U@166@01 from@84@01)
                                        (= V@167@01 to@85@01))))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96-aux|))
                        (forall ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (and
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (=>
                              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                              (and
                                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                                (=>
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@166@01)
                                      (and
                                        (= U@166@01 from@84@01)
                                        (= V@167@01 to@85@01))))
                                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                        (=>
                          (not
                            (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                              (and
                                (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                  (not
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                                (and
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@166@01)
                                      (and
                                        (= U@166@01 from@84@01)
                                        (= V@167@01 to@85@01))))
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                      (not (= to@85@01 y@131@01)))
                                    (and
                                      (= from@84@01 u@132@01)
                                      (and
                                        (= to@85@01 v@133@01)
                                        (= v@133@01 y@131@01))))))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                          (and
                            (not
                              (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                                (and
                                  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                    (not
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                                  (and
                                    (or
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                        (not (= x@130@01 from@84@01)))
                                      (and
                                        (= x@130@01 U@166@01)
                                        (and
                                          (= U@166@01 from@84@01)
                                          (= V@167@01 to@85@01))))
                                    (or
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                        (not (= to@85@01 y@131@01)))
                                      (and
                                        (= from@84@01 u@132@01)
                                        (and
                                          (= to@85@01 v@133@01)
                                          (= v@133@01 y@131@01))))))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                            (=>
                              (= u@132@01 from@84@01)
                              (and
                                (= u@132@01 from@84@01)
                                (=>
                                  (= v@133@01 to@85@01)
                                  (and
                                    (= v@133@01 to@85@01)
                                    (forall ((r $Ref)) (!
                                      (=>
                                        (Set_in (inv@198@01 r) g@83@01)
                                        ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
                                      :pattern ((inv@198@01 r))
                                      :qid |quant-u-272|))
                                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                                    (or
                                      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                        (not
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                      (not
                                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                          (not
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
                                    (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                                      (=>
                                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                          (not
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                        (and
                                          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                            (not
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                          (forall ((r $Ref)) (!
                                            (=>
                                              (Set_in (inv@205@01 r) g@83@01)
                                              ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
                                            :pattern ((inv@205@01 r))
                                            :qid |quant-u-280|))
                                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                                          (or
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                            (not
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
                                          (=>
                                            (not
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                (not (= x@130@01 from@84@01))))
                                            (and
                                              (not
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                  (not (= x@130@01 from@84@01))))
                                              (=>
                                                (= x@130@01 U@191@01)
                                                (and
                                                  (= x@130@01 U@191@01)
                                                  (or
                                                    (= U@191@01 from@84@01)
                                                    (not (= U@191@01 from@84@01)))))
                                              (or
                                                (= x@130@01 U@191@01)
                                                (not (= x@130@01 U@191@01)))))
                                          (or
                                            (not
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                (not (= x@130@01 from@84@01))))
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                              (not (= x@130@01 from@84@01))))
                                          (=>
                                            (or
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                (not (= x@130@01 from@84@01)))
                                              (and
                                                (= x@130@01 U@191@01)
                                                (and
                                                  (= U@191@01 from@84@01)
                                                  (= V@192@01 to@85@01))))
                                            (and
                                              (or
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                  (not (= x@130@01 from@84@01)))
                                                (and
                                                  (= x@130@01 U@191@01)
                                                  (and
                                                    (= U@191@01 from@84@01)
                                                    (= V@192@01 to@85@01))))
                                              (forall ((r $Ref)) (!
                                                (=>
                                                  (Set_in (inv@212@01 r) g@83@01)
                                                  ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
                                                :pattern ((inv@212@01 r))
                                                :qid |quant-u-288|))
                                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
                                              (or
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                (not
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
                                              (=>
                                                (not
                                                  (and
                                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                    (not (= to@85@01 y@131@01))))
                                                (and
                                                  (not
                                                    (and
                                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                      (not (= to@85@01 y@131@01))))
                                                  (=>
                                                    (= from@84@01 w@193@01)
                                                    (and
                                                      (= from@84@01 w@193@01)
                                                      (or
                                                        (= to@85@01 z@194@01)
                                                        (not
                                                          (= to@85@01 z@194@01)))))
                                                  (or
                                                    (= from@84@01 w@193@01)
                                                    (not (= from@84@01 w@193@01)))))
                                              (or
                                                (not
                                                  (and
                                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                    (not (= to@85@01 y@131@01))))
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                  (not (= to@85@01 y@131@01))))))
                                          (or
                                            (or
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                (not (= x@130@01 from@84@01)))
                                              (and
                                                (= x@130@01 U@191@01)
                                                (and
                                                  (= U@191@01 from@84@01)
                                                  (= V@192@01 to@85@01))))
                                            (not
                                              (or
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                  (not (= x@130@01 from@84@01)))
                                                (and
                                                  (= x@130@01 U@191@01)
                                                  (and
                                                    (= U@191@01 from@84@01)
                                                    (= V@192@01 to@85@01))))))))
                                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|))
                                    (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                                      (and
                                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                        (=>
                                          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                            (not
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                          (and
                                            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                                            (=>
                                              (or
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                  (not (= x@130@01 from@84@01)))
                                                (and
                                                  (= x@130@01 U@191@01)
                                                  (and
                                                    (= U@191@01 from@84@01)
                                                    (= V@192@01 to@85@01))))
                                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
                                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))
                                (or
                                  (= v@133@01 to@85@01)
                                  (not (= v@133@01 to@85@01)))))
                            (or
                              (= u@132@01 from@84@01)
                              (not (= u@132@01 from@84@01)))))
                        (or
                          (not
                            (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                              (and
                                (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                  (not
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                                (and
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@166@01)
                                      (and
                                        (= U@166@01 from@84@01)
                                        (= V@167@01 to@85@01))))
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                      (not (= to@85@01 y@131@01)))
                                    (and
                                      (= from@84@01 u@132@01)
                                      (and
                                        (= to@85@01 v@133@01)
                                        (= v@133@01 y@131@01))))))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                          (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                            (and
                              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                              (and
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@166@01)
                                    (and
                                      (= U@166@01 from@84@01)
                                      (= V@167@01 to@85@01))))
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                    (not (= to@85@01 y@131@01)))
                                  (and
                                    (= from@84@01 u@132@01)
                                    (and
                                      (= to@85@01 v@133@01)
                                      (= v@133@01 y@131@01))))))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))))
                    (or
                      (not
                        (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                          (and
                            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 u@132@01)
                                  (and
                                    (= u@132@01 from@84@01)
                                    (= v@133@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 w@141@01)
                                  (and
                                    (= to@85@01 z@142@01)
                                    (= z@142@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                      (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                        (and
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@141@01)
                                (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))))
                (or
                  (not
                    (and
                      (= x@130@01 from@84@01)
                      (and
                        (= u@132@01 from@84@01)
                        (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
                  (and
                    (= x@130@01 from@84@01)
                    (and
                      (= u@132@01 from@84@01)
                      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))))
            (or
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
            (=>
              (or
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
                (or
                  (and
                    (= x@130@01 from@84@01)
                    (and
                      (= u@132@01 from@84@01)
                      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                  (or
                    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (and
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 w@141@01)
                              (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                    (or
                      (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                        (and
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@166@01)
                                (and
                                  (= U@166@01 from@84@01)
                                  (= V@167@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 u@132@01)
                                (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                      (and
                        (= u@132@01 from@84@01)
                        (and
                          (= v@133@01 to@85@01)
                          (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                            (and
                              (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                              (and
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@191@01)
                                    (and
                                      (= U@191@01 from@84@01)
                                      (= V@192@01 to@85@01))))
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                    (not (= to@85@01 y@131@01)))
                                  (and
                                    (= from@84@01 w@193@01)
                                    (and
                                      (= to@85@01 z@194@01)
                                      (= z@194@01 y@131@01))))))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
              (and
                (or
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
                  (or
                    (and
                      (= x@130@01 from@84@01)
                      (and
                        (= u@132@01 from@84@01)
                        (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                    (or
                      (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                        (and
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@141@01)
                                (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                      (or
                        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (and
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 u@132@01)
                                  (and
                                    (= to@85@01 v@133@01)
                                    (= v@133@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                        (and
                          (= u@132@01 from@84@01)
                          (and
                            (= v@133@01 to@85@01)
                            (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                              (and
                                (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                  (not
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                (and
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@191@01)
                                      (and
                                        (= U@191@01 from@84@01)
                                        (= V@192@01 to@85@01))))
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                      (not (= to@85@01 y@131@01)))
                                    (and
                                      (= from@84@01 w@193@01)
                                      (and
                                        (= to@85@01 z@194@01)
                                        (= z@194@01 y@131@01))))))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@219@01 r) g@83@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
                  :pattern ((inv@219@01 r))
                  :qid |quant-u-296|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01)))
            (or
              (not
                (or
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
                  (or
                    (and
                      (= x@130@01 from@84@01)
                      (and
                        (= u@132@01 from@84@01)
                        (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                    (or
                      (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                        (and
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@141@01)
                                (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                      (or
                        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (and
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 u@132@01)
                                  (and
                                    (= to@85@01 v@133@01)
                                    (= v@133@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                        (and
                          (= u@132@01 from@84@01)
                          (and
                            (= v@133@01 to@85@01)
                            (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                              (and
                                (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                  (not
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                (and
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@191@01)
                                      (and
                                        (= U@191@01 from@84@01)
                                        (= V@192@01 to@85@01))))
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                      (not (= to@85@01 y@131@01)))
                                    (and
                                      (= from@84@01 w@193@01)
                                      (and
                                        (= to@85@01 z@194@01)
                                        (= z@194@01 y@131@01))))))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))
              (or
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
                (or
                  (and
                    (= x@130@01 from@84@01)
                    (and
                      (= u@132@01 from@84@01)
                      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                  (or
                    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (and
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 w@141@01)
                              (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                    (or
                      (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                        (and
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@166@01)
                                (and
                                  (= U@166@01 from@84@01)
                                  (= V@167@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 u@132@01)
                                (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                      (and
                        (= u@132@01 from@84@01)
                        (and
                          (= v@133@01 to@85@01)
                          (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                            (and
                              (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                              (and
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@191@01)
                                    (and
                                      (= U@191@01 from@84@01)
                                      (= V@192@01 to@85@01))))
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                    (not (= to@85@01 y@131@01)))
                                  (and
                                    (= from@84@01 w@193@01)
                                    (and
                                      (= to@85@01 z@194@01)
                                      (= z@194@01 y@131@01))))))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))))
        (or
          (not
            (and
              (not (= from@84@01 to@85@01))
              (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01)))))
          (and
            (not (= from@84@01 to@85@01))
            (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@485@13@495@57-aux|))
    (forall ((x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) (!
      (and
        (=>
          (not (= from@84@01 to@85@01))
          (and
            (not (= from@84@01 to@85@01))
            (or (not (= u@132@01 v@133@01)) (= u@132@01 v@133@01))))
        (=>
          (and
            (not (= from@84@01 to@85@01))
            (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))
          (and
            (not (= from@84@01 to@85@01))
            (not (= u@132@01 v@133@01))
            (not (= x@130@01 y@131@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@135@01 r) g@83@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@137@01  $FVF<next>) r) r))
              :pattern ((inv@135@01 r))
              :qid |quant-u-216|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01)
            (=>
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
              (and
                (not
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
                (=>
                  (= x@130@01 from@84@01)
                  (and
                    (= x@130@01 from@84@01)
                    (=>
                      (= u@132@01 from@84@01)
                      (and
                        (= u@132@01 from@84@01)
                        (or (= y@131@01 to@85@01) (not (= y@131@01 to@85@01)))))
                    (or (= u@132@01 from@84@01) (not (= u@132@01 from@84@01)))))
                (or (= x@130@01 from@84@01) (not (= x@130@01 from@84@01)))
                (=>
                  (and
                    (= x@130@01 from@84@01)
                    (and
                      (= u@132@01 from@84@01)
                      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                  (and
                    (= x@130@01 from@84@01)
                    (= u@132@01 from@84@01)
                    (= y@131@01 to@85@01)
                    (= v@133@01 to@85@01)))
                (=>
                  (not
                    (and
                      (= x@130@01 from@84@01)
                      (and
                        (= u@132@01 from@84@01)
                        (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
                  (and
                    (not
                      (and
                        (= x@130@01 from@84@01)
                        (and
                          (= u@132@01 from@84@01)
                          (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
                    (forall ((r $Ref)) (!
                      (=>
                        (Set_in (inv@146@01 r) g@83@01)
                        ($FVF.loc_next ($FVF.lookup_next (as sm@148@01  $FVF<next>) r) r))
                      :pattern ((inv@146@01 r))
                      :qid |quant-u-224|))
                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
                    (or
                      (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                        (not
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                      (not
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))))
                    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (=>
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (and
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (forall ((r $Ref)) (!
                            (=>
                              (Set_in (inv@153@01 r) g@83@01)
                              ($FVF.loc_next ($FVF.lookup_next (as sm@155@01  $FVF<next>) r) r))
                            :pattern ((inv@153@01 r))
                            :qid |quant-u-232|))
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
                          (or
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)))
                          (=>
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01))))
                            (and
                              (not
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01))))
                              (=>
                                (= x@130@01 u@132@01)
                                (and
                                  (= x@130@01 u@132@01)
                                  (or
                                    (= u@132@01 from@84@01)
                                    (not (= u@132@01 from@84@01)))))
                              (or
                                (= x@130@01 u@132@01)
                                (not (= x@130@01 u@132@01)))))
                          (or
                            (not
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01))))
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01))))
                          (=>
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 u@132@01)
                                  (and
                                    (= u@132@01 from@84@01)
                                    (= v@133@01 to@85@01))))
                              (forall ((r $Ref)) (!
                                (=>
                                  (Set_in (inv@160@01 r) g@83@01)
                                  ($FVF.loc_next ($FVF.lookup_next (as sm@162@01  $FVF<next>) r) r))
                                :pattern ((inv@160@01 r))
                                :qid |quant-u-240|))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)
                              (or
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)))
                              (=>
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                    (not (= to@85@01 y@131@01))))
                                (and
                                  (not
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                      (not (= to@85@01 y@131@01))))
                                  (=>
                                    (= from@84@01 w@141@01)
                                    (and
                                      (= from@84@01 w@141@01)
                                      (or
                                        (= to@85@01 z@142@01)
                                        (not (= to@85@01 z@142@01)))))
                                  (or
                                    (= from@84@01 w@141@01)
                                    (not (= from@84@01 w@141@01)))))
                              (or
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                    (not (= to@85@01 y@131@01))))
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                  (not (= to@85@01 y@131@01))))))
                          (or
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (not
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 u@132@01)
                                  (and
                                    (= u@132@01 from@84@01)
                                    (= v@133@01 to@85@01))))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96-aux|))
                    (forall ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (and
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01)
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (=>
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (and
                            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01)
                            (=>
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 u@132@01)
                                  (and
                                    (= u@132@01 from@84@01)
                                    (= v@133@01 to@85@01))))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01)))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                    (=>
                      (not
                        (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                          (and
                            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 u@132@01)
                                  (and
                                    (= u@132@01 from@84@01)
                                    (= v@133@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 w@141@01)
                                  (and
                                    (= to@85@01 z@142@01)
                                    (= z@142@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                      (and
                        (not
                          (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                            (and
                              (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                              (and
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 u@132@01)
                                    (and
                                      (= u@132@01 from@84@01)
                                      (= v@133@01 to@85@01))))
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                    (not (= to@85@01 y@131@01)))
                                  (and
                                    (= from@84@01 w@141@01)
                                    (and
                                      (= to@85@01 z@142@01)
                                      (= z@142@01 y@131@01))))))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                        (forall ((r $Ref)) (!
                          (=>
                            (Set_in (inv@171@01 r) g@83@01)
                            ($FVF.loc_next ($FVF.lookup_next (as sm@173@01  $FVF<next>) r) r))
                          :pattern ((inv@171@01 r))
                          :qid |quant-u-248|))
                        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
                        (or
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (not
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))))
                        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (=>
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (and
                              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                              (forall ((r $Ref)) (!
                                (=>
                                  (Set_in (inv@178@01 r) g@83@01)
                                  ($FVF.loc_next ($FVF.lookup_next (as sm@180@01  $FVF<next>) r) r))
                                :pattern ((inv@178@01 r))
                                :qid |quant-u-256|))
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                              (or
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)))
                              (=>
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01))))
                                (and
                                  (not
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01))))
                                  (=>
                                    (= x@130@01 U@166@01)
                                    (and
                                      (= x@130@01 U@166@01)
                                      (or
                                        (= U@166@01 from@84@01)
                                        (not (= U@166@01 from@84@01)))))
                                  (or
                                    (= x@130@01 U@166@01)
                                    (not (= x@130@01 U@166@01)))))
                              (or
                                (not
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01))))
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01))))
                              (=>
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@166@01)
                                    (and
                                      (= U@166@01 from@84@01)
                                      (= V@167@01 to@85@01))))
                                (and
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@166@01)
                                      (and
                                        (= U@166@01 from@84@01)
                                        (= V@167@01 to@85@01))))
                                  (forall ((r $Ref)) (!
                                    (=>
                                      (Set_in (inv@185@01 r) g@83@01)
                                      ($FVF.loc_next ($FVF.lookup_next (as sm@187@01  $FVF<next>) r) r))
                                    :pattern ((inv@185@01 r))
                                    :qid |quant-u-264|))
                                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)
                                  (or
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                    (not
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)))
                                  (=>
                                    (not
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                        (not (= to@85@01 y@131@01))))
                                    (and
                                      (not
                                        (and
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                          (not (= to@85@01 y@131@01))))
                                      (=>
                                        (= from@84@01 u@132@01)
                                        (and
                                          (= from@84@01 u@132@01)
                                          (or
                                            (= to@85@01 v@133@01)
                                            (not (= to@85@01 v@133@01)))))
                                      (or
                                        (= from@84@01 u@132@01)
                                        (not (= from@84@01 u@132@01)))))
                                  (or
                                    (not
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                        (not (= to@85@01 y@131@01))))
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                      (not (= to@85@01 y@131@01))))))
                              (or
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@166@01)
                                    (and
                                      (= U@166@01 from@84@01)
                                      (= V@167@01 to@85@01))))
                                (not
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@166@01)
                                      (and
                                        (= U@166@01 from@84@01)
                                        (= V@167@01 to@85@01))))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96-aux|))
                        (forall ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (and
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01)
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (=>
                              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                              (and
                                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01)
                                (=>
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@166@01)
                                      (and
                                        (= U@166@01 from@84@01)
                                        (= V@167@01 to@85@01))))
                                  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01)))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                        (=>
                          (not
                            (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                              (and
                                (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                  (not
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                                (and
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@166@01)
                                      (and
                                        (= U@166@01 from@84@01)
                                        (= V@167@01 to@85@01))))
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                      (not (= to@85@01 y@131@01)))
                                    (and
                                      (= from@84@01 u@132@01)
                                      (and
                                        (= to@85@01 v@133@01)
                                        (= v@133@01 y@131@01))))))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                          (and
                            (not
                              (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                                (and
                                  (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                    (not
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                                  (and
                                    (or
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                        (not (= x@130@01 from@84@01)))
                                      (and
                                        (= x@130@01 U@166@01)
                                        (and
                                          (= U@166@01 from@84@01)
                                          (= V@167@01 to@85@01))))
                                    (or
                                      (and
                                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                        (not (= to@85@01 y@131@01)))
                                      (and
                                        (= from@84@01 u@132@01)
                                        (and
                                          (= to@85@01 v@133@01)
                                          (= v@133@01 y@131@01))))))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                            (=>
                              (= u@132@01 from@84@01)
                              (and
                                (= u@132@01 from@84@01)
                                (=>
                                  (= v@133@01 to@85@01)
                                  (and
                                    (= v@133@01 to@85@01)
                                    (forall ((r $Ref)) (!
                                      (=>
                                        (Set_in (inv@198@01 r) g@83@01)
                                        ($FVF.loc_next ($FVF.lookup_next (as sm@200@01  $FVF<next>) r) r))
                                      :pattern ((inv@198@01 r))
                                      :qid |quant-u-272|))
                                    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                                    (or
                                      (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                        (not
                                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                      (not
                                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                          (not
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))))
                                    (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                                      (=>
                                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                          (not
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                        (and
                                          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                            (not
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                          (forall ((r $Ref)) (!
                                            (=>
                                              (Set_in (inv@205@01 r) g@83@01)
                                              ($FVF.loc_next ($FVF.lookup_next (as sm@207@01  $FVF<next>) r) r))
                                            :pattern ((inv@205@01 r))
                                            :qid |quant-u-280|))
                                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                                          (or
                                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                            (not
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)))
                                          (=>
                                            (not
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                (not (= x@130@01 from@84@01))))
                                            (and
                                              (not
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                  (not (= x@130@01 from@84@01))))
                                              (=>
                                                (= x@130@01 U@191@01)
                                                (and
                                                  (= x@130@01 U@191@01)
                                                  (or
                                                    (= U@191@01 from@84@01)
                                                    (not (= U@191@01 from@84@01)))))
                                              (or
                                                (= x@130@01 U@191@01)
                                                (not (= x@130@01 U@191@01)))))
                                          (or
                                            (not
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                (not (= x@130@01 from@84@01))))
                                            (and
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                              (not (= x@130@01 from@84@01))))
                                          (=>
                                            (or
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                (not (= x@130@01 from@84@01)))
                                              (and
                                                (= x@130@01 U@191@01)
                                                (and
                                                  (= U@191@01 from@84@01)
                                                  (= V@192@01 to@85@01))))
                                            (and
                                              (or
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                  (not (= x@130@01 from@84@01)))
                                                (and
                                                  (= x@130@01 U@191@01)
                                                  (and
                                                    (= U@191@01 from@84@01)
                                                    (= V@192@01 to@85@01))))
                                              (forall ((r $Ref)) (!
                                                (=>
                                                  (Set_in (inv@212@01 r) g@83@01)
                                                  ($FVF.loc_next ($FVF.lookup_next (as sm@214@01  $FVF<next>) r) r))
                                                :pattern ((inv@212@01 r))
                                                :qid |quant-u-288|))
                                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)
                                              (or
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                (not
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)))
                                              (=>
                                                (not
                                                  (and
                                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                    (not (= to@85@01 y@131@01))))
                                                (and
                                                  (not
                                                    (and
                                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                      (not (= to@85@01 y@131@01))))
                                                  (=>
                                                    (= from@84@01 w@193@01)
                                                    (and
                                                      (= from@84@01 w@193@01)
                                                      (or
                                                        (= to@85@01 z@194@01)
                                                        (not
                                                          (= to@85@01 z@194@01)))))
                                                  (or
                                                    (= from@84@01 w@193@01)
                                                    (not (= from@84@01 w@193@01)))))
                                              (or
                                                (not
                                                  (and
                                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                    (not (= to@85@01 y@131@01))))
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                                  (not (= to@85@01 y@131@01))))))
                                          (or
                                            (or
                                              (and
                                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                (not (= x@130@01 from@84@01)))
                                              (and
                                                (= x@130@01 U@191@01)
                                                (and
                                                  (= U@191@01 from@84@01)
                                                  (= V@192@01 to@85@01))))
                                            (not
                                              (or
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                  (not (= x@130@01 from@84@01)))
                                                (and
                                                  (= x@130@01 U@191@01)
                                                  (and
                                                    (= U@191@01 from@84@01)
                                                    (= V@192@01 to@85@01))))))))
                                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130-aux|))
                                    (forall ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                                      (and
                                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01)
                                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                        (=>
                                          (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                            (not
                                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                          (and
                                            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01)
                                            (=>
                                              (or
                                                (and
                                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                                  (not (= x@130@01 from@84@01)))
                                                (and
                                                  (= x@130@01 U@191@01)
                                                  (and
                                                    (= U@191@01 from@84@01)
                                                    (= V@192@01 to@85@01))))
                                              ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01)))))
                                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))
                                (or
                                  (= v@133@01 to@85@01)
                                  (not (= v@133@01 to@85@01)))))
                            (or
                              (= u@132@01 from@84@01)
                              (not (= u@132@01 from@84@01)))))
                        (or
                          (not
                            (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                              (and
                                (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                  (not
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                                (and
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@166@01)
                                      (and
                                        (= U@166@01 from@84@01)
                                        (= V@167@01 to@85@01))))
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                      (not (= to@85@01 y@131@01)))
                                    (and
                                      (= from@84@01 u@132@01)
                                      (and
                                        (= to@85@01 v@133@01)
                                        (= v@133@01 y@131@01))))))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))
                          (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                            (and
                              (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                              (and
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@166@01)
                                    (and
                                      (= U@166@01 from@84@01)
                                      (= V@167@01 to@85@01))))
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                    (not (= to@85@01 y@131@01)))
                                  (and
                                    (= from@84@01 u@132@01)
                                    (and
                                      (= to@85@01 v@133@01)
                                      (= v@133@01 y@131@01))))))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|)))))
                    (or
                      (not
                        (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                          (and
                            (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 u@132@01)
                                  (and
                                    (= u@132@01 from@84@01)
                                    (= v@133@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 w@141@01)
                                  (and
                                    (= to@85@01 z@142@01)
                                    (= z@142@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))
                      (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                        (and
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@141@01)
                                (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|)))))
                (or
                  (not
                    (and
                      (= x@130@01 from@84@01)
                      (and
                        (= u@132@01 from@84@01)
                        (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))
                  (and
                    (= x@130@01 from@84@01)
                    (and
                      (= u@132@01 from@84@01)
                      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01)))))))
            (or
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
            (=>
              (or
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
                (or
                  (and
                    (= x@130@01 from@84@01)
                    (and
                      (= u@132@01 from@84@01)
                      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                  (or
                    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (and
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 w@141@01)
                              (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                    (or
                      (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                        (and
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@166@01)
                                (and
                                  (= U@166@01 from@84@01)
                                  (= V@167@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 u@132@01)
                                (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                      (and
                        (= u@132@01 from@84@01)
                        (and
                          (= v@133@01 to@85@01)
                          (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                            (and
                              (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                              (and
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@191@01)
                                    (and
                                      (= U@191@01 from@84@01)
                                      (= V@192@01 to@85@01))))
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                    (not (= to@85@01 y@131@01)))
                                  (and
                                    (= from@84@01 w@193@01)
                                    (and
                                      (= to@85@01 z@194@01)
                                      (= z@194@01 y@131@01))))))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
              (and
                (or
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
                  (or
                    (and
                      (= x@130@01 from@84@01)
                      (and
                        (= u@132@01 from@84@01)
                        (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                    (or
                      (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                        (and
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@141@01)
                                (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                      (or
                        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (and
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 u@132@01)
                                  (and
                                    (= to@85@01 v@133@01)
                                    (= v@133@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                        (and
                          (= u@132@01 from@84@01)
                          (and
                            (= v@133@01 to@85@01)
                            (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                              (and
                                (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                  (not
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                (and
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@191@01)
                                      (and
                                        (= U@191@01 from@84@01)
                                        (= V@192@01 to@85@01))))
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                      (not (= to@85@01 y@131@01)))
                                    (and
                                      (= from@84@01 w@193@01)
                                      (and
                                        (= to@85@01 z@194@01)
                                        (= z@194@01 y@131@01))))))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|))))))))
                (forall ((r $Ref)) (!
                  (=>
                    (Set_in (inv@219@01 r) g@83@01)
                    ($FVF.loc_next ($FVF.lookup_next (as sm@221@01  $FVF<next>) r) r))
                  :pattern ((inv@219@01 r))
                  :qid |quant-u-296|))
                ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01)))
            (or
              (not
                (or
                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
                  (or
                    (and
                      (= x@130@01 from@84@01)
                      (and
                        (= u@132@01 from@84@01)
                        (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                    (or
                      (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                        (and
                          (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 u@132@01)
                                (and
                                  (= u@132@01 from@84@01)
                                  (= v@133@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 w@141@01)
                                (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                      (or
                        (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                          (and
                            (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                              (not
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                            (and
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                  (not (= x@130@01 from@84@01)))
                                (and
                                  (= x@130@01 U@166@01)
                                  (and
                                    (= U@166@01 from@84@01)
                                    (= V@167@01 to@85@01))))
                              (or
                                (and
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                  (not (= to@85@01 y@131@01)))
                                (and
                                  (= from@84@01 u@132@01)
                                  (and
                                    (= to@85@01 v@133@01)
                                    (= v@133@01 y@131@01))))))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                        (and
                          (= u@132@01 from@84@01)
                          (and
                            (= v@133@01 to@85@01)
                            (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                              (and
                                (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                  (not
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                                (and
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                      (not (= x@130@01 from@84@01)))
                                    (and
                                      (= x@130@01 U@191@01)
                                      (and
                                        (= U@191@01 from@84@01)
                                        (= V@192@01 to@85@01))))
                                  (or
                                    (and
                                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                      (not (= to@85@01 y@131@01)))
                                    (and
                                      (= from@84@01 w@193@01)
                                      (and
                                        (= to@85@01 z@194@01)
                                        (= z@194@01 y@131@01))))))
                              :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                              :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))
              (or
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
                (or
                  (and
                    (= x@130@01 from@84@01)
                    (and
                      (= u@132@01 from@84@01)
                      (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
                  (or
                    (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                      (and
                        (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 u@132@01)
                              (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 w@141@01)
                              (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
                    (or
                      (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                        (and
                          (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                            (not
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                          (and
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                                (not (= x@130@01 from@84@01)))
                              (and
                                (= x@130@01 U@166@01)
                                (and
                                  (= U@166@01 from@84@01)
                                  (= V@167@01 to@85@01))))
                            (or
                              (and
                                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                                (not (= to@85@01 y@131@01)))
                              (and
                                (= from@84@01 u@132@01)
                                (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                        :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                        :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                      (and
                        (= u@132@01 from@84@01)
                        (and
                          (= v@133@01 to@85@01)
                          (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                            (and
                              (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                                (not
                                  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                              (and
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                                    (not (= x@130@01 from@84@01)))
                                  (and
                                    (= x@130@01 U@191@01)
                                    (and
                                      (= U@191@01 from@84@01)
                                      (= V@192@01 to@85@01))))
                                (or
                                  (and
                                    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                                    (not (= to@85@01 y@131@01)))
                                  (and
                                    (= from@84@01 w@193@01)
                                    (and
                                      (= to@85@01 z@194@01)
                                      (= z@194@01 y@131@01))))))
                            :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                            :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))))
        (or
          (not
            (and
              (not (= from@84@01 to@85@01))
              (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01)))))
          (and
            (not (= from@84@01 to@85@01))
            (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@485@13@495@57-aux|)))))
(assert (=>
  (not (= to@85@01 $Ref.null))
  (forall ((x@130@01 $Ref) (y@131@01 $Ref) (u@132@01 $Ref) (v@133@01 $Ref)) (!
    (=>
      (and
        (and
          (not (= from@84@01 to@85@01))
          (and (not (= u@132@01 v@133@01)) (not (= x@130@01 y@131@01))))
        (or
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01)
          (or
            (and
              (= x@130@01 from@84@01)
              (and
                (= u@132@01 from@84@01)
                (and (= y@131@01 to@85@01) (= v@133@01 to@85@01))))
            (or
              (exists ((w@141@01 $Ref) (z@142@01 $Ref)) (!
                (and
                  (forall ((u_@143@01 $Ref) (v_@144@01 $Ref)) (!
                    (not
                      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@151@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@143@01 v_@144@01))
                    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@53@491@96|))
                  (and
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 u@132@01 v@133@01)
                        (not (= x@130@01 from@84@01)))
                      (and
                        (= x@130@01 u@132@01)
                        (and (= u@132@01 from@84@01) (= v@133@01 to@85@01))))
                    (or
                      (and
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01)
                        (not (= to@85@01 y@131@01)))
                      (and
                        (= from@84@01 w@141@01)
                        (and (= to@85@01 z@142@01) (= z@142@01 y@131@01))))))
                :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@141@01 z@142@01))
                :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@491@30@491@96|))
              (or
                (exists ((U@166@01 $Ref) (V@167@01 $Ref)) (!
                  (and
                    (forall ((u_@168@01 $Ref) (v_@169@01 $Ref)) (!
                      (not
                        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@176@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@168@01 v_@169@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@53@492@96|))
                    (and
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01)
                          (not (= x@130@01 from@84@01)))
                        (and
                          (= x@130@01 U@166@01)
                          (and (= U@166@01 from@84@01) (= V@167@01 to@85@01))))
                      (or
                        (and
                          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@190@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 u@132@01 v@133@01)
                          (not (= to@85@01 y@131@01)))
                        (and
                          (= from@84@01 u@132@01)
                          (and (= to@85@01 v@133@01) (= v@133@01 y@131@01))))))
                  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@183@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@166@01 V@167@01))
                  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@492@30@492@96|))
                (and
                  (= u@132@01 from@84@01)
                  (and
                    (= v@133@01 to@85@01)
                    (exists ((U@191@01 $Ref) (V@192@01 $Ref) (w@193@01 $Ref) (z@194@01 $Ref)) (!
                      (and
                        (forall ((u_@195@01 $Ref) (v_@196@01 $Ref)) (!
                          (not
                            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                          :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@203@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u_@195@01 v_@196@01))
                          :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@87@493@130|))
                        (and
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01)
                              (not (= x@130@01 from@84@01)))
                            (and
                              (= x@130@01 U@191@01)
                              (and (= U@191@01 from@84@01) (= V@192@01 to@85@01))))
                          (or
                            (and
                              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01)
                              (not (= to@85@01 y@131@01)))
                            (and
                              (= from@84@01 w@193@01)
                              (and (= to@85@01 z@194@01) (= z@194@01 y@131@01))))))
                      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@210@01  $FVF<next>)) g@83@01) x@130@01 from@84@01 U@191@01 V@192@01) (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@217@01  $FVF<next>)) g@83@01) to@85@01 y@131@01 w@193@01 z@194@01))
                      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@493@50@493@130|)))))))))
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@224@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@140@01  $FVF<next>)) g@83@01) x@130@01 y@131@01 u@132@01 v@133@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@485@13@495@57|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))))
  $Snap.unit))
; [eval] to != null ==> (forall x: Ref, y: Ref, u: Ref, v: Ref :: { DEP($$(g), x, y, u, v) } { DEP(old($$(g)), x, y, u, v) } DEP($$(g), x, y, u, v) && !DEP($$(g), x, y, from, to) ==> DEP(old($$(g)), x, y, u, v))
; [eval] to != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= to@85@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0,02s
; (get-info :all-statistics)
; [then-branch: 67 | to@85@01 != Null | live]
; [else-branch: 67 | to@85@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 67 | to@85@01 != Null]
; [eval] (forall x: Ref, y: Ref, u: Ref, v: Ref :: { DEP($$(g), x, y, u, v) } { DEP(old($$(g)), x, y, u, v) } DEP($$(g), x, y, u, v) && !DEP($$(g), x, y, from, to) ==> DEP(old($$(g)), x, y, u, v))
(declare-const x@225@01 $Ref)
(declare-const y@226@01 $Ref)
(declare-const u@227@01 $Ref)
(declare-const v@228@01 $Ref)
(push) ; 5
; [eval] DEP($$(g), x, y, u, v) && !DEP($$(g), x, y, from, to) ==> DEP(old($$(g)), x, y, u, v)
; [eval] DEP($$(g), x, y, u, v) && !DEP($$(g), x, y, from, to)
; [eval] DEP($$(g), x, y, u, v)
; [eval] $$(g)
(push) ; 6
(declare-const n@229@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@229@01 g@83@01))
(pop) ; 7
(declare-fun inv@230@01 ($Ref) $Ref)
(declare-fun img@231@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@232@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@232@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@232@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@229@01 $Ref) (n2@229@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@229@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@232@01  $FVF<next>) n1@229@01) n1@229@01))
      (and
        (Set_in n2@229@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@232@01  $FVF<next>) n2@229@01) n2@229@01))
      (= n1@229@01 n2@229@01))
    (= n1@229@01 n2@229@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@229@01 $Ref)) (!
  (=>
    (Set_in n@229@01 g@83@01)
    (and (= (inv@230@01 n@229@01) n@229@01) (img@231@01 n@229@01)))
  :pattern ((Set_in n@229@01 g@83@01))
  :pattern ((inv@230@01 n@229@01))
  :pattern ((img@231@01 n@229@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@231@01 r) (Set_in (inv@230@01 r) g@83@01)) (= (inv@230@01 r) r))
  :pattern ((inv@230@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@230@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@232@01  $FVF<next>) r) r))
  :pattern ((inv@230@01 r))
  :qid |quant-u-304|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@233@01 ((r $Ref) (x@225@01 $Ref) (y@226@01 $Ref) (u@227@01 $Ref) (v@228@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r) (= r (inv@230@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@234@01 ((r $Ref) (x@225@01 $Ref) (y@226@01 $Ref) (u@227@01 $Ref) (v@228@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r) (= r (inv@230@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@233@01 r x@225@01 y@226@01 u@227@01 v@228@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@233@01 r x@225@01 y@226@01 u@227@01 v@228@01))
    $Perm.No)
  
  :qid |quant-u-306|))))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r) (= r (inv@230@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@233@01 r x@225@01 y@226@01 u@227@01 v@228@01))
      $Perm.No))
  
  :qid |quant-u-307|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (- $Perm.Write (pTaken@234@01 from@84@01 x@225@01 y@226@01 u@227@01 v@228@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@234@01 r x@225@01 y@226@01 u@227@01 v@228@01) $Perm.No)
  
  :qid |quant-u-309|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r) (= r (inv@230@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@233@01 r x@225@01 y@226@01 u@227@01 v@228@01))
        (pTaken@234@01 r x@225@01 y@226@01 u@227@01 v@228@01))
      $Perm.No))
  
  :qid |quant-u-310|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@235@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>)))
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r)))
    (=>
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r))
      (Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>))))
  :qid |qp.fvfDomDef173|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@235@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@235@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@232@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@232@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((n@229@01 $Ref)) (!
  (=>
    (Set_in n@229@01 g@83@01)
    (and (= (inv@230@01 n@229@01) n@229@01) (img@231@01 n@229@01)))
  :pattern ((Set_in n@229@01 g@83@01))
  :pattern ((inv@230@01 n@229@01))
  :pattern ((img@231@01 n@229@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@231@01 r) (Set_in (inv@230@01 r) g@83@01)) (= (inv@230@01 r) r))
  :pattern ((inv@230@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>)))
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r)))
    (=>
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r))
      (Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>))))
  :qid |qp.fvfDomDef173|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@235@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@235@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@230@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@232@01  $FVF<next>) r) r))
    :pattern ((inv@230@01 r))
    :qid |quant-u-304|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01)))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 68 | !(DEP[Bool]($$(sm@235@01, g@83@01), x@225@01, y@226@01, u@227@01, v@228@01)) | live]
; [else-branch: 68 | DEP[Bool]($$(sm@235@01, g@83@01), x@225@01, y@226@01, u@227@01, v@228@01) | live]
(push) ; 7
; [then-branch: 68 | !(DEP[Bool]($$(sm@235@01, g@83@01), x@225@01, y@226@01, u@227@01, v@228@01))]
(assert (not
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 68 | DEP[Bool]($$(sm@235@01, g@83@01), x@225@01, y@226@01, u@227@01, v@228@01)]
(assert (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01))
; [eval] !DEP($$(g), x, y, from, to)
; [eval] DEP($$(g), x, y, from, to)
; [eval] $$(g)
(push) ; 8
(declare-const n@236@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@236@01 g@83@01))
(pop) ; 9
(declare-fun inv@237@01 ($Ref) $Ref)
(declare-fun img@238@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@239@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef176|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@236@01 $Ref) (n2@236@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@236@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n1@236@01) n1@236@01))
      (and
        (Set_in n2@236@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) n2@236@01) n2@236@01))
      (= n1@236@01 n2@236@01))
    (= n1@236@01 n2@236@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@236@01 $Ref)) (!
  (=>
    (Set_in n@236@01 g@83@01)
    (and (= (inv@237@01 n@236@01) n@236@01) (img@238@01 n@236@01)))
  :pattern ((Set_in n@236@01 g@83@01))
  :pattern ((inv@237@01 n@236@01))
  :pattern ((img@238@01 n@236@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@238@01 r) (Set_in (inv@237@01 r) g@83@01)) (= (inv@237@01 r) r))
  :pattern ((inv@237@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@237@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) r) r))
  :pattern ((inv@237@01 r))
  :qid |quant-u-312|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@240@01 ((r $Ref) (x@225@01 $Ref) (y@226@01 $Ref) (u@227@01 $Ref) (v@228@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r) (= r (inv@237@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@241@01 ((r $Ref) (x@225@01 $Ref) (y@226@01 $Ref) (u@227@01 $Ref) (v@228@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r) (= r (inv@237@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@240@01 r x@225@01 y@226@01 u@227@01 v@228@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@240@01 r x@225@01 y@226@01 u@227@01 v@228@01))
    $Perm.No)
  
  :qid |quant-u-314|))))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r) (= r (inv@237@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@240@01 r x@225@01 y@226@01 u@227@01 v@228@01))
      $Perm.No))
  
  :qid |quant-u-315|))))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (- $Perm.Write (pTaken@241@01 from@84@01 x@225@01 y@226@01 u@227@01 v@228@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@241@01 r x@225@01 y@226@01 u@227@01 v@228@01) $Perm.No)
  
  :qid |quant-u-317|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r) (= r (inv@237@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@240@01 r x@225@01 y@226@01 u@227@01 v@228@01))
        (pTaken@241@01 r x@225@01 y@226@01 u@227@01 v@228@01))
      $Perm.No))
  
  :qid |quant-u-318|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@242@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r)))
    (=>
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r))
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert (forall ((n@236@01 $Ref)) (!
  (=>
    (Set_in n@236@01 g@83@01)
    (and (= (inv@237@01 n@236@01) n@236@01) (img@238@01 n@236@01)))
  :pattern ((Set_in n@236@01 g@83@01))
  :pattern ((inv@237@01 n@236@01))
  :pattern ((img@238@01 n@236@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@238@01 r) (Set_in (inv@237@01 r) g@83@01)) (= (inv@237@01 r) r))
  :pattern ((inv@237@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r)))
    (=>
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r))
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@237@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) r) r))
    :pattern ((inv@237@01 r))
    :qid |quant-u-312|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert (forall ((n@236@01 $Ref)) (!
  (=>
    (Set_in n@236@01 g@83@01)
    (and (= (inv@237@01 n@236@01) n@236@01) (img@238@01 n@236@01)))
  :pattern ((Set_in n@236@01 g@83@01))
  :pattern ((inv@237@01 n@236@01))
  :pattern ((img@238@01 n@236@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@238@01 r) (Set_in (inv@237@01 r) g@83@01)) (= (inv@237@01 r) r))
  :pattern ((inv@237@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r)))
    (=>
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r))
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert (=>
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@237@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) r) r))
      :pattern ((inv@237@01 r))
      :qid |quant-u-312|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01))))
(assert (or
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 69 | DEP[Bool]($$(sm@235@01, g@83@01), x@225@01, y@226@01, u@227@01, v@228@01) && !(DEP[Bool]($$(sm@242@01, g@83@01), x@225@01, y@226@01, from@84@01, to@85@01)) | live]
; [else-branch: 69 | !(DEP[Bool]($$(sm@235@01, g@83@01), x@225@01, y@226@01, u@227@01, v@228@01) && !(DEP[Bool]($$(sm@242@01, g@83@01), x@225@01, y@226@01, from@84@01, to@85@01))) | live]
(push) ; 7
; [then-branch: 69 | DEP[Bool]($$(sm@235@01, g@83@01), x@225@01, y@226@01, u@227@01, v@228@01) && !(DEP[Bool]($$(sm@242@01, g@83@01), x@225@01, y@226@01, from@84@01, to@85@01))]
(assert (and
  (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
  (not
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01))))
; [eval] DEP(old($$(g)), x, y, u, v)
; [eval] old($$(g))
; [eval] $$(g)
(push) ; 8
(declare-const n@243@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@243@01 g@83@01))
(pop) ; 9
(declare-fun inv@244@01 ($Ref) $Ref)
(declare-fun img@245@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@246@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef183|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@243@01 $Ref) (n2@243@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@243@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) n1@243@01) n1@243@01))
      (and
        (Set_in n2@243@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) n2@243@01) n2@243@01))
      (= n1@243@01 n2@243@01))
    (= n1@243@01 n2@243@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@243@01 $Ref)) (!
  (=>
    (Set_in n@243@01 g@83@01)
    (and (= (inv@244@01 n@243@01) n@243@01) (img@245@01 n@243@01)))
  :pattern ((Set_in n@243@01 g@83@01))
  :pattern ((inv@244@01 n@243@01))
  :pattern ((img@245@01 n@243@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@245@01 r) (Set_in (inv@244@01 r) g@83@01)) (= (inv@244@01 r) r))
  :pattern ((inv@244@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@244@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) r) r))
  :pattern ((inv@244@01 r))
  :qid |quant-u-320|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@247@01 ((r $Ref) (x@225@01 $Ref) (y@226@01 $Ref) (u@227@01 $Ref) (v@228@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r) (= r (inv@244@01 r)))
    ($Perm.min
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@248@01 ((r $Ref) (x@225@01 $Ref) (y@226@01 $Ref) (u@227@01 $Ref) (v@228@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r) (= r (inv@244@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@247@01 r x@225@01 y@226@01 u@227@01 v@228@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@91@01 r)
          (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@247@01 r x@225@01 y@226@01 u@227@01 v@228@01))
    $Perm.No)
  
  :qid |quant-u-322|))))
(check-sat)
; unsat
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r) (= r (inv@244@01 r)))
    (=
      (-
        (/ (to_real 1) (to_real 2))
        (pTaken@247@01 r x@225@01 y@226@01 u@227@01 v@228@01))
      $Perm.No))
  
  :qid |quant-u-323|))))
(check-sat)
; unknown
(pop) ; 9
; 0,51s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (- $Perm.Write (pTaken@248@01 from@84@01 x@225@01 y@226@01 u@227@01 v@228@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@248@01 r x@225@01 y@226@01 u@227@01 v@228@01) $Perm.No)
  
  :qid |quant-u-325|))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r) (= r (inv@244@01 r)))
    (=
      (-
        (-
          (/ (to_real 1) (to_real 2))
          (pTaken@247@01 r x@225@01 y@226@01 u@227@01 v@228@01))
        (pTaken@248@01 r x@225@01 y@226@01 u@227@01 v@228@01))
      $Perm.No))
  
  :qid |quant-u-326|))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@249@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>)))
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r)))
    (=>
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r))
      (Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>))))
  :qid |qp.fvfDomDef187|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef186|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@249@01  $FVF<next>)) g@83@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef183|)))
(assert (forall ((n@243@01 $Ref)) (!
  (=>
    (Set_in n@243@01 g@83@01)
    (and (= (inv@244@01 n@243@01) n@243@01) (img@245@01 n@243@01)))
  :pattern ((Set_in n@243@01 g@83@01))
  :pattern ((inv@244@01 n@243@01))
  :pattern ((img@245@01 n@243@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@245@01 r) (Set_in (inv@244@01 r) g@83@01)) (= (inv@244@01 r) r))
  :pattern ((inv@244@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>)))
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r)))
    (=>
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r))
      (Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>))))
  :qid |qp.fvfDomDef187|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef186|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@244@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) r) r))
    :pattern ((inv@244@01 r))
    :qid |quant-u-320|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@249@01  $FVF<next>)) g@83@01)))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 69 | !(DEP[Bool]($$(sm@235@01, g@83@01), x@225@01, y@226@01, u@227@01, v@228@01) && !(DEP[Bool]($$(sm@242@01, g@83@01), x@225@01, y@226@01, from@84@01, to@85@01)))]
(assert (not
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef183|)))
(assert (forall ((n@243@01 $Ref)) (!
  (=>
    (Set_in n@243@01 g@83@01)
    (and (= (inv@244@01 n@243@01) n@243@01) (img@245@01 n@243@01)))
  :pattern ((Set_in n@243@01 g@83@01))
  :pattern ((inv@244@01 n@243@01))
  :pattern ((img@245@01 n@243@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@245@01 r) (Set_in (inv@244@01 r) g@83@01)) (= (inv@244@01 r) r))
  :pattern ((inv@244@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>)))
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r)))
    (=>
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r))
      (Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>))))
  :qid |qp.fvfDomDef187|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef186|)))
(assert (=>
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@244@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) r) r))
      :pattern ((inv@244@01 r))
      :qid |quant-u-320|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@249@01  $FVF<next>)) g@83@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01))))
  (and
    (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
    (not
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@232@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@232@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((n@229@01 $Ref)) (!
  (=>
    (Set_in n@229@01 g@83@01)
    (and (= (inv@230@01 n@229@01) n@229@01) (img@231@01 n@229@01)))
  :pattern ((Set_in n@229@01 g@83@01))
  :pattern ((inv@230@01 n@229@01))
  :pattern ((img@231@01 n@229@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@231@01 r) (Set_in (inv@230@01 r) g@83@01)) (= (inv@230@01 r) r))
  :pattern ((inv@230@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>)))
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r)))
    (=>
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r))
      (Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>))))
  :qid |qp.fvfDomDef173|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@235@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@235@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert (forall ((n@236@01 $Ref)) (!
  (=>
    (Set_in n@236@01 g@83@01)
    (and (= (inv@237@01 n@236@01) n@236@01) (img@238@01 n@236@01)))
  :pattern ((Set_in n@236@01 g@83@01))
  :pattern ((inv@237@01 n@236@01))
  :pattern ((img@238@01 n@236@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@238@01 r) (Set_in (inv@237@01 r) g@83@01)) (= (inv@237@01 r) r))
  :pattern ((inv@237@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r)))
    (=>
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r))
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef183|)))
(assert (forall ((n@243@01 $Ref)) (!
  (=>
    (Set_in n@243@01 g@83@01)
    (and (= (inv@244@01 n@243@01) n@243@01) (img@245@01 n@243@01)))
  :pattern ((Set_in n@243@01 g@83@01))
  :pattern ((inv@244@01 n@243@01))
  :pattern ((img@245@01 n@243@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@245@01 r) (Set_in (inv@244@01 r) g@83@01)) (= (inv@244@01 r) r))
  :pattern ((inv@244@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>)))
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r)))
    (=>
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r))
      (Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>))))
  :qid |qp.fvfDomDef187|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef186|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@230@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@232@01  $FVF<next>) r) r))
  :pattern ((inv@230@01 r))
  :qid |quant-u-304|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((x@225@01 $Ref) (y@226@01 $Ref) (u@227@01 $Ref) (v@228@01 $Ref)) (!
  (and
    (=>
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@237@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) r) r))
          :pattern ((inv@237@01 r))
          :qid |quant-u-312|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01)))
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)))
    (=>
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@244@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) r) r))
          :pattern ((inv@244@01 r))
          :qid |quant-u-320|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@249@01  $FVF<next>)) g@83@01)))
    (or
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@497@9@501@106-aux|)))
(assert (forall ((x@225@01 $Ref) (y@226@01 $Ref) (u@227@01 $Ref) (v@228@01 $Ref)) (!
  (and
    (=>
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@237@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) r) r))
          :pattern ((inv@237@01 r))
          :qid |quant-u-312|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01)))
    (or
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
      (not
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)))
    (=>
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@244@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) r) r))
          :pattern ((inv@244@01 r))
          :qid |quant-u-320|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@249@01  $FVF<next>)) g@83@01)))
    (or
      (not
        (and
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01))))
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))))
  :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@249@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@497@9@501@106-aux|)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@232@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@232@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@232@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef169|)))
(assert (forall ((n@229@01 $Ref)) (!
  (=>
    (Set_in n@229@01 g@83@01)
    (and (= (inv@230@01 n@229@01) n@229@01) (img@231@01 n@229@01)))
  :pattern ((Set_in n@229@01 g@83@01))
  :pattern ((inv@230@01 n@229@01))
  :pattern ((img@231@01 n@229@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@231@01 r) (Set_in (inv@230@01 r) g@83@01)) (= (inv@230@01 r) r))
  :pattern ((inv@230@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>)))
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r)))
    (=>
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r))
      (Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@235@01  $FVF<next>))))
  :qid |qp.fvfDomDef173|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@235@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@230@01 r) g@83@01) (img@231@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@235@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@235@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef172|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@239@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef175|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@239@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef176|)))
(assert (forall ((n@236@01 $Ref)) (!
  (=>
    (Set_in n@236@01 g@83@01)
    (and (= (inv@237@01 n@236@01) n@236@01) (img@238@01 n@236@01)))
  :pattern ((Set_in n@236@01 g@83@01))
  :pattern ((inv@237@01 n@236@01))
  :pattern ((img@238@01 n@236@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@238@01 r) (Set_in (inv@237@01 r) g@83@01)) (= (inv@237@01 r) r))
  :pattern ((inv@237@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r)))
    (=>
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r))
      (Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@242@01  $FVF<next>))))
  :qid |qp.fvfDomDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@237@01 r) g@83@01) (img@238@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@242@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@242@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@91@01 r)
      (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@246@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@246@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef183|)))
(assert (forall ((n@243@01 $Ref)) (!
  (=>
    (Set_in n@243@01 g@83@01)
    (and (= (inv@244@01 n@243@01) n@243@01) (img@245@01 n@243@01)))
  :pattern ((Set_in n@243@01 g@83@01))
  :pattern ((inv@244@01 n@243@01))
  :pattern ((img@245@01 n@243@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@245@01 r) (Set_in (inv@244@01 r) g@83@01)) (= (inv@244@01 r) r))
  :pattern ((inv@244@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>)))
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r)))
    (=>
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r))
      (Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@249@01  $FVF<next>))))
  :qid |qp.fvfDomDef187|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@87@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@87@01  $FVF<next>) r))
  :qid |qp.fvfValDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@244@01 r) g@83@01) (img@245@01 r))
      (and
        (img@91@01 r)
        (and (Set_in (inv@90@01 r) g@83@01) (not (= (inv@90@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@249@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r)))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@87@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))) r) r))
  :pattern (($FVF.lookup_next (as sm@249@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef186|)))
(assert (=>
  (not (= to@85@01 $Ref.null))
  (and
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@230@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@232@01  $FVF<next>) r) r))
      :pattern ((inv@230@01 r))
      :qid |quant-u-304|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01)
    (forall ((x@225@01 $Ref) (y@226@01 $Ref) (u@227@01 $Ref) (v@228@01 $Ref)) (!
      (and
        (=>
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@237@01 r) g@83@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) r) r))
              :pattern ((inv@237@01 r))
              :qid |quant-u-312|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01)))
        (or
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)))
        (=>
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@244@01 r) g@83@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) r) r))
              :pattern ((inv@244@01 r))
              :qid |quant-u-320|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@249@01  $FVF<next>)) g@83@01)))
        (or
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01))))
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@497@9@501@106-aux|))
    (forall ((x@225@01 $Ref) (y@226@01 $Ref) (u@227@01 $Ref) (v@228@01 $Ref)) (!
      (and
        (=>
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@237@01 r) g@83@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@239@01  $FVF<next>) r) r))
              :pattern ((inv@237@01 r))
              :qid |quant-u-312|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01)))
        (or
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
          (not
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)))
        (=>
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01))
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@244@01 r) g@83@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@246@01  $FVF<next>) r) r))
              :pattern ((inv@244@01 r))
              :qid |quant-u-320|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@249@01  $FVF<next>)) g@83@01)))
        (or
          (not
            (and
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
              (not
                (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01))))
          (and
            (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
            (not
              (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))))
      :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@249@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01))
      :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@497@9@501@106-aux|)))))
(assert (=>
  (not (= to@85@01 $Ref.null))
  (forall ((x@225@01 $Ref) (y@226@01 $Ref) (u@227@01 $Ref) (v@228@01 $Ref)) (!
    (=>
      (and
        (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01)
        (not
          (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@242@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 from@84@01 to@85@01)))
      (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@249@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@235@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01))
    :pattern ((DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@249@01  $FVF<next>)) g@83@01) x@225@01 y@226@01 u@227@01 v@228@01))
    :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@497@9@501@106|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { exists_path($$(g), to, n) } { exists_path($$(g), from, n) } (n in g) && n != from ==> __learn_trigger__(DEP($$(g), from, n, from, from.next)))
(declare-const n@250@01 $Ref)
(push) ; 3
; [eval] (n in g) && n != from ==> __learn_trigger__(DEP($$(g), from, n, from, from.next))
; [eval] (n in g) && n != from
; [eval] (n in g)
(push) ; 4
; [then-branch: 70 | !(n@250@01 in g@83@01) | live]
; [else-branch: 70 | n@250@01 in g@83@01 | live]
(push) ; 5
; [then-branch: 70 | !(n@250@01 in g@83@01)]
(assert (not (Set_in n@250@01 g@83@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 70 | n@250@01 in g@83@01]
(assert (Set_in n@250@01 g@83@01))
; [eval] n != from
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@250@01 g@83@01) (not (Set_in n@250@01 g@83@01))))
(push) ; 4
; [then-branch: 71 | n@250@01 in g@83@01 && n@250@01 != from@84@01 | live]
; [else-branch: 71 | !(n@250@01 in g@83@01 && n@250@01 != from@84@01) | live]
(push) ; 5
; [then-branch: 71 | n@250@01 in g@83@01 && n@250@01 != from@84@01]
(assert (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01))))
; [eval] __learn_trigger__(DEP($$(g), from, n, from, from.next))
; [eval] DEP($$(g), from, n, from, from.next)
; [eval] $$(g)
(push) ; 6
(declare-const n@251@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@251@01 g@83@01))
(pop) ; 7
(declare-fun inv@252@01 ($Ref) $Ref)
(declare-fun img@253@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@254@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef190|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@251@01 $Ref) (n2@251@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@251@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@254@01  $FVF<next>) n1@251@01) n1@251@01))
      (and
        (Set_in n2@251@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@254@01  $FVF<next>) n2@251@01) n2@251@01))
      (= n1@251@01 n2@251@01))
    (= n1@251@01 n2@251@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@251@01 $Ref)) (!
  (=>
    (Set_in n@251@01 g@83@01)
    (and (= (inv@252@01 n@251@01) n@251@01) (img@253@01 n@251@01)))
  :pattern ((Set_in n@251@01 g@83@01))
  :pattern ((inv@252@01 n@251@01))
  :pattern ((img@253@01 n@251@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@253@01 r) (Set_in (inv@252@01 r) g@83@01)) (= (inv@252@01 r) r))
  :pattern ((inv@252@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@252@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@254@01  $FVF<next>) r) r))
  :pattern ((inv@252@01 r))
  :qid |quant-u-328|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@255@01 ((r $Ref) (n@250@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r) (= r (inv@252@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@256@01 ((r $Ref) (n@250@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r) (= r (inv@252@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@255@01 r n@250@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@255@01 r n@250@01))
    $Perm.No)
  
  :qid |quant-u-330|))))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r) (= r (inv@252@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@255@01 r n@250@01)) $Perm.No))
  
  :qid |quant-u-331|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@256@01 from@84@01 n@250@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@256@01 r n@250@01) $Perm.No)
  
  :qid |quant-u-333|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r) (= r (inv@252@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@255@01 r n@250@01))
        (pTaken@256@01 r n@250@01))
      $Perm.No))
  
  :qid |quant-u-334|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@257@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>)))
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r)))
    (=>
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r))
      (Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>))))
  :qid |qp.fvfDomDef194|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@257@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@257@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef193|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@257@01  $FVF<next>)) g@83@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef190|)))
(assert (forall ((n@251@01 $Ref)) (!
  (=>
    (Set_in n@251@01 g@83@01)
    (and (= (inv@252@01 n@251@01) n@251@01) (img@253@01 n@251@01)))
  :pattern ((Set_in n@251@01 g@83@01))
  :pattern ((inv@252@01 n@251@01))
  :pattern ((img@253@01 n@251@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@253@01 r) (Set_in (inv@252@01 r) g@83@01)) (= (inv@252@01 r) r))
  :pattern ((inv@252@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>)))
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r)))
    (=>
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r))
      (Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>))))
  :qid |qp.fvfDomDef194|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@257@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@257@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef193|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@252@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@254@01  $FVF<next>) r) r))
    :pattern ((inv@252@01 r))
    :qid |quant-u-328|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@257@01  $FVF<next>)) g@83@01)))
(declare-const sm@258@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@258@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@258@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@258@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@258@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@258@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef197|)))
(declare-const pm@259@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@259@01  $FPM) r)
    (+
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@259@01  $FPM) r))
  :qid |qp.resPrmSumDef198|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@258@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.perm_next (as pm@259@01  $FPM) r))
  :qid |qp.resTrgDef199|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@258@01  $FVF<next>) from@84@01) from@84@01))
(set-option :timeout 0)
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@259@01  $FPM) from@84@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 71 | !(n@250@01 in g@83@01 && n@250@01 != from@84@01)]
(assert (not (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef190|)))
(assert (forall ((n@251@01 $Ref)) (!
  (=>
    (Set_in n@251@01 g@83@01)
    (and (= (inv@252@01 n@251@01) n@251@01) (img@253@01 n@251@01)))
  :pattern ((Set_in n@251@01 g@83@01))
  :pattern ((inv@252@01 n@251@01))
  :pattern ((img@253@01 n@251@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@253@01 r) (Set_in (inv@252@01 r) g@83@01)) (= (inv@252@01 r) r))
  :pattern ((inv@252@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>)))
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r)))
    (=>
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r))
      (Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>))))
  :qid |qp.fvfDomDef194|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@257@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@257@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@258@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@258@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@258@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@258@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@258@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef197|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@259@01  $FPM) r)
    (+
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@259@01  $FPM) r))
  :qid |qp.resPrmSumDef198|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@258@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.perm_next (as pm@259@01  $FPM) r))
  :qid |qp.resTrgDef199|)))
(assert (=>
  (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01)))
  (and
    (Set_in n@250@01 g@83@01)
    (not (= n@250@01 from@84@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@252@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@254@01  $FVF<next>) r) r))
      :pattern ((inv@252@01 r))
      :qid |quant-u-328|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@257@01  $FVF<next>)) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@258@01  $FVF<next>) from@84@01) from@84@01))))
; Joined path conditions
(assert (or
  (not (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01))))
  (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01)))))
; [eval] exists_path($$(g), to, n)
; [eval] $$(g)
(push) ; 4
(declare-const n@260@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@260@01 g@83@01))
(pop) ; 5
(declare-fun inv@261@01 ($Ref) $Ref)
(declare-fun img@262@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@263@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@263@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@263@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef202|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@260@01 $Ref) (n2@260@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@260@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@263@01  $FVF<next>) n1@260@01) n1@260@01))
      (and
        (Set_in n2@260@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@263@01  $FVF<next>) n2@260@01) n2@260@01))
      (= n1@260@01 n2@260@01))
    (= n1@260@01 n2@260@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@260@01 $Ref)) (!
  (=>
    (Set_in n@260@01 g@83@01)
    (and (= (inv@261@01 n@260@01) n@260@01) (img@262@01 n@260@01)))
  :pattern ((Set_in n@260@01 g@83@01))
  :pattern ((inv@261@01 n@260@01))
  :pattern ((img@262@01 n@260@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@262@01 r) (Set_in (inv@261@01 r) g@83@01)) (= (inv@261@01 r) r))
  :pattern ((inv@261@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@261@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@263@01  $FVF<next>) r) r))
  :pattern ((inv@261@01 r))
  :qid |quant-u-336|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@264@01 ((r $Ref) (n@250@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r) (= r (inv@261@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@265@01 ((r $Ref) (n@250@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r) (= r (inv@261@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@264@01 r n@250@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@264@01 r n@250@01))
    $Perm.No)
  
  :qid |quant-u-338|))))
(check-sat)
; unsat
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r) (= r (inv@261@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@264@01 r n@250@01)) $Perm.No))
  
  :qid |quant-u-339|))))
(check-sat)
; unknown
(pop) ; 5
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@265@01 from@84@01 n@250@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@265@01 r n@250@01) $Perm.No)
  
  :qid |quant-u-341|))))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r) (= r (inv@261@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@264@01 r n@250@01))
        (pTaken@265@01 r n@250@01))
      $Perm.No))
  
  :qid |quant-u-342|))))
(check-sat)
; unsat
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@266@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>)))
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r)))
    (=>
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r))
      (Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>))))
  :qid |qp.fvfDomDef206|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@266@01  $FVF<next>)) g@83@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@263@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@263@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@260@01 $Ref)) (!
  (=>
    (Set_in n@260@01 g@83@01)
    (and (= (inv@261@01 n@260@01) n@260@01) (img@262@01 n@260@01)))
  :pattern ((Set_in n@260@01 g@83@01))
  :pattern ((inv@261@01 n@260@01))
  :pattern ((img@262@01 n@260@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@262@01 r) (Set_in (inv@261@01 r) g@83@01)) (= (inv@261@01 r) r))
  :pattern ((inv@261@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>)))
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r)))
    (=>
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r))
      (Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@261@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@263@01  $FVF<next>) r) r))
    :pattern ((inv@261@01 r))
    :qid |quant-u-336|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@266@01  $FVF<next>)) g@83@01)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@263@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@263@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@260@01 $Ref)) (!
  (=>
    (Set_in n@260@01 g@83@01)
    (and (= (inv@261@01 n@260@01) n@260@01) (img@262@01 n@260@01)))
  :pattern ((Set_in n@260@01 g@83@01))
  :pattern ((inv@261@01 n@260@01))
  :pattern ((img@262@01 n@260@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@262@01 r) (Set_in (inv@261@01 r) g@83@01)) (= (inv@261@01 r) r))
  :pattern ((inv@261@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>)))
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r)))
    (=>
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r))
      (Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@261@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@263@01  $FVF<next>) r) r))
  :pattern ((inv@261@01 r))
  :qid |quant-u-336|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@266@01  $FVF<next>)) g@83@01))
; [eval] exists_path($$(g), from, n)
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 4
(declare-const n@267@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@267@01 g@83@01))
(pop) ; 5
(declare-fun inv@268@01 ($Ref) $Ref)
(declare-fun img@269@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@270@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@270@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@270@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef209|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@267@01 $Ref) (n2@267@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@267@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@270@01  $FVF<next>) n1@267@01) n1@267@01))
      (and
        (Set_in n2@267@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@270@01  $FVF<next>) n2@267@01) n2@267@01))
      (= n1@267@01 n2@267@01))
    (= n1@267@01 n2@267@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@267@01 $Ref)) (!
  (=>
    (Set_in n@267@01 g@83@01)
    (and (= (inv@268@01 n@267@01) n@267@01) (img@269@01 n@267@01)))
  :pattern ((Set_in n@267@01 g@83@01))
  :pattern ((inv@268@01 n@267@01))
  :pattern ((img@269@01 n@267@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@269@01 r) (Set_in (inv@268@01 r) g@83@01)) (= (inv@268@01 r) r))
  :pattern ((inv@268@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@268@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@270@01  $FVF<next>) r) r))
  :pattern ((inv@268@01 r))
  :qid |quant-u-344|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@271@01 ((r $Ref) (n@250@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r) (= r (inv@268@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@272@01 ((r $Ref) (n@250@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r) (= r (inv@268@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@271@01 r n@250@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@271@01 r n@250@01))
    $Perm.No)
  
  :qid |quant-u-346|))))
(check-sat)
; unsat
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r) (= r (inv@268@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@271@01 r n@250@01)) $Perm.No))
  
  :qid |quant-u-347|))))
(check-sat)
; unknown
(pop) ; 5
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@272@01 from@84@01 n@250@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@272@01 r n@250@01) $Perm.No)
  
  :qid |quant-u-349|))))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r) (= r (inv@268@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@271@01 r n@250@01))
        (pTaken@272@01 r n@250@01))
      $Perm.No))
  
  :qid |quant-u-350|))))
(check-sat)
; unsat
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@273@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>)))
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r)))
    (=>
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r))
      (Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>))))
  :qid |qp.fvfDomDef213|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@273@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@273@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@273@01  $FVF<next>)) g@83@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@270@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@270@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@267@01 $Ref)) (!
  (=>
    (Set_in n@267@01 g@83@01)
    (and (= (inv@268@01 n@267@01) n@267@01) (img@269@01 n@267@01)))
  :pattern ((Set_in n@267@01 g@83@01))
  :pattern ((inv@268@01 n@267@01))
  :pattern ((img@269@01 n@267@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@269@01 r) (Set_in (inv@268@01 r) g@83@01)) (= (inv@268@01 r) r))
  :pattern ((inv@268@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>)))
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r)))
    (=>
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r))
      (Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@273@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@273@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@268@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@270@01  $FVF<next>) r) r))
    :pattern ((inv@268@01 r))
    :qid |quant-u-344|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@273@01  $FVF<next>)) g@83@01)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@270@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@270@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@267@01 $Ref)) (!
  (=>
    (Set_in n@267@01 g@83@01)
    (and (= (inv@268@01 n@267@01) n@267@01) (img@269@01 n@267@01)))
  :pattern ((Set_in n@267@01 g@83@01))
  :pattern ((inv@268@01 n@267@01))
  :pattern ((img@269@01 n@267@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@269@01 r) (Set_in (inv@268@01 r) g@83@01)) (= (inv@268@01 r) r))
  :pattern ((inv@268@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>)))
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r)))
    (=>
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r))
      (Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@273@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@273@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@268@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@270@01  $FVF<next>) r) r))
  :pattern ((inv@268@01 r))
  :qid |quant-u-344|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@273@01  $FVF<next>)) g@83@01))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@254@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef189|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@254@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef190|)))
(assert (forall ((n@251@01 $Ref)) (!
  (=>
    (Set_in n@251@01 g@83@01)
    (and (= (inv@252@01 n@251@01) n@251@01) (img@253@01 n@251@01)))
  :pattern ((Set_in n@251@01 g@83@01))
  :pattern ((inv@252@01 n@251@01))
  :pattern ((img@253@01 n@251@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@253@01 r) (Set_in (inv@252@01 r) g@83@01)) (= (inv@252@01 r) r))
  :pattern ((inv@252@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>)))
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r)))
    (=>
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r))
      (Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@257@01  $FVF<next>))))
  :qid |qp.fvfDomDef194|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@257@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@252@01 r) g@83@01) (img@253@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@257@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@257@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@258@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@258@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@258@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@258@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@258@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef197|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@259@01  $FPM) r)
    (+
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@259@01  $FPM) r))
  :qid |qp.resPrmSumDef198|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@258@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.perm_next (as pm@259@01  $FPM) r))
  :qid |qp.resTrgDef199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@263@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@263@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@263@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef202|)))
(assert (forall ((n@260@01 $Ref)) (!
  (=>
    (Set_in n@260@01 g@83@01)
    (and (= (inv@261@01 n@260@01) n@260@01) (img@262@01 n@260@01)))
  :pattern ((Set_in n@260@01 g@83@01))
  :pattern ((inv@261@01 n@260@01))
  :pattern ((img@262@01 n@260@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@262@01 r) (Set_in (inv@261@01 r) g@83@01)) (= (inv@261@01 r) r))
  :pattern ((inv@261@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>)))
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r)))
    (=>
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r))
      (Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@266@01  $FVF<next>))))
  :qid |qp.fvfDomDef206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@261@01 r) g@83@01) (img@262@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@266@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef204|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@266@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@270@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@270@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@270@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef209|)))
(assert (forall ((n@267@01 $Ref)) (!
  (=>
    (Set_in n@267@01 g@83@01)
    (and (= (inv@268@01 n@267@01) n@267@01) (img@269@01 n@267@01)))
  :pattern ((Set_in n@267@01 g@83@01))
  :pattern ((inv@268@01 n@267@01))
  :pattern ((img@269@01 n@267@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@269@01 r) (Set_in (inv@268@01 r) g@83@01)) (= (inv@268@01 r) r))
  :pattern ((inv@268@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>)))
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r)))
    (=>
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r))
      (Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@273@01  $FVF<next>))))
  :qid |qp.fvfDomDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@273@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@268@01 r) g@83@01) (img@269@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@273@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef211|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@273@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@261@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@263@01  $FVF<next>) r) r))
  :pattern ((inv@261@01 r))
  :qid |quant-u-336|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@266@01  $FVF<next>)) g@83@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@268@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@270@01  $FVF<next>) r) r))
  :pattern ((inv@268@01 r))
  :qid |quant-u-344|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@273@01  $FVF<next>)) g@83@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@250@01 $Ref)) (!
  (and
    (or (Set_in n@250@01 g@83@01) (not (Set_in n@250@01 g@83@01)))
    (=>
      (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01)))
      (and
        (Set_in n@250@01 g@83@01)
        (not (= n@250@01 from@84@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@252@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@254@01  $FVF<next>) r) r))
          :pattern ((inv@252@01 r))
          :qid |quant-u-328|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@257@01  $FVF<next>)) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@258@01  $FVF<next>) from@84@01) from@84@01)))
    (or
      (not (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01))))
      (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@266@01  $FVF<next>)) g@83@01) to@85@01 n@250@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@504@13@504@169-aux|)))
(assert (forall ((n@250@01 $Ref)) (!
  (and
    (or (Set_in n@250@01 g@83@01) (not (Set_in n@250@01 g@83@01)))
    (=>
      (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01)))
      (and
        (Set_in n@250@01 g@83@01)
        (not (= n@250@01 from@84@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@252@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@254@01  $FVF<next>) r) r))
          :pattern ((inv@252@01 r))
          :qid |quant-u-328|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@257@01  $FVF<next>)) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@258@01  $FVF<next>) from@84@01) from@84@01)))
    (or
      (not (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01))))
      (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@273@01  $FVF<next>)) g@83@01) from@84@01 n@250@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@504@13@504@169-aux|)))
(assert (forall ((n@250@01 $Ref)) (!
  (=>
    (and (Set_in n@250@01 g@83@01) (not (= n@250@01 from@84@01)))
    (__learn_trigger__<Bool> (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@257@01  $FVF<next>)) g@83@01) from@84@01 n@250@01 from@84@01 ($FVF.lookup_next (as sm@258@01  $FVF<next>) from@84@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@266@01  $FVF<next>)) g@83@01) to@85@01 n@250@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@273@01  $FVF<next>)) g@83@01) from@84@01 n@250@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@504@13@504@169|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { exists_path($$(g), to, n) } { exists_path($$(g), from, n) } (n in g) && n != to ==> __learn_trigger__(DEP($$(g), to, n, to, to.next)))
(declare-const n@274@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n in g) && n != to ==> __learn_trigger__(DEP($$(g), to, n, to, to.next))
; [eval] (n in g) && n != to
; [eval] (n in g)
(push) ; 4
; [then-branch: 72 | !(n@274@01 in g@83@01) | live]
; [else-branch: 72 | n@274@01 in g@83@01 | live]
(push) ; 5
; [then-branch: 72 | !(n@274@01 in g@83@01)]
(assert (not (Set_in n@274@01 g@83@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 72 | n@274@01 in g@83@01]
(assert (Set_in n@274@01 g@83@01))
; [eval] n != to
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@274@01 g@83@01) (not (Set_in n@274@01 g@83@01))))
(push) ; 4
; [then-branch: 73 | n@274@01 in g@83@01 && n@274@01 != to@85@01 | live]
; [else-branch: 73 | !(n@274@01 in g@83@01 && n@274@01 != to@85@01) | live]
(push) ; 5
; [then-branch: 73 | n@274@01 in g@83@01 && n@274@01 != to@85@01]
(assert (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01))))
; [eval] __learn_trigger__(DEP($$(g), to, n, to, to.next))
; [eval] DEP($$(g), to, n, to, to.next)
; [eval] $$(g)
(push) ; 6
(declare-const n@275@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@275@01 g@83@01))
(pop) ; 7
(declare-fun inv@276@01 ($Ref) $Ref)
(declare-fun img@277@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@278@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@278@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@278@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef216|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@275@01 $Ref) (n2@275@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@275@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@278@01  $FVF<next>) n1@275@01) n1@275@01))
      (and
        (Set_in n2@275@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@278@01  $FVF<next>) n2@275@01) n2@275@01))
      (= n1@275@01 n2@275@01))
    (= n1@275@01 n2@275@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@275@01 $Ref)) (!
  (=>
    (Set_in n@275@01 g@83@01)
    (and (= (inv@276@01 n@275@01) n@275@01) (img@277@01 n@275@01)))
  :pattern ((Set_in n@275@01 g@83@01))
  :pattern ((inv@276@01 n@275@01))
  :pattern ((img@277@01 n@275@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@277@01 r) (Set_in (inv@276@01 r) g@83@01)) (= (inv@276@01 r) r))
  :pattern ((inv@276@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@276@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@278@01  $FVF<next>) r) r))
  :pattern ((inv@276@01 r))
  :qid |quant-u-352|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@279@01 ((r $Ref) (n@274@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r) (= r (inv@276@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@280@01 ((r $Ref) (n@274@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r) (= r (inv@276@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@279@01 r n@274@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@279@01 r n@274@01))
    $Perm.No)
  
  :qid |quant-u-354|))))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r) (= r (inv@276@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@279@01 r n@274@01)) $Perm.No))
  
  :qid |quant-u-355|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@280@01 from@84@01 n@274@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@280@01 r n@274@01) $Perm.No)
  
  :qid |quant-u-357|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r) (= r (inv@276@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@279@01 r n@274@01))
        (pTaken@280@01 r n@274@01))
      $Perm.No))
  
  :qid |quant-u-358|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@281@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>)))
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r)))
    (=>
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r))
      (Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@281@01  $FVF<next>)) g@83@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@278@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@278@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@275@01 $Ref)) (!
  (=>
    (Set_in n@275@01 g@83@01)
    (and (= (inv@276@01 n@275@01) n@275@01) (img@277@01 n@275@01)))
  :pattern ((Set_in n@275@01 g@83@01))
  :pattern ((inv@276@01 n@275@01))
  :pattern ((img@277@01 n@275@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@277@01 r) (Set_in (inv@276@01 r) g@83@01)) (= (inv@276@01 r) r))
  :pattern ((inv@276@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>)))
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r)))
    (=>
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r))
      (Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@276@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@278@01  $FVF<next>) r) r))
    :pattern ((inv@276@01 r))
    :qid |quant-u-352|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@281@01  $FVF<next>)) g@83@01)))
(declare-const sm@282@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef223|)))
(declare-const pm@283@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@283@01  $FPM) r)
    (+
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@283@01  $FPM) r))
  :qid |qp.resPrmSumDef224|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@282@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.perm_next (as pm@283@01  $FPM) r))
  :qid |qp.resTrgDef225|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@282@01  $FVF<next>) to@85@01) to@85@01))
(set-option :timeout 0)
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@283@01  $FPM) to@85@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 73 | !(n@274@01 in g@83@01 && n@274@01 != to@85@01)]
(assert (not (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@278@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@278@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@275@01 $Ref)) (!
  (=>
    (Set_in n@275@01 g@83@01)
    (and (= (inv@276@01 n@275@01) n@275@01) (img@277@01 n@275@01)))
  :pattern ((Set_in n@275@01 g@83@01))
  :pattern ((inv@276@01 n@275@01))
  :pattern ((img@277@01 n@275@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@277@01 r) (Set_in (inv@276@01 r) g@83@01)) (= (inv@276@01 r) r))
  :pattern ((inv@276@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>)))
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r)))
    (=>
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r))
      (Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@283@01  $FPM) r)
    (+
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@283@01  $FPM) r))
  :qid |qp.resPrmSumDef224|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@282@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.perm_next (as pm@283@01  $FPM) r))
  :qid |qp.resTrgDef225|)))
(assert (=>
  (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01)))
  (and
    (Set_in n@274@01 g@83@01)
    (not (= n@274@01 to@85@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@276@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@278@01  $FVF<next>) r) r))
      :pattern ((inv@276@01 r))
      :qid |quant-u-352|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@281@01  $FVF<next>)) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@282@01  $FVF<next>) to@85@01) to@85@01))))
; Joined path conditions
(assert (or
  (not (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01))))
  (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01)))))
; [eval] exists_path($$(g), to, n)
; [eval] $$(g)
(push) ; 4
(declare-const n@284@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@284@01 g@83@01))
(pop) ; 5
(declare-fun inv@285@01 ($Ref) $Ref)
(declare-fun img@286@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@287@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef228|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@284@01 $Ref) (n2@284@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@284@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@287@01  $FVF<next>) n1@284@01) n1@284@01))
      (and
        (Set_in n2@284@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@287@01  $FVF<next>) n2@284@01) n2@284@01))
      (= n1@284@01 n2@284@01))
    (= n1@284@01 n2@284@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@284@01 $Ref)) (!
  (=>
    (Set_in n@284@01 g@83@01)
    (and (= (inv@285@01 n@284@01) n@284@01) (img@286@01 n@284@01)))
  :pattern ((Set_in n@284@01 g@83@01))
  :pattern ((inv@285@01 n@284@01))
  :pattern ((img@286@01 n@284@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@286@01 r) (Set_in (inv@285@01 r) g@83@01)) (= (inv@285@01 r) r))
  :pattern ((inv@285@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@285@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@287@01  $FVF<next>) r) r))
  :pattern ((inv@285@01 r))
  :qid |quant-u-360|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@288@01 ((r $Ref) (n@274@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r) (= r (inv@285@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@289@01 ((r $Ref) (n@274@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r) (= r (inv@285@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@288@01 r n@274@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@288@01 r n@274@01))
    $Perm.No)
  
  :qid |quant-u-362|))))
(check-sat)
; unsat
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r) (= r (inv@285@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@288@01 r n@274@01)) $Perm.No))
  
  :qid |quant-u-363|))))
(check-sat)
; unknown
(pop) ; 5
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@289@01 from@84@01 n@274@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@289@01 r n@274@01) $Perm.No)
  
  :qid |quant-u-365|))))
(check-sat)
; unknown
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r) (= r (inv@285@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@288@01 r n@274@01))
        (pTaken@289@01 r n@274@01))
      $Perm.No))
  
  :qid |quant-u-366|))))
(check-sat)
; unsat
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@290@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>)))
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r)))
    (=>
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r))
      (Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>))))
  :qid |qp.fvfDomDef232|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@290@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef229|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@290@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef231|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@290@01  $FVF<next>)) g@83@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef228|)))
(assert (forall ((n@284@01 $Ref)) (!
  (=>
    (Set_in n@284@01 g@83@01)
    (and (= (inv@285@01 n@284@01) n@284@01) (img@286@01 n@284@01)))
  :pattern ((Set_in n@284@01 g@83@01))
  :pattern ((inv@285@01 n@284@01))
  :pattern ((img@286@01 n@284@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@286@01 r) (Set_in (inv@285@01 r) g@83@01)) (= (inv@285@01 r) r))
  :pattern ((inv@285@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>)))
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r)))
    (=>
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r))
      (Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>))))
  :qid |qp.fvfDomDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@290@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef229|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@290@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef231|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@285@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@287@01  $FVF<next>) r) r))
    :pattern ((inv@285@01 r))
    :qid |quant-u-360|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@290@01  $FVF<next>)) g@83@01)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef228|)))
(assert (forall ((n@284@01 $Ref)) (!
  (=>
    (Set_in n@284@01 g@83@01)
    (and (= (inv@285@01 n@284@01) n@284@01) (img@286@01 n@284@01)))
  :pattern ((Set_in n@284@01 g@83@01))
  :pattern ((inv@285@01 n@284@01))
  :pattern ((img@286@01 n@284@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@286@01 r) (Set_in (inv@285@01 r) g@83@01)) (= (inv@285@01 r) r))
  :pattern ((inv@285@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>)))
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r)))
    (=>
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r))
      (Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>))))
  :qid |qp.fvfDomDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@290@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef229|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@290@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef231|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@285@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@287@01  $FVF<next>) r) r))
  :pattern ((inv@285@01 r))
  :qid |quant-u-360|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@290@01  $FVF<next>)) g@83@01))
; [eval] exists_path($$(g), from, n)
; [eval] $$(g)
(set-option :timeout 0)
(push) ; 4
(declare-const n@291@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@291@01 g@83@01))
(pop) ; 5
(declare-fun inv@292@01 ($Ref) $Ref)
(declare-fun img@293@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@294@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@294@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@294@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef234|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef235|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@291@01 $Ref) (n2@291@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@291@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@294@01  $FVF<next>) n1@291@01) n1@291@01))
      (and
        (Set_in n2@291@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@294@01  $FVF<next>) n2@291@01) n2@291@01))
      (= n1@291@01 n2@291@01))
    (= n1@291@01 n2@291@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@291@01 $Ref)) (!
  (=>
    (Set_in n@291@01 g@83@01)
    (and (= (inv@292@01 n@291@01) n@291@01) (img@293@01 n@291@01)))
  :pattern ((Set_in n@291@01 g@83@01))
  :pattern ((inv@292@01 n@291@01))
  :pattern ((img@293@01 n@291@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@293@01 r) (Set_in (inv@292@01 r) g@83@01)) (= (inv@292@01 r) r))
  :pattern ((inv@292@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@292@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@294@01  $FVF<next>) r) r))
  :pattern ((inv@292@01 r))
  :qid |quant-u-368|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@295@01 ((r $Ref) (n@274@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r) (= r (inv@292@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@296@01 ((r $Ref) (n@274@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r) (= r (inv@292@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@295@01 r n@274@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@295@01 r n@274@01))
    $Perm.No)
  
  :qid |quant-u-370|))))
(check-sat)
; unsat
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r) (= r (inv@292@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@295@01 r n@274@01)) $Perm.No))
  
  :qid |quant-u-371|))))
(check-sat)
; unknown
(pop) ; 5
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@296@01 from@84@01 n@274@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0,51s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@296@01 r n@274@01) $Perm.No)
  
  :qid |quant-u-373|))))
(check-sat)
; unknown
(pop) ; 5
; 0,02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r) (= r (inv@292@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@295@01 r n@274@01))
        (pTaken@296@01 r n@274@01))
      $Perm.No))
  
  :qid |quant-u-374|))))
(check-sat)
; unsat
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@297@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>)))
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r)))
    (=>
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r))
      (Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>))))
  :qid |qp.fvfDomDef239|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@297@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@297@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef237|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef238|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@297@01  $FVF<next>)) g@83@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@294@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@294@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef234|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef235|)))
(assert (forall ((n@291@01 $Ref)) (!
  (=>
    (Set_in n@291@01 g@83@01)
    (and (= (inv@292@01 n@291@01) n@291@01) (img@293@01 n@291@01)))
  :pattern ((Set_in n@291@01 g@83@01))
  :pattern ((inv@292@01 n@291@01))
  :pattern ((img@293@01 n@291@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@293@01 r) (Set_in (inv@292@01 r) g@83@01)) (= (inv@292@01 r) r))
  :pattern ((inv@292@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>)))
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r)))
    (=>
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r))
      (Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>))))
  :qid |qp.fvfDomDef239|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@297@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@297@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef237|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef238|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@292@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@294@01  $FVF<next>) r) r))
    :pattern ((inv@292@01 r))
    :qid |quant-u-368|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@297@01  $FVF<next>)) g@83@01)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@294@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@294@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef234|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef235|)))
(assert (forall ((n@291@01 $Ref)) (!
  (=>
    (Set_in n@291@01 g@83@01)
    (and (= (inv@292@01 n@291@01) n@291@01) (img@293@01 n@291@01)))
  :pattern ((Set_in n@291@01 g@83@01))
  :pattern ((inv@292@01 n@291@01))
  :pattern ((img@293@01 n@291@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@293@01 r) (Set_in (inv@292@01 r) g@83@01)) (= (inv@292@01 r) r))
  :pattern ((inv@292@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>)))
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r)))
    (=>
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r))
      (Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>))))
  :qid |qp.fvfDomDef239|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@297@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@297@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef237|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef238|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@292@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@294@01  $FVF<next>) r) r))
  :pattern ((inv@292@01 r))
  :qid |quant-u-368|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@297@01  $FVF<next>)) g@83@01))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@278@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@278@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@278@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((n@275@01 $Ref)) (!
  (=>
    (Set_in n@275@01 g@83@01)
    (and (= (inv@276@01 n@275@01) n@275@01) (img@277@01 n@275@01)))
  :pattern ((Set_in n@275@01 g@83@01))
  :pattern ((inv@276@01 n@275@01))
  :pattern ((img@277@01 n@275@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@277@01 r) (Set_in (inv@276@01 r) g@83@01)) (= (inv@276@01 r) r))
  :pattern ((inv@276@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>)))
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r)))
    (=>
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r))
      (Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@281@01  $FVF<next>))))
  :qid |qp.fvfDomDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@276@01 r) g@83@01) (img@277@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@281@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@281@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef221|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef222|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef223|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@283@01  $FPM) r)
    (+
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@283@01  $FPM) r))
  :qid |qp.resPrmSumDef224|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@282@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.perm_next (as pm@283@01  $FPM) r))
  :qid |qp.resTrgDef225|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef228|)))
(assert (forall ((n@284@01 $Ref)) (!
  (=>
    (Set_in n@284@01 g@83@01)
    (and (= (inv@285@01 n@284@01) n@284@01) (img@286@01 n@284@01)))
  :pattern ((Set_in n@284@01 g@83@01))
  :pattern ((inv@285@01 n@284@01))
  :pattern ((img@286@01 n@284@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@286@01 r) (Set_in (inv@285@01 r) g@83@01)) (= (inv@285@01 r) r))
  :pattern ((inv@285@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>)))
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r)))
    (=>
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r))
      (Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@290@01  $FVF<next>))))
  :qid |qp.fvfDomDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@290@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef229|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g@83@01) (img@286@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@290@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef230|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@290@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef231|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@294@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef233|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@294@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef234|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@294@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef235|)))
(assert (forall ((n@291@01 $Ref)) (!
  (=>
    (Set_in n@291@01 g@83@01)
    (and (= (inv@292@01 n@291@01) n@291@01) (img@293@01 n@291@01)))
  :pattern ((Set_in n@291@01 g@83@01))
  :pattern ((inv@292@01 n@291@01))
  :pattern ((img@293@01 n@291@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@293@01 r) (Set_in (inv@292@01 r) g@83@01)) (= (inv@292@01 r) r))
  :pattern ((inv@292@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>)))
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r)))
    (=>
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r))
      (Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@297@01  $FVF<next>))))
  :qid |qp.fvfDomDef239|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@297@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef236|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@292@01 r) g@83@01) (img@293@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@297@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef237|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@297@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef238|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@285@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@287@01  $FVF<next>) r) r))
  :pattern ((inv@285@01 r))
  :qid |quant-u-360|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@290@01  $FVF<next>)) g@83@01))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@292@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@294@01  $FVF<next>) r) r))
  :pattern ((inv@292@01 r))
  :qid |quant-u-368|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@297@01  $FVF<next>)) g@83@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@274@01 $Ref)) (!
  (and
    (or (Set_in n@274@01 g@83@01) (not (Set_in n@274@01 g@83@01)))
    (=>
      (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01)))
      (and
        (Set_in n@274@01 g@83@01)
        (not (= n@274@01 to@85@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@276@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@278@01  $FVF<next>) r) r))
          :pattern ((inv@276@01 r))
          :qid |quant-u-352|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@281@01  $FVF<next>)) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@282@01  $FVF<next>) to@85@01) to@85@01)))
    (or
      (not (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01))))
      (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@290@01  $FVF<next>)) g@83@01) to@85@01 n@274@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@505@13@505@169-aux|)))
(assert (forall ((n@274@01 $Ref)) (!
  (and
    (or (Set_in n@274@01 g@83@01) (not (Set_in n@274@01 g@83@01)))
    (=>
      (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01)))
      (and
        (Set_in n@274@01 g@83@01)
        (not (= n@274@01 to@85@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@276@01 r) g@83@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@278@01  $FVF<next>) r) r))
          :pattern ((inv@276@01 r))
          :qid |quant-u-352|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@281@01  $FVF<next>)) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@282@01  $FVF<next>) to@85@01) to@85@01)))
    (or
      (not (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01))))
      (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@297@01  $FVF<next>)) g@83@01) from@84@01 n@274@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@505@13@505@169-aux|)))
(assert (forall ((n@274@01 $Ref)) (!
  (=>
    (and (Set_in n@274@01 g@83@01) (not (= n@274@01 to@85@01)))
    (__learn_trigger__<Bool> (DEP<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@281@01  $FVF<next>)) g@83@01) to@85@01 n@274@01 to@85@01 ($FVF.lookup_next (as sm@282@01  $FVF<next>) to@85@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@290@01  $FVF<next>)) g@83@01) to@85@01 n@274@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@297@01  $FVF<next>)) g@83@01) from@84@01 n@274@01))
  :qid |prog./silicon/silver/src/test/resources/graphs/static/examples/ring-insert.vpr@505@13@505@169|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@01)))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { exists_path($$(g), n, to) } { exists_path($$(g), n, from) } (n in g) && n != from ==> __learn_trigger__(DEP($$(g), n, from, n, n.next)))
(declare-const n@298@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n in g) && n != from ==> __learn_trigger__(DEP($$(g), n, from, n, n.next))
; [eval] (n in g) && n != from
; [eval] (n in g)
(push) ; 4
; [then-branch: 74 | !(n@298@01 in g@83@01) | live]
; [else-branch: 74 | n@298@01 in g@83@01 | live]
(push) ; 5
; [then-branch: 74 | !(n@298@01 in g@83@01)]
(assert (not (Set_in n@298@01 g@83@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 74 | n@298@01 in g@83@01]
(assert (Set_in n@298@01 g@83@01))
; [eval] n != from
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in n@298@01 g@83@01) (not (Set_in n@298@01 g@83@01))))
(push) ; 4
; [then-branch: 75 | n@298@01 in g@83@01 && n@298@01 != from@84@01 | live]
; [else-branch: 75 | !(n@298@01 in g@83@01 && n@298@01 != from@84@01) | live]
(push) ; 5
; [then-branch: 75 | n@298@01 in g@83@01 && n@298@01 != from@84@01]
(assert (and (Set_in n@298@01 g@83@01) (not (= n@298@01 from@84@01))))
; [eval] __learn_trigger__(DEP($$(g), n, from, n, n.next))
; [eval] DEP($$(g), n, from, n, n.next)
; [eval] $$(g)
(push) ; 6
(declare-const n@299@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@299@01 g@83@01))
(pop) ; 7
(declare-fun inv@300@01 ($Ref) $Ref)
(declare-fun img@301@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@302@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef240|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@299@01 $Ref) (n2@299@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@299@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) n1@299@01) n1@299@01))
      (and
        (Set_in n2@299@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) n2@299@01) n2@299@01))
      (= n1@299@01 n2@299@01))
    (= n1@299@01 n2@299@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@299@01 $Ref)) (!
  (=>
    (Set_in n@299@01 g@83@01)
    (and (= (inv@300@01 n@299@01) n@299@01) (img@301@01 n@299@01)))
  :pattern ((Set_in n@299@01 g@83@01))
  :pattern ((inv@300@01 n@299@01))
  :pattern ((img@301@01 n@299@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@301@01 r) (Set_in (inv@300@01 r) g@83@01)) (= (inv@300@01 r) r))
  :pattern ((inv@300@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@300@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) r) r))
  :pattern ((inv@300@01 r))
  :qid |quant-u-376|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@303@01 ((r $Ref) (n@298@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r) (= r (inv@300@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@304@01 ((r $Ref) (n@298@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r) (= r (inv@300@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@303@01 r n@298@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@303@01 r n@298@01))
    $Perm.No)
  
  :qid |quant-u-378|))))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r) (= r (inv@300@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@303@01 r n@298@01)) $Perm.No))
  
  :qid |quant-u-379|))))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@304@01 from@84@01 n@298@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0,50s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@304@01 r n@298@01) $Perm.No)
  
  :qid |quant-u-381|))))
(check-sat)
; unknown
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r) (= r (inv@300@01 r)))
    (=
      (-
        (- (/ (to_real 1) (to_real 2)) (pTaken@303@01 r n@298@01))
        (pTaken@304@01 r n@298@01))
      $Perm.No))
  
  :qid |quant-u-382|))))
(check-sat)
; unsat
(pop) ; 7
; 0,01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@305@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@305@01  $FVF<next>)))
      (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r)))
    (=>
      (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r))
      (Set_in r ($FVF.domain_next (as sm@305@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@305@01  $FVF<next>))))
  :qid |qp.fvfDomDef246|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@305@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@305@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef244|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef245|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@305@01  $FVF<next>)) g@83@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef240|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
(assert (forall ((n@299@01 $Ref)) (!
  (=>
    (Set_in n@299@01 g@83@01)
    (and (= (inv@300@01 n@299@01) n@299@01) (img@301@01 n@299@01)))
  :pattern ((Set_in n@299@01 g@83@01))
  :pattern ((inv@300@01 n@299@01))
  :pattern ((img@301@01 n@299@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@301@01 r) (Set_in (inv@300@01 r) g@83@01)) (= (inv@300@01 r) r))
  :pattern ((inv@300@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@305@01  $FVF<next>)))
      (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r)))
    (=>
      (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r))
      (Set_in r ($FVF.domain_next (as sm@305@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@305@01  $FVF<next>))))
  :qid |qp.fvfDomDef246|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@305@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@305@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef244|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef245|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@300@01 r) g@83@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) r) r))
    :pattern ((inv@300@01 r))
    :qid |quant-u-376|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@305@01  $FVF<next>)) g@83@01)))
(declare-const sm@306@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@306@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@306@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef247|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@306@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@306@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@306@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef249|)))
(declare-const pm@307@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@307@01  $FPM) r)
    (+
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@307@01  $FPM) r))
  :qid |qp.resPrmSumDef250|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@306@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.perm_next (as pm@307@01  $FPM) r))
  :qid |qp.resTrgDef251|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@306@01  $FVF<next>) n@298@01) n@298@01))
(set-option :timeout 0)
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@307@01  $FPM) n@298@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 75 | !(n@298@01 in g@83@01 && n@298@01 != from@84@01)]
(assert (not (and (Set_in n@298@01 g@83@01) (not (= n@298@01 from@84@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef240|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@302@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef241|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@302@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef242|)))
(assert (forall ((n@299@01 $Ref)) (!
  (=>
    (Set_in n@299@01 g@83@01)
    (and (= (inv@300@01 n@299@01) n@299@01) (img@301@01 n@299@01)))
  :pattern ((Set_in n@299@01 g@83@01))
  :pattern ((inv@300@01 n@299@01))
  :pattern ((img@301@01 n@299@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@301@01 r) (Set_in (inv@300@01 r) g@83@01)) (= (inv@300@01 r) r))
  :pattern ((inv@300@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@305@01  $FVF<next>)))
      (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r)))
    (=>
      (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r))
      (Set_in r ($FVF.domain_next (as sm@305@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@305@01  $FVF<next>))))
  :qid |qp.fvfDomDef246|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r)) (= r from@84@01))
    (=
      ($FVF.lookup_next (as sm@305@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@300@01 r) g@83@01) (img@301@01 r))
      (and
        (img@105@01 r)
        (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01)))))
    (=
      ($FVF.lookup_next (as sm@305@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef244|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@305@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef245|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@306@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@306@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef247|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@306@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@306@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef248|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@306@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef249|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@307@01  $FPM) r)
    (+
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@307@01  $FPM) r))
  :qid |qp.resPrmSumDef250|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@306@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.perm_next (as pm@307@01  $FPM) r))
  :qid |qp.resTrgDef251|)))
(assert (=>
  (and (Set_in n@298@01 g@83@01) (not (= n@298@01 from@84@01)))
  (and
    (Set_in n@298@01 g@83@01)
    (not (= n@298@01 from@84@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@300@01 r) g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@302@01  $FVF<next>) r) r))
      :pattern ((inv@300@01 r))
      :qid |quant-u-376|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@305@01  $FVF<next>)) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@306@01  $FVF<next>) n@298@01) n@298@01))))
; Joined path conditions
(assert (or
  (not (and (Set_in n@298@01 g@83@01) (not (= n@298@01 from@84@01))))
  (and (Set_in n@298@01 g@83@01) (not (= n@298@01 from@84@01)))))
; [eval] exists_path($$(g), n, to)
; [eval] $$(g)
(push) ; 4
(declare-const n@308@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@308@01 g@83@01))
(pop) ; 5
(declare-fun inv@309@01 ($Ref) $Ref)
(declare-fun img@310@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@311@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r from@84@01)
    (=
      ($FVF.lookup_next (as sm@311@01  $FVF<next>) r)
      ($FVF.lookup_next (as sm@101@01  $FVF<next>) r)))
  :pattern (($FVF.lookup_next (as sm@311@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next (as sm@101@01  $FVF<next>) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@105@01 r)
      (and (Set_in (inv@104@01 r) g@83@01) (not (= (inv@104@01 r) from@84@01))))
    (=
      ($FVF.lookup_next (as sm@311@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r)))
  :pattern (($FVF.lookup_next (as sm@311@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@101@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@01))))) r) r))
  :pattern (($FVF.lookup_next (as sm@311@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef254|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@308@01 $Ref) (n2@308@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@308@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@311@01  $FVF<next>) n1@308@01) n1@308@01))
      (and
        (Set_in n2@308@01 g@83@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@311@01  $FVF<next>) n2@308@01) n2@308@01))
      (= n1@308@01 n2@308@01))
    (= n1@308@01 n2@308@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 g@83@01)
    (and (= (inv@309@01 n@308@01) n@308@01) (img@310@01 n@308@01)))
  :pattern ((Set_in n@308@01 g@83@01))
  :pattern ((inv@309@01 n@308@01))
  :pattern ((img@310@01 n@308@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@310@01 r) (Set_in (inv@309@01 r) g@83@01)) (= (inv@309@01 r) r))
  :pattern ((inv@309@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@309@01 r) g@83@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@311@01  $FVF<next>) r) r))
  :pattern ((inv@309@01 r))
  :qid |quant-u-384|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@312@01 ((r $Ref) (n@298@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@309@01 r) g@83@01) (img@310@01 r) (= r (inv@309@01 r)))
    ($Perm.min
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@313@01 ((r $Ref) (n@298@01 $Ref)) $Perm
  (ite
    (and (Set_in (inv@309@01 r) g@83@01) (img@310@01 r) (= r (inv@309@01 r)))
    ($Perm.min
      (ite (= r from@84@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@312@01 r n@298@01)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@105@01 r)
          (and
            (Set_in (inv@104@01 r) g@83@01)
            (not (= (inv@104@01 r) from@84@01))))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (pTaken@312@01 r n@298@01))
    $Perm.No)
  
  :qid |quant-u-386|))))
(check-sat)
; unsat
(pop) ; 5
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@309@01 r) g@83@01) (img@310@01 r) (= r (inv@309@01 r)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@312@01 r n@298@01)) $Perm.No))
  
  :qid |quant-u-387|))))
(check-sat)
; unknown
(pop) ; 5
; 0,50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@313@01 from@84@01 n@298@01)) $Perm.No)))
(check-sat)
