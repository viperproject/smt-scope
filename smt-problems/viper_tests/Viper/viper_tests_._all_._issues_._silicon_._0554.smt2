(get-info :version)
; (:version "4.12.1")
; Started: 2023-10-31 14:08:51
; Silicon.version: 1.1-SNAPSHOT (46944a65@dspil_symbenchmarking)
; Input file: /home/pcorrect/repos/benchmarking_general/silicon_tests/viper_tests_._all_._issues_._silicon_._0554.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; ////////// Symbols
; Declaring symbols related to program functions (from program analysis)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun tree%trigger ($Snap $Ref) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- treeTest ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var t: Ref
(declare-const t@0@01 $Ref)
; [exec]
; var t0: Ref
(declare-const t0@1@01 $Ref)
; [exec]
; var t1: Ref
(declare-const t1@2@01 $Ref)
; [exec]
; var t2: Ref
(declare-const t2@3@01 $Ref)
; [exec]
; var t5: Ref
(declare-const t5@4@01 $Ref)
; [exec]
; var ctr: Ref
(declare-const ctr@5@01 $Ref)
; [exec]
; t := new(data, next_child, next_sibling)
(declare-const t@6@01 $Ref)
(assert (not (= t@6@01 $Ref.null)))
(declare-const data@7@01 Int)
(declare-const next_child@8@01 $Ref)
(declare-const next_sibling@9@01 $Ref)
(assert (not (= t@6@01 t5@4@01)))
(assert (not (= t@6@01 t@0@01)))
(assert (not (= t@6@01 t0@1@01)))
(assert (not (= t@6@01 t1@2@01)))
(assert (not (= t@6@01 t2@3@01)))
(assert (not (= t@6@01 ctr@5@01)))
; [exec]
; t.next_child := null
; [exec]
; t.next_sibling := null
; [exec]
; fold acc(tree(t), write)
; [eval] this.next_child != null
; [then-branch: 0 | False | dead]
; [else-branch: 0 | True | live]
(push) ; 3
; [else-branch: 0 | True]
; [eval] this.next_sibling != null
; [then-branch: 1 | False | dead]
; [else-branch: 1 | True | live]
(push) ; 4
; [else-branch: 1 | True]
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 5
; [then-branch: 2 | True | live]
; [else-branch: 2 | False | live]
(push) ; 6
; [then-branch: 2 | True]
; [eval] this.next_sibling == null
(pop) ; 6
(push) ; 6
; [else-branch: 2 | False]
(assert false)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (tree%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap data@7@01)
  ($Snap.combine
    ($SortWrappers.$RefTo$Snap $Ref.null)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap $Ref.null)
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit))))) t@6@01))
; [exec]
; t0 := new(data, next_child, next_sibling)
(declare-const t0@10@01 $Ref)
(assert (not (= t0@10@01 $Ref.null)))
(declare-const data@11@01 Int)
(declare-const next_child@12@01 $Ref)
(declare-const next_sibling@13@01 $Ref)
(assert (not (= t0@10@01 t5@4@01)))
(assert (not (= t0@10@01 t0@1@01)))
(assert (not (= t0@10@01 t1@2@01)))
(assert (not (= t0@10@01 t2@3@01)))
(assert (not (= t0@10@01 ctr@5@01)))
(assert (not (= t0@10@01 t@6@01)))
; [exec]
; t0.next_child := null
; [exec]
; t0.next_sibling := null
; [exec]
; fold acc(tree(t0), write)
; [eval] this.next_child != null
; [then-branch: 3 | False | dead]
; [else-branch: 3 | True | live]
(push) ; 5
; [else-branch: 3 | True]
; [eval] this.next_sibling != null
; [then-branch: 4 | False | dead]
; [else-branch: 4 | True | live]
(push) ; 6
; [else-branch: 4 | True]
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 7
; [then-branch: 5 | True | live]
; [else-branch: 5 | False | live]
(push) ; 8
; [then-branch: 5 | True]
; [eval] this.next_sibling == null
(pop) ; 8
(push) ; 8
; [else-branch: 5 | False]
(assert false)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (tree%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap data@11@01)
  ($Snap.combine
    ($SortWrappers.$RefTo$Snap $Ref.null)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap $Ref.null)
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit))))) t0@10@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (= t@6@01 t0@10@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; t1 := new(data, next_child, next_sibling)
(declare-const t1@14@01 $Ref)
(assert (not (= t1@14@01 $Ref.null)))
(declare-const data@15@01 Int)
(declare-const next_child@16@01 $Ref)
(declare-const next_sibling@17@01 $Ref)
(assert (not (= t1@14@01 t5@4@01)))
(assert (not (= t1@14@01 t0@10@01)))
(assert (not (= t1@14@01 t1@2@01)))
(assert (not (= t1@14@01 t2@3@01)))
(assert (not (= t1@14@01 ctr@5@01)))
(assert (not (= t1@14@01 t@6@01)))
; [exec]
; t1.next_child := t
; [exec]
; t1.next_sibling := t0
; [exec]
; fold acc(tree(t1), write)
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= t@6@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | t@6@01 != Null | live]
; [else-branch: 6 | t@6@01 == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 6 | t@6@01 != Null]
; [eval] this.next_sibling != null
(push) ; 8
(set-option :timeout 10)
(assert (not (= t0@10@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | t0@10@01 != Null | live]
; [else-branch: 7 | t0@10@01 == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 7 | t0@10@01 != Null]
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
; [then-branch: 8 | t@6@01 == Null | live]
; [else-branch: 8 | t@6@01 != Null | live]
(push) ; 10
; [then-branch: 8 | t@6@01 == Null]
(assert (= t@6@01 $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 8 | t@6@01 != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (= t@6@01 $Ref.null)) (= t@6@01 $Ref.null)))
(push) ; 9
; [then-branch: 9 | t0@10@01 == Null && t@6@01 == Null | live]
; [else-branch: 9 | !(t0@10@01 == Null && t@6@01 == Null) | live]
(push) ; 10
; [then-branch: 9 | t0@10@01 == Null && t@6@01 == Null]
(assert (and (= t0@10@01 $Ref.null) (= t@6@01 $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 9 | !(t0@10@01 == Null && t@6@01 == Null)]
(assert (not (and (= t0@10@01 $Ref.null) (= t@6@01 $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 10 | t@6@01 != Null | live]
; [else-branch: 10 | t@6@01 == Null | live]
(push) ; 12
; [then-branch: 10 | t@6@01 != Null]
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 10 | t@6@01 == Null]
(assert (= t@6@01 $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (= t@6@01 $Ref.null) (not (= t@6@01 $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (and (= t0@10@01 $Ref.null) (= t@6@01 $Ref.null)))
  (and
    (not (and (= t0@10@01 $Ref.null) (= t@6@01 $Ref.null)))
    (or (= t@6@01 $Ref.null) (not (= t@6@01 $Ref.null))))))
(assert (or
  (not (and (= t0@10@01 $Ref.null) (= t@6@01 $Ref.null)))
  (and (= t0@10@01 $Ref.null) (= t@6@01 $Ref.null))))
(push) ; 9
(assert (not (or
  (and (= t0@10@01 $Ref.null) (= t@6@01 $Ref.null))
  (and (not (= t0@10@01 $Ref.null)) (not (= t@6@01 $Ref.null))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and (= t0@10@01 $Ref.null) (= t@6@01 $Ref.null))
  (and (not (= t0@10@01 $Ref.null)) (not (= t@6@01 $Ref.null)))))
(assert (tree%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap data@15@01)
  ($Snap.combine
    ($SortWrappers.$RefTo$Snap t@6@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap t0@10@01)
      ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap data@7@01)
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap $Ref.null)
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap $Ref.null)
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))))
        ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap data@11@01)
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap $Ref.null)
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap $Ref.null)
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))))
          $Snap.unit))))) t1@14@01))
; [exec]
; t2 := new(data, next_child, next_sibling)
(declare-const t2@18@01 $Ref)
(assert (not (= t2@18@01 $Ref.null)))
(declare-const data@19@01 Int)
(declare-const next_child@20@01 $Ref)
(declare-const next_sibling@21@01 $Ref)
(assert (not (= t2@18@01 t5@4@01)))
(assert (not (= t2@18@01 t1@14@01)))
(assert (not (= t2@18@01 t0@10@01)))
(assert (not (= t2@18@01 t2@3@01)))
(assert (not (= t2@18@01 ctr@5@01)))
(assert (not (= t2@18@01 t@6@01)))
; [exec]
; t2.next_child := null
; [exec]
; t2.next_sibling := null
; [exec]
; fold acc(tree(t2), write)
; [eval] this.next_child != null
; [then-branch: 11 | False | dead]
; [else-branch: 11 | True | live]
(push) ; 9
; [else-branch: 11 | True]
; [eval] this.next_sibling != null
; [then-branch: 12 | False | dead]
; [else-branch: 12 | True | live]
(push) ; 10
; [else-branch: 12 | True]
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 11
; [then-branch: 13 | True | live]
; [else-branch: 13 | False | live]
(push) ; 12
; [then-branch: 13 | True]
; [eval] this.next_sibling == null
(pop) ; 12
(push) ; 12
; [else-branch: 13 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (tree%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap data@19@01)
  ($Snap.combine
    ($SortWrappers.$RefTo$Snap $Ref.null)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap $Ref.null)
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit))))) t2@18@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= t1@14@01 t2@18@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(tree(t5), write)
(declare-const $t@22@01 $Snap)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= t1@14@01 t5@4@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= t2@18@01 t5@4@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ctr := cloneTree(t5)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const res@23@01 $Ref)
(declare-const $t@24@01 $Snap)
(assert (= $t@24@01 ($Snap.combine ($Snap.first $t@24@01) ($Snap.second $t@24@01))))
(assert (= $t@22@01 ($Snap.first $t@24@01)))
(assert (=
  ($Snap.second $t@24@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.second ($Snap.second $t@24@01)))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= t1@14@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= t2@18@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.second ($Snap.second $t@24@01)) $Snap.unit))
; [eval] (unfolding acc(tree(this), 1 / 2) in (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling))
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (tree%trigger $t@22@01 t5@4@01))
(assert (= $t@22@01 ($Snap.combine ($Snap.first $t@22@01) ($Snap.second $t@22@01))))
(assert (not (= t5@4@01 $Ref.null)))
(assert (=
  ($Snap.second $t@22@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@22@01))
    ($Snap.second ($Snap.second $t@22@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@22@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@22@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@22@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | First:(Second:($t@22@01)) != Null | live]
; [else-branch: 14 | First:(Second:($t@22@01)) == Null | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 14 | First:(Second:($t@22@01)) != Null]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(push) ; 13
(set-option :timeout 10)
(assert (not (= res@23@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= t1@14@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= t2@18@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= t5@4@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 15 | First:(Second:(Second:($t@22@01))) != Null | live]
; [else-branch: 15 | First:(Second:(Second:($t@22@01))) == Null | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 15 | First:(Second:(Second:($t@22@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null)))
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  t5@4@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  t2@18@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  t1@14@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  res@23@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 14
; [then-branch: 16 | First:(Second:($t@22@01)) == Null | live]
; [else-branch: 16 | First:(Second:($t@22@01)) != Null | live]
(push) ; 15
; [then-branch: 16 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 15
(push) ; 15
; [else-branch: 16 | First:(Second:($t@22@01)) != Null]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(push) ; 14
; [then-branch: 17 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null | live]
; [else-branch: 17 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null) | live]
(push) ; 15
; [then-branch: 17 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(pop) ; 15
(push) ; 15
; [else-branch: 17 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 16
; [then-branch: 18 | First:(Second:($t@22@01)) != Null | live]
; [else-branch: 18 | First:(Second:($t@22@01)) == Null | live]
(push) ; 17
; [then-branch: 18 | First:(Second:($t@22@01)) != Null]
; [eval] this.next_sibling != null
(pop) ; 17
(push) ; 17
; [else-branch: 18 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 14
(assert (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01))
(assert (=
  ($Snap.first ($Snap.second $t@24@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@23@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
; [else-branch: 19 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 19 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  t5@4@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  t2@18@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  t1@14@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | First:(Second:(Second:(First:(Second:($t@24@01))))) != Null | live]
; [else-branch: 20 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 20 | First:(Second:(Second:(First:(Second:($t@24@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)))
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t1@14@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t2@18@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t5@4@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 17
; [then-branch: 21 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 21 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
(push) ; 18
; [then-branch: 21 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 18
(push) ; 18
; [else-branch: 21 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(push) ; 17
; [then-branch: 22 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 22 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null) | live]
(push) ; 18
; [then-branch: 22 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(push) ; 18
; [else-branch: 22 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 19
; [then-branch: 23 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
; [else-branch: 23 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
(push) ; 20
; [then-branch: 23 | First:(Second:(First:(Second:($t@24@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 20
(push) ; 20
; [else-branch: 23 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 17
; [then-branch: 24 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01)))) | live]
; [else-branch: 24 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01)))) | live]
(push) ; 18
; [then-branch: 24 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 18
(push) ; 18
; [else-branch: 24 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 16
(push) ; 16
; [else-branch: 20 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 17
; [then-branch: 25 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 25 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
(push) ; 18
; [then-branch: 25 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 18
(push) ; 18
; [else-branch: 25 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(push) ; 17
; [then-branch: 26 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 26 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null) | live]
(push) ; 18
; [then-branch: 26 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(push) ; 18
; [else-branch: 26 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 19
; [then-branch: 27 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
; [else-branch: 27 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
(push) ; 20
; [then-branch: 27 | First:(Second:(First:(Second:($t@24@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 20
(push) ; 20
; [else-branch: 27 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 17
; [then-branch: 28 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01)))) | live]
; [else-branch: 28 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01)))) | live]
(push) ; 18
; [then-branch: 28 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 18
(push) ; 18
; [else-branch: 28 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 19 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; [eval] this.next_sibling != null
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | First:(Second:(Second:(First:(Second:($t@24@01))))) != Null | live]
; [else-branch: 29 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 29 | First:(Second:(Second:(First:(Second:($t@24@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)))
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t5@4@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t2@18@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t1@14@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 17
; [then-branch: 30 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 30 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
(push) ; 18
; [then-branch: 30 | First:(Second:(First:(Second:($t@24@01)))) == Null]
; [eval] this.next_sibling == null
(pop) ; 18
(push) ; 18
; [else-branch: 30 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(push) ; 17
; [then-branch: 31 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 31 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null) | live]
(push) ; 18
; [then-branch: 31 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(push) ; 18
; [else-branch: 31 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 19
; [then-branch: 32 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
; [else-branch: 32 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
(push) ; 20
; [then-branch: 32 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 20
(push) ; 20
; [else-branch: 32 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 17
; [then-branch: 33 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01)))) | live]
; [else-branch: 33 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01)))) | live]
(push) ; 18
; [then-branch: 33 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 18
(push) ; 18
; [else-branch: 33 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 16
(push) ; 16
; [else-branch: 29 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 17
; [then-branch: 34 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 34 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
(push) ; 18
; [then-branch: 34 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 18
(push) ; 18
; [else-branch: 34 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(push) ; 17
; [then-branch: 35 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 35 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null) | live]
(push) ; 18
; [then-branch: 35 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(push) ; 18
; [else-branch: 35 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 19
; [then-branch: 36 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
; [else-branch: 36 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
(push) ; 20
; [then-branch: 36 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 20
(push) ; 20
; [else-branch: 36 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 17
; [then-branch: 37 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01)))) | live]
; [else-branch: 37 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01)))) | live]
(push) ; 18
; [then-branch: 37 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 18
(push) ; 18
; [else-branch: 37 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 16
(pop) ; 15
(pop) ; 14
(declare-const joined_unfolding@25@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@25@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@25@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@25@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@25@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01)
  (=
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  (not (= res@23@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01)
  (=
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  (not (= res@23@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01)
  (=
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  (not (= res@23@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01)
  (=
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  (not (= res@23@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))))
(pop) ; 13
(push) ; 13
; [else-branch: 15 | First:(Second:(Second:($t@22@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 14
; [then-branch: 38 | First:(Second:($t@22@01)) == Null | live]
; [else-branch: 38 | First:(Second:($t@22@01)) != Null | live]
(push) ; 15
; [then-branch: 38 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 15
(push) ; 15
; [else-branch: 38 | First:(Second:($t@22@01)) != Null]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(push) ; 14
; [then-branch: 39 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null | live]
; [else-branch: 39 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null) | live]
(push) ; 15
; [then-branch: 39 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(pop) ; 15
(push) ; 15
; [else-branch: 39 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 16
; [then-branch: 40 | First:(Second:($t@22@01)) != Null | live]
; [else-branch: 40 | First:(Second:($t@22@01)) == Null | live]
(push) ; 17
; [then-branch: 40 | First:(Second:($t@22@01)) != Null]
; [eval] this.next_sibling != null
(pop) ; 17
(push) ; 17
; [else-branch: 40 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 14
(assert (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01))
(assert (=
  ($Snap.first ($Snap.second $t@24@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first $t@22@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@24@01))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 41 | First:(Second:($t@22@01)) != Null | dead]
; [else-branch: 41 | First:(Second:($t@22@01)) == Null | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 41 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; [eval] this.next_sibling != null
(push) ; 16
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  $Ref.null)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 42 | First:(Second:(Second:($t@22@01))) != Null | dead]
; [else-branch: 42 | First:(Second:(Second:($t@22@01))) == Null | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 42 | First:(Second:(Second:($t@22@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 17
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
; [then-branch: 43 | First:(Second:($t@22@01)) == Null | live]
; [else-branch: 43 | First:(Second:($t@22@01)) != Null | live]
(push) ; 18
; [then-branch: 43 | First:(Second:($t@22@01)) == Null]
; [eval] this.next_sibling == null
(push) ; 19
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
(set-option :timeout 0)
(push) ; 18
; [else-branch: 43 | First:(Second:($t@22@01)) != Null]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
; [then-branch: 44 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null | live]
; [else-branch: 44 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null) | live]
(push) ; 18
; [then-branch: 44 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(pop) ; 18
(push) ; 18
; [else-branch: 44 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 19
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
; [then-branch: 45 | First:(Second:($t@22@01)) != Null | live]
; [else-branch: 45 | First:(Second:($t@22@01)) == Null | live]
(push) ; 20
; [then-branch: 45 | First:(Second:($t@22@01)) != Null]
; [eval] this.next_sibling != null
(push) ; 21
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(pop) ; 20
(set-option :timeout 0)
(push) ; 20
; [else-branch: 45 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 17
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
; [then-branch: 46 | True | live]
; [else-branch: 46 | False | live]
(push) ; 18
; [then-branch: 46 | True]
; [eval] this.next_sibling == res.next_sibling
(push) ; 19
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
(set-option :timeout 0)
(push) ; 18
; [else-branch: 46 | False]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert false)
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit))))
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 14 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
; [eval] this.next_sibling != null
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | First:(Second:(Second:($t@22@01))) != Null | live]
; [else-branch: 47 | First:(Second:(Second:($t@22@01))) == Null | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 47 | First:(Second:(Second:($t@22@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null)))
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  res@23@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  t1@14@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  t2@18@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  t5@4@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 14
; [then-branch: 48 | First:(Second:($t@22@01)) == Null | live]
; [else-branch: 48 | First:(Second:($t@22@01)) != Null | live]
(push) ; 15
; [then-branch: 48 | First:(Second:($t@22@01)) == Null]
; [eval] this.next_sibling == null
(pop) ; 15
(push) ; 15
; [else-branch: 48 | First:(Second:($t@22@01)) != Null]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(push) ; 14
; [then-branch: 49 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null | live]
; [else-branch: 49 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null) | live]
(push) ; 15
; [then-branch: 49 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(pop) ; 15
(push) ; 15
; [else-branch: 49 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 16
; [then-branch: 50 | First:(Second:($t@22@01)) != Null | live]
; [else-branch: 50 | First:(Second:($t@22@01)) == Null | live]
(push) ; 17
; [then-branch: 50 | First:(Second:($t@22@01)) != Null]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 17
(push) ; 17
; [else-branch: 50 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 14
(assert (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01))
(assert (=
  ($Snap.first ($Snap.second $t@24@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first $t@22@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@24@01))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | First:(Second:($t@22@01)) != Null | dead]
; [else-branch: 51 | First:(Second:($t@22@01)) == Null | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 51 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; [eval] this.next_sibling != null
(push) ; 16
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  $Ref.null)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | First:(Second:(Second:($t@22@01))) != Null | dead]
; [else-branch: 52 | First:(Second:(Second:($t@22@01))) == Null | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 52 | First:(Second:(Second:($t@22@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 17
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
; [then-branch: 53 | First:(Second:($t@22@01)) == Null | live]
; [else-branch: 53 | First:(Second:($t@22@01)) != Null | live]
(push) ; 18
; [then-branch: 53 | First:(Second:($t@22@01)) == Null]
; [eval] this.next_sibling == null
(push) ; 19
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
(set-option :timeout 0)
(push) ; 18
; [else-branch: 53 | First:(Second:($t@22@01)) != Null]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
; [then-branch: 54 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null | live]
; [else-branch: 54 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null) | live]
(push) ; 18
; [then-branch: 54 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(pop) ; 18
(push) ; 18
; [else-branch: 54 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 19
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
; [then-branch: 55 | First:(Second:($t@22@01)) != Null | live]
; [else-branch: 55 | First:(Second:($t@22@01)) == Null | live]
(push) ; 20
; [then-branch: 55 | First:(Second:($t@22@01)) != Null]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
; [eval] this.next_sibling != null
(push) ; 21
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(pop) ; 20
(set-option :timeout 0)
(push) ; 20
; [else-branch: 55 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 17
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
; [then-branch: 56 | True | live]
; [else-branch: 56 | False | live]
(push) ; 18
; [then-branch: 56 | True]
; [eval] this.next_sibling == res.next_sibling
(push) ; 19
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
(set-option :timeout 0)
(push) ; 18
; [else-branch: 56 | False]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert false)
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit))))
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 47 | First:(Second:(Second:($t@22@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 14
; [then-branch: 57 | First:(Second:($t@22@01)) == Null | live]
; [else-branch: 57 | First:(Second:($t@22@01)) != Null | live]
(push) ; 15
; [then-branch: 57 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 15
(push) ; 15
; [else-branch: 57 | First:(Second:($t@22@01)) != Null]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(push) ; 14
; [then-branch: 58 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null | live]
; [else-branch: 58 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null) | live]
(push) ; 15
; [then-branch: 58 | First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
(pop) ; 15
(push) ; 15
; [else-branch: 58 | !(First:(Second:(Second:($t@22@01))) == Null && First:(Second:($t@22@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 16
; [then-branch: 59 | First:(Second:($t@22@01)) != Null | live]
; [else-branch: 59 | First:(Second:($t@22@01)) == Null | live]
(push) ; 17
; [then-branch: 59 | First:(Second:($t@22@01)) != Null]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 17
(push) ; 17
; [else-branch: 59 | First:(Second:($t@22@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 14
(assert (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01))
(assert (=
  ($Snap.first ($Snap.second $t@24@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@23@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
; [else-branch: 60 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 60 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  t5@4@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  t2@18@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  t1@14@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 61 | First:(Second:(Second:(First:(Second:($t@24@01))))) != Null | live]
; [else-branch: 61 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 61 | First:(Second:(Second:(First:(Second:($t@24@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)))
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t1@14@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t2@18@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t5@4@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 17
; [then-branch: 62 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 62 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
(push) ; 18
; [then-branch: 62 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 18
(push) ; 18
; [else-branch: 62 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(push) ; 17
; [then-branch: 63 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 63 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null) | live]
(push) ; 18
; [then-branch: 63 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(push) ; 18
; [else-branch: 63 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 19
; [then-branch: 64 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
; [else-branch: 64 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
(push) ; 20
; [then-branch: 64 | First:(Second:(First:(Second:($t@24@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 20
(push) ; 20
; [else-branch: 64 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 17
; [then-branch: 65 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01)))) | live]
; [else-branch: 65 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01)))) | live]
(push) ; 18
; [then-branch: 65 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 18
(push) ; 18
; [else-branch: 65 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 16
(push) ; 16
; [else-branch: 61 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 17
; [then-branch: 66 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 66 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
(push) ; 18
; [then-branch: 66 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 18
(push) ; 18
; [else-branch: 66 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(push) ; 17
; [then-branch: 67 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 67 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null) | live]
(push) ; 18
; [then-branch: 67 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(push) ; 18
; [else-branch: 67 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 19
; [then-branch: 68 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
; [else-branch: 68 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
(push) ; 20
; [then-branch: 68 | First:(Second:(First:(Second:($t@24@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 20
(push) ; 20
; [else-branch: 68 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 17
; [then-branch: 69 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01)))) | live]
; [else-branch: 69 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01)))) | live]
(push) ; 18
; [then-branch: 69 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 18
(push) ; 18
; [else-branch: 69 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 60 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; [eval] this.next_sibling != null
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | First:(Second:(Second:(First:(Second:($t@24@01))))) != Null | live]
; [else-branch: 70 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 70 | First:(Second:(Second:(First:(Second:($t@24@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)))
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t5@4@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t2@18@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  t1@14@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 17
; [then-branch: 71 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 71 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
(push) ; 18
; [then-branch: 71 | First:(Second:(First:(Second:($t@24@01)))) == Null]
; [eval] this.next_sibling == null
(pop) ; 18
(push) ; 18
; [else-branch: 71 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(push) ; 17
; [then-branch: 72 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 72 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null) | live]
(push) ; 18
; [then-branch: 72 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(push) ; 18
; [else-branch: 72 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 19
; [then-branch: 73 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
; [else-branch: 73 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
(push) ; 20
; [then-branch: 73 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 20
(push) ; 20
; [else-branch: 73 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 17
; [then-branch: 74 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01)))) | live]
; [else-branch: 74 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01)))) | live]
(push) ; 18
; [then-branch: 74 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 18
(push) ; 18
; [else-branch: 74 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 16
(push) ; 16
; [else-branch: 70 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 17
; [then-branch: 75 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 75 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
(push) ; 18
; [then-branch: 75 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 18
(push) ; 18
; [else-branch: 75 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(push) ; 17
; [then-branch: 76 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null | live]
; [else-branch: 76 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null) | live]
(push) ; 18
; [then-branch: 76 | First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
(pop) ; 18
(push) ; 18
; [else-branch: 76 | !(First:(Second:(Second:(First:(Second:($t@24@01))))) == Null && First:(Second:(First:(Second:($t@24@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 19
; [then-branch: 77 | First:(Second:(First:(Second:($t@24@01)))) != Null | live]
; [else-branch: 77 | First:(Second:(First:(Second:($t@24@01)))) == Null | live]
(push) ; 20
; [then-branch: 77 | First:(Second:(First:(Second:($t@24@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 20
(push) ; 20
; [else-branch: 77 | First:(Second:(First:(Second:($t@24@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  $Ref.null))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 17
; [then-branch: 78 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01)))) | live]
; [else-branch: 78 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01)))) | live]
(push) ; 18
; [then-branch: 78 | First:(Second:($t@22@01)) == First:(Second:(First:(Second:($t@24@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 18
(push) ; 18
; [else-branch: 78 | First:(Second:($t@22@01)) != First:(Second:(First:(Second:($t@24@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
(pop) ; 16
(pop) ; 15
(pop) ; 14
(declare-const joined_unfolding@26@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@26@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@26@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@26@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@26@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01)
  (=
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  (not (= res@23@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01)
  (=
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  (not (= res@23@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01)
  (=
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  (not (= res@23@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01)
  (=
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
  (not (= res@23@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)))))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(declare-const joined_unfolding@27@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))
  (= (as joined_unfolding@27@01  Bool) (as joined_unfolding@25@01  Bool))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))
  (= (as joined_unfolding@27@01  Bool) true)))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (= (as joined_unfolding@27@01  Bool) true)))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (= (as joined_unfolding@27@01  Bool) (as joined_unfolding@26@01  Bool))))
; Joined path conditions
(assert (and
  (tree%trigger $t@22@01 t5@4@01)
  (= $t@22@01 ($Snap.combine ($Snap.first $t@22@01) ($Snap.second $t@22@01)))
  (not (= t5@4@01 $Ref.null))
  (=
    ($Snap.second $t@22@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@22@01))
      ($Snap.second ($Snap.second $t@22@01))))
  (=
    ($Snap.second ($Snap.second $t@22@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@22@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@22@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            $Ref.null))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@25@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@25@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@25@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@25@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01)
    (=
      ($Snap.first ($Snap.second $t@24@01))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
        ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    (not (= res@23@01 $Ref.null))
    (=
      ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
    (=>
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))))))
; Joined path conditions
(assert (and
  (tree%trigger $t@22@01 t5@4@01)
  (= $t@22@01 ($Snap.combine ($Snap.first $t@22@01) ($Snap.second $t@22@01)))
  (not (= t5@4@01 $Ref.null))
  (=
    ($Snap.second $t@22@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@22@01))
      ($Snap.second ($Snap.second $t@22@01))))
  (=
    ($Snap.second ($Snap.second $t@22@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@22@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@22@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null))
  false))
; Joined path conditions
(assert (and
  (tree%trigger $t@22@01 t5@4@01)
  (= $t@22@01 ($Snap.combine ($Snap.first $t@22@01) ($Snap.second $t@22@01)))
  (not (= t5@4@01 $Ref.null))
  (=
    ($Snap.second $t@22@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@22@01))
      ($Snap.second ($Snap.second $t@22@01))))
  (=
    ($Snap.second ($Snap.second $t@22@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@22@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@22@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01))) $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null)))
  false))
; Joined path conditions
(assert (and
  (tree%trigger $t@22@01 t5@4@01)
  (= $t@22@01 ($Snap.combine ($Snap.first $t@22@01) ($Snap.second $t@22@01)))
  (not (= t5@4@01 $Ref.null))
  (=
    ($Snap.second $t@22@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@22@01))
      ($Snap.second ($Snap.second $t@22@01))))
  (=
    ($Snap.second ($Snap.second $t@22@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@22@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@22@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            $Ref.null))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@26@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@26@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@26@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@26@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (tree%trigger ($Snap.first ($Snap.second $t@24@01)) res@23@01)
    (=
      ($Snap.first ($Snap.second $t@24@01))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@24@01)))
        ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
    (not (= res@23@01 $Ref.null))
    (=
      ($Snap.second ($Snap.first ($Snap.second $t@24@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))))
    (=>
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
        $Ref.null)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))))))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@24@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@24@01)))))
            $Ref.null)))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@22@01))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@22@01)))
        $Ref.null)))))
(assert (as joined_unfolding@27@01  Bool))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert false
(set-option :timeout 0)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= t5@4@01 t2@18@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= t2@18@01 t1@14@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= t5@4@01 t1@14@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= t1@14@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= t2@18@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= t5@4@01 res@23@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@15@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap t@6@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap t0@10@01)
          ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap data@7@01)
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap $Ref.null)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))))
            ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap data@11@01)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap $Ref.null)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))))
              $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@19@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap $Ref.null)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap $Ref.null)
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@24@01)) $t@22@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@15@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap t@6@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap t0@10@01)
          ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap data@7@01)
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap $Ref.null)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))))
            ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap data@11@01)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap $Ref.null)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))))
              $Snap.unit)))))
    ($Snap.first ($Snap.second $t@24@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@15@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap t@6@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap t0@10@01)
          ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap data@7@01)
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap $Ref.null)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))))
            ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap data@11@01)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap $Ref.null)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))))
              $Snap.unit)))))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@19@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap $Ref.null)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap $Ref.null)
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@15@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap t@6@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap t0@10@01)
          ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap data@7@01)
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap $Ref.null)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))))
            ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap data@11@01)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap $Ref.null)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))))
              $Snap.unit)))))
    $t@22@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@19@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap $Ref.null)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap $Ref.null)
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))))
    ($Snap.first ($Snap.second $t@24@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@19@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap $Ref.null)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap $Ref.null)
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@15@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap t@6@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap t0@10@01)
          ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap data@7@01)
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap $Ref.null)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))))
            ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap data@11@01)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap $Ref.null)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))))
              $Snap.unit)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@19@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap $Ref.null)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap $Ref.null)
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))))
    $t@22@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@22@01 ($Snap.first ($Snap.second $t@24@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    $t@22@01
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@15@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap t@6@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap t0@10@01)
          ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap data@7@01)
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap $Ref.null)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))))
            ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap data@11@01)
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap $Ref.null)
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap $Ref.null)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))))
              $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    $t@22@01
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@19@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap $Ref.null)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap $Ref.null)
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (and (not (= t1@14@01 t2@18@01)) (not (= t2@18@01 t1@14@01))))
(set-option :timeout 0)
(check-sat)
; unknown
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- cloneTree ----------
(declare-const this@28@01 $Ref)
(declare-const res@29@01 $Ref)
(declare-const this@30@01 $Ref)
(declare-const res@31@01 $Ref)
(push) ; 1
(declare-const $t@32@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@33@01 $Snap)
(assert (= $t@33@01 ($Snap.combine ($Snap.first $t@33@01) ($Snap.second $t@33@01))))
(assert (=
  ($Snap.second $t@33@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.second ($Snap.second $t@33@01)))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.second ($Snap.second $t@33@01)) $Snap.unit))
; [eval] (unfolding acc(tree(this), 1 / 2) in (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling))
(set-option :timeout 0)
(push) ; 3
(assert (tree%trigger ($Snap.first $t@33@01) this@30@01))
(assert (=
  ($Snap.first $t@33@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@33@01))
    ($Snap.second ($Snap.first $t@33@01)))))
(assert (not (= this@30@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@33@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@33@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first $t@33@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))))
; [eval] this.next_child != null
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | First:(Second:(First:($t@33@01))) != Null | live]
; [else-branch: 79 | First:(Second:(First:($t@33@01))) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 79 | First:(Second:(First:($t@33@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  res@31@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))))))
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 80 | First:(Second:(Second:(First:($t@33@01)))) != Null | live]
; [else-branch: 80 | First:(Second:(Second:(First:($t@33@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 80 | First:(Second:(Second:(First:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null)))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  res@31@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 6
; [then-branch: 81 | First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 81 | First:(Second:(First:($t@33@01))) != Null | live]
(push) ; 7
; [then-branch: 81 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 7
(push) ; 7
; [else-branch: 81 | First:(Second:(First:($t@33@01))) != Null]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(push) ; 6
; [then-branch: 82 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 82 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null) | live]
(push) ; 7
; [then-branch: 82 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 82 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 8
; [then-branch: 83 | First:(Second:(First:($t@33@01))) != Null | live]
; [else-branch: 83 | First:(Second:(First:($t@33@01))) == Null | live]
(push) ; 9
; [then-branch: 83 | First:(Second:(First:($t@33@01))) != Null]
; [eval] this.next_sibling != null
(pop) ; 9
(push) ; 9
; [else-branch: 83 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 6
(assert (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01))
(assert (=
  ($Snap.first ($Snap.second $t@33@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@31@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
; [else-branch: 84 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 84 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | First:(Second:(Second:(First:(Second:($t@33@01))))) != Null | live]
; [else-branch: 85 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 85 | First:(Second:(Second:(First:(Second:($t@33@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 9
; [then-branch: 86 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 86 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
(push) ; 10
; [then-branch: 86 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 86 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(push) ; 9
; [then-branch: 87 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 87 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null) | live]
(push) ; 10
; [then-branch: 87 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 87 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 88 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
; [else-branch: 88 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
(push) ; 12
; [then-branch: 88 | First:(Second:(First:(Second:($t@33@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 88 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 9
; [then-branch: 89 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01)))) | live]
; [else-branch: 89 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01)))) | live]
(push) ; 10
; [then-branch: 89 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 10
(push) ; 10
; [else-branch: 89 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 85 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
; [then-branch: 90 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 90 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
(push) ; 10
; [then-branch: 90 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 90 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(push) ; 9
; [then-branch: 91 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 91 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null) | live]
(push) ; 10
; [then-branch: 91 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 91 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 92 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
; [else-branch: 92 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
(push) ; 12
; [then-branch: 92 | First:(Second:(First:(Second:($t@33@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 92 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 9
; [then-branch: 93 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01)))) | live]
; [else-branch: 93 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01)))) | live]
(push) ; 10
; [then-branch: 93 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 10
(push) ; 10
; [else-branch: 93 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 84 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; [eval] this.next_sibling != null
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | First:(Second:(Second:(First:(Second:($t@33@01))))) != Null | live]
; [else-branch: 94 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 94 | First:(Second:(Second:(First:(Second:($t@33@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 9
; [then-branch: 95 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 95 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
(push) ; 10
; [then-branch: 95 | First:(Second:(First:(Second:($t@33@01)))) == Null]
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 95 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(push) ; 9
; [then-branch: 96 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 96 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null) | live]
(push) ; 10
; [then-branch: 96 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 96 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 97 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
; [else-branch: 97 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
(push) ; 12
; [then-branch: 97 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 97 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 9
; [then-branch: 98 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01)))) | live]
; [else-branch: 98 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01)))) | live]
(push) ; 10
; [then-branch: 98 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 10
(push) ; 10
; [else-branch: 98 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 94 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
; [then-branch: 99 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 99 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
(push) ; 10
; [then-branch: 99 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 99 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(push) ; 9
; [then-branch: 100 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 100 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null) | live]
(push) ; 10
; [then-branch: 100 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 100 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 101 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
; [else-branch: 101 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
(push) ; 12
; [then-branch: 101 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 101 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 9
; [then-branch: 102 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01)))) | live]
; [else-branch: 102 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01)))) | live]
(push) ; 10
; [then-branch: 102 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 10
(push) ; 10
; [else-branch: 102 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(declare-const joined_unfolding@34@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@34@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@34@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@34@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@34@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01)
  (=
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  (not (= res@31@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01)
  (=
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  (not (= res@31@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01)
  (=
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  (not (= res@31@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01)
  (=
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  (not (= res@31@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))))
(pop) ; 5
(push) ; 5
; [else-branch: 80 | First:(Second:(Second:(First:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 6
; [then-branch: 103 | First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 103 | First:(Second:(First:($t@33@01))) != Null | live]
(push) ; 7
; [then-branch: 103 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 7
(push) ; 7
; [else-branch: 103 | First:(Second:(First:($t@33@01))) != Null]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(push) ; 6
; [then-branch: 104 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 104 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null) | live]
(push) ; 7
; [then-branch: 104 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 104 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 8
; [then-branch: 105 | First:(Second:(First:($t@33@01))) != Null | live]
; [else-branch: 105 | First:(Second:(First:($t@33@01))) == Null | live]
(push) ; 9
; [then-branch: 105 | First:(Second:(First:($t@33@01))) != Null]
; [eval] this.next_sibling != null
(pop) ; 9
(push) ; 9
; [else-branch: 105 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 6
(assert (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01))
(assert (=
  ($Snap.first ($Snap.second $t@33@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@33@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@33@01))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 106 | First:(Second:(First:($t@33@01))) != Null | dead]
; [else-branch: 106 | First:(Second:(First:($t@33@01))) == Null | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 106 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; [eval] this.next_sibling != null
(push) ; 8
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  $Ref.null)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 107 | First:(Second:(Second:(First:($t@33@01)))) != Null | dead]
; [else-branch: 107 | First:(Second:(Second:(First:($t@33@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 107 | First:(Second:(Second:(First:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 108 | First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 108 | First:(Second:(First:($t@33@01))) != Null | live]
(push) ; 10
; [then-branch: 108 | First:(Second:(First:($t@33@01))) == Null]
; [eval] this.next_sibling == null
(push) ; 11
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 108 | First:(Second:(First:($t@33@01))) != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 109 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 109 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null) | live]
(push) ; 10
; [then-branch: 109 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 109 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 110 | First:(Second:(First:($t@33@01))) != Null | live]
; [else-branch: 110 | First:(Second:(First:($t@33@01))) == Null | live]
(push) ; 12
; [then-branch: 110 | First:(Second:(First:($t@33@01))) != Null]
; [eval] this.next_sibling != null
(push) ; 13
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 110 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 9
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 111 | True | live]
; [else-branch: 111 | False | live]
(push) ; 10
; [then-branch: 111 | True]
; [eval] this.next_sibling == res.next_sibling
(push) ; 11
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 111 | False]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert false)
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit))))
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 79 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))))))
; [eval] this.next_sibling != null
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | First:(Second:(Second:(First:($t@33@01)))) != Null | live]
; [else-branch: 112 | First:(Second:(Second:(First:($t@33@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 112 | First:(Second:(Second:(First:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null)))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  res@31@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 6
; [then-branch: 113 | First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 113 | First:(Second:(First:($t@33@01))) != Null | live]
(push) ; 7
; [then-branch: 113 | First:(Second:(First:($t@33@01))) == Null]
; [eval] this.next_sibling == null
(pop) ; 7
(push) ; 7
; [else-branch: 113 | First:(Second:(First:($t@33@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(push) ; 6
; [then-branch: 114 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 114 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null) | live]
(push) ; 7
; [then-branch: 114 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 114 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 8
; [then-branch: 115 | First:(Second:(First:($t@33@01))) != Null | live]
; [else-branch: 115 | First:(Second:(First:($t@33@01))) == Null | live]
(push) ; 9
; [then-branch: 115 | First:(Second:(First:($t@33@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 9
(push) ; 9
; [else-branch: 115 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 6
(assert (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01))
(assert (=
  ($Snap.first ($Snap.second $t@33@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@33@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@33@01))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | First:(Second:(First:($t@33@01))) != Null | dead]
; [else-branch: 116 | First:(Second:(First:($t@33@01))) == Null | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 116 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; [eval] this.next_sibling != null
(push) ; 8
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  $Ref.null)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 117 | First:(Second:(Second:(First:($t@33@01)))) != Null | dead]
; [else-branch: 117 | First:(Second:(Second:(First:($t@33@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 117 | First:(Second:(Second:(First:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 118 | First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 118 | First:(Second:(First:($t@33@01))) != Null | live]
(push) ; 10
; [then-branch: 118 | First:(Second:(First:($t@33@01))) == Null]
; [eval] this.next_sibling == null
(push) ; 11
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 118 | First:(Second:(First:($t@33@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 119 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 119 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null) | live]
(push) ; 10
; [then-branch: 119 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 119 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 120 | First:(Second:(First:($t@33@01))) != Null | live]
; [else-branch: 120 | First:(Second:(First:($t@33@01))) == Null | live]
(push) ; 12
; [then-branch: 120 | First:(Second:(First:($t@33@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
; [eval] this.next_sibling != null
(push) ; 13
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 120 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 9
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 121 | True | live]
; [else-branch: 121 | False | live]
(push) ; 10
; [then-branch: 121 | True]
; [eval] this.next_sibling == res.next_sibling
(push) ; 11
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 121 | False]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert false)
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit))))
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(pop) ; 5
(push) ; 5
; [else-branch: 112 | First:(Second:(Second:(First:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 6
; [then-branch: 122 | First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 122 | First:(Second:(First:($t@33@01))) != Null | live]
(push) ; 7
; [then-branch: 122 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 7
(push) ; 7
; [else-branch: 122 | First:(Second:(First:($t@33@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(push) ; 6
; [then-branch: 123 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null | live]
; [else-branch: 123 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null) | live]
(push) ; 7
; [then-branch: 123 | First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 123 | !(First:(Second:(Second:(First:($t@33@01)))) == Null && First:(Second:(First:($t@33@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 8
; [then-branch: 124 | First:(Second:(First:($t@33@01))) != Null | live]
; [else-branch: 124 | First:(Second:(First:($t@33@01))) == Null | live]
(push) ; 9
; [then-branch: 124 | First:(Second:(First:($t@33@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 9
(push) ; 9
; [else-branch: 124 | First:(Second:(First:($t@33@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  $Ref.null))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 6
(assert (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01))
(assert (=
  ($Snap.first ($Snap.second $t@33@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@31@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 res@31@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
; [else-branch: 125 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 125 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; [eval] this.next_sibling != null
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | First:(Second:(Second:(First:(Second:($t@33@01))))) != Null | live]
; [else-branch: 126 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 126 | First:(Second:(Second:(First:(Second:($t@33@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 9
; [then-branch: 127 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 127 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
(push) ; 10
; [then-branch: 127 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 127 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(push) ; 9
; [then-branch: 128 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 128 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null) | live]
(push) ; 10
; [then-branch: 128 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 128 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 129 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
; [else-branch: 129 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
(push) ; 12
; [then-branch: 129 | First:(Second:(First:(Second:($t@33@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 129 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 9
; [then-branch: 130 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01)))) | live]
; [else-branch: 130 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01)))) | live]
(push) ; 10
; [then-branch: 130 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 10
(push) ; 10
; [else-branch: 130 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 126 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
; [then-branch: 131 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 131 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
(push) ; 10
; [then-branch: 131 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 131 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(push) ; 9
; [then-branch: 132 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 132 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null) | live]
(push) ; 10
; [then-branch: 132 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 132 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 133 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
; [else-branch: 133 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
(push) ; 12
; [then-branch: 133 | First:(Second:(First:(Second:($t@33@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 133 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 9
; [then-branch: 134 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01)))) | live]
; [else-branch: 134 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01)))) | live]
(push) ; 10
; [then-branch: 134 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 10
(push) ; 10
; [else-branch: 134 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 125 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; [eval] this.next_sibling != null
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 135 | First:(Second:(Second:(First:(Second:($t@33@01))))) != Null | live]
; [else-branch: 135 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 135 | First:(Second:(Second:(First:(Second:($t@33@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
; [then-branch: 136 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 136 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
(push) ; 10
; [then-branch: 136 | First:(Second:(First:(Second:($t@33@01)))) == Null]
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 136 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(push) ; 9
; [then-branch: 137 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 137 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null) | live]
(push) ; 10
; [then-branch: 137 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 137 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 138 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
; [else-branch: 138 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
(push) ; 12
; [then-branch: 138 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 138 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 9
; [then-branch: 139 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01)))) | live]
; [else-branch: 139 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01)))) | live]
(push) ; 10
; [then-branch: 139 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 10
(push) ; 10
; [else-branch: 139 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 135 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
; [then-branch: 140 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 140 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
(push) ; 10
; [then-branch: 140 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 140 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(push) ; 9
; [then-branch: 141 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null | live]
; [else-branch: 141 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null) | live]
(push) ; 10
; [then-branch: 141 | First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 141 | !(First:(Second:(Second:(First:(Second:($t@33@01))))) == Null && First:(Second:(First:(Second:($t@33@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 142 | First:(Second:(First:(Second:($t@33@01)))) != Null | live]
; [else-branch: 142 | First:(Second:(First:(Second:($t@33@01)))) == Null | live]
(push) ; 12
; [then-branch: 142 | First:(Second:(First:(Second:($t@33@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 142 | First:(Second:(First:(Second:($t@33@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 9
; [then-branch: 143 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01)))) | live]
; [else-branch: 143 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01)))) | live]
(push) ; 10
; [then-branch: 143 | First:(Second:(First:($t@33@01))) == First:(Second:(First:(Second:($t@33@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 10
(push) ; 10
; [else-branch: 143 | First:(Second:(First:($t@33@01))) != First:(Second:(First:(Second:($t@33@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(declare-const joined_unfolding@35@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@35@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@35@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@35@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@35@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01)
  (=
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  (not (= res@31@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01)
  (=
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  (not (= res@31@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01)
  (=
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  (not (= res@31@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01)
  (=
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
  (not (= res@31@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(declare-const joined_unfolding@36@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))
  (= (as joined_unfolding@36@01  Bool) (as joined_unfolding@34@01  Bool))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))
  (= (as joined_unfolding@36@01  Bool) true)))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (= (as joined_unfolding@36@01  Bool) true)))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (= (as joined_unfolding@36@01  Bool) (as joined_unfolding@35@01  Bool))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@33@01) this@30@01)
  (=
    ($Snap.first $t@33@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@33@01))
      ($Snap.second ($Snap.first $t@33@01))))
  (not (= this@30@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@33@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            $Ref.null))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@34@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@34@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@34@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@34@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01)
    (=
      ($Snap.first ($Snap.second $t@33@01))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
        ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    (not (= res@31@01 $Ref.null))
    (=
      ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
    (=>
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@33@01) this@30@01)
  (=
    ($Snap.first $t@33@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@33@01))
      ($Snap.second ($Snap.first $t@33@01))))
  (not (= this@30@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@33@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null))
  false))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@33@01) this@30@01)
  (=
    ($Snap.first $t@33@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@33@01))
      ($Snap.second ($Snap.first $t@33@01))))
  (not (= this@30@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@33@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))))))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null)))
  false))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@33@01) this@30@01)
  (=
    ($Snap.first $t@33@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@33@01))
      ($Snap.second ($Snap.first $t@33@01))))
  (not (= this@30@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first $t@33@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@33@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@33@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@33@01))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            $Ref.null))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@35@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@35@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@35@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@35@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (tree%trigger ($Snap.first ($Snap.second $t@33@01)) res@31@01)
    (=
      ($Snap.first ($Snap.second $t@33@01))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@33@01)))
        ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
    (not (= res@31@01 $Ref.null))
    (=
      ($Snap.second ($Snap.first ($Snap.second $t@33@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))))
    (=>
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
        $Ref.null)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))))))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@33@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@33@01)))))
            $Ref.null)))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@33@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@33@01))))
        $Ref.null)))))
(assert (as joined_unfolding@36@01  Bool))
(pop) ; 2
(push) ; 2
; [exec]
; res := new(data, next_child, next_sibling)
(declare-const res@37@01 $Ref)
(assert (not (= res@37@01 $Ref.null)))
(declare-const data@38@01 Int)
(declare-const next_child@39@01 $Ref)
(declare-const next_sibling@40@01 $Ref)
(assert (not (= res@37@01 res@31@01)))
(assert (not (= res@37@01 this@30@01)))
; [exec]
; unfold acc(tree(this), 1 / 2)
(assert (= $t@32@01 ($Snap.combine ($Snap.first $t@32@01) ($Snap.second $t@32@01))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= this@30@01 $Ref.null)))
(assert (=
  ($Snap.second $t@32@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@32@01))
    ($Snap.second ($Snap.second $t@32@01)))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@32@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@32@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@32@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@32@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 144 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 144 | First:(Second:($t@32@01)) == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 144 | First:(Second:($t@32@01)) != Null]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))
; [eval] this.next_sibling != null
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 145 | First:(Second:(Second:($t@32@01))) != Null | live]
; [else-branch: 145 | First:(Second:(Second:($t@32@01))) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 145 | First:(Second:(Second:($t@32@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null)))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 5
; [then-branch: 146 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 146 | First:(Second:($t@32@01)) != Null | live]
(push) ; 6
; [then-branch: 146 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 6
(push) ; 6
; [else-branch: 146 | First:(Second:($t@32@01)) != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(push) ; 5
; [then-branch: 147 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null | live]
; [else-branch: 147 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null) | live]
(push) ; 6
; [then-branch: 147 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(pop) ; 6
(push) ; 6
; [else-branch: 147 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 7
; [then-branch: 148 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 148 | First:(Second:($t@32@01)) == Null | live]
(push) ; 8
; [then-branch: 148 | First:(Second:($t@32@01)) != Null]
; [eval] this.next_sibling != null
(pop) ; 8
(push) ; 8
; [else-branch: 148 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree%trigger $t@32@01 this@30@01))
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 5
; [then-branch: 149 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 149 | First:(Second:($t@32@01)) != Null | live]
(push) ; 6
; [then-branch: 149 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 6
(push) ; 6
; [else-branch: 149 | First:(Second:($t@32@01)) != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null | dead]
; [else-branch: 150 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 150 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(pop) ; 5
; [eval] !(this.next_child == null && this.next_sibling == null)
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 5
; [then-branch: 151 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 151 | First:(Second:($t@32@01)) != Null | live]
(push) ; 6
; [then-branch: 151 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 6
(push) ; 6
; [else-branch: 151 | First:(Second:($t@32@01)) != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null) | live]
; [else-branch: 152 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 152 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
; [exec]
; var tmp_child: Ref
(declare-const tmp_child@41@01 $Ref)
; [exec]
; var tmp_sibling: Ref
(declare-const tmp_sibling@42@01 $Ref)
; [exec]
; tmp_child := cloneTree(this.next_child)
(declare-const res@43@01 $Ref)
(declare-const $t@44@01 $Snap)
(assert (= $t@44@01 ($Snap.combine ($Snap.first $t@44@01) ($Snap.second $t@44@01))))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@44@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@44@01))
    ($Snap.second ($Snap.second $t@44@01)))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@43@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.second ($Snap.second $t@44@01)) $Snap.unit))
; [eval] (unfolding acc(tree(this), 1 / 2) in (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling))
(set-option :timeout 0)
(push) ; 6
(assert (tree%trigger ($Snap.first $t@44@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
(assert (=
  ($Snap.first $t@44@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@44@01))
    ($Snap.second ($Snap.first $t@44@01)))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@37@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.first $t@44@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@44@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@37@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first $t@44@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@37@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this@30@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 153 | First:(Second:(First:($t@44@01))) != Null | live]
; [else-branch: 153 | First:(Second:(First:($t@44@01))) == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 153 | First:(Second:(First:($t@44@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))))))
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 154 | First:(Second:(Second:(First:($t@44@01)))) != Null | live]
; [else-branch: 154 | First:(Second:(Second:(First:($t@44@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 154 | First:(Second:(Second:(First:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 9
; [then-branch: 155 | First:(Second:(First:($t@44@01))) == Null | live]
; [else-branch: 155 | First:(Second:(First:($t@44@01))) != Null | live]
(push) ; 10
; [then-branch: 155 | First:(Second:(First:($t@44@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 155 | First:(Second:(First:($t@44@01))) != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
(push) ; 9
; [then-branch: 156 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null | live]
; [else-branch: 156 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null) | live]
(push) ; 10
; [then-branch: 156 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 156 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 157 | First:(Second:(First:($t@44@01))) != Null | live]
; [else-branch: 157 | First:(Second:(First:($t@44@01))) == Null | live]
(push) ; 12
; [then-branch: 157 | First:(Second:(First:($t@44@01))) != Null]
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 157 | First:(Second:(First:($t@44@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 9
(assert (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01))
(assert (=
  ($Snap.first ($Snap.second $t@44@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@43@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 158 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
; [else-branch: 158 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 158 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 159 | First:(Second:(Second:(First:(Second:($t@44@01))))) != Null | live]
; [else-branch: 159 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 159 | First:(Second:(Second:(First:(Second:($t@44@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 12
; [then-branch: 160 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 160 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
(push) ; 13
; [then-branch: 160 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 160 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 161 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 161 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null) | live]
(push) ; 13
; [then-branch: 161 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 161 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 162 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
; [else-branch: 162 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
(push) ; 15
; [then-branch: 162 | First:(Second:(First:(Second:($t@44@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 162 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 163 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01)))) | live]
; [else-branch: 163 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01)))) | live]
(push) ; 13
; [then-branch: 163 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 163 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 159 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
; [then-branch: 164 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 164 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
(push) ; 13
; [then-branch: 164 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 164 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 165 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 165 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null) | live]
(push) ; 13
; [then-branch: 165 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 165 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 166 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
; [else-branch: 166 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
(push) ; 15
; [then-branch: 166 | First:(Second:(First:(Second:($t@44@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 166 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 167 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01)))) | live]
; [else-branch: 167 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01)))) | live]
(push) ; 13
; [then-branch: 167 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 167 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 158 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; [eval] this.next_sibling != null
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 168 | First:(Second:(Second:(First:(Second:($t@44@01))))) != Null | live]
; [else-branch: 168 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 168 | First:(Second:(Second:(First:(Second:($t@44@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 12
; [then-branch: 169 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 169 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
(push) ; 13
; [then-branch: 169 | First:(Second:(First:(Second:($t@44@01)))) == Null]
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 169 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 170 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 170 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null) | live]
(push) ; 13
; [then-branch: 170 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 170 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 171 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
; [else-branch: 171 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
(push) ; 15
; [then-branch: 171 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 171 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 172 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01)))) | live]
; [else-branch: 172 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01)))) | live]
(push) ; 13
; [then-branch: 172 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 172 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 168 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
; [then-branch: 173 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 173 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
(push) ; 13
; [then-branch: 173 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 173 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 174 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 174 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null) | live]
(push) ; 13
; [then-branch: 174 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 174 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 175 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
; [else-branch: 175 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
(push) ; 15
; [then-branch: 175 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 175 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 176 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01)))) | live]
; [else-branch: 176 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01)))) | live]
(push) ; 13
; [then-branch: 176 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 176 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(declare-const joined_unfolding@45@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@45@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@45@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@45@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@45@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01)
  (=
    ($Snap.first ($Snap.second $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  (not (= res@43@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01)
  (=
    ($Snap.first ($Snap.second $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  (not (= res@43@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01)
  (=
    ($Snap.first ($Snap.second $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  (not (= res@43@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01)
  (=
    ($Snap.first ($Snap.second $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  (not (= res@43@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))))
(pop) ; 8
(push) ; 8
; [else-branch: 154 | First:(Second:(Second:(First:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
; [then-branch: 177 | First:(Second:(First:($t@44@01))) == Null | live]
; [else-branch: 177 | First:(Second:(First:($t@44@01))) != Null | live]
(push) ; 10
; [then-branch: 177 | First:(Second:(First:($t@44@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 177 | First:(Second:(First:($t@44@01))) != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
(push) ; 9
; [then-branch: 178 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null | live]
; [else-branch: 178 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null) | live]
(push) ; 10
; [then-branch: 178 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 178 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 179 | First:(Second:(First:($t@44@01))) != Null | live]
; [else-branch: 179 | First:(Second:(First:($t@44@01))) == Null | live]
(push) ; 12
; [then-branch: 179 | First:(Second:(First:($t@44@01))) != Null]
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 179 | First:(Second:(First:($t@44@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 9
(assert (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01))
(assert (=
  ($Snap.first ($Snap.second $t@44@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@44@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@44@01))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | First:(Second:($t@32@01)) != Null | dead]
; [else-branch: 180 | First:(Second:($t@32@01)) == Null | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 180 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; [eval] this.next_sibling != null
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  $Ref.null)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | First:(Second:(Second:(First:($t@44@01)))) != Null | dead]
; [else-branch: 181 | First:(Second:(Second:(First:($t@44@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 181 | First:(Second:(Second:(First:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 182 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 182 | First:(Second:($t@32@01)) != Null | live]
(push) ; 13
; [then-branch: 182 | First:(Second:($t@32@01)) == Null]
; [eval] this.next_sibling == null
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 182 | First:(Second:($t@32@01)) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 183 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:($t@32@01)) == Null | live]
; [else-branch: 183 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:($t@32@01)) == Null) | live]
(push) ; 13
; [then-branch: 183 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:($t@32@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 183 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:($t@32@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 184 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 184 | First:(Second:($t@32@01)) == Null | live]
(push) ; 15
; [then-branch: 184 | First:(Second:($t@32@01)) != Null]
; [eval] this.next_sibling != null
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 184 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 185 | First:(Second:(First:($t@44@01))) == First:(Second:($t@32@01)) | live]
; [else-branch: 185 | First:(Second:(First:($t@44@01))) != First:(Second:($t@32@01)) | live]
(push) ; 13
; [then-branch: 185 | First:(Second:(First:($t@44@01))) == First:(Second:($t@32@01))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
; [eval] this.next_sibling == res.next_sibling
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 185 | First:(Second:(First:($t@44@01))) != First:(Second:($t@32@01))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert false)
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))))
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 153 | First:(Second:(First:($t@44@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))))))
; [eval] this.next_sibling != null
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | First:(Second:(Second:(First:($t@44@01)))) != Null | live]
; [else-branch: 186 | First:(Second:(Second:(First:($t@44@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 186 | First:(Second:(Second:(First:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 9
; [then-branch: 187 | First:(Second:(First:($t@44@01))) == Null | live]
; [else-branch: 187 | First:(Second:(First:($t@44@01))) != Null | live]
(push) ; 10
; [then-branch: 187 | First:(Second:(First:($t@44@01))) == Null]
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 187 | First:(Second:(First:($t@44@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
(push) ; 9
; [then-branch: 188 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null | live]
; [else-branch: 188 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null) | live]
(push) ; 10
; [then-branch: 188 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 188 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 189 | First:(Second:(First:($t@44@01))) != Null | live]
; [else-branch: 189 | First:(Second:(First:($t@44@01))) == Null | live]
(push) ; 12
; [then-branch: 189 | First:(Second:(First:($t@44@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 189 | First:(Second:(First:($t@44@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 9
(assert (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01))
(assert (=
  ($Snap.first ($Snap.second $t@44@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@44@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@44@01))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | First:(Second:($t@32@01)) != Null | dead]
; [else-branch: 190 | First:(Second:($t@32@01)) == Null | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 190 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; [eval] this.next_sibling != null
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  $Ref.null)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | First:(Second:(Second:(First:($t@44@01)))) != Null | dead]
; [else-branch: 191 | First:(Second:(Second:(First:($t@44@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 191 | First:(Second:(Second:(First:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 192 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 192 | First:(Second:($t@32@01)) != Null | live]
(push) ; 13
; [then-branch: 192 | First:(Second:($t@32@01)) == Null]
; [eval] this.next_sibling == null
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 192 | First:(Second:($t@32@01)) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 193 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:($t@32@01)) == Null | live]
; [else-branch: 193 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:($t@32@01)) == Null) | live]
(push) ; 13
; [then-branch: 193 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:($t@32@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 193 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:($t@32@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 194 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 194 | First:(Second:($t@32@01)) == Null | live]
(push) ; 15
; [then-branch: 194 | First:(Second:($t@32@01)) != Null]
; [eval] this.next_sibling != null
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 194 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 195 | First:(Second:(First:($t@44@01))) == First:(Second:($t@32@01)) | live]
; [else-branch: 195 | First:(Second:(First:($t@44@01))) != First:(Second:($t@32@01)) | live]
(push) ; 13
; [then-branch: 195 | First:(Second:(First:($t@44@01))) == First:(Second:($t@32@01))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
; [eval] this.next_sibling == res.next_sibling
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 195 | First:(Second:(First:($t@44@01))) != First:(Second:($t@32@01))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert false)
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))))
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(pop) ; 8
(push) ; 8
; [else-branch: 186 | First:(Second:(Second:(First:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
; [then-branch: 196 | First:(Second:(First:($t@44@01))) == Null | live]
; [else-branch: 196 | First:(Second:(First:($t@44@01))) != Null | live]
(push) ; 10
; [then-branch: 196 | First:(Second:(First:($t@44@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 196 | First:(Second:(First:($t@44@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
(push) ; 9
; [then-branch: 197 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null | live]
; [else-branch: 197 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null) | live]
(push) ; 10
; [then-branch: 197 | First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 197 | !(First:(Second:(Second:(First:($t@44@01)))) == Null && First:(Second:(First:($t@44@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 198 | First:(Second:(First:($t@44@01))) != Null | live]
; [else-branch: 198 | First:(Second:(First:($t@44@01))) == Null | live]
(push) ; 12
; [then-branch: 198 | First:(Second:(First:($t@44@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 198 | First:(Second:(First:($t@44@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 9
(assert (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01))
(assert (=
  ($Snap.first ($Snap.second $t@44@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@43@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
; [else-branch: 199 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 199 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | First:(Second:(Second:(First:(Second:($t@44@01))))) != Null | live]
; [else-branch: 200 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 200 | First:(Second:(Second:(First:(Second:($t@44@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 12
; [then-branch: 201 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 201 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
(push) ; 13
; [then-branch: 201 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 201 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 202 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 202 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null) | live]
(push) ; 13
; [then-branch: 202 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 202 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 203 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
; [else-branch: 203 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
(push) ; 15
; [then-branch: 203 | First:(Second:(First:(Second:($t@44@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 203 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 204 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01)))) | live]
; [else-branch: 204 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01)))) | live]
(push) ; 13
; [then-branch: 204 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 204 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 200 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
; [then-branch: 205 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 205 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
(push) ; 13
; [then-branch: 205 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 205 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 206 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 206 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null) | live]
(push) ; 13
; [then-branch: 206 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 206 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 207 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
; [else-branch: 207 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
(push) ; 15
; [then-branch: 207 | First:(Second:(First:(Second:($t@44@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 207 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 208 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01)))) | live]
; [else-branch: 208 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01)))) | live]
(push) ; 13
; [then-branch: 208 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 208 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 199 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; [eval] this.next_sibling != null
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 209 | First:(Second:(Second:(First:(Second:($t@44@01))))) != Null | live]
; [else-branch: 209 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 209 | First:(Second:(Second:(First:(Second:($t@44@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 12
; [then-branch: 210 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 210 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
(push) ; 13
; [then-branch: 210 | First:(Second:(First:(Second:($t@44@01)))) == Null]
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 210 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 211 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 211 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null) | live]
(push) ; 13
; [then-branch: 211 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 211 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 212 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
; [else-branch: 212 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
(push) ; 15
; [then-branch: 212 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 212 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 213 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01)))) | live]
; [else-branch: 213 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01)))) | live]
(push) ; 13
; [then-branch: 213 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 213 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 209 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
; [then-branch: 214 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 214 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
(push) ; 13
; [then-branch: 214 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 214 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 215 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null | live]
; [else-branch: 215 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null) | live]
(push) ; 13
; [then-branch: 215 | First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 215 | !(First:(Second:(Second:(First:(Second:($t@44@01))))) == Null && First:(Second:(First:(Second:($t@44@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 216 | First:(Second:(First:(Second:($t@44@01)))) != Null | live]
; [else-branch: 216 | First:(Second:(First:(Second:($t@44@01)))) == Null | live]
(push) ; 15
; [then-branch: 216 | First:(Second:(First:(Second:($t@44@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 216 | First:(Second:(First:(Second:($t@44@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 217 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01)))) | live]
; [else-branch: 217 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01)))) | live]
(push) ; 13
; [then-branch: 217 | First:(Second:(First:($t@44@01))) == First:(Second:(First:(Second:($t@44@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 217 | First:(Second:(First:($t@44@01))) != First:(Second:(First:(Second:($t@44@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(declare-const joined_unfolding@46@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@46@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@46@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@46@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@46@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01)
  (=
    ($Snap.first ($Snap.second $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  (not (= res@43@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01)
  (=
    ($Snap.first ($Snap.second $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  (not (= res@43@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01)
  (=
    ($Snap.first ($Snap.second $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  (not (= res@43@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01)
  (=
    ($Snap.first ($Snap.second $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
  (not (= res@43@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(declare-const joined_unfolding@47@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))
  (= (as joined_unfolding@47@01  Bool) (as joined_unfolding@45@01  Bool))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))
  (=
    (as joined_unfolding@47@01  Bool)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (=
    (as joined_unfolding@47@01  Bool)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (= (as joined_unfolding@47@01  Bool) (as joined_unfolding@46@01  Bool))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@44@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@44@01))
      ($Snap.second ($Snap.first $t@44@01))))
  (=
    ($Snap.second ($Snap.first $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@44@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            $Ref.null))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@45@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@45@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@45@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@45@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01)
    (=
      ($Snap.first ($Snap.second $t@44@01))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
        ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    (not (= res@43@01 $Ref.null))
    (=
      ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
    (=>
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@44@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@44@01))
      ($Snap.second ($Snap.first $t@44@01))))
  (=
    ($Snap.second ($Snap.first $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@44@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null))
  false))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@44@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@44@01))
      ($Snap.second ($Snap.first $t@44@01))))
  (=
    ($Snap.second ($Snap.first $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@44@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))))))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null)))
  false))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@44@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@44@01))
      ($Snap.second ($Snap.first $t@44@01))))
  (=
    ($Snap.second ($Snap.first $t@44@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@44@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@44@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@44@01))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            $Ref.null))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@46@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@46@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@46@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@46@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (tree%trigger ($Snap.first ($Snap.second $t@44@01)) res@43@01)
    (=
      ($Snap.first ($Snap.second $t@44@01))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@44@01)))
        ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
    (not (= res@43@01 $Ref.null))
    (=
      ($Snap.second ($Snap.first ($Snap.second $t@44@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))))
    (=>
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
        $Ref.null)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))))))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@44@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@44@01)))))
            $Ref.null)))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@44@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@44@01))))
        $Ref.null)))))
(assert (as joined_unfolding@47@01  Bool))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; tmp_sibling := cloneTree(this.next_sibling)
(declare-const res@48@01 $Ref)
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 ($Snap.combine ($Snap.first $t@49@01) ($Snap.second $t@49@01))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@49@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@49@01))
    ($Snap.second ($Snap.second $t@49@01)))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.second ($Snap.second $t@49@01)) $Snap.unit))
; [eval] (unfolding acc(tree(this), 1 / 2) in (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling))
(set-option :timeout 0)
(push) ; 6
(assert (tree%trigger ($Snap.first $t@49@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))
(assert (=
  ($Snap.first $t@49@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@49@01))
    ($Snap.second ($Snap.first $t@49@01)))))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  this@30@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.first $t@49@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@49@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  this@30@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first $t@49@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  this@30@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | First:(Second:(First:($t@49@01))) != Null | live]
; [else-branch: 218 | First:(Second:(First:($t@49@01))) == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 218 | First:(Second:(First:($t@49@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  res@48@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))))))
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 219 | First:(Second:(Second:(First:($t@49@01)))) != Null | live]
; [else-branch: 219 | First:(Second:(Second:(First:($t@49@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 219 | First:(Second:(Second:(First:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  res@48@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 9
; [then-branch: 220 | First:(Second:(First:($t@49@01))) == Null | live]
; [else-branch: 220 | First:(Second:(First:($t@49@01))) != Null | live]
(push) ; 10
; [then-branch: 220 | First:(Second:(First:($t@49@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 220 | First:(Second:(First:($t@49@01))) != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
(push) ; 9
; [then-branch: 221 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null | live]
; [else-branch: 221 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null) | live]
(push) ; 10
; [then-branch: 221 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 221 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 222 | First:(Second:(First:($t@49@01))) != Null | live]
; [else-branch: 222 | First:(Second:(First:($t@49@01))) == Null | live]
(push) ; 12
; [then-branch: 222 | First:(Second:(First:($t@49@01))) != Null]
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 222 | First:(Second:(First:($t@49@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 9
(assert (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01))
(assert (=
  ($Snap.first ($Snap.second $t@49@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@48@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
; [else-branch: 223 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 223 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 224 | First:(Second:(Second:(First:(Second:($t@49@01))))) != Null | live]
; [else-branch: 224 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 224 | First:(Second:(Second:(First:(Second:($t@49@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 12
; [then-branch: 225 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 225 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
(push) ; 13
; [then-branch: 225 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 225 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 226 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 226 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null) | live]
(push) ; 13
; [then-branch: 226 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 226 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 227 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
; [else-branch: 227 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
(push) ; 15
; [then-branch: 227 | First:(Second:(First:(Second:($t@49@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 227 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 228 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01)))) | live]
; [else-branch: 228 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01)))) | live]
(push) ; 13
; [then-branch: 228 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 228 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 224 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
; [then-branch: 229 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 229 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
(push) ; 13
; [then-branch: 229 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 229 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 230 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 230 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null) | live]
(push) ; 13
; [then-branch: 230 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 230 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 231 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
; [else-branch: 231 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
(push) ; 15
; [then-branch: 231 | First:(Second:(First:(Second:($t@49@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 231 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 232 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01)))) | live]
; [else-branch: 232 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01)))) | live]
(push) ; 13
; [then-branch: 232 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 232 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 223 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; [eval] this.next_sibling != null
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 233 | First:(Second:(Second:(First:(Second:($t@49@01))))) != Null | live]
; [else-branch: 233 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 233 | First:(Second:(Second:(First:(Second:($t@49@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 12
; [then-branch: 234 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 234 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
(push) ; 13
; [then-branch: 234 | First:(Second:(First:(Second:($t@49@01)))) == Null]
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 234 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 235 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 235 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null) | live]
(push) ; 13
; [then-branch: 235 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 235 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 236 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
; [else-branch: 236 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
(push) ; 15
; [then-branch: 236 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 236 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 237 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01)))) | live]
; [else-branch: 237 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01)))) | live]
(push) ; 13
; [then-branch: 237 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 237 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 233 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
; [then-branch: 238 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 238 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
(push) ; 13
; [then-branch: 238 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 238 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 239 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 239 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null) | live]
(push) ; 13
; [then-branch: 239 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 239 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 240 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
; [else-branch: 240 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
(push) ; 15
; [then-branch: 240 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 240 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 241 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01)))) | live]
; [else-branch: 241 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01)))) | live]
(push) ; 13
; [then-branch: 241 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 241 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(declare-const joined_unfolding@50@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@50@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@50@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@50@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@50@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01)
  (=
    ($Snap.first ($Snap.second $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  (not (= res@48@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01)
  (=
    ($Snap.first ($Snap.second $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  (not (= res@48@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01)
  (=
    ($Snap.first ($Snap.second $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  (not (= res@48@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01)
  (=
    ($Snap.first ($Snap.second $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  (not (= res@48@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))))
(pop) ; 8
(push) ; 8
; [else-branch: 219 | First:(Second:(Second:(First:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
; [then-branch: 242 | First:(Second:(First:($t@49@01))) == Null | live]
; [else-branch: 242 | First:(Second:(First:($t@49@01))) != Null | live]
(push) ; 10
; [then-branch: 242 | First:(Second:(First:($t@49@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 242 | First:(Second:(First:($t@49@01))) != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
(push) ; 9
; [then-branch: 243 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null | live]
; [else-branch: 243 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null) | live]
(push) ; 10
; [then-branch: 243 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 243 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 244 | First:(Second:(First:($t@49@01))) != Null | live]
; [else-branch: 244 | First:(Second:(First:($t@49@01))) == Null | live]
(push) ; 12
; [then-branch: 244 | First:(Second:(First:($t@49@01))) != Null]
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 244 | First:(Second:(First:($t@49@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 9
(assert (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01))
(assert (=
  ($Snap.first ($Snap.second $t@49@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@49@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@49@01))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 245 | First:(Second:($t@32@01)) != Null | dead]
; [else-branch: 245 | First:(Second:($t@32@01)) == Null | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 245 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; [eval] this.next_sibling != null
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  $Ref.null)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 246 | First:(Second:(Second:(First:($t@49@01)))) != Null | dead]
; [else-branch: 246 | First:(Second:(Second:(First:($t@49@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 246 | First:(Second:(Second:(First:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 247 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 247 | First:(Second:($t@32@01)) != Null | live]
(push) ; 13
; [then-branch: 247 | First:(Second:($t@32@01)) == Null]
; [eval] this.next_sibling == null
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 247 | First:(Second:($t@32@01)) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 248 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:($t@32@01)) == Null | live]
; [else-branch: 248 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:($t@32@01)) == Null) | live]
(push) ; 13
; [then-branch: 248 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:($t@32@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 248 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:($t@32@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 249 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 249 | First:(Second:($t@32@01)) == Null | live]
(push) ; 15
; [then-branch: 249 | First:(Second:($t@32@01)) != Null]
; [eval] this.next_sibling != null
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 249 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 250 | First:(Second:(First:($t@49@01))) == First:(Second:($t@32@01)) | live]
; [else-branch: 250 | First:(Second:(First:($t@49@01))) != First:(Second:($t@32@01)) | live]
(push) ; 13
; [then-branch: 250 | First:(Second:(First:($t@49@01))) == First:(Second:($t@32@01))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
; [eval] this.next_sibling == res.next_sibling
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 250 | First:(Second:(First:($t@49@01))) != First:(Second:($t@32@01))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert false)
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))))
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 218 | First:(Second:(First:($t@49@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))))))
; [eval] this.next_sibling != null
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 251 | First:(Second:(Second:(First:($t@49@01)))) != Null | live]
; [else-branch: 251 | First:(Second:(Second:(First:($t@49@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 251 | First:(Second:(Second:(First:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null)))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  res@48@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 9
; [then-branch: 252 | First:(Second:(First:($t@49@01))) == Null | live]
; [else-branch: 252 | First:(Second:(First:($t@49@01))) != Null | live]
(push) ; 10
; [then-branch: 252 | First:(Second:(First:($t@49@01))) == Null]
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 252 | First:(Second:(First:($t@49@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
(push) ; 9
; [then-branch: 253 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null | live]
; [else-branch: 253 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null) | live]
(push) ; 10
; [then-branch: 253 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 253 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 254 | First:(Second:(First:($t@49@01))) != Null | live]
; [else-branch: 254 | First:(Second:(First:($t@49@01))) == Null | live]
(push) ; 12
; [then-branch: 254 | First:(Second:(First:($t@49@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 254 | First:(Second:(First:($t@49@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 9
(assert (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01))
(assert (=
  ($Snap.first ($Snap.second $t@49@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@49@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@49@01))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | First:(Second:($t@32@01)) != Null | dead]
; [else-branch: 255 | First:(Second:($t@32@01)) == Null | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 255 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; [eval] this.next_sibling != null
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  $Ref.null)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | First:(Second:(Second:(First:($t@49@01)))) != Null | dead]
; [else-branch: 256 | First:(Second:(Second:(First:($t@49@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 256 | First:(Second:(Second:(First:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 257 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 257 | First:(Second:($t@32@01)) != Null | live]
(push) ; 13
; [then-branch: 257 | First:(Second:($t@32@01)) == Null]
; [eval] this.next_sibling == null
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 257 | First:(Second:($t@32@01)) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 258 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:($t@32@01)) == Null | live]
; [else-branch: 258 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:($t@32@01)) == Null) | live]
(push) ; 13
; [then-branch: 258 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:($t@32@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 258 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:($t@32@01)) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 259 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 259 | First:(Second:($t@32@01)) == Null | live]
(push) ; 15
; [then-branch: 259 | First:(Second:($t@32@01)) != Null]
; [eval] this.next_sibling != null
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 259 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 260 | First:(Second:(First:($t@49@01))) == First:(Second:($t@32@01)) | live]
; [else-branch: 260 | First:(Second:(First:($t@49@01))) != First:(Second:($t@32@01)) | live]
(push) ; 13
; [then-branch: 260 | First:(Second:(First:($t@49@01))) == First:(Second:($t@32@01))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
; [eval] this.next_sibling == res.next_sibling
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 260 | First:(Second:(First:($t@49@01))) != First:(Second:($t@32@01))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert false)
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))))
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(pop) ; 8
(push) ; 8
; [else-branch: 251 | First:(Second:(Second:(First:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 9
; [then-branch: 261 | First:(Second:(First:($t@49@01))) == Null | live]
; [else-branch: 261 | First:(Second:(First:($t@49@01))) != Null | live]
(push) ; 10
; [then-branch: 261 | First:(Second:(First:($t@49@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 10
(push) ; 10
; [else-branch: 261 | First:(Second:(First:($t@49@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
(push) ; 9
; [then-branch: 262 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null | live]
; [else-branch: 262 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null) | live]
(push) ; 10
; [then-branch: 262 | First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 262 | !(First:(Second:(Second:(First:($t@49@01)))) == Null && First:(Second:(First:($t@49@01))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 11
; [then-branch: 263 | First:(Second:(First:($t@49@01))) != Null | live]
; [else-branch: 263 | First:(Second:(First:($t@49@01))) == Null | live]
(push) ; 12
; [then-branch: 263 | First:(Second:(First:($t@49@01))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 12
(push) ; 12
; [else-branch: 263 | First:(Second:(First:($t@49@01))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  $Ref.null))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))))
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 9
(assert (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01))
(assert (=
  ($Snap.first ($Snap.second $t@49@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@48@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= res@37@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
; [else-branch: 264 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 264 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | First:(Second:(Second:(First:(Second:($t@49@01))))) != Null | live]
; [else-branch: 265 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 265 | First:(Second:(Second:(First:(Second:($t@49@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 12
; [then-branch: 266 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 266 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
(push) ; 13
; [then-branch: 266 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 266 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 267 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 267 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null) | live]
(push) ; 13
; [then-branch: 267 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 267 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 268 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
; [else-branch: 268 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
(push) ; 15
; [then-branch: 268 | First:(Second:(First:(Second:($t@49@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 268 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 269 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01)))) | live]
; [else-branch: 269 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01)))) | live]
(push) ; 13
; [then-branch: 269 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 269 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 265 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
; [then-branch: 270 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 270 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
(push) ; 13
; [then-branch: 270 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 270 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 271 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 271 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null) | live]
(push) ; 13
; [then-branch: 271 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 271 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 272 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
; [else-branch: 272 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
(push) ; 15
; [then-branch: 272 | First:(Second:(First:(Second:($t@49@01)))) != Null]
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 272 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 273 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01)))) | live]
; [else-branch: 273 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01)))) | live]
(push) ; 13
; [then-branch: 273 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 273 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 264 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; [eval] this.next_sibling != null
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 274 | First:(Second:(Second:(First:(Second:($t@49@01))))) != Null | live]
; [else-branch: 274 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 274 | First:(Second:(Second:(First:(Second:($t@49@01))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)))
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 12
; [then-branch: 275 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 275 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
(push) ; 13
; [then-branch: 275 | First:(Second:(First:(Second:($t@49@01)))) == Null]
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 275 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 276 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 276 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null) | live]
(push) ; 13
; [then-branch: 276 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 276 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 277 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
; [else-branch: 277 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
(push) ; 15
; [then-branch: 277 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 277 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 278 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01)))) | live]
; [else-branch: 278 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01)))) | live]
(push) ; 13
; [then-branch: 278 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 278 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 274 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  $Snap.unit))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 12
; [then-branch: 279 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 279 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
(push) ; 13
; [then-branch: 279 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 13
(push) ; 13
; [else-branch: 279 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(push) ; 12
; [then-branch: 280 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null | live]
; [else-branch: 280 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null) | live]
(push) ; 13
; [then-branch: 280 | First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    $Ref.null)
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 280 | !(First:(Second:(Second:(First:(Second:($t@49@01))))) == Null && First:(Second:(First:(Second:($t@49@01)))) == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 14
; [then-branch: 281 | First:(Second:(First:(Second:($t@49@01)))) != Null | live]
; [else-branch: 281 | First:(Second:(First:(Second:($t@49@01)))) == Null | live]
(push) ; 15
; [then-branch: 281 | First:(Second:(First:(Second:($t@49@01)))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)))
; [eval] this.next_sibling != null
(pop) ; 15
(push) ; 15
; [else-branch: 281 | First:(Second:(First:(Second:($t@49@01)))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  $Ref.null))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 12
; [then-branch: 282 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01)))) | live]
; [else-branch: 282 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01)))) | live]
(push) ; 13
; [then-branch: 282 | First:(Second:(First:($t@49@01))) == First:(Second:(First:(Second:($t@49@01))))]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 13
(push) ; 13
; [else-branch: 282 | First:(Second:(First:($t@49@01))) != First:(Second:(First:(Second:($t@49@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(declare-const joined_unfolding@51@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@51@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (=
    (as joined_unfolding@51@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@51@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (=
    (as joined_unfolding@51@01  Bool)
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01)
  (=
    ($Snap.first ($Snap.second $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  (not (= res@48@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01)
  (=
    ($Snap.first ($Snap.second $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  (not (= res@48@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01)
  (=
    ($Snap.first ($Snap.second $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  (not (= res@48@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01)
  (=
    ($Snap.first ($Snap.second $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
  (not (= res@48@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(declare-const joined_unfolding@52@01 Bool)
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))
  (= (as joined_unfolding@52@01  Bool) (as joined_unfolding@50@01  Bool))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))
  (=
    (as joined_unfolding@52@01  Bool)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (=
    (as joined_unfolding@52@01  Bool)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (= (as joined_unfolding@52@01  Bool) (as joined_unfolding@51@01  Bool))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@49@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@49@01))
      ($Snap.second ($Snap.first $t@49@01))))
  (=
    ($Snap.second ($Snap.first $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@49@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))))))
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            $Ref.null))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@50@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@50@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@50@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@50@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01)
    (=
      ($Snap.first ($Snap.second $t@49@01))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
        ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    (not (= res@48@01 $Ref.null))
    (=
      ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
    (=>
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))))))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@49@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@49@01))
      ($Snap.second ($Snap.first $t@49@01))))
  (=
    ($Snap.second ($Snap.first $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@49@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))))))
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null))
  false))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@49@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@49@01))
      ($Snap.second ($Snap.first $t@49@01))))
  (=
    ($Snap.second ($Snap.first $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@49@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))))))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
    $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null)))
  false))
; Joined path conditions
(assert (and
  (tree%trigger ($Snap.first $t@49@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@49@01))
      ($Snap.second ($Snap.first $t@49@01))))
  (=
    ($Snap.second ($Snap.first $t@49@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@49@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@49@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))))))
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
      $Snap.unit)
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@49@01))))))
      $Snap.unit)
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null))
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              $Ref.null)))
        (or
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            $Ref.null)
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null)
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            $Ref.null))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@51@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (=
        (as joined_unfolding@51@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@51@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (=
        (as joined_unfolding@51@01  Bool)
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (tree%trigger ($Snap.first ($Snap.second $t@49@01)) res@48@01)
    (=
      ($Snap.first ($Snap.second $t@49@01))
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@49@01)))
        ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
    (not (= res@48@01 $Ref.null))
    (=
      ($Snap.second ($Snap.first ($Snap.second $t@49@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
        ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
    (=
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
    (=
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))))
    (=>
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
        $Ref.null)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (=
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          $Snap.unit)
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null))
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                  $Ref.null)
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))
            (or
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                  $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null)
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
              $Ref.null)
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
              $Ref.null))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
                $Ref.null))
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
                $Ref.null))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))))))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
          $Ref.null)
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@49@01))))))
            $Ref.null))
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@49@01)))))
            $Ref.null)))))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@49@01)))))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.first $t@49@01))))
        $Ref.null)))))
(assert (as joined_unfolding@52@01  Bool))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res.data := this.data
(declare-const data@53@01 Int)
(assert (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; res.next_child := tmp_child
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; res.next_sibling := tmp_sibling
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree(this), 1 / 2)
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 283 | First:(Second:($t@32@01)) == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 283 | First:(Second:($t@32@01)) != Null]
; [eval] this.next_sibling != null
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | First:(Second:(Second:($t@32@01))) != Null | live]
; [else-branch: 284 | First:(Second:(Second:($t@32@01))) == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 284 | First:(Second:(Second:($t@32@01))) != Null]
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 8
; [then-branch: 285 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 285 | First:(Second:($t@32@01)) != Null | live]
(push) ; 9
; [then-branch: 285 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 9
(push) ; 9
; [else-branch: 285 | First:(Second:($t@32@01)) != Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 286 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null | live]
; [else-branch: 286 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null) | live]
(push) ; 9
; [then-branch: 286 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 286 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null)]
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 10
; [then-branch: 287 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 287 | First:(Second:($t@32@01)) == Null | live]
(push) ; 11
; [then-branch: 287 | First:(Second:($t@32@01)) != Null]
; [eval] this.next_sibling != null
(pop) ; 11
(push) ; 11
; [else-branch: 287 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null)
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))
  (or
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)))))
(assert (tree%trigger ($Snap.combine
  ($Snap.first $t@32@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@32@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@32@01)))
      ($Snap.combine
        ($Snap.first $t@44@01)
        ($Snap.combine ($Snap.first $t@49@01) $Snap.unit))))) this@30@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (= res@48@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= res@43@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree(res), write)
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= res@43@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= res@43@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 288 | res@43@01 != Null | live]
; [else-branch: 288 | res@43@01 == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 288 | res@43@01 != Null]
(assert (not (= res@43@01 $Ref.null)))
; [eval] this.next_sibling != null
(push) ; 9
(set-option :timeout 10)
(assert (not (= res@48@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= res@48@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 289 | res@48@01 != Null | live]
; [else-branch: 289 | res@48@01 == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 289 | res@48@01 != Null]
(assert (not (= res@48@01 $Ref.null)))
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(push) ; 10
; [then-branch: 290 | res@43@01 == Null | live]
; [else-branch: 290 | res@43@01 != Null | live]
(push) ; 11
; [then-branch: 290 | res@43@01 == Null]
(assert (= res@43@01 $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 11
(push) ; 11
; [else-branch: 290 | res@43@01 != Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= res@43@01 $Ref.null)) (= res@43@01 $Ref.null)))
(push) ; 10
; [then-branch: 291 | res@48@01 == Null && res@43@01 == Null | live]
; [else-branch: 291 | !(res@48@01 == Null && res@43@01 == Null) | live]
(push) ; 11
; [then-branch: 291 | res@48@01 == Null && res@43@01 == Null]
(assert (and (= res@48@01 $Ref.null) (= res@43@01 $Ref.null)))
(pop) ; 11
(push) ; 11
; [else-branch: 291 | !(res@48@01 == Null && res@43@01 == Null)]
(assert (not (and (= res@48@01 $Ref.null) (= res@43@01 $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 12
; [then-branch: 292 | res@43@01 != Null | live]
; [else-branch: 292 | res@43@01 == Null | live]
(push) ; 13
; [then-branch: 292 | res@43@01 != Null]
; [eval] this.next_sibling != null
(pop) ; 13
(push) ; 13
; [else-branch: 292 | res@43@01 == Null]
(assert (= res@43@01 $Ref.null))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (and (= res@48@01 $Ref.null) (= res@43@01 $Ref.null)))
  (and
    (not (and (= res@48@01 $Ref.null) (= res@43@01 $Ref.null)))
    (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null))))))
(assert (or
  (not (and (= res@48@01 $Ref.null) (= res@43@01 $Ref.null)))
  (and (= res@48@01 $Ref.null) (= res@43@01 $Ref.null))))
(push) ; 10
(assert (not (or
  (and (= res@48@01 $Ref.null) (= res@43@01 $Ref.null))
  (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and (= res@48@01 $Ref.null) (= res@43@01 $Ref.null))
  (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null)))))
(assert (tree%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap data@53@01)
  ($Snap.combine
    ($SortWrappers.$RefTo$Snap res@43@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap res@48@01)
      ($Snap.combine
        ($Snap.first ($Snap.second $t@44@01))
        ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit))))) res@37@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(tree(this), 1 / 2) in (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling))
(set-option :timeout 0)
(push) ; 10
; [eval] this.next_child != null
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 293 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 293 | First:(Second:($t@32@01)) == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 293 | First:(Second:($t@32@01)) != Null]
(push) ; 12
(set-option :timeout 10)
(assert (not (= res@37@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | First:(Second:(Second:($t@32@01))) != Null | live]
; [else-branch: 294 | First:(Second:(Second:($t@32@01))) == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 294 | First:(Second:(Second:($t@32@01))) != Null]
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 13
; [then-branch: 295 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 295 | First:(Second:($t@32@01)) != Null | live]
(push) ; 14
; [then-branch: 295 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 14
(push) ; 14
; [else-branch: 295 | First:(Second:($t@32@01)) != Null]
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 296 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null | live]
; [else-branch: 296 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null) | live]
(push) ; 14
; [then-branch: 296 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(pop) ; 14
(push) ; 14
; [else-branch: 296 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null)]
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 15
; [then-branch: 297 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 297 | First:(Second:($t@32@01)) == Null | live]
(push) ; 16
; [then-branch: 297 | First:(Second:($t@32@01)) != Null]
; [eval] this.next_sibling != null
(pop) ; 16
(push) ; 16
; [else-branch: 297 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@43@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | res@43@01 != Null | live]
; [else-branch: 298 | res@43@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 298 | res@43@01 != Null]
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@43@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= res@48@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 299 | res@48@01 != Null | live]
; [else-branch: 299 | res@48@01 == Null | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 299 | res@48@01 != Null]
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 16
; [then-branch: 300 | res@43@01 == Null | live]
; [else-branch: 300 | res@43@01 != Null | live]
(push) ; 17
; [then-branch: 300 | res@43@01 == Null]
(assert (= res@43@01 $Ref.null))
; [eval] this.next_sibling == null
(pop) ; 17
(push) ; 17
; [else-branch: 300 | res@43@01 != Null]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 301 | res@48@01 == Null && res@43@01 == Null | live]
; [else-branch: 301 | !(res@48@01 == Null && res@43@01 == Null) | live]
(push) ; 17
; [then-branch: 301 | res@48@01 == Null && res@43@01 == Null]
(assert (and (= res@48@01 $Ref.null) (= res@43@01 $Ref.null)))
(pop) ; 17
(push) ; 17
; [else-branch: 301 | !(res@48@01 == Null && res@43@01 == Null)]
(assert (not (and (= res@48@01 $Ref.null) (= res@43@01 $Ref.null))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(push) ; 18
; [then-branch: 302 | res@43@01 != Null | live]
; [else-branch: 302 | res@43@01 == Null | live]
(push) ; 19
; [then-branch: 302 | res@43@01 != Null]
; [eval] this.next_sibling != null
(pop) ; 19
(push) ; 19
; [else-branch: 302 | res@43@01 == Null]
(assert (= res@43@01 $Ref.null))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(push) ; 16
; [then-branch: 303 | First:(Second:($t@32@01)) == res@43@01 | live]
; [else-branch: 303 | First:(Second:($t@32@01)) != res@43@01 | live]
(push) ; 17
; [then-branch: 303 | First:(Second:($t@32@01)) == res@43@01]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 17
(push) ; 17
; [else-branch: 303 | First:(Second:($t@32@01)) != res@43@01]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      res@43@01))
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(pop) ; 15
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and (not (= res@43@01 $Ref.null)) (not (= res@48@01 $Ref.null)))
  (or
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        res@43@01))
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      res@43@01))))
(assert (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null))))
(pop) ; 12
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null)))
  (and
    (=>
      (and (not (= res@43@01 $Ref.null)) (not (= res@48@01 $Ref.null)))
      (or
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            res@43@01))
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          res@43@01)))
    (not (= res@48@01 $Ref.null))
    (not (= res@43@01 $Ref.null)))))
(assert (and
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(push) ; 10
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.combine
      ($Snap.first $t@32@01)
      ($Snap.combine
        ($Snap.first ($Snap.second $t@32@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@32@01)))
          ($Snap.combine
            ($Snap.first $t@44@01)
            ($Snap.combine ($Snap.first $t@49@01) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($Snap.first $t@32@01)
      ($Snap.combine
        ($Snap.first ($Snap.second $t@32@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@32@01)))
          ($Snap.combine
            ($Snap.first $t@44@01)
            ($Snap.combine ($Snap.first $t@49@01) $Snap.unit)))))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(tree(this), 1 / 2) in (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling))
(set-option :timeout 0)
(push) ; 10
; [eval] this.next_child != null
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 304 | First:(Second:($t@32@01)) == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 304 | First:(Second:($t@32@01)) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= res@37@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | First:(Second:(Second:($t@32@01))) != Null | live]
; [else-branch: 305 | First:(Second:(Second:($t@32@01))) == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 305 | First:(Second:(Second:($t@32@01))) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= res@37@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 13
; [then-branch: 306 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 306 | First:(Second:($t@32@01)) != Null | live]
(push) ; 14
; [then-branch: 306 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first $t@44@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap data@53@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap res@43@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@48@01)
        ($Snap.combine
          ($Snap.first ($Snap.second $t@44@01))
          ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))
(assert (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))
; [eval] this.next_sibling == null
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 306 | First:(Second:($t@32@01)) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($Snap.first $t@44@01)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap data@53@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@43@01)
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap res@48@01)
            ($Snap.combine
              ($Snap.first ($Snap.second $t@44@01))
              ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit))))))
    (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
; Joined path conditions
(set-option :timeout 0)
(push) ; 13
; [then-branch: 307 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null | live]
; [else-branch: 307 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null) | live]
(push) ; 14
; [then-branch: 307 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first $t@44@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap data@53@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap res@43@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@48@01)
        ($Snap.combine
          ($Snap.first ($Snap.second $t@44@01))
          ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))
(assert (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 307 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 15
; [then-branch: 308 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 308 | First:(Second:($t@32@01)) == Null | live]
(push) ; 16
; [then-branch: 308 | First:(Second:($t@32@01)) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_sibling != null
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 308 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first $t@44@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap data@53@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap res@43@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@48@01)
        ($Snap.combine
          ($Snap.first ($Snap.second $t@44@01))
          ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))
(assert (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($Snap.first $t@44@01)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap data@53@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@43@01)
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap res@48@01)
            ($Snap.combine
              ($Snap.first ($Snap.second $t@44@01))
              ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit))))))
    (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
; Joined path conditions
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@43@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= res@43@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | res@43@01 != Null | live]
; [else-branch: 309 | res@43@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 309 | res@43@01 != Null]
(assert (not (= res@43@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@43@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= res@48@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= res@48@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 310 | res@48@01 != Null | live]
; [else-branch: 310 | res@48@01 == Null | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 310 | res@48@01 != Null]
(assert (not (= res@48@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@43@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 16
; [then-branch: 311 | res@43@01 == Null | live]
; [else-branch: 311 | res@43@01 != Null | live]
(push) ; 17
; [then-branch: 311 | res@43@01 == Null]
(assert (= res@43@01 $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))
(assert (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))
(assert false)
; [eval] this.next_sibling == null
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 311 | res@43@01 != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> (= res@43@01 $Ref.null) false))
; Joined path conditions
(assert (=>
  (not (= res@43@01 $Ref.null))
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))))
(set-option :timeout 0)
(push) ; 16
; [then-branch: 312 | First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null | live]
; [else-branch: 312 | !(First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null) | live]
(push) ; 17
; [then-branch: 312 | First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null)
  (= res@43@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))
(assert (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))
(assert false)
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 312 | !(First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 18
; [then-branch: 313 | res@43@01 != Null | live]
; [else-branch: 313 | res@43@01 == Null | live]
(push) ; 19
; [then-branch: 313 | res@43@01 != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
; [eval] this.next_sibling != null
(pop) ; 19
(set-option :timeout 0)
(push) ; 19
; [else-branch: 313 | res@43@01 == Null]
(assert (= res@43@01 $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))
(assert (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))
(assert false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))
  false))
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null)
      (= res@43@01 $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null)))
    (not (= res@37@01 this@30@01))
    (not (= this@30@01 res@37@01))
    (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null)
      (= res@43@01 $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))
  (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null)))))
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(set-option :timeout 0)
(push) ; 16
; [then-branch: 314 | First:(Second:($t@32@01)) == res@43@01 | live]
; [else-branch: 314 | First:(Second:($t@32@01)) != res@43@01 | live]
(push) ; 17
; [then-branch: 314 | First:(Second:($t@32@01)) == res@43@01]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@48@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@48@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 314 | First:(Second:($t@32@01)) != res@43@01]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
(assert (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      res@43@01)
    (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01))
    (not (= this@30@01 res@37@01))
    (not (= res@37@01 this@30@01)))))
; Joined path conditions
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      res@43@01))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        res@43@01))
    (not (= res@37@01 this@30@01))
    (not (= this@30@01 res@37@01)))))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      res@43@01))
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(pop) ; 15
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (not (= res@43@01 $Ref.null))
  (and
    (not (= res@43@01 $Ref.null))
    (not (= res@37@01 this@30@01))
    (not (= this@30@01 res@37@01)))))
(assert (=>
  (and (not (= res@43@01 $Ref.null)) (not (= res@48@01 $Ref.null)))
  (and
    (not (= res@48@01 $Ref.null))
    (not (= this@30@01 res@37@01))
    (not (= res@37@01 this@30@01))
    (=> (= res@43@01 $Ref.null) false)
    (=>
      (not (= res@43@01 $Ref.null))
      (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null))
      false)
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
            $Ref.null)
          (= res@43@01 $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
              $Ref.null)
            (= res@43@01 $Ref.null)))
        (not (= res@37@01 this@30@01))
        (not (= this@30@01 res@37@01))
        (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
            $Ref.null)
          (= res@43@01 $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null))
      (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null))))
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        res@43@01)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          res@43@01)
        (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01))
        (not (= this@30@01 res@37@01))
        (not (= res@37@01 this@30@01))))
    (=>
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          res@43@01))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            res@43@01))
        (not (= res@37@01 this@30@01))
        (not (= this@30@01 res@37@01))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          res@43@01))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        res@43@01)))))
(assert (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null))))
(pop) ; 12
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null)))
  (and
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        $Ref.null)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null)
        (=
          ($Snap.first $t@44@01)
          ($Snap.combine
            ($SortWrappers.IntTo$Snap data@53@01)
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap res@43@01)
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap res@48@01)
                ($Snap.combine
                  ($Snap.first ($Snap.second $t@44@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second $t@49@01))
                    $Snap.unit))))))
        (= ($Snap.first $t@44@01) ($Snap.first $t@49@01))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          $Ref.null)
        (=
          ($Snap.first $t@44@01)
          ($Snap.combine
            ($SortWrappers.IntTo$Snap data@53@01)
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap res@43@01)
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap res@48@01)
                ($Snap.combine
                  ($Snap.first ($Snap.second $t@44@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second $t@49@01))
                    $Snap.unit))))))
        (= ($Snap.first $t@44@01) ($Snap.first $t@49@01))))
    (=>
      (not (= res@43@01 $Ref.null))
      (and
        (not (= res@43@01 $Ref.null))
        (not (= res@37@01 this@30@01))
        (not (= this@30@01 res@37@01))))
    (=>
      (and (not (= res@43@01 $Ref.null)) (not (= res@48@01 $Ref.null)))
      (and
        (not (= res@48@01 $Ref.null))
        (not (= this@30@01 res@37@01))
        (not (= res@37@01 this@30@01))
        (=> (= res@43@01 $Ref.null) false)
        (=>
          (not (= res@43@01 $Ref.null))
          (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01))))
        (=>
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
              $Ref.null)
            (= res@43@01 $Ref.null))
          false)
        (=>
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
                $Ref.null)
              (= res@43@01 $Ref.null)))
          (and
            (not
              (and
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
                  $Ref.null)
                (= res@43@01 $Ref.null)))
            (not (= res@37@01 this@30@01))
            (not (= this@30@01 res@37@01))
            (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null)))))
        (or
          (not
            (and
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
                $Ref.null)
              (= res@43@01 $Ref.null)))
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
              $Ref.null)
            (= res@43@01 $Ref.null)))
        (or
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
              $Ref.null)
            (= res@43@01 $Ref.null))
          (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null))))
        (=>
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            res@43@01)
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
              res@43@01)
            (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01))
            (not (= this@30@01 res@37@01))
            (not (= res@37@01 this@30@01))))
        (=>
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
              res@43@01))
          (and
            (not
              (=
                ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
                res@43@01))
            (not (= res@37@01 this@30@01))
            (not (= this@30@01 res@37@01))))
        (or
          (not
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
              res@43@01))
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            res@43@01))))
    (not (= res@48@01 $Ref.null))
    (not (= res@43@01 $Ref.null)))))
(assert (and
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (unfolding acc(tree(this), 1 / 2) in (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling))
(set-option :timeout 0)
(push) ; 10
; [eval] this.next_child != null
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 315 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 315 | First:(Second:($t@32@01)) == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 315 | First:(Second:($t@32@01)) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= res@37@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 316 | First:(Second:(Second:($t@32@01))) != Null | live]
; [else-branch: 316 | First:(Second:(Second:($t@32@01))) == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 316 | First:(Second:(Second:($t@32@01))) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= res@37@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 13
; [then-branch: 317 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 317 | First:(Second:($t@32@01)) != Null | live]
(push) ; 14
; [then-branch: 317 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first $t@44@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap data@53@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap res@43@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@48@01)
        ($Snap.combine
          ($Snap.first ($Snap.second $t@44@01))
          ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))
(assert (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))
; [eval] this.next_sibling == null
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 317 | First:(Second:($t@32@01)) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($Snap.first $t@44@01)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap data@53@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@43@01)
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap res@48@01)
            ($Snap.combine
              ($Snap.first ($Snap.second $t@44@01))
              ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit))))))
    (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
; Joined path conditions
(set-option :timeout 0)
(push) ; 13
; [then-branch: 318 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null | live]
; [else-branch: 318 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null) | live]
(push) ; 14
; [then-branch: 318 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first $t@44@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap data@53@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap res@43@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@48@01)
        ($Snap.combine
          ($Snap.first ($Snap.second $t@44@01))
          ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))
(assert (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 318 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 15
; [then-branch: 319 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 319 | First:(Second:($t@32@01)) == Null | live]
(push) ; 16
; [then-branch: 319 | First:(Second:($t@32@01)) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_sibling != null
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 319 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first $t@44@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap data@53@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap res@43@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@48@01)
        ($Snap.combine
          ($Snap.first ($Snap.second $t@44@01))
          ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))
(assert (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($Snap.first $t@44@01)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap data@53@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@43@01)
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap res@48@01)
            ($Snap.combine
              ($Snap.first ($Snap.second $t@44@01))
              ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit))))))
    (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
; Joined path conditions
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@43@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= res@43@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 320 | res@43@01 != Null | live]
; [else-branch: 320 | res@43@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 320 | res@43@01 != Null]
(assert (not (= res@43@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@43@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= res@48@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= res@48@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 321 | res@48@01 != Null | live]
; [else-branch: 321 | res@48@01 == Null | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 321 | res@48@01 != Null]
(assert (not (= res@48@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@43@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 16
; [then-branch: 322 | res@43@01 == Null | live]
; [else-branch: 322 | res@43@01 != Null | live]
(push) ; 17
; [then-branch: 322 | res@43@01 == Null]
(assert (= res@43@01 $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))
(assert (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))
(assert false)
; [eval] this.next_sibling == null
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 322 | res@43@01 != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> (= res@43@01 $Ref.null) false))
; Joined path conditions
(assert (=>
  (not (= res@43@01 $Ref.null))
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))))
(set-option :timeout 0)
(push) ; 16
; [then-branch: 323 | First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null | live]
; [else-branch: 323 | !(First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null) | live]
(push) ; 17
; [then-branch: 323 | First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null)
  (= res@43@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))
(assert (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))
(assert false)
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 323 | !(First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 18
; [then-branch: 324 | res@43@01 != Null | live]
; [else-branch: 324 | res@43@01 == Null | live]
(push) ; 19
; [then-branch: 324 | res@43@01 != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
; [eval] this.next_sibling != null
(pop) ; 19
(set-option :timeout 0)
(push) ; 19
; [else-branch: 324 | res@43@01 == Null]
(assert (= res@43@01 $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))
(assert (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))
(assert false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))
  false))
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null)
      (= res@43@01 $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null)))
    (not (= res@37@01 this@30@01))
    (not (= this@30@01 res@37@01))
    (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null)
      (= res@43@01 $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))
  (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null)))))
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(set-option :timeout 0)
(push) ; 16
; [then-branch: 325 | First:(Second:($t@32@01)) == res@43@01 | live]
; [else-branch: 325 | First:(Second:($t@32@01)) != res@43@01 | live]
(push) ; 17
; [then-branch: 325 | First:(Second:($t@32@01)) == res@43@01]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@48@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@48@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 325 | First:(Second:($t@32@01)) != res@43@01]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
(assert (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      res@43@01)
    (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01))
    (not (= this@30@01 res@37@01))
    (not (= res@37@01 this@30@01)))))
; Joined path conditions
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      res@43@01))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        res@43@01))
    (not (= res@37@01 this@30@01))
    (not (= this@30@01 res@37@01)))))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      res@43@01))
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(pop) ; 15
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (not (= res@43@01 $Ref.null))
  (and
    (not (= res@43@01 $Ref.null))
    (not (= res@37@01 this@30@01))
    (not (= this@30@01 res@37@01)))))
(assert (=>
  (and (not (= res@43@01 $Ref.null)) (not (= res@48@01 $Ref.null)))
  (and
    (not (= res@48@01 $Ref.null))
    (not (= this@30@01 res@37@01))
    (not (= res@37@01 this@30@01))
    (=> (= res@43@01 $Ref.null) false)
    (=>
      (not (= res@43@01 $Ref.null))
      (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null))
      false)
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
            $Ref.null)
          (= res@43@01 $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
              $Ref.null)
            (= res@43@01 $Ref.null)))
        (not (= res@37@01 this@30@01))
        (not (= this@30@01 res@37@01))
        (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
            $Ref.null)
          (= res@43@01 $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null))
      (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null))))
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        res@43@01)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          res@43@01)
        (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01))
        (not (= this@30@01 res@37@01))
        (not (= res@37@01 this@30@01))))
    (=>
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          res@43@01))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            res@43@01))
        (not (= res@37@01 this@30@01))
        (not (= this@30@01 res@37@01))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          res@43@01))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        res@43@01)))))
(assert (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null))))
(pop) ; 12
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.combine
      ($Snap.first $t@32@01)
      ($Snap.combine
        ($Snap.first ($Snap.second $t@32@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@32@01)))
          ($Snap.combine
            ($Snap.first $t@44@01)
            ($Snap.combine ($Snap.first $t@49@01) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($Snap.first $t@32@01)
      ($Snap.combine
        ($Snap.first ($Snap.second $t@32@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@32@01)))
          ($Snap.combine
            ($Snap.first $t@44@01)
            ($Snap.combine ($Snap.first $t@49@01) $Snap.unit)))))
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(tree(this), 1 / 2) in (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling))
(set-option :timeout 0)
(push) ; 10
; [eval] this.next_child != null
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 326 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 326 | First:(Second:($t@32@01)) == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 326 | First:(Second:($t@32@01)) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= res@37@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 327 | First:(Second:(Second:($t@32@01))) != Null | live]
; [else-branch: 327 | First:(Second:(Second:($t@32@01))) == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 327 | First:(Second:(Second:($t@32@01))) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= res@37@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 13
; [then-branch: 328 | First:(Second:($t@32@01)) == Null | live]
; [else-branch: 328 | First:(Second:($t@32@01)) != Null | live]
(push) ; 14
; [then-branch: 328 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first $t@44@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap data@53@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap res@43@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@48@01)
        ($Snap.combine
          ($Snap.first ($Snap.second $t@44@01))
          ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))
(assert (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))
; [eval] this.next_sibling == null
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 328 | First:(Second:($t@32@01)) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($Snap.first $t@44@01)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap data@53@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@43@01)
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap res@48@01)
            ($Snap.combine
              ($Snap.first ($Snap.second $t@44@01))
              ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit))))))
    (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
; Joined path conditions
(set-option :timeout 0)
(push) ; 13
; [then-branch: 329 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null | live]
; [else-branch: 329 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null) | live]
(push) ; 14
; [then-branch: 329 | First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first $t@44@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap data@53@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap res@43@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@48@01)
        ($Snap.combine
          ($Snap.first ($Snap.second $t@44@01))
          ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))
(assert (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 329 | !(First:(Second:(Second:($t@32@01))) == Null && First:(Second:($t@32@01)) == Null)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 15
; [then-branch: 330 | First:(Second:($t@32@01)) != Null | live]
; [else-branch: 330 | First:(Second:($t@32@01)) == Null | live]
(push) ; 16
; [then-branch: 330 | First:(Second:($t@32@01)) != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_sibling != null
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 330 | First:(Second:($t@32@01)) == Null]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first $t@44@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap data@53@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap res@43@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@48@01)
        ($Snap.combine
          ($Snap.first ($Snap.second $t@44@01))
          ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))
(assert (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) $Ref.null)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null)
    (=
      ($Snap.first $t@44@01)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap data@53@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@43@01)
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap res@48@01)
            ($Snap.combine
              ($Snap.first ($Snap.second $t@44@01))
              ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit))))))
    (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
; Joined path conditions
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@37@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  res@37@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@49@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))
    ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first $t@44@01)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap data@53@01)
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@43@01)
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap res@48@01)
          ($Snap.combine
            ($Snap.first ($Snap.second $t@44@01))
            ($Snap.combine ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(tree(res), write) in this.next_child == res.next_child && this.next_sibling == res.next_sibling)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@43@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= res@43@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 331 | res@43@01 != Null | live]
; [else-branch: 331 | res@43@01 == Null | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 331 | res@43@01 != Null]
(assert (not (= res@43@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@43@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_sibling != null
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= res@48@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= res@48@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 332 | res@48@01 != Null | live]
; [else-branch: 332 | res@48@01 == Null | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 332 | res@48@01 != Null]
(assert (not (= res@48@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@43@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] this.next_child == null && this.next_sibling == null || this.next_child != null && this.next_sibling != null
; [eval] this.next_child == null && this.next_sibling == null
; [eval] this.next_child == null
(set-option :timeout 0)
(push) ; 16
; [then-branch: 333 | res@43@01 == Null | live]
; [else-branch: 333 | res@43@01 != Null | live]
(push) ; 17
; [then-branch: 333 | res@43@01 == Null]
(assert (= res@43@01 $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))
(assert (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))
(assert false)
; [eval] this.next_sibling == null
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 333 | res@43@01 != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> (= res@43@01 $Ref.null) false))
; Joined path conditions
(assert (=>
  (not (= res@43@01 $Ref.null))
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))))
(set-option :timeout 0)
(push) ; 16
; [then-branch: 334 | First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null | live]
; [else-branch: 334 | !(First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null) | live]
(push) ; 17
; [then-branch: 334 | First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null]
(assert (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    $Ref.null)
  (= res@43@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))
(assert (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))
(assert false)
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 334 | !(First:(Second:(Second:($t@32@01))) == Null && res@43@01 == Null)]
(assert (not
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
; [eval] this.next_child != null && this.next_sibling != null
; [eval] this.next_child != null
(set-option :timeout 0)
(push) ; 18
; [then-branch: 335 | res@43@01 != Null | live]
; [else-branch: 335 | res@43@01 == Null | live]
(push) ; 19
; [then-branch: 335 | res@43@01 != Null]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
; [eval] this.next_sibling != null
(pop) ; 19
(set-option :timeout 0)
(push) ; 19
; [else-branch: 335 | res@43@01 == Null]
(assert (= res@43@01 $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))
(assert (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01))
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))
(assert false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))
  false))
; Joined path conditions
(assert (=>
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null)
      (= res@43@01 $Ref.null)))
  (and
    (not
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null)))
    (not (= res@37@01 this@30@01))
    (not (= this@30@01 res@37@01))
    (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null))))))
(assert (or
  (not
    (and
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
        $Ref.null)
      (= res@43@01 $Ref.null)))
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))))
(assert (or
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null)
    (= res@43@01 $Ref.null))
  (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null)))))
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
; [eval] this.next_child == res.next_child && this.next_sibling == res.next_sibling
; [eval] this.next_child == res.next_child
(set-option :timeout 0)
(push) ; 16
; [then-branch: 336 | First:(Second:($t@32@01)) == res@43@01 | live]
; [else-branch: 336 | First:(Second:($t@32@01)) != res@43@01 | live]
(push) ; 17
; [then-branch: 336 | First:(Second:($t@32@01)) == res@43@01]
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@48@01 res@43@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@48@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))))
; [eval] this.next_sibling == res.next_sibling
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 336 | First:(Second:($t@32@01)) != res@43@01]
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  res@43@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01)))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@37@01 this@30@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= this@30@01 res@37@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
  res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= res@43@01 res@48@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@49@01)) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@44@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first $t@49@01) ($Snap.first ($Snap.second $t@44@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first ($Snap.second $t@49@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@49@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= data@53@01 ($SortWrappers.$SnapToInt ($Snap.first $t@32@01))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@32@01)) data@53@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (= res@43@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    res@48@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01)))
  (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01)))))
(assert (and (not (= this@30@01 res@37@01)) (not (= res@37@01 this@30@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)
  (and
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      res@43@01)
    (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01))
    (not (= this@30@01 res@37@01))
    (not (= res@37@01 this@30@01)))))
; Joined path conditions
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      res@43@01))
  (and
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        res@43@01))
    (not (= res@37@01 this@30@01))
    (not (= this@30@01 res@37@01)))))
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      res@43@01))
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01)))
(pop) ; 15
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (not (= res@43@01 $Ref.null))
  (and
    (not (= res@43@01 $Ref.null))
    (not (= res@37@01 this@30@01))
    (not (= this@30@01 res@37@01)))))
(assert (=>
  (and (not (= res@43@01 $Ref.null)) (not (= res@48@01 $Ref.null)))
  (and
    (not (= res@48@01 $Ref.null))
    (not (= this@30@01 res@37@01))
    (not (= res@37@01 this@30@01))
    (=> (= res@43@01 $Ref.null) false)
    (=>
      (not (= res@43@01 $Ref.null))
      (and (not (= res@37@01 this@30@01)) (not (= this@30@01 res@37@01))))
    (=>
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null))
      false)
    (=>
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
            $Ref.null)
          (= res@43@01 $Ref.null)))
      (and
        (not
          (and
            (=
              ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
              $Ref.null)
            (= res@43@01 $Ref.null)))
        (not (= res@37@01 this@30@01))
        (not (= this@30@01 res@37@01))
        (or (= res@43@01 $Ref.null) (not (= res@43@01 $Ref.null)))))
    (or
      (not
        (and
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
            $Ref.null)
          (= res@43@01 $Ref.null)))
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null)))
    (or
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
          $Ref.null)
        (= res@43@01 $Ref.null))
      (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null))))
    (=>
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        res@43@01)
      (and
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          res@43@01)
        (= ($Snap.first ($Snap.second $t@44@01)) ($Snap.first $t@44@01))
        (not (= this@30@01 res@37@01))
        (not (= res@37@01 this@30@01))))
    (=>
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          res@43@01))
      (and
        (not
          (=
            ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
            res@43@01))
        (not (= res@37@01 this@30@01))
        (not (= this@30@01 res@37@01))))
    (or
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
          res@43@01))
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
        res@43@01)))))
(assert (and (not (= res@48@01 $Ref.null)) (not (= res@43@01 $Ref.null))))
(pop) ; 12
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
      $Ref.null))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01)))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 10
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@32@01))))
    res@48@01)
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@01))) res@43@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
