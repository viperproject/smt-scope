(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun b_2 () T@U)
(declare-fun f_7 () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun wand (T@U Real T@U Real T@U Real T@U T@U Real Bool) T@U)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandType_wandType () T@T)
(declare-fun |wand#ft| (T@U Real T@U Real T@U Real T@U T@U Real Bool) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun |wand#sm| (T@U Real T@U Real T@U Real T@U T@U Real Bool) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun state (T@U T@U) Bool)
(declare-fun GoodMask (T@U) Bool)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun Cell (T@U) T@U)
(declare-fun PredicateType_CellType () T@T)
(declare-fun |Cell#trigger| (T@U T@U) Bool)
(declare-fun |Cell#everUsed| (T@U) Bool)
(declare-fun |Cell#sm| (T@U) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun getPredWandId (T@U) Int)
(declare-fun FullPerm () Real)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type b_2) (FieldType NormalFieldType boolType))) (= (Ctor RefType) 8)) (= (type f_7) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated b_2 f_7)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (= (Ctor WandType_wandType) 10) (forall ((arg0@@18 T@U) (arg1@@4 Real) (arg2@@1 T@U) (arg3@@0 Real) (arg4 T@U) (arg5 Real) (arg6 T@U) (arg7 T@U) (arg8 Real) (arg9 Bool) ) (! (= (type (wand arg0@@18 arg1@@4 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7 arg8 arg9)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@18 arg1@@4 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7 arg8 arg9))
))))
(assert (forall ((arg1@@5 T@U) (arg2@@2 Real) (arg3@@1 T@U) (arg4@@0 Real) (arg5@@0 T@U) (arg6@@0 Real) (arg7@@0 T@U) (arg8@@0 T@U) (arg9@@0 Real) (arg10 Bool) ) (!  (=> (and (and (and (and (= (type arg1@@5) RefType) (= (type arg3@@1) RefType)) (= (type arg5@@0) RefType)) (= (type arg7@@0) RefType)) (= (type arg8@@0) RefType)) (IsWandField (wand arg1@@5 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0 arg8@@0 arg9@@0 arg10)))
 :qid |stdinbpl.183:15|
 :skolemid |22|
 :pattern ( (wand arg1@@5 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0 arg8@@0 arg9@@0 arg10))
)))
(assert  (and (= (Ctor FrameTypeType) 11) (forall ((arg0@@19 T@U) (arg1@@6 Real) (arg2@@3 T@U) (arg3@@2 Real) (arg4@@1 T@U) (arg5@@1 Real) (arg6@@1 T@U) (arg7@@1 T@U) (arg8@@1 Real) (arg9@@1 Bool) ) (! (= (type (|wand#ft| arg0@@19 arg1@@6 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8@@1 arg9@@1)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@19 arg1@@6 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8@@1 arg9@@1))
))))
(assert (forall ((arg1@@7 T@U) (arg2@@4 Real) (arg3@@3 T@U) (arg4@@2 Real) (arg5@@2 T@U) (arg6@@2 Real) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@2 Real) (arg10@@0 Bool) ) (!  (=> (and (and (and (and (= (type arg1@@7) RefType) (= (type arg3@@3) RefType)) (= (type arg5@@2) RefType)) (= (type arg7@@2) RefType)) (= (type arg8@@2) RefType)) (IsWandField (|wand#ft| arg1@@7 arg2@@4 arg3@@3 arg4@@2 arg5@@2 arg6@@2 arg7@@2 arg8@@2 arg9@@2 arg10@@0)))
 :qid |stdinbpl.187:15|
 :skolemid |23|
 :pattern ( (|wand#ft| arg1@@7 arg2@@4 arg3@@3 arg4@@2 arg5@@2 arg6@@2 arg7@@2 arg8@@2 arg9@@2 arg10@@0))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@20 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType1Type arg0@@20 arg1@@8)) 12)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@21 T@T) (arg1@@9 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@21 arg1@@9)) arg0@@21)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@21 arg1@@9))
))) (forall ((arg0@@22 T@T) (arg1@@10 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@22 arg1@@10)) arg1@@10)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@22 arg1@@10))
))) (forall ((arg0@@23 T@U) (arg1@@11 T@U) (arg2@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@23))))
(= (type (MapType1Select arg0@@23 arg1@@11 arg2@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@23 arg1@@11 arg2@@5))
))) (forall ((arg0@@24 T@U) (arg1@@12 T@U) (arg2@@6 T@U) (arg3@@4 T@U) ) (! (let ((aVar1@@0 (type arg3@@4)))
(let ((aVar0@@0 (type arg1@@12)))
(= (type (MapType1Store arg0@@24 arg1@@12 arg2@@6 arg3@@4)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@24 arg1@@12 arg2@@6 arg3@@4))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (forall ((arg0@@25 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@25))))
(= (type (WandMaskField arg0@@25)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@25))
))) (forall ((arg0@@26 T@U) (arg1@@13 Real) (arg2@@7 T@U) (arg3@@5 Real) (arg4@@3 T@U) (arg5@@3 Real) (arg6@@3 T@U) (arg7@@3 T@U) (arg8@@3 Real) (arg9@@3 Bool) ) (! (= (type (|wand#sm| arg0@@26 arg1@@13 arg2@@7 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@3 arg9@@3)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@26 arg1@@13 arg2@@7 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@3 arg9@@3))
))))
(assert (forall ((arg1@@14 T@U) (arg2@@8 Real) (arg3@@6 T@U) (arg4@@4 Real) (arg5@@4 T@U) (arg6@@4 Real) (arg7@@4 T@U) (arg8@@4 T@U) (arg9@@4 Real) (arg10@@1 Bool) ) (!  (=> (and (and (and (and (= (type arg1@@14) RefType) (= (type arg3@@6) RefType)) (= (type arg5@@4) RefType)) (= (type arg7@@4) RefType)) (= (type arg8@@4) RefType)) (= (|wand#sm| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@4 arg9@@4 arg10@@1) (WandMaskField (|wand#ft| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@4 arg9@@4 arg10@@1))))
 :qid |stdinbpl.199:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand#ft| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@4 arg9@@4 arg10@@1)))
)))
(assert (forall ((arg1@@15 T@U) (arg2@@9 Real) (arg3@@7 T@U) (arg4@@5 Real) (arg5@@5 T@U) (arg6@@5 Real) (arg7@@5 T@U) (arg8@@5 T@U) (arg9@@5 Real) (arg10@@2 Bool) ) (!  (=> (and (and (and (and (= (type arg1@@15) RefType) (= (type arg3@@7) RefType)) (= (type arg5@@5) RefType)) (= (type arg7@@5) RefType)) (= (type arg8@@5) RefType)) (not (IsPredicateField (wand arg1@@15 arg2@@9 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@5 arg9@@5 arg10@@2))))
 :qid |stdinbpl.191:15|
 :skolemid |24|
 :pattern ( (wand arg1@@15 arg2@@9 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@5 arg9@@5 arg10@@2))
)))
(assert (forall ((arg1@@16 T@U) (arg2@@10 Real) (arg3@@8 T@U) (arg4@@6 Real) (arg5@@6 T@U) (arg6@@6 Real) (arg7@@6 T@U) (arg8@@6 T@U) (arg9@@6 Real) (arg10@@3 Bool) ) (!  (=> (and (and (and (and (= (type arg1@@16) RefType) (= (type arg3@@8) RefType)) (= (type arg5@@6) RefType)) (= (type arg7@@6) RefType)) (= (type arg8@@6) RefType)) (not (IsPredicateField (|wand#ft| arg1@@16 arg2@@10 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@6 arg9@@6 arg10@@3))))
 :qid |stdinbpl.195:15|
 :skolemid |25|
 :pattern ( (|wand#ft| arg1@@16 arg2@@10 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@6 arg9@@6 arg10@@3))
)))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@27 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@27))))
(= (type (PredicateMaskField arg0@@27)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@27))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@0 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_CellType) 13) (forall ((arg0@@28 T@U) ) (! (= (type (Cell arg0@@28)) (FieldType PredicateType_CellType FrameTypeType))
 :qid |funType:Cell|
 :pattern ( (Cell arg0@@28))
))))
(assert (forall ((x@@8 T@U) ) (!  (=> (= (type x@@8) RefType) (IsPredicateField (Cell x@@8)))
 :qid |stdinbpl.234:15|
 :skolemid |30|
 :pattern ( (Cell x@@8))
)))
(assert (forall ((Heap@@2 T@U) (x@@9 T@U) ) (!  (=> (and (= (type Heap@@2) (MapType0Type RefType)) (= (type x@@9) RefType)) (|Cell#everUsed| (Cell x@@9)))
 :qid |stdinbpl.253:15|
 :skolemid |34|
 :pattern ( (|Cell#trigger| Heap@@2 (Cell x@@9)))
)))
(assert (forall ((Heap@@3 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@3 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((x@@10 T@U) (x2 T@U) ) (!  (=> (and (and (= (type x@@10) RefType) (= (type x2) RefType)) (= (Cell x@@10) (Cell x2))) (= x@@10 x2))
 :qid |stdinbpl.244:15|
 :skolemid |32|
 :pattern ( (Cell x@@10) (Cell x2))
)))
(assert (forall ((arg0@@29 T@U) ) (! (= (type (|Cell#sm| arg0@@29)) (FieldType PredicateType_CellType (MapType1Type RefType boolType)))
 :qid |funType:Cell#sm|
 :pattern ( (|Cell#sm| arg0@@29))
)))
(assert (forall ((x@@11 T@U) (x2@@0 T@U) ) (!  (=> (and (and (= (type x@@11) RefType) (= (type x2@@0) RefType)) (= (|Cell#sm| x@@11) (|Cell#sm| x2@@0))) (= x@@11 x2@@0))
 :qid |stdinbpl.248:15|
 :skolemid |33|
 :pattern ( (|Cell#sm| x@@11) (|Cell#sm| x2@@0))
)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@4 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.170:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField b_2)))
(assert  (not (IsWandField b_2)))
(assert  (not (IsPredicateField f_7)))
(assert  (not (IsWandField f_7)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@5 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@30 Real) (arg1@@17 T@U) ) (! (= (type (ConditionalFrame arg0@@30 arg1@@17)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@30 arg1@@17))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.158:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((arg1@@18 T@U) (arg2@@11 Real) (arg3@@9 T@U) (arg4@@7 Real) (arg5@@7 T@U) (arg6@@7 Real) (arg7@@7 T@U) (arg8@@7 T@U) (arg9@@7 Real) (arg10@@4 Bool) (arg1_2 T@U) (arg2_2 Real) (arg3_2 T@U) (arg4_2 Real) (arg5_2 T@U) (arg6_2 Real) (arg7_2 T@U) (arg8_2 T@U) (arg9_2 Real) (arg10_2 Bool) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type arg1@@18) RefType) (= (type arg3@@9) RefType)) (= (type arg5@@7) RefType)) (= (type arg7@@7) RefType)) (= (type arg8@@7) RefType)) (= (type arg1_2) RefType)) (= (type arg3_2) RefType)) (= (type arg5_2) RefType)) (= (type arg7_2) RefType)) (= (type arg8_2) RefType)) (= (wand arg1@@18 arg2@@11 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@7 arg9@@7 arg10@@4) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2 arg9_2 arg10_2))) (and (= arg1@@18 arg1_2) (and (= arg2@@11 arg2_2) (and (= arg3@@9 arg3_2) (and (= arg4@@7 arg4_2) (and (= arg5@@7 arg5_2) (and (= arg6@@7 arg6_2) (and (= arg7@@7 arg7_2) (and (= arg8@@7 arg8_2) (and (= arg9@@7 arg9_2) (= arg10@@4 arg10_2)))))))))))
 :qid |stdinbpl.207:15|
 :skolemid |28|
 :pattern ( (wand arg1@@18 arg2@@11 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@7 arg9@@7 arg10@@4) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2 arg9_2 arg10_2))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@6 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@6 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@7 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@7 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@7 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((x@@12 T@U) ) (!  (=> (= (type x@@12) RefType) (= (getPredWandId (Cell x@@12)) 0))
 :qid |stdinbpl.238:15|
 :skolemid |31|
 :pattern ( (Cell x@@12))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@8 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@8) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@8 o $allocated))) (U_2_bool (MapType0Select Heap@@8 (MapType0Select Heap@@8 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@8 o f))
)))
(assert (forall ((x@@13 T@U) ) (!  (=> (= (type x@@13) RefType) (= (PredicateMaskField (Cell x@@13)) (|Cell#sm| x@@13)))
 :qid |stdinbpl.230:15|
 :skolemid |29|
 :pattern ( (PredicateMaskField (Cell x@@13)))
)))
(assert (forall ((Heap@@9 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@9 (MapType0Store Heap@@9 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@9 o@@0 f_3 v))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.165:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((arg1@@19 T@U) (arg2@@12 Real) (arg3@@10 T@U) (arg4@@8 Real) (arg5@@8 T@U) (arg6@@8 Real) (arg7@@8 T@U) (arg8@@8 T@U) (arg9@@8 Real) (arg10@@5 Bool) ) (!  (=> (and (and (and (and (= (type arg1@@19) RefType) (= (type arg3@@10) RefType)) (= (type arg5@@8) RefType)) (= (type arg7@@8) RefType)) (= (type arg8@@8) RefType)) (= (getPredWandId (wand arg1@@19 arg2@@12 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@8 arg9@@8 arg10@@5)) 1))
 :qid |stdinbpl.203:15|
 :skolemid |27|
 :pattern ( (wand arg1@@19 arg2@@12 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@8 arg9@@8 arg10@@5))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun WandDefRHSHeap@0 () T@U)
(declare-fun x@@14 () T@U)
(declare-fun WandDefRHSMask@1 () T@U)
(declare-fun WandDefLHSMask@0 () T@U)
(declare-fun WandDefLHSHeap@0 () T@U)
(declare-fun WandDefRHSMask@0 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun b_1_1@47 () Bool)
(declare-fun b_10@18 () Bool)
(declare-fun neededTransfer@25 () Real)
(declare-fun Used_4Mask@11 () T@U)
(declare-fun rcvLocal@2 () T@U)
(declare-fun initNeededTransfer@6 () Real)
(declare-fun b_13@0 () Bool)
(declare-fun b_13@1 () Bool)
(declare-fun Result_7Heap () T@U)
(declare-fun Result_7Mask () T@U)
(declare-fun b_13@2 () Bool)
(declare-fun Ops_1Mask () T@U)
(declare-fun b_13@3 () Bool)
(declare-fun Ops_1Heap@0 () T@U)
(declare-fun Used_4Heap@0 () T@U)
(declare-fun b_13@4 () Bool)
(declare-fun b_1_1@48 () Bool)
(declare-fun Mask@16 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun takeTransfer@12 () Real)
(declare-fun neededTransfer@23 () Real)
(declare-fun Heap@14 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun b_10@15 () Bool)
(declare-fun Used_4Mask@9 () T@U)
(declare-fun neededTransfer@24 () Real)
(declare-fun Used_4Mask@10 () T@U)
(declare-fun b_10@16 () Bool)
(declare-fun b_10@17 () Bool)
(declare-fun Mask@15 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun maskTransfer@12 () Real)
(declare-fun takeTransfer@11 () Real)
(declare-fun Used_4Mask@7 () T@U)
(declare-fun b_10@12 () Bool)
(declare-fun neededTransfer@22 () Real)
(declare-fun Used_4Mask@8 () T@U)
(declare-fun b_10@13 () Bool)
(declare-fun b_10@14 () Bool)
(declare-fun Ops_1Mask@27 () T@U)
(declare-fun Ops_1Mask@26 () T@U)
(declare-fun maskTransfer@11 () Real)
(declare-fun Result_6Heap () T@U)
(declare-fun Result_6Mask () T@U)
(declare-fun b_1_1@46 () Bool)
(declare-fun neededTransfer@21 () Real)
(declare-fun initNeededTransfer@5 () Real)
(declare-fun b_12@0 () Bool)
(declare-fun b_12@1 () Bool)
(declare-fun b_12@2 () Bool)
(declare-fun b_12@3 () Bool)
(declare-fun b_12@4 () Bool)
(declare-fun takeTransfer@10 () Real)
(declare-fun neededTransfer@19 () Real)
(declare-fun b_10@9 () Bool)
(declare-fun Mask@12 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Used_4Mask@5 () T@U)
(declare-fun neededTransfer@20 () Real)
(declare-fun Used_4Mask@6 () T@U)
(declare-fun b_10@10 () Bool)
(declare-fun b_10@11 () Bool)
(declare-fun Mask@13 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun maskTransfer@10 () Real)
(declare-fun takeTransfer@9 () Real)
(declare-fun Used_4Mask@3 () T@U)
(declare-fun b_10@6 () Bool)
(declare-fun Ops_1Mask@24 () T@U)
(declare-fun neededTransfer@18 () Real)
(declare-fun Used_4Mask@4 () T@U)
(declare-fun b_10@7 () Bool)
(declare-fun b_10@8 () Bool)
(declare-fun Ops_1Mask@25 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun b_1_1@45 () Bool)
(declare-fun neededTransfer@17 () Real)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_11@0 () Bool)
(declare-fun b_11@1 () Bool)
(declare-fun Result_5Heap () T@U)
(declare-fun Result_5Mask () T@U)
(declare-fun b_11@2 () Bool)
(declare-fun b_11@3 () Bool)
(declare-fun b_11@4 () Bool)
(declare-fun takeTransfer@8 () Real)
(declare-fun Heap@10 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun neededTransfer@15 () Real)
(declare-fun b_10@3 () Bool)
(declare-fun Used_4Mask@1 () T@U)
(declare-fun neededTransfer@16 () Real)
(declare-fun Used_4Mask@2 () T@U)
(declare-fun b_10@4 () Bool)
(declare-fun b_10@5 () Bool)
(declare-fun Mask@11 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun takeTransfer@7 () Real)
(declare-fun Ops_1Mask@22 () T@U)
(declare-fun b_10@0 () Bool)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_4Mask@0 () T@U)
(declare-fun b_10@1 () Bool)
(declare-fun b_10@2 () Bool)
(declare-fun Ops_1Mask@23 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun b_10 () Bool)
(declare-fun b_9@0 () Bool)
(declare-fun b_1_1@42 () Bool)
(declare-fun b_6@7 () Bool)
(declare-fun b_9@1 () Bool)
(declare-fun Result_4Heap () T@U)
(declare-fun Result_4Mask () T@U)
(declare-fun b_9@2 () Bool)
(declare-fun Ops_1Mask@21 () T@U)
(declare-fun Used_3Mask@6 () T@U)
(declare-fun b_9@3 () Bool)
(declare-fun Used_3Heap@3 () T@U)
(declare-fun b_9@4 () Bool)
(declare-fun b_1_1@43 () Bool)
(declare-fun b_1_1@44 () Bool)
(declare-fun Heap@9 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun b_1_1@40 () Bool)
(declare-fun neededTransfer@13 () Real)
(declare-fun Ops_1Mask@20 () T@U)
(declare-fun rcvLocal@1 () T@U)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_8@0 () Bool)
(declare-fun b_6@6 () Bool)
(declare-fun b_8@1 () Bool)
(declare-fun Result_3Heap () T@U)
(declare-fun Result_3Mask () T@U)
(declare-fun b_8@2 () Bool)
(declare-fun Used_3Mask@5 () T@U)
(declare-fun b_8@3 () Bool)
(declare-fun Used_3Heap@2 () T@U)
(declare-fun b_8@4 () Bool)
(declare-fun b_1_1@41 () Bool)
(declare-fun Heap@8 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun takeTransfer@6 () Real)
(declare-fun b_1_1@37 () Bool)
(declare-fun Used_3Mask@3 () T@U)
(declare-fun Used_3Heap@0 () T@U)
(declare-fun Ops_1Mask@18 () T@U)
(declare-fun neededTransfer@12 () Real)
(declare-fun Ops_1Mask@19 () T@U)
(declare-fun b_1_1@38 () Bool)
(declare-fun b_1_1@39 () Bool)
(declare-fun Used_3Mask@4 () T@U)
(declare-fun Used_3Heap@1 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun Result_2Heap () T@U)
(declare-fun Result_2Mask () T@U)
(declare-fun b_1_1@34 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun rcvLocal@0 () T@U)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_7@0 () Bool)
(declare-fun b_7@1 () Bool)
(declare-fun b_7@2 () Bool)
(declare-fun b_7@3 () Bool)
(declare-fun b_7@4 () Bool)
(declare-fun b_1_1@35 () Bool)
(declare-fun b_1_1@36 () Bool)
(declare-fun takeTransfer@5 () Real)
(declare-fun neededTransfer@9 () Real)
(declare-fun Mask@6 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun b_6@3 () Bool)
(declare-fun Used_3Mask@1 () T@U)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_3Mask@2 () T@U)
(declare-fun b_6@4 () Bool)
(declare-fun b_6@5 () Bool)
(declare-fun Mask@7 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun Ops_1Mask@16 () T@U)
(declare-fun b_6@0 () Bool)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_3Mask@0 () T@U)
(declare-fun b_6@1 () Bool)
(declare-fun b_6@2 () Bool)
(declare-fun Ops_1Mask@17 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun b_6 () Bool)
(declare-fun b_1_1@33 () Bool)
(declare-fun b_1_1@32 () Bool)
(declare-fun Ops_1Mask@15 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun b_1_1@30 () Bool)
(declare-fun b_1_1@29 () Bool)
(declare-fun Ops_1Mask@14 () T@U)
(declare-fun b_1_1@31 () Bool)
(declare-fun Mask@4 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun b_1_1@26 () Bool)
(declare-fun Ops_1Mask@12 () T@U)
(declare-fun Ops_1Mask@13 () T@U)
(declare-fun b_1_1@27 () Bool)
(declare-fun b_1_1@28 () Bool)
(declare-fun b_1_1@17 () Bool)
(declare-fun b_4@6 () Bool)
(declare-fun neededTransfer@7 () Real)
(declare-fun Used_2Mask@3 () T@U)
(declare-fun arg_1@0 () T@U)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_5@0 () Bool)
(declare-fun b_5@1 () Bool)
(declare-fun Result_1Heap () T@U)
(declare-fun Result_1Mask () T@U)
(declare-fun b_5@2 () Bool)
(declare-fun Ops_1Mask@10 () T@U)
(declare-fun b_5@3 () Bool)
(declare-fun Used_2Heap@0 () T@U)
(declare-fun b_5@4 () Bool)
(declare-fun b_1_1@20 () Bool)
(declare-fun b_1_1@21 () Bool)
(declare-fun b_1_1@22 () Bool)
(declare-fun b_1_1@23 () Bool)
(declare-fun Ops_1Mask@11 () T@U)
(declare-fun b_1_1@24 () Bool)
(declare-fun b_1_1@25 () Bool)
(declare-fun takeTransfer@3 () Real)
(declare-fun Heap@2 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun neededTransfer@5 () Real)
(declare-fun b_4@3 () Bool)
(declare-fun Used_2Mask@1 () T@U)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_2Mask@2 () T@U)
(declare-fun b_4@4 () Bool)
(declare-fun TempMask@3 () T@U)
(declare-fun b_4@5 () Bool)
(declare-fun Mask@3 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun Ops_1Mask@8 () T@U)
(declare-fun b_4@0 () Bool)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_2Mask@0 () T@U)
(declare-fun b_4@1 () Bool)
(declare-fun TempMask@2 () T@U)
(declare-fun b_4@2 () Bool)
(declare-fun Ops_1Mask@9 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun b_4 () Bool)
(declare-fun b_1_1@19 () Bool)
(declare-fun b_1_1@18 () Bool)
(declare-fun b_1_1@15 () Bool)
(declare-fun b_1_1@14 () Bool)
(declare-fun Ops_1Mask@7 () T@U)
(declare-fun b_1_1@16 () Bool)
(declare-fun Mask@1 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun b_1_1@11 () Bool)
(declare-fun Ops_1Mask@5 () T@U)
(declare-fun Ops_1Mask@6 () T@U)
(declare-fun b_1_1@12 () Bool)
(declare-fun b_1_1@13 () Bool)
(declare-fun b_1_1@4 () Bool)
(declare-fun b_2_1@6 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun Used_1Mask@3 () T@U)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_3_1@0 () Bool)
(declare-fun b_3_1@1 () Bool)
(declare-fun ResultHeap () T@U)
(declare-fun ResultMask@@0 () T@U)
(declare-fun b_3_1@2 () Bool)
(declare-fun Ops_1Mask@3 () T@U)
(declare-fun b_3_1@3 () Bool)
(declare-fun Used_1Heap@0 () T@U)
(declare-fun b_3_1@4 () Bool)
(declare-fun b_1_1@5 () Bool)
(declare-fun b_1_1@6 () Bool)
(declare-fun b_1_1@7 () Bool)
(declare-fun b_1_1@8 () Bool)
(declare-fun Ops_1Mask@4 () T@U)
(declare-fun b_1_1@9 () Bool)
(declare-fun b_1_1@10 () Bool)
(declare-fun takeTransfer@1 () Real)
(declare-fun neededTransfer@1 () Real)
(declare-fun b_2_1@3 () Bool)
(declare-fun Used_1Mask@1 () T@U)
(declare-fun Heap@@10 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_1Mask@2 () T@U)
(declare-fun b_2_1@4 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_2_1@5 () Bool)
(declare-fun Mask@0 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun Ops_1Mask@1 () T@U)
(declare-fun b_2_1@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_1Mask@0 () T@U)
(declare-fun b_2_1@1 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_2_1@2 () Bool)
(declare-fun Ops_1Mask@2 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_2_1 () Bool)
(declare-fun b_1_1@3 () Bool)
(declare-fun b_1_1@2 () Bool)
(declare-fun b_1_1@0 () Bool)
(declare-fun Ops_1Mask@0 () T@U)
(declare-fun b_1_1@1 () Bool)
(declare-fun b_1_1 () Bool)
(declare-fun b_3@0 () Bool)
(declare-fun b_3 () Bool)
(declare-fun UsedHeap@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@18) (MapType1Type RefType realType)) (= (type x@@14) RefType)) (= (type WandDefRHSHeap@0) (MapType0Type RefType))) (= (type WandDefRHSMask@1) (MapType1Type RefType realType))) (= (type WandDefLHSMask@0) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@0) (MapType0Type RefType))) (= (type WandDefRHSMask@0) (MapType1Type RefType realType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type Heap@17) (MapType0Type RefType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Heap@14) (MapType0Type RefType))) (= (type Result_6Heap) (MapType0Type RefType))) (= (type Used_4Mask@11) (MapType1Type RefType realType))) (= (type rcvLocal@2) RefType)) (= (type Result_7Heap) (MapType0Type RefType))) (= (type Result_7Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask) (MapType1Type RefType realType))) (= (type Ops_1Heap@0) (MapType0Type RefType))) (= (type Used_4Heap@0) (MapType0Type RefType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Heap@16) (MapType0Type RefType))) (= (type Used_4Mask@9) (MapType1Type RefType realType))) (= (type Used_4Mask@10) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Heap@15) (MapType0Type RefType))) (= (type Used_4Mask@7) (MapType1Type RefType realType))) (= (type Used_4Mask@8) (MapType1Type RefType realType))) (= (type Ops_1Mask@27) (MapType1Type RefType realType))) (= (type Ops_1Mask@26) (MapType1Type RefType realType))) (= (type Result_6Mask) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Used_4Mask@5) (MapType1Type RefType realType))) (= (type Used_4Mask@6) (MapType1Type RefType realType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Heap@13) (MapType0Type RefType))) (= (type Used_4Mask@3) (MapType1Type RefType realType))) (= (type Ops_1Mask@24) (MapType1Type RefType realType))) (= (type Used_4Mask@4) (MapType1Type RefType realType))) (= (type Ops_1Mask@25) (MapType1Type RefType realType))) (= (type Result_5Heap) (MapType0Type RefType))) (= (type Result_5Mask) (MapType1Type RefType realType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Used_4Mask@1) (MapType1Type RefType realType))) (= (type Used_4Mask@2) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Heap@11) (MapType0Type RefType))) (= (type Ops_1Mask@22) (MapType1Type RefType realType))) (= (type Used_4Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@23) (MapType1Type RefType realType))) (= (type Ops_1Mask@16) (MapType1Type RefType realType))) (= (type Heap@6) (MapType0Type RefType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Result_4Heap) (MapType0Type RefType))) (= (type Result_4Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@21) (MapType1Type RefType realType))) (= (type Used_3Mask@6) (MapType1Type RefType realType))) (= (type Used_3Heap@3) (MapType0Type RefType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Used_3Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@20) (MapType1Type RefType realType))) (= (type rcvLocal@1) RefType)) (= (type Result_3Heap) (MapType0Type RefType))) (= (type Result_3Mask) (MapType1Type RefType realType))) (= (type Used_3Mask@5) (MapType1Type RefType realType))) (= (type Used_3Heap@2) (MapType0Type RefType))) (= (type Heap@8) (MapType0Type RefType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Used_3Mask@3) (MapType1Type RefType realType))) (= (type Ops_1Mask@18) (MapType1Type RefType realType))) (= (type Ops_1Mask@19) (MapType1Type RefType realType))) (= (type Used_3Mask@4) (MapType1Type RefType realType))) (= (type Used_3Heap@1) (MapType0Type RefType))) (= (type Result_2Heap) (MapType0Type RefType))) (= (type Result_2Mask) (MapType1Type RefType realType))) (= (type rcvLocal@0) RefType)) (= (type Used_3Mask@1) (MapType1Type RefType realType))) (= (type Used_3Mask@2) (MapType1Type RefType realType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Used_3Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@17) (MapType1Type RefType realType))) (= (type Ops_1Mask@8) (MapType1Type RefType realType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Ops_1Mask@15) (MapType1Type RefType realType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Ops_1Mask@14) (MapType1Type RefType realType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Ops_1Mask@13) (MapType1Type RefType realType))) (= (type Ops_1Mask@12) (MapType1Type RefType realType))) (= (type Used_2Mask@3) (MapType1Type RefType realType))) (= (type arg_1@0) RefType)) (= (type Result_1Heap) (MapType0Type RefType))) (= (type Result_1Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@10) (MapType1Type RefType realType))) (= (type Used_2Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@11) (MapType1Type RefType realType))) (= (type Used_2Mask@1) (MapType1Type RefType realType))) (= (type Used_2Mask@2) (MapType1Type RefType realType))) (= (type TempMask@3) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Used_2Mask@0) (MapType1Type RefType realType))) (= (type TempMask@2) (MapType1Type RefType realType))) (= (type Ops_1Mask@9) (MapType1Type RefType realType))) (forall ((arg0@@31 T@U) (arg1@@20 T@U) ) (! (= (type (CombineFrames arg0@@31 arg1@@20)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@31 arg1@@20))
))) (forall ((arg0@@32 T@U) ) (! (= (type (FrameFragment arg0@@32)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@32))
))) (= (type Ops_1Mask@1) (MapType1Type RefType realType))) (= (type Heap@@10) (MapType0Type RefType))) (= (type Ops_1Mask@7) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Ops_1Mask@6) (MapType1Type RefType realType))) (= (type Ops_1Mask@5) (MapType1Type RefType realType))) (= (type Used_1Mask@3) (MapType1Type RefType realType))) (= (type ResultHeap) (MapType0Type RefType))) (= (type ResultMask@@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@3) (MapType1Type RefType realType))) (= (type Used_1Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@4) (MapType1Type RefType realType))) (= (type Used_1Mask@1) (MapType1Type RefType realType))) (= (type Used_1Mask@2) (MapType1Type RefType realType))) (= (type TempMask@1) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@0) (MapType0Type RefType))) (= (type Used_1Mask@0) (MapType1Type RefType realType))) (= (type TempMask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@2) (MapType1Type RefType realType))) (= (type Ops_1Mask@0) (MapType1Type RefType realType))) (= (type UsedHeap@0) (MapType0Type RefType))))
(set-info :boogie-vc-id test0)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 170) (let ((anon184_Else_correct true))
(let ((anon184_Then_correct  (=> (and (U_2_bool (MapType0Select WandDefRHSHeap@0 x@@14 b_2)) (= (ControlFlow 0 4) (- 0 3))) (HasDirectPerm WandDefRHSMask@1 x@@14 f_7))))
(let ((anon183_Then_correct  (=> (and (= WandDefLHSMask@0 (MapType1Store ZeroMask null (Cell x@@14) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Cell x@@14))) FullPerm)))) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (=> (and (and (and (state WandDefLHSHeap@0 WandDefLHSMask@0) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (and (not (= x@@14 null)) (= WandDefRHSMask@0 (MapType1Store ZeroMask x@@14 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@14 f_7)) FullPerm)))))) (and (and (state WandDefRHSHeap@0 WandDefRHSMask@0) (not (= x@@14 null))) (and (= WandDefRHSMask@1 (MapType1Store WandDefRHSMask@0 x@@14 b_2 (real_2_U (+ (U_2_real (MapType1Select WandDefRHSMask@0 x@@14 b_2)) FullPerm)))) (state WandDefRHSHeap@0 WandDefRHSMask@1)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (HasDirectPerm WandDefRHSMask@1 x@@14 b_2)) (=> (HasDirectPerm WandDefRHSMask@1 x@@14 b_2) (and (=> (= (ControlFlow 0 6) 4) anon184_Then_correct) (=> (= (ControlFlow 0 6) 5) anon184_Else_correct))))))))
(let ((anon183_Else_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (<= FullPerm (U_2_real (MapType1Select Mask@18 null (wand x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false)))))))
(let ((anon117_correct  (=> (and (and (= Mask@18 (MapType1Store Mask@17 null (wand x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false) (real_2_U (+ (U_2_real (MapType1Select Mask@17 null (wand x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false))) FullPerm)))) (state Heap@17 Mask@18)) (and (state Heap@17 Mask@18) (state Heap@17 Mask@18))) (and (=> (= (ControlFlow 0 8) 6) anon183_Then_correct) (=> (= (ControlFlow 0 8) 2) anon183_Else_correct)))))
(let ((anon115_correct  (and (=> (= (ControlFlow 0 12) (- 0 13)) (=> (and (and b_1_1@47 b_1_1@47) b_10@18) (and (= neededTransfer@25 0.0) (= (U_2_real (MapType1Select Used_4Mask@11 rcvLocal@2 b_2)) initNeededTransfer@6)))) (=> (=> (and (and b_1_1@47 b_1_1@47) b_10@18) (and (= neededTransfer@25 0.0) (= (U_2_real (MapType1Select Used_4Mask@11 rcvLocal@2 b_2)) initNeededTransfer@6))) (=> (= b_13@0  (and b_1_1@47 b_10@18)) (=> (and (and (and (= b_13@1  (and b_13@0 (state Result_7Heap Result_7Mask))) (= b_13@2  (and b_13@1 (sumMask Result_7Mask Ops_1Mask Used_4Mask@11)))) (and (= b_13@3  (and (and b_13@2 (IdenticalOnKnownLocations Ops_1Heap@0 Result_7Heap Ops_1Mask)) (IdenticalOnKnownLocations Used_4Heap@0 Result_7Heap Used_4Mask@11))) (= b_13@4  (and b_13@3 (state Result_7Heap Result_7Mask))))) (and (and (= b_1_1@48  (and b_1_1@47 b_13@4)) (= Mask@17 Mask@16)) (and (= Heap@17 Heap@16) (= (ControlFlow 0 12) 8)))) anon117_correct))))))
(let ((anon182_Else_correct  (=> (>= 0.0 takeTransfer@12) (=> (and (= neededTransfer@25 neededTransfer@23) (= Heap@16 Heap@14)) (=> (and (and (= Mask@16 Mask@14) (= b_10@18 b_10@15)) (and (= Used_4Mask@11 Used_4Mask@9) (= (ControlFlow 0 16) 12))) anon115_correct)))))
(let ((anon182_Then_correct  (=> (> takeTransfer@12 0.0) (=> (and (and (= neededTransfer@24 (- neededTransfer@23 takeTransfer@12)) (= Used_4Mask@10 (MapType1Store Used_4Mask@9 rcvLocal@2 b_2 (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@9 rcvLocal@2 b_2)) takeTransfer@12))))) (and (= b_10@16  (and b_10@15 (state Used_4Heap@0 Used_4Mask@10))) (= b_10@17  (and b_10@16 (= (U_2_bool (MapType0Select Heap@14 rcvLocal@2 b_2)) (U_2_bool (MapType0Select Used_4Heap@0 rcvLocal@2 b_2))))))) (=> (and (and (and (= Mask@15 (MapType1Store Mask@14 rcvLocal@2 b_2 (real_2_U (- (U_2_real (MapType1Select Mask@14 rcvLocal@2 b_2)) takeTransfer@12)))) (= Heap@15 (MapType0Store Heap@14 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false) (MapType1Store (MapType0Select Heap@14 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false)) (MapType0Select Heap@14 x@@14 f_7) b_2 (bool_2_U true))))) (and (= neededTransfer@25 neededTransfer@24) (= Heap@16 Heap@15))) (and (and (= Mask@16 Mask@15) (= b_10@18 b_10@17)) (and (= Used_4Mask@11 Used_4Mask@10) (= (ControlFlow 0 15) 12)))) anon115_correct)))))
(let ((anon181_Else_correct  (=> (and (< maskTransfer@12 neededTransfer@23) (= takeTransfer@12 maskTransfer@12)) (and (=> (= (ControlFlow 0 18) 15) anon182_Then_correct) (=> (= (ControlFlow 0 18) 16) anon182_Else_correct)))))
(let ((anon181_Then_correct  (=> (and (<= neededTransfer@23 maskTransfer@12) (= takeTransfer@12 neededTransfer@23)) (and (=> (= (ControlFlow 0 17) 15) anon182_Then_correct) (=> (= (ControlFlow 0 17) 16) anon182_Else_correct)))))
(let ((anon180_Then_correct  (=> (and (and (and (and (and b_1_1@47 b_1_1@47) b_10@15) true) (> neededTransfer@23 0.0)) (= maskTransfer@12 (U_2_real (MapType1Select Mask@14 rcvLocal@2 b_2)))) (and (=> (= (ControlFlow 0 19) 17) anon181_Then_correct) (=> (= (ControlFlow 0 19) 18) anon181_Else_correct)))))
(let ((anon180_Else_correct  (=> (not (and (and (and (and b_1_1@47 b_1_1@47) b_10@15) true) (> neededTransfer@23 0.0))) (=> (and (= neededTransfer@25 neededTransfer@23) (= Heap@16 Heap@14)) (=> (and (and (= Mask@16 Mask@14) (= b_10@18 b_10@15)) (and (= Used_4Mask@11 Used_4Mask@9) (= (ControlFlow 0 14) 12))) anon115_correct)))))
(let ((anon179_Else_correct  (=> (and (and (>= 0.0 takeTransfer@11) (= Used_4Mask@9 Used_4Mask@7)) (and (= b_10@15 b_10@12) (= neededTransfer@23 FullPerm))) (and (=> (= (ControlFlow 0 22) 19) anon180_Then_correct) (=> (= (ControlFlow 0 22) 14) anon180_Else_correct)))))
(let ((anon179_Then_correct  (=> (> takeTransfer@11 0.0) (=> (and (and (and (= neededTransfer@22 (- FullPerm takeTransfer@11)) (= Used_4Mask@8 (MapType1Store Used_4Mask@7 rcvLocal@2 b_2 (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@7 rcvLocal@2 b_2)) takeTransfer@11))))) (and (= b_10@13  (and b_10@12 (state Used_4Heap@0 Used_4Mask@8))) (= b_10@14  (and b_10@13 (= (U_2_bool (MapType0Select Ops_1Heap@0 rcvLocal@2 b_2)) (U_2_bool (MapType0Select Used_4Heap@0 rcvLocal@2 b_2))))))) (and (and (= Ops_1Mask@27 (MapType1Store Ops_1Mask@26 rcvLocal@2 b_2 (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@26 rcvLocal@2 b_2)) takeTransfer@11)))) (= Used_4Mask@9 Used_4Mask@8)) (and (= b_10@15 b_10@14) (= neededTransfer@23 neededTransfer@22)))) (and (=> (= (ControlFlow 0 21) 19) anon180_Then_correct) (=> (= (ControlFlow 0 21) 14) anon180_Else_correct))))))
(let ((anon178_Else_correct  (=> (and (< maskTransfer@11 FullPerm) (= takeTransfer@11 maskTransfer@11)) (and (=> (= (ControlFlow 0 24) 21) anon179_Then_correct) (=> (= (ControlFlow 0 24) 22) anon179_Else_correct)))))
(let ((anon178_Then_correct  (=> (and (<= FullPerm maskTransfer@11) (= takeTransfer@11 FullPerm)) (and (=> (= (ControlFlow 0 23) 21) anon179_Then_correct) (=> (= (ControlFlow 0 23) 22) anon179_Else_correct)))))
(let ((anon177_Then_correct  (=> (and (and (and (and (and b_1_1@47 b_1_1@47) b_10@12) true) (> FullPerm 0.0)) (= maskTransfer@11 (U_2_real (MapType1Select Ops_1Mask@26 rcvLocal@2 b_2)))) (and (=> (= (ControlFlow 0 25) 23) anon178_Then_correct) (=> (= (ControlFlow 0 25) 24) anon178_Else_correct)))))
(let ((anon177_Else_correct  (=> (and (and (not (and (and (and (and b_1_1@47 b_1_1@47) b_10@12) true) (> FullPerm 0.0))) (= Used_4Mask@9 Used_4Mask@7)) (and (= b_10@15 b_10@12) (= neededTransfer@23 FullPerm))) (and (=> (= (ControlFlow 0 20) 19) anon180_Then_correct) (=> (= (ControlFlow 0 20) 14) anon180_Else_correct)))))
(let ((anon103_correct  (=> (and (= rcvLocal@2 (MapType0Select Result_6Heap x@@14 f_7)) (= initNeededTransfer@6 (+ (U_2_real (MapType1Select Used_4Mask@7 rcvLocal@2 b_2)) FullPerm))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 26) 25) anon177_Then_correct) (=> (= (ControlFlow 0 26) 20) anon177_Else_correct)))))))
(let ((anon176_Else_correct  (=> (and (not b_1_1@47) (= (ControlFlow 0 31) 26)) anon103_correct)))
(let ((anon176_Then_correct  (=> b_1_1@47 (and (=> (= (ControlFlow 0 29) (- 0 30)) (HasDirectPerm Result_6Mask x@@14 f_7)) (=> (HasDirectPerm Result_6Mask x@@14 f_7) (=> (= (ControlFlow 0 29) 26) anon103_correct))))))
(let ((anon175_Then_correct  (=> (and (and b_1_1@47 b_1_1@47) b_10@12) (and (=> (= (ControlFlow 0 32) 29) anon176_Then_correct) (=> (= (ControlFlow 0 32) 31) anon176_Else_correct)))))
(let ((anon175_Else_correct  (=> (and (not (and (and b_1_1@47 b_1_1@47) b_10@12)) (= (ControlFlow 0 28) 26)) anon103_correct)))
(let ((anon174_Then_correct  (=> (U_2_bool (MapType0Select Result_6Heap x@@14 b_2)) (and (=> (= (ControlFlow 0 33) 32) anon175_Then_correct) (=> (= (ControlFlow 0 33) 28) anon175_Else_correct)))))
(let ((anon174_Else_correct  (=> (not (U_2_bool (MapType0Select Result_6Heap x@@14 b_2))) (and (=> (= (ControlFlow 0 10) (- 0 11)) (=> (and (and b_1_1@47 b_1_1@47) b_10@12) false)) (=> (=> (and (and b_1_1@47 b_1_1@47) b_10@12) false) (=> (= Mask@17 Mask@14) (=> (and (= Heap@17 Heap@14) (= (ControlFlow 0 10) 8)) anon117_correct)))))))
(let ((anon173_Then_correct  (=> (and b_1_1@47 b_1_1@47) (and (=> (= (ControlFlow 0 34) 33) anon174_Then_correct) (=> (= (ControlFlow 0 34) 10) anon174_Else_correct)))))
(let ((anon173_Else_correct  (=> (and (and (not (and b_1_1@47 b_1_1@47)) (= Mask@17 Mask@14)) (and (= Heap@17 Heap@14) (= (ControlFlow 0 9) 8))) anon117_correct)))
(let ((anon98_correct  (and (=> (= (ControlFlow 0 35) (- 0 36)) (=> (and (and b_1_1@46 b_1_1@46) b_10@12) (and (= neededTransfer@21 0.0) (= (U_2_real (MapType1Select Used_4Mask@7 x@@14 b_2)) initNeededTransfer@5)))) (=> (=> (and (and b_1_1@46 b_1_1@46) b_10@12) (and (= neededTransfer@21 0.0) (= (U_2_real (MapType1Select Used_4Mask@7 x@@14 b_2)) initNeededTransfer@5))) (=> (and (= b_12@0  (and b_1_1@46 b_10@12)) (= b_12@1  (and b_12@0 (state Result_6Heap Result_6Mask)))) (=> (and (and (= b_12@2  (and b_12@1 (sumMask Result_6Mask Ops_1Mask@26 Used_4Mask@7))) (= b_12@3  (and (and b_12@2 (IdenticalOnKnownLocations Ops_1Heap@0 Result_6Heap Ops_1Mask@26)) (IdenticalOnKnownLocations Used_4Heap@0 Result_6Heap Used_4Mask@7)))) (and (= b_12@4  (and b_12@3 (state Result_6Heap Result_6Mask))) (= b_1_1@47  (and b_1_1@46 b_12@4)))) (and (=> (= (ControlFlow 0 35) 34) anon173_Then_correct) (=> (= (ControlFlow 0 35) 9) anon173_Else_correct))))))))
(let ((anon172_Else_correct  (=> (>= 0.0 takeTransfer@10) (=> (and (= neededTransfer@21 neededTransfer@19) (= b_10@12 b_10@9)) (=> (and (and (= Mask@14 Mask@12) (= Heap@14 Heap@12)) (and (= Used_4Mask@7 Used_4Mask@5) (= (ControlFlow 0 39) 35))) anon98_correct)))))
(let ((anon172_Then_correct  (=> (> takeTransfer@10 0.0) (=> (and (and (= neededTransfer@20 (- neededTransfer@19 takeTransfer@10)) (= Used_4Mask@6 (MapType1Store Used_4Mask@5 x@@14 b_2 (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@5 x@@14 b_2)) takeTransfer@10))))) (and (= b_10@10  (and b_10@9 (state Used_4Heap@0 Used_4Mask@6))) (= b_10@11  (and b_10@10 (= (U_2_bool (MapType0Select Heap@12 x@@14 b_2)) (U_2_bool (MapType0Select Used_4Heap@0 x@@14 b_2))))))) (=> (and (and (and (= Mask@13 (MapType1Store Mask@12 x@@14 b_2 (real_2_U (- (U_2_real (MapType1Select Mask@12 x@@14 b_2)) takeTransfer@10)))) (= Heap@13 (MapType0Store Heap@12 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false) (MapType1Store (MapType0Select Heap@12 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false)) x@@14 b_2 (bool_2_U true))))) (and (= neededTransfer@21 neededTransfer@20) (= b_10@12 b_10@11))) (and (and (= Mask@14 Mask@13) (= Heap@14 Heap@13)) (and (= Used_4Mask@7 Used_4Mask@6) (= (ControlFlow 0 38) 35)))) anon98_correct)))))
(let ((anon171_Else_correct  (=> (and (< maskTransfer@10 neededTransfer@19) (= takeTransfer@10 maskTransfer@10)) (and (=> (= (ControlFlow 0 41) 38) anon172_Then_correct) (=> (= (ControlFlow 0 41) 39) anon172_Else_correct)))))
(let ((anon171_Then_correct  (=> (and (<= neededTransfer@19 maskTransfer@10) (= takeTransfer@10 neededTransfer@19)) (and (=> (= (ControlFlow 0 40) 38) anon172_Then_correct) (=> (= (ControlFlow 0 40) 39) anon172_Else_correct)))))
(let ((anon170_Then_correct  (=> (and (and (and (and (and b_1_1@46 b_1_1@46) b_10@9) true) (> neededTransfer@19 0.0)) (= maskTransfer@10 (U_2_real (MapType1Select Mask@12 x@@14 b_2)))) (and (=> (= (ControlFlow 0 42) 40) anon171_Then_correct) (=> (= (ControlFlow 0 42) 41) anon171_Else_correct)))))
(let ((anon170_Else_correct  (=> (not (and (and (and (and b_1_1@46 b_1_1@46) b_10@9) true) (> neededTransfer@19 0.0))) (=> (and (= neededTransfer@21 neededTransfer@19) (= b_10@12 b_10@9)) (=> (and (and (= Mask@14 Mask@12) (= Heap@14 Heap@12)) (and (= Used_4Mask@7 Used_4Mask@5) (= (ControlFlow 0 37) 35))) anon98_correct)))))
(let ((anon169_Else_correct  (=> (>= 0.0 takeTransfer@9) (=> (and (and (= Used_4Mask@5 Used_4Mask@3) (= b_10@9 b_10@6)) (and (= neededTransfer@19 FullPerm) (= Ops_1Mask@26 Ops_1Mask@24))) (and (=> (= (ControlFlow 0 45) 42) anon170_Then_correct) (=> (= (ControlFlow 0 45) 37) anon170_Else_correct))))))
(let ((anon169_Then_correct  (=> (and (> takeTransfer@9 0.0) (= neededTransfer@18 (- FullPerm takeTransfer@9))) (=> (and (and (and (= Used_4Mask@4 (MapType1Store Used_4Mask@3 x@@14 b_2 (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@3 x@@14 b_2)) takeTransfer@9)))) (= b_10@7  (and b_10@6 (state Used_4Heap@0 Used_4Mask@4)))) (and (= b_10@8  (and b_10@7 (= (U_2_bool (MapType0Select Ops_1Heap@0 x@@14 b_2)) (U_2_bool (MapType0Select Used_4Heap@0 x@@14 b_2))))) (= Ops_1Mask@25 (MapType1Store Ops_1Mask@24 x@@14 b_2 (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@24 x@@14 b_2)) takeTransfer@9)))))) (and (and (= Used_4Mask@5 Used_4Mask@4) (= b_10@9 b_10@8)) (and (= neededTransfer@19 neededTransfer@18) (= Ops_1Mask@26 Ops_1Mask@25)))) (and (=> (= (ControlFlow 0 44) 42) anon170_Then_correct) (=> (= (ControlFlow 0 44) 37) anon170_Else_correct))))))
(let ((anon168_Else_correct  (=> (and (< maskTransfer@9 FullPerm) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 47) 44) anon169_Then_correct) (=> (= (ControlFlow 0 47) 45) anon169_Else_correct)))))
(let ((anon168_Then_correct  (=> (and (<= FullPerm maskTransfer@9) (= takeTransfer@9 FullPerm)) (and (=> (= (ControlFlow 0 46) 44) anon169_Then_correct) (=> (= (ControlFlow 0 46) 45) anon169_Else_correct)))))
(let ((anon167_Then_correct  (=> (and (and (and (and (and b_1_1@46 b_1_1@46) b_10@6) true) (> FullPerm 0.0)) (= maskTransfer@9 (U_2_real (MapType1Select Ops_1Mask@24 x@@14 b_2)))) (and (=> (= (ControlFlow 0 48) 46) anon168_Then_correct) (=> (= (ControlFlow 0 48) 47) anon168_Else_correct)))))
(let ((anon167_Else_correct  (=> (not (and (and (and (and b_1_1@46 b_1_1@46) b_10@6) true) (> FullPerm 0.0))) (=> (and (and (= Used_4Mask@5 Used_4Mask@3) (= b_10@9 b_10@6)) (and (= neededTransfer@19 FullPerm) (= Ops_1Mask@26 Ops_1Mask@24))) (and (=> (= (ControlFlow 0 43) 42) anon170_Then_correct) (=> (= (ControlFlow 0 43) 37) anon170_Else_correct))))))
(let ((anon86_correct  (and (=> (= (ControlFlow 0 49) (- 0 51)) (=> (and (and b_1_1@45 b_1_1@45) b_10@6) (and (= neededTransfer@17 0.0) (= (U_2_real (MapType1Select Used_4Mask@3 x@@14 f_7)) initNeededTransfer@4)))) (=> (=> (and (and b_1_1@45 b_1_1@45) b_10@6) (and (= neededTransfer@17 0.0) (= (U_2_real (MapType1Select Used_4Mask@3 x@@14 f_7)) initNeededTransfer@4))) (=> (= b_11@0  (and b_1_1@45 b_10@6)) (=> (and (= b_11@1  (and b_11@0 (state Result_5Heap Result_5Mask))) (= b_11@2  (and b_11@1 (sumMask Result_5Mask Ops_1Mask@24 Used_4Mask@3)))) (=> (and (and (= b_11@3  (and (and b_11@2 (IdenticalOnKnownLocations Ops_1Heap@0 Result_5Heap Ops_1Mask@24)) (IdenticalOnKnownLocations Used_4Heap@0 Result_5Heap Used_4Mask@3))) (= b_11@4  (and b_11@3 (state Result_5Heap Result_5Mask)))) (and (= b_1_1@46  (and b_1_1@45 b_11@4)) (= initNeededTransfer@5 (+ (U_2_real (MapType1Select Used_4Mask@3 x@@14 b_2)) FullPerm)))) (and (=> (= (ControlFlow 0 49) (- 0 50)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 49) 48) anon167_Then_correct) (=> (= (ControlFlow 0 49) 43) anon167_Else_correct)))))))))))
(let ((anon166_Else_correct  (=> (>= 0.0 takeTransfer@8) (=> (and (= Heap@12 Heap@10) (= Mask@12 Mask@10)) (=> (and (and (= neededTransfer@17 neededTransfer@15) (= b_10@6 b_10@3)) (and (= Used_4Mask@3 Used_4Mask@1) (= (ControlFlow 0 54) 49))) anon86_correct)))))
(let ((anon166_Then_correct  (=> (> takeTransfer@8 0.0) (=> (and (and (= neededTransfer@16 (- neededTransfer@15 takeTransfer@8)) (= Used_4Mask@2 (MapType1Store Used_4Mask@1 x@@14 f_7 (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@1 x@@14 f_7)) takeTransfer@8))))) (and (= b_10@4  (and b_10@3 (state Used_4Heap@0 Used_4Mask@2))) (= b_10@5  (and b_10@4 (= (MapType0Select Heap@10 x@@14 f_7) (MapType0Select Used_4Heap@0 x@@14 f_7)))))) (=> (and (and (and (= Mask@11 (MapType1Store Mask@10 x@@14 f_7 (real_2_U (- (U_2_real (MapType1Select Mask@10 x@@14 f_7)) takeTransfer@8)))) (= Heap@11 (MapType0Store Heap@10 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false) (MapType1Store (MapType0Select Heap@10 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false)) x@@14 f_7 (bool_2_U true))))) (and (= Heap@12 Heap@11) (= Mask@12 Mask@11))) (and (and (= neededTransfer@17 neededTransfer@16) (= b_10@6 b_10@5)) (and (= Used_4Mask@3 Used_4Mask@2) (= (ControlFlow 0 53) 49)))) anon86_correct)))))
(let ((anon165_Else_correct  (=> (and (< maskTransfer@8 neededTransfer@15) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 56) 53) anon166_Then_correct) (=> (= (ControlFlow 0 56) 54) anon166_Else_correct)))))
(let ((anon165_Then_correct  (=> (and (<= neededTransfer@15 maskTransfer@8) (= takeTransfer@8 neededTransfer@15)) (and (=> (= (ControlFlow 0 55) 53) anon166_Then_correct) (=> (= (ControlFlow 0 55) 54) anon166_Else_correct)))))
(let ((anon164_Then_correct  (=> (and (and (and (and (and b_1_1@45 b_1_1@45) b_10@3) true) (> neededTransfer@15 0.0)) (= maskTransfer@8 (U_2_real (MapType1Select Mask@10 x@@14 f_7)))) (and (=> (= (ControlFlow 0 57) 55) anon165_Then_correct) (=> (= (ControlFlow 0 57) 56) anon165_Else_correct)))))
(let ((anon164_Else_correct  (=> (not (and (and (and (and b_1_1@45 b_1_1@45) b_10@3) true) (> neededTransfer@15 0.0))) (=> (and (= Heap@12 Heap@10) (= Mask@12 Mask@10)) (=> (and (and (= neededTransfer@17 neededTransfer@15) (= b_10@6 b_10@3)) (and (= Used_4Mask@3 Used_4Mask@1) (= (ControlFlow 0 52) 49))) anon86_correct)))))
(let ((anon163_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (and (= Ops_1Mask@24 Ops_1Mask@22) (= Used_4Mask@1 ZeroMask)) (and (= b_10@3 b_10@0) (= neededTransfer@15 FullPerm))) (and (=> (= (ControlFlow 0 60) 57) anon164_Then_correct) (=> (= (ControlFlow 0 60) 52) anon164_Else_correct))))))
(let ((anon163_Then_correct  (=> (and (> takeTransfer@7 0.0) (= neededTransfer@14 (- FullPerm takeTransfer@7))) (=> (and (and (and (= Used_4Mask@0 (MapType1Store ZeroMask x@@14 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@14 f_7)) takeTransfer@7)))) (= b_10@1  (and b_10@0 (state Used_4Heap@0 Used_4Mask@0)))) (and (= b_10@2  (and b_10@1 (= (MapType0Select Ops_1Heap@0 x@@14 f_7) (MapType0Select Used_4Heap@0 x@@14 f_7)))) (= Ops_1Mask@23 (MapType1Store Ops_1Mask@22 x@@14 f_7 (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@22 x@@14 f_7)) takeTransfer@7)))))) (and (and (= Ops_1Mask@24 Ops_1Mask@23) (= Used_4Mask@1 Used_4Mask@0)) (and (= b_10@3 b_10@2) (= neededTransfer@15 neededTransfer@14)))) (and (=> (= (ControlFlow 0 59) 57) anon164_Then_correct) (=> (= (ControlFlow 0 59) 52) anon164_Else_correct))))))
(let ((anon162_Else_correct  (=> (and (< maskTransfer@7 FullPerm) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 62) 59) anon163_Then_correct) (=> (= (ControlFlow 0 62) 60) anon163_Else_correct)))))
(let ((anon162_Then_correct  (=> (and (<= FullPerm maskTransfer@7) (= takeTransfer@7 FullPerm)) (and (=> (= (ControlFlow 0 61) 59) anon163_Then_correct) (=> (= (ControlFlow 0 61) 60) anon163_Else_correct)))))
(let ((anon161_Then_correct  (=> (and (and (and (and (and b_1_1@45 b_1_1@45) b_10@0) true) (> FullPerm 0.0)) (= maskTransfer@7 (U_2_real (MapType1Select Ops_1Mask@22 x@@14 f_7)))) (and (=> (= (ControlFlow 0 63) 61) anon162_Then_correct) (=> (= (ControlFlow 0 63) 62) anon162_Else_correct)))))
(let ((anon161_Else_correct  (=> (not (and (and (and (and b_1_1@45 b_1_1@45) b_10@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@24 Ops_1Mask@22) (= Used_4Mask@1 ZeroMask)) (and (= b_10@3 b_10@0) (= neededTransfer@15 FullPerm))) (and (=> (= (ControlFlow 0 58) 57) anon164_Then_correct) (=> (= (ControlFlow 0 58) 52) anon164_Else_correct))))))
(let ((anon74_correct  (=> (and (= b_10@0  (and b_10 (state Used_4Heap@0 ZeroMask))) (= initNeededTransfer@4 (+ (U_2_real (MapType1Select ZeroMask x@@14 f_7)) FullPerm))) (and (=> (= (ControlFlow 0 64) (- 0 65)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 64) 63) anon161_Then_correct) (=> (= (ControlFlow 0 64) 58) anon161_Else_correct)))))))
(let ((anon73_correct  (=> (and (and (= b_9@0  (and b_1_1@42 b_6@7)) (= b_9@1  (and b_9@0 (state Result_4Heap Result_4Mask)))) (and (= b_9@2  (and b_9@1 (sumMask Result_4Mask Ops_1Mask@21 Used_3Mask@6))) (= b_9@3  (and (and b_9@2 (IdenticalOnKnownLocations Ops_1Heap@0 Result_4Heap Ops_1Mask@21)) (IdenticalOnKnownLocations Used_3Heap@3 Result_4Heap Used_3Mask@6))))) (=> (and (and (and (= b_9@4  (and b_9@3 (state Result_4Heap Result_4Mask))) (= b_1_1@43  (and b_1_1@42 b_9@4))) (and (= b_1_1@44  (and b_1_1@43 (state Ops_1Heap@0 Ops_1Mask@21))) (= Ops_1Mask@22 Ops_1Mask@21))) (and (and (= b_1_1@45 b_1_1@44) (= Heap@10 Heap@9)) (and (= Mask@10 Mask@9) (= (ControlFlow 0 67) 64)))) anon74_correct))))
(let ((anon72_correct  (and (=> (= (ControlFlow 0 69) (- 0 70)) (=> (and b_1_1@40 b_1_1@40) (and (= neededTransfer@13 0.0) (= (U_2_real (MapType1Select Ops_1Mask@20 rcvLocal@1 b_2)) initNeededTransfer@3)))) (=> (=> (and b_1_1@40 b_1_1@40) (and (= neededTransfer@13 0.0) (= (U_2_real (MapType1Select Ops_1Mask@20 rcvLocal@1 b_2)) initNeededTransfer@3))) (=> (and (= b_8@0  (and b_1_1@40 b_6@6)) (= b_8@1  (and b_8@0 (state Result_3Heap Result_3Mask)))) (=> (and (and (= b_8@2  (and b_8@1 (sumMask Result_3Mask Ops_1Mask@20 Used_3Mask@5))) (= b_8@3  (and (and b_8@2 (IdenticalOnKnownLocations Ops_1Heap@0 Result_3Heap Ops_1Mask@20)) (IdenticalOnKnownLocations Used_3Heap@2 Result_3Heap Used_3Mask@5)))) (and (= b_8@4  (and b_8@3 (state Result_3Heap Result_3Mask))) (= b_1_1@41  (and b_1_1@40 b_8@4)))) (=> (and (and (and (= Ops_1Mask@21 Ops_1Mask@20) (= b_6@7 b_6@6)) (and (= Heap@9 Heap@8) (= Used_3Heap@3 Used_3Heap@2))) (and (and (= Mask@9 Mask@8) (= Used_3Mask@6 Used_3Mask@5)) (and (= b_1_1@42 b_1_1@41) (= (ControlFlow 0 69) 67)))) anon73_correct)))))))
(let ((anon160_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (= b_1_1@40 b_1_1@37) (= Used_3Mask@5 Used_3Mask@3)) (=> (and (and (= Used_3Heap@2 Used_3Heap@0) (= neededTransfer@13 FullPerm)) (and (= Ops_1Mask@20 Ops_1Mask@18) (= (ControlFlow 0 73) 69))) anon72_correct)))))
(let ((anon160_Then_correct  (=> (> takeTransfer@6 0.0) (=> (and (and (= neededTransfer@12 (- FullPerm takeTransfer@6)) (= Ops_1Mask@19 (MapType1Store Ops_1Mask@18 rcvLocal@1 b_2 (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@18 rcvLocal@1 b_2)) takeTransfer@6))))) (and (= b_1_1@38  (and b_1_1@37 (state Ops_1Heap@0 Ops_1Mask@19))) (= b_1_1@39  (and b_1_1@38 (= (U_2_bool (MapType0Select Used_3Heap@0 rcvLocal@1 b_2)) (U_2_bool (MapType0Select Ops_1Heap@0 rcvLocal@1 b_2))))))) (=> (and (and (and (= Used_3Mask@4 (MapType1Store Used_3Mask@3 rcvLocal@1 b_2 (real_2_U (- (U_2_real (MapType1Select Used_3Mask@3 rcvLocal@1 b_2)) takeTransfer@6)))) (= Used_3Heap@1 (MapType0Store Used_3Heap@0 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false) (MapType1Store (MapType0Select Used_3Heap@0 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false)) (MapType0Select Used_3Heap@0 x@@14 f_7) b_2 (bool_2_U true))))) (and (= b_1_1@40 b_1_1@39) (= Used_3Mask@5 Used_3Mask@4))) (and (and (= Used_3Heap@2 Used_3Heap@1) (= neededTransfer@13 neededTransfer@12)) (and (= Ops_1Mask@20 Ops_1Mask@19) (= (ControlFlow 0 72) 69)))) anon72_correct)))))
(let ((anon159_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 75) 72) anon160_Then_correct) (=> (= (ControlFlow 0 75) 73) anon160_Else_correct)))))
(let ((anon159_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 74) 72) anon160_Then_correct) (=> (= (ControlFlow 0 74) 73) anon160_Else_correct)))))
(let ((anon158_Then_correct  (=> (and (and (and (and b_1_1@37 b_1_1@37) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType1Select Used_3Mask@3 rcvLocal@1 b_2)))) (and (=> (= (ControlFlow 0 76) 74) anon159_Then_correct) (=> (= (ControlFlow 0 76) 75) anon159_Else_correct)))))
(let ((anon158_Else_correct  (=> (not (and (and (and b_1_1@37 b_1_1@37) true) (> FullPerm 0.0))) (=> (and (= b_1_1@40 b_1_1@37) (= Used_3Mask@5 Used_3Mask@3)) (=> (and (and (= Used_3Heap@2 Used_3Heap@0) (= neededTransfer@13 FullPerm)) (and (= Ops_1Mask@20 Ops_1Mask@18) (= (ControlFlow 0 71) 69))) anon72_correct)))))
(let ((anon66_correct  (=> (and (= rcvLocal@1 (MapType0Select Result_2Heap x@@14 f_7)) (= initNeededTransfer@3 (+ (U_2_real (MapType1Select Ops_1Mask@18 rcvLocal@1 b_2)) FullPerm))) (and (=> (= (ControlFlow 0 77) (- 0 78)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 77) 76) anon158_Then_correct) (=> (= (ControlFlow 0 77) 71) anon158_Else_correct)))))))
(let ((anon157_Else_correct  (=> (and (not b_1_1@37) (= (ControlFlow 0 82) 77)) anon66_correct)))
(let ((anon157_Then_correct  (=> b_1_1@37 (and (=> (= (ControlFlow 0 80) (- 0 81)) (HasDirectPerm Result_2Mask x@@14 f_7)) (=> (HasDirectPerm Result_2Mask x@@14 f_7) (=> (= (ControlFlow 0 80) 77) anon66_correct))))))
(let ((anon156_Then_correct  (=> (and b_1_1@37 b_1_1@37) (and (=> (= (ControlFlow 0 83) 80) anon157_Then_correct) (=> (= (ControlFlow 0 83) 82) anon157_Else_correct)))))
(let ((anon156_Else_correct  (=> (and (not (and b_1_1@37 b_1_1@37)) (= (ControlFlow 0 79) 77)) anon66_correct)))
(let ((anon63_correct  (and (=> (= (ControlFlow 0 84) (- 0 85)) (=> (and b_1_1@34 b_6@6) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_3Mask@3 rcvLocal@0 b_2)) initNeededTransfer@2)))) (=> (=> (and b_1_1@34 b_6@6) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_3Mask@3 rcvLocal@0 b_2)) initNeededTransfer@2))) (=> (and (and (and (= b_7@0  (and b_1_1@34 b_6@6)) (= b_7@1  (and b_7@0 (state Result_2Heap Result_2Mask)))) (and (= b_7@2  (and b_7@1 (sumMask Result_2Mask Ops_1Mask@18 Used_3Mask@3))) (= b_7@3  (and (and b_7@2 (IdenticalOnKnownLocations Ops_1Heap@0 Result_2Heap Ops_1Mask@18)) (IdenticalOnKnownLocations Used_3Heap@0 Result_2Heap Used_3Mask@3))))) (and (and (= b_7@4  (and b_7@3 (state Result_2Heap Result_2Mask))) (= b_1_1@35  (and b_1_1@34 b_7@4))) (and (= b_1_1@36  (and b_1_1@35 b_6@6)) (= b_1_1@37  (and b_1_1@36 (= Used_3Heap@0 Ops_1Heap@0)))))) (and (=> (= (ControlFlow 0 84) 83) anon156_Then_correct) (=> (= (ControlFlow 0 84) 79) anon156_Else_correct)))))))
(let ((anon155_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (= neededTransfer@11 neededTransfer@9) (= Mask@8 Mask@6)) (=> (and (and (= Heap@8 Heap@6) (= b_6@6 b_6@3)) (and (= Used_3Mask@3 Used_3Mask@1) (= (ControlFlow 0 88) 84))) anon63_correct)))))
(let ((anon155_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (and (= neededTransfer@10 (- neededTransfer@9 takeTransfer@5)) (= Used_3Mask@2 (MapType1Store Used_3Mask@1 rcvLocal@0 b_2 (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@1 rcvLocal@0 b_2)) takeTransfer@5))))) (and (= b_6@4  (and b_6@3 (state Used_3Heap@0 Used_3Mask@2))) (= b_6@5  (and b_6@4 (= (U_2_bool (MapType0Select Heap@6 rcvLocal@0 b_2)) (U_2_bool (MapType0Select Used_3Heap@0 rcvLocal@0 b_2))))))) (=> (and (and (and (= Mask@7 (MapType1Store Mask@6 rcvLocal@0 b_2 (real_2_U (- (U_2_real (MapType1Select Mask@6 rcvLocal@0 b_2)) takeTransfer@5)))) (= Heap@7 (MapType0Store Heap@6 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false) (MapType1Store (MapType0Select Heap@6 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false)) (MapType0Select Heap@6 x@@14 f_7) b_2 (bool_2_U true))))) (and (= neededTransfer@11 neededTransfer@10) (= Mask@8 Mask@7))) (and (and (= Heap@8 Heap@7) (= b_6@6 b_6@5)) (and (= Used_3Mask@3 Used_3Mask@2) (= (ControlFlow 0 87) 84)))) anon63_correct)))))
(let ((anon154_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@9) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 90) 87) anon155_Then_correct) (=> (= (ControlFlow 0 90) 88) anon155_Else_correct)))))
(let ((anon154_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@5) (= takeTransfer@5 neededTransfer@9)) (and (=> (= (ControlFlow 0 89) 87) anon155_Then_correct) (=> (= (ControlFlow 0 89) 88) anon155_Else_correct)))))
(let ((anon153_Then_correct  (=> (and (and (and (and b_1_1@34 b_6@3) true) (> neededTransfer@9 0.0)) (= maskTransfer@5 (U_2_real (MapType1Select Mask@6 rcvLocal@0 b_2)))) (and (=> (= (ControlFlow 0 91) 89) anon154_Then_correct) (=> (= (ControlFlow 0 91) 90) anon154_Else_correct)))))
(let ((anon153_Else_correct  (=> (not (and (and (and b_1_1@34 b_6@3) true) (> neededTransfer@9 0.0))) (=> (and (= neededTransfer@11 neededTransfer@9) (= Mask@8 Mask@6)) (=> (and (and (= Heap@8 Heap@6) (= b_6@6 b_6@3)) (and (= Used_3Mask@3 Used_3Mask@1) (= (ControlFlow 0 86) 84))) anon63_correct)))))
(let ((anon152_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (and (= Ops_1Mask@18 Ops_1Mask@16) (= Used_3Mask@1 ZeroMask)) (and (= b_6@3 b_6@0) (= neededTransfer@9 FullPerm))) (and (=> (= (ControlFlow 0 94) 91) anon153_Then_correct) (=> (= (ControlFlow 0 94) 86) anon153_Else_correct))))))
(let ((anon152_Then_correct  (=> (and (> takeTransfer@4 0.0) (= neededTransfer@8 (- FullPerm takeTransfer@4))) (=> (and (and (and (= Used_3Mask@0 (MapType1Store ZeroMask rcvLocal@0 b_2 (real_2_U (+ (U_2_real (MapType1Select ZeroMask rcvLocal@0 b_2)) takeTransfer@4)))) (= b_6@1  (and b_6@0 (state Used_3Heap@0 Used_3Mask@0)))) (and (= b_6@2  (and b_6@1 (= (U_2_bool (MapType0Select Ops_1Heap@0 rcvLocal@0 b_2)) (U_2_bool (MapType0Select Used_3Heap@0 rcvLocal@0 b_2))))) (= Ops_1Mask@17 (MapType1Store Ops_1Mask@16 rcvLocal@0 b_2 (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@16 rcvLocal@0 b_2)) takeTransfer@4)))))) (and (and (= Ops_1Mask@18 Ops_1Mask@17) (= Used_3Mask@1 Used_3Mask@0)) (and (= b_6@3 b_6@2) (= neededTransfer@9 neededTransfer@8)))) (and (=> (= (ControlFlow 0 93) 91) anon153_Then_correct) (=> (= (ControlFlow 0 93) 86) anon153_Else_correct))))))
(let ((anon151_Else_correct  (=> (and (< maskTransfer@4 FullPerm) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 96) 93) anon152_Then_correct) (=> (= (ControlFlow 0 96) 94) anon152_Else_correct)))))
(let ((anon151_Then_correct  (=> (and (<= FullPerm maskTransfer@4) (= takeTransfer@4 FullPerm)) (and (=> (= (ControlFlow 0 95) 93) anon152_Then_correct) (=> (= (ControlFlow 0 95) 94) anon152_Else_correct)))))
(let ((anon150_Then_correct  (=> (and (and (and (and b_1_1@34 b_6@0) true) (> FullPerm 0.0)) (= maskTransfer@4 (U_2_real (MapType1Select Ops_1Mask@16 rcvLocal@0 b_2)))) (and (=> (= (ControlFlow 0 97) 95) anon151_Then_correct) (=> (= (ControlFlow 0 97) 96) anon151_Else_correct)))))
(let ((anon150_Else_correct  (=> (not (and (and (and b_1_1@34 b_6@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@18 Ops_1Mask@16) (= Used_3Mask@1 ZeroMask)) (and (= b_6@3 b_6@0) (= neededTransfer@9 FullPerm))) (and (=> (= (ControlFlow 0 92) 91) anon153_Then_correct) (=> (= (ControlFlow 0 92) 86) anon153_Else_correct))))))
(let ((anon51_correct  (=> (and (= rcvLocal@0 (MapType0Select Ops_1Heap@0 x@@14 f_7)) (= initNeededTransfer@2 (+ (U_2_real (MapType1Select ZeroMask rcvLocal@0 b_2)) FullPerm))) (and (=> (= (ControlFlow 0 98) (- 0 99)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 98) 97) anon150_Then_correct) (=> (= (ControlFlow 0 98) 92) anon150_Else_correct)))))))
(let ((anon149_Else_correct  (=> (and (not b_1_1@34) (= (ControlFlow 0 103) 98)) anon51_correct)))
(let ((anon149_Then_correct  (=> b_1_1@34 (and (=> (= (ControlFlow 0 101) (- 0 102)) (HasDirectPerm Ops_1Mask@16 x@@14 f_7)) (=> (HasDirectPerm Ops_1Mask@16 x@@14 f_7) (=> (= (ControlFlow 0 101) 98) anon51_correct))))))
(let ((anon148_Then_correct  (=> (and b_1_1@34 b_6@0) (and (=> (= (ControlFlow 0 104) 101) anon149_Then_correct) (=> (= (ControlFlow 0 104) 103) anon149_Else_correct)))))
(let ((anon148_Else_correct  (=> (and (not (and b_1_1@34 b_6@0)) (= (ControlFlow 0 100) 98)) anon51_correct)))
(let ((anon147_Then_correct  (=> (=> b_1_1@34 (U_2_bool (MapType0Select Ops_1Heap@0 x@@14 b_2))) (and (=> (= (ControlFlow 0 105) 104) anon148_Then_correct) (=> (= (ControlFlow 0 105) 100) anon148_Else_correct)))))
(let ((anon147_Else_correct  (=> (not (=> b_1_1@34 (U_2_bool (MapType0Select Ops_1Heap@0 x@@14 b_2)))) (=> (and (and (and (= Ops_1Mask@21 Ops_1Mask@16) (= b_6@7 b_6@0)) (and (= Heap@9 Heap@6) (= Used_3Heap@3 Used_3Heap@0))) (and (and (= Mask@9 Mask@6) (= Used_3Mask@6 ZeroMask)) (and (= b_1_1@42 b_1_1@34) (= (ControlFlow 0 68) 67)))) anon73_correct))))
(let ((anon146_Then_correct  (=> (and b_1_1@34 (= b_6@0  (and b_6 (state Used_3Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 106) 105) anon147_Then_correct) (=> (= (ControlFlow 0 106) 68) anon147_Else_correct)))))
(let ((anon146_Else_correct  (=> (and (not b_1_1@34) (= Ops_1Mask@22 Ops_1Mask@16)) (=> (and (and (= b_1_1@45 b_1_1@34) (= Heap@10 Heap@6)) (and (= Mask@10 Mask@6) (= (ControlFlow 0 66) 64))) anon74_correct))))
(let ((anon45_correct  (=> (= b_1_1@33  (and b_1_1@32 (state Ops_1Heap@0 Ops_1Mask@15))) (=> (and (and (= Ops_1Mask@16 Ops_1Mask@15) (= b_1_1@34 b_1_1@33)) (and (= Heap@6 Heap@5) (= Mask@6 Mask@5))) (and (=> (= (ControlFlow 0 108) 106) anon146_Then_correct) (=> (= (ControlFlow 0 108) 66) anon146_Else_correct))))))
(let ((anon41_correct  (=> (= b_1_1@30  (and b_1_1@29 (state Ops_1Heap@0 Ops_1Mask@14))) (=> (and (= b_1_1@31  (and b_1_1@30 (state Ops_1Heap@0 Ops_1Mask@14))) (= Mask@5 Mask@4)) (=> (and (and (= Heap@5 Heap@4) (= Ops_1Mask@15 Ops_1Mask@14)) (and (= b_1_1@32 b_1_1@31) (= (ControlFlow 0 113) 108))) anon45_correct)))))
(let ((anon144_Else_correct  (=> (and (and (not (U_2_bool (MapType0Select Ops_1Heap@0 (MapType0Select Ops_1Heap@0 x@@14 f_7) b_2))) (= b_1_1@29 b_1_1@26)) (and (= Ops_1Mask@14 Ops_1Mask@12) (= (ControlFlow 0 115) 113))) anon41_correct)))
(let ((anon144_Then_correct  (=> (U_2_bool (MapType0Select Ops_1Heap@0 (MapType0Select Ops_1Heap@0 x@@14 f_7) b_2)) (=> (and (= Ops_1Mask@13 (MapType1Store Ops_1Mask@12 null (Cell (MapType0Select Ops_1Heap@0 (MapType0Select Ops_1Heap@0 x@@14 f_7) f_7)) (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@12 null (Cell (MapType0Select Ops_1Heap@0 (MapType0Select Ops_1Heap@0 x@@14 f_7) f_7)))) FullPerm)))) (= b_1_1@27  (and b_1_1@26 (InsidePredicate (Cell (MapType0Select Ops_1Heap@0 x@@14 f_7)) (MapType0Select Ops_1Heap@0 null (Cell (MapType0Select Ops_1Heap@0 x@@14 f_7))) (Cell (MapType0Select Ops_1Heap@0 (MapType0Select Ops_1Heap@0 x@@14 f_7) f_7)) (MapType0Select Ops_1Heap@0 null (Cell (MapType0Select Ops_1Heap@0 (MapType0Select Ops_1Heap@0 x@@14 f_7) f_7))))))) (=> (and (and (= b_1_1@28  (and b_1_1@27 (state Ops_1Heap@0 Ops_1Mask@13))) (= b_1_1@29 b_1_1@28)) (and (= Ops_1Mask@14 Ops_1Mask@13) (= (ControlFlow 0 114) 113))) anon41_correct)))))
(let ((anon39_correct  (and (=> (= (ControlFlow 0 116) (- 0 117)) (=> (and b_1_1@17 b_4@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_2Mask@3 null (Cell arg_1@0))) initNeededTransfer@1)))) (=> (=> (and b_1_1@17 b_4@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_2Mask@3 null (Cell arg_1@0))) initNeededTransfer@1))) (=> (and (= b_5@0  (and b_1_1@17 b_4@6)) (= b_5@1  (and b_5@0 (state Result_1Heap Result_1Mask)))) (=> (and (and (= b_5@2  (and b_5@1 (sumMask Result_1Mask Ops_1Mask@10 Used_2Mask@3))) (= b_5@3  (and (and b_5@2 (IdenticalOnKnownLocations Ops_1Heap@0 Result_1Heap Ops_1Mask@10)) (IdenticalOnKnownLocations Used_2Heap@0 Result_1Heap Used_2Mask@3)))) (and (= b_5@4  (and b_5@3 (state Result_1Heap Result_1Mask))) (= b_1_1@20  (and b_1_1@17 b_5@4)))) (=> (and (and (and (= b_1_1@21  (and b_1_1@20 b_4@6)) (= b_1_1@22  (and b_1_1@21 (= Used_2Heap@0 Ops_1Heap@0)))) (and (= b_1_1@23  (and b_1_1@22 (not (= (MapType0Select Ops_1Heap@0 x@@14 f_7) null)))) (= Ops_1Mask@11 (MapType1Store Ops_1Mask@10 (MapType0Select Ops_1Heap@0 x@@14 f_7) b_2 (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@10 (MapType0Select Ops_1Heap@0 x@@14 f_7) b_2)) FullPerm)))))) (and (and (= b_1_1@24  (and b_1_1@23 (state Ops_1Heap@0 Ops_1Mask@11))) (= b_1_1@25  (and b_1_1@24 (not (= (MapType0Select Ops_1Heap@0 x@@14 f_7) null))))) (and (= Ops_1Mask@12 (MapType1Store Ops_1Mask@11 (MapType0Select Ops_1Heap@0 x@@14 f_7) f_7 (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@11 (MapType0Select Ops_1Heap@0 x@@14 f_7) f_7)) FullPerm)))) (= b_1_1@26  (and b_1_1@25 (state Ops_1Heap@0 Ops_1Mask@12)))))) (and (=> (= (ControlFlow 0 116) 114) anon144_Then_correct) (=> (= (ControlFlow 0 116) 115) anon144_Else_correct)))))))))
(let ((anon143_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (= Heap@4 Heap@2) (= Mask@4 Mask@2)) (=> (and (and (= neededTransfer@7 neededTransfer@5) (= b_4@6 b_4@3)) (and (= Used_2Mask@3 Used_2Mask@1) (= (ControlFlow 0 120) 116))) anon39_correct)))))
(let ((anon143_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (= neededTransfer@6 (- neededTransfer@5 takeTransfer@3)) (= Used_2Mask@2 (MapType1Store Used_2Mask@1 null (Cell arg_1@0) (real_2_U (+ (U_2_real (MapType1Select Used_2Mask@1 null (Cell arg_1@0))) takeTransfer@3))))) (=> (and (and (= b_4@4  (and b_4@3 (state Used_2Heap@0 Used_2Mask@2))) (= TempMask@3 (MapType1Store ZeroMask null (Cell arg_1@0) (real_2_U FullPerm)))) (and (= b_4@5  (and b_4@4 (IdenticalOnKnownLocations Heap@2 Used_2Heap@0 TempMask@3))) (= Mask@3 (MapType1Store Mask@2 null (Cell arg_1@0) (real_2_U (- (U_2_real (MapType1Select Mask@2 null (Cell arg_1@0))) takeTransfer@3)))))) (=> (and (and (and (forall ((o_4 T@U) (f_9 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_9))))
(let ((A@@12 (FieldTypeInv0 (type f_9))))
 (=> (and (and (= (type o_4) RefType) (= (type f_9) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@2 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false)) o_4 f_9)) (U_2_bool (MapType1Select (MapType0Select Heap@2 null (|Cell#sm| (MapType0Select Heap@2 x@@14 f_7))) o_4 f_9)))) (U_2_bool (MapType1Select newPMask@1 o_4 f_9)))))
 :qid |stdinbpl.593:43|
 :skolemid |36|
 :pattern ( (MapType1Select newPMask@1 o_4 f_9))
)) (= Heap@3 (MapType0Store Heap@2 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false) newPMask@1))) (and (= Heap@4 Heap@3) (= Mask@4 Mask@3))) (and (and (= neededTransfer@7 neededTransfer@6) (= b_4@6 b_4@5)) (and (= Used_2Mask@3 Used_2Mask@2) (= (ControlFlow 0 119) 116)))) anon39_correct))))))
(let ((anon142_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@5) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 122) 119) anon143_Then_correct) (=> (= (ControlFlow 0 122) 120) anon143_Else_correct)))))
(let ((anon142_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@3) (= takeTransfer@3 neededTransfer@5)) (and (=> (= (ControlFlow 0 121) 119) anon143_Then_correct) (=> (= (ControlFlow 0 121) 120) anon143_Else_correct)))))
(let ((anon141_Then_correct  (=> (and (and (and (and b_1_1@17 b_4@3) true) (> neededTransfer@5 0.0)) (= maskTransfer@3 (U_2_real (MapType1Select Mask@2 null (Cell arg_1@0))))) (and (=> (= (ControlFlow 0 123) 121) anon142_Then_correct) (=> (= (ControlFlow 0 123) 122) anon142_Else_correct)))))
(let ((anon141_Else_correct  (=> (not (and (and (and b_1_1@17 b_4@3) true) (> neededTransfer@5 0.0))) (=> (and (= Heap@4 Heap@2) (= Mask@4 Mask@2)) (=> (and (and (= neededTransfer@7 neededTransfer@5) (= b_4@6 b_4@3)) (and (= Used_2Mask@3 Used_2Mask@1) (= (ControlFlow 0 118) 116))) anon39_correct)))))
(let ((anon140_Else_correct  (=> (>= 0.0 takeTransfer@2) (=> (and (and (= Ops_1Mask@10 Ops_1Mask@8) (= Used_2Mask@1 ZeroMask)) (and (= b_4@3 b_4@0) (= neededTransfer@5 FullPerm))) (and (=> (= (ControlFlow 0 126) 123) anon141_Then_correct) (=> (= (ControlFlow 0 126) 118) anon141_Else_correct))))))
(let ((anon140_Then_correct  (=> (> takeTransfer@2 0.0) (=> (and (= neededTransfer@4 (- FullPerm takeTransfer@2)) (= Used_2Mask@0 (MapType1Store ZeroMask null (Cell arg_1@0) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Cell arg_1@0))) takeTransfer@2))))) (=> (and (and (and (= b_4@1  (and b_4@0 (state Used_2Heap@0 Used_2Mask@0))) (= TempMask@2 (MapType1Store ZeroMask null (Cell arg_1@0) (real_2_U FullPerm)))) (and (= b_4@2  (and b_4@1 (IdenticalOnKnownLocations Ops_1Heap@0 Used_2Heap@0 TempMask@2))) (= Ops_1Mask@9 (MapType1Store Ops_1Mask@8 null (Cell arg_1@0) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@8 null (Cell arg_1@0))) takeTransfer@2)))))) (and (and (= Ops_1Mask@10 Ops_1Mask@9) (= Used_2Mask@1 Used_2Mask@0)) (and (= b_4@3 b_4@2) (= neededTransfer@5 neededTransfer@4)))) (and (=> (= (ControlFlow 0 125) 123) anon141_Then_correct) (=> (= (ControlFlow 0 125) 118) anon141_Else_correct)))))))
(let ((anon139_Else_correct  (=> (and (< maskTransfer@2 FullPerm) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 128) 125) anon140_Then_correct) (=> (= (ControlFlow 0 128) 126) anon140_Else_correct)))))
(let ((anon139_Then_correct  (=> (and (<= FullPerm maskTransfer@2) (= takeTransfer@2 FullPerm)) (and (=> (= (ControlFlow 0 127) 125) anon140_Then_correct) (=> (= (ControlFlow 0 127) 126) anon140_Else_correct)))))
(let ((anon138_Then_correct  (=> (and (and (and (and b_1_1@17 b_4@0) true) (> FullPerm 0.0)) (= maskTransfer@2 (U_2_real (MapType1Select Ops_1Mask@8 null (Cell arg_1@0))))) (and (=> (= (ControlFlow 0 129) 127) anon139_Then_correct) (=> (= (ControlFlow 0 129) 128) anon139_Else_correct)))))
(let ((anon138_Else_correct  (=> (not (and (and (and b_1_1@17 b_4@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@10 Ops_1Mask@8) (= Used_2Mask@1 ZeroMask)) (and (= b_4@3 b_4@0) (= neededTransfer@5 FullPerm))) (and (=> (= (ControlFlow 0 124) 123) anon141_Then_correct) (=> (= (ControlFlow 0 124) 118) anon141_Else_correct))))))
(let ((anon27_correct  (=> (and (= arg_1@0 (MapType0Select Ops_1Heap@0 x@@14 f_7)) (= initNeededTransfer@1 (+ (U_2_real (MapType1Select ZeroMask null (Cell arg_1@0))) FullPerm))) (and (=> (= (ControlFlow 0 130) (- 0 131)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 130) 129) anon138_Then_correct) (=> (= (ControlFlow 0 130) 124) anon138_Else_correct)))))))
(let ((anon137_Else_correct  (=> (and (not b_1_1@17) (= (ControlFlow 0 135) 130)) anon27_correct)))
(let ((anon137_Then_correct  (=> b_1_1@17 (and (=> (= (ControlFlow 0 133) (- 0 134)) (HasDirectPerm Ops_1Mask@8 x@@14 f_7)) (=> (HasDirectPerm Ops_1Mask@8 x@@14 f_7) (=> (= (ControlFlow 0 133) 130) anon27_correct))))))
(let ((anon136_Then_correct  (=> (and b_1_1@17 b_4@0) (and (=> (= (ControlFlow 0 136) 133) anon137_Then_correct) (=> (= (ControlFlow 0 136) 135) anon137_Else_correct)))))
(let ((anon136_Else_correct  (=> (and (not (and b_1_1@17 b_4@0)) (= (ControlFlow 0 132) 130)) anon27_correct)))
(let ((anon24_correct  (=> (|Cell#trigger| Ops_1Heap@0 (Cell (MapType0Select Ops_1Heap@0 x@@14 f_7))) (=> (and (= (MapType0Select Ops_1Heap@0 null (Cell (MapType0Select Ops_1Heap@0 x@@14 f_7))) (CombineFrames (FrameFragment (MapType0Select Ops_1Heap@0 (MapType0Select Ops_1Heap@0 x@@14 f_7) b_2)) (CombineFrames (FrameFragment (MapType0Select Ops_1Heap@0 (MapType0Select Ops_1Heap@0 x@@14 f_7) f_7)) (FrameFragment (ite (U_2_bool (MapType0Select Ops_1Heap@0 (MapType0Select Ops_1Heap@0 x@@14 f_7) b_2)) (MapType0Select Ops_1Heap@0 null (Cell (MapType0Select Ops_1Heap@0 (MapType0Select Ops_1Heap@0 x@@14 f_7) f_7))) EmptyFrame))))) (= b_4@0  (and b_4 (state Used_2Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 137) 136) anon136_Then_correct) (=> (= (ControlFlow 0 137) 132) anon136_Else_correct))))))
(let ((anon135_Else_correct  (=> (and (not b_1_1@17) (= (ControlFlow 0 140) 137)) anon24_correct)))
(let ((anon135_Then_correct  (=> b_1_1@17 (and (=> (= (ControlFlow 0 138) (- 0 139)) (HasDirectPerm Ops_1Mask@8 x@@14 f_7)) (=> (HasDirectPerm Ops_1Mask@8 x@@14 f_7) (=> (= (ControlFlow 0 138) 137) anon24_correct))))))
(let ((anon134_Then_correct  (=> (=> b_1_1@17 (U_2_bool (MapType0Select Ops_1Heap@0 x@@14 b_2))) (and (=> (= (ControlFlow 0 141) 138) anon135_Then_correct) (=> (= (ControlFlow 0 141) 140) anon135_Else_correct)))))
(let ((anon44_correct  (=> (state Ops_1Heap@0 Ops_1Mask@8) (=> (and (= b_1_1@19  (and b_1_1@18 (state Ops_1Heap@0 Ops_1Mask@8))) (= Mask@5 Mask@2)) (=> (and (and (= Heap@5 Heap@2) (= Ops_1Mask@15 Ops_1Mask@8)) (and (= b_1_1@32 b_1_1@19) (= (ControlFlow 0 109) 108))) anon45_correct)))))
(let ((anon145_Else_correct  (=> (not b_1_1@17) (=> (and (= b_1_1@18 b_1_1@17) (= (ControlFlow 0 111) 109)) anon44_correct))))
(let ((anon145_Then_correct  (=> b_1_1@17 (=> (and (= b_1_1@18 false) (= (ControlFlow 0 110) 109)) anon44_correct))))
(let ((anon134_Else_correct  (=> (not (=> b_1_1@17 (U_2_bool (MapType0Select Ops_1Heap@0 x@@14 b_2)))) (and (=> (= (ControlFlow 0 112) 110) anon145_Then_correct) (=> (= (ControlFlow 0 112) 111) anon145_Else_correct)))))
(let ((anon133_Else_correct  (=> (not b_1_1@17) (and (=> (= (ControlFlow 0 144) 141) anon134_Then_correct) (=> (= (ControlFlow 0 144) 112) anon134_Else_correct)))))
(let ((anon133_Then_correct  (=> b_1_1@17 (and (=> (= (ControlFlow 0 142) (- 0 143)) (HasDirectPerm Ops_1Mask@8 x@@14 b_2)) (=> (HasDirectPerm Ops_1Mask@8 x@@14 b_2) (and (=> (= (ControlFlow 0 142) 141) anon134_Then_correct) (=> (= (ControlFlow 0 142) 112) anon134_Else_correct)))))))
(let ((anon132_Then_correct  (=> b_1_1@17 (and (=> (= (ControlFlow 0 145) 142) anon133_Then_correct) (=> (= (ControlFlow 0 145) 144) anon133_Else_correct)))))
(let ((anon132_Else_correct  (=> (not b_1_1@17) (=> (and (and (= Ops_1Mask@16 Ops_1Mask@8) (= b_1_1@34 b_1_1@17)) (and (= Heap@6 Heap@2) (= Mask@6 Mask@2))) (and (=> (= (ControlFlow 0 107) 106) anon146_Then_correct) (=> (= (ControlFlow 0 107) 66) anon146_Else_correct))))))
(let ((anon17_correct  (=> (and (= b_1_1@15  (and b_1_1@14 (state Ops_1Heap@0 Ops_1Mask@7))) (= b_1_1@16  (and b_1_1@15 (state Ops_1Heap@0 Ops_1Mask@7)))) (=> (and (and (= Mask@2 Mask@1) (= Ops_1Mask@8 Ops_1Mask@7)) (and (= Heap@2 Heap@1) (= b_1_1@17 b_1_1@16))) (and (=> (= (ControlFlow 0 147) 145) anon132_Then_correct) (=> (= (ControlFlow 0 147) 107) anon132_Else_correct))))))
(let ((anon131_Else_correct  (=> (and (and (not (U_2_bool (MapType0Select Ops_1Heap@0 x@@14 b_2))) (= b_1_1@14 b_1_1@11)) (and (= Ops_1Mask@7 Ops_1Mask@5) (= (ControlFlow 0 149) 147))) anon17_correct)))
(let ((anon131_Then_correct  (=> (U_2_bool (MapType0Select Ops_1Heap@0 x@@14 b_2)) (=> (and (= Ops_1Mask@6 (MapType1Store Ops_1Mask@5 null (Cell (MapType0Select Ops_1Heap@0 x@@14 f_7)) (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@5 null (Cell (MapType0Select Ops_1Heap@0 x@@14 f_7)))) FullPerm)))) (= b_1_1@12  (and b_1_1@11 (InsidePredicate (Cell x@@14) (MapType0Select Ops_1Heap@0 null (Cell x@@14)) (Cell (MapType0Select Ops_1Heap@0 x@@14 f_7)) (MapType0Select Ops_1Heap@0 null (Cell (MapType0Select Ops_1Heap@0 x@@14 f_7))))))) (=> (and (and (= b_1_1@13  (and b_1_1@12 (state Ops_1Heap@0 Ops_1Mask@6))) (= b_1_1@14 b_1_1@13)) (and (= Ops_1Mask@7 Ops_1Mask@6) (= (ControlFlow 0 148) 147))) anon17_correct)))))
(let ((anon15_correct  (and (=> (= (ControlFlow 0 150) (- 0 151)) (=> (and b_1_1@4 b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 null (Cell x@@14))) initNeededTransfer@0)))) (=> (=> (and b_1_1@4 b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 null (Cell x@@14))) initNeededTransfer@0))) (=> (and (= b_3_1@0  (and b_1_1@4 b_2_1@6)) (= b_3_1@1  (and b_3_1@0 (state ResultHeap ResultMask@@0)))) (=> (and (and (= b_3_1@2  (and b_3_1@1 (sumMask ResultMask@@0 Ops_1Mask@3 Used_1Mask@3))) (= b_3_1@3  (and (and b_3_1@2 (IdenticalOnKnownLocations Ops_1Heap@0 ResultHeap Ops_1Mask@3)) (IdenticalOnKnownLocations Used_1Heap@0 ResultHeap Used_1Mask@3)))) (and (= b_3_1@4  (and b_3_1@3 (state ResultHeap ResultMask@@0))) (= b_1_1@5  (and b_1_1@4 b_3_1@4)))) (=> (and (and (and (= b_1_1@6  (and b_1_1@5 b_2_1@6)) (= b_1_1@7  (and b_1_1@6 (= Used_1Heap@0 Ops_1Heap@0)))) (and (= b_1_1@8  (and b_1_1@7 (not (= x@@14 null)))) (= Ops_1Mask@4 (MapType1Store Ops_1Mask@3 x@@14 b_2 (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@3 x@@14 b_2)) FullPerm)))))) (and (and (= b_1_1@9  (and b_1_1@8 (state Ops_1Heap@0 Ops_1Mask@4))) (= b_1_1@10  (and b_1_1@9 (not (= x@@14 null))))) (and (= Ops_1Mask@5 (MapType1Store Ops_1Mask@4 x@@14 f_7 (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@4 x@@14 f_7)) FullPerm)))) (= b_1_1@11  (and b_1_1@10 (state Ops_1Heap@0 Ops_1Mask@5)))))) (and (=> (= (ControlFlow 0 150) 148) anon131_Then_correct) (=> (= (ControlFlow 0 150) 149) anon131_Else_correct)))))))))
(let ((anon130_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Mask@1 ZeroMask) (= neededTransfer@3 neededTransfer@1)) (=> (and (and (= b_2_1@6 b_2_1@3) (= Used_1Mask@3 Used_1Mask@1)) (and (= Heap@1 Heap@@10) (= (ControlFlow 0 154) 150))) anon15_correct)))))
(let ((anon130_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1)) (= Used_1Mask@2 (MapType1Store Used_1Mask@1 null (Cell x@@14) (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@1 null (Cell x@@14))) takeTransfer@1))))) (=> (and (and (= b_2_1@4  (and b_2_1@3 (state Used_1Heap@0 Used_1Mask@2))) (= TempMask@1 (MapType1Store ZeroMask null (Cell x@@14) (real_2_U FullPerm)))) (and (= b_2_1@5  (and b_2_1@4 (IdenticalOnKnownLocations Heap@@10 Used_1Heap@0 TempMask@1))) (= Mask@0 (MapType1Store ZeroMask null (Cell x@@14) (real_2_U (- (U_2_real (MapType1Select ZeroMask null (Cell x@@14))) takeTransfer@1)))))) (=> (and (and (and (forall ((o_3 T@U) (f_8 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_8))))
(let ((A@@13 (FieldTypeInv0 (type f_8))))
 (=> (and (and (= (type o_3) RefType) (= (type f_8) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@@10 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false)) o_3 f_8)) (U_2_bool (MapType1Select (MapType0Select Heap@@10 null (|Cell#sm| x@@14)) o_3 f_8)))) (U_2_bool (MapType1Select newPMask@0 o_3 f_8)))))
 :qid |stdinbpl.471:39|
 :skolemid |35|
 :pattern ( (MapType1Select newPMask@0 o_3 f_8))
)) (= Heap@0 (MapType0Store Heap@@10 null (|wand#sm| x@@14 FullPerm x@@14 FullPerm x@@14 FullPerm x@@14 x@@14 FullPerm false) newPMask@0))) (and (= Mask@1 Mask@0) (= neededTransfer@3 neededTransfer@2))) (and (and (= b_2_1@6 b_2_1@5) (= Used_1Mask@3 Used_1Mask@2)) (and (= Heap@1 Heap@0) (= (ControlFlow 0 153) 150)))) anon15_correct))))))
(let ((anon129_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 156) 153) anon130_Then_correct) (=> (= (ControlFlow 0 156) 154) anon130_Else_correct)))))
(let ((anon129_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 155) 153) anon130_Then_correct) (=> (= (ControlFlow 0 155) 154) anon130_Else_correct)))))
(let ((anon128_Then_correct  (=> (and (and (and (and b_1_1@4 b_2_1@3) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType1Select ZeroMask null (Cell x@@14))))) (and (=> (= (ControlFlow 0 157) 155) anon129_Then_correct) (=> (= (ControlFlow 0 157) 156) anon129_Else_correct)))))
(let ((anon128_Else_correct  (=> (not (and (and (and b_1_1@4 b_2_1@3) true) (> neededTransfer@1 0.0))) (=> (and (= Mask@1 ZeroMask) (= neededTransfer@3 neededTransfer@1)) (=> (and (and (= b_2_1@6 b_2_1@3) (= Used_1Mask@3 Used_1Mask@1)) (and (= Heap@1 Heap@@10) (= (ControlFlow 0 152) 150))) anon15_correct)))))
(let ((anon127_Else_correct  (=> (>= 0.0 takeTransfer@0) (=> (and (and (= Ops_1Mask@3 Ops_1Mask@1) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 160) 157) anon128_Then_correct) (=> (= (ControlFlow 0 160) 152) anon128_Else_correct))))))
(let ((anon127_Then_correct  (=> (> takeTransfer@0 0.0) (=> (and (= neededTransfer@0 (- FullPerm takeTransfer@0)) (= Used_1Mask@0 (MapType1Store ZeroMask null (Cell x@@14) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Cell x@@14))) takeTransfer@0))))) (=> (and (and (and (= b_2_1@1  (and b_2_1@0 (state Used_1Heap@0 Used_1Mask@0))) (= TempMask@0 (MapType1Store ZeroMask null (Cell x@@14) (real_2_U FullPerm)))) (and (= b_2_1@2  (and b_2_1@1 (IdenticalOnKnownLocations Ops_1Heap@0 Used_1Heap@0 TempMask@0))) (= Ops_1Mask@2 (MapType1Store Ops_1Mask@1 null (Cell x@@14) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@1 null (Cell x@@14))) takeTransfer@0)))))) (and (and (= Ops_1Mask@3 Ops_1Mask@2) (= Used_1Mask@1 Used_1Mask@0)) (and (= b_2_1@3 b_2_1@2) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 159) 157) anon128_Then_correct) (=> (= (ControlFlow 0 159) 152) anon128_Else_correct)))))))
(let ((anon126_Else_correct  (=> (and (< maskTransfer@0 FullPerm) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 162) 159) anon127_Then_correct) (=> (= (ControlFlow 0 162) 160) anon127_Else_correct)))))
(let ((anon126_Then_correct  (=> (and (<= FullPerm maskTransfer@0) (= takeTransfer@0 FullPerm)) (and (=> (= (ControlFlow 0 161) 159) anon127_Then_correct) (=> (= (ControlFlow 0 161) 160) anon127_Else_correct)))))
(let ((anon125_Then_correct  (=> (and (and (and (and b_1_1@4 b_2_1@0) true) (> FullPerm 0.0)) (= maskTransfer@0 (U_2_real (MapType1Select Ops_1Mask@1 null (Cell x@@14))))) (and (=> (= (ControlFlow 0 163) 161) anon126_Then_correct) (=> (= (ControlFlow 0 163) 162) anon126_Else_correct)))))
(let ((anon125_Else_correct  (=> (not (and (and (and b_1_1@4 b_2_1@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@3 Ops_1Mask@1) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 158) 157) anon128_Then_correct) (=> (= (ControlFlow 0 158) 152) anon128_Else_correct))))))
(let ((anon124_Then_correct  (=> b_1_1@4 (=> (and (and (|Cell#trigger| Ops_1Heap@0 (Cell x@@14)) (= (MapType0Select Ops_1Heap@0 null (Cell x@@14)) (CombineFrames (FrameFragment (MapType0Select Ops_1Heap@0 x@@14 b_2)) (CombineFrames (FrameFragment (MapType0Select Ops_1Heap@0 x@@14 f_7)) (FrameFragment (ite (U_2_bool (MapType0Select Ops_1Heap@0 x@@14 b_2)) (MapType0Select Ops_1Heap@0 null (Cell (MapType0Select Ops_1Heap@0 x@@14 f_7))) EmptyFrame)))))) (and (= b_2_1@0  (and b_2_1 (state Used_1Heap@0 ZeroMask))) (= initNeededTransfer@0 (+ (U_2_real (MapType1Select ZeroMask null (Cell x@@14))) FullPerm)))) (and (=> (= (ControlFlow 0 164) (- 0 165)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 164) 163) anon125_Then_correct) (=> (= (ControlFlow 0 164) 158) anon125_Else_correct))))))))
(let ((anon124_Else_correct  (=> (not b_1_1@4) (=> (and (and (= Mask@2 ZeroMask) (= Ops_1Mask@8 Ops_1Mask@1)) (and (= Heap@2 Heap@@10) (= b_1_1@17 b_1_1@4))) (and (=> (= (ControlFlow 0 146) 145) anon132_Then_correct) (=> (= (ControlFlow 0 146) 107) anon132_Else_correct))))))
(let ((anon2_correct  (=> (and (= b_1_1@3  (and b_1_1@2 (state Ops_1Heap@0 Ops_1Mask@1))) (= b_1_1@4  (and b_1_1@3 (state Ops_1Heap@0 Ops_1Mask@1)))) (and (=> (= (ControlFlow 0 166) 164) anon124_Then_correct) (=> (= (ControlFlow 0 166) 146) anon124_Else_correct)))))
(let ((anon123_Else_correct  (=> (and (and (not b_1_1@0) (= Ops_1Mask@1 ZeroMask)) (and (= b_1_1@2 b_1_1@0) (= (ControlFlow 0 168) 166))) anon2_correct)))
(let ((anon123_Then_correct  (=> (and b_1_1@0 (= Ops_1Mask@0 (MapType1Store ZeroMask null (Cell x@@14) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Cell x@@14))) FullPerm))))) (=> (and (and (= b_1_1@1  (and b_1_1@0 (state Ops_1Heap@0 Ops_1Mask@0))) (= Ops_1Mask@1 Ops_1Mask@0)) (and (= b_1_1@2 b_1_1@1) (= (ControlFlow 0 167) 166))) anon2_correct))))
(let ((anon0_correct  (=> (and (and (state Heap@@10 ZeroMask) (U_2_bool (MapType0Select Heap@@10 x@@14 $allocated))) (and (= b_1_1@0  (and b_1_1 (state Ops_1Heap@0 ZeroMask))) (= b_3@0  (and b_3 (state UsedHeap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 169) 167) anon123_Then_correct) (=> (= (ControlFlow 0 169) 168) anon123_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 170) 169) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
