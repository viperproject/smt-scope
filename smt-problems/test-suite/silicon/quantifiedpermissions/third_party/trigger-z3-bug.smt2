(get-info :version)
; (:version "4.8.7")
; Started: 2024-11-17 20:24:09
; Silicon.version: 1.1-SNAPSHOT (4d756c79+)
; Input file: /silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<$Ref> 0)
(declare-sort Seq<Int> 0)
(declare-sort Set<Seq<$Ref>> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort $FVF<src> 0)
(declare-sort $FVF<Integer_value> 0)
(declare-sort $FVF<dst> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Seq<$Ref>>To$Snap (Set<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<$Ref>> ($Snap) Set<Seq<$Ref>>)
(assert (forall ((x Set<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<$Ref>>($SortWrappers.Set<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<$Ref>>To$Snap($SortWrappers.$SnapToSet<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<$Ref>> x))
    :qid |$Snap.Set<Seq<$Ref>>To$SnapToSet<Seq<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<src>To$Snap ($FVF<src>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<src> ($Snap) $FVF<src>)
(assert (forall ((x $FVF<src>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<src>($SortWrappers.$FVF<src>To$Snap x)))
    :pattern (($SortWrappers.$FVF<src>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<src>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<src>To$Snap($SortWrappers.$SnapTo$FVF<src> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<src> x))
    :qid |$Snap.$FVF<src>To$SnapTo$FVF<src>|
    )))
(declare-fun $SortWrappers.$FVF<Integer_value>To$Snap ($FVF<Integer_value>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Integer_value> ($Snap) $FVF<Integer_value>)
(assert (forall ((x $FVF<Integer_value>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Integer_value>($SortWrappers.$FVF<Integer_value>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Integer_value>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Integer_value>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Integer_value>To$Snap($SortWrappers.$SnapTo$FVF<Integer_value> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Integer_value> x))
    :qid |$Snap.$FVF<Integer_value>To$SnapTo$FVF<Integer_value>|
    )))
(declare-fun $SortWrappers.$FVF<dst>To$Snap ($FVF<dst>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<dst> ($Snap) $FVF<dst>)
(assert (forall ((x $FVF<dst>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<dst>($SortWrappers.$FVF<dst>To$Snap x)))
    :pattern (($SortWrappers.$FVF<dst>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<dst>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<dst>To$Snap($SortWrappers.$SnapTo$FVF<dst> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<dst> x))
    :qid |$Snap.$FVF<dst>To$SnapTo$FVF<dst>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<Seq<$Ref>>) Int)
(declare-const Set_empty Set<Seq<$Ref>>)
(declare-fun Set_in (Seq<$Ref> Set<Seq<$Ref>>) Bool)
(declare-fun Set_singleton (Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_unionone (Set<Seq<$Ref>> Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_union (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_intersection (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_difference (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_subset (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_equal (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Seq<$Ref>> Set<Seq<$Ref>>) Seq<$Ref>)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
; /field_value_functions_declarations.smt2 [src: Seq[Ref]]
(declare-fun $FVF.domain_src ($FVF<src>) Set<$Ref>)
(declare-fun $FVF.lookup_src ($FVF<src> $Ref) Seq<$Ref>)
(declare-fun $FVF.after_src ($FVF<src> $FVF<src>) Bool)
(declare-fun $FVF.loc_src (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_src ($FPM $Ref) $Perm)
(declare-const $fvfTOP_src $FVF<src>)
; /field_value_functions_declarations.smt2 [Integer_value: Int]
(declare-fun $FVF.domain_Integer_value ($FVF<Integer_value>) Set<$Ref>)
(declare-fun $FVF.lookup_Integer_value ($FVF<Integer_value> $Ref) Int)
(declare-fun $FVF.after_Integer_value ($FVF<Integer_value> $FVF<Integer_value>) Bool)
(declare-fun $FVF.loc_Integer_value (Int $Ref) Bool)
(declare-fun $FVF.perm_Integer_value ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Integer_value $FVF<Integer_value>)
; /field_value_functions_declarations.smt2 [dst: Seq[Ref]]
(declare-fun $FVF.domain_dst ($FVF<dst>) Set<$Ref>)
(declare-fun $FVF.lookup_dst ($FVF<dst> $Ref) Seq<$Ref>)
(declare-fun $FVF.after_dst ($FVF<dst> $FVF<dst>) Bool)
(declare-fun $FVF.loc_dst (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_dst ($FPM $Ref) $Perm)
(declare-const $fvfTOP_dst $FVF<dst>)
; Declaring symbols related to program functions (from program analysis)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Seq<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Seq<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Seq<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
; /field_value_functions_axioms.smt2 [src: Seq[Ref]]
(assert (forall ((vs $FVF<src>) (ws $FVF<src>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_src vs) ($FVF.domain_src ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_src vs))
            (= ($FVF.lookup_src vs x) ($FVF.lookup_src ws x)))
          :pattern (($FVF.lookup_src vs x) ($FVF.lookup_src ws x))
          :qid |qp.$FVF<src>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<src>To$Snap vs)
              ($SortWrappers.$FVF<src>To$Snap ws)
              )
    :qid |qp.$FVF<src>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_src pm r))
    :pattern (($FVF.perm_src pm r)))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc_src f r) true)
    :pattern (($FVF.loc_src f r)))))
; /field_value_functions_axioms.smt2 [Integer_value: Int]
(assert (forall ((vs $FVF<Integer_value>) (ws $FVF<Integer_value>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Integer_value vs) ($FVF.domain_Integer_value ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Integer_value vs))
            (= ($FVF.lookup_Integer_value vs x) ($FVF.lookup_Integer_value ws x)))
          :pattern (($FVF.lookup_Integer_value vs x) ($FVF.lookup_Integer_value ws x))
          :qid |qp.$FVF<Integer_value>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Integer_value>To$Snap vs)
              ($SortWrappers.$FVF<Integer_value>To$Snap ws)
              )
    :qid |qp.$FVF<Integer_value>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Integer_value pm r))
    :pattern (($FVF.perm_Integer_value pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_Integer_value f r) true)
    :pattern (($FVF.loc_Integer_value f r)))))
; /field_value_functions_axioms.smt2 [dst: Seq[Ref]]
(assert (forall ((vs $FVF<dst>) (ws $FVF<dst>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_dst vs) ($FVF.domain_dst ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_dst vs))
            (= ($FVF.lookup_dst vs x) ($FVF.lookup_dst ws x)))
          :pattern (($FVF.lookup_dst vs x) ($FVF.lookup_dst ws x))
          :qid |qp.$FVF<dst>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<dst>To$Snap vs)
              ($SortWrappers.$FVF<dst>To$Snap ws)
              )
    :qid |qp.$FVF<dst>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_dst pm r))
    :pattern (($FVF.perm_dst pm r)))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc_dst f r) true)
    :pattern (($FVF.loc_dst f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- main_main ----------
(declare-const this@0@01 $Ref)
(declare-const tcount@1@01 Int)
(declare-const gsize@2@01 Int)
(declare-const tid@3@01 Int)
(declare-const gid@4@01 Int)
(declare-const lid@5@01 Int)
(declare-const this@6@01 $Ref)
(declare-const tcount@7@01 Int)
(declare-const gsize@8@01 Int)
(declare-const tid@9@01 Int)
(declare-const gid@10@01 Int)
(declare-const lid@11@01 Int)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 ($Snap.combine ($Snap.first $t@12@01) ($Snap.second $t@12@01))))
(assert (= ($Snap.first $t@12@01) $Snap.unit))
; [eval] 0 <= tid
(assert (<= 0 tid@9@01))
(assert (=
  ($Snap.second $t@12@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@12@01))
    ($Snap.second ($Snap.second $t@12@01)))))
(assert (= ($Snap.first ($Snap.second $t@12@01)) $Snap.unit))
; [eval] tid < tcount
(assert (< tid@9@01 tcount@7@01))
(assert (=
  ($Snap.second ($Snap.second $t@12@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@12@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@12@01))) $Snap.unit))
; [eval] tid == lid
(assert (= tid@9@01 lid@11@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@12@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (= tcount@7@01 gsize@8@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (= gid@10@01 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
(declare-const $k@13@01 $Perm)
(assert ($Perm.isReadVar $k@13@01))
(assert (<= $Perm.No $k@13@01))
(assert (<= $k@13@01 $Perm.Write))
(assert (=> (< $Perm.No $k@13@01) (not (= this@6@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  gsize@8@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
(declare-const $k@14@01 $Perm)
(assert ($Perm.isReadVar $k@14@01))
(assert (<= $Perm.No $k@14@01))
(assert (<= $k@14@01 $Perm.Write))
(assert (=> (< $Perm.No $k@14@01) (not (= this@6@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@14@01)))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
  gsize@8@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (<= 4 gsize@8@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (= (mod gsize@8@01 4) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@15@01 Int)
(declare-const jx@16@01 Int)
(set-option :timeout 0)
(push) ; 2
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 3
; [then-branch: 0 | !(ix@15@01 >= 0) | live]
; [else-branch: 0 | ix@15@01 >= 0 | live]
(push) ; 4
; [then-branch: 0 | !(ix@15@01 >= 0)]
(assert (not (>= ix@15@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | ix@15@01 >= 0]
(assert (>= ix@15@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1 | !(ix@15@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|) | live]
; [else-branch: 1 | ix@15@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| | live]
(push) ; 6
; [then-branch: 1 | !(ix@15@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|)]
(assert (not
  (<
    ix@15@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 1 | ix@15@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|]
(assert (<
  ix@15@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
; [eval] jx >= 0
(push) ; 7
; [then-branch: 2 | !(jx@16@01 >= 0) | live]
; [else-branch: 2 | jx@16@01 >= 0 | live]
(push) ; 8
; [then-branch: 2 | !(jx@16@01 >= 0)]
(assert (not (>= jx@16@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 2 | jx@16@01 >= 0]
(assert (>= jx@16@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 3 | !(jx@16@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|) | live]
; [else-branch: 3 | jx@16@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| | live]
(push) ; 10
; [then-branch: 3 | !(jx@16@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|)]
(assert (not
  (<
    jx@16@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 3 | jx@16@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|]
(assert (<
  jx@16@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
; [eval] ix != jx
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@16@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
  (not
    (<
      jx@16@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@16@01 0)
  (and
    (>= jx@16@01 0)
    (or
      (<
        jx@16@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (not
        (<
          jx@16@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))))
(assert (or (>= jx@16@01 0) (not (>= jx@16@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@15@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
  (and
    (<
      ix@15@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    (=>
      (>= jx@16@01 0)
      (and
        (>= jx@16@01 0)
        (or
          (<
            jx@16@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (not
            (<
              jx@16@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
    (or (>= jx@16@01 0) (not (>= jx@16@01 0))))))
(assert (or
  (<
    ix@15@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
  (not
    (<
      ix@15@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@15@01 0)
  (and
    (>= ix@15@01 0)
    (=>
      (<
        ix@15@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (and
        (<
          ix@15@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (=>
          (>= jx@16@01 0)
          (and
            (>= jx@16@01 0)
            (or
              (<
                jx@16@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
              (not
                (<
                  jx@16@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
        (or (>= jx@16@01 0) (not (>= jx@16@01 0)))))
    (or
      (<
        ix@15@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (not
        (<
          ix@15@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))))
(assert (or (>= ix@15@01 0) (not (>= ix@15@01 0))))
(push) ; 3
; [then-branch: 4 | ix@15@01 >= 0 && ix@15@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && jx@16@01 >= 0 && jx@16@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && ix@15@01 != jx@16@01 | live]
; [else-branch: 4 | !(ix@15@01 >= 0 && ix@15@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && jx@16@01 >= 0 && jx@16@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && ix@15@01 != jx@16@01) | live]
(push) ; 4
; [then-branch: 4 | ix@15@01 >= 0 && ix@15@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && jx@16@01 >= 0 && jx@16@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && ix@15@01 != jx@16@01]
(assert (and
  (>= ix@15@01 0)
  (and
    (<
      ix@15@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    (and
      (>= jx@16@01 0)
      (and
        (<
          jx@16@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (not (= ix@15@01 jx@16@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 4 | !(ix@15@01 >= 0 && ix@15@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && jx@16@01 >= 0 && jx@16@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && ix@15@01 != jx@16@01)]
(assert (not
  (and
    (>= ix@15@01 0)
    (and
      (<
        ix@15@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (and
        (>= jx@16@01 0)
        (and
          (<
            jx@16@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (not (= ix@15@01 jx@16@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= ix@15@01 0)
    (and
      (<
        ix@15@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (and
        (>= jx@16@01 0)
        (and
          (<
            jx@16@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (not (= ix@15@01 jx@16@01))))))
  (and
    (>= ix@15@01 0)
    (<
      ix@15@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    (>= jx@16@01 0)
    (<
      jx@16@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    (not (= ix@15@01 jx@16@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@15@01 0)
      (and
        (<
          ix@15@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (and
          (>= jx@16@01 0)
          (and
            (<
              jx@16@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            (not (= ix@15@01 jx@16@01)))))))
  (and
    (>= ix@15@01 0)
    (and
      (<
        ix@15@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (and
        (>= jx@16@01 0)
        (and
          (<
            jx@16@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (not (= ix@15@01 jx@16@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@15@01 Int) (jx@16@01 Int)) (!
  (and
    (=>
      (>= ix@15@01 0)
      (and
        (>= ix@15@01 0)
        (=>
          (<
            ix@15@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (and
            (<
              ix@15@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            (=>
              (>= jx@16@01 0)
              (and
                (>= jx@16@01 0)
                (or
                  (<
                    jx@16@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
                  (not
                    (<
                      jx@16@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
            (or (>= jx@16@01 0) (not (>= jx@16@01 0)))))
        (or
          (<
            ix@15@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (not
            (<
              ix@15@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
    (or (>= ix@15@01 0) (not (>= ix@15@01 0)))
    (=>
      (and
        (>= ix@15@01 0)
        (and
          (<
            ix@15@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (and
            (>= jx@16@01 0)
            (and
              (<
                jx@16@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
              (not (= ix@15@01 jx@16@01))))))
      (and
        (>= ix@15@01 0)
        (<
          ix@15@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (>= jx@16@01 0)
        (<
          jx@16@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (not (= ix@15@01 jx@16@01))))
    (or
      (not
        (and
          (>= ix@15@01 0)
          (and
            (<
              ix@15@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            (and
              (>= jx@16@01 0)
              (and
                (<
                  jx@16@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
                (not (= ix@15@01 jx@16@01)))))))
      (and
        (>= ix@15@01 0)
        (and
          (<
            ix@15@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (and
            (>= jx@16@01 0)
            (and
              (<
                jx@16@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
              (not (= ix@15@01 jx@16@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    ix@15@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    jx@16@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@26@12@26@140-aux|)))
(assert (forall ((ix@15@01 Int) (jx@16@01 Int)) (!
  (=>
    (and
      (>= ix@15@01 0)
      (and
        (<
          ix@15@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (and
          (>= jx@16@01 0)
          (and
            (<
              jx@16@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            (not (= ix@15@01 jx@16@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          ix@15@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          jx@16@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    ix@15@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    jx@16@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@26@12@26@140|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))))))
(declare-const i@17@01 Int)
(push) ; 2
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@8@01) i@17@01))
; [eval] this.src[i]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= i@17@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  i@17@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not (= gsize@8@01 0))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@18@01 ($Ref) Int)
(declare-fun img@19@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 2
(assert (not (forall ((i@17@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@8@01) i@17@01)
    (or
      (= (/ (to_real 1) (to_real gsize@8@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))))
  
  :qid |quant-u-0|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@17@01 Int) (i2@17@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) i1@17@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) i2@17@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          i1@17@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          i2@17@01)))
    (= i1@17@01 i2@17@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@17@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@8@01) i@17@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
    (and
      (=
        (inv@18@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          i@17@01))
        i@17@01)
      (img@19@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
        i@17@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    i@17@01))
  :qid |quant-u-1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) (inv@18@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
        (inv@18@01 r))
      r))
  :pattern ((inv@18@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@17@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    i@17@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@17@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@8@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    i@17@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@17@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@8@01) i@17@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          i@17@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    i@17@01))
  :qid |Integer_value-permImpliesNonNull|)))
; [eval] this.dst[tid]
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@14@01)))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(assert (not (>= tid@9@01 0)))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (<
  tid@9@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(declare-const sm@20@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@20@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    tid@9@01))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      tid@9@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      tid@9@01))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01)
      $Ref.null))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@21@01 $Snap)
(assert (= $t@21@01 ($Snap.combine ($Snap.first $t@21@01) ($Snap.second $t@21@01))))
(assert (= ($Snap.first $t@21@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@21@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@21@01))
    ($Snap.second ($Snap.second $t@21@01)))))
(assert (= ($Snap.first ($Snap.second $t@21@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@21@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@21@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@21@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@21@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
(declare-const $k@22@01 $Perm)
(assert ($Perm.isReadVar $k@22@01))
(assert (<= $Perm.No $k@22@01))
(assert (<= $k@22@01 $Perm.Write))
(assert (=> (< $Perm.No $k@22@01) (not (= this@6@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@22@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
  gsize@8@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
(declare-const $k@23@01 $Perm)
(assert ($Perm.isReadVar $k@23@01))
(assert (<= $Perm.No $k@23@01))
(assert (<= $k@23@01 $Perm.Write))
(assert (=> (< $Perm.No $k@23@01) (not (= this@6@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
  gsize@8@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@24@01 Int)
(declare-const jx@25@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 4
; [then-branch: 5 | !(ix@24@01 >= 0) | live]
; [else-branch: 5 | ix@24@01 >= 0 | live]
(push) ; 5
; [then-branch: 5 | !(ix@24@01 >= 0)]
(assert (not (>= ix@24@01 0)))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | ix@24@01 >= 0]
(assert (>= ix@24@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@22@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 6 | !(ix@24@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))|) | live]
; [else-branch: 6 | ix@24@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))| | live]
(push) ; 7
; [then-branch: 6 | !(ix@24@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))|)]
(assert (not
  (<
    ix@24@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | ix@24@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))|]
(assert (<
  ix@24@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
; [eval] jx >= 0
(push) ; 8
; [then-branch: 7 | !(jx@25@01 >= 0) | live]
; [else-branch: 7 | jx@25@01 >= 0 | live]
(push) ; 9
; [then-branch: 7 | !(jx@25@01 >= 0)]
(assert (not (>= jx@25@01 0)))
(pop) ; 9
(push) ; 9
; [else-branch: 7 | jx@25@01 >= 0]
(assert (>= jx@25@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@22@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [then-branch: 8 | !(jx@25@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))|) | live]
; [else-branch: 8 | jx@25@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))| | live]
(push) ; 11
; [then-branch: 8 | !(jx@25@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))|)]
(assert (not
  (<
    jx@25@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 8 | jx@25@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))|]
(assert (<
  jx@25@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))
; [eval] ix != jx
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@25@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
  (not
    (<
      jx@25@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@25@01 0)
  (and
    (>= jx@25@01 0)
    (or
      (<
        jx@25@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
      (not
        (<
          jx@25@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))
(assert (or (>= jx@25@01 0) (not (>= jx@25@01 0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@24@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
  (and
    (<
      ix@24@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
    (=>
      (>= jx@25@01 0)
      (and
        (>= jx@25@01 0)
        (or
          (<
            jx@25@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
          (not
            (<
              jx@25@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))
    (or (>= jx@25@01 0) (not (>= jx@25@01 0))))))
(assert (or
  (<
    ix@24@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
  (not
    (<
      ix@24@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@24@01 0)
  (and
    (>= ix@24@01 0)
    (=>
      (<
        ix@24@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
      (and
        (<
          ix@24@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        (=>
          (>= jx@25@01 0)
          (and
            (>= jx@25@01 0)
            (or
              (<
                jx@25@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
              (not
                (<
                  jx@25@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))
        (or (>= jx@25@01 0) (not (>= jx@25@01 0)))))
    (or
      (<
        ix@24@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
      (not
        (<
          ix@24@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))
(assert (or (>= ix@24@01 0) (not (>= ix@24@01 0))))
(push) ; 4
; [then-branch: 9 | ix@24@01 >= 0 && ix@24@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))| && jx@25@01 >= 0 && jx@25@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))| && ix@24@01 != jx@25@01 | live]
; [else-branch: 9 | !(ix@24@01 >= 0 && ix@24@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))| && jx@25@01 >= 0 && jx@25@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))| && ix@24@01 != jx@25@01) | live]
(push) ; 5
; [then-branch: 9 | ix@24@01 >= 0 && ix@24@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))| && jx@25@01 >= 0 && jx@25@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))| && ix@24@01 != jx@25@01]
(assert (and
  (>= ix@24@01 0)
  (and
    (<
      ix@24@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
    (and
      (>= jx@25@01 0)
      (and
        (<
          jx@25@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        (not (= ix@24@01 jx@25@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@22@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@22@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 9 | !(ix@24@01 >= 0 && ix@24@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))| && jx@25@01 >= 0 && jx@25@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@21@01))))))| && ix@24@01 != jx@25@01)]
(assert (not
  (and
    (>= ix@24@01 0)
    (and
      (<
        ix@24@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
      (and
        (>= jx@25@01 0)
        (and
          (<
            jx@25@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
          (not (= ix@24@01 jx@25@01))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (>= ix@24@01 0)
    (and
      (<
        ix@24@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
      (and
        (>= jx@25@01 0)
        (and
          (<
            jx@25@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
          (not (= ix@24@01 jx@25@01))))))
  (and
    (>= ix@24@01 0)
    (<
      ix@24@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
    (>= jx@25@01 0)
    (<
      jx@25@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
    (not (= ix@24@01 jx@25@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@24@01 0)
      (and
        (<
          ix@24@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        (and
          (>= jx@25@01 0)
          (and
            (<
              jx@25@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
            (not (= ix@24@01 jx@25@01)))))))
  (and
    (>= ix@24@01 0)
    (and
      (<
        ix@24@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
      (and
        (>= jx@25@01 0)
        (and
          (<
            jx@25@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
          (not (= ix@24@01 jx@25@01))))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@24@01 Int) (jx@25@01 Int)) (!
  (and
    (=>
      (>= ix@24@01 0)
      (and
        (>= ix@24@01 0)
        (=>
          (<
            ix@24@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
          (and
            (<
              ix@24@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
            (=>
              (>= jx@25@01 0)
              (and
                (>= jx@25@01 0)
                (or
                  (<
                    jx@25@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
                  (not
                    (<
                      jx@25@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))
            (or (>= jx@25@01 0) (not (>= jx@25@01 0)))))
        (or
          (<
            ix@24@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
          (not
            (<
              ix@24@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))
    (or (>= ix@24@01 0) (not (>= ix@24@01 0)))
    (=>
      (and
        (>= ix@24@01 0)
        (and
          (<
            ix@24@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
          (and
            (>= jx@25@01 0)
            (and
              (<
                jx@25@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
              (not (= ix@24@01 jx@25@01))))))
      (and
        (>= ix@24@01 0)
        (<
          ix@24@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        (>= jx@25@01 0)
        (<
          jx@25@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        (not (= ix@24@01 jx@25@01))))
    (or
      (not
        (and
          (>= ix@24@01 0)
          (and
            (<
              ix@24@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
            (and
              (>= jx@25@01 0)
              (and
                (<
                  jx@25@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
                (not (= ix@24@01 jx@25@01)))))))
      (and
        (>= ix@24@01 0)
        (and
          (<
            ix@24@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
          (and
            (>= jx@25@01 0)
            (and
              (<
                jx@25@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
              (not (= ix@24@01 jx@25@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    ix@24@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    jx@25@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@40@11@40@139-aux|)))
(assert (forall ((ix@24@01 Int) (jx@25@01 Int)) (!
  (=>
    (and
      (>= ix@24@01 0)
      (and
        (<
          ix@24@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        (and
          (>= jx@25@01 0)
          (and
            (<
              jx@25@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
            (not (= ix@24@01 jx@25@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
          ix@24@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
          jx@25@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    ix@24@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    jx@25@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@40@11@40@139|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))))
(declare-const i@26@01 Int)
(push) ; 3
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@8@01) i@26@01))
; [eval] this.src[i]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@22@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= i@26@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  i@26@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (= gsize@8@01 0))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@27@01 ($Ref) Int)
(declare-fun img@28@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 3
(assert (not (forall ((i@26@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@8@01) i@26@01)
    (or
      (= (/ (to_real 1) (to_real gsize@8@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))))
  
  :qid |quant-u-2|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((i1@26@01 Int) (i2@26@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) i1@26@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) i2@26@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
          i1@26@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
          i2@26@01)))
    (= i1@26@01 i2@26@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@26@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@8@01) i@26@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
    (and
      (=
        (inv@27@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
          i@26@01))
        i@26@01)
      (img@28@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
        i@26@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    i@26@01))
  :qid |quant-u-3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@28@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) (inv@27@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
        (inv@27@01 r))
      r))
  :pattern ((inv@27@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@26@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    i@26@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@26@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@8@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    i@26@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@26@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@8@01) i@26@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
          i@26@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    i@26@01))
  :qid |Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))
  $Snap.unit))
; [eval] this.src == old(this.src)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@22@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.src)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))))
  $Snap.unit))
; [eval] this.dst == old(this.dst)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.dst)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@14@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))))))))
; [eval] tid == 0
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= tid@9@01 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= tid@9@01 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 10 | tid@9@01 == 0 | live]
; [else-branch: 10 | tid@9@01 != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 10 | tid@9@01 == 0]
(assert (= tid@9@01 0))
; [eval] this.dst[0]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(declare-const sm@29@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@29@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
    0))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        0))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        0))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
      0))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        0)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))))
  $Snap.unit))
; [eval] (tid == 0 ? (forall i: Int :: { this.src[i] } 0 <= i && i < tcount ==> this.dst[0].Integer_value >= this.src[i].Integer_value) : true)
; [eval] tid == 0
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= tid@9@01 0))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 11 | tid@9@01 == 0 | live]
; [else-branch: 11 | tid@9@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 11 | tid@9@01 == 0]
; [eval] (forall i: Int :: { this.src[i] } 0 <= i && i < tcount ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
(declare-const i@30@01 Int)
(push) ; 6
; [eval] 0 <= i && i < tcount ==> this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] 0 <= i && i < tcount
; [eval] 0 <= i
(push) ; 7
; [then-branch: 12 | !(0 <= i@30@01) | live]
; [else-branch: 12 | 0 <= i@30@01 | live]
(push) ; 8
; [then-branch: 12 | !(0 <= i@30@01)]
(assert (not (<= 0 i@30@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 12 | 0 <= i@30@01]
(assert (<= 0 i@30@01))
; [eval] i < tcount
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@30@01) (not (<= 0 i@30@01))))
(push) ; 7
; [then-branch: 13 | 0 <= i@30@01 && i@30@01 < tcount@7@01 | live]
; [else-branch: 13 | !(0 <= i@30@01 && i@30@01 < tcount@7@01) | live]
(push) ; 8
; [then-branch: 13 | 0 <= i@30@01 && i@30@01 < tcount@7@01]
(assert (and (<= 0 i@30@01) (< i@30@01 tcount@7@01)))
; [eval] this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] this.dst[0]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(declare-const sm@31@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@28@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@27@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@29@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@29@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef1|)))
(declare-const pm@32@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@32@01  $FPM) r)
    (+
      (ite
        (and (img@28@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@27@01 r)))
        (/ (to_real 1) (to_real gsize@8@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
            0))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@32@01  $FPM) r))
  :qid |qp.resPrmSumDef2|)))
(push) ; 9
(assert (not (<
  $Perm.No
  ($FVF.perm_Integer_value (as pm@32@01  $FPM) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
    0)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@22@01)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@30@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  i@30@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@28@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@27@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
          0))
      (=
        ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@29@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@29@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef1|))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@28@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
          i@30@01))
        (Seq_contains
          (Seq_range 0 gsize@8@01)
          (inv@27@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
            i@30@01))))
      (/ (to_real 1) (to_real gsize@8@01))
      $Perm.No)
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
          i@30@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
          0))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 13 | !(0 <= i@30@01 && i@30@01 < tcount@7@01)]
(assert (not (and (<= 0 i@30@01) (< i@30@01 tcount@7@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@28@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@27@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@29@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@29@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@32@01  $FPM) r)
    (+
      (ite
        (and (img@28@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@27@01 r)))
        (/ (to_real 1) (to_real gsize@8@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
            0))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@32@01  $FPM) r))
  :qid |qp.resPrmSumDef2|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 i@30@01) (< i@30@01 tcount@7@01)))
  (and (<= 0 i@30@01) (< i@30@01 tcount@7@01))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@28@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@27@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@29@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@29@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@32@01  $FPM) r)
    (+
      (ite
        (and (img@28@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@27@01 r)))
        (/ (to_real 1) (to_real gsize@8@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
            0))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@32@01  $FPM) r))
  :qid |qp.resPrmSumDef2|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@30@01 Int)) (!
  (and
    (or (<= 0 i@30@01) (not (<= 0 i@30@01)))
    (or
      (not (and (<= 0 i@30@01) (< i@30@01 tcount@7@01)))
      (and (<= 0 i@30@01) (< i@30@01 tcount@7@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    i@30@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@45@24@45@126-aux|)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@28@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@27@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))))))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@29@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@29@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@32@01  $FPM) r)
    (+
      (ite
        (and (img@28@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@27@01 r)))
        (/ (to_real 1) (to_real gsize@8@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
            0))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@32@01  $FPM) r))
  :qid |qp.resPrmSumDef2|)))
(assert (=>
  (= tid@9@01 0)
  (forall ((i@30@01 Int)) (!
    (and
      (or (<= 0 i@30@01) (not (<= 0 i@30@01)))
      (or
        (not (and (<= 0 i@30@01) (< i@30@01 tcount@7@01)))
        (and (<= 0 i@30@01) (< i@30@01 tcount@7@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
      i@30@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@45@24@45@126-aux|))))
(assert (forall ((i@30@01 Int)) (!
  (=>
    (and (<= 0 i@30@01) (< i@30@01 tcount@7@01))
    (>=
      ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))))
        0))
      ($FVF.lookup_Integer_value (as sm@31@01  $FVF<Integer_value>) (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
        i@30@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
    i@30@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@45@24@45@126|)))
(pop) ; 3
(push) ; 3
; [else-branch: 10 | tid@9@01 != 0]
(assert (not (= tid@9@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))))))))))
  $Snap.unit))
; [eval] (tid == 0 ? (forall i: Int :: { this.src[i] } 0 <= i && i < tcount ==> this.dst[0].Integer_value >= this.src[i].Integer_value) : true)
; [eval] tid == 0
(push) ; 4
; [then-branch: 14 | tid@9@01 == 0 | dead]
; [else-branch: 14 | tid@9@01 != 0 | live]
(push) ; 5
; [else-branch: 14 | tid@9@01 != 0]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var __last_barrier: Int
(declare-const __last_barrier@33@01 Int)
; [exec]
; var k: Int
(declare-const k@34@01 Int)
; [exec]
; var half: Int
(declare-const half@35@01 Int)
; [exec]
; var offset: Int
(declare-const offset@36@01 Int)
; [exec]
; __last_barrier := 0
; [exec]
; half := gsize / 2
; [eval] gsize / 2
(declare-const half@37@01 Int)
(assert (= half@37@01 (div gsize@8@01 2)))
; [exec]
; offset := (tid == 0 ? 0 : half)
; [eval] (tid == 0 ? 0 : half)
; [eval] tid == 0
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= tid@9@01 0))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= tid@9@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 15 | tid@9@01 == 0 | live]
; [else-branch: 15 | tid@9@01 != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 15 | tid@9@01 == 0]
(assert (= tid@9@01 0))
(pop) ; 4
(push) ; 4
; [else-branch: 15 | tid@9@01 != 0]
(assert (not (= tid@9@01 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= tid@9@01 0)) (= tid@9@01 0)))
(declare-const offset@38@01 Int)
(assert (= offset@38@01 (ite (= tid@9@01 0) 0 half@37@01)))
; [eval] tid < 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (< tid@9@01 2))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< tid@9@01 2)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 16 | tid@9@01 < 2 | live]
; [else-branch: 16 | !(tid@9@01 < 2) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 16 | tid@9@01 < 2]
(assert (< tid@9@01 2))
; [exec]
; this.dst[tid].Integer_value := this.src[tid].Integer_value
; [eval] this.dst[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@14@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@9@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@9@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@9@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@9@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(declare-const sm@39@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@19@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@18@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@39@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@39@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01))
    (=
      ($FVF.lookup_Integer_value (as sm@39@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@20@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@39@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@20@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef4|)))
(declare-const pm@40@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@40@01  $FPM) r)
    (+
      (ite
        (and (img@19@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@18@01 r)))
        (/ (to_real 1) (to_real gsize@8@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            tid@9@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@40@01  $FPM) r))
  :qid |qp.resPrmSumDef5|)))
(push) ; 4
(assert (not (<
  $Perm.No
  ($FVF.perm_Integer_value (as pm@40@01  $FPM) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    tid@9@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@41@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01))
    ($Perm.min
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            tid@9@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@42@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01))
    ($Perm.min
      (ite
        (and (img@19@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@18@01 r)))
        (/ (to_real 1) (to_real gsize@8@01))
        $Perm.No)
      (- $Perm.Write (pTaken@41@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          tid@9@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          tid@9@01))
      $Perm.Write
      $Perm.No)
    (pTaken@41@01 (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      tid@9@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01))
    (= (- $Perm.Write (pTaken@41@01 r)) $Perm.No))
  
  :qid |quant-u-6|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@43@01 $FVF<Integer_value>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@43@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    tid@9@01))
  ($FVF.lookup_Integer_value (as sm@39@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    tid@9@01))))
; [exec]
; k := 1
(declare-const k@44@01 Int)
(set-option :timeout 0)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 ($Snap.combine ($Snap.first $t@45@01) ($Snap.second $t@45@01))))
(assert (= ($Snap.first $t@45@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@45@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@45@01))
    ($Snap.second ($Snap.second $t@45@01)))))
(assert (= ($Snap.first ($Snap.second $t@45@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@45@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@45@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@45@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@45@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
(declare-const $k@46@01 $Perm)
(assert ($Perm.isReadVar $k@46@01))
(assert (<= $Perm.No $k@46@01))
(assert (<= $k@46@01 $Perm.Write))
(assert (=> (< $Perm.No $k@46@01) (not (= this@6@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
  gsize@8@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(declare-const $k@47@01 $Perm)
(assert ($Perm.isReadVar $k@47@01))
(assert (<= $Perm.No $k@47@01))
(assert (<= $k@47@01 $Perm.Write))
(assert (=> (< $Perm.No $k@47@01) (not (= this@6@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  gsize@8@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@48@01 Int)
(declare-const jx@49@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 6
; [then-branch: 17 | !(ix@48@01 >= 0) | live]
; [else-branch: 17 | ix@48@01 >= 0 | live]
(push) ; 7
; [then-branch: 17 | !(ix@48@01 >= 0)]
(assert (not (>= ix@48@01 0)))
(pop) ; 7
(push) ; 7
; [else-branch: 17 | ix@48@01 >= 0]
(assert (>= ix@48@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 18 | !(ix@48@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))|) | live]
; [else-branch: 18 | ix@48@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))| | live]
(push) ; 9
; [then-branch: 18 | !(ix@48@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))|)]
(assert (not
  (<
    ix@48@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 18 | ix@48@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))|]
(assert (<
  ix@48@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
; [eval] jx >= 0
(push) ; 10
; [then-branch: 19 | !(jx@49@01 >= 0) | live]
; [else-branch: 19 | jx@49@01 >= 0 | live]
(push) ; 11
; [then-branch: 19 | !(jx@49@01 >= 0)]
(assert (not (>= jx@49@01 0)))
(pop) ; 11
(push) ; 11
; [else-branch: 19 | jx@49@01 >= 0]
(assert (>= jx@49@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 20 | !(jx@49@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))|) | live]
; [else-branch: 20 | jx@49@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))| | live]
(push) ; 13
; [then-branch: 20 | !(jx@49@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))|)]
(assert (not
  (<
    jx@49@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(pop) ; 13
(push) ; 13
; [else-branch: 20 | jx@49@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))|]
(assert (<
  jx@49@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
; [eval] ix != jx
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@49@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  (not
    (<
      jx@49@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@49@01 0)
  (and
    (>= jx@49@01 0)
    (or
      (<
        jx@49@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      (not
        (<
          jx@49@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
(assert (or (>= jx@49@01 0) (not (>= jx@49@01 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@48@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  (and
    (<
      ix@48@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    (=>
      (>= jx@49@01 0)
      (and
        (>= jx@49@01 0)
        (or
          (<
            jx@49@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          (not
            (<
              jx@49@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
    (or (>= jx@49@01 0) (not (>= jx@49@01 0))))))
(assert (or
  (<
    ix@48@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  (not
    (<
      ix@48@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@48@01 0)
  (and
    (>= ix@48@01 0)
    (=>
      (<
        ix@48@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      (and
        (<
          ix@48@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        (=>
          (>= jx@49@01 0)
          (and
            (>= jx@49@01 0)
            (or
              (<
                jx@49@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
              (not
                (<
                  jx@49@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
        (or (>= jx@49@01 0) (not (>= jx@49@01 0)))))
    (or
      (<
        ix@48@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      (not
        (<
          ix@48@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
(assert (or (>= ix@48@01 0) (not (>= ix@48@01 0))))
(push) ; 6
; [then-branch: 21 | ix@48@01 >= 0 && ix@48@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))| && jx@49@01 >= 0 && jx@49@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))| && ix@48@01 != jx@49@01 | live]
; [else-branch: 21 | !(ix@48@01 >= 0 && ix@48@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))| && jx@49@01 >= 0 && jx@49@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))| && ix@48@01 != jx@49@01) | live]
(push) ; 7
; [then-branch: 21 | ix@48@01 >= 0 && ix@48@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))| && jx@49@01 >= 0 && jx@49@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))| && ix@48@01 != jx@49@01]
(assert (and
  (>= ix@48@01 0)
  (and
    (<
      ix@48@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    (and
      (>= jx@49@01 0)
      (and
        (<
          jx@49@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        (not (= ix@48@01 jx@49@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 21 | !(ix@48@01 >= 0 && ix@48@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))| && jx@49@01 >= 0 && jx@49@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@45@01))))))| && ix@48@01 != jx@49@01)]
(assert (not
  (and
    (>= ix@48@01 0)
    (and
      (<
        ix@48@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      (and
        (>= jx@49@01 0)
        (and
          (<
            jx@49@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          (not (= ix@48@01 jx@49@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>= ix@48@01 0)
    (and
      (<
        ix@48@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      (and
        (>= jx@49@01 0)
        (and
          (<
            jx@49@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          (not (= ix@48@01 jx@49@01))))))
  (and
    (>= ix@48@01 0)
    (<
      ix@48@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    (>= jx@49@01 0)
    (<
      jx@49@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    (not (= ix@48@01 jx@49@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@48@01 0)
      (and
        (<
          ix@48@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        (and
          (>= jx@49@01 0)
          (and
            (<
              jx@49@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
            (not (= ix@48@01 jx@49@01)))))))
  (and
    (>= ix@48@01 0)
    (and
      (<
        ix@48@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      (and
        (>= jx@49@01 0)
        (and
          (<
            jx@49@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          (not (= ix@48@01 jx@49@01))))))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@48@01 Int) (jx@49@01 Int)) (!
  (and
    (=>
      (>= ix@48@01 0)
      (and
        (>= ix@48@01 0)
        (=>
          (<
            ix@48@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          (and
            (<
              ix@48@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
            (=>
              (>= jx@49@01 0)
              (and
                (>= jx@49@01 0)
                (or
                  (<
                    jx@49@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
                  (not
                    (<
                      jx@49@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
            (or (>= jx@49@01 0) (not (>= jx@49@01 0)))))
        (or
          (<
            ix@48@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          (not
            (<
              ix@48@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
    (or (>= ix@48@01 0) (not (>= ix@48@01 0)))
    (=>
      (and
        (>= ix@48@01 0)
        (and
          (<
            ix@48@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          (and
            (>= jx@49@01 0)
            (and
              (<
                jx@49@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
              (not (= ix@48@01 jx@49@01))))))
      (and
        (>= ix@48@01 0)
        (<
          ix@48@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        (>= jx@49@01 0)
        (<
          jx@49@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        (not (= ix@48@01 jx@49@01))))
    (or
      (not
        (and
          (>= ix@48@01 0)
          (and
            (<
              ix@48@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
            (and
              (>= jx@49@01 0)
              (and
                (<
                  jx@49@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
                (not (= ix@48@01 jx@49@01)))))))
      (and
        (>= ix@48@01 0)
        (and
          (<
            ix@48@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          (and
            (>= jx@49@01 0)
            (and
              (<
                jx@49@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
              (not (= ix@48@01 jx@49@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    ix@48@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    jx@49@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@69@17@69@145-aux|)))
(assert (forall ((ix@48@01 Int) (jx@49@01 Int)) (!
  (=>
    (and
      (>= ix@48@01 0)
      (and
        (<
          ix@48@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        (and
          (>= jx@49@01 0)
          (and
            (<
              jx@49@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
            (not (= ix@48@01 jx@49@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
          ix@48@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
          jx@49@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    ix@48@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    jx@49@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@69@17@69@145|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
(declare-const i@50@01 Int)
(push) ; 5
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@8@01) i@50@01))
; [eval] this.src[i]
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@50@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  i@50@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= gsize@8@01 0))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(declare-fun inv@51@01 ($Ref) Int)
(declare-fun img@52@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 5
(assert (not (forall ((i@50@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@8@01) i@50@01)
    (or
      (= (/ (to_real 1) (to_real gsize@8@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))))
  
  :qid |quant-u-7|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((i1@50@01 Int) (i2@50@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) i1@50@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) i2@50@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
          i1@50@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
          i2@50@01)))
    (= i1@50@01 i2@50@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@50@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@8@01) i@50@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
    (and
      (=
        (inv@51@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
          i@50@01))
        i@50@01)
      (img@52@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
        i@50@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    i@50@01))
  :qid |quant-u-8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@52@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) (inv@51@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
        (inv@51@01 r))
      r))
  :pattern ((inv@51@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@50@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    i@50@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@50@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@8@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    i@50@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@50@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@8@01) i@50@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
          i@50@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    i@50@01))
  :qid |Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
  $Snap.unit))
; [eval] false || __last_barrier == 0
(push) ; 5
; [then-branch: 22 | False | live]
; [else-branch: 22 | True | live]
(push) ; 6
; [then-branch: 22 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 22 | True]
; [eval] __last_barrier == 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))))
; [eval] __last_barrier == 1
; [then-branch: 23 | False | dead]
; [else-branch: 23 | True | live]
(push) ; 5
; [else-branch: 23 | True]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))))
; [eval] __last_barrier == 0
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 24 | True | live]
; [else-branch: 24 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 24 | True]
; [eval] this.dst[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@9@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@9@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(declare-const sm@53@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@53@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@9@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        tid@9@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        tid@9@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        tid@9@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        tid@9@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      tid@9@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      tid@9@01))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        tid@9@01)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 < k
(assert (< 0 k@44@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))))
  $Snap.unit))
; [eval] k <= half
(assert (<= k@44@01 half@37@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))))))))
; [eval] this.dst[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@9@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@9@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(declare-const sm@54@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@54@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@9@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))))))))
(declare-const $t@55@01 $FVF<Integer_value>)
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          tid@9@01))
      (=
        ($FVF.lookup_Integer_value $t@55@01 r)
        ($FVF.lookup_Integer_value (as sm@53@01  $FVF<Integer_value>) r)))
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          tid@9@01))
      (=
        ($FVF.lookup_Integer_value $t@55@01 r)
        ($FVF.lookup_Integer_value (as sm@54@01  $FVF<Integer_value>) r))))
  :pattern (($FVF.lookup_Integer_value (as sm@53@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@54@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value $t@55@01 r))
  :qid |quant-u-9|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))))
  $Snap.unit))
; [eval] (forall i: Int ::0 <= i && i < k ==> this.dst[tid].Integer_value >= this.src[tid * half + i].Integer_value)
(declare-const i@56@01 Int)
(push) ; 7
; [eval] 0 <= i && i < k ==> this.dst[tid].Integer_value >= this.src[tid * half + i].Integer_value
; [eval] 0 <= i && i < k
; [eval] 0 <= i
(push) ; 8
; [then-branch: 25 | !(0 <= i@56@01) | live]
; [else-branch: 25 | 0 <= i@56@01 | live]
(push) ; 9
; [then-branch: 25 | !(0 <= i@56@01)]
(assert (not (<= 0 i@56@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 25 | 0 <= i@56@01]
(assert (<= 0 i@56@01))
; [eval] i < k
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@56@01) (not (<= 0 i@56@01))))
(push) ; 8
; [then-branch: 26 | 0 <= i@56@01 && i@56@01 < k@44@01 | live]
; [else-branch: 26 | !(0 <= i@56@01 && i@56@01 < k@44@01) | live]
(push) ; 9
; [then-branch: 26 | 0 <= i@56@01 && i@56@01 < k@44@01]
(assert (and (<= 0 i@56@01) (< i@56@01 k@44@01)))
; [eval] this.dst[tid].Integer_value >= this.src[tid * half + i].Integer_value
; [eval] this.dst[tid]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= tid@9@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  tid@9@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(declare-const sm@57@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@52@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@51@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        tid@9@01))
    (=
      ($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value $t@55@01 r)))
  :pattern (($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value $t@55@01 r))
  :qid |qp.fvfValDef7|)))
(declare-const pm@58@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@58@01  $FPM) r)
    (+
      (ite
        (and (img@52@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@51@01 r)))
        (/ (to_real 1) (to_real gsize@8@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
            tid@9@01))
        (/ (to_real 2) (to_real 1))
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@58@01  $FPM) r))
  :qid |qp.resPrmSumDef8|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_Integer_value (as pm@58@01  $FPM) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@9@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[tid * half + i]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [eval] tid * half + i
; [eval] tid * half
(set-option :timeout 0)
(push) ; 10
(assert (not (>= (+ (* tid@9@01 half@37@01) i@56@01) 0)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (+ (* tid@9@01 half@37@01) i@56@01)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@52@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@51@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          tid@9@01))
      (=
        ($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value $t@55@01 r)))
    :pattern (($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value $t@55@01 r))
    :qid |qp.fvfValDef7|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@52@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
          (+ (* tid@9@01 half@37@01) i@56@01)))
        (Seq_contains
          (Seq_range 0 gsize@8@01)
          (inv@51@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
            (+ (* tid@9@01 half@37@01) i@56@01)))))
      (/ (to_real 1) (to_real gsize@8@01))
      $Perm.No)
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
          (+ (* tid@9@01 half@37@01) i@56@01))
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
          tid@9@01))
      (/ (to_real 2) (to_real 1))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 26 | !(0 <= i@56@01 && i@56@01 < k@44@01)]
(assert (not (and (<= 0 i@56@01) (< i@56@01 k@44@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@52@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@51@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        tid@9@01))
    (=
      ($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value $t@55@01 r)))
  :pattern (($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value $t@55@01 r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@58@01  $FPM) r)
    (+
      (ite
        (and (img@52@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@51@01 r)))
        (/ (to_real 1) (to_real gsize@8@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
            tid@9@01))
        (/ (to_real 2) (to_real 1))
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@58@01  $FPM) r))
  :qid |qp.resPrmSumDef8|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 i@56@01) (< i@56@01 k@44@01)))
  (and (<= 0 i@56@01) (< i@56@01 k@44@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@52@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@51@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        tid@9@01))
    (=
      ($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value $t@55@01 r)))
  :pattern (($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value $t@55@01 r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@58@01  $FPM) r)
    (+
      (ite
        (and (img@52@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@51@01 r)))
        (/ (to_real 1) (to_real gsize@8@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
            tid@9@01))
        (/ (to_real 2) (to_real 1))
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@58@01  $FPM) r))
  :qid |qp.resPrmSumDef8|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@56@01 Int)) (!
  (=>
    (and (<= 0 i@56@01) (< i@56@01 k@44@01))
    (>=
      ($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
        tid@9@01))
      ($FVF.lookup_Integer_value (as sm@57@01  $FVF<Integer_value>) (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
        (+ (* tid@9@01 half@37@01) i@56@01)))))
  
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@77@18@77@130|)))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@59@01 $Perm)
(assert ($Perm.isReadVar $k@59@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@13@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (< $k@59@01 $k@13@01))
(assert (<= $Perm.No (- $k@13@01 $k@59@01)))
(assert (<= (- $k@13@01 $k@59@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@13@01 $k@59@01)) (not (= this@6@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@59@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] |this.src| == gsize
; [eval] |this.src|
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(declare-const $k@60@01 $Perm)
(assert ($Perm.isReadVar $k@60@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= $k@14@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (< $k@60@01 $k@14@01))
(assert (<= $Perm.No (- $k@14@01 $k@60@01)))
(assert (<= (- $k@14@01 $k@60@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@14@01 $k@60@01)) (not (= this@6@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@14@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] 4 <= gsize
; [eval] gsize % 4 == 0
; [eval] gsize % 4
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@61@01 Int)
(declare-const jx@62@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 6
; [then-branch: 27 | !(ix@61@01 >= 0) | live]
; [else-branch: 27 | ix@61@01 >= 0 | live]
(push) ; 7
; [then-branch: 27 | !(ix@61@01 >= 0)]
(assert (not (>= ix@61@01 0)))
(pop) ; 7
(push) ; 7
; [else-branch: 27 | ix@61@01 >= 0]
(assert (>= ix@61@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 28 | !(ix@61@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|) | live]
; [else-branch: 28 | ix@61@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| | live]
(push) ; 9
; [then-branch: 28 | !(ix@61@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|)]
(assert (not
  (<
    ix@61@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 28 | ix@61@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|]
(assert (<
  ix@61@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
; [eval] jx >= 0
(push) ; 10
; [then-branch: 29 | !(jx@62@01 >= 0) | live]
; [else-branch: 29 | jx@62@01 >= 0 | live]
(push) ; 11
; [then-branch: 29 | !(jx@62@01 >= 0)]
(assert (not (>= jx@62@01 0)))
(pop) ; 11
(push) ; 11
; [else-branch: 29 | jx@62@01 >= 0]
(assert (>= jx@62@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 30 | !(jx@62@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|) | live]
; [else-branch: 30 | jx@62@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| | live]
(push) ; 13
; [then-branch: 30 | !(jx@62@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|)]
(assert (not
  (<
    jx@62@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
(pop) ; 13
(push) ; 13
; [else-branch: 30 | jx@62@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))|]
(assert (<
  jx@62@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
; [eval] ix != jx
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@62@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
  (not
    (<
      jx@62@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@62@01 0)
  (and
    (>= jx@62@01 0)
    (or
      (<
        jx@62@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (not
        (<
          jx@62@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))))
(assert (or (>= jx@62@01 0) (not (>= jx@62@01 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@61@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
  (and
    (<
      ix@61@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    (=>
      (>= jx@62@01 0)
      (and
        (>= jx@62@01 0)
        (or
          (<
            jx@62@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (not
            (<
              jx@62@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
    (or (>= jx@62@01 0) (not (>= jx@62@01 0))))))
(assert (or
  (<
    ix@61@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
  (not
    (<
      ix@61@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@61@01 0)
  (and
    (>= ix@61@01 0)
    (=>
      (<
        ix@61@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (and
        (<
          ix@61@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (=>
          (>= jx@62@01 0)
          (and
            (>= jx@62@01 0)
            (or
              (<
                jx@62@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
              (not
                (<
                  jx@62@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
        (or (>= jx@62@01 0) (not (>= jx@62@01 0)))))
    (or
      (<
        ix@61@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (not
        (<
          ix@61@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))))
(assert (or (>= ix@61@01 0) (not (>= ix@61@01 0))))
(push) ; 6
; [then-branch: 31 | ix@61@01 >= 0 && ix@61@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && jx@62@01 >= 0 && jx@62@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && ix@61@01 != jx@62@01 | live]
; [else-branch: 31 | !(ix@61@01 >= 0 && ix@61@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && jx@62@01 >= 0 && jx@62@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && ix@61@01 != jx@62@01) | live]
(push) ; 7
; [then-branch: 31 | ix@61@01 >= 0 && ix@61@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && jx@62@01 >= 0 && jx@62@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && ix@61@01 != jx@62@01]
(assert (and
  (>= ix@61@01 0)
  (and
    (<
      ix@61@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    (and
      (>= jx@62@01 0)
      (and
        (<
          jx@62@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (not (= ix@61@01 jx@62@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 31 | !(ix@61@01 >= 0 && ix@61@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && jx@62@01 >= 0 && jx@62@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@12@01))))))| && ix@61@01 != jx@62@01)]
(assert (not
  (and
    (>= ix@61@01 0)
    (and
      (<
        ix@61@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (and
        (>= jx@62@01 0)
        (and
          (<
            jx@62@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (not (= ix@61@01 jx@62@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>= ix@61@01 0)
    (and
      (<
        ix@61@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (and
        (>= jx@62@01 0)
        (and
          (<
            jx@62@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (not (= ix@61@01 jx@62@01))))))
  (and
    (>= ix@61@01 0)
    (<
      ix@61@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    (>= jx@62@01 0)
    (<
      jx@62@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    (not (= ix@61@01 jx@62@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@61@01 0)
      (and
        (<
          ix@61@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (and
          (>= jx@62@01 0)
          (and
            (<
              jx@62@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            (not (= ix@61@01 jx@62@01)))))))
  (and
    (>= ix@61@01 0)
    (and
      (<
        ix@61@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (and
        (>= jx@62@01 0)
        (and
          (<
            jx@62@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (not (= ix@61@01 jx@62@01))))))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@61@01 Int) (jx@62@01 Int)) (!
  (and
    (=>
      (>= ix@61@01 0)
      (and
        (>= ix@61@01 0)
        (=>
          (<
            ix@61@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (and
            (<
              ix@61@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            (=>
              (>= jx@62@01 0)
              (and
                (>= jx@62@01 0)
                (or
                  (<
                    jx@62@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
                  (not
                    (<
                      jx@62@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
            (or (>= jx@62@01 0) (not (>= jx@62@01 0)))))
        (or
          (<
            ix@61@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (not
            (<
              ix@61@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
    (or (>= ix@61@01 0) (not (>= ix@61@01 0)))
    (=>
      (and
        (>= ix@61@01 0)
        (and
          (<
            ix@61@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (and
            (>= jx@62@01 0)
            (and
              (<
                jx@62@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
              (not (= ix@61@01 jx@62@01))))))
      (and
        (>= ix@61@01 0)
        (<
          ix@61@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (>= jx@62@01 0)
        (<
          jx@62@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (not (= ix@61@01 jx@62@01))))
    (or
      (not
        (and
          (>= ix@61@01 0)
          (and
            (<
              ix@61@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            (and
              (>= jx@62@01 0)
              (and
                (<
                  jx@62@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
                (not (= ix@61@01 jx@62@01)))))))
      (and
        (>= ix@61@01 0)
        (and
          (<
            ix@61@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          (and
            (>= jx@62@01 0)
            (and
              (<
                jx@62@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
              (not (= ix@61@01 jx@62@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    ix@61@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    jx@62@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@69@17@69@145-aux|)))
(push) ; 5
(assert (not (forall ((ix@61@01 Int) (jx@62@01 Int)) (!
  (=>
    (and
      (>= ix@61@01 0)
      (and
        (<
          ix@61@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (and
          (>= jx@62@01 0)
          (and
            (<
              jx@62@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            (not (= ix@61@01 jx@62@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          ix@61@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          jx@62@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    ix@61@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    jx@62@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@69@17@69@145|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((ix@61@01 Int) (jx@62@01 Int)) (!
  (=>
    (and
      (>= ix@61@01 0)
      (and
        (<
          ix@61@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        (and
          (>= jx@62@01 0)
          (and
            (<
              jx@62@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            (not (= ix@61@01 jx@62@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          ix@61@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          jx@62@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    ix@61@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    jx@62@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@69@17@69@145|)))
(declare-const i@63@01 Int)
(push) ; 5
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@8@01) i@63@01))
(push) ; 6
(assert (not (not (= gsize@8@01 0))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@63@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  i@63@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(declare-fun inv@64@01 ($Ref) Int)
(declare-fun img@65@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 5
(assert (not (forall ((i@63@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@8@01) i@63@01)
    (or
      (= (/ (to_real 1) (to_real gsize@8@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))))
  
  :qid |quant-u-10|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((i1@63@01 Int) (i2@63@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) i1@63@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) i2@63@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          i1@63@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          i2@63@01)))
    (= i1@63@01 i2@63@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@63@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@8@01) i@63@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01))))
    (and
      (=
        (inv@64@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          i@63@01))
        i@63@01)
      (img@65@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
        i@63@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    i@63@01))
  :qid |Integer_value-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@65@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@8@01) (inv@64@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
        (inv@64@01 r))
      r))
  :pattern ((inv@64@01 r))
  :qid |Integer_value-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@66@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 gsize@8@01) (inv@64@01 r))
      (img@65@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (inv@64@01 r))))
    ($Perm.min
      (ite
        (and (img@19@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@18@01 r)))
        (/ (to_real 1) (to_real gsize@8@01))
        $Perm.No)
      (/ (to_real 1) (to_real gsize@8@01)))
    $Perm.No))
(define-fun pTaken@67@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 gsize@8@01) (inv@64@01 r))
      (img@65@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (inv@64@01 r))))
    ($Perm.min
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            tid@9@01))
        $Perm.Write
        $Perm.No)
      (- (/ (to_real 1) (to_real gsize@8@01)) (pTaken@66@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@19@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@18@01 r)))
        (/ (to_real 1) (to_real gsize@8@01))
        $Perm.No)
      (pTaken@66@01 r))
    $Perm.No)
  
  :qid |quant-u-12|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@8@01) (inv@64@01 r))
      (img@65@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (inv@64@01 r))))
    (= (- (/ (to_real 1) (to_real gsize@8@01)) (pTaken@66@01 r)) $Perm.No))
  
  :qid |quant-u-13|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@68@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01))
    (=
      ($FVF.lookup_Integer_value (as sm@68@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@43@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@68@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@43@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@19@01 r) (Seq_contains (Seq_range 0 gsize@8@01) (inv@18@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@8@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@68@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@68@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))) r))
  :qid |qp.fvfValDef10|)))
; [eval] false || __last_barrier == 0
(set-option :timeout 0)
(push) ; 5
; [then-branch: 32 | False | live]
; [else-branch: 32 | True | live]
(push) ; 6
; [then-branch: 32 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 32 | True]
; [eval] __last_barrier == 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [eval] __last_barrier == 1
; [then-branch: 33 | False | dead]
; [else-branch: 33 | True | live]
(push) ; 5
; [else-branch: 33 | True]
; [eval] __last_barrier == 0
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 34 | True | live]
; [else-branch: 34 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 34 | True]
; [eval] this.dst[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@14@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@9@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@9@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@69@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01))
    ($Perm.min
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
            tid@9@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          tid@9@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
          tid@9@01))
      $Perm.Write
      $Perm.No)
    (pTaken@69@01 (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      tid@9@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01))
    (= (- $Perm.Write (pTaken@69@01 r)) $Perm.No))
  
  :qid |quant-u-16|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@70@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      tid@9@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      tid@9@01))
  (=
    ($FVF.lookup_Integer_value (as sm@70@01  $FVF<Integer_value>) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      tid@9@01))
    ($FVF.lookup_Integer_value (as sm@43@01  $FVF<Integer_value>) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      tid@9@01)))))
; [eval] 0 < k
; [eval] k <= half
(set-option :timeout 0)
(push) ; 7
(assert (not (<= 1 half@37@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (<= 1 half@37@01))
; [eval] this.dst[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@14@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@9@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@9@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01))
    false)
  
  :qid |quant-u-17|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] this.dst[tid]
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@14@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@9@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@9@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        tid@9@01))
    false)
  
  :qid |quant-u-18|))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Done removing quantified permissions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- main_barrier ----------
(declare-const this@71@01 $Ref)
(declare-const tcount@72@01 Int)
(declare-const gsize@73@01 Int)
(declare-const tid@74@01 Int)
(declare-const gid@75@01 Int)
(declare-const lid@76@01 Int)
(declare-const this_barrier@77@01 Int)
(declare-const last_barrier@78@01 Int)
(declare-const k@79@01 Int)
(declare-const half@80@01 Int)
(declare-const offset@81@01 Int)
(declare-const sys__result@82@01 Int)
(declare-const this@83@01 $Ref)
(declare-const tcount@84@01 Int)
(declare-const gsize@85@01 Int)
(declare-const tid@86@01 Int)
(declare-const gid@87@01 Int)
(declare-const lid@88@01 Int)
(declare-const this_barrier@89@01 Int)
(declare-const last_barrier@90@01 Int)
(declare-const k@91@01 Int)
(declare-const half@92@01 Int)
(declare-const offset@93@01 Int)
(declare-const sys__result@94@01 Int)
(push) ; 1
(declare-const $t@95@01 $Snap)
(assert (= $t@95@01 ($Snap.combine ($Snap.first $t@95@01) ($Snap.second $t@95@01))))
(assert (= ($Snap.first $t@95@01) $Snap.unit))
; [eval] this_barrier == 1 ==> false || last_barrier == 0
; [eval] this_barrier == 1
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= this_barrier@89@01 1)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 35 | this_barrier@89@01 == 1 | live]
; [else-branch: 35 | this_barrier@89@01 != 1 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 35 | this_barrier@89@01 == 1]
(assert (= this_barrier@89@01 1))
; [eval] false || last_barrier == 0
(push) ; 4
; [then-branch: 36 | False | live]
; [else-branch: 36 | True | live]
(push) ; 5
; [then-branch: 36 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 36 | True]
; [eval] last_barrier == 0
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
(push) ; 3
; [else-branch: 35 | this_barrier@89@01 != 1]
(assert (not (= this_barrier@89@01 1)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= this_barrier@89@01 1)) (= this_barrier@89@01 1)))
(assert (=> (= this_barrier@89@01 1) (= last_barrier@90@01 0)))
(assert (=
  ($Snap.second $t@95@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@95@01))
    ($Snap.second ($Snap.second $t@95@01)))))
(assert (= ($Snap.first ($Snap.second $t@95@01)) $Snap.unit))
; [eval] 0 <= tid
(assert (<= 0 tid@86@01))
(assert (=
  ($Snap.second ($Snap.second $t@95@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@95@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@95@01))) $Snap.unit))
; [eval] tid < tcount
(assert (< tid@86@01 tcount@84@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@95@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@95@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@95@01))))
  $Snap.unit))
; [eval] tid == lid
(assert (= tid@86@01 lid@88@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (= tcount@84@01 gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))
  $Snap.unit))
; [eval] gid == 0
(assert (= gid@87@01 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
(declare-const $k@96@01 $Perm)
(assert ($Perm.isReadVar $k@96@01))
(assert (<= $Perm.No $k@96@01))
(assert (<= $k@96@01 $Perm.Write))
(assert (=> (< $Perm.No $k@96@01) (not (= this@83@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))
  gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
(declare-const $k@97@01 $Perm)
(assert ($Perm.isReadVar $k@97@01))
(assert (<= $Perm.No $k@97@01))
(assert (<= $k@97@01 $Perm.Write))
(assert (=> (< $Perm.No $k@97@01) (not (= this@83@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))
  gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (<= 4 gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (= (mod gsize@85@01 4) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@98@01 Int)
(declare-const jx@99@01 Int)
(set-option :timeout 0)
(push) ; 2
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 3
; [then-branch: 37 | !(ix@98@01 >= 0) | live]
; [else-branch: 37 | ix@98@01 >= 0 | live]
(push) ; 4
; [then-branch: 37 | !(ix@98@01 >= 0)]
(assert (not (>= ix@98@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 37 | ix@98@01 >= 0]
(assert (>= ix@98@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 38 | !(ix@98@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))|) | live]
; [else-branch: 38 | ix@98@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))| | live]
(push) ; 6
; [then-branch: 38 | !(ix@98@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))|)]
(assert (not
  (<
    ix@98@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 38 | ix@98@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))|]
(assert (<
  ix@98@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))
; [eval] jx >= 0
(push) ; 7
; [then-branch: 39 | !(jx@99@01 >= 0) | live]
; [else-branch: 39 | jx@99@01 >= 0 | live]
(push) ; 8
; [then-branch: 39 | !(jx@99@01 >= 0)]
(assert (not (>= jx@99@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 39 | jx@99@01 >= 0]
(assert (>= jx@99@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 40 | !(jx@99@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))|) | live]
; [else-branch: 40 | jx@99@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))| | live]
(push) ; 10
; [then-branch: 40 | !(jx@99@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))|)]
(assert (not
  (<
    jx@99@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 40 | jx@99@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))|]
(assert (<
  jx@99@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))
; [eval] ix != jx
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@99@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
  (not
    (<
      jx@99@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@99@01 0)
  (and
    (>= jx@99@01 0)
    (or
      (<
        jx@99@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      (not
        (<
          jx@99@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))
(assert (or (>= jx@99@01 0) (not (>= jx@99@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@98@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
  (and
    (<
      ix@98@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
    (=>
      (>= jx@99@01 0)
      (and
        (>= jx@99@01 0)
        (or
          (<
            jx@99@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          (not
            (<
              jx@99@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
    (or (>= jx@99@01 0) (not (>= jx@99@01 0))))))
(assert (or
  (<
    ix@98@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
  (not
    (<
      ix@98@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@98@01 0)
  (and
    (>= ix@98@01 0)
    (=>
      (<
        ix@98@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      (and
        (<
          ix@98@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        (=>
          (>= jx@99@01 0)
          (and
            (>= jx@99@01 0)
            (or
              (<
                jx@99@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
              (not
                (<
                  jx@99@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
        (or (>= jx@99@01 0) (not (>= jx@99@01 0)))))
    (or
      (<
        ix@98@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      (not
        (<
          ix@98@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))
(assert (or (>= ix@98@01 0) (not (>= ix@98@01 0))))
(push) ; 3
; [then-branch: 41 | ix@98@01 >= 0 && ix@98@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))| && jx@99@01 >= 0 && jx@99@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))| && ix@98@01 != jx@99@01 | live]
; [else-branch: 41 | !(ix@98@01 >= 0 && ix@98@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))| && jx@99@01 >= 0 && jx@99@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))| && ix@98@01 != jx@99@01) | live]
(push) ; 4
; [then-branch: 41 | ix@98@01 >= 0 && ix@98@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))| && jx@99@01 >= 0 && jx@99@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))| && ix@98@01 != jx@99@01]
(assert (and
  (>= ix@98@01 0)
  (and
    (<
      ix@98@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
    (and
      (>= jx@99@01 0)
      (and
        (<
          jx@99@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        (not (= ix@98@01 jx@99@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 41 | !(ix@98@01 >= 0 && ix@98@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))| && jx@99@01 >= 0 && jx@99@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@95@01)))))))| && ix@98@01 != jx@99@01)]
(assert (not
  (and
    (>= ix@98@01 0)
    (and
      (<
        ix@98@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      (and
        (>= jx@99@01 0)
        (and
          (<
            jx@99@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          (not (= ix@98@01 jx@99@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= ix@98@01 0)
    (and
      (<
        ix@98@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      (and
        (>= jx@99@01 0)
        (and
          (<
            jx@99@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          (not (= ix@98@01 jx@99@01))))))
  (and
    (>= ix@98@01 0)
    (<
      ix@98@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
    (>= jx@99@01 0)
    (<
      jx@99@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
    (not (= ix@98@01 jx@99@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@98@01 0)
      (and
        (<
          ix@98@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        (and
          (>= jx@99@01 0)
          (and
            (<
              jx@99@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
            (not (= ix@98@01 jx@99@01)))))))
  (and
    (>= ix@98@01 0)
    (and
      (<
        ix@98@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      (and
        (>= jx@99@01 0)
        (and
          (<
            jx@99@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          (not (= ix@98@01 jx@99@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@98@01 Int) (jx@99@01 Int)) (!
  (and
    (=>
      (>= ix@98@01 0)
      (and
        (>= ix@98@01 0)
        (=>
          (<
            ix@98@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          (and
            (<
              ix@98@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
            (=>
              (>= jx@99@01 0)
              (and
                (>= jx@99@01 0)
                (or
                  (<
                    jx@99@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
                  (not
                    (<
                      jx@99@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
            (or (>= jx@99@01 0) (not (>= jx@99@01 0)))))
        (or
          (<
            ix@98@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          (not
            (<
              ix@98@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
    (or (>= ix@98@01 0) (not (>= ix@98@01 0)))
    (=>
      (and
        (>= ix@98@01 0)
        (and
          (<
            ix@98@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          (and
            (>= jx@99@01 0)
            (and
              (<
                jx@99@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
              (not (= ix@98@01 jx@99@01))))))
      (and
        (>= ix@98@01 0)
        (<
          ix@98@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        (>= jx@99@01 0)
        (<
          jx@99@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        (not (= ix@98@01 jx@99@01))))
    (or
      (not
        (and
          (>= ix@98@01 0)
          (and
            (<
              ix@98@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
            (and
              (>= jx@99@01 0)
              (and
                (<
                  jx@99@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
                (not (= ix@98@01 jx@99@01)))))))
      (and
        (>= ix@98@01 0)
        (and
          (<
            ix@98@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          (and
            (>= jx@99@01 0)
            (and
              (<
                jx@99@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
              (not (= ix@98@01 jx@99@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
    ix@98@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
    jx@99@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@111@12@111@140-aux|)))
(assert (forall ((ix@98@01 Int) (jx@99@01 Int)) (!
  (=>
    (and
      (>= ix@98@01 0)
      (and
        (<
          ix@98@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        (and
          (>= jx@99@01 0)
          (and
            (<
              jx@99@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
            (not (= ix@98@01 jx@99@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          ix@98@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          jx@99@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
    ix@98@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
    jx@99@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@111@12@111@140|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
(declare-const i@100@01 Int)
(push) ; 2
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@85@01) i@100@01))
; [eval] this.src[i]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= i@100@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  i@100@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not (= gsize@85@01 0))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@101@01 ($Ref) Int)
(declare-fun img@102@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 2
(assert (not (forall ((i@100@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@85@01) i@100@01)
    (or
      (= (/ (to_real 1) (to_real gsize@85@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))))
  
  :qid |quant-u-19|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@100@01 Int) (i2@100@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) i1@100@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) i2@100@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          i1@100@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          i2@100@01)))
    (= i1@100@01 i2@100@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@100@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@85@01) i@100@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
    (and
      (=
        (inv@101@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          i@100@01))
        i@100@01)
      (img@102@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
        i@100@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
    i@100@01))
  :qid |quant-u-20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@102@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
        (inv@101@01 r))
      r))
  :pattern ((inv@101@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@100@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
    i@100@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@100@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@85@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
    i@100@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@100@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@85@01) i@100@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          i@100@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
    i@100@01))
  :qid |Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
; [eval] last_barrier == 1
(push) ; 2
(set-option :timeout 10)
(assert (not (not (= last_barrier@90@01 1))))
(check-sat)
; unknown
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (= last_barrier@90@01 1)))
(check-sat)
; unknown
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; [then-branch: 42 | last_barrier@90@01 == 1 | live]
; [else-branch: 42 | last_barrier@90@01 != 1 | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 42 | last_barrier@90@01 == 1]
(assert (= last_barrier@90@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))))
; [eval] tid == 0
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= tid@86@01 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= tid@86@01 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 43 | tid@86@01 == 0 | live]
; [else-branch: 43 | tid@86@01 != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 43 | tid@86@01 == 0]
(assert (= tid@86@01 0))
; [eval] this.dst[0]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(declare-const sm@103@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@103@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
    0))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        0))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        0))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      0))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        0)
      $Ref.null))))
; [eval] tid == 0
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= tid@86@01 0))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 44 | tid@86@01 == 0 | live]
; [else-branch: 44 | tid@86@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 44 | tid@86@01 == 0]
; [eval] this.dst[1]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(declare-const sm@104@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@104@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
    1))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
    1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
    0))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        1))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        1))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      1))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        1)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))))
; [eval] last_barrier == 0
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= last_barrier@90@01 0))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 45 | last_barrier@90@01 == 0 | dead]
; [else-branch: 45 | last_barrier@90@01 != 0 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 45 | last_barrier@90@01 != 0]
(assert (not (= last_barrier@90@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> half + half == gsize
; [eval] this_barrier == 1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 46 | this_barrier@89@01 == 1 | dead]
; [else-branch: 46 | this_barrier@89@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 46 | this_barrier@89@01 != 1]
(assert (not (= this_barrier@89@01 1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (= this_barrier@89@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 47 | this_barrier@89@01 == 1 | dead]
; [else-branch: 47 | this_barrier@89@01 != 1 | live]
(push) ; 7
; [else-branch: 47 | this_barrier@89@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 1 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 48 | this_barrier@89@01 == 1 | dead]
; [else-branch: 48 | this_barrier@89@01 != 1 | live]
(push) ; 7
; [else-branch: 48 | this_barrier@89@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@105@01 $Snap)
(assert (= $t@105@01 ($Snap.combine ($Snap.first $t@105@01) ($Snap.second $t@105@01))))
(assert (= ($Snap.first $t@105@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@105@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@105@01))
    ($Snap.second ($Snap.second $t@105@01)))))
(assert (= ($Snap.first ($Snap.second $t@105@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@105@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@105@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@105@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@105@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@105@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@105@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
(declare-const $k@106@01 $Perm)
(assert ($Perm.isReadVar $k@106@01))
(assert (<= $Perm.No $k@106@01))
(assert (<= $k@106@01 $Perm.Write))
(assert (=> (< $Perm.No $k@106@01) (not (= this@83@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@106@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
  gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))
(declare-const $k@107@01 $Perm)
(assert ($Perm.isReadVar $k@107@01))
(assert (<= $Perm.No $k@107@01))
(assert (<= $k@107@01 $Perm.Write))
(assert (=> (< $Perm.No $k@107@01) (not (= this@83@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@107@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
  gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@108@01 Int)
(declare-const jx@109@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 8
; [then-branch: 49 | !(ix@108@01 >= 0) | live]
; [else-branch: 49 | ix@108@01 >= 0 | live]
(push) ; 9
; [then-branch: 49 | !(ix@108@01 >= 0)]
(assert (not (>= ix@108@01 0)))
(pop) ; 9
(push) ; 9
; [else-branch: 49 | ix@108@01 >= 0]
(assert (>= ix@108@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@106@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [then-branch: 50 | !(ix@108@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))|) | live]
; [else-branch: 50 | ix@108@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))| | live]
(push) ; 11
; [then-branch: 50 | !(ix@108@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))|)]
(assert (not
  (<
    ix@108@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 50 | ix@108@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))|]
(assert (<
  ix@108@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
; [eval] jx >= 0
(push) ; 12
; [then-branch: 51 | !(jx@109@01 >= 0) | live]
; [else-branch: 51 | jx@109@01 >= 0 | live]
(push) ; 13
; [then-branch: 51 | !(jx@109@01 >= 0)]
(assert (not (>= jx@109@01 0)))
(pop) ; 13
(push) ; 13
; [else-branch: 51 | jx@109@01 >= 0]
(assert (>= jx@109@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@106@01)))
(check-sat)
; unsat
(pop) ; 14
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 52 | !(jx@109@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))|) | live]
; [else-branch: 52 | jx@109@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))| | live]
(push) ; 15
; [then-branch: 52 | !(jx@109@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))|)]
(assert (not
  (<
    jx@109@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))
(pop) ; 15
(push) ; 15
; [else-branch: 52 | jx@109@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))|]
(assert (<
  jx@109@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))
; [eval] ix != jx
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@109@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
  (not
    (<
      jx@109@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@109@01 0)
  (and
    (>= jx@109@01 0)
    (or
      (<
        jx@109@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      (not
        (<
          jx@109@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))
(assert (or (>= jx@109@01 0) (not (>= jx@109@01 0))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@108@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
  (and
    (<
      ix@108@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    (=>
      (>= jx@109@01 0)
      (and
        (>= jx@109@01 0)
        (or
          (<
            jx@109@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
          (not
            (<
              jx@109@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
    (or (>= jx@109@01 0) (not (>= jx@109@01 0))))))
(assert (or
  (<
    ix@108@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
  (not
    (<
      ix@108@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@108@01 0)
  (and
    (>= ix@108@01 0)
    (=>
      (<
        ix@108@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      (and
        (<
          ix@108@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        (=>
          (>= jx@109@01 0)
          (and
            (>= jx@109@01 0)
            (or
              (<
                jx@109@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
              (not
                (<
                  jx@109@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
        (or (>= jx@109@01 0) (not (>= jx@109@01 0)))))
    (or
      (<
        ix@108@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      (not
        (<
          ix@108@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))
(assert (or (>= ix@108@01 0) (not (>= ix@108@01 0))))
(push) ; 8
; [then-branch: 53 | ix@108@01 >= 0 && ix@108@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))| && jx@109@01 >= 0 && jx@109@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))| && ix@108@01 != jx@109@01 | live]
; [else-branch: 53 | !(ix@108@01 >= 0 && ix@108@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))| && jx@109@01 >= 0 && jx@109@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))| && ix@108@01 != jx@109@01) | live]
(push) ; 9
; [then-branch: 53 | ix@108@01 >= 0 && ix@108@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))| && jx@109@01 >= 0 && jx@109@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))| && ix@108@01 != jx@109@01]
(assert (and
  (>= ix@108@01 0)
  (and
    (<
      ix@108@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    (and
      (>= jx@109@01 0)
      (and
        (<
          jx@109@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        (not (= ix@108@01 jx@109@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@106@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@106@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 53 | !(ix@108@01 >= 0 && ix@108@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))| && jx@109@01 >= 0 && jx@109@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@105@01))))))| && ix@108@01 != jx@109@01)]
(assert (not
  (and
    (>= ix@108@01 0)
    (and
      (<
        ix@108@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      (and
        (>= jx@109@01 0)
        (and
          (<
            jx@109@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
          (not (= ix@108@01 jx@109@01))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (>= ix@108@01 0)
    (and
      (<
        ix@108@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      (and
        (>= jx@109@01 0)
        (and
          (<
            jx@109@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
          (not (= ix@108@01 jx@109@01))))))
  (and
    (>= ix@108@01 0)
    (<
      ix@108@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    (>= jx@109@01 0)
    (<
      jx@109@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    (not (= ix@108@01 jx@109@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@108@01 0)
      (and
        (<
          ix@108@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        (and
          (>= jx@109@01 0)
          (and
            (<
              jx@109@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
            (not (= ix@108@01 jx@109@01)))))))
  (and
    (>= ix@108@01 0)
    (and
      (<
        ix@108@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      (and
        (>= jx@109@01 0)
        (and
          (<
            jx@109@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
          (not (= ix@108@01 jx@109@01))))))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@108@01 Int) (jx@109@01 Int)) (!
  (and
    (=>
      (>= ix@108@01 0)
      (and
        (>= ix@108@01 0)
        (=>
          (<
            ix@108@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
          (and
            (<
              ix@108@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
            (=>
              (>= jx@109@01 0)
              (and
                (>= jx@109@01 0)
                (or
                  (<
                    jx@109@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
                  (not
                    (<
                      jx@109@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
            (or (>= jx@109@01 0) (not (>= jx@109@01 0)))))
        (or
          (<
            ix@108@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
          (not
            (<
              ix@108@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
    (or (>= ix@108@01 0) (not (>= ix@108@01 0)))
    (=>
      (and
        (>= ix@108@01 0)
        (and
          (<
            ix@108@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
          (and
            (>= jx@109@01 0)
            (and
              (<
                jx@109@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
              (not (= ix@108@01 jx@109@01))))))
      (and
        (>= ix@108@01 0)
        (<
          ix@108@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        (>= jx@109@01 0)
        (<
          jx@109@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        (not (= ix@108@01 jx@109@01))))
    (or
      (not
        (and
          (>= ix@108@01 0)
          (and
            (<
              ix@108@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
            (and
              (>= jx@109@01 0)
              (and
                (<
                  jx@109@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
                (not (= ix@108@01 jx@109@01)))))))
      (and
        (>= ix@108@01 0)
        (and
          (<
            ix@108@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
          (and
            (>= jx@109@01 0)
            (and
              (<
                jx@109@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
              (not (= ix@108@01 jx@109@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
    ix@108@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
    jx@109@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@129@11@129@139-aux|)))
(assert (forall ((ix@108@01 Int) (jx@109@01 Int)) (!
  (=>
    (and
      (>= ix@108@01 0)
      (and
        (<
          ix@108@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        (and
          (>= jx@109@01 0)
          (and
            (<
              jx@109@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
            (not (= ix@108@01 jx@109@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
          ix@108@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
          jx@109@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
    ix@108@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
    jx@109@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@129@11@129@139|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))
(declare-const i@110@01 Int)
(push) ; 7
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@85@01) i@110@01))
; [eval] this.src[i]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@106@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@110@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  i@110@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not (= gsize@85@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(declare-fun inv@111@01 ($Ref) Int)
(declare-fun img@112@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 7
(assert (not (forall ((i@110@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@85@01) i@110@01)
    (or
      (= (/ (to_real 1) (to_real gsize@85@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))))
  
  :qid |quant-u-21|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((i1@110@01 Int) (i2@110@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) i1@110@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) i2@110@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
          i1@110@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
          i2@110@01)))
    (= i1@110@01 i2@110@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@110@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@85@01) i@110@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
    (and
      (=
        (inv@111@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
          i@110@01))
        i@110@01)
      (img@112@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
        i@110@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
    i@110@01))
  :qid |quant-u-22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@112@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@111@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
        (inv@111@01 r))
      r))
  :pattern ((inv@111@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@110@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
    i@110@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@110@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@85@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
    i@110@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@110@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@85@01) i@110@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
          i@110@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
    i@110@01))
  :qid |Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))
  $Snap.unit))
; [eval] this.src == old(this.src)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@106@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.src)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))
  $Snap.unit))
; [eval] this.dst == old(this.dst)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@107@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.dst)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= sys__result@94@01 1)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 54 | sys__result@94@01 == 1 | live]
; [else-branch: 54 | sys__result@94@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 54 | sys__result@94@01 == 1]
(assert (= sys__result@94@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))))
; [eval] tid == 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= tid@86@01 0))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [then-branch: 55 | tid@86@01 == 0 | live]
; [else-branch: 55 | tid@86@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 55 | tid@86@01 == 0]
; [eval] this.dst[0]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@107@01)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(declare-const sm@113@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@113@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    0))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        0))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        0))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      0))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        0)
      $Ref.null))))
; [eval] tid == 0
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= tid@86@01 0))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
; [then-branch: 56 | tid@86@01 == 0 | live]
; [else-branch: 56 | tid@86@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 56 | tid@86@01 == 0]
; [eval] this.dst[1]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@107@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(declare-const sm@114@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@114@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    1))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        1))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        1))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      1))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        1)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 0))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [then-branch: 57 | sys__result@94@01 == 0 | dead]
; [else-branch: 57 | sys__result@94@01 != 0 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 57 | sys__result@94@01 != 0]
(assert (not (= sys__result@94@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 58 | this_barrier@89@01 == 1 | dead]
; [else-branch: 58 | this_barrier@89@01 != 1 | live]
(push) ; 12
; [else-branch: 58 | this_barrier@89@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 59 | this_barrier@89@01 == 1 | dead]
; [else-branch: 59 | this_barrier@89@01 != 1 | live]
(push) ; 12
; [else-branch: 59 | this_barrier@89@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 54 | sys__result@94@01 != 1]
(assert (not (= sys__result@94@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))))
; [eval] sys__result == 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 0))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= sys__result@94@01 0)))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [then-branch: 60 | sys__result@94@01 == 0 | live]
; [else-branch: 60 | sys__result@94@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 60 | sys__result@94@01 == 0]
(assert (= sys__result@94@01 0))
; [eval] this.dst[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@107@01)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@86@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@86@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(declare-const sm@115@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@115@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
    tid@86@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        tid@86@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        tid@86@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        tid@86@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        tid@86@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      tid@86@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
      tid@86@01))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))
        tid@86@01)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 61 | this_barrier@89@01 == 1 | dead]
; [else-branch: 61 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 61 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 62 | this_barrier@89@01 == 1 | dead]
; [else-branch: 62 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 62 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 60 | sys__result@94@01 != 0]
(assert (not (= sys__result@94@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 63 | this_barrier@89@01 == 1 | dead]
; [else-branch: 63 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 63 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 64 | this_barrier@89@01 == 1 | dead]
; [else-branch: 64 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 64 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [exec]
; inhale false
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 43 | tid@86@01 != 0]
(assert (not (= tid@86@01 0)))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
  $Snap.unit))
; [eval] tid == 0
; [then-branch: 65 | tid@86@01 == 0 | dead]
; [else-branch: 65 | tid@86@01 != 0 | live]
(push) ; 4
; [else-branch: 65 | tid@86@01 != 0]
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))))
; [eval] last_barrier == 0
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= last_barrier@90@01 0))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 66 | last_barrier@90@01 == 0 | dead]
; [else-branch: 66 | last_barrier@90@01 != 0 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 66 | last_barrier@90@01 != 0]
(assert (not (= last_barrier@90@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> half + half == gsize
; [eval] this_barrier == 1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 67 | this_barrier@89@01 == 1 | dead]
; [else-branch: 67 | this_barrier@89@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 67 | this_barrier@89@01 != 1]
(assert (not (= this_barrier@89@01 1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (= this_barrier@89@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 68 | this_barrier@89@01 == 1 | dead]
; [else-branch: 68 | this_barrier@89@01 != 1 | live]
(push) ; 7
; [else-branch: 68 | this_barrier@89@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 1 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 69 | this_barrier@89@01 == 1 | dead]
; [else-branch: 69 | this_barrier@89@01 != 1 | live]
(push) ; 7
; [else-branch: 69 | this_barrier@89@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@116@01 $Snap)
(assert (= $t@116@01 ($Snap.combine ($Snap.first $t@116@01) ($Snap.second $t@116@01))))
(assert (= ($Snap.first $t@116@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@116@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@116@01))
    ($Snap.second ($Snap.second $t@116@01)))))
(assert (= ($Snap.first ($Snap.second $t@116@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@116@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@116@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@116@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@116@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
(declare-const $k@117@01 $Perm)
(assert ($Perm.isReadVar $k@117@01))
(assert (<= $Perm.No $k@117@01))
(assert (<= $k@117@01 $Perm.Write))
(assert (=> (< $Perm.No $k@117@01) (not (= this@83@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
  gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
(declare-const $k@118@01 $Perm)
(assert ($Perm.isReadVar $k@118@01))
(assert (<= $Perm.No $k@118@01))
(assert (<= $k@118@01 $Perm.Write))
(assert (=> (< $Perm.No $k@118@01) (not (= this@83@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
  gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@119@01 Int)
(declare-const jx@120@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 8
; [then-branch: 70 | !(ix@119@01 >= 0) | live]
; [else-branch: 70 | ix@119@01 >= 0 | live]
(push) ; 9
; [then-branch: 70 | !(ix@119@01 >= 0)]
(assert (not (>= ix@119@01 0)))
(pop) ; 9
(push) ; 9
; [else-branch: 70 | ix@119@01 >= 0]
(assert (>= ix@119@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [then-branch: 71 | !(ix@119@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))|) | live]
; [else-branch: 71 | ix@119@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))| | live]
(push) ; 11
; [then-branch: 71 | !(ix@119@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))|)]
(assert (not
  (<
    ix@119@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 71 | ix@119@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))|]
(assert (<
  ix@119@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
; [eval] jx >= 0
(push) ; 12
; [then-branch: 72 | !(jx@120@01 >= 0) | live]
; [else-branch: 72 | jx@120@01 >= 0 | live]
(push) ; 13
; [then-branch: 72 | !(jx@120@01 >= 0)]
(assert (not (>= jx@120@01 0)))
(pop) ; 13
(push) ; 13
; [else-branch: 72 | jx@120@01 >= 0]
(assert (>= jx@120@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 14
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
; [then-branch: 73 | !(jx@120@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))|) | live]
; [else-branch: 73 | jx@120@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))| | live]
(push) ; 15
; [then-branch: 73 | !(jx@120@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))|)]
(assert (not
  (<
    jx@120@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
(pop) ; 15
(push) ; 15
; [else-branch: 73 | jx@120@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))|]
(assert (<
  jx@120@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
; [eval] ix != jx
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@120@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
  (not
    (<
      jx@120@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@120@01 0)
  (and
    (>= jx@120@01 0)
    (or
      (<
        jx@120@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
      (not
        (<
          jx@120@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
(assert (or (>= jx@120@01 0) (not (>= jx@120@01 0))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@119@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
  (and
    (<
      ix@119@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
    (=>
      (>= jx@120@01 0)
      (and
        (>= jx@120@01 0)
        (or
          (<
            jx@120@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
          (not
            (<
              jx@120@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
    (or (>= jx@120@01 0) (not (>= jx@120@01 0))))))
(assert (or
  (<
    ix@119@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
  (not
    (<
      ix@119@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@119@01 0)
  (and
    (>= ix@119@01 0)
    (=>
      (<
        ix@119@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
      (and
        (<
          ix@119@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (=>
          (>= jx@120@01 0)
          (and
            (>= jx@120@01 0)
            (or
              (<
                jx@120@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
              (not
                (<
                  jx@120@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
        (or (>= jx@120@01 0) (not (>= jx@120@01 0)))))
    (or
      (<
        ix@119@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
      (not
        (<
          ix@119@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
(assert (or (>= ix@119@01 0) (not (>= ix@119@01 0))))
(push) ; 8
; [then-branch: 74 | ix@119@01 >= 0 && ix@119@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))| && jx@120@01 >= 0 && jx@120@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))| && ix@119@01 != jx@120@01 | live]
; [else-branch: 74 | !(ix@119@01 >= 0 && ix@119@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))| && jx@120@01 >= 0 && jx@120@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))| && ix@119@01 != jx@120@01) | live]
(push) ; 9
; [then-branch: 74 | ix@119@01 >= 0 && ix@119@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))| && jx@120@01 >= 0 && jx@120@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))| && ix@119@01 != jx@120@01]
(assert (and
  (>= ix@119@01 0)
  (and
    (<
      ix@119@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
    (and
      (>= jx@120@01 0)
      (and
        (<
          jx@120@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (not (= ix@119@01 jx@120@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 74 | !(ix@119@01 >= 0 && ix@119@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))| && jx@120@01 >= 0 && jx@120@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))| && ix@119@01 != jx@120@01)]
(assert (not
  (and
    (>= ix@119@01 0)
    (and
      (<
        ix@119@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
      (and
        (>= jx@120@01 0)
        (and
          (<
            jx@120@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
          (not (= ix@119@01 jx@120@01))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (>= ix@119@01 0)
    (and
      (<
        ix@119@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
      (and
        (>= jx@120@01 0)
        (and
          (<
            jx@120@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
          (not (= ix@119@01 jx@120@01))))))
  (and
    (>= ix@119@01 0)
    (<
      ix@119@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
    (>= jx@120@01 0)
    (<
      jx@120@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
    (not (= ix@119@01 jx@120@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@119@01 0)
      (and
        (<
          ix@119@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (and
          (>= jx@120@01 0)
          (and
            (<
              jx@120@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
            (not (= ix@119@01 jx@120@01)))))))
  (and
    (>= ix@119@01 0)
    (and
      (<
        ix@119@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
      (and
        (>= jx@120@01 0)
        (and
          (<
            jx@120@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
          (not (= ix@119@01 jx@120@01))))))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@119@01 Int) (jx@120@01 Int)) (!
  (and
    (=>
      (>= ix@119@01 0)
      (and
        (>= ix@119@01 0)
        (=>
          (<
            ix@119@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
          (and
            (<
              ix@119@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
            (=>
              (>= jx@120@01 0)
              (and
                (>= jx@120@01 0)
                (or
                  (<
                    jx@120@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
                  (not
                    (<
                      jx@120@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
            (or (>= jx@120@01 0) (not (>= jx@120@01 0)))))
        (or
          (<
            ix@119@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
          (not
            (<
              ix@119@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
    (or (>= ix@119@01 0) (not (>= ix@119@01 0)))
    (=>
      (and
        (>= ix@119@01 0)
        (and
          (<
            ix@119@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
          (and
            (>= jx@120@01 0)
            (and
              (<
                jx@120@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
              (not (= ix@119@01 jx@120@01))))))
      (and
        (>= ix@119@01 0)
        (<
          ix@119@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (>= jx@120@01 0)
        (<
          jx@120@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (not (= ix@119@01 jx@120@01))))
    (or
      (not
        (and
          (>= ix@119@01 0)
          (and
            (<
              ix@119@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
            (and
              (>= jx@120@01 0)
              (and
                (<
                  jx@120@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
                (not (= ix@119@01 jx@120@01)))))))
      (and
        (>= ix@119@01 0)
        (and
          (<
            ix@119@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
          (and
            (>= jx@120@01 0)
            (and
              (<
                jx@120@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
              (not (= ix@119@01 jx@120@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    ix@119@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    jx@120@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@129@11@129@139-aux|)))
(assert (forall ((ix@119@01 Int) (jx@120@01 Int)) (!
  (=>
    (and
      (>= ix@119@01 0)
      (and
        (<
          ix@119@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (and
          (>= jx@120@01 0)
          (and
            (<
              jx@120@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
            (not (= ix@119@01 jx@120@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
          ix@119@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
          jx@120@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    ix@119@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    jx@120@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@129@11@129@139|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
(declare-const i@121@01 Int)
(push) ; 7
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@85@01) i@121@01))
; [eval] this.src[i]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@121@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  i@121@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not (= gsize@85@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(declare-fun inv@122@01 ($Ref) Int)
(declare-fun img@123@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 7
(assert (not (forall ((i@121@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@85@01) i@121@01)
    (or
      (= (/ (to_real 1) (to_real gsize@85@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))))
  
  :qid |quant-u-23|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((i1@121@01 Int) (i2@121@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) i1@121@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) i2@121@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
          i1@121@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
          i2@121@01)))
    (= i1@121@01 i2@121@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@121@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@85@01) i@121@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
    (and
      (=
        (inv@122@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
          i@121@01))
        i@121@01)
      (img@123@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
        i@121@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    i@121@01))
  :qid |quant-u-24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@123@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@122@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
        (inv@122@01 r))
      r))
  :pattern ((inv@122@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@121@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    i@121@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@121@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@85@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    i@121@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@121@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@85@01) i@121@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
          i@121@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    i@121@01))
  :qid |Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
  $Snap.unit))
; [eval] this.src == old(this.src)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.src)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))
  $Snap.unit))
; [eval] this.dst == old(this.dst)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.dst)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= sys__result@94@01 1)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 75 | sys__result@94@01 == 1 | live]
; [else-branch: 75 | sys__result@94@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 75 | sys__result@94@01 == 1]
(assert (= sys__result@94@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
; [eval] tid == 0
; [then-branch: 76 | tid@86@01 == 0 | dead]
; [else-branch: 76 | tid@86@01 != 0 | live]
(push) ; 8
; [else-branch: 76 | tid@86@01 != 0]
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  $Snap.unit))
; [eval] tid == 0
; [then-branch: 77 | tid@86@01 == 0 | dead]
; [else-branch: 77 | tid@86@01 != 0 | live]
(push) ; 9
; [else-branch: 77 | tid@86@01 != 0]
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
; [eval] sys__result == 0
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 0))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [then-branch: 78 | sys__result@94@01 == 0 | dead]
; [else-branch: 78 | sys__result@94@01 != 0 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 78 | sys__result@94@01 != 0]
(assert (not (= sys__result@94@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 79 | this_barrier@89@01 == 1 | dead]
; [else-branch: 79 | this_barrier@89@01 != 1 | live]
(push) ; 12
; [else-branch: 79 | this_barrier@89@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 80 | this_barrier@89@01 == 1 | dead]
; [else-branch: 80 | this_barrier@89@01 != 1 | live]
(push) ; 12
; [else-branch: 80 | this_barrier@89@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 75 | sys__result@94@01 != 1]
(assert (not (= sys__result@94@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
; [eval] sys__result == 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 0))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= sys__result@94@01 0)))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [then-branch: 81 | sys__result@94@01 == 0 | live]
; [else-branch: 81 | sys__result@94@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 81 | sys__result@94@01 == 0]
(assert (= sys__result@94@01 0))
; [eval] this.dst[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@86@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@86@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(declare-const sm@124@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@124@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
    tid@86@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        tid@86@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        tid@86@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        tid@86@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        tid@86@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
      tid@86@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
      tid@86@01))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        tid@86@01)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 82 | this_barrier@89@01 == 1 | dead]
; [else-branch: 82 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 82 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 83 | this_barrier@89@01 == 1 | dead]
; [else-branch: 83 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 83 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 81 | sys__result@94@01 != 0]
(assert (not (= sys__result@94@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 84 | this_barrier@89@01 == 1 | dead]
; [else-branch: 84 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 84 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 85 | this_barrier@89@01 == 1 | dead]
; [else-branch: 85 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 85 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [exec]
; inhale false
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [else-branch: 42 | last_barrier@90@01 != 1]
(assert (not (= last_barrier@90@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))))
; [eval] last_barrier == 0
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= last_barrier@90@01 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= last_barrier@90@01 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 86 | last_barrier@90@01 == 0 | live]
; [else-branch: 86 | last_barrier@90@01 != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 86 | last_barrier@90@01 == 0]
(assert (= last_barrier@90@01 0))
; [eval] this.dst[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@86@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@86@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(declare-const sm@125@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
    tid@86@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      tid@86@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
      tid@86@01))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> half + half == gsize
; [eval] this_barrier == 1
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= this_barrier@89@01 1)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 87 | this_barrier@89@01 == 1 | live]
; [else-branch: 87 | this_barrier@89@01 != 1 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 87 | this_barrier@89@01 == 1]
(assert (= this_barrier@89@01 1))
; [eval] half + half == gsize
; [eval] half + half
(pop) ; 5
(push) ; 5
; [else-branch: 87 | this_barrier@89@01 != 1]
(assert (not (= this_barrier@89@01 1)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@89@01 1) (= (+ half@92@01 half@92@01) gsize@85@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= this_barrier@89@01 1)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 88 | this_barrier@89@01 == 1 | live]
; [else-branch: 88 | this_barrier@89@01 != 1 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 88 | this_barrier@89@01 == 1]
(assert (= this_barrier@89@01 1))
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= tid@86@01 0))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= tid@86@01 0)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 89 | tid@86@01 == 0 | live]
; [else-branch: 89 | tid@86@01 != 0 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 89 | tid@86@01 == 0]
(assert (= tid@86@01 0))
; [eval] (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
(declare-const i@126@01 Int)
(push) ; 8
; [eval] 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] 0 <= i && i < half
; [eval] 0 <= i
(push) ; 9
; [then-branch: 90 | !(0 <= i@126@01) | live]
; [else-branch: 90 | 0 <= i@126@01 | live]
(push) ; 10
; [then-branch: 90 | !(0 <= i@126@01)]
(assert (not (<= 0 i@126@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 90 | 0 <= i@126@01]
(assert (<= 0 i@126@01))
; [eval] i < half
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@126@01) (not (<= 0 i@126@01))))
(push) ; 9
; [then-branch: 91 | 0 <= i@126@01 && i@126@01 < half@92@01 | live]
; [else-branch: 91 | !(0 <= i@126@01 && i@126@01 < half@92@01) | live]
(push) ; 10
; [then-branch: 91 | 0 <= i@126@01 && i@126@01 < half@92@01]
(assert (and (<= 0 i@126@01) (< i@126@01 half@92@01)))
; [eval] this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] this.dst[0]
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(declare-const sm@127@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@102@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01))
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef13|)))
(declare-const pm@128@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@128@01  $FPM) r)
    (+
      (ite
        (and
          (img@102@01 r)
          (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
        (/ (to_real 1) (to_real gsize@85@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
            tid@86@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@128@01  $FPM) r))
  :qid |qp.resPrmSumDef14|)))
(push) ; 11
(assert (not (<
  $Perm.No
  ($FVF.perm_Integer_value (as pm@128@01  $FPM) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
    0)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@126@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  i@126@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@102@01 r)
          (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          tid@86@01))
      (=
        ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef13|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@102@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          i@126@01))
        (Seq_contains
          (Seq_range 0 gsize@85@01)
          (inv@101@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
            i@126@01))))
      (/ (to_real 1) (to_real gsize@85@01))
      $Perm.No)
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          i@126@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          tid@86@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 91 | !(0 <= i@126@01 && i@126@01 < half@92@01)]
(assert (not (and (<= 0 i@126@01) (< i@126@01 half@92@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@102@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01))
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@128@01  $FPM) r)
    (+
      (ite
        (and
          (img@102@01 r)
          (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
        (/ (to_real 1) (to_real gsize@85@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
            tid@86@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@128@01  $FPM) r))
  :qid |qp.resPrmSumDef14|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 i@126@01) (< i@126@01 half@92@01)))
  (and (<= 0 i@126@01) (< i@126@01 half@92@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@102@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01))
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@128@01  $FPM) r)
    (+
      (ite
        (and
          (img@102@01 r)
          (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
        (/ (to_real 1) (to_real gsize@85@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
            tid@86@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@128@01  $FPM) r))
  :qid |qp.resPrmSumDef14|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@126@01 Int)) (!
  (and
    (or (<= 0 i@126@01) (not (<= 0 i@126@01)))
    (or
      (not (and (<= 0 i@126@01) (< i@126@01 half@92@01)))
      (and (<= 0 i@126@01) (< i@126@01 half@92@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
    i@126@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@116@52@116@152-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 89 | tid@86@01 != 0]
(assert (not (= tid@86@01 0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@102@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01))
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@128@01  $FPM) r)
    (+
      (ite
        (and
          (img@102@01 r)
          (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
        (/ (to_real 1) (to_real gsize@85@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
            tid@86@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@128@01  $FPM) r))
  :qid |qp.resPrmSumDef14|)))
(assert (=>
  (= tid@86@01 0)
  (and
    (= tid@86@01 0)
    (forall ((i@126@01 Int)) (!
      (and
        (or (<= 0 i@126@01) (not (<= 0 i@126@01)))
        (or
          (not (and (<= 0 i@126@01) (< i@126@01 half@92@01)))
          (and (<= 0 i@126@01) (< i@126@01 half@92@01))))
      :pattern ((Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
        i@126@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@116@52@116@152-aux|)))))
; Joined path conditions
(assert (or (not (= tid@86@01 0)) (= tid@86@01 0)))
(pop) ; 5
(push) ; 5
; [else-branch: 88 | this_barrier@89@01 != 1]
(assert (not (= this_barrier@89@01 1)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@102@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01))
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@128@01  $FPM) r)
    (+
      (ite
        (and
          (img@102@01 r)
          (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
        (/ (to_real 1) (to_real gsize@85@01))
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
            tid@86@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@128@01  $FPM) r))
  :qid |qp.resPrmSumDef14|)))
(assert (=>
  (= this_barrier@89@01 1)
  (and
    (= this_barrier@89@01 1)
    (=>
      (= tid@86@01 0)
      (and
        (= tid@86@01 0)
        (forall ((i@126@01 Int)) (!
          (and
            (or (<= 0 i@126@01) (not (<= 0 i@126@01)))
            (or
              (not (and (<= 0 i@126@01) (< i@126@01 half@92@01)))
              (and (<= 0 i@126@01) (< i@126@01 half@92@01))))
          :pattern ((Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
            i@126@01))
          :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@116@52@116@152-aux|))))
    (or (not (= tid@86@01 0)) (= tid@86@01 0)))))
; Joined path conditions
(assert (=>
  (and (= this_barrier@89@01 1) (= tid@86@01 0))
  (forall ((i@126@01 Int)) (!
    (=>
      (and (<= 0 i@126@01) (< i@126@01 half@92@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          0))
        ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          i@126@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
      i@126@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@116@52@116@152|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 1 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= this_barrier@89@01 1)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 92 | this_barrier@89@01 == 1 | live]
; [else-branch: 92 | this_barrier@89@01 != 1 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 92 | this_barrier@89@01 == 1]
(assert (= this_barrier@89@01 1))
; [eval] tid == 1 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= tid@86@01 1))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= tid@86@01 1)))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 93 | tid@86@01 == 1 | live]
; [else-branch: 93 | tid@86@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 93 | tid@86@01 == 1]
(assert (= tid@86@01 1))
; [eval] (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
(declare-const i@129@01 Int)
(push) ; 8
; [eval] half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value
; [eval] half <= i && i < gsize
; [eval] half <= i
(push) ; 9
; [then-branch: 94 | !(half@92@01 <= i@129@01) | live]
; [else-branch: 94 | half@92@01 <= i@129@01 | live]
(push) ; 10
; [then-branch: 94 | !(half@92@01 <= i@129@01)]
(assert (not (<= half@92@01 i@129@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 94 | half@92@01 <= i@129@01]
(assert (<= half@92@01 i@129@01))
; [eval] i < gsize
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= half@92@01 i@129@01) (not (<= half@92@01 i@129@01))))
(push) ; 9
; [then-branch: 95 | half@92@01 <= i@129@01 && i@129@01 < gsize@85@01 | live]
; [else-branch: 95 | !(half@92@01 <= i@129@01 && i@129@01 < gsize@85@01) | live]
(push) ; 10
; [then-branch: 95 | half@92@01 <= i@129@01 && i@129@01 < gsize@85@01]
(assert (and (<= half@92@01 i@129@01) (< i@129@01 gsize@85@01)))
; [eval] this.dst[1].Integer_value >= this.src[i].Integer_value
; [eval] this.dst[1]
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@102@01 r)
          (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          tid@86@01))
      (=
        ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef13|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@102@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          1))
        (Seq_contains
          (Seq_range 0 gsize@85@01)
          (inv@101@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
            1))))
      (/ (to_real 1) (to_real gsize@85@01))
      $Perm.No)
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          1)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          tid@86@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@129@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  i@129@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@102@01 r)
          (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          tid@86@01))
      (=
        ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef13|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@102@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          i@129@01))
        (Seq_contains
          (Seq_range 0 gsize@85@01)
          (inv@101@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
            i@129@01))))
      (/ (to_real 1) (to_real gsize@85@01))
      $Perm.No)
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          i@129@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          tid@86@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 95 | !(half@92@01 <= i@129@01 && i@129@01 < gsize@85@01)]
(assert (not (and (<= half@92@01 i@129@01) (< i@129@01 gsize@85@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@102@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01))
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef13|)))
; Joined path conditions
(assert (or
  (not (and (<= half@92@01 i@129@01) (< i@129@01 gsize@85@01)))
  (and (<= half@92@01 i@129@01) (< i@129@01 gsize@85@01))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@102@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01))
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef13|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@129@01 Int)) (!
  (and
    (or (<= half@92@01 i@129@01) (not (<= half@92@01 i@129@01)))
    (or
      (not (and (<= half@92@01 i@129@01) (< i@129@01 gsize@85@01)))
      (and (<= half@92@01 i@129@01) (< i@129@01 gsize@85@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
    i@129@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@117@52@117@156-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 93 | tid@86@01 != 1]
(assert (not (= tid@86@01 1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@102@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01))
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef13|)))
(assert (=>
  (= tid@86@01 1)
  (and
    (= tid@86@01 1)
    (forall ((i@129@01 Int)) (!
      (and
        (or (<= half@92@01 i@129@01) (not (<= half@92@01 i@129@01)))
        (or
          (not (and (<= half@92@01 i@129@01) (< i@129@01 gsize@85@01)))
          (and (<= half@92@01 i@129@01) (< i@129@01 gsize@85@01))))
      :pattern ((Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
        i@129@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@117@52@117@156-aux|)))))
; Joined path conditions
(assert (or (not (= tid@86@01 1)) (= tid@86@01 1)))
(pop) ; 5
(push) ; 5
; [else-branch: 92 | this_barrier@89@01 != 1]
(assert (not (= this_barrier@89@01 1)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@102@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@101@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
        tid@86@01))
    (=
      ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@125@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef13|)))
(assert (=>
  (= this_barrier@89@01 1)
  (and
    (= this_barrier@89@01 1)
    (=>
      (= tid@86@01 1)
      (and
        (= tid@86@01 1)
        (forall ((i@129@01 Int)) (!
          (and
            (or (<= half@92@01 i@129@01) (not (<= half@92@01 i@129@01)))
            (or
              (not (and (<= half@92@01 i@129@01) (< i@129@01 gsize@85@01)))
              (and (<= half@92@01 i@129@01) (< i@129@01 gsize@85@01))))
          :pattern ((Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
            i@129@01))
          :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@117@52@117@156-aux|))))
    (or (not (= tid@86@01 1)) (= tid@86@01 1)))))
; Joined path conditions
(assert (=>
  (and (= this_barrier@89@01 1) (= tid@86@01 1))
  (forall ((i@129@01 Int)) (!
    (=>
      (and (<= half@92@01 i@129@01) (< i@129@01 gsize@85@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
          1))
        ($FVF.lookup_Integer_value (as sm@127@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
          i@129@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))
      i@129@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@117@52@117@156|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@130@01 $Snap)
(assert (= $t@130@01 ($Snap.combine ($Snap.first $t@130@01) ($Snap.second $t@130@01))))
(assert (= ($Snap.first $t@130@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@130@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@130@01))
    ($Snap.second ($Snap.second $t@130@01)))))
(assert (= ($Snap.first ($Snap.second $t@130@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@130@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@130@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@130@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@130@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@130@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@130@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
(declare-const $k@131@01 $Perm)
(assert ($Perm.isReadVar $k@131@01))
(assert (<= $Perm.No $k@131@01))
(assert (<= $k@131@01 $Perm.Write))
(assert (=> (< $Perm.No $k@131@01) (not (= this@83@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))
  gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))
(declare-const $k@132@01 $Perm)
(assert ($Perm.isReadVar $k@132@01))
(assert (<= $Perm.No $k@132@01))
(assert (<= $k@132@01 $Perm.Write))
(assert (=> (< $Perm.No $k@132@01) (not (= this@83@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@132@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))
  gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@133@01 Int)
(declare-const jx@134@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 6
; [then-branch: 96 | !(ix@133@01 >= 0) | live]
; [else-branch: 96 | ix@133@01 >= 0 | live]
(push) ; 7
; [then-branch: 96 | !(ix@133@01 >= 0)]
(assert (not (>= ix@133@01 0)))
(pop) ; 7
(push) ; 7
; [else-branch: 96 | ix@133@01 >= 0]
(assert (>= ix@133@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 97 | !(ix@133@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))|) | live]
; [else-branch: 97 | ix@133@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))| | live]
(push) ; 9
; [then-branch: 97 | !(ix@133@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))|)]
(assert (not
  (<
    ix@133@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 97 | ix@133@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))|]
(assert (<
  ix@133@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))
; [eval] jx >= 0
(push) ; 10
; [then-branch: 98 | !(jx@134@01 >= 0) | live]
; [else-branch: 98 | jx@134@01 >= 0 | live]
(push) ; 11
; [then-branch: 98 | !(jx@134@01 >= 0)]
(assert (not (>= jx@134@01 0)))
(pop) ; 11
(push) ; 11
; [else-branch: 98 | jx@134@01 >= 0]
(assert (>= jx@134@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 99 | !(jx@134@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))|) | live]
; [else-branch: 99 | jx@134@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))| | live]
(push) ; 13
; [then-branch: 99 | !(jx@134@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))|)]
(assert (not
  (<
    jx@134@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))
(pop) ; 13
(push) ; 13
; [else-branch: 99 | jx@134@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))|]
(assert (<
  jx@134@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))
; [eval] ix != jx
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@134@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
  (not
    (<
      jx@134@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@134@01 0)
  (and
    (>= jx@134@01 0)
    (or
      (<
        jx@134@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      (not
        (<
          jx@134@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))
(assert (or (>= jx@134@01 0) (not (>= jx@134@01 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@133@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
  (and
    (<
      ix@133@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
    (=>
      (>= jx@134@01 0)
      (and
        (>= jx@134@01 0)
        (or
          (<
            jx@134@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          (not
            (<
              jx@134@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
    (or (>= jx@134@01 0) (not (>= jx@134@01 0))))))
(assert (or
  (<
    ix@133@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
  (not
    (<
      ix@133@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@133@01 0)
  (and
    (>= ix@133@01 0)
    (=>
      (<
        ix@133@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      (and
        (<
          ix@133@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        (=>
          (>= jx@134@01 0)
          (and
            (>= jx@134@01 0)
            (or
              (<
                jx@134@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
              (not
                (<
                  jx@134@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
        (or (>= jx@134@01 0) (not (>= jx@134@01 0)))))
    (or
      (<
        ix@133@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      (not
        (<
          ix@133@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))
(assert (or (>= ix@133@01 0) (not (>= ix@133@01 0))))
(push) ; 6
; [then-branch: 100 | ix@133@01 >= 0 && ix@133@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))| && jx@134@01 >= 0 && jx@134@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))| && ix@133@01 != jx@134@01 | live]
; [else-branch: 100 | !(ix@133@01 >= 0 && ix@133@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))| && jx@134@01 >= 0 && jx@134@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))| && ix@133@01 != jx@134@01) | live]
(push) ; 7
; [then-branch: 100 | ix@133@01 >= 0 && ix@133@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))| && jx@134@01 >= 0 && jx@134@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))| && ix@133@01 != jx@134@01]
(assert (and
  (>= ix@133@01 0)
  (and
    (<
      ix@133@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
    (and
      (>= jx@134@01 0)
      (and
        (<
          jx@134@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        (not (= ix@133@01 jx@134@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 100 | !(ix@133@01 >= 0 && ix@133@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))| && jx@134@01 >= 0 && jx@134@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@130@01))))))| && ix@133@01 != jx@134@01)]
(assert (not
  (and
    (>= ix@133@01 0)
    (and
      (<
        ix@133@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      (and
        (>= jx@134@01 0)
        (and
          (<
            jx@134@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          (not (= ix@133@01 jx@134@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>= ix@133@01 0)
    (and
      (<
        ix@133@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      (and
        (>= jx@134@01 0)
        (and
          (<
            jx@134@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          (not (= ix@133@01 jx@134@01))))))
  (and
    (>= ix@133@01 0)
    (<
      ix@133@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
    (>= jx@134@01 0)
    (<
      jx@134@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
    (not (= ix@133@01 jx@134@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@133@01 0)
      (and
        (<
          ix@133@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        (and
          (>= jx@134@01 0)
          (and
            (<
              jx@134@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            (not (= ix@133@01 jx@134@01)))))))
  (and
    (>= ix@133@01 0)
    (and
      (<
        ix@133@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      (and
        (>= jx@134@01 0)
        (and
          (<
            jx@134@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          (not (= ix@133@01 jx@134@01))))))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@133@01 Int) (jx@134@01 Int)) (!
  (and
    (=>
      (>= ix@133@01 0)
      (and
        (>= ix@133@01 0)
        (=>
          (<
            ix@133@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          (and
            (<
              ix@133@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            (=>
              (>= jx@134@01 0)
              (and
                (>= jx@134@01 0)
                (or
                  (<
                    jx@134@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
                  (not
                    (<
                      jx@134@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
            (or (>= jx@134@01 0) (not (>= jx@134@01 0)))))
        (or
          (<
            ix@133@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          (not
            (<
              ix@133@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
    (or (>= ix@133@01 0) (not (>= ix@133@01 0)))
    (=>
      (and
        (>= ix@133@01 0)
        (and
          (<
            ix@133@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          (and
            (>= jx@134@01 0)
            (and
              (<
                jx@134@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
              (not (= ix@133@01 jx@134@01))))))
      (and
        (>= ix@133@01 0)
        (<
          ix@133@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        (>= jx@134@01 0)
        (<
          jx@134@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        (not (= ix@133@01 jx@134@01))))
    (or
      (not
        (and
          (>= ix@133@01 0)
          (and
            (<
              ix@133@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            (and
              (>= jx@134@01 0)
              (and
                (<
                  jx@134@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
                (not (= ix@133@01 jx@134@01)))))))
      (and
        (>= ix@133@01 0)
        (and
          (<
            ix@133@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          (and
            (>= jx@134@01 0)
            (and
              (<
                jx@134@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
              (not (= ix@133@01 jx@134@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
    ix@133@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
    jx@134@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@129@11@129@139-aux|)))
(assert (forall ((ix@133@01 Int) (jx@134@01 Int)) (!
  (=>
    (and
      (>= ix@133@01 0)
      (and
        (<
          ix@133@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        (and
          (>= jx@134@01 0)
          (and
            (<
              jx@134@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            (not (= ix@133@01 jx@134@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
          ix@133@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
          jx@134@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
    ix@133@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
    jx@134@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@129@11@129@139|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))
(declare-const i@135@01 Int)
(push) ; 5
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@85@01) i@135@01))
; [eval] this.src[i]
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@135@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  i@135@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= gsize@85@01 0))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(declare-fun inv@136@01 ($Ref) Int)
(declare-fun img@137@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 5
(assert (not (forall ((i@135@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@85@01) i@135@01)
    (or
      (= (/ (to_real 1) (to_real gsize@85@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))))
  
  :qid |quant-u-25|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((i1@135@01 Int) (i2@135@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) i1@135@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) i2@135@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
          i1@135@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
          i2@135@01)))
    (= i1@135@01 i2@135@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@135@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@85@01) i@135@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
    (and
      (=
        (inv@136@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
          i@135@01))
        i@135@01)
      (img@137@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
        i@135@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
    i@135@01))
  :qid |quant-u-26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@137@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
        (inv@136@01 r))
      r))
  :pattern ((inv@136@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@135@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
    i@135@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@135@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@85@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
    i@135@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@135@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@85@01) i@135@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
          i@135@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
    i@135@01))
  :qid |Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))
  $Snap.unit))
; [eval] this.src == old(this.src)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.src)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))
  $Snap.unit))
; [eval] this.dst == old(this.dst)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@132@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.dst)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 1))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= sys__result@94@01 1)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 101 | sys__result@94@01 == 1 | live]
; [else-branch: 101 | sys__result@94@01 != 1 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 101 | sys__result@94@01 == 1]
(assert (= sys__result@94@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))))
; [eval] tid == 0
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= tid@86@01 0))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= tid@86@01 0)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 102 | tid@86@01 == 0 | live]
; [else-branch: 102 | tid@86@01 != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 102 | tid@86@01 == 0]
(assert (= tid@86@01 0))
; [eval] this.dst[0]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@132@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(declare-const sm@138@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
    0))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      0))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0)
      $Ref.null))))
; [eval] tid == 0
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= tid@86@01 0))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 103 | tid@86@01 == 0 | live]
; [else-branch: 103 | tid@86@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 103 | tid@86@01 == 0]
; [eval] this.dst[1]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@132@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(declare-const sm@139@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
    1))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
    1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      1))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [then-branch: 104 | sys__result@94@01 == 0 | dead]
; [else-branch: 104 | sys__result@94@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 104 | sys__result@94@01 != 0]
(assert (not (= sys__result@94@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this_barrier@89@01 1)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [then-branch: 105 | this_barrier@89@01 == 1 | live]
; [else-branch: 105 | this_barrier@89@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 105 | this_barrier@89@01 == 1]
(assert (= this_barrier@89@01 1))
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= tid@86@01 0))))
(check-sat)
; unknown
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
; [then-branch: 106 | tid@86@01 == 0 | live]
; [else-branch: 106 | tid@86@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 106 | tid@86@01 == 0]
; [eval] (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
(declare-const i@140@01 Int)
(push) ; 13
; [eval] 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] 0 <= i && i < half
; [eval] 0 <= i
(push) ; 14
; [then-branch: 107 | !(0 <= i@140@01) | live]
; [else-branch: 107 | 0 <= i@140@01 | live]
(push) ; 15
; [then-branch: 107 | !(0 <= i@140@01)]
(assert (not (<= 0 i@140@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 107 | 0 <= i@140@01]
(assert (<= 0 i@140@01))
; [eval] i < half
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@140@01) (not (<= 0 i@140@01))))
(push) ; 14
; [then-branch: 108 | 0 <= i@140@01 && i@140@01 < half@92@01 | live]
; [else-branch: 108 | !(0 <= i@140@01 && i@140@01 < half@92@01) | live]
(push) ; 15
; [then-branch: 108 | 0 <= i@140@01 && i@140@01 < half@92@01]
(assert (and (<= 0 i@140@01) (< i@140@01 half@92@01)))
; [eval] this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] this.dst[0]
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@132@01)))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(declare-const sm@141@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@137@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef17|)))
(declare-const pm@142@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@142@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@137@01 r)
            (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
          (/ (to_real 1) (to_real gsize@85@01))
          $Perm.No)
        (ite
          (=
            r
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
              0))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            1))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@142@01  $FPM) r))
  :qid |qp.resPrmSumDef18|)))
(push) ; 16
(assert (not (<
  $Perm.No
  ($FVF.perm_Integer_value (as pm@142@01  $FPM) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
    0)))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@140@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  i@140@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@137@01 r)
          (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          0))
      (=
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef16|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          1))
      (=
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef17|))))
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (img@137@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
            i@140@01))
          (Seq_contains
            (Seq_range 0 gsize@85@01)
            (inv@136@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
              i@140@01))))
        (/ (to_real 1) (to_real gsize@85@01))
        $Perm.No)
      (ite
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
            i@140@01)
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            0))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
          i@140@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          1))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(pop) ; 15
(push) ; 15
; [else-branch: 108 | !(0 <= i@140@01 && i@140@01 < half@92@01)]
(assert (not (and (<= 0 i@140@01) (< i@140@01 half@92@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@137@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@142@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@137@01 r)
            (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
          (/ (to_real 1) (to_real gsize@85@01))
          $Perm.No)
        (ite
          (=
            r
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
              0))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            1))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@142@01  $FPM) r))
  :qid |qp.resPrmSumDef18|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 i@140@01) (< i@140@01 half@92@01)))
  (and (<= 0 i@140@01) (< i@140@01 half@92@01))))
(pop) ; 13
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@137@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@142@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@137@01 r)
            (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
          (/ (to_real 1) (to_real gsize@85@01))
          $Perm.No)
        (ite
          (=
            r
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
              0))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            1))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@142@01  $FPM) r))
  :qid |qp.resPrmSumDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@140@01 Int)) (!
  (and
    (or (<= 0 i@140@01) (not (<= 0 i@140@01)))
    (or
      (not (and (<= 0 i@140@01) (< i@140@01 half@92@01)))
      (and (<= 0 i@140@01) (< i@140@01 half@92@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
    i@140@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@136@51@136@151-aux|)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@137@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@142@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@137@01 r)
            (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
          (/ (to_real 1) (to_real gsize@85@01))
          $Perm.No)
        (ite
          (=
            r
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
              0))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            1))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@142@01  $FPM) r))
  :qid |qp.resPrmSumDef18|)))
(assert (=>
  (= tid@86@01 0)
  (forall ((i@140@01 Int)) (!
    (and
      (or (<= 0 i@140@01) (not (<= 0 i@140@01)))
      (or
        (not (and (<= 0 i@140@01) (< i@140@01 half@92@01)))
        (and (<= 0 i@140@01) (< i@140@01 half@92@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
      i@140@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@136@51@136@151-aux|))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@137@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@142@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@137@01 r)
            (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
          (/ (to_real 1) (to_real gsize@85@01))
          $Perm.No)
        (ite
          (=
            r
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
              0))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            1))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@142@01  $FPM) r))
  :qid |qp.resPrmSumDef18|)))
(assert (=>
  (= this_barrier@89@01 1)
  (and
    (= this_barrier@89@01 1)
    (=>
      (= tid@86@01 0)
      (forall ((i@140@01 Int)) (!
        (and
          (or (<= 0 i@140@01) (not (<= 0 i@140@01)))
          (or
            (not (and (<= 0 i@140@01) (< i@140@01 half@92@01)))
            (and (<= 0 i@140@01) (< i@140@01 half@92@01))))
        :pattern ((Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
          i@140@01))
        :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@136@51@136@151-aux|))))))
(assert (= this_barrier@89@01 1))
(assert (=>
  (and (= this_barrier@89@01 1) (= tid@86@01 0))
  (forall ((i@140@01 Int)) (!
    (=>
      (and (<= 0 i@140@01) (< i@140@01 half@92@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          0))
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
          i@140@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
      i@140@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@136@51@136@151|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [then-branch: 109 | this_barrier@89@01 == 1 | live]
; [else-branch: 109 | this_barrier@89@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 109 | this_barrier@89@01 == 1]
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= tid@86@01 0))))
(check-sat)
; unknown
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
; [then-branch: 110 | tid@86@01 == 0 | live]
; [else-branch: 110 | tid@86@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 110 | tid@86@01 == 0]
; [eval] (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
(declare-const i@143@01 Int)
(push) ; 13
; [eval] half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value
; [eval] half <= i && i < gsize
; [eval] half <= i
(push) ; 14
; [then-branch: 111 | !(half@92@01 <= i@143@01) | live]
; [else-branch: 111 | half@92@01 <= i@143@01 | live]
(push) ; 15
; [then-branch: 111 | !(half@92@01 <= i@143@01)]
(assert (not (<= half@92@01 i@143@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 111 | half@92@01 <= i@143@01]
(assert (<= half@92@01 i@143@01))
; [eval] i < gsize
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= half@92@01 i@143@01) (not (<= half@92@01 i@143@01))))
(push) ; 14
; [then-branch: 112 | half@92@01 <= i@143@01 && i@143@01 < gsize@85@01 | live]
; [else-branch: 112 | !(half@92@01 <= i@143@01 && i@143@01 < gsize@85@01) | live]
(push) ; 15
; [then-branch: 112 | half@92@01 <= i@143@01 && i@143@01 < gsize@85@01]
(assert (and (<= half@92@01 i@143@01) (< i@143@01 gsize@85@01)))
; [eval] this.dst[1].Integer_value >= this.src[i].Integer_value
; [eval] this.dst[1]
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@132@01)))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@137@01 r)
          (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          0))
      (=
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef16|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          1))
      (=
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef17|))))
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (img@137@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            1))
          (Seq_contains
            (Seq_range 0 gsize@85@01)
            (inv@136@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
              1))))
        (/ (to_real 1) (to_real gsize@85@01))
        $Perm.No)
      (ite
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            1)
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            0))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          1)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          1))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@143@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  i@143@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@137@01 r)
          (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          0))
      (=
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef16|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          1))
      (=
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef17|))))
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (img@137@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
            i@143@01))
          (Seq_contains
            (Seq_range 0 gsize@85@01)
            (inv@136@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
              i@143@01))))
        (/ (to_real 1) (to_real gsize@85@01))
        $Perm.No)
      (ite
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
            i@143@01)
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
            0))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
          i@143@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          1))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 16
; 0,00s
; (get-info :all-statistics)
(pop) ; 15
(push) ; 15
; [else-branch: 112 | !(half@92@01 <= i@143@01 && i@143@01 < gsize@85@01)]
(assert (not (and (<= half@92@01 i@143@01) (< i@143@01 gsize@85@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@137@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef17|)))
; Joined path conditions
(assert (or
  (not (and (<= half@92@01 i@143@01) (< i@143@01 gsize@85@01)))
  (and (<= half@92@01 i@143@01) (< i@143@01 gsize@85@01))))
(pop) ; 13
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@137@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef17|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@143@01 Int)) (!
  (and
    (or (<= half@92@01 i@143@01) (not (<= half@92@01 i@143@01)))
    (or
      (not (and (<= half@92@01 i@143@01) (< i@143@01 gsize@85@01)))
      (and (<= half@92@01 i@143@01) (< i@143@01 gsize@85@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
    i@143@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@137@51@137@155-aux|)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@137@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef17|)))
(assert (=>
  (= tid@86@01 0)
  (forall ((i@143@01 Int)) (!
    (and
      (or (<= half@92@01 i@143@01) (not (<= half@92@01 i@143@01)))
      (or
        (not (and (<= half@92@01 i@143@01) (< i@143@01 gsize@85@01)))
        (and (<= half@92@01 i@143@01) (< i@143@01 gsize@85@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
      i@143@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@137@51@137@155-aux|))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@137@01 r)
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@136@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@138@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@139@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef17|)))
(assert (=>
  (and (= this_barrier@89@01 1) (= tid@86@01 0))
  (forall ((i@143@01 Int)) (!
    (and
      (or (<= half@92@01 i@143@01) (not (<= half@92@01 i@143@01)))
      (or
        (not (and (<= half@92@01 i@143@01) (< i@143@01 gsize@85@01)))
        (and (<= half@92@01 i@143@01) (< i@143@01 gsize@85@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
      i@143@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@137@51@137@155-aux|))))
(assert (=>
  (and (= this_barrier@89@01 1) (= tid@86@01 0))
  (forall ((i@143@01 Int)) (!
    (=>
      (and (<= half@92@01 i@143@01) (< i@143@01 gsize@85@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
          1))
        ($FVF.lookup_Integer_value (as sm@141@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
          i@143@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))
      i@143@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@137@51@137@155|))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 102 | tid@86@01 != 0]
(assert (not (= tid@86@01 0)))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
  $Snap.unit))
; [eval] tid == 0
; [then-branch: 113 | tid@86@01 == 0 | dead]
; [else-branch: 113 | tid@86@01 != 0 | live]
(push) ; 7
; [else-branch: 113 | tid@86@01 != 0]
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))))
; [eval] sys__result == 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [then-branch: 114 | sys__result@94@01 == 0 | dead]
; [else-branch: 114 | sys__result@94@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 114 | sys__result@94@01 != 0]
(assert (not (= sys__result@94@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= this_barrier@89@01 1)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [then-branch: 115 | this_barrier@89@01 == 1 | live]
; [else-branch: 115 | this_barrier@89@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 115 | this_barrier@89@01 == 1]
(assert (= this_barrier@89@01 1))
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(push) ; 11
; [then-branch: 116 | tid@86@01 == 0 | dead]
; [else-branch: 116 | tid@86@01 != 0 | live]
(push) ; 12
; [else-branch: 116 | tid@86@01 != 0]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (= this_barrier@89@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unknown
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [then-branch: 117 | this_barrier@89@01 == 1 | live]
; [else-branch: 117 | this_barrier@89@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 117 | this_barrier@89@01 == 1]
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(push) ; 11
; [then-branch: 118 | tid@86@01 == 0 | dead]
; [else-branch: 118 | tid@86@01 != 0 | live]
(push) ; 12
; [else-branch: 118 | tid@86@01 != 0]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 101 | sys__result@94@01 != 1]
(assert (not (= sys__result@94@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))))
; [eval] sys__result == 0
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 0))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= sys__result@94@01 0)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 119 | sys__result@94@01 == 0 | live]
; [else-branch: 119 | sys__result@94@01 != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 119 | sys__result@94@01 == 0]
(assert (= sys__result@94@01 0))
; [eval] this.dst[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@132@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@86@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@86@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(declare-const sm@144@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@144@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
    tid@86@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        tid@86@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        tid@86@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        tid@86@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        tid@86@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      tid@86@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
      tid@86@01))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))
        tid@86@01)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [then-branch: 120 | this_barrier@89@01 == 1 | dead]
; [else-branch: 120 | this_barrier@89@01 != 1 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 120 | this_barrier@89@01 != 1]
(assert (not (= this_barrier@89@01 1)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (= this_barrier@89@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 7
; [then-branch: 121 | this_barrier@89@01 == 1 | dead]
; [else-branch: 121 | this_barrier@89@01 != 1 | live]
(push) ; 8
; [else-branch: 121 | this_barrier@89@01 != 1]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 119 | sys__result@94@01 != 0]
(assert (not (= sys__result@94@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [then-branch: 122 | this_barrier@89@01 == 1 | dead]
; [else-branch: 122 | this_barrier@89@01 != 1 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 122 | this_barrier@89@01 != 1]
(assert (not (= this_barrier@89@01 1)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (= this_barrier@89@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@130@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 7
; [then-branch: 123 | this_barrier@89@01 == 1 | dead]
; [else-branch: 123 | this_barrier@89@01 != 1 | live]
(push) ; 8
; [else-branch: 123 | this_barrier@89@01 != 1]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 86 | last_barrier@90@01 != 0]
(assert (not (= last_barrier@90@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> half + half == gsize
; [eval] this_barrier == 1
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= this_barrier@89@01 1))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 124 | this_barrier@89@01 == 1 | dead]
; [else-branch: 124 | this_barrier@89@01 != 1 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 124 | this_barrier@89@01 != 1]
(assert (not (= this_barrier@89@01 1)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (= this_barrier@89@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 4
; [then-branch: 125 | this_barrier@89@01 == 1 | dead]
; [else-branch: 125 | this_barrier@89@01 != 1 | live]
(push) ; 5
; [else-branch: 125 | this_barrier@89@01 != 1]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 1 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 4
; [then-branch: 126 | this_barrier@89@01 == 1 | dead]
; [else-branch: 126 | this_barrier@89@01 != 1 | live]
(push) ; 5
; [else-branch: 126 | this_barrier@89@01 != 1]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(declare-const $t@145@01 $Snap)
(assert (= $t@145@01 ($Snap.combine ($Snap.first $t@145@01) ($Snap.second $t@145@01))))
(assert (= ($Snap.first $t@145@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@145@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@145@01))
    ($Snap.second ($Snap.second $t@145@01)))))
(assert (= ($Snap.first ($Snap.second $t@145@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@145@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@145@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@145@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@145@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
(declare-const $k@146@01 $Perm)
(assert ($Perm.isReadVar $k@146@01))
(assert (<= $Perm.No $k@146@01))
(assert (<= $k@146@01 $Perm.Write))
(assert (=> (< $Perm.No $k@146@01) (not (= this@83@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@146@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
  gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
(declare-const $k@147@01 $Perm)
(assert ($Perm.isReadVar $k@147@01))
(assert (<= $Perm.No $k@147@01))
(assert (<= $k@147@01 $Perm.Write))
(assert (=> (< $Perm.No $k@147@01) (not (= this@83@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  gsize@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@148@01 Int)
(declare-const jx@149@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 6
; [then-branch: 127 | !(ix@148@01 >= 0) | live]
; [else-branch: 127 | ix@148@01 >= 0 | live]
(push) ; 7
; [then-branch: 127 | !(ix@148@01 >= 0)]
(assert (not (>= ix@148@01 0)))
(pop) ; 7
(push) ; 7
; [else-branch: 127 | ix@148@01 >= 0]
(assert (>= ix@148@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@146@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 128 | !(ix@148@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))|) | live]
; [else-branch: 128 | ix@148@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))| | live]
(push) ; 9
; [then-branch: 128 | !(ix@148@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))|)]
(assert (not
  (<
    ix@148@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 128 | ix@148@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))|]
(assert (<
  ix@148@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
; [eval] jx >= 0
(push) ; 10
; [then-branch: 129 | !(jx@149@01 >= 0) | live]
; [else-branch: 129 | jx@149@01 >= 0 | live]
(push) ; 11
; [then-branch: 129 | !(jx@149@01 >= 0)]
(assert (not (>= jx@149@01 0)))
(pop) ; 11
(push) ; 11
; [else-branch: 129 | jx@149@01 >= 0]
(assert (>= jx@149@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@146@01)))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [then-branch: 130 | !(jx@149@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))|) | live]
; [else-branch: 130 | jx@149@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))| | live]
(push) ; 13
; [then-branch: 130 | !(jx@149@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))|)]
(assert (not
  (<
    jx@149@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
(pop) ; 13
(push) ; 13
; [else-branch: 130 | jx@149@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))|]
(assert (<
  jx@149@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
; [eval] ix != jx
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@149@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
  (not
    (<
      jx@149@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@149@01 0)
  (and
    (>= jx@149@01 0)
    (or
      (<
        jx@149@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      (not
        (<
          jx@149@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
(assert (or (>= jx@149@01 0) (not (>= jx@149@01 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@148@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
  (and
    (<
      ix@148@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    (=>
      (>= jx@149@01 0)
      (and
        (>= jx@149@01 0)
        (or
          (<
            jx@149@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
          (not
            (<
              jx@149@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
    (or (>= jx@149@01 0) (not (>= jx@149@01 0))))))
(assert (or
  (<
    ix@148@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
  (not
    (<
      ix@148@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@148@01 0)
  (and
    (>= ix@148@01 0)
    (=>
      (<
        ix@148@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      (and
        (<
          ix@148@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (=>
          (>= jx@149@01 0)
          (and
            (>= jx@149@01 0)
            (or
              (<
                jx@149@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
              (not
                (<
                  jx@149@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        (or (>= jx@149@01 0) (not (>= jx@149@01 0)))))
    (or
      (<
        ix@148@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      (not
        (<
          ix@148@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
(assert (or (>= ix@148@01 0) (not (>= ix@148@01 0))))
(push) ; 6
; [then-branch: 131 | ix@148@01 >= 0 && ix@148@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))| && jx@149@01 >= 0 && jx@149@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))| && ix@148@01 != jx@149@01 | live]
; [else-branch: 131 | !(ix@148@01 >= 0 && ix@148@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))| && jx@149@01 >= 0 && jx@149@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))| && ix@148@01 != jx@149@01) | live]
(push) ; 7
; [then-branch: 131 | ix@148@01 >= 0 && ix@148@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))| && jx@149@01 >= 0 && jx@149@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))| && ix@148@01 != jx@149@01]
(assert (and
  (>= ix@148@01 0)
  (and
    (<
      ix@148@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    (and
      (>= jx@149@01 0)
      (and
        (<
          jx@149@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (not (= ix@148@01 jx@149@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@146@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@146@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 131 | !(ix@148@01 >= 0 && ix@148@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))| && jx@149@01 >= 0 && jx@149@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))| && ix@148@01 != jx@149@01)]
(assert (not
  (and
    (>= ix@148@01 0)
    (and
      (<
        ix@148@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      (and
        (>= jx@149@01 0)
        (and
          (<
            jx@149@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
          (not (= ix@148@01 jx@149@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>= ix@148@01 0)
    (and
      (<
        ix@148@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      (and
        (>= jx@149@01 0)
        (and
          (<
            jx@149@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
          (not (= ix@148@01 jx@149@01))))))
  (and
    (>= ix@148@01 0)
    (<
      ix@148@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    (>= jx@149@01 0)
    (<
      jx@149@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    (not (= ix@148@01 jx@149@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@148@01 0)
      (and
        (<
          ix@148@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (and
          (>= jx@149@01 0)
          (and
            (<
              jx@149@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
            (not (= ix@148@01 jx@149@01)))))))
  (and
    (>= ix@148@01 0)
    (and
      (<
        ix@148@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      (and
        (>= jx@149@01 0)
        (and
          (<
            jx@149@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
          (not (= ix@148@01 jx@149@01))))))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@148@01 Int) (jx@149@01 Int)) (!
  (and
    (=>
      (>= ix@148@01 0)
      (and
        (>= ix@148@01 0)
        (=>
          (<
            ix@148@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
          (and
            (<
              ix@148@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
            (=>
              (>= jx@149@01 0)
              (and
                (>= jx@149@01 0)
                (or
                  (<
                    jx@149@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
                  (not
                    (<
                      jx@149@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            (or (>= jx@149@01 0) (not (>= jx@149@01 0)))))
        (or
          (<
            ix@148@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
          (not
            (<
              ix@148@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
    (or (>= ix@148@01 0) (not (>= ix@148@01 0)))
    (=>
      (and
        (>= ix@148@01 0)
        (and
          (<
            ix@148@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
          (and
            (>= jx@149@01 0)
            (and
              (<
                jx@149@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
              (not (= ix@148@01 jx@149@01))))))
      (and
        (>= ix@148@01 0)
        (<
          ix@148@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (>= jx@149@01 0)
        (<
          jx@149@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (not (= ix@148@01 jx@149@01))))
    (or
      (not
        (and
          (>= ix@148@01 0)
          (and
            (<
              ix@148@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
            (and
              (>= jx@149@01 0)
              (and
                (<
                  jx@149@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
                (not (= ix@148@01 jx@149@01)))))))
      (and
        (>= ix@148@01 0)
        (and
          (<
            ix@148@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
          (and
            (>= jx@149@01 0)
            (and
              (<
                jx@149@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
              (not (= ix@148@01 jx@149@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    ix@148@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    jx@149@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@129@11@129@139-aux|)))
(assert (forall ((ix@148@01 Int) (jx@149@01 Int)) (!
  (=>
    (and
      (>= ix@148@01 0)
      (and
        (<
          ix@148@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (and
          (>= jx@149@01 0)
          (and
            (<
              jx@149@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
            (not (= ix@148@01 jx@149@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
          ix@148@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
          jx@149@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    ix@148@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    jx@149@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@129@11@129@139|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(declare-const i@150@01 Int)
(push) ; 5
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@85@01) i@150@01))
; [eval] this.src[i]
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@146@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@150@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  i@150@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= gsize@85@01 0))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(declare-fun inv@151@01 ($Ref) Int)
(declare-fun img@152@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 5
(assert (not (forall ((i@150@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@85@01) i@150@01)
    (or
      (= (/ (to_real 1) (to_real gsize@85@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))))
  
  :qid |quant-u-27|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((i1@150@01 Int) (i2@150@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) i1@150@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) i2@150@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
          i1@150@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
          i2@150@01)))
    (= i1@150@01 i2@150@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@150@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@85@01) i@150@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
    (and
      (=
        (inv@151@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
          i@150@01))
        i@150@01)
      (img@152@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
        i@150@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    i@150@01))
  :qid |quant-u-28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@152@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@85@01) (inv@151@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@85@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
        (inv@151@01 r))
      r))
  :pattern ((inv@151@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@150@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@85@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    i@150@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@150@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@85@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    i@150@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@150@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@85@01) i@150@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@85@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
          i@150@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    i@150@01))
  :qid |Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Snap.unit))
; [eval] this.src == old(this.src)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@146@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.src)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
  $Snap.unit))
; [eval] this.dst == old(this.dst)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.dst)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@95@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 1))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= sys__result@94@01 1)))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 132 | sys__result@94@01 == 1 | live]
; [else-branch: 132 | sys__result@94@01 != 1 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 132 | sys__result@94@01 == 1]
(assert (= sys__result@94@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
; [eval] tid == 0
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= tid@86@01 0))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= tid@86@01 0)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 133 | tid@86@01 == 0 | live]
; [else-branch: 133 | tid@86@01 != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 133 | tid@86@01 == 0]
(assert (= tid@86@01 0))
; [eval] this.dst[0]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(declare-const sm@153@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@153@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    0))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        0))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        0))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      0))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        0)
      $Ref.null))))
; [eval] tid == 0
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= tid@86@01 0))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [then-branch: 134 | tid@86@01 == 0 | live]
; [else-branch: 134 | tid@86@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 134 | tid@86@01 == 0]
; [eval] this.dst[1]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(declare-const sm@154@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@154@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    1))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        1))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        1))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      1))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        1)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [then-branch: 135 | sys__result@94@01 == 0 | dead]
; [else-branch: 135 | sys__result@94@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 135 | sys__result@94@01 != 0]
(assert (not (= sys__result@94@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 136 | this_barrier@89@01 == 1 | dead]
; [else-branch: 136 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 136 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 137 | this_barrier@89@01 == 1 | dead]
; [else-branch: 137 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 137 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 133 | tid@86@01 != 0]
(assert (not (= tid@86@01 0)))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  $Snap.unit))
; [eval] tid == 0
; [then-branch: 138 | tid@86@01 == 0 | dead]
; [else-branch: 138 | tid@86@01 != 0 | live]
(push) ; 7
; [else-branch: 138 | tid@86@01 != 0]
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
; [eval] sys__result == 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [then-branch: 139 | sys__result@94@01 == 0 | dead]
; [else-branch: 139 | sys__result@94@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 139 | sys__result@94@01 != 0]
(assert (not (= sys__result@94@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 140 | this_barrier@89@01 == 1 | dead]
; [else-branch: 140 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 140 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 141 | this_barrier@89@01 == 1 | dead]
; [else-branch: 141 | this_barrier@89@01 != 1 | live]
(push) ; 10
; [else-branch: 141 | this_barrier@89@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 132 | sys__result@94@01 != 1]
(assert (not (= sys__result@94@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
; [eval] sys__result == 0
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= sys__result@94@01 0))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= sys__result@94@01 0)))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 142 | sys__result@94@01 == 0 | live]
; [else-branch: 142 | sys__result@94@01 != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 142 | sys__result@94@01 == 0]
(assert (= sys__result@94@01 0))
; [eval] this.dst[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@86@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@86@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(declare-const sm@155@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@155@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    tid@86@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        tid@86@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        tid@86@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        tid@86@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        tid@86@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      tid@86@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
      tid@86@01))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        tid@86@01)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 7
; [then-branch: 143 | this_barrier@89@01 == 1 | dead]
; [else-branch: 143 | this_barrier@89@01 != 1 | live]
(push) ; 8
; [else-branch: 143 | this_barrier@89@01 != 1]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 7
; [then-branch: 144 | this_barrier@89@01 == 1 | dead]
; [else-branch: 144 | this_barrier@89@01 != 1 | live]
(push) ; 8
; [else-branch: 144 | this_barrier@89@01 != 1]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 142 | sys__result@94@01 != 0]
(assert (not (= sys__result@94@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@94@01 this_barrier@89@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 7
; [then-branch: 145 | this_barrier@89@01 == 1 | dead]
; [else-branch: 145 | this_barrier@89@01 != 1 | live]
(push) ; 8
; [else-branch: 145 | this_barrier@89@01 != 1]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] this_barrier == 1
(push) ; 7
; [then-branch: 146 | this_barrier@89@01 == 1 | dead]
; [else-branch: 146 | this_barrier@89@01 != 1 | live]
(push) ; 8
; [else-branch: 146 | this_barrier@89@01 != 1]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- main_resources_of_1 ----------
(declare-const this@156@01 $Ref)
(declare-const tcount@157@01 Int)
(declare-const gsize@158@01 Int)
(declare-const gid@159@01 Int)
(declare-const k@160@01 Int)
(declare-const half@161@01 Int)
(declare-const offset@162@01 Int)
(declare-const this@163@01 $Ref)
(declare-const tcount@164@01 Int)
(declare-const gsize@165@01 Int)
(declare-const gid@166@01 Int)
(declare-const k@167@01 Int)
(declare-const half@168@01 Int)
(declare-const offset@169@01 Int)
(push) ; 1
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 ($Snap.combine ($Snap.first $t@170@01) ($Snap.second $t@170@01))))
(assert (= ($Snap.first $t@170@01) $Snap.unit))
; [eval] tcount == gsize
(assert (= tcount@164@01 gsize@165@01))
(assert (=
  ($Snap.second $t@170@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@170@01))
    ($Snap.second ($Snap.second $t@170@01)))))
(assert (= ($Snap.first ($Snap.second $t@170@01)) $Snap.unit))
; [eval] gid == 0
(assert (= gid@166@01 0))
(assert (=
  ($Snap.second ($Snap.second $t@170@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@170@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
(declare-const $k@171@01 $Perm)
(assert ($Perm.isReadVar $k@171@01))
(assert (<= $Perm.No $k@171@01))
(assert (<= $k@171@01 $Perm.Write))
(assert (=> (< $Perm.No $k@171@01) (not (= this@163@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@170@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))
  gsize@165@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
(declare-const $k@172@01 $Perm)
(assert ($Perm.isReadVar $k@172@01))
(assert (<= $Perm.No $k@172@01))
(assert (<= $k@172@01 $Perm.Write))
(assert (=> (< $Perm.No $k@172@01) (not (= this@163@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  gsize@165@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (<= 4 gsize@165@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (= (mod gsize@165@01 4) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@173@01 Int)
(declare-const jx@174@01 Int)
(set-option :timeout 0)
(push) ; 2
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 3
; [then-branch: 147 | !(ix@173@01 >= 0) | live]
; [else-branch: 147 | ix@173@01 >= 0 | live]
(push) ; 4
; [then-branch: 147 | !(ix@173@01 >= 0)]
(assert (not (>= ix@173@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 147 | ix@173@01 >= 0]
(assert (>= ix@173@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 148 | !(ix@173@01 < |First:(Second:(Second:($t@170@01)))|) | live]
; [else-branch: 148 | ix@173@01 < |First:(Second:(Second:($t@170@01)))| | live]
(push) ; 6
; [then-branch: 148 | !(ix@173@01 < |First:(Second:(Second:($t@170@01)))|)]
(assert (not
  (<
    ix@173@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 148 | ix@173@01 < |First:(Second:(Second:($t@170@01)))|]
(assert (<
  ix@173@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))
; [eval] jx >= 0
(push) ; 7
; [then-branch: 149 | !(jx@174@01 >= 0) | live]
; [else-branch: 149 | jx@174@01 >= 0 | live]
(push) ; 8
; [then-branch: 149 | !(jx@174@01 >= 0)]
(assert (not (>= jx@174@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 149 | jx@174@01 >= 0]
(assert (>= jx@174@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 150 | !(jx@174@01 < |First:(Second:(Second:($t@170@01)))|) | live]
; [else-branch: 150 | jx@174@01 < |First:(Second:(Second:($t@170@01)))| | live]
(push) ; 10
; [then-branch: 150 | !(jx@174@01 < |First:(Second:(Second:($t@170@01)))|)]
(assert (not
  (<
    jx@174@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 150 | jx@174@01 < |First:(Second:(Second:($t@170@01)))|]
(assert (<
  jx@174@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))
; [eval] ix != jx
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@174@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
  (not
    (<
      jx@174@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@174@01 0)
  (and
    (>= jx@174@01 0)
    (or
      (<
        jx@174@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (not
        (<
          jx@174@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))))))
(assert (or (>= jx@174@01 0) (not (>= jx@174@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@173@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
  (and
    (<
      ix@173@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
    (=>
      (>= jx@174@01 0)
      (and
        (>= jx@174@01 0)
        (or
          (<
            jx@174@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (not
            (<
              jx@174@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))))
    (or (>= jx@174@01 0) (not (>= jx@174@01 0))))))
(assert (or
  (<
    ix@173@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
  (not
    (<
      ix@173@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@173@01 0)
  (and
    (>= ix@173@01 0)
    (=>
      (<
        ix@173@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (and
        (<
          ix@173@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (=>
          (>= jx@174@01 0)
          (and
            (>= jx@174@01 0)
            (or
              (<
                jx@174@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
              (not
                (<
                  jx@174@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))))
        (or (>= jx@174@01 0) (not (>= jx@174@01 0)))))
    (or
      (<
        ix@173@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (not
        (<
          ix@173@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))))))
(assert (or (>= ix@173@01 0) (not (>= ix@173@01 0))))
(push) ; 3
; [then-branch: 151 | ix@173@01 >= 0 && ix@173@01 < |First:(Second:(Second:($t@170@01)))| && jx@174@01 >= 0 && jx@174@01 < |First:(Second:(Second:($t@170@01)))| && ix@173@01 != jx@174@01 | live]
; [else-branch: 151 | !(ix@173@01 >= 0 && ix@173@01 < |First:(Second:(Second:($t@170@01)))| && jx@174@01 >= 0 && jx@174@01 < |First:(Second:(Second:($t@170@01)))| && ix@173@01 != jx@174@01) | live]
(push) ; 4
; [then-branch: 151 | ix@173@01 >= 0 && ix@173@01 < |First:(Second:(Second:($t@170@01)))| && jx@174@01 >= 0 && jx@174@01 < |First:(Second:(Second:($t@170@01)))| && ix@173@01 != jx@174@01]
(assert (and
  (>= ix@173@01 0)
  (and
    (<
      ix@173@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
    (and
      (>= jx@174@01 0)
      (and
        (<
          jx@174@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (not (= ix@173@01 jx@174@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 151 | !(ix@173@01 >= 0 && ix@173@01 < |First:(Second:(Second:($t@170@01)))| && jx@174@01 >= 0 && jx@174@01 < |First:(Second:(Second:($t@170@01)))| && ix@173@01 != jx@174@01)]
(assert (not
  (and
    (>= ix@173@01 0)
    (and
      (<
        ix@173@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (and
        (>= jx@174@01 0)
        (and
          (<
            jx@174@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (not (= ix@173@01 jx@174@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= ix@173@01 0)
    (and
      (<
        ix@173@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (and
        (>= jx@174@01 0)
        (and
          (<
            jx@174@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (not (= ix@173@01 jx@174@01))))))
  (and
    (>= ix@173@01 0)
    (<
      ix@173@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
    (>= jx@174@01 0)
    (<
      jx@174@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
    (not (= ix@173@01 jx@174@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@173@01 0)
      (and
        (<
          ix@173@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (and
          (>= jx@174@01 0)
          (and
            (<
              jx@174@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
            (not (= ix@173@01 jx@174@01)))))))
  (and
    (>= ix@173@01 0)
    (and
      (<
        ix@173@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (and
        (>= jx@174@01 0)
        (and
          (<
            jx@174@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (not (= ix@173@01 jx@174@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@173@01 Int) (jx@174@01 Int)) (!
  (and
    (=>
      (>= ix@173@01 0)
      (and
        (>= ix@173@01 0)
        (=>
          (<
            ix@173@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (and
            (<
              ix@173@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
            (=>
              (>= jx@174@01 0)
              (and
                (>= jx@174@01 0)
                (or
                  (<
                    jx@174@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
                  (not
                    (<
                      jx@174@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))))
            (or (>= jx@174@01 0) (not (>= jx@174@01 0)))))
        (or
          (<
            ix@173@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (not
            (<
              ix@173@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))))
    (or (>= ix@173@01 0) (not (>= ix@173@01 0)))
    (=>
      (and
        (>= ix@173@01 0)
        (and
          (<
            ix@173@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (and
            (>= jx@174@01 0)
            (and
              (<
                jx@174@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
              (not (= ix@173@01 jx@174@01))))))
      (and
        (>= ix@173@01 0)
        (<
          ix@173@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (>= jx@174@01 0)
        (<
          jx@174@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (not (= ix@173@01 jx@174@01))))
    (or
      (not
        (and
          (>= ix@173@01 0)
          (and
            (<
              ix@173@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
            (and
              (>= jx@174@01 0)
              (and
                (<
                  jx@174@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
                (not (= ix@173@01 jx@174@01)))))))
      (and
        (>= ix@173@01 0)
        (and
          (<
            ix@173@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (and
            (>= jx@174@01 0)
            (and
              (<
                jx@174@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
              (not (= ix@173@01 jx@174@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    ix@173@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    jx@174@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@151@12@151@140-aux|)))
(assert (forall ((ix@173@01 Int) (jx@174@01 Int)) (!
  (=>
    (and
      (>= ix@173@01 0)
      (and
        (<
          ix@173@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (and
          (>= jx@174@01 0)
          (and
            (<
              jx@174@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
            (not (= ix@173@01 jx@174@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          ix@173@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          jx@174@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    ix@173@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    jx@174@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@151@12@151@140|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))
(declare-const i@175@01 Int)
(push) ; 2
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@165@01) i@175@01))
; [eval] this.src[i]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= i@175@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  i@175@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not (= gsize@165@01 0))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@176@01 ($Ref) Int)
(declare-fun img@177@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 2
(assert (not (forall ((i@175@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@165@01) i@175@01)
    (or
      (= (/ (to_real 1) (to_real gsize@165@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@165@01)))))
  
  :qid |quant-u-29|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@175@01 Int) (i2@175@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@165@01) i1@175@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@165@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@165@01) i2@175@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@165@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          i1@175@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          i2@175@01)))
    (= i1@175@01 i2@175@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@175@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@165@01) i@175@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@165@01))))
    (and
      (=
        (inv@176@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          i@175@01))
        i@175@01)
      (img@177@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
        i@175@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    i@175@01))
  :qid |quant-u-30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@177@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@165@01) (inv@176@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@165@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
        (inv@176@01 r))
      r))
  :pattern ((inv@176@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@175@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@165@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    i@175@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@175@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@165@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    i@175@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@175@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@165@01) i@175@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@165@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          i@175@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    i@175@01))
  :qid |Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.dst[ix], this.dst[jx] } ix >= 0 && (ix < |this.dst| && (jx >= 0 && (jx < |this.dst| && ix != jx))) ==> this.dst[ix] != this.dst[jx])
(declare-const ix@178@01 Int)
(declare-const jx@179@01 Int)
(push) ; 2
; [eval] ix >= 0 && (ix < |this.dst| && (jx >= 0 && (jx < |this.dst| && ix != jx))) ==> this.dst[ix] != this.dst[jx]
; [eval] ix >= 0 && (ix < |this.dst| && (jx >= 0 && (jx < |this.dst| && ix != jx)))
; [eval] ix >= 0
(push) ; 3
; [then-branch: 152 | !(ix@178@01 >= 0) | live]
; [else-branch: 152 | ix@178@01 >= 0 | live]
(push) ; 4
; [then-branch: 152 | !(ix@178@01 >= 0)]
(assert (not (>= ix@178@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 152 | ix@178@01 >= 0]
(assert (>= ix@178@01 0))
; [eval] ix < |this.dst|
; [eval] |this.dst|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 153 | !(ix@178@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))|) | live]
; [else-branch: 153 | ix@178@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))| | live]
(push) ; 6
; [then-branch: 153 | !(ix@178@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))|)]
(assert (not
  (<
    ix@178@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 153 | ix@178@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))|]
(assert (<
  ix@178@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
; [eval] jx >= 0
(push) ; 7
; [then-branch: 154 | !(jx@179@01 >= 0) | live]
; [else-branch: 154 | jx@179@01 >= 0 | live]
(push) ; 8
; [then-branch: 154 | !(jx@179@01 >= 0)]
(assert (not (>= jx@179@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 154 | jx@179@01 >= 0]
(assert (>= jx@179@01 0))
; [eval] jx < |this.dst|
; [eval] |this.dst|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 155 | !(jx@179@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))|) | live]
; [else-branch: 155 | jx@179@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))| | live]
(push) ; 10
; [then-branch: 155 | !(jx@179@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))|)]
(assert (not
  (<
    jx@179@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 155 | jx@179@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))|]
(assert (<
  jx@179@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
; [eval] ix != jx
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@179@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
  (not
    (<
      jx@179@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@179@01 0)
  (and
    (>= jx@179@01 0)
    (or
      (<
        jx@179@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
      (not
        (<
          jx@179@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))
(assert (or (>= jx@179@01 0) (not (>= jx@179@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@178@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
  (and
    (<
      ix@178@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
    (=>
      (>= jx@179@01 0)
      (and
        (>= jx@179@01 0)
        (or
          (<
            jx@179@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
          (not
            (<
              jx@179@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
    (or (>= jx@179@01 0) (not (>= jx@179@01 0))))))
(assert (or
  (<
    ix@178@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
  (not
    (<
      ix@178@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@178@01 0)
  (and
    (>= ix@178@01 0)
    (=>
      (<
        ix@178@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
      (and
        (<
          ix@178@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
        (=>
          (>= jx@179@01 0)
          (and
            (>= jx@179@01 0)
            (or
              (<
                jx@179@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
              (not
                (<
                  jx@179@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
        (or (>= jx@179@01 0) (not (>= jx@179@01 0)))))
    (or
      (<
        ix@178@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
      (not
        (<
          ix@178@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))))
(assert (or (>= ix@178@01 0) (not (>= ix@178@01 0))))
(push) ; 3
; [then-branch: 156 | ix@178@01 >= 0 && ix@178@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))| && jx@179@01 >= 0 && jx@179@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))| && ix@178@01 != jx@179@01 | live]
; [else-branch: 156 | !(ix@178@01 >= 0 && ix@178@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))| && jx@179@01 >= 0 && jx@179@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))| && ix@178@01 != jx@179@01) | live]
(push) ; 4
; [then-branch: 156 | ix@178@01 >= 0 && ix@178@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))| && jx@179@01 >= 0 && jx@179@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))| && ix@178@01 != jx@179@01]
(assert (and
  (>= ix@178@01 0)
  (and
    (<
      ix@178@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
    (and
      (>= jx@179@01 0)
      (and
        (<
          jx@179@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
        (not (= ix@178@01 jx@179@01)))))))
; [eval] this.dst[ix] != this.dst[jx]
; [eval] this.dst[ix]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] this.dst[jx]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 156 | !(ix@178@01 >= 0 && ix@178@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))| && jx@179@01 >= 0 && jx@179@01 < |First:(Second:(Second:(Second:(Second:($t@170@01)))))| && ix@178@01 != jx@179@01)]
(assert (not
  (and
    (>= ix@178@01 0)
    (and
      (<
        ix@178@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
      (and
        (>= jx@179@01 0)
        (and
          (<
            jx@179@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
          (not (= ix@178@01 jx@179@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= ix@178@01 0)
    (and
      (<
        ix@178@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
      (and
        (>= jx@179@01 0)
        (and
          (<
            jx@179@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
          (not (= ix@178@01 jx@179@01))))))
  (and
    (>= ix@178@01 0)
    (<
      ix@178@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
    (>= jx@179@01 0)
    (<
      jx@179@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
    (not (= ix@178@01 jx@179@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@178@01 0)
      (and
        (<
          ix@178@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
        (and
          (>= jx@179@01 0)
          (and
            (<
              jx@179@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
            (not (= ix@178@01 jx@179@01)))))))
  (and
    (>= ix@178@01 0)
    (and
      (<
        ix@178@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
      (and
        (>= jx@179@01 0)
        (and
          (<
            jx@179@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
          (not (= ix@178@01 jx@179@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@178@01 Int) (jx@179@01 Int)) (!
  (and
    (=>
      (>= ix@178@01 0)
      (and
        (>= ix@178@01 0)
        (=>
          (<
            ix@178@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
          (and
            (<
              ix@178@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
            (=>
              (>= jx@179@01 0)
              (and
                (>= jx@179@01 0)
                (or
                  (<
                    jx@179@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
                  (not
                    (<
                      jx@179@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
            (or (>= jx@179@01 0) (not (>= jx@179@01 0)))))
        (or
          (<
            ix@178@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
          (not
            (<
              ix@178@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))))
    (or (>= ix@178@01 0) (not (>= ix@178@01 0)))
    (=>
      (and
        (>= ix@178@01 0)
        (and
          (<
            ix@178@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
          (and
            (>= jx@179@01 0)
            (and
              (<
                jx@179@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
              (not (= ix@178@01 jx@179@01))))))
      (and
        (>= ix@178@01 0)
        (<
          ix@178@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
        (>= jx@179@01 0)
        (<
          jx@179@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
        (not (= ix@178@01 jx@179@01))))
    (or
      (not
        (and
          (>= ix@178@01 0)
          (and
            (<
              ix@178@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
            (and
              (>= jx@179@01 0)
              (and
                (<
                  jx@179@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
                (not (= ix@178@01 jx@179@01)))))))
      (and
        (>= ix@178@01 0)
        (and
          (<
            ix@178@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
          (and
            (>= jx@179@01 0)
            (and
              (<
                jx@179@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
              (not (= ix@178@01 jx@179@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    ix@178@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    jx@179@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@153@12@153@140-aux|)))
(assert (forall ((ix@178@01 Int) (jx@179@01 Int)) (!
  (=>
    (and
      (>= ix@178@01 0)
      (and
        (<
          ix@178@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
        (and
          (>= jx@179@01 0)
          (and
            (<
              jx@179@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
            (not (= ix@178@01 jx@179@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
          ix@178@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
          jx@179@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    ix@178@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    jx@179@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@153@12@153@140|)))
(declare-const tid@180@01 Int)
(push) ; 2
; [eval] (tid in [gid * gsize..gsize))
; [eval] [gid * gsize..gsize)
; [eval] gid * gsize
(assert (Seq_contains (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01) tid@180@01))
; [eval] this.dst[tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@180@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@180@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@181@01 ($Ref) Int)
(declare-fun img@182@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((tid1@180@01 Int) (tid2@180@01 Int)) (!
  (=>
    (and
      (Seq_contains
        (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
        tid1@180@01)
      (Seq_contains
        (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
        tid2@180@01)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
          tid1@180@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
          tid2@180@01)))
    (= tid1@180@01 tid2@180@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@180@01 Int)) (!
  (=>
    (Seq_contains
      (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
      tid@180@01)
    (and
      (=
        (inv@181@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
          tid@180@01))
        tid@180@01)
      (img@182@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
        tid@180@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    tid@180@01))
  :qid |quant-u-32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@182@01 r)
      (Seq_contains
        (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
        (inv@181@01 r)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
        (inv@181@01 r))
      r))
  :pattern ((inv@181@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((tid@180@01 Int)) (!
  (=>
    (Seq_contains
      (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
      tid@180@01)
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
          tid@180@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    tid@180@01))
  :qid |Integer_value-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
        tid@180@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
        i@175@01))
    (=
      (and
        (img@182@01 r)
        (Seq_contains
          (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
          (inv@181@01 r)))
      (and
        (img@177@01 r)
        (Seq_contains (Seq_range 0 gsize@165@01) (inv@176@01 r)))))
  
  :qid |quant-u-33|))))
(check-sat)
; unknown
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@183@01 $Snap)
(assert (= $t@183@01 ($Snap.combine ($Snap.first $t@183@01) ($Snap.second $t@183@01))))
(assert (= ($Snap.first $t@183@01) $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second $t@183@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@183@01))
    ($Snap.second ($Snap.second $t@183@01)))))
(assert (= ($Snap.first ($Snap.second $t@183@01)) $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second $t@183@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@183@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
(declare-const $k@184@01 $Perm)
(assert ($Perm.isReadVar $k@184@01))
(assert (<= $Perm.No $k@184@01))
(assert (<= $k@184@01 $Perm.Write))
(assert (=> (< $Perm.No $k@184@01) (not (= this@163@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@183@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@183@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@183@01))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01)))))
  gsize@165@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))
(declare-const $k@185@01 $Perm)
(assert ($Perm.isReadVar $k@185@01))
(assert (<= $Perm.No $k@185@01))
(assert (<= $k@185@01 $Perm.Write))
(assert (=> (< $Perm.No $k@185@01) (not (= this@163@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@185@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))
  gsize@165@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@186@01 Int)
(declare-const jx@187@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 4
; [then-branch: 157 | !(ix@186@01 >= 0) | live]
; [else-branch: 157 | ix@186@01 >= 0 | live]
(push) ; 5
; [then-branch: 157 | !(ix@186@01 >= 0)]
(assert (not (>= ix@186@01 0)))
(pop) ; 5
(push) ; 5
; [else-branch: 157 | ix@186@01 >= 0]
(assert (>= ix@186@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 158 | !(ix@186@01 < |First:(Second:(Second:($t@183@01)))|) | live]
; [else-branch: 158 | ix@186@01 < |First:(Second:(Second:($t@183@01)))| | live]
(push) ; 7
; [then-branch: 158 | !(ix@186@01 < |First:(Second:(Second:($t@183@01)))|)]
(assert (not
  (<
    ix@186@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 158 | ix@186@01 < |First:(Second:(Second:($t@183@01)))|]
(assert (<
  ix@186@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01)))))))
; [eval] jx >= 0
(push) ; 8
; [then-branch: 159 | !(jx@187@01 >= 0) | live]
; [else-branch: 159 | jx@187@01 >= 0 | live]
(push) ; 9
; [then-branch: 159 | !(jx@187@01 >= 0)]
(assert (not (>= jx@187@01 0)))
(pop) ; 9
(push) ; 9
; [else-branch: 159 | jx@187@01 >= 0]
(assert (>= jx@187@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [then-branch: 160 | !(jx@187@01 < |First:(Second:(Second:($t@183@01)))|) | live]
; [else-branch: 160 | jx@187@01 < |First:(Second:(Second:($t@183@01)))| | live]
(push) ; 11
; [then-branch: 160 | !(jx@187@01 < |First:(Second:(Second:($t@183@01)))|)]
(assert (not
  (<
    jx@187@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 160 | jx@187@01 < |First:(Second:(Second:($t@183@01)))|]
(assert (<
  jx@187@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01)))))))
; [eval] ix != jx
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@187@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
  (not
    (<
      jx@187@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@187@01 0)
  (and
    (>= jx@187@01 0)
    (or
      (<
        jx@187@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
      (not
        (<
          jx@187@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01)))))))))))
(assert (or (>= jx@187@01 0) (not (>= jx@187@01 0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@186@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
  (and
    (<
      ix@186@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
    (=>
      (>= jx@187@01 0)
      (and
        (>= jx@187@01 0)
        (or
          (<
            jx@187@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
          (not
            (<
              jx@187@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))))))
    (or (>= jx@187@01 0) (not (>= jx@187@01 0))))))
(assert (or
  (<
    ix@186@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
  (not
    (<
      ix@186@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01)))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@186@01 0)
  (and
    (>= ix@186@01 0)
    (=>
      (<
        ix@186@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
      (and
        (<
          ix@186@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
        (=>
          (>= jx@187@01 0)
          (and
            (>= jx@187@01 0)
            (or
              (<
                jx@187@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
              (not
                (<
                  jx@187@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))))))
        (or (>= jx@187@01 0) (not (>= jx@187@01 0)))))
    (or
      (<
        ix@186@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
      (not
        (<
          ix@186@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01)))))))))))
(assert (or (>= ix@186@01 0) (not (>= ix@186@01 0))))
(push) ; 4
; [then-branch: 161 | ix@186@01 >= 0 && ix@186@01 < |First:(Second:(Second:($t@183@01)))| && jx@187@01 >= 0 && jx@187@01 < |First:(Second:(Second:($t@183@01)))| && ix@186@01 != jx@187@01 | live]
; [else-branch: 161 | !(ix@186@01 >= 0 && ix@186@01 < |First:(Second:(Second:($t@183@01)))| && jx@187@01 >= 0 && jx@187@01 < |First:(Second:(Second:($t@183@01)))| && ix@186@01 != jx@187@01) | live]
(push) ; 5
; [then-branch: 161 | ix@186@01 >= 0 && ix@186@01 < |First:(Second:(Second:($t@183@01)))| && jx@187@01 >= 0 && jx@187@01 < |First:(Second:(Second:($t@183@01)))| && ix@186@01 != jx@187@01]
(assert (and
  (>= ix@186@01 0)
  (and
    (<
      ix@186@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
    (and
      (>= jx@187@01 0)
      (and
        (<
          jx@187@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
        (not (= ix@186@01 jx@187@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 161 | !(ix@186@01 >= 0 && ix@186@01 < |First:(Second:(Second:($t@183@01)))| && jx@187@01 >= 0 && jx@187@01 < |First:(Second:(Second:($t@183@01)))| && ix@186@01 != jx@187@01)]
(assert (not
  (and
    (>= ix@186@01 0)
    (and
      (<
        ix@186@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
      (and
        (>= jx@187@01 0)
        (and
          (<
            jx@187@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
          (not (= ix@186@01 jx@187@01))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (>= ix@186@01 0)
    (and
      (<
        ix@186@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
      (and
        (>= jx@187@01 0)
        (and
          (<
            jx@187@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
          (not (= ix@186@01 jx@187@01))))))
  (and
    (>= ix@186@01 0)
    (<
      ix@186@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
    (>= jx@187@01 0)
    (<
      jx@187@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
    (not (= ix@186@01 jx@187@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@186@01 0)
      (and
        (<
          ix@186@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
        (and
          (>= jx@187@01 0)
          (and
            (<
              jx@187@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
            (not (= ix@186@01 jx@187@01)))))))
  (and
    (>= ix@186@01 0)
    (and
      (<
        ix@186@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
      (and
        (>= jx@187@01 0)
        (and
          (<
            jx@187@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
          (not (= ix@186@01 jx@187@01))))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@186@01 Int) (jx@187@01 Int)) (!
  (and
    (=>
      (>= ix@186@01 0)
      (and
        (>= ix@186@01 0)
        (=>
          (<
            ix@186@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
          (and
            (<
              ix@186@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
            (=>
              (>= jx@187@01 0)
              (and
                (>= jx@187@01 0)
                (or
                  (<
                    jx@187@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
                  (not
                    (<
                      jx@187@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))))))
            (or (>= jx@187@01 0) (not (>= jx@187@01 0)))))
        (or
          (<
            ix@186@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
          (not
            (<
              ix@186@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))))))
    (or (>= ix@186@01 0) (not (>= ix@186@01 0)))
    (=>
      (and
        (>= ix@186@01 0)
        (and
          (<
            ix@186@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
          (and
            (>= jx@187@01 0)
            (and
              (<
                jx@187@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
              (not (= ix@186@01 jx@187@01))))))
      (and
        (>= ix@186@01 0)
        (<
          ix@186@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
        (>= jx@187@01 0)
        (<
          jx@187@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
        (not (= ix@186@01 jx@187@01))))
    (or
      (not
        (and
          (>= ix@186@01 0)
          (and
            (<
              ix@186@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
            (and
              (>= jx@187@01 0)
              (and
                (<
                  jx@187@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
                (not (= ix@186@01 jx@187@01)))))))
      (and
        (>= ix@186@01 0)
        (and
          (<
            ix@186@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
          (and
            (>= jx@187@01 0)
            (and
              (<
                jx@187@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
              (not (= ix@186@01 jx@187@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
    ix@186@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
    jx@187@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@163@11@163@139-aux|)))
(assert (forall ((ix@186@01 Int) (jx@187@01 Int)) (!
  (=>
    (and
      (>= ix@186@01 0)
      (and
        (<
          ix@186@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
        (and
          (>= jx@187@01 0)
          (and
            (<
              jx@187@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))
            (not (= ix@186@01 jx@187@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
          ix@186@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
          jx@187@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
    ix@186@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
    jx@187@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@163@11@163@139|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))))))))
(declare-const i@188@01 Int)
(push) ; 3
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@165@01) i@188@01))
; [eval] this.src[i]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= i@188@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  i@188@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (= gsize@165@01 0))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@189@01 ($Ref) Int)
(declare-fun img@190@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 3
(assert (not (forall ((i@188@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@165@01) i@188@01)
    (or
      (= (/ (to_real 1) (to_real gsize@165@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@165@01)))))
  
  :qid |quant-u-34|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((i1@188@01 Int) (i2@188@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@165@01) i1@188@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@165@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@165@01) i2@188@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@165@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
          i1@188@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
          i2@188@01)))
    (= i1@188@01 i2@188@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@188@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@165@01) i@188@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@165@01))))
    (and
      (=
        (inv@189@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
          i@188@01))
        i@188@01)
      (img@190@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
        i@188@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
    i@188@01))
  :qid |quant-u-35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@190@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@165@01) (inv@189@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@165@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
        (inv@189@01 r))
      r))
  :pattern ((inv@189@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@188@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@165@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
    i@188@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@188@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@165@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
    i@188@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@188@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@165@01) i@188@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@165@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
          i@188@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
    i@188@01))
  :qid |Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))))))
  $Snap.unit))
; [eval] this.src == old(this.src)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.src)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@183@01))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))))
  $Snap.unit))
; [eval] this.dst == old(this.dst)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@185@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.dst)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))))))))
; [eval] gid * gsize <= 0 && 0 < gsize
; [eval] gid * gsize <= 0
; [eval] gid * gsize
(set-option :timeout 0)
(push) ; 3
; [then-branch: 162 | !(gid@166@01 * gsize@165@01 <= 0) | live]
; [else-branch: 162 | gid@166@01 * gsize@165@01 <= 0 | live]
(push) ; 4
; [then-branch: 162 | !(gid@166@01 * gsize@165@01 <= 0)]
(assert (not (<= (* gid@166@01 gsize@165@01) 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 162 | gid@166@01 * gsize@165@01 <= 0]
(assert (<= (* gid@166@01 gsize@165@01) 0))
; [eval] 0 < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= (* gid@166@01 gsize@165@01) 0) (not (<= (* gid@166@01 gsize@165@01) 0))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01)))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 163 | gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01 | live]
; [else-branch: 163 | !(gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 163 | gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01]
(assert (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01)))
; [eval] this.dst[0]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@185@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(declare-const sm@191@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@191@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
    0))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
        0))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
        0))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
      0))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
        0)
      $Ref.null))))
; [eval] gid * gsize <= 0 && 0 < gsize
; [eval] gid * gsize <= 0
; [eval] gid * gsize
(push) ; 4
; [then-branch: 164 | !(gid@166@01 * gsize@165@01 <= 0) | live]
; [else-branch: 164 | gid@166@01 * gsize@165@01 <= 0 | live]
(push) ; 5
; [then-branch: 164 | !(gid@166@01 * gsize@165@01 <= 0)]
(assert (not (<= (* gid@166@01 gsize@165@01) 0)))
(pop) ; 5
(push) ; 5
; [else-branch: 164 | gid@166@01 * gsize@165@01 <= 0]
; [eval] 0 < gsize
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 165 | gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01 | live]
; [else-branch: 165 | !(gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 165 | gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01]
(assert (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01)))
; [eval] this.dst[1]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@185@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(declare-const sm@192@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@192@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
    1))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
    1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
        1))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
        1))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
      1))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@183@01))))))
        1)
      $Ref.null))))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@193@01 $Perm)
(assert ($Perm.isReadVar $k@193@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@171@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (< $k@193@01 $k@171@01))
(assert (<= $Perm.No (- $k@171@01 $k@193@01)))
(assert (<= (- $k@171@01 $k@193@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@171@01 $k@193@01)) (not (= this@163@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] |this.src| == gsize
; [eval] |this.src|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(declare-const $k@194@01 $Perm)
(assert ($Perm.isReadVar $k@194@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@172@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (< $k@194@01 $k@172@01))
(assert (<= $Perm.No (- $k@172@01 $k@194@01)))
(assert (<= (- $k@172@01 $k@194@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@172@01 $k@194@01)) (not (= this@163@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@194@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] 4 <= gsize
; [eval] gsize % 4 == 0
; [eval] gsize % 4
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@195@01 Int)
(declare-const jx@196@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 4
; [then-branch: 166 | !(ix@195@01 >= 0) | live]
; [else-branch: 166 | ix@195@01 >= 0 | live]
(push) ; 5
; [then-branch: 166 | !(ix@195@01 >= 0)]
(assert (not (>= ix@195@01 0)))
(pop) ; 5
(push) ; 5
; [else-branch: 166 | ix@195@01 >= 0]
(assert (>= ix@195@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 167 | !(ix@195@01 < |First:(Second:(Second:($t@170@01)))|) | live]
; [else-branch: 167 | ix@195@01 < |First:(Second:(Second:($t@170@01)))| | live]
(push) ; 7
; [then-branch: 167 | !(ix@195@01 < |First:(Second:(Second:($t@170@01)))|)]
(assert (not
  (<
    ix@195@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 167 | ix@195@01 < |First:(Second:(Second:($t@170@01)))|]
(assert (<
  ix@195@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))
; [eval] jx >= 0
(push) ; 8
; [then-branch: 168 | !(jx@196@01 >= 0) | live]
; [else-branch: 168 | jx@196@01 >= 0 | live]
(push) ; 9
; [then-branch: 168 | !(jx@196@01 >= 0)]
(assert (not (>= jx@196@01 0)))
(pop) ; 9
(push) ; 9
; [else-branch: 168 | jx@196@01 >= 0]
(assert (>= jx@196@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [then-branch: 169 | !(jx@196@01 < |First:(Second:(Second:($t@170@01)))|) | live]
; [else-branch: 169 | jx@196@01 < |First:(Second:(Second:($t@170@01)))| | live]
(push) ; 11
; [then-branch: 169 | !(jx@196@01 < |First:(Second:(Second:($t@170@01)))|)]
(assert (not
  (<
    jx@196@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 169 | jx@196@01 < |First:(Second:(Second:($t@170@01)))|]
(assert (<
  jx@196@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))
; [eval] ix != jx
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@196@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
  (not
    (<
      jx@196@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@196@01 0)
  (and
    (>= jx@196@01 0)
    (or
      (<
        jx@196@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (not
        (<
          jx@196@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))))))
(assert (or (>= jx@196@01 0) (not (>= jx@196@01 0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@195@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
  (and
    (<
      ix@195@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
    (=>
      (>= jx@196@01 0)
      (and
        (>= jx@196@01 0)
        (or
          (<
            jx@196@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (not
            (<
              jx@196@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))))
    (or (>= jx@196@01 0) (not (>= jx@196@01 0))))))
(assert (or
  (<
    ix@195@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
  (not
    (<
      ix@195@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@195@01 0)
  (and
    (>= ix@195@01 0)
    (=>
      (<
        ix@195@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (and
        (<
          ix@195@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (=>
          (>= jx@196@01 0)
          (and
            (>= jx@196@01 0)
            (or
              (<
                jx@196@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
              (not
                (<
                  jx@196@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))))
        (or (>= jx@196@01 0) (not (>= jx@196@01 0)))))
    (or
      (<
        ix@195@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (not
        (<
          ix@195@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01)))))))))))
(assert (or (>= ix@195@01 0) (not (>= ix@195@01 0))))
(push) ; 4
; [then-branch: 170 | ix@195@01 >= 0 && ix@195@01 < |First:(Second:(Second:($t@170@01)))| && jx@196@01 >= 0 && jx@196@01 < |First:(Second:(Second:($t@170@01)))| && ix@195@01 != jx@196@01 | live]
; [else-branch: 170 | !(ix@195@01 >= 0 && ix@195@01 < |First:(Second:(Second:($t@170@01)))| && jx@196@01 >= 0 && jx@196@01 < |First:(Second:(Second:($t@170@01)))| && ix@195@01 != jx@196@01) | live]
(push) ; 5
; [then-branch: 170 | ix@195@01 >= 0 && ix@195@01 < |First:(Second:(Second:($t@170@01)))| && jx@196@01 >= 0 && jx@196@01 < |First:(Second:(Second:($t@170@01)))| && ix@195@01 != jx@196@01]
(assert (and
  (>= ix@195@01 0)
  (and
    (<
      ix@195@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
    (and
      (>= jx@196@01 0)
      (and
        (<
          jx@196@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (not (= ix@195@01 jx@196@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 170 | !(ix@195@01 >= 0 && ix@195@01 < |First:(Second:(Second:($t@170@01)))| && jx@196@01 >= 0 && jx@196@01 < |First:(Second:(Second:($t@170@01)))| && ix@195@01 != jx@196@01)]
(assert (not
  (and
    (>= ix@195@01 0)
    (and
      (<
        ix@195@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (and
        (>= jx@196@01 0)
        (and
          (<
            jx@196@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (not (= ix@195@01 jx@196@01))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (>= ix@195@01 0)
    (and
      (<
        ix@195@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (and
        (>= jx@196@01 0)
        (and
          (<
            jx@196@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (not (= ix@195@01 jx@196@01))))))
  (and
    (>= ix@195@01 0)
    (<
      ix@195@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
    (>= jx@196@01 0)
    (<
      jx@196@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
    (not (= ix@195@01 jx@196@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@195@01 0)
      (and
        (<
          ix@195@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (and
          (>= jx@196@01 0)
          (and
            (<
              jx@196@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
            (not (= ix@195@01 jx@196@01)))))))
  (and
    (>= ix@195@01 0)
    (and
      (<
        ix@195@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
      (and
        (>= jx@196@01 0)
        (and
          (<
            jx@196@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (not (= ix@195@01 jx@196@01))))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@195@01 Int) (jx@196@01 Int)) (!
  (and
    (=>
      (>= ix@195@01 0)
      (and
        (>= ix@195@01 0)
        (=>
          (<
            ix@195@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (and
            (<
              ix@195@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
            (=>
              (>= jx@196@01 0)
              (and
                (>= jx@196@01 0)
                (or
                  (<
                    jx@196@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
                  (not
                    (<
                      jx@196@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))))
            (or (>= jx@196@01 0) (not (>= jx@196@01 0)))))
        (or
          (<
            ix@195@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (not
            (<
              ix@195@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))))
    (or (>= ix@195@01 0) (not (>= ix@195@01 0)))
    (=>
      (and
        (>= ix@195@01 0)
        (and
          (<
            ix@195@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (and
            (>= jx@196@01 0)
            (and
              (<
                jx@196@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
              (not (= ix@195@01 jx@196@01))))))
      (and
        (>= ix@195@01 0)
        (<
          ix@195@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (>= jx@196@01 0)
        (<
          jx@196@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (not (= ix@195@01 jx@196@01))))
    (or
      (not
        (and
          (>= ix@195@01 0)
          (and
            (<
              ix@195@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
            (and
              (>= jx@196@01 0)
              (and
                (<
                  jx@196@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
                (not (= ix@195@01 jx@196@01)))))))
      (and
        (>= ix@195@01 0)
        (and
          (<
            ix@195@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
          (and
            (>= jx@196@01 0)
            (and
              (<
                jx@196@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
              (not (= ix@195@01 jx@196@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    ix@195@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    jx@196@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@163@11@163@139-aux|)))
(push) ; 3
(assert (not (forall ((ix@195@01 Int) (jx@196@01 Int)) (!
  (=>
    (and
      (>= ix@195@01 0)
      (and
        (<
          ix@195@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (and
          (>= jx@196@01 0)
          (and
            (<
              jx@196@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
            (not (= ix@195@01 jx@196@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          ix@195@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          jx@196@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    ix@195@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    jx@196@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@163@11@163@139|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((ix@195@01 Int) (jx@196@01 Int)) (!
  (=>
    (and
      (>= ix@195@01 0)
      (and
        (<
          ix@195@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
        (and
          (>= jx@196@01 0)
          (and
            (<
              jx@196@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))
            (not (= ix@195@01 jx@196@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          ix@195@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          jx@196@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    ix@195@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    jx@196@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@163@11@163@139|)))
(declare-const i@197@01 Int)
(push) ; 3
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@165@01) i@197@01))
(push) ; 4
(assert (not (not (= gsize@165@01 0))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= i@197@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  i@197@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@198@01 ($Ref) Int)
(declare-fun img@199@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 3
(assert (not (forall ((i@197@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@165@01) i@197@01)
    (or
      (= (/ (to_real 1) (to_real gsize@165@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@165@01)))))
  
  :qid |quant-u-36|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((i1@197@01 Int) (i2@197@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@165@01) i1@197@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@165@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@165@01) i2@197@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@165@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          i1@197@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          i2@197@01)))
    (= i1@197@01 i2@197@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@197@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@165@01) i@197@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@165@01))))
    (and
      (=
        (inv@198@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          i@197@01))
        i@197@01)
      (img@199@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
        i@197@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
    i@197@01))
  :qid |Integer_value-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@199@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@165@01) (inv@198@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@165@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
        (inv@198@01 r))
      r))
  :pattern ((inv@198@01 r))
  :qid |Integer_value-fctOfInv|)))
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((i@197@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
      i@197@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
      i@197@01))
  
  :qid |quant-u-37|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@200@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 gsize@165@01) (inv@198@01 r))
      (img@199@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          (inv@198@01 r))))
    ($Perm.min
      (ite
        (and
          (img@177@01 r)
          (Seq_contains (Seq_range 0 gsize@165@01) (inv@176@01 r)))
        (/ (to_real 1) (to_real gsize@165@01))
        $Perm.No)
      (/ (to_real 1) (to_real gsize@165@01)))
    $Perm.No))
(define-fun pTaken@201@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 gsize@165@01) (inv@198@01 r))
      (img@199@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          (inv@198@01 r))))
    ($Perm.min
      (ite
        (and
          (img@182@01 r)
          (Seq_contains
            (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
            (inv@181@01 r)))
        $Perm.Write
        $Perm.No)
      (- (/ (to_real 1) (to_real gsize@165@01)) (pTaken@200@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@177@01 r)
          (Seq_contains (Seq_range 0 gsize@165@01) (inv@176@01 r)))
        (/ (to_real 1) (to_real gsize@165@01))
        $Perm.No)
      (pTaken@200@01 r))
    $Perm.No)
  
  :qid |quant-u-39|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@165@01) (inv@198@01 r))
      (img@199@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@170@01))))
          (inv@198@01 r))))
    (= (- (/ (to_real 1) (to_real gsize@165@01)) (pTaken@200@01 r)) $Perm.No))
  
  :qid |quant-u-40|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@202@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@177@01 r)
        (Seq_contains (Seq_range 0 gsize@165@01) (inv@176@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@165@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@202@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@202@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@182@01 r)
      (Seq_contains
        (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
        (inv@181@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@202@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@202@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))) r))
  :qid |qp.fvfValDef20|)))
; [eval] this.src == old(this.src)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.src)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] this.dst == old(this.dst)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.dst)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] gid * gsize <= 0 && 0 < gsize
; [eval] gid * gsize <= 0
; [eval] gid * gsize
(set-option :timeout 0)
(push) ; 3
; [then-branch: 171 | !(gid@166@01 * gsize@165@01 <= 0) | live]
; [else-branch: 171 | gid@166@01 * gsize@165@01 <= 0 | live]
(push) ; 4
; [then-branch: 171 | !(gid@166@01 * gsize@165@01 <= 0)]
(assert (not (<= (* gid@166@01 gsize@165@01) 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 171 | gid@166@01 * gsize@165@01 <= 0]
(assert (<= (* gid@166@01 gsize@165@01) 0))
; [eval] 0 < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= (* gid@166@01 gsize@165@01) 0) (not (<= (* gid@166@01 gsize@165@01) 0))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01)))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 172 | gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01 | live]
; [else-branch: 172 | !(gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 172 | gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01]
(assert (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01)))
; [eval] this.dst[0]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@203@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
        0))
    ($Perm.min
      (ite
        (and
          (img@182@01 r)
          (Seq_contains
            (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
            (inv@181@01 r)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@182@01 r)
          (Seq_contains
            (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
            (inv@181@01 r)))
        $Perm.Write
        $Perm.No)
      (pTaken@203@01 r))
    $Perm.No)
  
  :qid |quant-u-42|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@203@01 r) $Perm.No)
  
  :qid |quant-u-43|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
        0))
    (= (- $Perm.Write (pTaken@203@01 r)) $Perm.No))
  
  :qid |quant-u-44|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@204@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (and
    (img@182@01 (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
      0))
    (Seq_contains
      (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
      (inv@181@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
        0))))
  (=
    ($FVF.lookup_Integer_value (as sm@204@01  $FVF<Integer_value>) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
      0))
    ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
      0)))))
; [eval] gid * gsize <= 0 && 0 < gsize
; [eval] gid * gsize <= 0
; [eval] gid * gsize
(set-option :timeout 0)
(push) ; 4
; [then-branch: 173 | !(gid@166@01 * gsize@165@01 <= 0) | live]
; [else-branch: 173 | gid@166@01 * gsize@165@01 <= 0 | live]
(push) ; 5
; [then-branch: 173 | !(gid@166@01 * gsize@165@01 <= 0)]
(assert (not (<= (* gid@166@01 gsize@165@01) 0)))
(pop) ; 5
(push) ; 5
; [else-branch: 173 | gid@166@01 * gsize@165@01 <= 0]
; [eval] 0 < gsize
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 174 | gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01 | live]
; [else-branch: 174 | !(gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 174 | gid@166@01 * gsize@165@01 <= 0 && 0 < gsize@165@01]
(assert (and (<= (* gid@166@01 gsize@165@01) 0) (< 0 gsize@165@01)))
; [eval] this.dst[1]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@205@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
        1))
    ($Perm.min
      (ite
        (and
          (img@182@01 r)
          (Seq_contains
            (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
            (inv@181@01 r)))
        (- $Perm.Write (pTaken@203@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@182@01 r)
          (Seq_contains
            (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
            (inv@181@01 r)))
        (- $Perm.Write (pTaken@203@01 r))
        $Perm.No)
      (pTaken@205@01 r))
    $Perm.No)
  
  :qid |quant-u-46|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@205@01 r) $Perm.No)
  
  :qid |quant-u-47|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
        1))
    (= (- $Perm.Write (pTaken@205@01 r)) $Perm.No))
  
  :qid |quant-u-48|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@206@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (ite
    (and
      (img@182@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
        1))
      (Seq_contains
        (Seq_range (* gid@166@01 gsize@165@01) gsize@165@01)
        (inv@181@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
          1))))
    (<
      $Perm.No
      (-
        $Perm.Write
        (pTaken@203@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
          1))))
    false)
  (=
    ($FVF.lookup_Integer_value (as sm@206@01  $FVF<Integer_value>) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
      1))
    ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))))) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
      1)))))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- main_post_check_1 ----------
(declare-const this@207@01 $Ref)
(declare-const tcount@208@01 Int)
(declare-const gsize@209@01 Int)
(declare-const tid@210@01 Int)
(declare-const gid@211@01 Int)
(declare-const lid@212@01 Int)
(declare-const k@213@01 Int)
(declare-const half@214@01 Int)
(declare-const offset@215@01 Int)
(declare-const this@216@01 $Ref)
(declare-const tcount@217@01 Int)
(declare-const gsize@218@01 Int)
(declare-const tid@219@01 Int)
(declare-const gid@220@01 Int)
(declare-const lid@221@01 Int)
(declare-const k@222@01 Int)
(declare-const half@223@01 Int)
(declare-const offset@224@01 Int)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@225@01 $Snap)
(assert (= $t@225@01 ($Snap.combine ($Snap.first $t@225@01) ($Snap.second $t@225@01))))
(assert (= ($Snap.first $t@225@01) $Snap.unit))
; [eval] 0 <= tid
(assert (<= 0 tid@219@01))
(assert (=
  ($Snap.second $t@225@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@225@01))
    ($Snap.second ($Snap.second $t@225@01)))))
(assert (= ($Snap.first ($Snap.second $t@225@01)) $Snap.unit))
; [eval] tid < tcount
(assert (< tid@219@01 tcount@217@01))
(assert (=
  ($Snap.second ($Snap.second $t@225@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@225@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@225@01))) $Snap.unit))
; [eval] tid == lid
(assert (= tid@219@01 lid@221@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (= tcount@217@01 gsize@218@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (= gid@220@01 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
(declare-const $k@226@01 $Perm)
(assert ($Perm.isReadVar $k@226@01))
(assert (<= $Perm.No $k@226@01))
(assert (<= $k@226@01 $Perm.Write))
(assert (=> (< $Perm.No $k@226@01) (not (= this@216@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
  gsize@218@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(declare-const $k@227@01 $Perm)
(assert ($Perm.isReadVar $k@227@01))
(assert (<= $Perm.No $k@227@01))
(assert (<= $k@227@01 $Perm.Write))
(assert (=> (< $Perm.No $k@227@01) (not (= this@216@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
  gsize@218@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (<= 4 gsize@218@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (= (mod gsize@218@01 4) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@228@01 Int)
(declare-const jx@229@01 Int)
(set-option :timeout 0)
(push) ; 2
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 3
; [then-branch: 175 | !(ix@228@01 >= 0) | live]
; [else-branch: 175 | ix@228@01 >= 0 | live]
(push) ; 4
; [then-branch: 175 | !(ix@228@01 >= 0)]
(assert (not (>= ix@228@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 175 | ix@228@01 >= 0]
(assert (>= ix@228@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 176 | !(ix@228@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|) | live]
; [else-branch: 176 | ix@228@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| | live]
(push) ; 6
; [then-branch: 176 | !(ix@228@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|)]
(assert (not
  (<
    ix@228@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 176 | ix@228@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|]
(assert (<
  ix@228@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
; [eval] jx >= 0
(push) ; 7
; [then-branch: 177 | !(jx@229@01 >= 0) | live]
; [else-branch: 177 | jx@229@01 >= 0 | live]
(push) ; 8
; [then-branch: 177 | !(jx@229@01 >= 0)]
(assert (not (>= jx@229@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 177 | jx@229@01 >= 0]
(assert (>= jx@229@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 178 | !(jx@229@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|) | live]
; [else-branch: 178 | jx@229@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| | live]
(push) ; 10
; [then-branch: 178 | !(jx@229@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|)]
(assert (not
  (<
    jx@229@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 178 | jx@229@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|]
(assert (<
  jx@229@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
; [eval] ix != jx
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@229@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  (not
    (<
      jx@229@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@229@01 0)
  (and
    (>= jx@229@01 0)
    (or
      (<
        jx@229@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (not
        (<
          jx@229@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
(assert (or (>= jx@229@01 0) (not (>= jx@229@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@228@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  (and
    (<
      ix@228@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    (=>
      (>= jx@229@01 0)
      (and
        (>= jx@229@01 0)
        (or
          (<
            jx@229@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (not
            (<
              jx@229@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
    (or (>= jx@229@01 0) (not (>= jx@229@01 0))))))
(assert (or
  (<
    ix@228@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  (not
    (<
      ix@228@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@228@01 0)
  (and
    (>= ix@228@01 0)
    (=>
      (<
        ix@228@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (and
        (<
          ix@228@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (=>
          (>= jx@229@01 0)
          (and
            (>= jx@229@01 0)
            (or
              (<
                jx@229@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
              (not
                (<
                  jx@229@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
        (or (>= jx@229@01 0) (not (>= jx@229@01 0)))))
    (or
      (<
        ix@228@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (not
        (<
          ix@228@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
(assert (or (>= ix@228@01 0) (not (>= ix@228@01 0))))
(push) ; 3
; [then-branch: 179 | ix@228@01 >= 0 && ix@228@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && jx@229@01 >= 0 && jx@229@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && ix@228@01 != jx@229@01 | live]
; [else-branch: 179 | !(ix@228@01 >= 0 && ix@228@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && jx@229@01 >= 0 && jx@229@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && ix@228@01 != jx@229@01) | live]
(push) ; 4
; [then-branch: 179 | ix@228@01 >= 0 && ix@228@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && jx@229@01 >= 0 && jx@229@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && ix@228@01 != jx@229@01]
(assert (and
  (>= ix@228@01 0)
  (and
    (<
      ix@228@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    (and
      (>= jx@229@01 0)
      (and
        (<
          jx@229@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (not (= ix@228@01 jx@229@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 179 | !(ix@228@01 >= 0 && ix@228@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && jx@229@01 >= 0 && jx@229@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && ix@228@01 != jx@229@01)]
(assert (not
  (and
    (>= ix@228@01 0)
    (and
      (<
        ix@228@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (and
        (>= jx@229@01 0)
        (and
          (<
            jx@229@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (not (= ix@228@01 jx@229@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= ix@228@01 0)
    (and
      (<
        ix@228@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (and
        (>= jx@229@01 0)
        (and
          (<
            jx@229@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (not (= ix@228@01 jx@229@01))))))
  (and
    (>= ix@228@01 0)
    (<
      ix@228@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    (>= jx@229@01 0)
    (<
      jx@229@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    (not (= ix@228@01 jx@229@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@228@01 0)
      (and
        (<
          ix@228@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (and
          (>= jx@229@01 0)
          (and
            (<
              jx@229@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            (not (= ix@228@01 jx@229@01)))))))
  (and
    (>= ix@228@01 0)
    (and
      (<
        ix@228@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (and
        (>= jx@229@01 0)
        (and
          (<
            jx@229@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (not (= ix@228@01 jx@229@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@228@01 Int) (jx@229@01 Int)) (!
  (and
    (=>
      (>= ix@228@01 0)
      (and
        (>= ix@228@01 0)
        (=>
          (<
            ix@228@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (and
            (<
              ix@228@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            (=>
              (>= jx@229@01 0)
              (and
                (>= jx@229@01 0)
                (or
                  (<
                    jx@229@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
                  (not
                    (<
                      jx@229@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
            (or (>= jx@229@01 0) (not (>= jx@229@01 0)))))
        (or
          (<
            ix@228@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (not
            (<
              ix@228@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
    (or (>= ix@228@01 0) (not (>= ix@228@01 0)))
    (=>
      (and
        (>= ix@228@01 0)
        (and
          (<
            ix@228@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (and
            (>= jx@229@01 0)
            (and
              (<
                jx@229@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
              (not (= ix@228@01 jx@229@01))))))
      (and
        (>= ix@228@01 0)
        (<
          ix@228@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (>= jx@229@01 0)
        (<
          jx@229@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (not (= ix@228@01 jx@229@01))))
    (or
      (not
        (and
          (>= ix@228@01 0)
          (and
            (<
              ix@228@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            (and
              (>= jx@229@01 0)
              (and
                (<
                  jx@229@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
                (not (= ix@228@01 jx@229@01)))))))
      (and
        (>= ix@228@01 0)
        (and
          (<
            ix@228@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (and
            (>= jx@229@01 0)
            (and
              (<
                jx@229@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
              (not (= ix@228@01 jx@229@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    ix@228@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    jx@229@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@184@12@184@140-aux|)))
(assert (forall ((ix@228@01 Int) (jx@229@01 Int)) (!
  (=>
    (and
      (>= ix@228@01 0)
      (and
        (<
          ix@228@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (and
          (>= jx@229@01 0)
          (and
            (<
              jx@229@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            (not (= ix@228@01 jx@229@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          ix@228@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          jx@229@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    ix@228@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    jx@229@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@184@12@184@140|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
(declare-const i@230@01 Int)
(push) ; 2
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@218@01) i@230@01))
; [eval] this.src[i]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= i@230@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  i@230@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not (= gsize@218@01 0))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@231@01 ($Ref) Int)
(declare-fun img@232@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 2
(assert (not (forall ((i@230@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@218@01) i@230@01)
    (or
      (= (/ (to_real 1) (to_real gsize@218@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))))
  
  :qid |quant-u-49|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@230@01 Int) (i2@230@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@218@01) i1@230@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@218@01) i2@230@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i1@230@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i2@230@01)))
    (= i1@230@01 i2@230@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@230@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@218@01) i@230@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01))))
    (and
      (=
        (inv@231@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@230@01))
        i@230@01)
      (img@232@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
        i@230@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    i@230@01))
  :qid |quant-u-50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@232@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
        (inv@231@01 r))
      r))
  :pattern ((inv@231@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@230@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    i@230@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@230@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@218@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    i@230@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@230@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@218@01) i@230@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@230@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    i@230@01))
  :qid |Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.dst[ix], this.dst[jx] } ix >= 0 && (ix < |this.dst| && (jx >= 0 && (jx < |this.dst| && ix != jx))) ==> this.dst[ix] != this.dst[jx])
(declare-const ix@233@01 Int)
(declare-const jx@234@01 Int)
(push) ; 2
; [eval] ix >= 0 && (ix < |this.dst| && (jx >= 0 && (jx < |this.dst| && ix != jx))) ==> this.dst[ix] != this.dst[jx]
; [eval] ix >= 0 && (ix < |this.dst| && (jx >= 0 && (jx < |this.dst| && ix != jx)))
; [eval] ix >= 0
(push) ; 3
; [then-branch: 180 | !(ix@233@01 >= 0) | live]
; [else-branch: 180 | ix@233@01 >= 0 | live]
(push) ; 4
; [then-branch: 180 | !(ix@233@01 >= 0)]
(assert (not (>= ix@233@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 180 | ix@233@01 >= 0]
(assert (>= ix@233@01 0))
; [eval] ix < |this.dst|
; [eval] |this.dst|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 181 | !(ix@233@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))|) | live]
; [else-branch: 181 | ix@233@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))| | live]
(push) ; 6
; [then-branch: 181 | !(ix@233@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))|)]
(assert (not
  (<
    ix@233@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 181 | ix@233@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))|]
(assert (<
  ix@233@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
; [eval] jx >= 0
(push) ; 7
; [then-branch: 182 | !(jx@234@01 >= 0) | live]
; [else-branch: 182 | jx@234@01 >= 0 | live]
(push) ; 8
; [then-branch: 182 | !(jx@234@01 >= 0)]
(assert (not (>= jx@234@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 182 | jx@234@01 >= 0]
(assert (>= jx@234@01 0))
; [eval] jx < |this.dst|
; [eval] |this.dst|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 183 | !(jx@234@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))|) | live]
; [else-branch: 183 | jx@234@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))| | live]
(push) ; 10
; [then-branch: 183 | !(jx@234@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))|)]
(assert (not
  (<
    jx@234@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 183 | jx@234@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))|]
(assert (<
  jx@234@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
; [eval] ix != jx
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@234@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
  (not
    (<
      jx@234@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@234@01 0)
  (and
    (>= jx@234@01 0)
    (or
      (<
        jx@234@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
      (not
        (<
          jx@234@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
(assert (or (>= jx@234@01 0) (not (>= jx@234@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@233@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
  (and
    (<
      ix@233@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
    (=>
      (>= jx@234@01 0)
      (and
        (>= jx@234@01 0)
        (or
          (<
            jx@234@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
          (not
            (<
              jx@234@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
    (or (>= jx@234@01 0) (not (>= jx@234@01 0))))))
(assert (or
  (<
    ix@233@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
  (not
    (<
      ix@233@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@233@01 0)
  (and
    (>= ix@233@01 0)
    (=>
      (<
        ix@233@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
      (and
        (<
          ix@233@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
        (=>
          (>= jx@234@01 0)
          (and
            (>= jx@234@01 0)
            (or
              (<
                jx@234@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
              (not
                (<
                  jx@234@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
        (or (>= jx@234@01 0) (not (>= jx@234@01 0)))))
    (or
      (<
        ix@233@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
      (not
        (<
          ix@233@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
(assert (or (>= ix@233@01 0) (not (>= ix@233@01 0))))
(push) ; 3
; [then-branch: 184 | ix@233@01 >= 0 && ix@233@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))| && jx@234@01 >= 0 && jx@234@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))| && ix@233@01 != jx@234@01 | live]
; [else-branch: 184 | !(ix@233@01 >= 0 && ix@233@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))| && jx@234@01 >= 0 && jx@234@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))| && ix@233@01 != jx@234@01) | live]
(push) ; 4
; [then-branch: 184 | ix@233@01 >= 0 && ix@233@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))| && jx@234@01 >= 0 && jx@234@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))| && ix@233@01 != jx@234@01]
(assert (and
  (>= ix@233@01 0)
  (and
    (<
      ix@233@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
    (and
      (>= jx@234@01 0)
      (and
        (<
          jx@234@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
        (not (= ix@233@01 jx@234@01)))))))
; [eval] this.dst[ix] != this.dst[jx]
; [eval] this.dst[ix]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] this.dst[jx]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 184 | !(ix@233@01 >= 0 && ix@233@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))| && jx@234@01 >= 0 && jx@234@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))))| && ix@233@01 != jx@234@01)]
(assert (not
  (and
    (>= ix@233@01 0)
    (and
      (<
        ix@233@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
      (and
        (>= jx@234@01 0)
        (and
          (<
            jx@234@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
          (not (= ix@233@01 jx@234@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= ix@233@01 0)
    (and
      (<
        ix@233@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
      (and
        (>= jx@234@01 0)
        (and
          (<
            jx@234@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
          (not (= ix@233@01 jx@234@01))))))
  (and
    (>= ix@233@01 0)
    (<
      ix@233@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
    (>= jx@234@01 0)
    (<
      jx@234@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
    (not (= ix@233@01 jx@234@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@233@01 0)
      (and
        (<
          ix@233@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
        (and
          (>= jx@234@01 0)
          (and
            (<
              jx@234@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
            (not (= ix@233@01 jx@234@01)))))))
  (and
    (>= ix@233@01 0)
    (and
      (<
        ix@233@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
      (and
        (>= jx@234@01 0)
        (and
          (<
            jx@234@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
          (not (= ix@233@01 jx@234@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@233@01 Int) (jx@234@01 Int)) (!
  (and
    (=>
      (>= ix@233@01 0)
      (and
        (>= ix@233@01 0)
        (=>
          (<
            ix@233@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
          (and
            (<
              ix@233@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
            (=>
              (>= jx@234@01 0)
              (and
                (>= jx@234@01 0)
                (or
                  (<
                    jx@234@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
                  (not
                    (<
                      jx@234@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
            (or (>= jx@234@01 0) (not (>= jx@234@01 0)))))
        (or
          (<
            ix@233@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
          (not
            (<
              ix@233@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
    (or (>= ix@233@01 0) (not (>= ix@233@01 0)))
    (=>
      (and
        (>= ix@233@01 0)
        (and
          (<
            ix@233@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
          (and
            (>= jx@234@01 0)
            (and
              (<
                jx@234@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
              (not (= ix@233@01 jx@234@01))))))
      (and
        (>= ix@233@01 0)
        (<
          ix@233@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
        (>= jx@234@01 0)
        (<
          jx@234@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
        (not (= ix@233@01 jx@234@01))))
    (or
      (not
        (and
          (>= ix@233@01 0)
          (and
            (<
              ix@233@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
            (and
              (>= jx@234@01 0)
              (and
                (<
                  jx@234@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
                (not (= ix@233@01 jx@234@01)))))))
      (and
        (>= ix@233@01 0)
        (and
          (<
            ix@233@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
          (and
            (>= jx@234@01 0)
            (and
              (<
                jx@234@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
              (not (= ix@233@01 jx@234@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    ix@233@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    jx@234@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@186@12@186@140-aux|)))
(assert (forall ((ix@233@01 Int) (jx@234@01 Int)) (!
  (=>
    (and
      (>= ix@233@01 0)
      (and
        (<
          ix@233@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
        (and
          (>= jx@234@01 0)
          (and
            (<
              jx@234@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
            (not (= ix@233@01 jx@234@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          ix@233@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          jx@234@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    ix@233@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    jx@234@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@186@12@186@140|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
(declare-const _x_tid@235@01 Int)
(push) ; 2
; [eval] (_x_tid in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@218@01) _x_tid@235@01))
; [eval] this.dst[_x_tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= _x_tid@235@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  _x_tid@235@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@236@01 ($Ref) Int)
(declare-fun img@237@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((_x_tid1@235@01 Int) (_x_tid2@235@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@218@01) _x_tid1@235@01)
      (Seq_contains (Seq_range 0 gsize@218@01) _x_tid2@235@01)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          _x_tid1@235@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          _x_tid2@235@01)))
    (= _x_tid1@235@01 _x_tid2@235@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((_x_tid@235@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@218@01) _x_tid@235@01)
    (and
      (=
        (inv@236@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          _x_tid@235@01))
        _x_tid@235@01)
      (img@237@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        _x_tid@235@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    _x_tid@235@01))
  :qid |quant-u-52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (inv@236@01 r))
      r))
  :pattern ((inv@236@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((_x_tid@235@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@218@01) _x_tid@235@01)
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          _x_tid@235@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    _x_tid@235@01))
  :qid |Integer_value-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        _x_tid@235@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
        i@230@01))
    (=
      (and
        (img@237@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))))
  
  :qid |quant-u-53|))))
(check-sat)
; unknown
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
  $Snap.unit))
; [eval] half + half == gsize
; [eval] half + half
(assert (= (+ half@223@01 half@223@01) gsize@218@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= 0 && 0 < gsize ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] 0 <= 0 && 0 < gsize
; [eval] 0 <= 0
(set-option :timeout 0)
(push) ; 2
; [then-branch: 185 | False | live]
; [else-branch: 185 | True | live]
(push) ; 3
; [then-branch: 185 | False]
(assert false)
(pop) ; 3
(push) ; 3
; [else-branch: 185 | True]
; [eval] 0 < gsize
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (< 0 gsize@218@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< 0 gsize@218@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 186 | 0 < gsize@218@01 | live]
; [else-branch: 186 | !(0 < gsize@218@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 186 | 0 < gsize@218@01]
(assert (< 0 gsize@218@01))
; [eval] (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
(declare-const i@238@01 Int)
(push) ; 4
; [eval] 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] 0 <= i && i < half
; [eval] 0 <= i
(push) ; 5
; [then-branch: 187 | !(0 <= i@238@01) | live]
; [else-branch: 187 | 0 <= i@238@01 | live]
(push) ; 6
; [then-branch: 187 | !(0 <= i@238@01)]
(assert (not (<= 0 i@238@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 187 | 0 <= i@238@01]
(assert (<= 0 i@238@01))
; [eval] i < half
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@238@01) (not (<= 0 i@238@01))))
(push) ; 5
; [then-branch: 188 | 0 <= i@238@01 && i@238@01 < half@223@01 | live]
; [else-branch: 188 | !(0 <= i@238@01 && i@238@01 < half@223@01) | live]
(push) ; 6
; [then-branch: 188 | 0 <= i@238@01 && i@238@01 < half@223@01]
(assert (and (<= 0 i@238@01) (< i@238@01 half@223@01)))
; [eval] this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] this.dst[0]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(declare-const sm@239@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
(declare-const pm@240@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@240@01  $FPM) r)
    (+
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (/ (to_real 1) (to_real gsize@218@01))
        $Perm.No)
      (ite
        (and
          (img@237@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@240@01  $FPM) r))
  :qid |qp.resPrmSumDef25|)))
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_Integer_value (as pm@240@01  $FPM) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    0)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i@238@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  i@238@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@237@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
    :qid |qp.fvfValDef24|))))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@232@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@238@01))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@231@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
            i@238@01))))
      (/ (to_real 1) (to_real gsize@218@01))
      $Perm.No)
    (ite
      (and
        (img@237@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@238@01))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@236@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
            i@238@01))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 188 | !(0 <= i@238@01 && i@238@01 < half@223@01)]
(assert (not (and (<= 0 i@238@01) (< i@238@01 half@223@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@240@01  $FPM) r)
    (+
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (/ (to_real 1) (to_real gsize@218@01))
        $Perm.No)
      (ite
        (and
          (img@237@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@240@01  $FPM) r))
  :qid |qp.resPrmSumDef25|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 i@238@01) (< i@238@01 half@223@01)))
  (and (<= 0 i@238@01) (< i@238@01 half@223@01))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@240@01  $FPM) r)
    (+
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (/ (to_real 1) (to_real gsize@218@01))
        $Perm.No)
      (ite
        (and
          (img@237@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@240@01  $FPM) r))
  :qid |qp.resPrmSumDef25|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@238@01 Int)) (!
  (and
    (or (<= 0 i@238@01) (not (<= 0 i@238@01)))
    (or
      (not (and (<= 0 i@238@01) (< i@238@01 half@223@01)))
      (and (<= 0 i@238@01) (< i@238@01 half@223@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    i@238@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@189@41@189@141-aux|)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@240@01  $FPM) r)
    (+
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (/ (to_real 1) (to_real gsize@218@01))
        $Perm.No)
      (ite
        (and
          (img@237@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@240@01  $FPM) r))
  :qid |qp.resPrmSumDef25|)))
(assert (=>
  (< 0 gsize@218@01)
  (and
    (< 0 gsize@218@01)
    (forall ((i@238@01 Int)) (!
      (and
        (or (<= 0 i@238@01) (not (<= 0 i@238@01)))
        (or
          (not (and (<= 0 i@238@01) (< i@238@01 half@223@01)))
          (and (<= 0 i@238@01) (< i@238@01 half@223@01))))
      :pattern ((Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
        i@238@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@189@41@189@141-aux|)))))
(assert (< 0 gsize@218@01))
(assert (=>
  (< 0 gsize@218@01)
  (forall ((i@238@01 Int)) (!
    (=>
      (and (<= 0 i@238@01) (< i@238@01 half@223@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          0))
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@238@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      i@238@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@189@41@189@141|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= 1 && 1 < gsize ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] 0 <= 1 && 1 < gsize
; [eval] 0 <= 1
(push) ; 2
; [then-branch: 189 | False | live]
; [else-branch: 189 | True | live]
(push) ; 3
; [then-branch: 189 | False]
(assert false)
(pop) ; 3
(push) ; 3
; [else-branch: 189 | True]
; [eval] 1 < gsize
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (< 1 gsize@218@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< 1 gsize@218@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 190 | 1 < gsize@218@01 | live]
; [else-branch: 190 | !(1 < gsize@218@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 190 | 1 < gsize@218@01]
(assert (< 1 gsize@218@01))
; [eval] (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
(declare-const i@241@01 Int)
(push) ; 4
; [eval] half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value
; [eval] half <= i && i < gsize
; [eval] half <= i
(push) ; 5
; [then-branch: 191 | !(half@223@01 <= i@241@01) | live]
; [else-branch: 191 | half@223@01 <= i@241@01 | live]
(push) ; 6
; [then-branch: 191 | !(half@223@01 <= i@241@01)]
(assert (not (<= half@223@01 i@241@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 191 | half@223@01 <= i@241@01]
(assert (<= half@223@01 i@241@01))
; [eval] i < gsize
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= half@223@01 i@241@01) (not (<= half@223@01 i@241@01))))
(push) ; 5
; [then-branch: 192 | half@223@01 <= i@241@01 && i@241@01 < gsize@218@01 | live]
; [else-branch: 192 | !(half@223@01 <= i@241@01 && i@241@01 < gsize@218@01) | live]
(push) ; 6
; [then-branch: 192 | half@223@01 <= i@241@01 && i@241@01 < gsize@218@01]
(assert (and (<= half@223@01 i@241@01) (< i@241@01 gsize@218@01)))
; [eval] this.dst[1].Integer_value >= this.src[i].Integer_value
; [eval] this.dst[1]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@237@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
    :qid |qp.fvfValDef24|))))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@232@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          1))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@231@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            1))))
      (/ (to_real 1) (to_real gsize@218@01))
      $Perm.No)
    (ite
      (and
        (img@237@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          1))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@236@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            1))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i@241@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  i@241@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@237@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
    :qid |qp.fvfValDef24|))))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@232@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@241@01))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@231@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
            i@241@01))))
      (/ (to_real 1) (to_real gsize@218@01))
      $Perm.No)
    (ite
      (and
        (img@237@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@241@01))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@236@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
            i@241@01))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 192 | !(half@223@01 <= i@241@01 && i@241@01 < gsize@218@01)]
(assert (not (and (<= half@223@01 i@241@01) (< i@241@01 gsize@218@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
; Joined path conditions
(assert (or
  (not (and (<= half@223@01 i@241@01) (< i@241@01 gsize@218@01)))
  (and (<= half@223@01 i@241@01) (< i@241@01 gsize@218@01))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@241@01 Int)) (!
  (and
    (or (<= half@223@01 i@241@01) (not (<= half@223@01 i@241@01)))
    (or
      (not (and (<= half@223@01 i@241@01) (< i@241@01 gsize@218@01)))
      (and (<= half@223@01 i@241@01) (< i@241@01 gsize@218@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    i@241@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@190@41@190@145-aux|)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (=>
  (< 1 gsize@218@01)
  (and
    (< 1 gsize@218@01)
    (forall ((i@241@01 Int)) (!
      (and
        (or (<= half@223@01 i@241@01) (not (<= half@223@01 i@241@01)))
        (or
          (not (and (<= half@223@01 i@241@01) (< i@241@01 gsize@218@01)))
          (and (<= half@223@01 i@241@01) (< i@241@01 gsize@218@01))))
      :pattern ((Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
        i@241@01))
      :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@190@41@190@145-aux|)))))
(assert (< 1 gsize@218@01))
(assert (=>
  (< 1 gsize@218@01)
  (forall ((i@241@01 Int)) (!
    (=>
      (and (<= half@223@01 i@241@01) (< i@241@01 gsize@218@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          1))
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@241@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      i@241@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@190@41@190@145|))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@242@01 $Snap)
(assert (= $t@242@01 ($Snap.combine ($Snap.first $t@242@01) ($Snap.second $t@242@01))))
(assert (= ($Snap.first $t@242@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@242@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@242@01))
    ($Snap.second ($Snap.second $t@242@01)))))
(assert (= ($Snap.first ($Snap.second $t@242@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@242@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@242@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@242@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@242@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@242@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@242@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
(declare-const $k@243@01 $Perm)
(assert ($Perm.isReadVar $k@243@01))
(assert (<= $Perm.No $k@243@01))
(assert (<= $k@243@01 $Perm.Write))
(assert (=> (< $Perm.No $k@243@01) (not (= this@216@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  $Snap.unit))
; [eval] |this.src| == gsize
; [eval] |this.src|
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@243@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))
  gsize@218@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
(declare-const $k@244@01 $Perm)
(assert ($Perm.isReadVar $k@244@01))
(assert (<= $Perm.No $k@244@01))
(assert (<= $k@244@01 $Perm.Write))
(assert (=> (< $Perm.No $k@244@01) (not (= this@216@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
  $Snap.unit))
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@244@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
  gsize@218@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
  $Snap.unit))
; [eval] 4 <= gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
  $Snap.unit))
; [eval] gsize % 4 == 0
; [eval] gsize % 4
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))
  $Snap.unit))
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@245@01 Int)
(declare-const jx@246@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 4
; [then-branch: 193 | !(ix@245@01 >= 0) | live]
; [else-branch: 193 | ix@245@01 >= 0 | live]
(push) ; 5
; [then-branch: 193 | !(ix@245@01 >= 0)]
(assert (not (>= ix@245@01 0)))
(pop) ; 5
(push) ; 5
; [else-branch: 193 | ix@245@01 >= 0]
(assert (>= ix@245@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@243@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 194 | !(ix@245@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))|) | live]
; [else-branch: 194 | ix@245@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))| | live]
(push) ; 7
; [then-branch: 194 | !(ix@245@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))|)]
(assert (not
  (<
    ix@245@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 194 | ix@245@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))|]
(assert (<
  ix@245@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
; [eval] jx >= 0
(push) ; 8
; [then-branch: 195 | !(jx@246@01 >= 0) | live]
; [else-branch: 195 | jx@246@01 >= 0 | live]
(push) ; 9
; [then-branch: 195 | !(jx@246@01 >= 0)]
(assert (not (>= jx@246@01 0)))
(pop) ; 9
(push) ; 9
; [else-branch: 195 | jx@246@01 >= 0]
(assert (>= jx@246@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@243@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [then-branch: 196 | !(jx@246@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))|) | live]
; [else-branch: 196 | jx@246@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))| | live]
(push) ; 11
; [then-branch: 196 | !(jx@246@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))|)]
(assert (not
  (<
    jx@246@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 196 | jx@246@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))|]
(assert (<
  jx@246@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
; [eval] ix != jx
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@246@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
  (not
    (<
      jx@246@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@246@01 0)
  (and
    (>= jx@246@01 0)
    (or
      (<
        jx@246@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
      (not
        (<
          jx@246@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))
(assert (or (>= jx@246@01 0) (not (>= jx@246@01 0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@245@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
  (and
    (<
      ix@245@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
    (=>
      (>= jx@246@01 0)
      (and
        (>= jx@246@01 0)
        (or
          (<
            jx@246@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          (not
            (<
              jx@246@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
    (or (>= jx@246@01 0) (not (>= jx@246@01 0))))))
(assert (or
  (<
    ix@245@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
  (not
    (<
      ix@245@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@245@01 0)
  (and
    (>= ix@245@01 0)
    (=>
      (<
        ix@245@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
      (and
        (<
          ix@245@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        (=>
          (>= jx@246@01 0)
          (and
            (>= jx@246@01 0)
            (or
              (<
                jx@246@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
              (not
                (<
                  jx@246@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
        (or (>= jx@246@01 0) (not (>= jx@246@01 0)))))
    (or
      (<
        ix@245@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
      (not
        (<
          ix@245@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))
(assert (or (>= ix@245@01 0) (not (>= ix@245@01 0))))
(push) ; 4
; [then-branch: 197 | ix@245@01 >= 0 && ix@245@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))| && jx@246@01 >= 0 && jx@246@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))| && ix@245@01 != jx@246@01 | live]
; [else-branch: 197 | !(ix@245@01 >= 0 && ix@245@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))| && jx@246@01 >= 0 && jx@246@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))| && ix@245@01 != jx@246@01) | live]
(push) ; 5
; [then-branch: 197 | ix@245@01 >= 0 && ix@245@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))| && jx@246@01 >= 0 && jx@246@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))| && ix@245@01 != jx@246@01]
(assert (and
  (>= ix@245@01 0)
  (and
    (<
      ix@245@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
    (and
      (>= jx@246@01 0)
      (and
        (<
          jx@246@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        (not (= ix@245@01 jx@246@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@243@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@243@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 197 | !(ix@245@01 >= 0 && ix@245@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))| && jx@246@01 >= 0 && jx@246@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@242@01))))))| && ix@245@01 != jx@246@01)]
(assert (not
  (and
    (>= ix@245@01 0)
    (and
      (<
        ix@245@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
      (and
        (>= jx@246@01 0)
        (and
          (<
            jx@246@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          (not (= ix@245@01 jx@246@01))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (>= ix@245@01 0)
    (and
      (<
        ix@245@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
      (and
        (>= jx@246@01 0)
        (and
          (<
            jx@246@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          (not (= ix@245@01 jx@246@01))))))
  (and
    (>= ix@245@01 0)
    (<
      ix@245@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
    (>= jx@246@01 0)
    (<
      jx@246@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
    (not (= ix@245@01 jx@246@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@245@01 0)
      (and
        (<
          ix@245@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        (and
          (>= jx@246@01 0)
          (and
            (<
              jx@246@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            (not (= ix@245@01 jx@246@01)))))))
  (and
    (>= ix@245@01 0)
    (and
      (<
        ix@245@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
      (and
        (>= jx@246@01 0)
        (and
          (<
            jx@246@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          (not (= ix@245@01 jx@246@01))))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@245@01 Int) (jx@246@01 Int)) (!
  (and
    (=>
      (>= ix@245@01 0)
      (and
        (>= ix@245@01 0)
        (=>
          (<
            ix@245@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          (and
            (<
              ix@245@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            (=>
              (>= jx@246@01 0)
              (and
                (>= jx@246@01 0)
                (or
                  (<
                    jx@246@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
                  (not
                    (<
                      jx@246@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
            (or (>= jx@246@01 0) (not (>= jx@246@01 0)))))
        (or
          (<
            ix@245@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          (not
            (<
              ix@245@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
    (or (>= ix@245@01 0) (not (>= ix@245@01 0)))
    (=>
      (and
        (>= ix@245@01 0)
        (and
          (<
            ix@245@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          (and
            (>= jx@246@01 0)
            (and
              (<
                jx@246@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
              (not (= ix@245@01 jx@246@01))))))
      (and
        (>= ix@245@01 0)
        (<
          ix@245@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        (>= jx@246@01 0)
        (<
          jx@246@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        (not (= ix@245@01 jx@246@01))))
    (or
      (not
        (and
          (>= ix@245@01 0)
          (and
            (<
              ix@245@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            (and
              (>= jx@246@01 0)
              (and
                (<
                  jx@246@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
                (not (= ix@245@01 jx@246@01)))))))
      (and
        (>= ix@245@01 0)
        (and
          (<
            ix@245@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          (and
            (>= jx@246@01 0)
            (and
              (<
                jx@246@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
              (not (= ix@245@01 jx@246@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    ix@245@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    jx@246@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@202@11@202@139-aux|)))
(assert (forall ((ix@245@01 Int) (jx@246@01 Int)) (!
  (=>
    (and
      (>= ix@245@01 0)
      (and
        (<
          ix@245@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        (and
          (>= jx@246@01 0)
          (and
            (<
              jx@246@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            (not (= ix@245@01 jx@246@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          ix@245@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          jx@246@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    ix@245@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    jx@246@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@202@11@202@139|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))
(declare-const i@247@01 Int)
(push) ; 3
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@218@01) i@247@01))
; [eval] this.src[i]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@243@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= i@247@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  i@247@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (= gsize@218@01 0))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@248@01 ($Ref) Int)
(declare-fun img@249@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 3
(assert (not (forall ((i@247@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@218@01) i@247@01)
    (or
      (= (/ (to_real 1) (to_real gsize@218@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))))
  
  :qid |quant-u-54|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((i1@247@01 Int) (i2@247@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@218@01) i1@247@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@218@01) i2@247@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          i1@247@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          i2@247@01)))
    (= i1@247@01 i2@247@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@247@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@218@01) i@247@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01))))
    (and
      (=
        (inv@248@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          i@247@01))
        i@247@01)
      (img@249@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        i@247@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    i@247@01))
  :qid |quant-u-55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@249@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        (inv@248@01 r))
      r))
  :pattern ((inv@248@01 r))
  :qid |Integer_value-fctOfInv|)))
; Permissions are non-negative
(assert (forall ((i@247@01 Int)) (!
  (<= $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    i@247@01))
  :qid |Integer_value-permAtLeastZero|)))
; Field permissions are at most one
(assert (forall ((i@247@01 Int)) (!
  (<= (/ (to_real 1) (to_real gsize@218@01)) $Perm.Write)
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    i@247@01))
  :qid |Integer_value-permAtMostOne|)))
; Permission implies non-null receiver
(assert (forall ((i@247@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@218@01) i@247@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          i@247@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    i@247@01))
  :qid |Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))
  $Snap.unit))
; [eval] this.src == old(this.src)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@243@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.src)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))
  $Snap.unit))
; [eval] this.dst == old(this.dst)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@244@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.dst)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))))
; [eval] tid == 0
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= tid@219@01 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= tid@219@01 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 198 | tid@219@01 == 0 | live]
; [else-branch: 198 | tid@219@01 != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 198 | tid@219@01 == 0]
(assert (= tid@219@01 0))
; [eval] this.dst[0]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@244@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(declare-const sm@250@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
    0))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
      0))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))))
; [eval] tid == 0
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= tid@219@01 0))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 199 | tid@219@01 == 0 | live]
; [else-branch: 199 | tid@219@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 199 | tid@219@01 == 0]
; [eval] this.dst[1]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@244@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(declare-const sm@251@01 $FVF<Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
    1))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
    1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
    0))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
      1))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))
  $Snap.unit))
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= tid@219@01 0))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 200 | tid@219@01 == 0 | live]
; [else-branch: 200 | tid@219@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 200 | tid@219@01 == 0]
; [eval] (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
(declare-const i@252@01 Int)
(push) ; 7
; [eval] 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] 0 <= i && i < half
; [eval] 0 <= i
(push) ; 8
; [then-branch: 201 | !(0 <= i@252@01) | live]
; [else-branch: 201 | 0 <= i@252@01 | live]
(push) ; 9
; [then-branch: 201 | !(0 <= i@252@01)]
(assert (not (<= 0 i@252@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 201 | 0 <= i@252@01]
(assert (<= 0 i@252@01))
; [eval] i < half
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@252@01) (not (<= 0 i@252@01))))
(push) ; 8
; [then-branch: 202 | 0 <= i@252@01 && i@252@01 < half@223@01 | live]
; [else-branch: 202 | !(0 <= i@252@01 && i@252@01 < half@223@01) | live]
(push) ; 9
; [then-branch: 202 | 0 <= i@252@01 && i@252@01 < half@223@01]
(assert (and (<= 0 i@252@01) (< i@252@01 half@223@01)))
; [eval] this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] this.dst[0]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@244@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(declare-const sm@253@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef28|)))
(declare-const pm@254@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@254@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
          (/ (to_real 1) (to_real gsize@218@01))
          $Perm.No)
        (ite
          (=
            r
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
              0))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            1))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@254@01  $FPM) r))
  :qid |qp.resPrmSumDef29|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_Integer_value (as pm@254@01  $FPM) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
    0)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@243@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@252@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  i@252@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@249@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r))
    :qid |qp.fvfValDef26|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          0))
      (=
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          1))
      (=
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef28|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (img@249@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            i@252@01))
          (Seq_contains
            (Seq_range 0 gsize@218@01)
            (inv@248@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              i@252@01))))
        (/ (to_real 1) (to_real gsize@218@01))
        $Perm.No)
      (ite
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            i@252@01)
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            0))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          i@252@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          1))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 202 | !(0 <= i@252@01 && i@252@01 < half@223@01)]
(assert (not (and (<= 0 i@252@01) (< i@252@01 half@223@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@254@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
          (/ (to_real 1) (to_real gsize@218@01))
          $Perm.No)
        (ite
          (=
            r
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
              0))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            1))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@254@01  $FPM) r))
  :qid |qp.resPrmSumDef29|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 i@252@01) (< i@252@01 half@223@01)))
  (and (<= 0 i@252@01) (< i@252@01 half@223@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@254@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
          (/ (to_real 1) (to_real gsize@218@01))
          $Perm.No)
        (ite
          (=
            r
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
              0))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            1))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@254@01  $FPM) r))
  :qid |qp.resPrmSumDef29|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@252@01 Int)) (!
  (and
    (or (<= 0 i@252@01) (not (<= 0 i@252@01)))
    (or
      (not (and (<= 0 i@252@01) (< i@252@01 half@223@01)))
      (and (<= 0 i@252@01) (< i@252@01 half@223@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    i@252@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@208@27@208@127-aux|)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Integer_value (as pm@254@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
          (/ (to_real 1) (to_real gsize@218@01))
          $Perm.No)
        (ite
          (=
            r
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
              0))
          $Perm.Write
          $Perm.No))
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            1))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Integer_value (as pm@254@01  $FPM) r))
  :qid |qp.resPrmSumDef29|)))
(assert (=>
  (= tid@219@01 0)
  (forall ((i@252@01 Int)) (!
    (and
      (or (<= 0 i@252@01) (not (<= 0 i@252@01)))
      (or
        (not (and (<= 0 i@252@01) (< i@252@01 half@223@01)))
        (and (<= 0 i@252@01) (< i@252@01 half@223@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      i@252@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@208@27@208@127-aux|))))
(assert (=>
  (= tid@219@01 0)
  (forall ((i@252@01 Int)) (!
    (=>
      (and (<= 0 i@252@01) (< i@252@01 half@223@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          0))
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          i@252@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      i@252@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@208@27@208@127|))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))
  $Snap.unit))
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= tid@219@01 0))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 203 | tid@219@01 == 0 | live]
; [else-branch: 203 | tid@219@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 203 | tid@219@01 == 0]
; [eval] (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
(declare-const i@255@01 Int)
(push) ; 7
; [eval] half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value
; [eval] half <= i && i < gsize
; [eval] half <= i
(push) ; 8
; [then-branch: 204 | !(half@223@01 <= i@255@01) | live]
; [else-branch: 204 | half@223@01 <= i@255@01 | live]
(push) ; 9
; [then-branch: 204 | !(half@223@01 <= i@255@01)]
(assert (not (<= half@223@01 i@255@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 204 | half@223@01 <= i@255@01]
(assert (<= half@223@01 i@255@01))
; [eval] i < gsize
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= half@223@01 i@255@01) (not (<= half@223@01 i@255@01))))
(push) ; 8
; [then-branch: 205 | half@223@01 <= i@255@01 && i@255@01 < gsize@218@01 | live]
; [else-branch: 205 | !(half@223@01 <= i@255@01 && i@255@01 < gsize@218@01) | live]
(push) ; 9
; [then-branch: 205 | half@223@01 <= i@255@01 && i@255@01 < gsize@218@01]
(assert (and (<= half@223@01 i@255@01) (< i@255@01 gsize@218@01)))
; [eval] this.dst[1].Integer_value >= this.src[i].Integer_value
; [eval] this.dst[1]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@244@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@249@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r))
    :qid |qp.fvfValDef26|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          0))
      (=
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          1))
      (=
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef28|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (img@249@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            1))
          (Seq_contains
            (Seq_range 0 gsize@218@01)
            (inv@248@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
              1))))
        (/ (to_real 1) (to_real gsize@218@01))
        $Perm.No)
      (ite
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            1)
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            0))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          1)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          1))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@243@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@255@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  i@255@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@249@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r))
    :qid |qp.fvfValDef26|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          0))
      (=
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          1))
      (=
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r))
    :qid |qp.fvfValDef28|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (and
          (img@249@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            i@255@01))
          (Seq_contains
            (Seq_range 0 gsize@218@01)
            (inv@248@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              i@255@01))))
        (/ (to_real 1) (to_real gsize@218@01))
        $Perm.No)
      (ite
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            i@255@01)
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
            0))
        $Perm.Write
        $Perm.No))
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          i@255@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          1))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 205 | !(half@223@01 <= i@255@01 && i@255@01 < gsize@218@01)]
(assert (not (and (<= half@223@01 i@255@01) (< i@255@01 gsize@218@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef28|)))
; Joined path conditions
(assert (or
  (not (and (<= half@223@01 i@255@01) (< i@255@01 gsize@218@01)))
  (and (<= half@223@01 i@255@01) (< i@255@01 gsize@218@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef28|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@255@01 Int)) (!
  (and
    (or (<= half@223@01 i@255@01) (not (<= half@223@01 i@255@01)))
    (or
      (not (and (<= half@223@01 i@255@01) (< i@255@01 gsize@218@01)))
      (and (<= half@223@01 i@255@01) (< i@255@01 gsize@218@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    i@255@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@209@27@209@131-aux|)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@248@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        0))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@250@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
        1))
    (=
      ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value (as sm@251@01  $FVF<Integer_value>) r))
  :qid |qp.fvfValDef28|)))
(assert (=>
  (= tid@219@01 0)
  (forall ((i@255@01 Int)) (!
    (and
      (or (<= half@223@01 i@255@01) (not (<= half@223@01 i@255@01)))
      (or
        (not (and (<= half@223@01 i@255@01) (< i@255@01 gsize@218@01)))
        (and (<= half@223@01 i@255@01) (< i@255@01 gsize@218@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      i@255@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@209@27@209@131-aux|))))
(assert (=>
  (= tid@219@01 0)
  (forall ((i@255@01 Int)) (!
    (=>
      (and (<= half@223@01 i@255@01) (< i@255@01 gsize@218@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
          1))
        ($FVF.lookup_Integer_value (as sm@253@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          i@255@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      i@255@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@209@27@209@131|))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 198 | tid@219@01 != 0]
(assert (not (= tid@219@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))))
; [eval] tid == 0
; [then-branch: 206 | tid@219@01 == 0 | dead]
; [else-branch: 206 | tid@219@01 != 0 | live]
(push) ; 4
; [else-branch: 206 | tid@219@01 != 0]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))
  $Snap.unit))
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(push) ; 5
; [then-branch: 207 | tid@219@01 == 0 | dead]
; [else-branch: 207 | tid@219@01 != 0 | live]
(push) ; 6
; [else-branch: 207 | tid@219@01 != 0]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))
  $Snap.unit))
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(push) ; 5
; [then-branch: 208 | tid@219@01 == 0 | dead]
; [else-branch: 208 | tid@219@01 != 0 | live]
(push) ; 6
; [else-branch: 208 | tid@219@01 != 0]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@256@01 $Perm)
(assert ($Perm.isReadVar $k@256@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@226@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (< $k@256@01 $k@226@01))
(assert (<= $Perm.No (- $k@226@01 $k@256@01)))
(assert (<= (- $k@226@01 $k@256@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@226@01 $k@256@01)) (not (= this@216@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@256@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] |this.src| == gsize
; [eval] |this.src|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(declare-const $k@257@01 $Perm)
(assert ($Perm.isReadVar $k@257@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@227@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (< $k@257@01 $k@227@01))
(assert (<= $Perm.No (- $k@227@01 $k@257@01)))
(assert (<= (- $k@227@01 $k@257@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@227@01 $k@257@01)) (not (= this@216@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@257@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] |this.dst| == gsize
; [eval] |this.dst|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] 4 <= gsize
; [eval] gsize % 4 == 0
; [eval] gsize % 4
; [eval] (forall ix: Int, jx: Int :: { this.src[ix], this.src[jx] } ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx])
(declare-const ix@258@01 Int)
(declare-const jx@259@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx))) ==> this.src[ix] != this.src[jx]
; [eval] ix >= 0 && (ix < |this.src| && (jx >= 0 && (jx < |this.src| && ix != jx)))
; [eval] ix >= 0
(push) ; 4
; [then-branch: 209 | !(ix@258@01 >= 0) | live]
; [else-branch: 209 | ix@258@01 >= 0 | live]
(push) ; 5
; [then-branch: 209 | !(ix@258@01 >= 0)]
(assert (not (>= ix@258@01 0)))
(pop) ; 5
(push) ; 5
; [else-branch: 209 | ix@258@01 >= 0]
(assert (>= ix@258@01 0))
; [eval] ix < |this.src|
; [eval] |this.src|
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 210 | !(ix@258@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|) | live]
; [else-branch: 210 | ix@258@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| | live]
(push) ; 7
; [then-branch: 210 | !(ix@258@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|)]
(assert (not
  (<
    ix@258@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 210 | ix@258@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|]
(assert (<
  ix@258@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
; [eval] jx >= 0
(push) ; 8
; [then-branch: 211 | !(jx@259@01 >= 0) | live]
; [else-branch: 211 | jx@259@01 >= 0 | live]
(push) ; 9
; [then-branch: 211 | !(jx@259@01 >= 0)]
(assert (not (>= jx@259@01 0)))
(pop) ; 9
(push) ; 9
; [else-branch: 211 | jx@259@01 >= 0]
(assert (>= jx@259@01 0))
; [eval] jx < |this.src|
; [eval] |this.src|
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [then-branch: 212 | !(jx@259@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|) | live]
; [else-branch: 212 | jx@259@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| | live]
(push) ; 11
; [then-branch: 212 | !(jx@259@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|)]
(assert (not
  (<
    jx@259@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 212 | jx@259@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))|]
(assert (<
  jx@259@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
; [eval] ix != jx
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    jx@259@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  (not
    (<
      jx@259@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= jx@259@01 0)
  (and
    (>= jx@259@01 0)
    (or
      (<
        jx@259@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (not
        (<
          jx@259@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
(assert (or (>= jx@259@01 0) (not (>= jx@259@01 0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ix@258@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  (and
    (<
      ix@258@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    (=>
      (>= jx@259@01 0)
      (and
        (>= jx@259@01 0)
        (or
          (<
            jx@259@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (not
            (<
              jx@259@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
    (or (>= jx@259@01 0) (not (>= jx@259@01 0))))))
(assert (or
  (<
    ix@258@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  (not
    (<
      ix@258@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= ix@258@01 0)
  (and
    (>= ix@258@01 0)
    (=>
      (<
        ix@258@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (and
        (<
          ix@258@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (=>
          (>= jx@259@01 0)
          (and
            (>= jx@259@01 0)
            (or
              (<
                jx@259@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
              (not
                (<
                  jx@259@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
        (or (>= jx@259@01 0) (not (>= jx@259@01 0)))))
    (or
      (<
        ix@258@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (not
        (<
          ix@258@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
(assert (or (>= ix@258@01 0) (not (>= ix@258@01 0))))
(push) ; 4
; [then-branch: 213 | ix@258@01 >= 0 && ix@258@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && jx@259@01 >= 0 && jx@259@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && ix@258@01 != jx@259@01 | live]
; [else-branch: 213 | !(ix@258@01 >= 0 && ix@258@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && jx@259@01 >= 0 && jx@259@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && ix@258@01 != jx@259@01) | live]
(push) ; 5
; [then-branch: 213 | ix@258@01 >= 0 && ix@258@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && jx@259@01 >= 0 && jx@259@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && ix@258@01 != jx@259@01]
(assert (and
  (>= ix@258@01 0)
  (and
    (<
      ix@258@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    (and
      (>= jx@259@01 0)
      (and
        (<
          jx@259@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (not (= ix@258@01 jx@259@01)))))))
; [eval] this.src[ix] != this.src[jx]
; [eval] this.src[ix]
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[jx]
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 213 | !(ix@258@01 >= 0 && ix@258@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && jx@259@01 >= 0 && jx@259@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@225@01))))))| && ix@258@01 != jx@259@01)]
(assert (not
  (and
    (>= ix@258@01 0)
    (and
      (<
        ix@258@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (and
        (>= jx@259@01 0)
        (and
          (<
            jx@259@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (not (= ix@258@01 jx@259@01))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (>= ix@258@01 0)
    (and
      (<
        ix@258@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (and
        (>= jx@259@01 0)
        (and
          (<
            jx@259@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (not (= ix@258@01 jx@259@01))))))
  (and
    (>= ix@258@01 0)
    (<
      ix@258@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    (>= jx@259@01 0)
    (<
      jx@259@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    (not (= ix@258@01 jx@259@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= ix@258@01 0)
      (and
        (<
          ix@258@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (and
          (>= jx@259@01 0)
          (and
            (<
              jx@259@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            (not (= ix@258@01 jx@259@01)))))))
  (and
    (>= ix@258@01 0)
    (and
      (<
        ix@258@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      (and
        (>= jx@259@01 0)
        (and
          (<
            jx@259@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (not (= ix@258@01 jx@259@01))))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((ix@258@01 Int) (jx@259@01 Int)) (!
  (and
    (=>
      (>= ix@258@01 0)
      (and
        (>= ix@258@01 0)
        (=>
          (<
            ix@258@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (and
            (<
              ix@258@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            (=>
              (>= jx@259@01 0)
              (and
                (>= jx@259@01 0)
                (or
                  (<
                    jx@259@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
                  (not
                    (<
                      jx@259@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
            (or (>= jx@259@01 0) (not (>= jx@259@01 0)))))
        (or
          (<
            ix@258@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (not
            (<
              ix@258@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
    (or (>= ix@258@01 0) (not (>= ix@258@01 0)))
    (=>
      (and
        (>= ix@258@01 0)
        (and
          (<
            ix@258@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (and
            (>= jx@259@01 0)
            (and
              (<
                jx@259@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
              (not (= ix@258@01 jx@259@01))))))
      (and
        (>= ix@258@01 0)
        (<
          ix@258@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (>= jx@259@01 0)
        (<
          jx@259@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (not (= ix@258@01 jx@259@01))))
    (or
      (not
        (and
          (>= ix@258@01 0)
          (and
            (<
              ix@258@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            (and
              (>= jx@259@01 0)
              (and
                (<
                  jx@259@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
                (not (= ix@258@01 jx@259@01)))))))
      (and
        (>= ix@258@01 0)
        (and
          (<
            ix@258@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          (and
            (>= jx@259@01 0)
            (and
              (<
                jx@259@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
              (not (= ix@258@01 jx@259@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    ix@258@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    jx@259@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@202@11@202@139-aux|)))
(push) ; 3
(assert (not (forall ((ix@258@01 Int) (jx@259@01 Int)) (!
  (=>
    (and
      (>= ix@258@01 0)
      (and
        (<
          ix@258@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (and
          (>= jx@259@01 0)
          (and
            (<
              jx@259@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            (not (= ix@258@01 jx@259@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          ix@258@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          jx@259@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    ix@258@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    jx@259@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@202@11@202@139|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((ix@258@01 Int) (jx@259@01 Int)) (!
  (=>
    (and
      (>= ix@258@01 0)
      (and
        (<
          ix@258@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        (and
          (>= jx@259@01 0)
          (and
            (<
              jx@259@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            (not (= ix@258@01 jx@259@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          ix@258@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          jx@259@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    ix@258@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    jx@259@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@202@11@202@139|)))
(declare-const i@260@01 Int)
(push) ; 3
; [eval] (i in [0..gsize))
; [eval] [0..gsize)
(assert (Seq_contains (Seq_range 0 gsize@218@01) i@260@01))
(push) ; 4
(assert (not (not (= gsize@218@01 0))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= i@260@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  i@260@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@261@01 ($Ref) Int)
(declare-fun img@262@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(push) ; 3
(assert (not (forall ((i@260@01 Int)) (!
  (=>
    (Seq_contains (Seq_range 0 gsize@218@01) i@260@01)
    (or
      (= (/ (to_real 1) (to_real gsize@218@01)) $Perm.No)
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))))
  
  :qid |quant-u-56|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((i1@260@01 Int) (i2@260@01 Int)) (!
  (=>
    (and
      (and
        (Seq_contains (Seq_range 0 gsize@218@01) i1@260@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01))))
      (and
        (Seq_contains (Seq_range 0 gsize@218@01) i2@260@01)
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01))))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i1@260@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i2@260@01)))
    (= i1@260@01 i2@260@01))
  
  :qid |Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@260@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@218@01) i@260@01)
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01))))
    (and
      (=
        (inv@261@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@260@01))
        i@260@01)
      (img@262@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
        i@260@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    i@260@01))
  :qid |Integer_value-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@262@01 r)
      (and
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@261@01 r))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
        (inv@261@01 r))
      r))
  :pattern ((inv@261@01 r))
  :qid |Integer_value-fctOfInv|)))
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((i@260@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      i@260@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      i@260@01))
  
  :qid |quant-u-57|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@263@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 gsize@218@01) (inv@261@01 r))
      (img@262@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          (inv@261@01 r))))
    ($Perm.min
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (/ (to_real 1) (to_real gsize@218@01))
        $Perm.No)
      (/ (to_real 1) (to_real gsize@218@01)))
    $Perm.No))
(define-fun pTaken@264@01 ((r $Ref)) $Perm
  (ite
    (and
      (Seq_contains (Seq_range 0 gsize@218@01) (inv@261@01 r))
      (img@262@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          (inv@261@01 r))))
    ($Perm.min
      (ite
        (and
          (img@237@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
        $Perm.Write
        $Perm.No)
      (- (/ (to_real 1) (to_real gsize@218@01)) (pTaken@263@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (/ (to_real 1) (to_real gsize@218@01))
        $Perm.No)
      (pTaken@263@01 r))
    $Perm.No)
  
  :qid |quant-u-59|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 gsize@218@01) (inv@261@01 r))
      (img@262@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          (inv@261@01 r))))
    (= (- (/ (to_real 1) (to_real gsize@218@01)) (pTaken@263@01 r)) $Perm.No))
  
  :qid |quant-u-60|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] this.src == old(this.src)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.src)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] this.dst == old(this.dst)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] old(this.dst)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [eval] tid == 0
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= tid@219@01 0))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= tid@219@01 0)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 214 | tid@219@01 == 0 | live]
; [else-branch: 214 | tid@219@01 != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 214 | tid@219@01 == 0]
(assert (= tid@219@01 0))
; [eval] this.dst[0]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@265@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        0))
    ($Perm.min
      (ite
        (and
          (img@237@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@237@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
        $Perm.Write
        $Perm.No)
      (pTaken@265@01 r))
    $Perm.No)
  
  :qid |quant-u-62|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@265@01 r) $Perm.No)
  
  :qid |quant-u-63|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        0))
    (= (- $Perm.Write (pTaken@265@01 r)) $Perm.No))
  
  :qid |quant-u-64|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@266@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (and
    (img@237@01 (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      0))
    (Seq_contains
      (Seq_range 0 gsize@218@01)
      (inv@236@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        0))))
  (=
    ($FVF.lookup_Integer_value (as sm@266@01  $FVF<Integer_value>) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      0))
    ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      0)))))
; [eval] tid == 0
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= tid@219@01 0))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 215 | tid@219@01 == 0 | live]
; [else-branch: 215 | tid@219@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 215 | tid@219@01 == 0]
; [eval] this.dst[1]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@267@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        1))
    ($Perm.min
      (ite
        (and
          (img@237@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
        (- $Perm.Write (pTaken@265@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@237@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
        (- $Perm.Write (pTaken@265@01 r))
        $Perm.No)
      (pTaken@267@01 r))
    $Perm.No)
  
  :qid |quant-u-66|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@267@01 r) $Perm.No)
  
  :qid |quant-u-67|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        1))
    (= (- $Perm.Write (pTaken@267@01 r)) $Perm.No))
  
  :qid |quant-u-68|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@268@01 $FVF<Integer_value>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (ite
    (and
      (img@237@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
        1))
      (Seq_contains
        (Seq_range 0 gsize@218@01)
        (inv@236@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          1))))
    (<
      $Perm.No
      (-
        $Perm.Write
        (pTaken@265@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          1))))
    false)
  (=
    ($FVF.lookup_Integer_value (as sm@268@01  $FVF<Integer_value>) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      1))
    ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      1)))))
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= tid@219@01 0))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 216 | tid@219@01 == 0 | live]
; [else-branch: 216 | tid@219@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 216 | tid@219@01 == 0]
; [eval] (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
(declare-const i@269@01 Int)
(push) ; 7
; [eval] 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] 0 <= i && i < half
; [eval] 0 <= i
(push) ; 8
; [then-branch: 217 | !(0 <= i@269@01) | live]
; [else-branch: 217 | 0 <= i@269@01 | live]
(push) ; 9
; [then-branch: 217 | !(0 <= i@269@01)]
(assert (not (<= 0 i@269@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 217 | 0 <= i@269@01]
(assert (<= 0 i@269@01))
; [eval] i < half
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@269@01) (not (<= 0 i@269@01))))
(push) ; 8
; [then-branch: 218 | 0 <= i@269@01 && i@269@01 < half@223@01 | live]
; [else-branch: 218 | !(0 <= i@269@01 && i@269@01 < half@223@01) | live]
(push) ; 9
; [then-branch: 218 | 0 <= i@269@01 && i@269@01 < half@223@01]
(assert (and (<= 0 i@269@01) (< i@269@01 half@223@01)))
; [eval] this.dst[0].Integer_value >= this.src[i].Integer_value
; [eval] this.dst[0]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@237@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
    :qid |qp.fvfValDef24|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@232@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          0))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@231@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            0))))
      (/ (to_real 1) (to_real gsize@218@01))
      $Perm.No)
    (ite
      (and
        (img@237@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          0))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@236@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            0))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@269@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  i@269@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@237@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
    :qid |qp.fvfValDef24|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@232@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@269@01))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@231@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
            i@269@01))))
      (/ (to_real 1) (to_real gsize@218@01))
      $Perm.No)
    (ite
      (and
        (img@237@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@269@01))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@236@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
            i@269@01))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 218 | !(0 <= i@269@01 && i@269@01 < half@223@01)]
(assert (not (and (<= 0 i@269@01) (< i@269@01 half@223@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 i@269@01) (< i@269@01 half@223@01)))
  (and (<= 0 i@269@01) (< i@269@01 half@223@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@269@01 Int)) (!
  (and
    (or (<= 0 i@269@01) (not (<= 0 i@269@01)))
    (or
      (not (and (<= 0 i@269@01) (< i@269@01 half@223@01)))
      (and (<= 0 i@269@01) (< i@269@01 half@223@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    i@269@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@208@27@208@127-aux|)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (=>
  (= tid@219@01 0)
  (forall ((i@269@01 Int)) (!
    (and
      (or (<= 0 i@269@01) (not (<= 0 i@269@01)))
      (or
        (not (and (<= 0 i@269@01) (< i@269@01 half@223@01)))
        (and (<= 0 i@269@01) (< i@269@01 half@223@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      i@269@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@208@27@208@127-aux|))))
(push) ; 5
(assert (not (=>
  (= tid@219@01 0)
  (forall ((i@269@01 Int)) (!
    (=>
      (and (<= 0 i@269@01) (< i@269@01 half@223@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          0))
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@269@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      i@269@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@208@27@208@127|)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= tid@219@01 0)
  (forall ((i@269@01 Int)) (!
    (=>
      (and (<= 0 i@269@01) (< i@269@01 half@223@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          0))
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@269@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      i@269@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@208@27@208@127|))))
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= tid@219@01 0))))
(check-sat)
; unknown
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [then-branch: 219 | tid@219@01 == 0 | live]
; [else-branch: 219 | tid@219@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 219 | tid@219@01 == 0]
; [eval] (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
(declare-const i@270@01 Int)
(push) ; 7
; [eval] half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value
; [eval] half <= i && i < gsize
; [eval] half <= i
(push) ; 8
; [then-branch: 220 | !(half@223@01 <= i@270@01) | live]
; [else-branch: 220 | half@223@01 <= i@270@01 | live]
(push) ; 9
; [then-branch: 220 | !(half@223@01 <= i@270@01)]
(assert (not (<= half@223@01 i@270@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 220 | half@223@01 <= i@270@01]
(assert (<= half@223@01 i@270@01))
; [eval] i < gsize
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= half@223@01 i@270@01) (not (<= half@223@01 i@270@01))))
(push) ; 8
; [then-branch: 221 | half@223@01 <= i@270@01 && i@270@01 < gsize@218@01 | live]
; [else-branch: 221 | !(half@223@01 <= i@270@01 && i@270@01 < gsize@218@01) | live]
(push) ; 9
; [then-branch: 221 | half@223@01 <= i@270@01 && i@270@01 < gsize@218@01]
(assert (and (<= half@223@01 i@270@01) (< i@270@01 gsize@218@01)))
; [eval] this.dst[1].Integer_value >= this.src[i].Integer_value
; [eval] this.dst[1]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@237@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
    :qid |qp.fvfValDef24|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@232@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          1))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@231@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            1))))
      (/ (to_real 1) (to_real gsize@218@01))
      $Perm.No)
    (ite
      (and
        (img@237@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          1))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@236@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
            1))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
; [eval] this.src[i]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@270@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  i@270@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@232@01 r)
          (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
        (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
        false)
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@237@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
      (=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
        ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
    :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
    :qid |qp.fvfValDef24|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@232@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@270@01))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@231@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
            i@270@01))))
      (/ (to_real 1) (to_real gsize@218@01))
      $Perm.No)
    (ite
      (and
        (img@237@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@270@01))
        (Seq_contains
          (Seq_range 0 gsize@218@01)
          (inv@236@01 (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
            i@270@01))))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 221 | !(half@223@01 <= i@270@01 && i@270@01 < gsize@218@01)]
(assert (not (and (<= half@223@01 i@270@01) (< i@270@01 gsize@218@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
; Joined path conditions
(assert (or
  (not (and (<= half@223@01 i@270@01) (< i@270@01 gsize@218@01)))
  (and (<= half@223@01 i@270@01) (< i@270@01 gsize@218@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@270@01 Int)) (!
  (and
    (or (<= half@223@01 i@270@01) (not (<= half@223@01 i@270@01)))
    (or
      (not (and (<= half@223@01 i@270@01) (< i@270@01 gsize@218@01)))
      (and (<= half@223@01 i@270@01) (< i@270@01 gsize@218@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    i@270@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@209@27@209@131-aux|)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@232@01 r)
        (Seq_contains (Seq_range 0 gsize@218@01) (inv@231@01 r)))
      (< $Perm.No (/ (to_real 1) (to_real gsize@218@01)))
      false)
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@237@01 r) (Seq_contains (Seq_range 0 gsize@218@01) (inv@236@01 r)))
    (=
      ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r)
      ($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) r))
  :pattern (($FVF.lookup_Integer_value ($SortWrappers.$SnapTo$FVF<Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (=>
  (= tid@219@01 0)
  (forall ((i@270@01 Int)) (!
    (and
      (or (<= half@223@01 i@270@01) (not (<= half@223@01 i@270@01)))
      (or
        (not (and (<= half@223@01 i@270@01) (< i@270@01 gsize@218@01)))
        (and (<= half@223@01 i@270@01) (< i@270@01 gsize@218@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      i@270@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@209@27@209@131-aux|))))
(push) ; 5
(assert (not (=>
  (= tid@219@01 0)
  (forall ((i@270@01 Int)) (!
    (=>
      (and (<= half@223@01 i@270@01) (< i@270@01 gsize@218@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          1))
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@270@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      i@270@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@209@27@209@131|)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (=>
  (= tid@219@01 0)
  (forall ((i@270@01 Int)) (!
    (=>
      (and (<= half@223@01 i@270@01) (< i@270@01 gsize@218@01))
      (>=
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
          1))
        ($FVF.lookup_Integer_value (as sm@239@01  $FVF<Integer_value>) (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
          i@270@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      i@270@01))
    :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/third_party/trigger-z3-bug.vpr@209@27@209@131|))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 214 | tid@219@01 != 0]
(assert (not (= tid@219@01 0)))
; [eval] tid == 0
; [then-branch: 222 | tid@219@01 == 0 | dead]
; [else-branch: 222 | tid@219@01 != 0 | live]
(push) ; 4
; [else-branch: 222 | tid@219@01 != 0]
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } 0 <= i && i < half ==> this.dst[0].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(push) ; 5
; [then-branch: 223 | tid@219@01 == 0 | dead]
; [else-branch: 223 | tid@219@01 != 0 | live]
(push) ; 6
; [else-branch: 223 | tid@219@01 != 0]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] tid == 0 ==> (forall i: Int :: { this.src[i] } half <= i && i < gsize ==> this.dst[1].Integer_value >= this.src[i].Integer_value)
; [eval] tid == 0
(push) ; 5
; [then-branch: 224 | tid@219@01 == 0 | dead]
; [else-branch: 224 | tid@219@01 != 0 | live]
(push) ; 6
; [else-branch: 224 | tid@219@01 != 0]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
