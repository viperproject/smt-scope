(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun key () T@U)
(declare-fun degree () T@U)
(declare-fun parent () T@U)
(declare-fun sibling () T@U)
(declare-fun child () T@U)
(declare-fun Nodes () T@U)
(declare-fun size () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun segLength (T@U T@U T@U) Int)
(declare-fun |segLength#triggerStateless| (T@U T@U) Int)
(declare-fun |heapseg#trigger| (T@U T@U) Bool)
(declare-fun heapseg (T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun |segLength'| (T@U T@U T@U) Int)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun PredicateType_heapsegType () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun |treeDegree'| (T@U T@U) Int)
(declare-fun |treeDegree#trigger| (T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun tree (T@U) T@U)
(declare-fun PredicateType_treeType () T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun |segDegree'| (T@U T@U T@U Int) Int)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |segDegree#triggerStateless| (T@U T@U Int) Int)
(declare-fun segSize (T@U T@U T@U) Int)
(declare-fun |segSize#triggerStateless| (T@U T@U) Int)
(declare-fun |treeSize'| (T@U T@U) Int)
(declare-fun |segSize'| (T@U T@U T@U) Int)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun |segParent'| (T@U T@U T@U) T@U)
(declare-fun |segParent#triggerStateless| (T@U T@U) T@U)
(declare-fun |sorted'| (T@U T@U T@U) Bool)
(declare-fun |sorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |presorted'| (T@U T@U T@U) Bool)
(declare-fun |presorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |validChildren'| (T@U T@U T@U) Bool)
(declare-fun |validChildren#triggerStateless| (T@U T@U) Bool)
(declare-fun |heapseg#everUsed| (T@U) Bool)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun heap (T@U) T@U)
(declare-fun PredicateType_heapType () T@T)
(declare-fun |treeKey'| (T@U T@U) Int)
(declare-fun |treeKey#triggerStateless| (T@U) Int)
(declare-fun |treeDegree#triggerStateless| (T@U) Int)
(declare-fun |treeSize#triggerStateless| (T@U) Int)
(declare-fun |treeParent'| (T@U T@U) T@U)
(declare-fun |treeParent#triggerStateless| (T@U) T@U)
(declare-fun |tree#trigger| (T@U T@U) Bool)
(declare-fun |tree#everUsed| (T@U) Bool)
(declare-fun |heap#trigger| (T@U T@U) Bool)
(declare-fun |heap#everUsed| (T@U) Bool)
(declare-fun segDegree (T@U T@U T@U Int) Int)
(declare-fun treeDegree (T@U T@U) Int)
(declare-fun |sorted#frame| (T@U T@U T@U) Bool)
(declare-fun |presorted#frame| (T@U T@U T@U) Bool)
(declare-fun |validChildren#frame| (T@U T@U T@U) Bool)
(declare-fun treeKey (T@U T@U) Int)
(declare-fun treeSize (T@U T@U) Int)
(declare-fun treeParent (T@U T@U) T@U)
(declare-fun |heapseg#sm| (T@U T@U) T@U)
(declare-fun |tree#sm| (T@U) T@U)
(declare-fun |heap#sm| (T@U) T@U)
(declare-fun |segLength#frame| (T@U T@U T@U) Int)
(declare-fun |segSize#frame| (T@U T@U T@U) Int)
(declare-fun |segParent#frame| (T@U T@U T@U) T@U)
(declare-fun presorted (T@U T@U T@U) Bool)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |sorted#trigger| (T@U T@U T@U) Bool)
(declare-fun segParent (T@U T@U T@U) T@U)
(declare-fun |segDegree#trigger| (T@U T@U T@U Int) Bool)
(declare-fun |segDegree#frame| (T@U T@U T@U Int) Int)
(declare-fun getPredWandId (T@U) Int)
(declare-fun |segSize#trigger| (T@U T@U T@U) Bool)
(declare-fun FullPerm () Real)
(declare-fun |segLength#trigger| (T@U T@U T@U) Bool)
(declare-fun |treeKey#frame| (T@U T@U) Int)
(declare-fun |treeDegree#frame| (T@U T@U) Int)
(declare-fun |treeSize#frame| (T@U T@U) Int)
(declare-fun |treeParent#frame| (T@U T@U) T@U)
(declare-fun sorted (T@U T@U T@U) Bool)
(declare-fun ZeroPMask () T@U)
(declare-fun validChildren (T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type key) (FieldType NormalFieldType intType))) (= (type degree) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type parent) (FieldType NormalFieldType RefType))) (= (type sibling) (FieldType NormalFieldType RefType))) (= (type child) (FieldType NormalFieldType RefType))) (= (type Nodes) (FieldType NormalFieldType RefType))) (= (type size) (FieldType NormalFieldType intType))))
(assert (distinct $allocated key degree parent sibling child Nodes size)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (Ctor PredicateType_heapsegType) 11)) (= (Ctor FrameTypeType) 12)) (forall ((arg0@@23 T@U) (arg1@@9 T@U) ) (! (= (type (heapseg arg0@@23 arg1@@9)) (FieldType PredicateType_heapsegType FrameTypeType))
 :qid |funType:heapseg|
 :pattern ( (heapseg arg0@@23 arg1@@9))
))))
(assert (forall ((Heap T@U) (Mask T@U) (this T@U) (last T@U) ) (!  (=> (and (and (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (= (type this) RefType)) (= (type last) RefType)) (and (state Heap Mask) (< AssumeFunctionsAbove 8))) (= (segLength Heap this last) (ite (= this last) 0 (+ 1 (|segLength'| Heap (MapType0Select Heap this sibling) last)))))
 :qid |stdinbpl.781:15|
 :skolemid |45|
 :pattern ( (state Heap Mask) (segLength Heap this last))
 :pattern ( (state Heap Mask) (|segLength#triggerStateless| this last) (|heapseg#trigger| Heap (heapseg this last)))
)))
(assert  (and (and (= (type null) RefType) (= (Ctor PredicateType_treeType) 13)) (forall ((arg0@@24 T@U) ) (! (= (type (tree arg0@@24)) (FieldType PredicateType_treeType FrameTypeType))
 :qid |funType:tree|
 :pattern ( (tree arg0@@24))
))))
(assert (forall ((Heap@@0 T@U) (Mask@@0 T@U) (this@@0 T@U) ) (!  (=> (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type this@@0) RefType)) (and (state Heap@@0 Mask@@0) (or (< AssumeFunctionsAbove 9) (|treeDegree#trigger| (MapType0Select Heap@@0 null (tree this@@0)) this@@0)))) (<= 0 (|treeDegree'| Heap@@0 this@@0)))
 :qid |stdinbpl.372:15|
 :skolemid |31|
 :pattern ( (state Heap@@0 Mask@@0) (|treeDegree'| Heap@@0 this@@0))
)))
(assert (forall ((Heap@@1 T@U) (Mask@@1 T@U) ) (!  (=> (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type Mask@@1) (MapType1Type RefType realType))) (state Heap@@1 Mask@@1)) (GoodMask Mask@@1))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap@@1 Mask@@1))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert (forall ((Heap@@2 T@U) (this@@1 T@U) (last@@0 T@U) (index Int) ) (!  (=> (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@1) RefType)) (= (type last@@0) RefType)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@1 last@@0 index))))
 :qid |stdinbpl.1128:15|
 :skolemid |60|
 :pattern ( (|segDegree'| Heap@@2 this@@1 last@@0 index))
)))
(assert (forall ((Heap@@3 T@U) (Mask@@2 T@U) (this@@2 T@U) (last@@1 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type this@@2) RefType)) (= (type last@@1) RefType)) (and (state Heap@@3 Mask@@2) (< AssumeFunctionsAbove 1))) (= (segSize Heap@@3 this@@2 last@@1) (ite (= this@@2 last@@1) 0 (+ (|treeSize'| Heap@@3 this@@2) (|segSize'| Heap@@3 (MapType0Select Heap@@3 this@@2 sibling) last@@1)))))
 :qid |stdinbpl.957:15|
 :skolemid |54|
 :pattern ( (state Heap@@3 Mask@@2) (segSize Heap@@3 this@@2 last@@1))
 :pattern ( (state Heap@@3 Mask@@2) (|segSize#triggerStateless| this@@2 last@@1) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)))
)))
(assert (forall ((this@@3 T@U) (last@@2 T@U) ) (!  (=> (and (= (type this@@3) RefType) (= (type last@@2) RefType)) (IsPredicateField (heapseg this@@3 last@@2)))
 :qid |stdinbpl.2402:15|
 :skolemid |98|
 :pattern ( (heapseg this@@3 last@@2))
)))
(assert (forall ((Heap@@4 T@U) (this@@4 T@U) (last@@3 T@U) ) (!  (=> (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type this@@4) RefType)) (= (type last@@3) RefType)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@4 last@@3))))
 :qid |stdinbpl.775:15|
 :skolemid |44|
 :pattern ( (|segLength'| Heap@@4 this@@4 last@@3))
)))
(assert (forall ((Heap@@5 T@U) (this@@5 T@U) (last@@4 T@U) ) (!  (=> (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type this@@5) RefType)) (= (type last@@4) RefType)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@5 last@@4))))
 :qid |stdinbpl.951:15|
 :skolemid |53|
 :pattern ( (|segSize'| Heap@@5 this@@5 last@@4))
)))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@10 T@U) (arg2@@3 T@U) ) (! (= (type (|segParent'| arg0@@25 arg1@@10 arg2@@3)) RefType)
 :qid |funType:segParent'|
 :pattern ( (|segParent'| arg0@@25 arg1@@10 arg2@@3))
)) (forall ((arg0@@26 T@U) (arg1@@11 T@U) ) (! (= (type (|segParent#triggerStateless| arg0@@26 arg1@@11)) RefType)
 :qid |funType:segParent#triggerStateless|
 :pattern ( (|segParent#triggerStateless| arg0@@26 arg1@@11))
))))
(assert (forall ((Heap@@6 T@U) (this@@6 T@U) (last@@5 T@U) ) (!  (=> (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type this@@6) RefType)) (= (type last@@5) RefType)) (dummyFunction (|segParent#triggerStateless| this@@6 last@@5)))
 :qid |stdinbpl.1330:15|
 :skolemid |67|
 :pattern ( (|segParent'| Heap@@6 this@@6 last@@5))
)))
(assert (forall ((Heap@@7 T@U) (this@@7 T@U) (last@@6 T@U) ) (!  (=> (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type this@@7) RefType)) (= (type last@@6) RefType)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@7 last@@6))))
 :qid |stdinbpl.1469:15|
 :skolemid |73|
 :pattern ( (|sorted'| Heap@@7 this@@7 last@@6))
)))
(assert (forall ((Heap@@8 T@U) (this@@8 T@U) (last@@7 T@U) ) (!  (=> (and (and (= (type Heap@@8) (MapType0Type RefType)) (= (type this@@8) RefType)) (= (type last@@7) RefType)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@8 last@@7))))
 :qid |stdinbpl.1706:15|
 :skolemid |80|
 :pattern ( (|presorted'| Heap@@8 this@@8 last@@7))
)))
(assert (forall ((Heap@@9 T@U) (this@@9 T@U) (last@@8 T@U) ) (!  (=> (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type this@@9) RefType)) (= (type last@@8) RefType)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@9 last@@8))))
 :qid |stdinbpl.2007:15|
 :skolemid |86|
 :pattern ( (|validChildren'| Heap@@9 this@@9 last@@8))
)))
(assert (forall ((Heap@@10 T@U) (this@@10 T@U) (last@@9 T@U) ) (!  (=> (and (and (= (type Heap@@10) (MapType0Type RefType)) (= (type this@@10) RefType)) (= (type last@@9) RefType)) (|heapseg#everUsed| (heapseg this@@10 last@@9)))
 :qid |stdinbpl.2421:15|
 :skolemid |102|
 :pattern ( (|heapseg#trigger| Heap@@10 (heapseg this@@10 last@@9)))
)))
(assert (forall ((arg0@@27 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@27))))
(= (type (PredicateMaskField arg0@@27)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@27))
)))
(assert (forall ((Heap@@11 T@U) (ExhaleHeap T@U) (Mask@@3 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3)) (and (HasDirectPerm Mask@@3 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@11 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@28 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@28))))
(= (type (WandMaskField arg0@@28)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@28))
)))
(assert (forall ((Heap@@12 T@U) (ExhaleHeap@@0 T@U) (Mask@@4 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4)) (and (HasDirectPerm Mask@@4 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@12 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert (forall ((this@@11 T@U) ) (!  (=> (= (type this@@11) RefType) (IsPredicateField (tree this@@11)))
 :qid |stdinbpl.2209:15|
 :skolemid |92|
 :pattern ( (tree this@@11))
)))
(assert  (and (= (Ctor PredicateType_heapType) 14) (forall ((arg0@@29 T@U) ) (! (= (type (heap arg0@@29)) (FieldType PredicateType_heapType FrameTypeType))
 :qid |funType:heap|
 :pattern ( (heap arg0@@29))
))))
(assert (forall ((this@@12 T@U) ) (!  (=> (= (type this@@12) RefType) (IsPredicateField (heap this@@12)))
 :qid |stdinbpl.2520:15|
 :skolemid |104|
 :pattern ( (heap this@@12))
)))
(assert (forall ((Heap@@13 T@U) (this@@13 T@U) ) (!  (=> (and (= (type Heap@@13) (MapType0Type RefType)) (= (type this@@13) RefType)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@13))))
 :qid |stdinbpl.224:15|
 :skolemid |23|
 :pattern ( (|treeKey'| Heap@@13 this@@13))
)))
(assert (forall ((Heap@@14 T@U) (this@@14 T@U) ) (!  (=> (and (= (type Heap@@14) (MapType0Type RefType)) (= (type this@@14) RefType)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@14))))
 :qid |stdinbpl.353:15|
 :skolemid |28|
 :pattern ( (|treeDegree'| Heap@@14 this@@14))
)))
(assert (forall ((Heap@@15 T@U) (this@@15 T@U) ) (!  (=> (and (= (type Heap@@15) (MapType0Type RefType)) (= (type this@@15) RefType)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@15))))
 :qid |stdinbpl.494:15|
 :skolemid |34|
 :pattern ( (|treeSize'| Heap@@15 this@@15))
)))
(assert  (and (forall ((arg0@@30 T@U) (arg1@@12 T@U) ) (! (= (type (|treeParent'| arg0@@30 arg1@@12)) RefType)
 :qid |funType:treeParent'|
 :pattern ( (|treeParent'| arg0@@30 arg1@@12))
)) (forall ((arg0@@31 T@U) ) (! (= (type (|treeParent#triggerStateless| arg0@@31)) RefType)
 :qid |funType:treeParent#triggerStateless|
 :pattern ( (|treeParent#triggerStateless| arg0@@31))
))))
(assert (forall ((Heap@@16 T@U) (this@@16 T@U) ) (!  (=> (and (= (type Heap@@16) (MapType0Type RefType)) (= (type this@@16) RefType)) (dummyFunction (|treeParent#triggerStateless| this@@16)))
 :qid |stdinbpl.646:15|
 :skolemid |39|
 :pattern ( (|treeParent'| Heap@@16 this@@16))
)))
(assert (forall ((Heap@@17 T@U) (this@@17 T@U) ) (!  (=> (and (= (type Heap@@17) (MapType0Type RefType)) (= (type this@@17) RefType)) (|tree#everUsed| (tree this@@17)))
 :qid |stdinbpl.2228:15|
 :skolemid |96|
 :pattern ( (|tree#trigger| Heap@@17 (tree this@@17)))
)))
(assert (forall ((Heap@@18 T@U) (this@@18 T@U) ) (!  (=> (and (= (type Heap@@18) (MapType0Type RefType)) (= (type this@@18) RefType)) (|heap#everUsed| (heap this@@18)))
 :qid |stdinbpl.2539:15|
 :skolemid |108|
 :pattern ( (|heap#trigger| Heap@@18 (heap this@@18)))
)))
(assert (forall ((Heap@@19 T@U) (Mask@@5 T@U) (this@@19 T@U) (last@@10 T@U) (index@@0 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@19) (MapType0Type RefType)) (= (type Mask@@5) (MapType1Type RefType realType))) (= (type this@@19) RefType)) (= (type last@@10) RefType)) (and (state Heap@@19 Mask@@5) (< AssumeFunctionsAbove 7))) (and (<= 0 index@@0) (< index@@0 (segLength Heap@@19 this@@19 last@@10)))) (= (segDegree Heap@@19 this@@19 last@@10 index@@0) (ite (= index@@0 0) (treeDegree Heap@@19 this@@19) (|segDegree'| Heap@@19 (MapType0Select Heap@@19 this@@19 sibling) last@@10 (- index@@0 1)))))
 :qid |stdinbpl.1134:15|
 :skolemid |61|
 :pattern ( (state Heap@@19 Mask@@5) (segDegree Heap@@19 this@@19 last@@10 index@@0))
 :pattern ( (state Heap@@19 Mask@@5) (|segDegree#triggerStateless| this@@19 last@@10 index@@0) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)))
)))
(assert (forall ((Heap@@20 T@U) (Mask@@6 T@U) (this@@20 T@U) (last@@11 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@20) (MapType0Type RefType)) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type this@@20) RefType)) (= (type last@@11) RefType)) (state Heap@@20 Mask@@6)) (= (|sorted'| Heap@@20 this@@20 last@@11) (|sorted#frame| (MapType0Select Heap@@20 null (heapseg this@@20 last@@11)) this@@20 last@@11)))
 :qid |stdinbpl.1482:15|
 :skolemid |75|
 :pattern ( (state Heap@@20 Mask@@6) (|sorted'| Heap@@20 this@@20 last@@11))
 :pattern ( (state Heap@@20 Mask@@6) (|sorted#triggerStateless| this@@20 last@@11) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)))
)))
(assert (forall ((Heap@@21 T@U) (Mask@@7 T@U) (this@@21 T@U) (last@@12 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@21) (MapType0Type RefType)) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type this@@21) RefType)) (= (type last@@12) RefType)) (state Heap@@21 Mask@@7)) (= (|presorted'| Heap@@21 this@@21 last@@12) (|presorted#frame| (MapType0Select Heap@@21 null (heapseg this@@21 last@@12)) this@@21 last@@12)))
 :qid |stdinbpl.1719:15|
 :skolemid |82|
 :pattern ( (state Heap@@21 Mask@@7) (|presorted'| Heap@@21 this@@21 last@@12))
 :pattern ( (state Heap@@21 Mask@@7) (|presorted#triggerStateless| this@@21 last@@12) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)))
)))
(assert (forall ((Heap@@22 T@U) (Mask@@8 T@U) (this@@22 T@U) (last@@13 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@22) (MapType0Type RefType)) (= (type Mask@@8) (MapType1Type RefType realType))) (= (type this@@22) RefType)) (= (type last@@13) RefType)) (state Heap@@22 Mask@@8)) (= (|validChildren'| Heap@@22 this@@22 last@@13) (|validChildren#frame| (MapType0Select Heap@@22 null (heapseg this@@22 last@@13)) this@@22 last@@13)))
 :qid |stdinbpl.2020:15|
 :skolemid |88|
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren'| Heap@@22 this@@22 last@@13))
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren#triggerStateless| this@@22 last@@13) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)))
)))
(assert (forall ((Heap@@23 T@U) (ExhaleHeap@@1 T@U) (Mask@@9 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@23) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9)) (U_2_bool (MapType0Select Heap@@23 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@24 T@U) (this@@23 T@U) ) (!  (=> (and (= (type Heap@@24) (MapType0Type RefType)) (= (type this@@23) RefType)) (and (= (treeKey Heap@@24 this@@23) (|treeKey'| Heap@@24 this@@23)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@23)))))
 :qid |stdinbpl.220:15|
 :skolemid |22|
 :pattern ( (treeKey Heap@@24 this@@23))
)))
(assert (forall ((Heap@@25 T@U) (this@@24 T@U) ) (!  (=> (and (= (type Heap@@25) (MapType0Type RefType)) (= (type this@@24) RefType)) (and (= (treeDegree Heap@@25 this@@24) (|treeDegree'| Heap@@25 this@@24)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@24)))))
 :qid |stdinbpl.349:15|
 :skolemid |27|
 :pattern ( (treeDegree Heap@@25 this@@24))
)))
(assert (forall ((Heap@@26 T@U) (this@@25 T@U) ) (!  (=> (and (= (type Heap@@26) (MapType0Type RefType)) (= (type this@@25) RefType)) (and (= (treeSize Heap@@26 this@@25) (|treeSize'| Heap@@26 this@@25)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@25)))))
 :qid |stdinbpl.490:15|
 :skolemid |33|
 :pattern ( (treeSize Heap@@26 this@@25))
)))
(assert (forall ((arg0@@32 T@U) (arg1@@13 T@U) ) (! (= (type (treeParent arg0@@32 arg1@@13)) RefType)
 :qid |funType:treeParent|
 :pattern ( (treeParent arg0@@32 arg1@@13))
)))
(assert (forall ((Heap@@27 T@U) (this@@26 T@U) ) (!  (=> (and (= (type Heap@@27) (MapType0Type RefType)) (= (type this@@26) RefType)) (and (= (treeParent Heap@@27 this@@26) (|treeParent'| Heap@@27 this@@26)) (dummyFunction (|treeParent#triggerStateless| this@@26))))
 :qid |stdinbpl.642:15|
 :skolemid |38|
 :pattern ( (treeParent Heap@@27 this@@26))
)))
(assert (forall ((this@@27 T@U) (last@@14 T@U) (this2 T@U) (last2 T@U) ) (!  (=> (and (and (and (and (= (type this@@27) RefType) (= (type last@@14) RefType)) (= (type this2) RefType)) (= (type last2) RefType)) (= (heapseg this@@27 last@@14) (heapseg this2 last2))) (and (= this@@27 this2) (= last@@14 last2)))
 :qid |stdinbpl.2412:15|
 :skolemid |100|
 :pattern ( (heapseg this@@27 last@@14) (heapseg this2 last2))
)))
(assert (forall ((arg0@@33 T@U) (arg1@@14 T@U) ) (! (= (type (|heapseg#sm| arg0@@33 arg1@@14)) (FieldType PredicateType_heapsegType (MapType1Type RefType boolType)))
 :qid |funType:heapseg#sm|
 :pattern ( (|heapseg#sm| arg0@@33 arg1@@14))
)))
(assert (forall ((this@@28 T@U) (last@@15 T@U) (this2@@0 T@U) (last2@@0 T@U) ) (!  (=> (and (and (and (and (= (type this@@28) RefType) (= (type last@@15) RefType)) (= (type this2@@0) RefType)) (= (type last2@@0) RefType)) (= (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))) (and (= this@@28 this2@@0) (= last@@15 last2@@0)))
 :qid |stdinbpl.2416:15|
 :skolemid |101|
 :pattern ( (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))
)))
(assert (forall ((this@@29 T@U) (this2@@1 T@U) ) (!  (=> (and (and (= (type this@@29) RefType) (= (type this2@@1) RefType)) (= (tree this@@29) (tree this2@@1))) (= this@@29 this2@@1))
 :qid |stdinbpl.2219:15|
 :skolemid |94|
 :pattern ( (tree this@@29) (tree this2@@1))
)))
(assert (forall ((arg0@@34 T@U) ) (! (= (type (|tree#sm| arg0@@34)) (FieldType PredicateType_treeType (MapType1Type RefType boolType)))
 :qid |funType:tree#sm|
 :pattern ( (|tree#sm| arg0@@34))
)))
(assert (forall ((this@@30 T@U) (this2@@2 T@U) ) (!  (=> (and (and (= (type this@@30) RefType) (= (type this2@@2) RefType)) (= (|tree#sm| this@@30) (|tree#sm| this2@@2))) (= this@@30 this2@@2))
 :qid |stdinbpl.2223:15|
 :skolemid |95|
 :pattern ( (|tree#sm| this@@30) (|tree#sm| this2@@2))
)))
(assert (forall ((this@@31 T@U) (this2@@3 T@U) ) (!  (=> (and (and (= (type this@@31) RefType) (= (type this2@@3) RefType)) (= (heap this@@31) (heap this2@@3))) (= this@@31 this2@@3))
 :qid |stdinbpl.2530:15|
 :skolemid |106|
 :pattern ( (heap this@@31) (heap this2@@3))
)))
(assert (forall ((arg0@@35 T@U) ) (! (= (type (|heap#sm| arg0@@35)) (FieldType PredicateType_heapType (MapType1Type RefType boolType)))
 :qid |funType:heap#sm|
 :pattern ( (|heap#sm| arg0@@35))
)))
(assert (forall ((this@@32 T@U) (this2@@4 T@U) ) (!  (=> (and (and (= (type this@@32) RefType) (= (type this2@@4) RefType)) (= (|heap#sm| this@@32) (|heap#sm| this2@@4))) (= this@@32 this2@@4))
 :qid |stdinbpl.2534:15|
 :skolemid |107|
 :pattern ( (|heap#sm| this@@32) (|heap#sm| this2@@4))
)))
(assert (forall ((Heap@@28 T@U) (Mask@@10 T@U) (this@@33 T@U) (last@@16 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@28) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type this@@33) RefType)) (= (type last@@16) RefType)) (state Heap@@28 Mask@@10)) (= (|segLength'| Heap@@28 this@@33 last@@16) (|segLength#frame| (MapType0Select Heap@@28 null (heapseg this@@33 last@@16)) this@@33 last@@16)))
 :qid |stdinbpl.788:15|
 :skolemid |46|
 :pattern ( (state Heap@@28 Mask@@10) (|segLength'| Heap@@28 this@@33 last@@16))
 :pattern ( (state Heap@@28 Mask@@10) (|segLength#triggerStateless| this@@33 last@@16) (|heapseg#trigger| Heap@@28 (heapseg this@@33 last@@16)))
)))
(assert (forall ((Heap@@29 T@U) (Mask@@11 T@U) (this@@34 T@U) (last@@17 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@29) (MapType0Type RefType)) (= (type Mask@@11) (MapType1Type RefType realType))) (= (type this@@34) RefType)) (= (type last@@17) RefType)) (state Heap@@29 Mask@@11)) (= (|segSize'| Heap@@29 this@@34 last@@17) (|segSize#frame| (MapType0Select Heap@@29 null (heapseg this@@34 last@@17)) this@@34 last@@17)))
 :qid |stdinbpl.964:15|
 :skolemid |55|
 :pattern ( (state Heap@@29 Mask@@11) (|segSize'| Heap@@29 this@@34 last@@17))
 :pattern ( (state Heap@@29 Mask@@11) (|segSize#triggerStateless| this@@34 last@@17) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)))
)))
(assert (forall ((arg0@@36 T@U) (arg1@@15 T@U) (arg2@@4 T@U) ) (! (= (type (|segParent#frame| arg0@@36 arg1@@15 arg2@@4)) RefType)
 :qid |funType:segParent#frame|
 :pattern ( (|segParent#frame| arg0@@36 arg1@@15 arg2@@4))
)))
(assert (forall ((Heap@@30 T@U) (Mask@@12 T@U) (this@@35 T@U) (last@@18 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@30) (MapType0Type RefType)) (= (type Mask@@12) (MapType1Type RefType realType))) (= (type this@@35) RefType)) (= (type last@@18) RefType)) (state Heap@@30 Mask@@12)) (= (|segParent'| Heap@@30 this@@35 last@@18) (|segParent#frame| (MapType0Select Heap@@30 null (heapseg this@@35 last@@18)) this@@35 last@@18)))
 :qid |stdinbpl.1343:15|
 :skolemid |69|
 :pattern ( (state Heap@@30 Mask@@12) (|segParent'| Heap@@30 this@@35 last@@18))
 :pattern ( (state Heap@@30 Mask@@12) (|segParent#triggerStateless| this@@35 last@@18) (|heapseg#trigger| Heap@@30 (heapseg this@@35 last@@18)))
)))
(assert (forall ((Heap@@31 T@U) (ExhaleHeap@@2 T@U) (Mask@@13 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@31) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@13) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13)) (HasDirectPerm Mask@@13 o_1@@0 f_2)) (= (MapType0Select Heap@@31 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((Heap@@32 T@U) (Mask@@14 T@U) (this@@36 T@U) (last@@19 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@32) (MapType0Type RefType)) (= (type Mask@@14) (MapType1Type RefType realType))) (= (type this@@36) RefType)) (= (type last@@19) RefType)) (and (state Heap@@32 Mask@@14) (< AssumeFunctionsAbove 5))) (= (presorted Heap@@32 this@@36 last@@19)  (and (=> (< 1 (segLength Heap@@32 this@@36 last@@19)) (and (<= (treeDegree Heap@@32 this@@36) (segDegree Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19 0)) (|presorted'| Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19))) (=> (and (< 2 (segLength Heap@@32 this@@36 last@@19)) (= (segDegree Heap@@32 this@@36 last@@19 0) (segDegree Heap@@32 this@@36 last@@19 1))) (< (segDegree Heap@@32 this@@36 last@@19 1) (segDegree Heap@@32 this@@36 last@@19 2))))))
 :qid |stdinbpl.1712:15|
 :skolemid |81|
 :pattern ( (state Heap@@32 Mask@@14) (presorted Heap@@32 this@@36 last@@19))
 :pattern ( (state Heap@@32 Mask@@14) (|presorted#triggerStateless| this@@36 last@@19) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.182:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField key)))
(assert  (not (IsWandField key)))
(assert  (not (IsPredicateField degree)))
(assert  (not (IsWandField degree)))
(assert  (not (IsPredicateField parent)))
(assert  (not (IsWandField parent)))
(assert  (not (IsPredicateField sibling)))
(assert  (not (IsWandField sibling)))
(assert  (not (IsPredicateField child)))
(assert  (not (IsWandField child)))
(assert  (not (IsPredicateField Nodes)))
(assert  (not (IsWandField Nodes)))
(assert  (not (IsPredicateField size)))
(assert  (not (IsWandField size)))
(assert (forall ((Heap@@33 T@U) (ExhaleHeap@@3 T@U) (Mask@@15 T@U) ) (!  (=> (and (and (and (= (type Heap@@33) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@15) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15)) (succHeap Heap@@33 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15))
)))
(assert (forall ((Heap@@34 T@U) (Mask@@16 T@U) (this@@37 T@U) ) (!  (=> (and (and (and (= (type Heap@@34) (MapType0Type RefType)) (= (type Mask@@16) (MapType1Type RefType realType))) (= (type this@@37) RefType)) (and (state Heap@@34 Mask@@16) (< AssumeFunctionsAbove 1))) (= (treeSize Heap@@34 this@@37) (ite (= (U_2_int (MapType0Select Heap@@34 this@@37 degree)) 0) 1 (+ 1 (|segSize'| Heap@@34 (MapType0Select Heap@@34 this@@37 child) null)))))
 :qid |stdinbpl.500:15|
 :skolemid |35|
 :pattern ( (state Heap@@34 Mask@@16) (treeSize Heap@@34 this@@37))
 :pattern ( (state Heap@@34 Mask@@16) (|treeSize#triggerStateless| this@@37) (|tree#trigger| Heap@@34 (tree this@@37)))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@37 Real) (arg1@@16 T@U) ) (! (= (type (ConditionalFrame arg0@@37 arg1@@16)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@37 arg1@@16))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.170:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@17 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@17) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@17 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@17 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@17 o_2@@0 f_4@@0))
)))
(assert (forall ((Heap@@35 T@U) (Mask@@18 T@U) (this@@38 T@U) (last@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@35) (MapType0Type RefType)) (= (type Mask@@18) (MapType1Type RefType realType))) (= (type this@@38) RefType)) (= (type last@@20) RefType)) (and (state Heap@@35 Mask@@18) (or (< AssumeFunctionsAbove 0) (|sorted#trigger| (MapType0Select Heap@@35 null (heapseg this@@38 last@@20)) this@@38 last@@20)))) (|sorted'| Heap@@35 this@@38 last@@20)) (presorted Heap@@35 this@@38 last@@20))
 :qid |stdinbpl.1488:15|
 :skolemid |76|
 :pattern ( (state Heap@@35 Mask@@18) (|sorted'| Heap@@35 this@@38 last@@20))
)))
(assert (forall ((Heap@@36 T@U) (this@@39 T@U) (last@@21 T@U) ) (!  (=> (and (and (= (type Heap@@36) (MapType0Type RefType)) (= (type this@@39) RefType)) (= (type last@@21) RefType)) (and (= (segLength Heap@@36 this@@39 last@@21) (|segLength'| Heap@@36 this@@39 last@@21)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@39 last@@21)))))
 :qid |stdinbpl.771:15|
 :skolemid |43|
 :pattern ( (segLength Heap@@36 this@@39 last@@21))
)))
(assert (forall ((Heap@@37 T@U) (this@@40 T@U) (last@@22 T@U) ) (!  (=> (and (and (= (type Heap@@37) (MapType0Type RefType)) (= (type this@@40) RefType)) (= (type last@@22) RefType)) (and (= (segSize Heap@@37 this@@40 last@@22) (|segSize'| Heap@@37 this@@40 last@@22)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@40 last@@22)))))
 :qid |stdinbpl.947:15|
 :skolemid |52|
 :pattern ( (segSize Heap@@37 this@@40 last@@22))
)))
(assert (forall ((arg0@@38 T@U) (arg1@@17 T@U) (arg2@@5 T@U) ) (! (= (type (segParent arg0@@38 arg1@@17 arg2@@5)) RefType)
 :qid |funType:segParent|
 :pattern ( (segParent arg0@@38 arg1@@17 arg2@@5))
)))
(assert (forall ((Heap@@38 T@U) (this@@41 T@U) (last@@23 T@U) ) (!  (=> (and (and (= (type Heap@@38) (MapType0Type RefType)) (= (type this@@41) RefType)) (= (type last@@23) RefType)) (and (= (segParent Heap@@38 this@@41 last@@23) (|segParent'| Heap@@38 this@@41 last@@23)) (dummyFunction (|segParent#triggerStateless| this@@41 last@@23))))
 :qid |stdinbpl.1326:15|
 :skolemid |66|
 :pattern ( (segParent Heap@@38 this@@41 last@@23))
)))
(assert (forall ((Heap@@39 T@U) (Mask@@19 T@U) (this@@42 T@U) (last@@24 T@U) (index@@1 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@39) (MapType0Type RefType)) (= (type Mask@@19) (MapType1Type RefType realType))) (= (type this@@42) RefType)) (= (type last@@24) RefType)) (and (state Heap@@39 Mask@@19) (or (< AssumeFunctionsAbove 7) (|segDegree#trigger| (MapType0Select Heap@@39 null (heapseg this@@42 last@@24)) this@@42 last@@24 index@@1)))) (and (<= 0 index@@1) (< index@@1 (segLength Heap@@39 this@@42 last@@24)))) (<= 0 (|segDegree'| Heap@@39 this@@42 last@@24 index@@1)))
 :qid |stdinbpl.1147:15|
 :skolemid |63|
 :pattern ( (state Heap@@39 Mask@@19) (|segDegree'| Heap@@39 this@@42 last@@24 index@@1))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@40 T@U) (Mask@@20 T@U) (this@@43 T@U) (last@@25 T@U) (index@@2 Int) ) (!  (=> (and (and (and (and (= (type Heap@@40) (MapType0Type RefType)) (= (type Mask@@20) (MapType1Type RefType realType))) (= (type this@@43) RefType)) (= (type last@@25) RefType)) (state Heap@@40 Mask@@20)) (= (|segDegree'| Heap@@40 this@@43 last@@25 index@@2) (|segDegree#frame| (MapType0Select Heap@@40 null (heapseg this@@43 last@@25)) this@@43 last@@25 index@@2)))
 :qid |stdinbpl.1141:15|
 :skolemid |62|
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree'| Heap@@40 this@@43 last@@25 index@@2))
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree#triggerStateless| this@@43 last@@25 index@@2) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)))
)))
(assert (forall ((Heap@@41 T@U) (this@@44 T@U) (last@@26 T@U) (index@@3 Int) ) (!  (=> (and (and (= (type Heap@@41) (MapType0Type RefType)) (= (type this@@44) RefType)) (= (type last@@26) RefType)) (and (= (segDegree Heap@@41 this@@44 last@@26 index@@3) (|segDegree'| Heap@@41 this@@44 last@@26 index@@3)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@44 last@@26 index@@3)))))
 :qid |stdinbpl.1124:15|
 :skolemid |59|
 :pattern ( (segDegree Heap@@41 this@@44 last@@26 index@@3))
)))
(assert (forall ((this@@45 T@U) (last@@27 T@U) ) (!  (=> (and (= (type this@@45) RefType) (= (type last@@27) RefType)) (= (getPredWandId (heapseg this@@45 last@@27)) 1))
 :qid |stdinbpl.2406:15|
 :skolemid |99|
 :pattern ( (heapseg this@@45 last@@27))
)))
(assert (forall ((Heap@@42 T@U) (Mask@@21 T@U) (this@@46 T@U) (last@@28 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@42) (MapType0Type RefType)) (= (type Mask@@21) (MapType1Type RefType realType))) (= (type this@@46) RefType)) (= (type last@@28) RefType)) (and (state Heap@@42 Mask@@21) (or (< AssumeFunctionsAbove 1) (|segSize#trigger| (MapType0Select Heap@@42 null (heapseg this@@46 last@@28)) this@@46 last@@28)))) (= this@@46 last@@28)) (= (|segSize'| Heap@@42 this@@46 last@@28) 0))
 :qid |stdinbpl.970:15|
 :skolemid |56|
 :pattern ( (state Heap@@42 Mask@@21) (|segSize'| Heap@@42 this@@46 last@@28))
)))
(assert (forall ((Heap@@43 T@U) (ExhaleHeap@@4 T@U) (Mask@@22 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@43) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@22) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22)) (and (HasDirectPerm Mask@@22 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@43 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@43 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@44 T@U) (ExhaleHeap@@5 T@U) (Mask@@23 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@44) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@23) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23)) (and (HasDirectPerm Mask@@23 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@44 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@44 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@47 T@U) ) (!  (=> (= (type this@@47) RefType) (= (getPredWandId (tree this@@47)) 0))
 :qid |stdinbpl.2213:15|
 :skolemid |93|
 :pattern ( (tree this@@47))
)))
(assert (forall ((this@@48 T@U) ) (!  (=> (= (type this@@48) RefType) (= (getPredWandId (heap this@@48)) 2))
 :qid |stdinbpl.2524:15|
 :skolemid |105|
 :pattern ( (heap this@@48))
)))
(assert (forall ((Mask@@24 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@24) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@24)) (and (>= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@24) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@24) (MapType1Select Mask@@24 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@45 T@U) (Mask@@25 T@U) (this@@49 T@U) (last@@29 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@45) (MapType0Type RefType)) (= (type Mask@@25) (MapType1Type RefType realType))) (= (type this@@49) RefType)) (= (type last@@29) RefType)) (and (state Heap@@45 Mask@@25) (or (< AssumeFunctionsAbove 8) (|segLength#trigger| (MapType0Select Heap@@45 null (heapseg this@@49 last@@29)) this@@49 last@@29)))) (<= 0 (|segLength'| Heap@@45 this@@49 last@@29)))
 :qid |stdinbpl.794:15|
 :skolemid |47|
 :pattern ( (state Heap@@45 Mask@@25) (|segLength'| Heap@@45 this@@49 last@@29))
)))
(assert (forall ((Heap@@46 T@U) (Mask@@26 T@U) (this@@50 T@U) ) (!  (=> (and (and (and (= (type Heap@@46) (MapType0Type RefType)) (= (type Mask@@26) (MapType1Type RefType realType))) (= (type this@@50) RefType)) (state Heap@@46 Mask@@26)) (= (|treeKey'| Heap@@46 this@@50) (|treeKey#frame| (MapType0Select Heap@@46 null (tree this@@50)) this@@50)))
 :qid |stdinbpl.237:15|
 :skolemid |25|
 :pattern ( (state Heap@@46 Mask@@26) (|treeKey'| Heap@@46 this@@50))
)))
(assert (forall ((Heap@@47 T@U) (Mask@@27 T@U) (this@@51 T@U) ) (!  (=> (and (and (and (= (type Heap@@47) (MapType0Type RefType)) (= (type Mask@@27) (MapType1Type RefType realType))) (= (type this@@51) RefType)) (state Heap@@47 Mask@@27)) (= (|treeDegree'| Heap@@47 this@@51) (|treeDegree#frame| (MapType0Select Heap@@47 null (tree this@@51)) this@@51)))
 :qid |stdinbpl.366:15|
 :skolemid |30|
 :pattern ( (state Heap@@47 Mask@@27) (|treeDegree'| Heap@@47 this@@51))
)))
(assert (forall ((Heap@@48 T@U) (Mask@@28 T@U) (this@@52 T@U) ) (!  (=> (and (and (and (= (type Heap@@48) (MapType0Type RefType)) (= (type Mask@@28) (MapType1Type RefType realType))) (= (type this@@52) RefType)) (state Heap@@48 Mask@@28)) (= (|treeSize'| Heap@@48 this@@52) (|treeSize#frame| (MapType0Select Heap@@48 null (tree this@@52)) this@@52)))
 :qid |stdinbpl.507:15|
 :skolemid |36|
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize'| Heap@@48 this@@52))
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize#triggerStateless| this@@52) (|tree#trigger| Heap@@48 (tree this@@52)))
)))
(assert (forall ((arg0@@39 T@U) (arg1@@18 T@U) ) (! (= (type (|treeParent#frame| arg0@@39 arg1@@18)) RefType)
 :qid |funType:treeParent#frame|
 :pattern ( (|treeParent#frame| arg0@@39 arg1@@18))
)))
(assert (forall ((Heap@@49 T@U) (Mask@@29 T@U) (this@@53 T@U) ) (!  (=> (and (and (and (= (type Heap@@49) (MapType0Type RefType)) (= (type Mask@@29) (MapType1Type RefType realType))) (= (type this@@53) RefType)) (state Heap@@49 Mask@@29)) (= (|treeParent'| Heap@@49 this@@53) (|treeParent#frame| (MapType0Select Heap@@49 null (tree this@@53)) this@@53)))
 :qid |stdinbpl.659:15|
 :skolemid |41|
 :pattern ( (state Heap@@49 Mask@@29) (|treeParent'| Heap@@49 this@@53))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@50 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@50) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@50 o $allocated))) (U_2_bool (MapType0Select Heap@@50 (MapType0Select Heap@@50 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@50 o f))
)))
(assert (forall ((this@@54 T@U) (last@@30 T@U) ) (!  (=> (and (= (type this@@54) RefType) (= (type last@@30) RefType)) (= (PredicateMaskField (heapseg this@@54 last@@30)) (|heapseg#sm| this@@54 last@@30)))
 :qid |stdinbpl.2398:15|
 :skolemid |97|
 :pattern ( (PredicateMaskField (heapseg this@@54 last@@30)))
)))
(assert (forall ((Heap@@51 T@U) (Mask@@30 T@U) (this@@55 T@U) (last@@31 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@51) (MapType0Type RefType)) (= (type Mask@@30) (MapType1Type RefType realType))) (= (type this@@55) RefType)) (= (type last@@31) RefType)) (and (state Heap@@51 Mask@@30) (< AssumeFunctionsAbove 0))) (= (sorted Heap@@51 this@@55 last@@31)  (=> (< 1 (segLength Heap@@51 this@@55 last@@31)) (and (< (treeDegree Heap@@51 this@@55) (segDegree Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31 0)) (|sorted'| Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31)))))
 :qid |stdinbpl.1475:15|
 :skolemid |74|
 :pattern ( (state Heap@@51 Mask@@30) (sorted Heap@@51 this@@55 last@@31))
 :pattern ( (state Heap@@51 Mask@@30) (|sorted#triggerStateless| this@@55 last@@31) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)))
)))
(assert (forall ((this@@56 T@U) ) (!  (=> (= (type this@@56) RefType) (= (PredicateMaskField (tree this@@56)) (|tree#sm| this@@56)))
 :qid |stdinbpl.2205:15|
 :skolemid |91|
 :pattern ( (PredicateMaskField (tree this@@56)))
)))
(assert (forall ((this@@57 T@U) ) (!  (=> (= (type this@@57) RefType) (= (PredicateMaskField (heap this@@57)) (|heap#sm| this@@57)))
 :qid |stdinbpl.2516:15|
 :skolemid |103|
 :pattern ( (PredicateMaskField (heap this@@57)))
)))
(assert (forall ((Heap@@52 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@52) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@52 (MapType0Store Heap@@52 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@52 o@@0 f_3 v))
)))
(assert (forall ((Heap@@53 T@U) (Mask@@31 T@U) (this@@58 T@U) ) (!  (=> (and (and (and (= (type Heap@@53) (MapType0Type RefType)) (= (type Mask@@31) (MapType1Type RefType realType))) (= (type this@@58) RefType)) (and (state Heap@@53 Mask@@31) (< AssumeFunctionsAbove 3))) (= (treeKey Heap@@53 this@@58) (U_2_int (MapType0Select Heap@@53 this@@58 key))))
 :qid |stdinbpl.230:15|
 :skolemid |24|
 :pattern ( (state Heap@@53 Mask@@31) (treeKey Heap@@53 this@@58))
 :pattern ( (state Heap@@53 Mask@@31) (|treeKey#triggerStateless| this@@58) (|tree#trigger| Heap@@53 (tree this@@58)))
)))
(assert (forall ((Heap@@54 T@U) (Mask@@32 T@U) (this@@59 T@U) ) (!  (=> (and (and (and (= (type Heap@@54) (MapType0Type RefType)) (= (type Mask@@32) (MapType1Type RefType realType))) (= (type this@@59) RefType)) (and (state Heap@@54 Mask@@32) (< AssumeFunctionsAbove 6))) (= (treeParent Heap@@54 this@@59) (MapType0Select Heap@@54 this@@59 parent)))
 :qid |stdinbpl.652:15|
 :skolemid |40|
 :pattern ( (state Heap@@54 Mask@@32) (treeParent Heap@@54 this@@59))
 :pattern ( (state Heap@@54 Mask@@32) (|treeParent#triggerStateless| this@@59) (|tree#trigger| Heap@@54 (tree this@@59)))
)))
(assert (forall ((Heap@@55 T@U) (Mask@@33 T@U) (this@@60 T@U) ) (!  (=> (and (and (and (= (type Heap@@55) (MapType0Type RefType)) (= (type Mask@@33) (MapType1Type RefType realType))) (= (type this@@60) RefType)) (and (state Heap@@55 Mask@@33) (< AssumeFunctionsAbove 9))) (= (treeDegree Heap@@55 this@@60) (U_2_int (MapType0Select Heap@@55 this@@60 degree))))
 :qid |stdinbpl.359:15|
 :skolemid |29|
 :pattern ( (state Heap@@55 Mask@@33) (treeDegree Heap@@55 this@@60))
 :pattern ( (state Heap@@55 Mask@@33) (|treeDegree#triggerStateless| this@@60) (|tree#trigger| Heap@@55 (tree this@@60)))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((Heap@@56 T@U) (Mask@@34 T@U) (this@@61 T@U) (last@@32 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@56) (MapType0Type RefType)) (= (type Mask@@34) (MapType1Type RefType realType))) (= (type this@@61) RefType)) (= (type last@@32) RefType)) (and (state Heap@@56 Mask@@34) (< AssumeFunctionsAbove 2))) (= (validChildren Heap@@56 this@@61 last@@32)  (=> (< 1 (segLength Heap@@56 this@@61 last@@32)) (and (= (treeDegree Heap@@56 this@@61) (+ (segDegree Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32 0) 1)) (|validChildren'| Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32)))))
 :qid |stdinbpl.2013:15|
 :skolemid |87|
 :pattern ( (state Heap@@56 Mask@@34) (validChildren Heap@@56 this@@61 last@@32))
 :pattern ( (state Heap@@56 Mask@@34) (|validChildren#triggerStateless| this@@61 last@@32) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.177:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((Heap@@57 T@U) (Mask@@35 T@U) (this@@62 T@U) (last@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@57) (MapType0Type RefType)) (= (type Mask@@35) (MapType1Type RefType realType))) (= (type this@@62) RefType)) (= (type last@@33) RefType)) (and (state Heap@@57 Mask@@35) (< AssumeFunctionsAbove 4))) (not (= this@@62 last@@33))) (= (segParent Heap@@57 this@@62 last@@33) (treeParent Heap@@57 this@@62)))
 :qid |stdinbpl.1336:15|
 :skolemid |68|
 :pattern ( (state Heap@@57 Mask@@35) (segParent Heap@@57 this@@62 last@@33))
 :pattern ( (state Heap@@57 Mask@@35) (|segParent#triggerStateless| this@@62 last@@33) (|heapseg#trigger| Heap@@57 (heapseg this@@62 last@@33)))
)))
(assert (forall ((Heap@@58 T@U) (this@@63 T@U) (last@@34 T@U) ) (!  (=> (and (and (= (type Heap@@58) (MapType0Type RefType)) (= (type this@@63) RefType)) (= (type last@@34) RefType)) (and (= (sorted Heap@@58 this@@63 last@@34) (|sorted'| Heap@@58 this@@63 last@@34)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@63 last@@34)))))
 :qid |stdinbpl.1465:15|
 :skolemid |72|
 :pattern ( (sorted Heap@@58 this@@63 last@@34))
)))
(assert (forall ((Heap@@59 T@U) (this@@64 T@U) (last@@35 T@U) ) (!  (=> (and (and (= (type Heap@@59) (MapType0Type RefType)) (= (type this@@64) RefType)) (= (type last@@35) RefType)) (and (= (presorted Heap@@59 this@@64 last@@35) (|presorted'| Heap@@59 this@@64 last@@35)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@64 last@@35)))))
 :qid |stdinbpl.1702:15|
 :skolemid |79|
 :pattern ( (presorted Heap@@59 this@@64 last@@35))
)))
(assert (forall ((Heap@@60 T@U) (this@@65 T@U) (last@@36 T@U) ) (!  (=> (and (and (= (type Heap@@60) (MapType0Type RefType)) (= (type this@@65) RefType)) (= (type last@@36) RefType)) (and (= (validChildren Heap@@60 this@@65 last@@36) (|validChildren'| Heap@@60 this@@65 last@@36)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@65 last@@36)))))
 :qid |stdinbpl.2003:15|
 :skolemid |85|
 :pattern ( (validChildren Heap@@60 this@@65 last@@36))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Mask@7 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Heap@@61 () T@U)
(declare-fun this@@66 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@0 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun Mask@3 () T@U)
(assert  (and (and (and (and (and (and (and (and (= (type Mask@4) (MapType1Type RefType realType)) (= (type Heap@@61) (MapType0Type RefType))) (= (type this@@66) RefType)) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))))
(set-info :boogie-vc-id |tree#definedness|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 40) (let ((anon8_correct  (=> (and (= Mask@7 (MapType1Store Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null) (real_2_U (- (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null))) FullPerm)))) (= (ControlFlow 0 27) (- 0 26))) (< 0 (segLength Heap@@61 (MapType0Select Heap@@61 this@@66 child) null)))))
(let ((anon25_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 30) 27)) anon8_correct)))
(let ((anon25_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 28) (- 0 29)) (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null)))) (=> (= (ControlFlow 0 28) 27) anon8_correct))))))
(let ((anon18_correct  (=> (and (= Mask@5 (MapType1Store Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null) (real_2_U (- (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null))) FullPerm)))) (= (ControlFlow 0 13) (- 0 12))) (not (= (MapType0Select Heap@@61 this@@66 child) null)))))
(let ((anon30_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 16) 13)) anon18_correct)))
(let ((anon30_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 14) (- 0 15)) (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null)))) (=> (= (ControlFlow 0 14) 13) anon18_correct))))))
(let ((anon20_correct true))
(let ((anon29_Else_correct  (=> (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 child) null) this@@66) (= (ControlFlow 0 11) 9)) anon20_correct)))
(let ((anon28_Then_correct  (=> (and (not (= (MapType0Select Heap@@61 this@@66 child) null)) (state Heap@@61 Mask@4)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (HasDirectPerm Mask@4 this@@66 child)) (=> (HasDirectPerm Mask@4 this@@66 child) (and (and (=> (= (ControlFlow 0 17) 11) anon29_Else_correct) (=> (= (ControlFlow 0 17) 14) anon30_Then_correct)) (=> (= (ControlFlow 0 17) 16) anon30_Else_correct)))))))
(let ((anon28_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 child) null) (= (ControlFlow 0 10) 9)) anon20_correct)))
(let ((anon26_Else_correct  (=> (validChildren Heap@@61 (MapType0Select Heap@@61 this@@66 child) null) (and (=> (= (ControlFlow 0 19) (- 0 20)) (HasDirectPerm Mask@4 this@@66 child)) (=> (HasDirectPerm Mask@4 this@@66 child) (and (=> (= (ControlFlow 0 19) 17) anon28_Then_correct) (=> (= (ControlFlow 0 19) 10) anon28_Else_correct)))))))
(let ((anon13_correct true))
(let ((anon27_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 8) 5)) anon13_correct)))
(let ((anon27_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null)))) (=> (= (ControlFlow 0 6) 5) anon13_correct))))))
(let ((anon10_correct  (=> (state Heap@@61 Mask@4) (and (=> (= (ControlFlow 0 21) (- 0 22)) (HasDirectPerm Mask@4 this@@66 child)) (=> (HasDirectPerm Mask@4 this@@66 child) (and (and (=> (= (ControlFlow 0 21) 19) anon26_Else_correct) (=> (= (ControlFlow 0 21) 6) anon27_Then_correct)) (=> (= (ControlFlow 0 21) 8) anon27_Else_correct)))))))
(let ((anon24_Else_correct  (and (=> (= (ControlFlow 0 24) (- 0 25)) (HasDirectPerm Mask@4 this@@66 degree)) (=> (HasDirectPerm Mask@4 this@@66 degree) (=> (and (= (segDegree Heap@@61 (MapType0Select Heap@@61 this@@66 child) null 0) (- (U_2_int (MapType0Select Heap@@61 this@@66 degree)) 1)) (= (ControlFlow 0 24) 21)) anon10_correct)))))
(let ((anon23_Then_correct  (=> (and (< 0 (U_2_int (MapType0Select Heap@@61 this@@66 degree))) (state Heap@@61 Mask@4)) (and (=> (= (ControlFlow 0 31) (- 0 32)) (HasDirectPerm Mask@4 this@@66 child)) (=> (HasDirectPerm Mask@4 this@@66 child) (and (and (=> (= (ControlFlow 0 31) 24) anon24_Else_correct) (=> (= (ControlFlow 0 31) 28) anon25_Then_correct)) (=> (= (ControlFlow 0 31) 30) anon25_Else_correct)))))))
(let ((anon23_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@@61 this@@66 degree)) 0) (= (ControlFlow 0 23) 21)) anon10_correct)))
(let ((anon21_Else_correct  (=> (= (U_2_int (MapType0Select Heap@@61 this@@66 degree)) (segLength Heap@@61 (MapType0Select Heap@@61 this@@66 child) null)) (and (=> (= (ControlFlow 0 33) (- 0 34)) (HasDirectPerm Mask@4 this@@66 degree)) (=> (HasDirectPerm Mask@4 this@@66 degree) (and (=> (= (ControlFlow 0 33) 31) anon23_Then_correct) (=> (= (ControlFlow 0 33) 23) anon23_Else_correct)))))))
(let ((anon3_correct true))
(let ((anon22_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 4) 1)) anon3_correct)))
(let ((anon22_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null)))) (=> (= (ControlFlow 0 2) 1) anon3_correct))))))
(let ((anon0_correct  (=> (state Heap@@61 ZeroMask) (=> (and (= AssumeFunctionsAbove (- 0 1)) (U_2_bool (MapType0Select Heap@@61 this@@66 $allocated))) (=> (and (and (not (= this@@66 null)) (= Mask@0 (MapType1Store ZeroMask this@@66 key (real_2_U (+ (U_2_real (MapType1Select ZeroMask this@@66 key)) FullPerm))))) (and (state Heap@@61 Mask@0) (not (= this@@66 null)))) (=> (and (and (and (= Mask@1 (MapType1Store Mask@0 this@@66 degree (real_2_U (+ (U_2_real (MapType1Select Mask@0 this@@66 degree)) FullPerm)))) (state Heap@@61 Mask@1)) (and (not (= this@@66 null)) (= Mask@2 (MapType1Store Mask@1 this@@66 child (real_2_U (+ (U_2_real (MapType1Select Mask@1 this@@66 child)) FullPerm)))))) (and (and (state Heap@@61 Mask@2) (not (= this@@66 null))) (and (= Mask@3 (MapType1Store Mask@2 this@@66 parent (real_2_U (+ (U_2_real (MapType1Select Mask@2 this@@66 parent)) FullPerm)))) (state Heap@@61 Mask@3)))) (and (=> (= (ControlFlow 0 35) (- 0 39)) (HasDirectPerm Mask@3 this@@66 degree)) (=> (HasDirectPerm Mask@3 this@@66 degree) (=> (<= 0 (U_2_int (MapType0Select Heap@@61 this@@66 degree))) (and (=> (= (ControlFlow 0 35) (- 0 38)) (HasDirectPerm Mask@3 this@@66 child)) (=> (HasDirectPerm Mask@3 this@@66 child) (=> (= Mask@4 (MapType1Store Mask@3 null (heapseg (MapType0Select Heap@@61 this@@66 child) null) (real_2_U (+ (U_2_real (MapType1Select Mask@3 null (heapseg (MapType0Select Heap@@61 this@@66 child) null))) FullPerm)))) (=> (and (state Heap@@61 Mask@4) (state Heap@@61 Mask@4)) (and (=> (= (ControlFlow 0 35) (- 0 37)) (HasDirectPerm Mask@4 this@@66 degree)) (=> (HasDirectPerm Mask@4 this@@66 degree) (and (=> (= (ControlFlow 0 35) (- 0 36)) (HasDirectPerm Mask@4 this@@66 child)) (=> (HasDirectPerm Mask@4 this@@66 child) (and (and (=> (= (ControlFlow 0 35) 33) anon21_Else_correct) (=> (= (ControlFlow 0 35) 2) anon22_Then_correct)) (=> (= (ControlFlow 0 35) 4) anon22_Else_correct)))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 40) 35) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun key () T@U)
(declare-fun degree () T@U)
(declare-fun parent () T@U)
(declare-fun sibling () T@U)
(declare-fun child () T@U)
(declare-fun Nodes () T@U)
(declare-fun size () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun segLength (T@U T@U T@U) Int)
(declare-fun |segLength#triggerStateless| (T@U T@U) Int)
(declare-fun |heapseg#trigger| (T@U T@U) Bool)
(declare-fun heapseg (T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun |segLength'| (T@U T@U T@U) Int)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun PredicateType_heapsegType () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun |treeDegree'| (T@U T@U) Int)
(declare-fun |treeDegree#trigger| (T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun tree (T@U) T@U)
(declare-fun PredicateType_treeType () T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun |segDegree'| (T@U T@U T@U Int) Int)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |segDegree#triggerStateless| (T@U T@U Int) Int)
(declare-fun segSize (T@U T@U T@U) Int)
(declare-fun |segSize#triggerStateless| (T@U T@U) Int)
(declare-fun |treeSize'| (T@U T@U) Int)
(declare-fun |segSize'| (T@U T@U T@U) Int)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun |segParent'| (T@U T@U T@U) T@U)
(declare-fun |segParent#triggerStateless| (T@U T@U) T@U)
(declare-fun |sorted'| (T@U T@U T@U) Bool)
(declare-fun |sorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |presorted'| (T@U T@U T@U) Bool)
(declare-fun |presorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |validChildren'| (T@U T@U T@U) Bool)
(declare-fun |validChildren#triggerStateless| (T@U T@U) Bool)
(declare-fun |heapseg#everUsed| (T@U) Bool)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun heap (T@U) T@U)
(declare-fun PredicateType_heapType () T@T)
(declare-fun |treeKey'| (T@U T@U) Int)
(declare-fun |treeKey#triggerStateless| (T@U) Int)
(declare-fun |treeDegree#triggerStateless| (T@U) Int)
(declare-fun |treeSize#triggerStateless| (T@U) Int)
(declare-fun |treeParent'| (T@U T@U) T@U)
(declare-fun |treeParent#triggerStateless| (T@U) T@U)
(declare-fun |tree#trigger| (T@U T@U) Bool)
(declare-fun |tree#everUsed| (T@U) Bool)
(declare-fun |heap#trigger| (T@U T@U) Bool)
(declare-fun |heap#everUsed| (T@U) Bool)
(declare-fun segDegree (T@U T@U T@U Int) Int)
(declare-fun treeDegree (T@U T@U) Int)
(declare-fun |sorted#frame| (T@U T@U T@U) Bool)
(declare-fun |presorted#frame| (T@U T@U T@U) Bool)
(declare-fun |validChildren#frame| (T@U T@U T@U) Bool)
(declare-fun treeKey (T@U T@U) Int)
(declare-fun treeSize (T@U T@U) Int)
(declare-fun treeParent (T@U T@U) T@U)
(declare-fun |heapseg#sm| (T@U T@U) T@U)
(declare-fun |tree#sm| (T@U) T@U)
(declare-fun |heap#sm| (T@U) T@U)
(declare-fun |segLength#frame| (T@U T@U T@U) Int)
(declare-fun |segSize#frame| (T@U T@U T@U) Int)
(declare-fun |segParent#frame| (T@U T@U T@U) T@U)
(declare-fun presorted (T@U T@U T@U) Bool)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |sorted#trigger| (T@U T@U T@U) Bool)
(declare-fun segParent (T@U T@U T@U) T@U)
(declare-fun |segDegree#trigger| (T@U T@U T@U Int) Bool)
(declare-fun |segDegree#frame| (T@U T@U T@U Int) Int)
(declare-fun getPredWandId (T@U) Int)
(declare-fun |segSize#trigger| (T@U T@U T@U) Bool)
(declare-fun FullPerm () Real)
(declare-fun |segLength#trigger| (T@U T@U T@U) Bool)
(declare-fun |treeKey#frame| (T@U T@U) Int)
(declare-fun |treeDegree#frame| (T@U T@U) Int)
(declare-fun |treeSize#frame| (T@U T@U) Int)
(declare-fun |treeParent#frame| (T@U T@U) T@U)
(declare-fun sorted (T@U T@U T@U) Bool)
(declare-fun ZeroPMask () T@U)
(declare-fun validChildren (T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type key) (FieldType NormalFieldType intType))) (= (type degree) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type parent) (FieldType NormalFieldType RefType))) (= (type sibling) (FieldType NormalFieldType RefType))) (= (type child) (FieldType NormalFieldType RefType))) (= (type Nodes) (FieldType NormalFieldType RefType))) (= (type size) (FieldType NormalFieldType intType))))
(assert (distinct $allocated key degree parent sibling child Nodes size)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (Ctor PredicateType_heapsegType) 11)) (= (Ctor FrameTypeType) 12)) (forall ((arg0@@23 T@U) (arg1@@9 T@U) ) (! (= (type (heapseg arg0@@23 arg1@@9)) (FieldType PredicateType_heapsegType FrameTypeType))
 :qid |funType:heapseg|
 :pattern ( (heapseg arg0@@23 arg1@@9))
))))
(assert (forall ((Heap T@U) (Mask T@U) (this T@U) (last T@U) ) (!  (=> (and (and (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (= (type this) RefType)) (= (type last) RefType)) (and (state Heap Mask) (< AssumeFunctionsAbove 8))) (= (segLength Heap this last) (ite (= this last) 0 (+ 1 (|segLength'| Heap (MapType0Select Heap this sibling) last)))))
 :qid |stdinbpl.781:15|
 :skolemid |45|
 :pattern ( (state Heap Mask) (segLength Heap this last))
 :pattern ( (state Heap Mask) (|segLength#triggerStateless| this last) (|heapseg#trigger| Heap (heapseg this last)))
)))
(assert  (and (and (= (type null) RefType) (= (Ctor PredicateType_treeType) 13)) (forall ((arg0@@24 T@U) ) (! (= (type (tree arg0@@24)) (FieldType PredicateType_treeType FrameTypeType))
 :qid |funType:tree|
 :pattern ( (tree arg0@@24))
))))
(assert (forall ((Heap@@0 T@U) (Mask@@0 T@U) (this@@0 T@U) ) (!  (=> (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type this@@0) RefType)) (and (state Heap@@0 Mask@@0) (or (< AssumeFunctionsAbove 9) (|treeDegree#trigger| (MapType0Select Heap@@0 null (tree this@@0)) this@@0)))) (<= 0 (|treeDegree'| Heap@@0 this@@0)))
 :qid |stdinbpl.372:15|
 :skolemid |31|
 :pattern ( (state Heap@@0 Mask@@0) (|treeDegree'| Heap@@0 this@@0))
)))
(assert (forall ((Heap@@1 T@U) (Mask@@1 T@U) ) (!  (=> (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type Mask@@1) (MapType1Type RefType realType))) (state Heap@@1 Mask@@1)) (GoodMask Mask@@1))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap@@1 Mask@@1))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert (forall ((Heap@@2 T@U) (this@@1 T@U) (last@@0 T@U) (index Int) ) (!  (=> (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@1) RefType)) (= (type last@@0) RefType)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@1 last@@0 index))))
 :qid |stdinbpl.1128:15|
 :skolemid |60|
 :pattern ( (|segDegree'| Heap@@2 this@@1 last@@0 index))
)))
(assert (forall ((Heap@@3 T@U) (Mask@@2 T@U) (this@@2 T@U) (last@@1 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type this@@2) RefType)) (= (type last@@1) RefType)) (and (state Heap@@3 Mask@@2) (< AssumeFunctionsAbove 1))) (= (segSize Heap@@3 this@@2 last@@1) (ite (= this@@2 last@@1) 0 (+ (|treeSize'| Heap@@3 this@@2) (|segSize'| Heap@@3 (MapType0Select Heap@@3 this@@2 sibling) last@@1)))))
 :qid |stdinbpl.957:15|
 :skolemid |54|
 :pattern ( (state Heap@@3 Mask@@2) (segSize Heap@@3 this@@2 last@@1))
 :pattern ( (state Heap@@3 Mask@@2) (|segSize#triggerStateless| this@@2 last@@1) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)))
)))
(assert (forall ((this@@3 T@U) (last@@2 T@U) ) (!  (=> (and (= (type this@@3) RefType) (= (type last@@2) RefType)) (IsPredicateField (heapseg this@@3 last@@2)))
 :qid |stdinbpl.2402:15|
 :skolemid |98|
 :pattern ( (heapseg this@@3 last@@2))
)))
(assert (forall ((Heap@@4 T@U) (this@@4 T@U) (last@@3 T@U) ) (!  (=> (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type this@@4) RefType)) (= (type last@@3) RefType)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@4 last@@3))))
 :qid |stdinbpl.775:15|
 :skolemid |44|
 :pattern ( (|segLength'| Heap@@4 this@@4 last@@3))
)))
(assert (forall ((Heap@@5 T@U) (this@@5 T@U) (last@@4 T@U) ) (!  (=> (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type this@@5) RefType)) (= (type last@@4) RefType)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@5 last@@4))))
 :qid |stdinbpl.951:15|
 :skolemid |53|
 :pattern ( (|segSize'| Heap@@5 this@@5 last@@4))
)))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@10 T@U) (arg2@@3 T@U) ) (! (= (type (|segParent'| arg0@@25 arg1@@10 arg2@@3)) RefType)
 :qid |funType:segParent'|
 :pattern ( (|segParent'| arg0@@25 arg1@@10 arg2@@3))
)) (forall ((arg0@@26 T@U) (arg1@@11 T@U) ) (! (= (type (|segParent#triggerStateless| arg0@@26 arg1@@11)) RefType)
 :qid |funType:segParent#triggerStateless|
 :pattern ( (|segParent#triggerStateless| arg0@@26 arg1@@11))
))))
(assert (forall ((Heap@@6 T@U) (this@@6 T@U) (last@@5 T@U) ) (!  (=> (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type this@@6) RefType)) (= (type last@@5) RefType)) (dummyFunction (|segParent#triggerStateless| this@@6 last@@5)))
 :qid |stdinbpl.1330:15|
 :skolemid |67|
 :pattern ( (|segParent'| Heap@@6 this@@6 last@@5))
)))
(assert (forall ((Heap@@7 T@U) (this@@7 T@U) (last@@6 T@U) ) (!  (=> (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type this@@7) RefType)) (= (type last@@6) RefType)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@7 last@@6))))
 :qid |stdinbpl.1469:15|
 :skolemid |73|
 :pattern ( (|sorted'| Heap@@7 this@@7 last@@6))
)))
(assert (forall ((Heap@@8 T@U) (this@@8 T@U) (last@@7 T@U) ) (!  (=> (and (and (= (type Heap@@8) (MapType0Type RefType)) (= (type this@@8) RefType)) (= (type last@@7) RefType)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@8 last@@7))))
 :qid |stdinbpl.1706:15|
 :skolemid |80|
 :pattern ( (|presorted'| Heap@@8 this@@8 last@@7))
)))
(assert (forall ((Heap@@9 T@U) (this@@9 T@U) (last@@8 T@U) ) (!  (=> (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type this@@9) RefType)) (= (type last@@8) RefType)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@9 last@@8))))
 :qid |stdinbpl.2007:15|
 :skolemid |86|
 :pattern ( (|validChildren'| Heap@@9 this@@9 last@@8))
)))
(assert (forall ((Heap@@10 T@U) (this@@10 T@U) (last@@9 T@U) ) (!  (=> (and (and (= (type Heap@@10) (MapType0Type RefType)) (= (type this@@10) RefType)) (= (type last@@9) RefType)) (|heapseg#everUsed| (heapseg this@@10 last@@9)))
 :qid |stdinbpl.2421:15|
 :skolemid |102|
 :pattern ( (|heapseg#trigger| Heap@@10 (heapseg this@@10 last@@9)))
)))
(assert (forall ((arg0@@27 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@27))))
(= (type (PredicateMaskField arg0@@27)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@27))
)))
(assert (forall ((Heap@@11 T@U) (ExhaleHeap T@U) (Mask@@3 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3)) (and (HasDirectPerm Mask@@3 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@11 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@28 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@28))))
(= (type (WandMaskField arg0@@28)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@28))
)))
(assert (forall ((Heap@@12 T@U) (ExhaleHeap@@0 T@U) (Mask@@4 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4)) (and (HasDirectPerm Mask@@4 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@12 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert (forall ((this@@11 T@U) ) (!  (=> (= (type this@@11) RefType) (IsPredicateField (tree this@@11)))
 :qid |stdinbpl.2209:15|
 :skolemid |92|
 :pattern ( (tree this@@11))
)))
(assert  (and (= (Ctor PredicateType_heapType) 14) (forall ((arg0@@29 T@U) ) (! (= (type (heap arg0@@29)) (FieldType PredicateType_heapType FrameTypeType))
 :qid |funType:heap|
 :pattern ( (heap arg0@@29))
))))
(assert (forall ((this@@12 T@U) ) (!  (=> (= (type this@@12) RefType) (IsPredicateField (heap this@@12)))
 :qid |stdinbpl.2520:15|
 :skolemid |104|
 :pattern ( (heap this@@12))
)))
(assert (forall ((Heap@@13 T@U) (this@@13 T@U) ) (!  (=> (and (= (type Heap@@13) (MapType0Type RefType)) (= (type this@@13) RefType)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@13))))
 :qid |stdinbpl.224:15|
 :skolemid |23|
 :pattern ( (|treeKey'| Heap@@13 this@@13))
)))
(assert (forall ((Heap@@14 T@U) (this@@14 T@U) ) (!  (=> (and (= (type Heap@@14) (MapType0Type RefType)) (= (type this@@14) RefType)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@14))))
 :qid |stdinbpl.353:15|
 :skolemid |28|
 :pattern ( (|treeDegree'| Heap@@14 this@@14))
)))
(assert (forall ((Heap@@15 T@U) (this@@15 T@U) ) (!  (=> (and (= (type Heap@@15) (MapType0Type RefType)) (= (type this@@15) RefType)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@15))))
 :qid |stdinbpl.494:15|
 :skolemid |34|
 :pattern ( (|treeSize'| Heap@@15 this@@15))
)))
(assert  (and (forall ((arg0@@30 T@U) (arg1@@12 T@U) ) (! (= (type (|treeParent'| arg0@@30 arg1@@12)) RefType)
 :qid |funType:treeParent'|
 :pattern ( (|treeParent'| arg0@@30 arg1@@12))
)) (forall ((arg0@@31 T@U) ) (! (= (type (|treeParent#triggerStateless| arg0@@31)) RefType)
 :qid |funType:treeParent#triggerStateless|
 :pattern ( (|treeParent#triggerStateless| arg0@@31))
))))
(assert (forall ((Heap@@16 T@U) (this@@16 T@U) ) (!  (=> (and (= (type Heap@@16) (MapType0Type RefType)) (= (type this@@16) RefType)) (dummyFunction (|treeParent#triggerStateless| this@@16)))
 :qid |stdinbpl.646:15|
 :skolemid |39|
 :pattern ( (|treeParent'| Heap@@16 this@@16))
)))
(assert (forall ((Heap@@17 T@U) (this@@17 T@U) ) (!  (=> (and (= (type Heap@@17) (MapType0Type RefType)) (= (type this@@17) RefType)) (|tree#everUsed| (tree this@@17)))
 :qid |stdinbpl.2228:15|
 :skolemid |96|
 :pattern ( (|tree#trigger| Heap@@17 (tree this@@17)))
)))
(assert (forall ((Heap@@18 T@U) (this@@18 T@U) ) (!  (=> (and (= (type Heap@@18) (MapType0Type RefType)) (= (type this@@18) RefType)) (|heap#everUsed| (heap this@@18)))
 :qid |stdinbpl.2539:15|
 :skolemid |108|
 :pattern ( (|heap#trigger| Heap@@18 (heap this@@18)))
)))
(assert (forall ((Heap@@19 T@U) (Mask@@5 T@U) (this@@19 T@U) (last@@10 T@U) (index@@0 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@19) (MapType0Type RefType)) (= (type Mask@@5) (MapType1Type RefType realType))) (= (type this@@19) RefType)) (= (type last@@10) RefType)) (and (state Heap@@19 Mask@@5) (< AssumeFunctionsAbove 7))) (and (<= 0 index@@0) (< index@@0 (segLength Heap@@19 this@@19 last@@10)))) (= (segDegree Heap@@19 this@@19 last@@10 index@@0) (ite (= index@@0 0) (treeDegree Heap@@19 this@@19) (|segDegree'| Heap@@19 (MapType0Select Heap@@19 this@@19 sibling) last@@10 (- index@@0 1)))))
 :qid |stdinbpl.1134:15|
 :skolemid |61|
 :pattern ( (state Heap@@19 Mask@@5) (segDegree Heap@@19 this@@19 last@@10 index@@0))
 :pattern ( (state Heap@@19 Mask@@5) (|segDegree#triggerStateless| this@@19 last@@10 index@@0) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)))
)))
(assert (forall ((Heap@@20 T@U) (Mask@@6 T@U) (this@@20 T@U) (last@@11 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@20) (MapType0Type RefType)) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type this@@20) RefType)) (= (type last@@11) RefType)) (state Heap@@20 Mask@@6)) (= (|sorted'| Heap@@20 this@@20 last@@11) (|sorted#frame| (MapType0Select Heap@@20 null (heapseg this@@20 last@@11)) this@@20 last@@11)))
 :qid |stdinbpl.1482:15|
 :skolemid |75|
 :pattern ( (state Heap@@20 Mask@@6) (|sorted'| Heap@@20 this@@20 last@@11))
 :pattern ( (state Heap@@20 Mask@@6) (|sorted#triggerStateless| this@@20 last@@11) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)))
)))
(assert (forall ((Heap@@21 T@U) (Mask@@7 T@U) (this@@21 T@U) (last@@12 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@21) (MapType0Type RefType)) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type this@@21) RefType)) (= (type last@@12) RefType)) (state Heap@@21 Mask@@7)) (= (|presorted'| Heap@@21 this@@21 last@@12) (|presorted#frame| (MapType0Select Heap@@21 null (heapseg this@@21 last@@12)) this@@21 last@@12)))
 :qid |stdinbpl.1719:15|
 :skolemid |82|
 :pattern ( (state Heap@@21 Mask@@7) (|presorted'| Heap@@21 this@@21 last@@12))
 :pattern ( (state Heap@@21 Mask@@7) (|presorted#triggerStateless| this@@21 last@@12) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)))
)))
(assert (forall ((Heap@@22 T@U) (Mask@@8 T@U) (this@@22 T@U) (last@@13 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@22) (MapType0Type RefType)) (= (type Mask@@8) (MapType1Type RefType realType))) (= (type this@@22) RefType)) (= (type last@@13) RefType)) (state Heap@@22 Mask@@8)) (= (|validChildren'| Heap@@22 this@@22 last@@13) (|validChildren#frame| (MapType0Select Heap@@22 null (heapseg this@@22 last@@13)) this@@22 last@@13)))
 :qid |stdinbpl.2020:15|
 :skolemid |88|
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren'| Heap@@22 this@@22 last@@13))
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren#triggerStateless| this@@22 last@@13) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)))
)))
(assert (forall ((Heap@@23 T@U) (ExhaleHeap@@1 T@U) (Mask@@9 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@23) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9)) (U_2_bool (MapType0Select Heap@@23 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@24 T@U) (this@@23 T@U) ) (!  (=> (and (= (type Heap@@24) (MapType0Type RefType)) (= (type this@@23) RefType)) (and (= (treeKey Heap@@24 this@@23) (|treeKey'| Heap@@24 this@@23)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@23)))))
 :qid |stdinbpl.220:15|
 :skolemid |22|
 :pattern ( (treeKey Heap@@24 this@@23))
)))
(assert (forall ((Heap@@25 T@U) (this@@24 T@U) ) (!  (=> (and (= (type Heap@@25) (MapType0Type RefType)) (= (type this@@24) RefType)) (and (= (treeDegree Heap@@25 this@@24) (|treeDegree'| Heap@@25 this@@24)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@24)))))
 :qid |stdinbpl.349:15|
 :skolemid |27|
 :pattern ( (treeDegree Heap@@25 this@@24))
)))
(assert (forall ((Heap@@26 T@U) (this@@25 T@U) ) (!  (=> (and (= (type Heap@@26) (MapType0Type RefType)) (= (type this@@25) RefType)) (and (= (treeSize Heap@@26 this@@25) (|treeSize'| Heap@@26 this@@25)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@25)))))
 :qid |stdinbpl.490:15|
 :skolemid |33|
 :pattern ( (treeSize Heap@@26 this@@25))
)))
(assert (forall ((arg0@@32 T@U) (arg1@@13 T@U) ) (! (= (type (treeParent arg0@@32 arg1@@13)) RefType)
 :qid |funType:treeParent|
 :pattern ( (treeParent arg0@@32 arg1@@13))
)))
(assert (forall ((Heap@@27 T@U) (this@@26 T@U) ) (!  (=> (and (= (type Heap@@27) (MapType0Type RefType)) (= (type this@@26) RefType)) (and (= (treeParent Heap@@27 this@@26) (|treeParent'| Heap@@27 this@@26)) (dummyFunction (|treeParent#triggerStateless| this@@26))))
 :qid |stdinbpl.642:15|
 :skolemid |38|
 :pattern ( (treeParent Heap@@27 this@@26))
)))
(assert (forall ((this@@27 T@U) (last@@14 T@U) (this2 T@U) (last2 T@U) ) (!  (=> (and (and (and (and (= (type this@@27) RefType) (= (type last@@14) RefType)) (= (type this2) RefType)) (= (type last2) RefType)) (= (heapseg this@@27 last@@14) (heapseg this2 last2))) (and (= this@@27 this2) (= last@@14 last2)))
 :qid |stdinbpl.2412:15|
 :skolemid |100|
 :pattern ( (heapseg this@@27 last@@14) (heapseg this2 last2))
)))
(assert (forall ((arg0@@33 T@U) (arg1@@14 T@U) ) (! (= (type (|heapseg#sm| arg0@@33 arg1@@14)) (FieldType PredicateType_heapsegType (MapType1Type RefType boolType)))
 :qid |funType:heapseg#sm|
 :pattern ( (|heapseg#sm| arg0@@33 arg1@@14))
)))
(assert (forall ((this@@28 T@U) (last@@15 T@U) (this2@@0 T@U) (last2@@0 T@U) ) (!  (=> (and (and (and (and (= (type this@@28) RefType) (= (type last@@15) RefType)) (= (type this2@@0) RefType)) (= (type last2@@0) RefType)) (= (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))) (and (= this@@28 this2@@0) (= last@@15 last2@@0)))
 :qid |stdinbpl.2416:15|
 :skolemid |101|
 :pattern ( (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))
)))
(assert (forall ((this@@29 T@U) (this2@@1 T@U) ) (!  (=> (and (and (= (type this@@29) RefType) (= (type this2@@1) RefType)) (= (tree this@@29) (tree this2@@1))) (= this@@29 this2@@1))
 :qid |stdinbpl.2219:15|
 :skolemid |94|
 :pattern ( (tree this@@29) (tree this2@@1))
)))
(assert (forall ((arg0@@34 T@U) ) (! (= (type (|tree#sm| arg0@@34)) (FieldType PredicateType_treeType (MapType1Type RefType boolType)))
 :qid |funType:tree#sm|
 :pattern ( (|tree#sm| arg0@@34))
)))
(assert (forall ((this@@30 T@U) (this2@@2 T@U) ) (!  (=> (and (and (= (type this@@30) RefType) (= (type this2@@2) RefType)) (= (|tree#sm| this@@30) (|tree#sm| this2@@2))) (= this@@30 this2@@2))
 :qid |stdinbpl.2223:15|
 :skolemid |95|
 :pattern ( (|tree#sm| this@@30) (|tree#sm| this2@@2))
)))
(assert (forall ((this@@31 T@U) (this2@@3 T@U) ) (!  (=> (and (and (= (type this@@31) RefType) (= (type this2@@3) RefType)) (= (heap this@@31) (heap this2@@3))) (= this@@31 this2@@3))
 :qid |stdinbpl.2530:15|
 :skolemid |106|
 :pattern ( (heap this@@31) (heap this2@@3))
)))
(assert (forall ((arg0@@35 T@U) ) (! (= (type (|heap#sm| arg0@@35)) (FieldType PredicateType_heapType (MapType1Type RefType boolType)))
 :qid |funType:heap#sm|
 :pattern ( (|heap#sm| arg0@@35))
)))
(assert (forall ((this@@32 T@U) (this2@@4 T@U) ) (!  (=> (and (and (= (type this@@32) RefType) (= (type this2@@4) RefType)) (= (|heap#sm| this@@32) (|heap#sm| this2@@4))) (= this@@32 this2@@4))
 :qid |stdinbpl.2534:15|
 :skolemid |107|
 :pattern ( (|heap#sm| this@@32) (|heap#sm| this2@@4))
)))
(assert (forall ((Heap@@28 T@U) (Mask@@10 T@U) (this@@33 T@U) (last@@16 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@28) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type this@@33) RefType)) (= (type last@@16) RefType)) (state Heap@@28 Mask@@10)) (= (|segLength'| Heap@@28 this@@33 last@@16) (|segLength#frame| (MapType0Select Heap@@28 null (heapseg this@@33 last@@16)) this@@33 last@@16)))
 :qid |stdinbpl.788:15|
 :skolemid |46|
 :pattern ( (state Heap@@28 Mask@@10) (|segLength'| Heap@@28 this@@33 last@@16))
 :pattern ( (state Heap@@28 Mask@@10) (|segLength#triggerStateless| this@@33 last@@16) (|heapseg#trigger| Heap@@28 (heapseg this@@33 last@@16)))
)))
(assert (forall ((Heap@@29 T@U) (Mask@@11 T@U) (this@@34 T@U) (last@@17 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@29) (MapType0Type RefType)) (= (type Mask@@11) (MapType1Type RefType realType))) (= (type this@@34) RefType)) (= (type last@@17) RefType)) (state Heap@@29 Mask@@11)) (= (|segSize'| Heap@@29 this@@34 last@@17) (|segSize#frame| (MapType0Select Heap@@29 null (heapseg this@@34 last@@17)) this@@34 last@@17)))
 :qid |stdinbpl.964:15|
 :skolemid |55|
 :pattern ( (state Heap@@29 Mask@@11) (|segSize'| Heap@@29 this@@34 last@@17))
 :pattern ( (state Heap@@29 Mask@@11) (|segSize#triggerStateless| this@@34 last@@17) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)))
)))
(assert (forall ((arg0@@36 T@U) (arg1@@15 T@U) (arg2@@4 T@U) ) (! (= (type (|segParent#frame| arg0@@36 arg1@@15 arg2@@4)) RefType)
 :qid |funType:segParent#frame|
 :pattern ( (|segParent#frame| arg0@@36 arg1@@15 arg2@@4))
)))
(assert (forall ((Heap@@30 T@U) (Mask@@12 T@U) (this@@35 T@U) (last@@18 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@30) (MapType0Type RefType)) (= (type Mask@@12) (MapType1Type RefType realType))) (= (type this@@35) RefType)) (= (type last@@18) RefType)) (state Heap@@30 Mask@@12)) (= (|segParent'| Heap@@30 this@@35 last@@18) (|segParent#frame| (MapType0Select Heap@@30 null (heapseg this@@35 last@@18)) this@@35 last@@18)))
 :qid |stdinbpl.1343:15|
 :skolemid |69|
 :pattern ( (state Heap@@30 Mask@@12) (|segParent'| Heap@@30 this@@35 last@@18))
 :pattern ( (state Heap@@30 Mask@@12) (|segParent#triggerStateless| this@@35 last@@18) (|heapseg#trigger| Heap@@30 (heapseg this@@35 last@@18)))
)))
(assert (forall ((Heap@@31 T@U) (ExhaleHeap@@2 T@U) (Mask@@13 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@31) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@13) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13)) (HasDirectPerm Mask@@13 o_1@@0 f_2)) (= (MapType0Select Heap@@31 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((Heap@@32 T@U) (Mask@@14 T@U) (this@@36 T@U) (last@@19 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@32) (MapType0Type RefType)) (= (type Mask@@14) (MapType1Type RefType realType))) (= (type this@@36) RefType)) (= (type last@@19) RefType)) (and (state Heap@@32 Mask@@14) (< AssumeFunctionsAbove 5))) (= (presorted Heap@@32 this@@36 last@@19)  (and (=> (< 1 (segLength Heap@@32 this@@36 last@@19)) (and (<= (treeDegree Heap@@32 this@@36) (segDegree Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19 0)) (|presorted'| Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19))) (=> (and (< 2 (segLength Heap@@32 this@@36 last@@19)) (= (segDegree Heap@@32 this@@36 last@@19 0) (segDegree Heap@@32 this@@36 last@@19 1))) (< (segDegree Heap@@32 this@@36 last@@19 1) (segDegree Heap@@32 this@@36 last@@19 2))))))
 :qid |stdinbpl.1712:15|
 :skolemid |81|
 :pattern ( (state Heap@@32 Mask@@14) (presorted Heap@@32 this@@36 last@@19))
 :pattern ( (state Heap@@32 Mask@@14) (|presorted#triggerStateless| this@@36 last@@19) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.182:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField key)))
(assert  (not (IsWandField key)))
(assert  (not (IsPredicateField degree)))
(assert  (not (IsWandField degree)))
(assert  (not (IsPredicateField parent)))
(assert  (not (IsWandField parent)))
(assert  (not (IsPredicateField sibling)))
(assert  (not (IsWandField sibling)))
(assert  (not (IsPredicateField child)))
(assert  (not (IsWandField child)))
(assert  (not (IsPredicateField Nodes)))
(assert  (not (IsWandField Nodes)))
(assert  (not (IsPredicateField size)))
(assert  (not (IsWandField size)))
(assert (forall ((Heap@@33 T@U) (ExhaleHeap@@3 T@U) (Mask@@15 T@U) ) (!  (=> (and (and (and (= (type Heap@@33) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@15) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15)) (succHeap Heap@@33 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15))
)))
(assert (forall ((Heap@@34 T@U) (Mask@@16 T@U) (this@@37 T@U) ) (!  (=> (and (and (and (= (type Heap@@34) (MapType0Type RefType)) (= (type Mask@@16) (MapType1Type RefType realType))) (= (type this@@37) RefType)) (and (state Heap@@34 Mask@@16) (< AssumeFunctionsAbove 1))) (= (treeSize Heap@@34 this@@37) (ite (= (U_2_int (MapType0Select Heap@@34 this@@37 degree)) 0) 1 (+ 1 (|segSize'| Heap@@34 (MapType0Select Heap@@34 this@@37 child) null)))))
 :qid |stdinbpl.500:15|
 :skolemid |35|
 :pattern ( (state Heap@@34 Mask@@16) (treeSize Heap@@34 this@@37))
 :pattern ( (state Heap@@34 Mask@@16) (|treeSize#triggerStateless| this@@37) (|tree#trigger| Heap@@34 (tree this@@37)))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@37 Real) (arg1@@16 T@U) ) (! (= (type (ConditionalFrame arg0@@37 arg1@@16)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@37 arg1@@16))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.170:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@17 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@17) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@17 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@17 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@17 o_2@@0 f_4@@0))
)))
(assert (forall ((Heap@@35 T@U) (Mask@@18 T@U) (this@@38 T@U) (last@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@35) (MapType0Type RefType)) (= (type Mask@@18) (MapType1Type RefType realType))) (= (type this@@38) RefType)) (= (type last@@20) RefType)) (and (state Heap@@35 Mask@@18) (or (< AssumeFunctionsAbove 0) (|sorted#trigger| (MapType0Select Heap@@35 null (heapseg this@@38 last@@20)) this@@38 last@@20)))) (|sorted'| Heap@@35 this@@38 last@@20)) (presorted Heap@@35 this@@38 last@@20))
 :qid |stdinbpl.1488:15|
 :skolemid |76|
 :pattern ( (state Heap@@35 Mask@@18) (|sorted'| Heap@@35 this@@38 last@@20))
)))
(assert (forall ((Heap@@36 T@U) (this@@39 T@U) (last@@21 T@U) ) (!  (=> (and (and (= (type Heap@@36) (MapType0Type RefType)) (= (type this@@39) RefType)) (= (type last@@21) RefType)) (and (= (segLength Heap@@36 this@@39 last@@21) (|segLength'| Heap@@36 this@@39 last@@21)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@39 last@@21)))))
 :qid |stdinbpl.771:15|
 :skolemid |43|
 :pattern ( (segLength Heap@@36 this@@39 last@@21))
)))
(assert (forall ((Heap@@37 T@U) (this@@40 T@U) (last@@22 T@U) ) (!  (=> (and (and (= (type Heap@@37) (MapType0Type RefType)) (= (type this@@40) RefType)) (= (type last@@22) RefType)) (and (= (segSize Heap@@37 this@@40 last@@22) (|segSize'| Heap@@37 this@@40 last@@22)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@40 last@@22)))))
 :qid |stdinbpl.947:15|
 :skolemid |52|
 :pattern ( (segSize Heap@@37 this@@40 last@@22))
)))
(assert (forall ((arg0@@38 T@U) (arg1@@17 T@U) (arg2@@5 T@U) ) (! (= (type (segParent arg0@@38 arg1@@17 arg2@@5)) RefType)
 :qid |funType:segParent|
 :pattern ( (segParent arg0@@38 arg1@@17 arg2@@5))
)))
(assert (forall ((Heap@@38 T@U) (this@@41 T@U) (last@@23 T@U) ) (!  (=> (and (and (= (type Heap@@38) (MapType0Type RefType)) (= (type this@@41) RefType)) (= (type last@@23) RefType)) (and (= (segParent Heap@@38 this@@41 last@@23) (|segParent'| Heap@@38 this@@41 last@@23)) (dummyFunction (|segParent#triggerStateless| this@@41 last@@23))))
 :qid |stdinbpl.1326:15|
 :skolemid |66|
 :pattern ( (segParent Heap@@38 this@@41 last@@23))
)))
(assert (forall ((Heap@@39 T@U) (Mask@@19 T@U) (this@@42 T@U) (last@@24 T@U) (index@@1 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@39) (MapType0Type RefType)) (= (type Mask@@19) (MapType1Type RefType realType))) (= (type this@@42) RefType)) (= (type last@@24) RefType)) (and (state Heap@@39 Mask@@19) (or (< AssumeFunctionsAbove 7) (|segDegree#trigger| (MapType0Select Heap@@39 null (heapseg this@@42 last@@24)) this@@42 last@@24 index@@1)))) (and (<= 0 index@@1) (< index@@1 (segLength Heap@@39 this@@42 last@@24)))) (<= 0 (|segDegree'| Heap@@39 this@@42 last@@24 index@@1)))
 :qid |stdinbpl.1147:15|
 :skolemid |63|
 :pattern ( (state Heap@@39 Mask@@19) (|segDegree'| Heap@@39 this@@42 last@@24 index@@1))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@40 T@U) (Mask@@20 T@U) (this@@43 T@U) (last@@25 T@U) (index@@2 Int) ) (!  (=> (and (and (and (and (= (type Heap@@40) (MapType0Type RefType)) (= (type Mask@@20) (MapType1Type RefType realType))) (= (type this@@43) RefType)) (= (type last@@25) RefType)) (state Heap@@40 Mask@@20)) (= (|segDegree'| Heap@@40 this@@43 last@@25 index@@2) (|segDegree#frame| (MapType0Select Heap@@40 null (heapseg this@@43 last@@25)) this@@43 last@@25 index@@2)))
 :qid |stdinbpl.1141:15|
 :skolemid |62|
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree'| Heap@@40 this@@43 last@@25 index@@2))
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree#triggerStateless| this@@43 last@@25 index@@2) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)))
)))
(assert (forall ((Heap@@41 T@U) (this@@44 T@U) (last@@26 T@U) (index@@3 Int) ) (!  (=> (and (and (= (type Heap@@41) (MapType0Type RefType)) (= (type this@@44) RefType)) (= (type last@@26) RefType)) (and (= (segDegree Heap@@41 this@@44 last@@26 index@@3) (|segDegree'| Heap@@41 this@@44 last@@26 index@@3)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@44 last@@26 index@@3)))))
 :qid |stdinbpl.1124:15|
 :skolemid |59|
 :pattern ( (segDegree Heap@@41 this@@44 last@@26 index@@3))
)))
(assert (forall ((this@@45 T@U) (last@@27 T@U) ) (!  (=> (and (= (type this@@45) RefType) (= (type last@@27) RefType)) (= (getPredWandId (heapseg this@@45 last@@27)) 1))
 :qid |stdinbpl.2406:15|
 :skolemid |99|
 :pattern ( (heapseg this@@45 last@@27))
)))
(assert (forall ((Heap@@42 T@U) (Mask@@21 T@U) (this@@46 T@U) (last@@28 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@42) (MapType0Type RefType)) (= (type Mask@@21) (MapType1Type RefType realType))) (= (type this@@46) RefType)) (= (type last@@28) RefType)) (and (state Heap@@42 Mask@@21) (or (< AssumeFunctionsAbove 1) (|segSize#trigger| (MapType0Select Heap@@42 null (heapseg this@@46 last@@28)) this@@46 last@@28)))) (= this@@46 last@@28)) (= (|segSize'| Heap@@42 this@@46 last@@28) 0))
 :qid |stdinbpl.970:15|
 :skolemid |56|
 :pattern ( (state Heap@@42 Mask@@21) (|segSize'| Heap@@42 this@@46 last@@28))
)))
(assert (forall ((Heap@@43 T@U) (ExhaleHeap@@4 T@U) (Mask@@22 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@43) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@22) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22)) (and (HasDirectPerm Mask@@22 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@43 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@43 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@44 T@U) (ExhaleHeap@@5 T@U) (Mask@@23 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@44) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@23) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23)) (and (HasDirectPerm Mask@@23 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@44 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@44 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@47 T@U) ) (!  (=> (= (type this@@47) RefType) (= (getPredWandId (tree this@@47)) 0))
 :qid |stdinbpl.2213:15|
 :skolemid |93|
 :pattern ( (tree this@@47))
)))
(assert (forall ((this@@48 T@U) ) (!  (=> (= (type this@@48) RefType) (= (getPredWandId (heap this@@48)) 2))
 :qid |stdinbpl.2524:15|
 :skolemid |105|
 :pattern ( (heap this@@48))
)))
(assert (forall ((Mask@@24 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@24) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@24)) (and (>= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@24) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@24) (MapType1Select Mask@@24 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@45 T@U) (Mask@@25 T@U) (this@@49 T@U) (last@@29 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@45) (MapType0Type RefType)) (= (type Mask@@25) (MapType1Type RefType realType))) (= (type this@@49) RefType)) (= (type last@@29) RefType)) (and (state Heap@@45 Mask@@25) (or (< AssumeFunctionsAbove 8) (|segLength#trigger| (MapType0Select Heap@@45 null (heapseg this@@49 last@@29)) this@@49 last@@29)))) (<= 0 (|segLength'| Heap@@45 this@@49 last@@29)))
 :qid |stdinbpl.794:15|
 :skolemid |47|
 :pattern ( (state Heap@@45 Mask@@25) (|segLength'| Heap@@45 this@@49 last@@29))
)))
(assert (forall ((Heap@@46 T@U) (Mask@@26 T@U) (this@@50 T@U) ) (!  (=> (and (and (and (= (type Heap@@46) (MapType0Type RefType)) (= (type Mask@@26) (MapType1Type RefType realType))) (= (type this@@50) RefType)) (state Heap@@46 Mask@@26)) (= (|treeKey'| Heap@@46 this@@50) (|treeKey#frame| (MapType0Select Heap@@46 null (tree this@@50)) this@@50)))
 :qid |stdinbpl.237:15|
 :skolemid |25|
 :pattern ( (state Heap@@46 Mask@@26) (|treeKey'| Heap@@46 this@@50))
)))
(assert (forall ((Heap@@47 T@U) (Mask@@27 T@U) (this@@51 T@U) ) (!  (=> (and (and (and (= (type Heap@@47) (MapType0Type RefType)) (= (type Mask@@27) (MapType1Type RefType realType))) (= (type this@@51) RefType)) (state Heap@@47 Mask@@27)) (= (|treeDegree'| Heap@@47 this@@51) (|treeDegree#frame| (MapType0Select Heap@@47 null (tree this@@51)) this@@51)))
 :qid |stdinbpl.366:15|
 :skolemid |30|
 :pattern ( (state Heap@@47 Mask@@27) (|treeDegree'| Heap@@47 this@@51))
)))
(assert (forall ((Heap@@48 T@U) (Mask@@28 T@U) (this@@52 T@U) ) (!  (=> (and (and (and (= (type Heap@@48) (MapType0Type RefType)) (= (type Mask@@28) (MapType1Type RefType realType))) (= (type this@@52) RefType)) (state Heap@@48 Mask@@28)) (= (|treeSize'| Heap@@48 this@@52) (|treeSize#frame| (MapType0Select Heap@@48 null (tree this@@52)) this@@52)))
 :qid |stdinbpl.507:15|
 :skolemid |36|
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize'| Heap@@48 this@@52))
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize#triggerStateless| this@@52) (|tree#trigger| Heap@@48 (tree this@@52)))
)))
(assert (forall ((arg0@@39 T@U) (arg1@@18 T@U) ) (! (= (type (|treeParent#frame| arg0@@39 arg1@@18)) RefType)
 :qid |funType:treeParent#frame|
 :pattern ( (|treeParent#frame| arg0@@39 arg1@@18))
)))
(assert (forall ((Heap@@49 T@U) (Mask@@29 T@U) (this@@53 T@U) ) (!  (=> (and (and (and (= (type Heap@@49) (MapType0Type RefType)) (= (type Mask@@29) (MapType1Type RefType realType))) (= (type this@@53) RefType)) (state Heap@@49 Mask@@29)) (= (|treeParent'| Heap@@49 this@@53) (|treeParent#frame| (MapType0Select Heap@@49 null (tree this@@53)) this@@53)))
 :qid |stdinbpl.659:15|
 :skolemid |41|
 :pattern ( (state Heap@@49 Mask@@29) (|treeParent'| Heap@@49 this@@53))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@50 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@50) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@50 o $allocated))) (U_2_bool (MapType0Select Heap@@50 (MapType0Select Heap@@50 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@50 o f))
)))
(assert (forall ((this@@54 T@U) (last@@30 T@U) ) (!  (=> (and (= (type this@@54) RefType) (= (type last@@30) RefType)) (= (PredicateMaskField (heapseg this@@54 last@@30)) (|heapseg#sm| this@@54 last@@30)))
 :qid |stdinbpl.2398:15|
 :skolemid |97|
 :pattern ( (PredicateMaskField (heapseg this@@54 last@@30)))
)))
(assert (forall ((Heap@@51 T@U) (Mask@@30 T@U) (this@@55 T@U) (last@@31 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@51) (MapType0Type RefType)) (= (type Mask@@30) (MapType1Type RefType realType))) (= (type this@@55) RefType)) (= (type last@@31) RefType)) (and (state Heap@@51 Mask@@30) (< AssumeFunctionsAbove 0))) (= (sorted Heap@@51 this@@55 last@@31)  (=> (< 1 (segLength Heap@@51 this@@55 last@@31)) (and (< (treeDegree Heap@@51 this@@55) (segDegree Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31 0)) (|sorted'| Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31)))))
 :qid |stdinbpl.1475:15|
 :skolemid |74|
 :pattern ( (state Heap@@51 Mask@@30) (sorted Heap@@51 this@@55 last@@31))
 :pattern ( (state Heap@@51 Mask@@30) (|sorted#triggerStateless| this@@55 last@@31) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)))
)))
(assert (forall ((this@@56 T@U) ) (!  (=> (= (type this@@56) RefType) (= (PredicateMaskField (tree this@@56)) (|tree#sm| this@@56)))
 :qid |stdinbpl.2205:15|
 :skolemid |91|
 :pattern ( (PredicateMaskField (tree this@@56)))
)))
(assert (forall ((this@@57 T@U) ) (!  (=> (= (type this@@57) RefType) (= (PredicateMaskField (heap this@@57)) (|heap#sm| this@@57)))
 :qid |stdinbpl.2516:15|
 :skolemid |103|
 :pattern ( (PredicateMaskField (heap this@@57)))
)))
(assert (forall ((Heap@@52 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@52) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@52 (MapType0Store Heap@@52 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@52 o@@0 f_3 v))
)))
(assert (forall ((Heap@@53 T@U) (Mask@@31 T@U) (this@@58 T@U) ) (!  (=> (and (and (and (= (type Heap@@53) (MapType0Type RefType)) (= (type Mask@@31) (MapType1Type RefType realType))) (= (type this@@58) RefType)) (and (state Heap@@53 Mask@@31) (< AssumeFunctionsAbove 3))) (= (treeKey Heap@@53 this@@58) (U_2_int (MapType0Select Heap@@53 this@@58 key))))
 :qid |stdinbpl.230:15|
 :skolemid |24|
 :pattern ( (state Heap@@53 Mask@@31) (treeKey Heap@@53 this@@58))
 :pattern ( (state Heap@@53 Mask@@31) (|treeKey#triggerStateless| this@@58) (|tree#trigger| Heap@@53 (tree this@@58)))
)))
(assert (forall ((Heap@@54 T@U) (Mask@@32 T@U) (this@@59 T@U) ) (!  (=> (and (and (and (= (type Heap@@54) (MapType0Type RefType)) (= (type Mask@@32) (MapType1Type RefType realType))) (= (type this@@59) RefType)) (and (state Heap@@54 Mask@@32) (< AssumeFunctionsAbove 6))) (= (treeParent Heap@@54 this@@59) (MapType0Select Heap@@54 this@@59 parent)))
 :qid |stdinbpl.652:15|
 :skolemid |40|
 :pattern ( (state Heap@@54 Mask@@32) (treeParent Heap@@54 this@@59))
 :pattern ( (state Heap@@54 Mask@@32) (|treeParent#triggerStateless| this@@59) (|tree#trigger| Heap@@54 (tree this@@59)))
)))
(assert (forall ((Heap@@55 T@U) (Mask@@33 T@U) (this@@60 T@U) ) (!  (=> (and (and (and (= (type Heap@@55) (MapType0Type RefType)) (= (type Mask@@33) (MapType1Type RefType realType))) (= (type this@@60) RefType)) (and (state Heap@@55 Mask@@33) (< AssumeFunctionsAbove 9))) (= (treeDegree Heap@@55 this@@60) (U_2_int (MapType0Select Heap@@55 this@@60 degree))))
 :qid |stdinbpl.359:15|
 :skolemid |29|
 :pattern ( (state Heap@@55 Mask@@33) (treeDegree Heap@@55 this@@60))
 :pattern ( (state Heap@@55 Mask@@33) (|treeDegree#triggerStateless| this@@60) (|tree#trigger| Heap@@55 (tree this@@60)))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((Heap@@56 T@U) (Mask@@34 T@U) (this@@61 T@U) (last@@32 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@56) (MapType0Type RefType)) (= (type Mask@@34) (MapType1Type RefType realType))) (= (type this@@61) RefType)) (= (type last@@32) RefType)) (and (state Heap@@56 Mask@@34) (< AssumeFunctionsAbove 2))) (= (validChildren Heap@@56 this@@61 last@@32)  (=> (< 1 (segLength Heap@@56 this@@61 last@@32)) (and (= (treeDegree Heap@@56 this@@61) (+ (segDegree Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32 0) 1)) (|validChildren'| Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32)))))
 :qid |stdinbpl.2013:15|
 :skolemid |87|
 :pattern ( (state Heap@@56 Mask@@34) (validChildren Heap@@56 this@@61 last@@32))
 :pattern ( (state Heap@@56 Mask@@34) (|validChildren#triggerStateless| this@@61 last@@32) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.177:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((Heap@@57 T@U) (Mask@@35 T@U) (this@@62 T@U) (last@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@57) (MapType0Type RefType)) (= (type Mask@@35) (MapType1Type RefType realType))) (= (type this@@62) RefType)) (= (type last@@33) RefType)) (and (state Heap@@57 Mask@@35) (< AssumeFunctionsAbove 4))) (not (= this@@62 last@@33))) (= (segParent Heap@@57 this@@62 last@@33) (treeParent Heap@@57 this@@62)))
 :qid |stdinbpl.1336:15|
 :skolemid |68|
 :pattern ( (state Heap@@57 Mask@@35) (segParent Heap@@57 this@@62 last@@33))
 :pattern ( (state Heap@@57 Mask@@35) (|segParent#triggerStateless| this@@62 last@@33) (|heapseg#trigger| Heap@@57 (heapseg this@@62 last@@33)))
)))
(assert (forall ((Heap@@58 T@U) (this@@63 T@U) (last@@34 T@U) ) (!  (=> (and (and (= (type Heap@@58) (MapType0Type RefType)) (= (type this@@63) RefType)) (= (type last@@34) RefType)) (and (= (sorted Heap@@58 this@@63 last@@34) (|sorted'| Heap@@58 this@@63 last@@34)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@63 last@@34)))))
 :qid |stdinbpl.1465:15|
 :skolemid |72|
 :pattern ( (sorted Heap@@58 this@@63 last@@34))
)))
(assert (forall ((Heap@@59 T@U) (this@@64 T@U) (last@@35 T@U) ) (!  (=> (and (and (= (type Heap@@59) (MapType0Type RefType)) (= (type this@@64) RefType)) (= (type last@@35) RefType)) (and (= (presorted Heap@@59 this@@64 last@@35) (|presorted'| Heap@@59 this@@64 last@@35)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@64 last@@35)))))
 :qid |stdinbpl.1702:15|
 :skolemid |79|
 :pattern ( (presorted Heap@@59 this@@64 last@@35))
)))
(assert (forall ((Heap@@60 T@U) (this@@65 T@U) (last@@36 T@U) ) (!  (=> (and (and (= (type Heap@@60) (MapType0Type RefType)) (= (type this@@65) RefType)) (= (type last@@36) RefType)) (and (= (validChildren Heap@@60 this@@65 last@@36) (|validChildren'| Heap@@60 this@@65 last@@36)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@65 last@@36)))))
 :qid |stdinbpl.2003:15|
 :skolemid |85|
 :pattern ( (validChildren Heap@@60 this@@65 last@@36))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Mask@83 () T@U)
(declare-fun nodes@0 () T@U)
(declare-fun prevTemp@0 () T@U)
(declare-fun Mask@87 () T@U)
(declare-fun Mask@106 () T@U)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun Mask@103 () T@U)
(declare-fun temp@0 () T@U)
(declare-fun minNode@0 () T@U)
(declare-fun Mask@101 () T@U)
(declare-fun Mask@98 () T@U)
(declare-fun Mask@99 () T@U)
(declare-fun UnfoldingMask@35 () T@U)
(declare-fun Heap@@61 () T@U)
(declare-fun this@@66 () T@U)
(declare-fun UnfoldingMask@39 () T@U)
(declare-fun Mask@91 () T@U)
(declare-fun Mask@90 () T@U)
(declare-fun Mask@89 () T@U)
(declare-fun UnfoldingMask@38 () T@U)
(declare-fun UnfoldingMask@36 () T@U)
(declare-fun Mask@0 () T@U)
(declare-fun UnfoldingMask@37 () T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun UnfoldingMask@34 () T@U)
(declare-fun UnfoldingMask@32 () T@U)
(declare-fun UnfoldingMask@33 () T@U)
(declare-fun Mask@84 () T@U)
(declare-fun Mask@85 () T@U)
(declare-fun Mask@86 () T@U)
(declare-fun Mask@82 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun Heap@35 () T@U)
(declare-fun temp@1 () T@U)
(declare-fun Mask@80 () T@U)
(declare-fun Mask@79 () T@U)
(declare-fun Mask@81 () T@U)
(declare-fun Mask@78 () T@U)
(declare-fun Mask@77 () T@U)
(declare-fun Mask@76 () T@U)
(declare-fun Mask@75 () T@U)
(declare-fun Mask@74 () T@U)
(declare-fun UnfoldingMask@31 () T@U)
(declare-fun UnfoldingMask@30 () T@U)
(declare-fun UnfoldingMask@28 () T@U)
(declare-fun UnfoldingMask@29 () T@U)
(declare-fun UnfoldingMask@27 () T@U)
(declare-fun UnfoldingMask@26 () T@U)
(declare-fun UnfoldingMask@24 () T@U)
(declare-fun UnfoldingMask@25 () T@U)
(declare-fun Heap@34 () T@U)
(declare-fun Mask@73 () T@U)
(declare-fun Heap@30 () T@U)
(declare-fun newPMask@6 () T@U)
(declare-fun Heap@31 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun newPMask@7 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun freshVersion@3 () T@U)
(declare-fun Mask@72 () T@U)
(declare-fun Mask@71 () T@U)
(declare-fun Mask@70 () T@U)
(declare-fun Mask@69 () T@U)
(declare-fun Mask@51 () T@U)
(declare-fun ExhaleHeap@3 () T@U)
(declare-fun Mask@68 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun Mask@66 () T@U)
(declare-fun Mask@67 () T@U)
(declare-fun Mask@65 () T@U)
(declare-fun Mask@64 () T@U)
(declare-fun Mask@63 () T@U)
(declare-fun Mask@62 () T@U)
(declare-fun Mask@61 () T@U)
(declare-fun Heap@23 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun Heap@26 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun freshVersion@2 () T@U)
(declare-fun Mask@60 () T@U)
(declare-fun Mask@59 () T@U)
(declare-fun Mask@58 () T@U)
(declare-fun Mask@57 () T@U)
(declare-fun Mask@56 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun Mask@55 () T@U)
(declare-fun Mask@54 () T@U)
(declare-fun Mask@53 () T@U)
(declare-fun Mask@52 () T@U)
(declare-fun Mask@50 () T@U)
(declare-fun Mask@48 () T@U)
(declare-fun Mask@47 () T@U)
(declare-fun Mask@49 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun newVersion@2 () T@U)
(declare-fun Mask@46 () T@U)
(declare-fun UnfoldingMask@23 () T@U)
(declare-fun UnfoldingMask@22 () T@U)
(declare-fun UnfoldingMask@20 () T@U)
(declare-fun UnfoldingMask@21 () T@U)
(declare-fun UnfoldingMask@19 () T@U)
(declare-fun UnfoldingMask@18 () T@U)
(declare-fun UnfoldingMask@16 () T@U)
(declare-fun UnfoldingMask@17 () T@U)
(declare-fun Mask@43 () T@U)
(declare-fun Mask@44 () T@U)
(declare-fun Mask@45 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun Mask@42 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun Mask@131 () T@U)
(declare-fun temp@4 () T@U)
(declare-fun Mask@210 () T@U)
(declare-fun ExhaleHeap@30 () T@U)
(declare-fun Mask@211 () T@U)
(declare-fun temp@3 () T@U)
(declare-fun Mask@209 () T@U)
(declare-fun Mask@130 () T@U)
(declare-fun Mask@129 () T@U)
(declare-fun Heap@106 () T@U)
(declare-fun temp@5 () T@U)
(declare-fun oldTreeSize@0 () Int)
(declare-fun Mask@206 () T@U)
(declare-fun Mask@205 () T@U)
(declare-fun Mask@204 () T@U)
(declare-fun Heap@102 () T@U)
(declare-fun newPMask@18 () T@U)
(declare-fun Heap@103 () T@U)
(declare-fun Heap@104 () T@U)
(declare-fun newPMask@19 () T@U)
(declare-fun Heap@105 () T@U)
(declare-fun ExhaleHeap@35 () T@U)
(declare-fun Heap@100 () T@U)
(declare-fun Heap@101 () T@U)
(declare-fun freshVersion@10 () T@U)
(declare-fun Mask@203 () T@U)
(declare-fun Mask@202 () T@U)
(declare-fun Mask@201 () T@U)
(declare-fun Mask@200 () T@U)
(declare-fun Mask@199 () T@U)
(declare-fun Heap@99 () T@U)
(declare-fun Mask@197 () T@U)
(declare-fun Mask@198 () T@U)
(declare-fun Mask@196 () T@U)
(declare-fun Mask@195 () T@U)
(declare-fun Mask@194 () T@U)
(declare-fun Mask@193 () T@U)
(declare-fun Mask@192 () T@U)
(declare-fun Mask@191 () T@U)
(declare-fun Mask@189 () T@U)
(declare-fun Mask@188 () T@U)
(declare-fun Mask@190 () T@U)
(declare-fun Heap@97 () T@U)
(declare-fun Heap@98 () T@U)
(declare-fun newVersion@7 () T@U)
(declare-fun Mask@187 () T@U)
(declare-fun Heap@93 () T@U)
(declare-fun newPMask@16 () T@U)
(declare-fun Heap@94 () T@U)
(declare-fun Heap@95 () T@U)
(declare-fun newPMask@17 () T@U)
(declare-fun Heap@96 () T@U)
(declare-fun Heap@90 () T@U)
(declare-fun Heap@91 () T@U)
(declare-fun Heap@92 () T@U)
(declare-fun freshVersion@9 () T@U)
(declare-fun Mask@186 () T@U)
(declare-fun Mask@185 () T@U)
(declare-fun Mask@184 () T@U)
(declare-fun Mask@183 () T@U)
(declare-fun Mask@182 () T@U)
(declare-fun Heap@86 () T@U)
(declare-fun newPMask@14 () T@U)
(declare-fun Heap@87 () T@U)
(declare-fun Heap@88 () T@U)
(declare-fun newPMask@15 () T@U)
(declare-fun Heap@89 () T@U)
(declare-fun Heap@83 () T@U)
(declare-fun Heap@84 () T@U)
(declare-fun Heap@85 () T@U)
(declare-fun freshVersion@8 () T@U)
(declare-fun Mask@181 () T@U)
(declare-fun Mask@180 () T@U)
(declare-fun Mask@179 () T@U)
(declare-fun Mask@178 () T@U)
(declare-fun Mask@177 () T@U)
(declare-fun Heap@79 () T@U)
(declare-fun Heap@78 () T@U)
(declare-fun Heap@80 () T@U)
(declare-fun Heap@81 () T@U)
(declare-fun Heap@82 () T@U)
(declare-fun newPMask@13 () T@U)
(declare-fun Heap@75 () T@U)
(declare-fun Heap@76 () T@U)
(declare-fun Heap@77 () T@U)
(declare-fun freshVersion@7 () T@U)
(declare-fun Mask@176 () T@U)
(declare-fun Mask@175 () T@U)
(declare-fun Mask@174 () T@U)
(declare-fun Mask@173 () T@U)
(declare-fun Mask@172 () T@U)
(declare-fun Mask@171 () T@U)
(declare-fun Heap@74 () T@U)
(declare-fun Mask@167 () T@U)
(declare-fun Mask@166 () T@U)
(declare-fun Mask@168 () T@U)
(declare-fun Mask@169 () T@U)
(declare-fun Mask@170 () T@U)
(declare-fun Heap@72 () T@U)
(declare-fun Heap@73 () T@U)
(declare-fun newVersion@6 () T@U)
(declare-fun Mask@165 () T@U)
(declare-fun Mask@164 () T@U)
(declare-fun Mask@162 () T@U)
(declare-fun Mask@161 () T@U)
(declare-fun Mask@163 () T@U)
(declare-fun Heap@71 () T@U)
(declare-fun newVersion@5 () T@U)
(declare-fun Mask@133 () T@U)
(declare-fun Mask@132 () T@U)
(declare-fun Mask@159 () T@U)
(declare-fun Heap@68 () T@U)
(declare-fun Heap@67 () T@U)
(declare-fun newPMask@12 () T@U)
(declare-fun Heap@69 () T@U)
(declare-fun Heap@70 () T@U)
(declare-fun Heap@64 () T@U)
(declare-fun Heap@65 () T@U)
(declare-fun Heap@66 () T@U)
(declare-fun freshVersion@6 () T@U)
(declare-fun Mask@158 () T@U)
(declare-fun Mask@157 () T@U)
(declare-fun Mask@156 () T@U)
(declare-fun Mask@155 () T@U)
(declare-fun Heap@63 () T@U)
(declare-fun Mask@154 () T@U)
(declare-fun Heap@62 () T@U)
(declare-fun Mask@153 () T@U)
(declare-fun ExhaleHeap@33 () T@U)
(declare-fun Mask@151 () T@U)
(declare-fun r_1@1 () T@U)
(declare-fun Mask@152 () T@U)
(declare-fun Heap@60 () T@U)
(declare-fun Heap@61 () T@U)
(declare-fun Mask@150 () T@U)
(declare-fun Mask@135 () T@U)
(declare-fun Heap@59 () T@U)
(declare-fun Mask@149 () T@U)
(declare-fun ExhaleHeap@31 () T@U)
(declare-fun ExhaleHeap@32 () T@U)
(declare-fun Mask@146 () T@U)
(declare-fun Mask@147 () T@U)
(declare-fun Mask@148 () T@U)
(declare-fun r_1@0 () T@U)
(declare-fun Heap@58 () T@U)
(declare-fun Mask@145 () T@U)
(declare-fun Mask@144 () T@U)
(declare-fun Mask@143 () T@U)
(declare-fun Heap@57 () T@U)
(declare-fun Mask@142 () T@U)
(declare-fun Mask@141 () T@U)
(declare-fun Mask@140 () T@U)
(declare-fun Heap@53 () T@U)
(declare-fun newPMask@10 () T@U)
(declare-fun Heap@54 () T@U)
(declare-fun Heap@55 () T@U)
(declare-fun newPMask@11 () T@U)
(declare-fun Heap@56 () T@U)
(declare-fun Heap@51 () T@U)
(declare-fun Heap@52 () T@U)
(declare-fun freshVersion@5 () T@U)
(declare-fun Mask@139 () T@U)
(declare-fun Mask@138 () T@U)
(declare-fun Mask@137 () T@U)
(declare-fun Mask@136 () T@U)
(declare-fun Heap@50 () T@U)
(declare-fun Heap@49 () T@U)
(declare-fun Mask@134 () T@U)
(declare-fun Heap@48 () T@U)
(declare-fun prevTemp@1 () T@U)
(declare-fun Mask@128 () T@U)
(declare-fun Mask@127 () T@U)
(declare-fun Heap@44 () T@U)
(declare-fun newPMask@8 () T@U)
(declare-fun Heap@45 () T@U)
(declare-fun Heap@46 () T@U)
(declare-fun newPMask@9 () T@U)
(declare-fun Heap@47 () T@U)
(declare-fun Heap@41 () T@U)
(declare-fun Heap@42 () T@U)
(declare-fun Heap@43 () T@U)
(declare-fun freshVersion@4 () T@U)
(declare-fun Mask@126 () T@U)
(declare-fun Mask@125 () T@U)
(declare-fun Mask@124 () T@U)
(declare-fun Mask@123 () T@U)
(declare-fun Mask@122 () T@U)
(declare-fun temp@2 () T@U)
(declare-fun Mask@118 () T@U)
(declare-fun Mask@117 () T@U)
(declare-fun Mask@119 () T@U)
(declare-fun Mask@120 () T@U)
(declare-fun Mask@121 () T@U)
(declare-fun Heap@39 () T@U)
(declare-fun Heap@40 () T@U)
(declare-fun newVersion@4 () T@U)
(declare-fun Mask@116 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Heap@37 () T@U)
(declare-fun Mask@115 () T@U)
(declare-fun Heap@38 () T@U)
(declare-fun Mask@114 () T@U)
(declare-fun Mask@112 () T@U)
(declare-fun Mask@111 () T@U)
(declare-fun Mask@113 () T@U)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun Heap@36 () T@U)
(declare-fun newVersion@3 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun ExhaleHeap@2 () T@U)
(declare-fun Mask@41 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun Mask@39 () T@U)
(declare-fun Mask@40 () T@U)
(declare-fun Mask@38 () T@U)
(declare-fun Mask@37 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun Mask@35 () T@U)
(declare-fun Mask@34 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun Mask@33 () T@U)
(declare-fun Mask@32 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun Mask@30 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Mask@28 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun Mask@25 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun newVersion@1 () T@U)
(declare-fun Mask@24 () T@U)
(declare-fun UnfoldingMask@15 () T@U)
(declare-fun UnfoldingMask@14 () T@U)
(declare-fun UnfoldingMask@12 () T@U)
(declare-fun UnfoldingMask@13 () T@U)
(declare-fun UnfoldingMask@11 () T@U)
(declare-fun UnfoldingMask@10 () T@U)
(declare-fun UnfoldingMask@8 () T@U)
(declare-fun UnfoldingMask@9 () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun Mask@22 () T@U)
(declare-fun Mask@23 () T@U)
(declare-fun Mask@19 () T@U)
(declare-fun Mask@20 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun UnfoldingMask@7 () T@U)
(declare-fun UnfoldingMask@6 () T@U)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun temp () T@U)
(declare-fun prevTemp () T@U)
(declare-fun minNode () T@U)
(declare-fun fakeNode () T@U)
(declare-fun r_1 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun nodes () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@116) (MapType1Type RefType realType)) (= (type temp@2) RefType)) (= (type Mask@159) (MapType1Type RefType realType))) (= (type this@@66) RefType)) (= (type Heap@68) (MapType0Type RefType))) (= (type Heap@67) (MapType0Type RefType))) (= (type newPMask@12) (MapType1Type RefType boolType))) (= (type Heap@69) (MapType0Type RefType))) (= (type Heap@70) (MapType0Type RefType))) (= (type Heap@65) (MapType0Type RefType))) (= (type Heap@64) (MapType0Type RefType))) (= (type Heap@66) (MapType0Type RefType))) (= (type freshVersion@6) FrameTypeType)) (= (type Mask@158) (MapType1Type RefType realType))) (= (type Mask@157) (MapType1Type RefType realType))) (forall ((arg0@@40 T@U) (arg1@@19 T@U) ) (! (= (type (CombineFrames arg0@@40 arg1@@19)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@40 arg1@@19))
))) (forall ((arg0@@41 T@U) ) (! (= (type (FrameFragment arg0@@41)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@41))
))) (= (type Mask@156) (MapType1Type RefType realType))) (= (type Mask@155) (MapType1Type RefType realType))) (= (type nodes@0) RefType)) (= (type Heap@1) (MapType0Type RefType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Heap@63) (MapType0Type RefType))) (= (type Mask@154) (MapType1Type RefType realType))) (= (type ExhaleHeap@30) (MapType0Type RefType))) (= (type temp@3) RefType)) (= (type Mask@135) (MapType1Type RefType realType))) (= (type Heap@49) (MapType0Type RefType))) (= (type Heap@62) (MapType0Type RefType))) (= (type Mask@153) (MapType1Type RefType realType))) (= (type Heap@59) (MapType0Type RefType))) (= (type Mask@149) (MapType1Type RefType realType))) (= (type Heap@50) (MapType0Type RefType))) (= (type ExhaleHeap@31) (MapType0Type RefType))) (= (type ExhaleHeap@32) (MapType0Type RefType))) (= (type Mask@146) (MapType1Type RefType realType))) (= (type Mask@147) (MapType1Type RefType realType))) (= (type Mask@148) (MapType1Type RefType realType))) (= (type r_1@0) RefType)) (= (type Heap@58) (MapType0Type RefType))) (= (type Mask@145) (MapType1Type RefType realType))) (= (type Mask@144) (MapType1Type RefType realType))) (= (type Mask@143) (MapType1Type RefType realType))) (= (type Heap@57) (MapType0Type RefType))) (= (type Mask@142) (MapType1Type RefType realType))) (= (type Mask@141) (MapType1Type RefType realType))) (= (type Mask@140) (MapType1Type RefType realType))) (= (type newPMask@10) (MapType1Type RefType boolType))) (= (type Heap@53) (MapType0Type RefType))) (= (type Heap@54) (MapType0Type RefType))) (= (type Heap@55) (MapType0Type RefType))) (= (type newPMask@11) (MapType1Type RefType boolType))) (= (type Heap@56) (MapType0Type RefType))) (= (type Heap@51) (MapType0Type RefType))) (= (type Heap@52) (MapType0Type RefType))) (= (type freshVersion@5) FrameTypeType)) (= (type Mask@139) (MapType1Type RefType realType))) (= (type Mask@138) (MapType1Type RefType realType))) (= (type Mask@137) (MapType1Type RefType realType))) (= (type Mask@136) (MapType1Type RefType realType))) (= (type ExhaleHeap@33) (MapType0Type RefType))) (= (type Mask@151) (MapType1Type RefType realType))) (= (type r_1@1) RefType)) (= (type Mask@152) (MapType1Type RefType realType))) (= (type Heap@60) (MapType0Type RefType))) (= (type Heap@61) (MapType0Type RefType))) (= (type Mask@150) (MapType1Type RefType realType))) (= (type temp@4) RefType)) (= (type Mask@129) (MapType1Type RefType realType))) (= (type Mask@134) (MapType1Type RefType realType))) (= (type Heap@106) (MapType0Type RefType))) (= (type temp@5) RefType)) (= (type Mask@206) (MapType1Type RefType realType))) (= (type Mask@205) (MapType1Type RefType realType))) (= (type Mask@204) (MapType1Type RefType realType))) (= (type newPMask@18) (MapType1Type RefType boolType))) (= (type Heap@102) (MapType0Type RefType))) (= (type Heap@103) (MapType0Type RefType))) (= (type Heap@104) (MapType0Type RefType))) (= (type newPMask@19) (MapType1Type RefType boolType))) (= (type Heap@105) (MapType0Type RefType))) (= (type Heap@100) (MapType0Type RefType))) (= (type ExhaleHeap@35) (MapType0Type RefType))) (= (type Heap@101) (MapType0Type RefType))) (= (type freshVersion@10) FrameTypeType)) (= (type Mask@203) (MapType1Type RefType realType))) (= (type Mask@199) (MapType1Type RefType realType))) (= (type Mask@202) (MapType1Type RefType realType))) (= (type Mask@201) (MapType1Type RefType realType))) (= (type Mask@200) (MapType1Type RefType realType))) (= (type Heap@99) (MapType0Type RefType))) (= (type Mask@198) (MapType1Type RefType realType))) (= (type Mask@197) (MapType1Type RefType realType))) (= (type Mask@196) (MapType1Type RefType realType))) (= (type Mask@194) (MapType1Type RefType realType))) (= (type Mask@195) (MapType1Type RefType realType))) (= (type Mask@193) (MapType1Type RefType realType))) (= (type Mask@192) (MapType1Type RefType realType))) (= (type Mask@188) (MapType1Type RefType realType))) (= (type Mask@191) (MapType1Type RefType realType))) (= (type Mask@189) (MapType1Type RefType realType))) (= (type Mask@190) (MapType1Type RefType realType))) (= (type Heap@98) (MapType0Type RefType))) (= (type Heap@97) (MapType0Type RefType))) (= (type newVersion@7) FrameTypeType)) (= (type Mask@187) (MapType1Type RefType realType))) (= (type newPMask@16) (MapType1Type RefType boolType))) (= (type Heap@93) (MapType0Type RefType))) (= (type Heap@94) (MapType0Type RefType))) (= (type Heap@95) (MapType0Type RefType))) (= (type newPMask@17) (MapType1Type RefType boolType))) (= (type Heap@96) (MapType0Type RefType))) (= (type Heap@91) (MapType0Type RefType))) (= (type Heap@90) (MapType0Type RefType))) (= (type Heap@92) (MapType0Type RefType))) (= (type freshVersion@9) FrameTypeType)) (= (type Mask@186) (MapType1Type RefType realType))) (= (type Mask@182) (MapType1Type RefType realType))) (= (type Mask@185) (MapType1Type RefType realType))) (= (type Mask@184) (MapType1Type RefType realType))) (= (type Mask@183) (MapType1Type RefType realType))) (= (type newPMask@14) (MapType1Type RefType boolType))) (= (type Heap@86) (MapType0Type RefType))) (= (type Heap@87) (MapType0Type RefType))) (= (type Heap@88) (MapType0Type RefType))) (= (type newPMask@15) (MapType1Type RefType boolType))) (= (type Heap@89) (MapType0Type RefType))) (= (type Heap@84) (MapType0Type RefType))) (= (type Heap@83) (MapType0Type RefType))) (= (type Heap@85) (MapType0Type RefType))) (= (type freshVersion@8) FrameTypeType)) (= (type Mask@181) (MapType1Type RefType realType))) (= (type Mask@177) (MapType1Type RefType realType))) (= (type Mask@180) (MapType1Type RefType realType))) (= (type Mask@179) (MapType1Type RefType realType))) (= (type Mask@178) (MapType1Type RefType realType))) (= (type Heap@79) (MapType0Type RefType))) (= (type Heap@78) (MapType0Type RefType))) (= (type Heap@80) (MapType0Type RefType))) (= (type Heap@81) (MapType0Type RefType))) (= (type Heap@82) (MapType0Type RefType))) (= (type newPMask@13) (MapType1Type RefType boolType))) (= (type Heap@76) (MapType0Type RefType))) (= (type Heap@75) (MapType0Type RefType))) (= (type Heap@77) (MapType0Type RefType))) (= (type freshVersion@7) FrameTypeType)) (= (type Mask@176) (MapType1Type RefType realType))) (= (type Mask@175) (MapType1Type RefType realType))) (= (type Mask@174) (MapType1Type RefType realType))) (= (type Mask@173) (MapType1Type RefType realType))) (= (type Mask@172) (MapType1Type RefType realType))) (= (type Mask@171) (MapType1Type RefType realType))) (= (type Heap@74) (MapType0Type RefType))) (= (type Mask@167) (MapType1Type RefType realType))) (= (type Mask@166) (MapType1Type RefType realType))) (= (type Mask@168) (MapType1Type RefType realType))) (= (type Mask@169) (MapType1Type RefType realType))) (= (type Mask@170) (MapType1Type RefType realType))) (= (type Heap@73) (MapType0Type RefType))) (= (type Heap@72) (MapType0Type RefType))) (= (type newVersion@6) FrameTypeType)) (= (type Mask@165) (MapType1Type RefType realType))) (= (type Mask@161) (MapType1Type RefType realType))) (= (type Mask@164) (MapType1Type RefType realType))) (= (type Mask@162) (MapType1Type RefType realType))) (= (type Mask@163) (MapType1Type RefType realType))) (= (type Heap@71) (MapType0Type RefType))) (= (type newVersion@5) FrameTypeType)) (= (type Mask@133) (MapType1Type RefType realType))) (= (type Mask@132) (MapType1Type RefType realType))) (= (type Mask@131) (MapType1Type RefType realType))) (= (type Mask@209) (MapType1Type RefType realType))) (= (type Mask@211) (MapType1Type RefType realType))) (= (type Mask@210) (MapType1Type RefType realType))) (= (type Mask@130) (MapType1Type RefType realType))) (= (type Heap@48) (MapType0Type RefType))) (= (type prevTemp@1) RefType)) (= (type Mask@128) (MapType1Type RefType realType))) (= (type Mask@127) (MapType1Type RefType realType))) (= (type newPMask@8) (MapType1Type RefType boolType))) (= (type Heap@44) (MapType0Type RefType))) (= (type Heap@45) (MapType0Type RefType))) (= (type Heap@46) (MapType0Type RefType))) (= (type newPMask@9) (MapType1Type RefType boolType))) (= (type Heap@47) (MapType0Type RefType))) (= (type Heap@42) (MapType0Type RefType))) (= (type Heap@41) (MapType0Type RefType))) (= (type Heap@43) (MapType0Type RefType))) (= (type freshVersion@4) FrameTypeType)) (= (type Mask@126) (MapType1Type RefType realType))) (= (type Mask@122) (MapType1Type RefType realType))) (= (type Mask@125) (MapType1Type RefType realType))) (= (type Mask@124) (MapType1Type RefType realType))) (= (type Mask@123) (MapType1Type RefType realType))) (= (type Mask@118) (MapType1Type RefType realType))) (= (type Mask@117) (MapType1Type RefType realType))) (= (type Mask@119) (MapType1Type RefType realType))) (= (type Mask@120) (MapType1Type RefType realType))) (= (type Mask@121) (MapType1Type RefType realType))) (= (type Heap@40) (MapType0Type RefType))) (= (type Heap@39) (MapType0Type RefType))) (= (type newVersion@4) FrameTypeType)) (= (type ExhaleHeap@2) (MapType0Type RefType))) (= (type Mask@41) (MapType1Type RefType realType))) (= (type temp@0) RefType)) (= (type prevTemp@0) RefType)) (= (type Heap@11) (MapType0Type RefType))) (= (type Mask@40) (MapType1Type RefType realType))) (= (type Mask@39) (MapType1Type RefType realType))) (= (type Mask@38) (MapType1Type RefType realType))) (= (type Mask@36) (MapType1Type RefType realType))) (= (type Mask@37) (MapType1Type RefType realType))) (= (type Mask@35) (MapType1Type RefType realType))) (= (type Mask@34) (MapType1Type RefType realType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Heap@8) (MapType0Type RefType))) (= (type Heap@9) (MapType0Type RefType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Heap@6) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@33) (MapType1Type RefType realType))) (= (type Mask@29) (MapType1Type RefType realType))) (= (type Mask@32) (MapType1Type RefType realType))) (= (type Mask@31) (MapType1Type RefType realType))) (= (type Mask@30) (MapType1Type RefType realType))) (= (type Heap@3) (MapType0Type RefType))) (= (type minNode@0) RefType)) (= (type Mask@25) (MapType1Type RefType realType))) (= (type Mask@28) (MapType1Type RefType realType))) (= (type Mask@26) (MapType1Type RefType realType))) (= (type Mask@27) (MapType1Type RefType realType))) (= (type Heap@2) (MapType0Type RefType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type newVersion@1) FrameTypeType)) (= (type Mask@24) (MapType1Type RefType realType))) (= (type UnfoldingMask@15) (MapType1Type RefType realType))) (= (type UnfoldingMask@14) (MapType1Type RefType realType))) (= (type Heap@@61) (MapType0Type RefType))) (= (type UnfoldingMask@12) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@13) (MapType1Type RefType realType))) (= (type UnfoldingMask@11) (MapType1Type RefType realType))) (= (type UnfoldingMask@10) (MapType1Type RefType realType))) (= (type UnfoldingMask@8) (MapType1Type RefType realType))) (= (type UnfoldingMask@9) (MapType1Type RefType realType))) (= (type Mask@22) (MapType1Type RefType realType))) (= (type Mask@21) (MapType1Type RefType realType))) (= (type Mask@23) (MapType1Type RefType realType))) (= (type Mask@20) (MapType1Type RefType realType))) (= (type Mask@19) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Heap@35) (MapType0Type RefType))) (= (type temp@1) RefType)) (= (type Mask@81) (MapType1Type RefType realType))) (= (type Mask@78) (MapType1Type RefType realType))) (= (type Mask@80) (MapType1Type RefType realType))) (= (type Mask@79) (MapType1Type RefType realType))) (= (type Mask@76) (MapType1Type RefType realType))) (= (type Mask@77) (MapType1Type RefType realType))) (= (type Mask@75) (MapType1Type RefType realType))) (= (type Mask@74) (MapType1Type RefType realType))) (= (type UnfoldingMask@31) (MapType1Type RefType realType))) (= (type UnfoldingMask@30) (MapType1Type RefType realType))) (= (type UnfoldingMask@28) (MapType1Type RefType realType))) (= (type UnfoldingMask@29) (MapType1Type RefType realType))) (= (type UnfoldingMask@27) (MapType1Type RefType realType))) (= (type UnfoldingMask@26) (MapType1Type RefType realType))) (= (type UnfoldingMask@24) (MapType1Type RefType realType))) (= (type UnfoldingMask@25) (MapType1Type RefType realType))) (= (type ExhaleHeap@3) (MapType0Type RefType))) (= (type Mask@68) (MapType1Type RefType realType))) (= (type Heap@27) (MapType0Type RefType))) (= (type Mask@67) (MapType1Type RefType realType))) (= (type Mask@66) (MapType1Type RefType realType))) (= (type Mask@65) (MapType1Type RefType realType))) (= (type Mask@63) (MapType1Type RefType realType))) (= (type Mask@64) (MapType1Type RefType realType))) (= (type Mask@62) (MapType1Type RefType realType))) (= (type Mask@61) (MapType1Type RefType realType))) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type Heap@23) (MapType0Type RefType))) (= (type Heap@24) (MapType0Type RefType))) (= (type Heap@25) (MapType0Type RefType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type Heap@26) (MapType0Type RefType))) (= (type Heap@21) (MapType0Type RefType))) (= (type Heap@20) (MapType0Type RefType))) (= (type Heap@22) (MapType0Type RefType))) (= (type freshVersion@2) FrameTypeType)) (= (type Mask@60) (MapType1Type RefType realType))) (= (type Mask@56) (MapType1Type RefType realType))) (= (type Mask@59) (MapType1Type RefType realType))) (= (type Mask@58) (MapType1Type RefType realType))) (= (type Mask@57) (MapType1Type RefType realType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Heap@16) (MapType0Type RefType))) (= (type Heap@17) (MapType0Type RefType))) (= (type Heap@18) (MapType0Type RefType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Heap@19) (MapType0Type RefType))) (= (type Heap@14) (MapType0Type RefType))) (= (type Heap@13) (MapType0Type RefType))) (= (type Heap@15) (MapType0Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Mask@55) (MapType1Type RefType realType))) (= (type Mask@51) (MapType1Type RefType realType))) (= (type Mask@54) (MapType1Type RefType realType))) (= (type Mask@53) (MapType1Type RefType realType))) (= (type Mask@52) (MapType1Type RefType realType))) (= (type Heap@34) (MapType0Type RefType))) (= (type Mask@73) (MapType1Type RefType realType))) (= (type newPMask@6) (MapType1Type RefType boolType))) (= (type Heap@30) (MapType0Type RefType))) (= (type Heap@31) (MapType0Type RefType))) (= (type Heap@32) (MapType0Type RefType))) (= (type newPMask@7) (MapType1Type RefType boolType))) (= (type Heap@33) (MapType0Type RefType))) (= (type Heap@28) (MapType0Type RefType))) (= (type Heap@29) (MapType0Type RefType))) (= (type freshVersion@3) FrameTypeType)) (= (type Mask@72) (MapType1Type RefType realType))) (= (type Mask@71) (MapType1Type RefType realType))) (= (type Mask@70) (MapType1Type RefType realType))) (= (type Mask@69) (MapType1Type RefType realType))) (= (type Mask@47) (MapType1Type RefType realType))) (= (type Mask@50) (MapType1Type RefType realType))) (= (type Mask@48) (MapType1Type RefType realType))) (= (type Mask@49) (MapType1Type RefType realType))) (= (type Heap@12) (MapType0Type RefType))) (= (type newVersion@2) FrameTypeType)) (= (type Mask@46) (MapType1Type RefType realType))) (= (type UnfoldingMask@23) (MapType1Type RefType realType))) (= (type UnfoldingMask@22) (MapType1Type RefType realType))) (= (type UnfoldingMask@20) (MapType1Type RefType realType))) (= (type UnfoldingMask@21) (MapType1Type RefType realType))) (= (type UnfoldingMask@19) (MapType1Type RefType realType))) (= (type UnfoldingMask@18) (MapType1Type RefType realType))) (= (type UnfoldingMask@16) (MapType1Type RefType realType))) (= (type UnfoldingMask@17) (MapType1Type RefType realType))) (= (type Mask@44) (MapType1Type RefType realType))) (= (type Mask@43) (MapType1Type RefType realType))) (= (type Mask@45) (MapType1Type RefType realType))) (= (type Mask@42) (MapType1Type RefType realType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Mask@82) (MapType1Type RefType realType))) (= (type Mask@87) (MapType1Type RefType realType))) (= (type Mask@89) (MapType1Type RefType realType))) (= (type Mask@90) (MapType1Type RefType realType))) (= (type Mask@91) (MapType1Type RefType realType))) (= (type UnfoldingMask@39) (MapType1Type RefType realType))) (= (type UnfoldingMask@38) (MapType1Type RefType realType))) (= (type UnfoldingMask@36) (MapType1Type RefType realType))) (= (type UnfoldingMask@37) (MapType1Type RefType realType))) (= (type UnfoldingMask@35) (MapType1Type RefType realType))) (= (type UnfoldingMask@34) (MapType1Type RefType realType))) (= (type UnfoldingMask@32) (MapType1Type RefType realType))) (= (type UnfoldingMask@33) (MapType1Type RefType realType))) (= (type Mask@99) (MapType1Type RefType realType))) (= (type Mask@98) (MapType1Type RefType realType))) (= (type Mask@101) (MapType1Type RefType realType))) (= (type Mask@103) (MapType1Type RefType realType))) (= (type Mask@106) (MapType1Type RefType realType))) (= (type Mask@85) (MapType1Type RefType realType))) (= (type Mask@84) (MapType1Type RefType realType))) (= (type Mask@86) (MapType1Type RefType realType))) (= (type Mask@83) (MapType1Type RefType realType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type UnfoldingMask@7) (MapType1Type RefType realType))) (= (type UnfoldingMask@6) (MapType1Type RefType realType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type Heap@37) (MapType0Type RefType))) (= (type Mask@115) (MapType1Type RefType realType))) (= (type Heap@38) (MapType0Type RefType))) (= (type Mask@111) (MapType1Type RefType realType))) (= (type Mask@114) (MapType1Type RefType realType))) (= (type Mask@112) (MapType1Type RefType realType))) (= (type Mask@113) (MapType1Type RefType realType))) (= (type Heap@36) (MapType0Type RefType))) (= (type newVersion@3) FrameTypeType)) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type temp) RefType)) (= (type prevTemp) RefType)) (= (type minNode) RefType)) (= (type fakeNode) RefType)) (= (type r_1) RefType)) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type nodes) RefType)))
(set-info :boogie-vc-id extractMin)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 1108) (let ((anon88_correct true))
(let ((anon751_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 979) 976)) anon88_correct)))
(let ((anon751_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 977) (- 0 978)) (<= FullPerm (U_2_real (MapType1Select Mask@83 null (heapseg nodes@0 prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@83 null (heapseg nodes@0 prevTemp@0)))) (=> (= (ControlFlow 0 977) 976) anon88_correct))))))
(let ((anon104_correct true))
(let ((anon759_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 967) 964)) anon104_correct)))
(let ((anon759_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 965) (- 0 966)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 965) 964) anon104_correct))))))
(let ((anon100_correct  (=> (= Mask@106 (MapType1Store Mask@87 null (heapseg nodes@0 prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (heapseg nodes@0 prevTemp@0))) FullPerm)))) (and (=> (= (ControlFlow 0 959) (- 0 960)) (<= 0 (- (segLength ExhaleHeap@1 nodes@0 prevTemp@0) 1))) (=> (<= 0 (- (segLength ExhaleHeap@1 nodes@0 prevTemp@0) 1)) (=> (= (ControlFlow 0 959) (- 0 958)) (< (- (segLength ExhaleHeap@1 nodes@0 prevTemp@0) 1) (segLength ExhaleHeap@1 nodes@0 prevTemp@0))))))))
(let ((anon757_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 963) 959)) anon100_correct)))
(let ((anon757_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 961) (- 0 962)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg nodes@0 prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg nodes@0 prevTemp@0)))) (=> (= (ControlFlow 0 961) 959) anon100_correct))))))
(let ((anon96_correct true))
(let ((anon755_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 957) 954)) anon96_correct)))
(let ((anon755_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 955) (- 0 956)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg nodes@0 prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg nodes@0 prevTemp@0)))) (=> (= (ControlFlow 0 955) 954) anon96_correct))))))
(let ((anon114_correct  (=> (and (= Mask@103 (MapType1Store Mask@87 null (heapseg temp@0 minNode@0) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0))) FullPerm)))) (= (ControlFlow 0 946) (- 0 945))) (< 0 (segLength ExhaleHeap@1 temp@0 minNode@0)))))
(let ((anon764_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 949) 946)) anon114_correct)))
(let ((anon764_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 947) (- 0 948)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0)))) (=> (= (ControlFlow 0 947) 946) anon114_correct))))))
(let ((anon110_correct true))
(let ((anon762_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 944) 941)) anon110_correct)))
(let ((anon762_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 942) (- 0 943)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 942) 941) anon110_correct))))))
(let ((anon124_correct  (=> (and (= Mask@101 (MapType1Store Mask@87 null (heapseg minNode@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null))) FullPerm)))) (= (ControlFlow 0 933) (- 0 932))) (< 0 (segLength ExhaleHeap@1 minNode@0 null)))))
(let ((anon769_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 936) 933)) anon124_correct)))
(let ((anon769_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 934) (- 0 935)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null)))) (=> (= (ControlFlow 0 934) 933) anon124_correct))))))
(let ((anon120_correct true))
(let ((anon767_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 931) 928)) anon120_correct)))
(let ((anon767_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 929) (- 0 930)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 929) 928) anon120_correct))))))
(let ((anon138_correct  (=> (and (= Mask@98 (MapType1Store Mask@87 null (heapseg minNode@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null))) FullPerm)))) (= (ControlFlow 0 920) (- 0 919))) (< 0 (segLength ExhaleHeap@1 minNode@0 null)))))
(let ((anon776_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 923) 920)) anon138_correct)))
(let ((anon776_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 921) (- 0 922)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null)))) (=> (= (ControlFlow 0 921) 920) anon138_correct))))))
(let ((anon134_correct  (=> (= Mask@99 (MapType1Store Mask@87 null (heapseg temp@0 minNode@0) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0))) FullPerm)))) (and (=> (= (ControlFlow 0 914) (- 0 915)) (<= 0 (- (segLength ExhaleHeap@1 temp@0 minNode@0) 1))) (=> (<= 0 (- (segLength ExhaleHeap@1 temp@0 minNode@0) 1)) (=> (= (ControlFlow 0 914) (- 0 913)) (< (- (segLength ExhaleHeap@1 temp@0 minNode@0) 1) (segLength ExhaleHeap@1 temp@0 minNode@0))))))))
(let ((anon774_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 918) 914)) anon134_correct)))
(let ((anon774_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 916) (- 0 917)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0)))) (=> (= (ControlFlow 0 916) 914) anon134_correct))))))
(let ((anon130_correct true))
(let ((anon772_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 912) 909)) anon130_correct)))
(let ((anon772_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 910) (- 0 911)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0)))) (=> (= (ControlFlow 0 910) 909) anon130_correct))))))
(let ((anon164_correct true))
(let ((anon789_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 895) 892)) anon164_correct)))
(let ((anon789_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 893) (- 0 894)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@35 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@35 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 893) 892) anon164_correct))))))
(let ((anon156_correct true))
(let ((anon785_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 890) 887)) anon156_correct)))
(let ((anon785_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 888) (- 0 889)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null)))) (=> (= (ControlFlow 0 888) 887) anon156_correct))))))
(let ((anon152_correct true))
(let ((anon783_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 886) 883)) anon152_correct)))
(let ((anon783_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 884) (- 0 885)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0)))) (=> (= (ControlFlow 0 884) 883) anon152_correct))))))
(let ((anon148_correct true))
(let ((anon781_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 882) 879)) anon148_correct)))
(let ((anon781_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 880) (- 0 881)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 880) 879) anon148_correct))))))
(let ((anon144_correct true))
(let ((anon779_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 878) 875)) anon144_correct)))
(let ((anon779_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 876) (- 0 877)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg nodes@0 prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg nodes@0 prevTemp@0)))) (=> (= (ControlFlow 0 876) 875) anon144_correct))))))
(let ((anon182_correct true))
(let ((anon798_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 862) 859)) anon182_correct)))
(let ((anon798_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 860) (- 0 861)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@39 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@39 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 860) 859) anon182_correct))))))
(let ((anon174_correct true))
(let ((anon794_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 857) 854)) anon174_correct)))
(let ((anon794_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 855) (- 0 856)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null)))) (=> (= (ControlFlow 0 855) 854) anon174_correct))))))
(let ((anon170_correct true))
(let ((anon792_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 853) 850)) anon170_correct)))
(let ((anon792_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 851) (- 0 852)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0)))) (=> (= (ControlFlow 0 851) 850) anon170_correct))))))
(let ((anon188_correct  (=> (and (= Mask@91 (MapType1Store Mask@87 null (heapseg temp@0 minNode@0) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0))) FullPerm)))) (= (ControlFlow 0 843) (- 0 842))) (not (= temp@0 minNode@0)))))
(let ((anon801_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 846) 843)) anon188_correct)))
(let ((anon801_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 844) (- 0 845)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg temp@0 minNode@0)))) (=> (= (ControlFlow 0 844) 843) anon188_correct))))))
(let ((anon194_correct  (=> (and (= Mask@90 (MapType1Store Mask@87 null (heapseg minNode@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null))) FullPerm)))) (= (ControlFlow 0 834) (- 0 833))) (not (= minNode@0 null)))))
(let ((anon804_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 837) 834)) anon194_correct)))
(let ((anon804_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 835) (- 0 836)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg minNode@0 null)))) (=> (= (ControlFlow 0 835) 834) anon194_correct))))))
(let ((anon200_correct  (=> (and (= Mask@89 (MapType1Store Mask@87 null (heapseg nodes@0 prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (heapseg nodes@0 prevTemp@0))) FullPerm)))) (= (ControlFlow 0 825) (- 0 824))) (not (= nodes@0 prevTemp@0)))))
(let ((anon807_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 828) 825)) anon200_correct)))
(let ((anon807_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 826) (- 0 827)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg nodes@0 prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg nodes@0 prevTemp@0)))) (=> (= (ControlFlow 0 826) 825) anon200_correct))))))
(let ((anon206_correct true))
(let ((anon810_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 819) 816)) anon206_correct)))
(let ((anon810_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 817) (- 0 818)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 817) 816) anon206_correct))))))
(let ((anon208_correct true))
(let ((anon809_Else_correct  (=> (and (= (treeParent ExhaleHeap@1 prevTemp@0) null) (= (ControlFlow 0 815) 813)) anon208_correct)))
(let ((anon808_Then_correct  (=> (and (not (= prevTemp@0 null)) (state ExhaleHeap@1 Mask@87)) (and (and (=> (= (ControlFlow 0 820) 815) anon809_Else_correct) (=> (= (ControlFlow 0 820) 817) anon810_Then_correct)) (=> (= (ControlFlow 0 820) 819) anon810_Else_correct)))))
(let ((anon808_Else_correct  (=> (and (= prevTemp@0 null) (= (ControlFlow 0 814) 813)) anon208_correct)))
(let ((anon202_correct  (=> (state ExhaleHeap@1 Mask@87) (and (=> (= (ControlFlow 0 821) 820) anon808_Then_correct) (=> (= (ControlFlow 0 821) 814) anon808_Else_correct)))))
(let ((anon806_Else_correct  (=> (and (= (segParent ExhaleHeap@1 nodes@0 prevTemp@0) null) (= (ControlFlow 0 823) 821)) anon202_correct)))
(let ((anon805_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (not (= nodes@0 prevTemp@0))) (state ExhaleHeap@1 Mask@87)) (and (and (=> (= (ControlFlow 0 829) 823) anon806_Else_correct) (=> (= (ControlFlow 0 829) 826) anon807_Then_correct)) (=> (= (ControlFlow 0 829) 828) anon807_Else_correct)))))
(let ((anon805_Else_correct  (=> (and (not (and (not (= prevTemp@0 null)) (not (= nodes@0 prevTemp@0)))) (= (ControlFlow 0 822) 821)) anon202_correct)))
(let ((anon196_correct  (=> (state ExhaleHeap@1 Mask@87) (and (=> (= (ControlFlow 0 830) 829) anon805_Then_correct) (=> (= (ControlFlow 0 830) 822) anon805_Else_correct)))))
(let ((anon803_Else_correct  (=> (and (= (segParent ExhaleHeap@1 minNode@0 null) null) (= (ControlFlow 0 832) 830)) anon196_correct)))
(let ((anon802_Then_correct  (=> (and (not (= minNode@0 null)) (state ExhaleHeap@1 Mask@87)) (and (and (=> (= (ControlFlow 0 838) 832) anon803_Else_correct) (=> (= (ControlFlow 0 838) 835) anon804_Then_correct)) (=> (= (ControlFlow 0 838) 837) anon804_Else_correct)))))
(let ((anon802_Else_correct  (=> (and (= minNode@0 null) (= (ControlFlow 0 831) 830)) anon196_correct)))
(let ((anon190_correct  (=> (state ExhaleHeap@1 Mask@87) (and (=> (= (ControlFlow 0 839) 838) anon802_Then_correct) (=> (= (ControlFlow 0 839) 831) anon802_Else_correct)))))
(let ((anon800_Else_correct  (=> (and (= (segParent ExhaleHeap@1 temp@0 minNode@0) null) (= (ControlFlow 0 841) 839)) anon190_correct)))
(let ((anon799_Then_correct  (=> (and (not (= temp@0 minNode@0)) (state ExhaleHeap@1 Mask@87)) (and (and (=> (= (ControlFlow 0 847) 841) anon800_Else_correct) (=> (= (ControlFlow 0 847) 844) anon801_Then_correct)) (=> (= (ControlFlow 0 847) 846) anon801_Else_correct)))))
(let ((anon799_Else_correct  (=> (and (= temp@0 minNode@0) (= (ControlFlow 0 840) 839)) anon190_correct)))
(let ((anon184_correct  (=> (state ExhaleHeap@1 Mask@87) (and (=> (= (ControlFlow 0 848) 847) anon799_Then_correct) (=> (= (ControlFlow 0 848) 840) anon799_Else_correct)))))
(let ((anon797_Else_correct  (=> (and (= (+ (segSize ExhaleHeap@1 temp@0 minNode@0) (segSize ExhaleHeap@1 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (= (ControlFlow 0 858) 848)) anon184_correct)))
(let ((anon179_correct  (=> (and (not (= this@@66 null)) (= UnfoldingMask@39 (MapType1Store UnfoldingMask@38 this@@66 size (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@38 this@@66 size)) FullPerm))))) (=> (and (and (state Heap@@61 UnfoldingMask@39) (state Heap@@61 UnfoldingMask@39)) (and (= (U_2_int (MapType0Select Heap@@61 this@@66 size)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@39))) (and (=> (= (ControlFlow 0 863) (- 0 864)) (HasDirectPerm UnfoldingMask@39 this@@66 Nodes)) (=> (HasDirectPerm UnfoldingMask@39 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 863) 858) anon797_Else_correct) (=> (= (ControlFlow 0 863) 860) anon798_Then_correct)) (=> (= (ControlFlow 0 863) 862) anon798_Else_correct))))))))
(let ((anon796_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 Nodes) null) (= (ControlFlow 0 866) 863)) anon179_correct)))
(let ((anon796_Then_correct  (=> (and (and (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@38)) (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) null) (= (ControlFlow 0 865) 863))) anon179_correct)))
(let ((anon177_correct  (=> (= UnfoldingMask@36 (MapType1Store Mask@0 null (heap this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heap this@@66))) FullPerm)))) (=> (and (and (and (not (= this@@66 null)) (= UnfoldingMask@37 (MapType1Store UnfoldingMask@36 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@36 this@@66 Nodes)) FullPerm))))) (and (state Heap@@61 UnfoldingMask@37) (= UnfoldingMask@38 (MapType1Store UnfoldingMask@37 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@37 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))))) (and (and (InsidePredicate (heap this@@66) (MapType0Select Heap@@61 null (heap this@@66)) (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) (state Heap@@61 UnfoldingMask@38)) (and (state Heap@@61 UnfoldingMask@38) (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 867) 865) anon796_Then_correct) (=> (= (ControlFlow 0 867) 866) anon796_Else_correct))))))
(let ((anon795_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 870) 867)) anon177_correct)))
(let ((anon795_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 868) (- 0 869)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66)))) (=> (= (ControlFlow 0 868) 867) anon177_correct))))))
(let ((anon793_Else_correct  (=> (and (|heap#trigger| Heap@@61 (heap this@@66)) (= (MapType0Select Heap@@61 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@@61 this@@66 size))))))) (and (=> (= (ControlFlow 0 871) 868) anon795_Then_correct) (=> (= (ControlFlow 0 871) 870) anon795_Else_correct)))))
(let ((anon790_Then_correct  (=> (and (= prevTemp@0 null) (state ExhaleHeap@1 Mask@87)) (and (and (and (and (=> (= (ControlFlow 0 872) 871) anon793_Else_correct) (=> (= (ControlFlow 0 872) 855) anon794_Then_correct)) (=> (= (ControlFlow 0 872) 857) anon794_Else_correct)) (=> (= (ControlFlow 0 872) 851) anon792_Then_correct)) (=> (= (ControlFlow 0 872) 853) anon792_Else_correct)))))
(let ((anon790_Else_correct  (=> (and (not (= prevTemp@0 null)) (= (ControlFlow 0 849) 848)) anon184_correct)))
(let ((anon166_correct  (=> (state ExhaleHeap@1 Mask@87) (and (=> (= (ControlFlow 0 873) 872) anon790_Then_correct) (=> (= (ControlFlow 0 873) 849) anon790_Else_correct)))))
(let ((anon788_Else_correct  (=> (and (= (+ (+ (+ (segSize ExhaleHeap@1 nodes@0 prevTemp@0) (treeSize ExhaleHeap@1 prevTemp@0)) (segSize ExhaleHeap@1 temp@0 minNode@0)) (segSize ExhaleHeap@1 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (= (ControlFlow 0 891) 873)) anon166_correct)))
(let ((anon161_correct  (=> (and (not (= this@@66 null)) (= UnfoldingMask@35 (MapType1Store UnfoldingMask@34 this@@66 size (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@34 this@@66 size)) FullPerm))))) (=> (and (and (state Heap@@61 UnfoldingMask@35) (state Heap@@61 UnfoldingMask@35)) (and (= (U_2_int (MapType0Select Heap@@61 this@@66 size)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@35))) (and (=> (= (ControlFlow 0 896) (- 0 897)) (HasDirectPerm UnfoldingMask@35 this@@66 Nodes)) (=> (HasDirectPerm UnfoldingMask@35 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 896) 891) anon788_Else_correct) (=> (= (ControlFlow 0 896) 893) anon789_Then_correct)) (=> (= (ControlFlow 0 896) 895) anon789_Else_correct))))))))
(let ((anon787_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 Nodes) null) (= (ControlFlow 0 899) 896)) anon161_correct)))
(let ((anon787_Then_correct  (=> (and (and (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@34)) (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) null) (= (ControlFlow 0 898) 896))) anon161_correct)))
(let ((anon159_correct  (=> (= UnfoldingMask@32 (MapType1Store Mask@0 null (heap this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heap this@@66))) FullPerm)))) (=> (and (and (and (not (= this@@66 null)) (= UnfoldingMask@33 (MapType1Store UnfoldingMask@32 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@32 this@@66 Nodes)) FullPerm))))) (and (state Heap@@61 UnfoldingMask@33) (= UnfoldingMask@34 (MapType1Store UnfoldingMask@33 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@33 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))))) (and (and (InsidePredicate (heap this@@66) (MapType0Select Heap@@61 null (heap this@@66)) (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) (state Heap@@61 UnfoldingMask@34)) (and (state Heap@@61 UnfoldingMask@34) (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 900) 898) anon787_Then_correct) (=> (= (ControlFlow 0 900) 899) anon787_Else_correct))))))
(let ((anon786_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 903) 900)) anon159_correct)))
(let ((anon786_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 901) (- 0 902)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66)))) (=> (= (ControlFlow 0 901) 900) anon159_correct))))))
(let ((anon784_Else_correct  (=> (and (|heap#trigger| Heap@@61 (heap this@@66)) (= (MapType0Select Heap@@61 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@@61 this@@66 size))))))) (and (=> (= (ControlFlow 0 904) 901) anon786_Then_correct) (=> (= (ControlFlow 0 904) 903) anon786_Else_correct)))))
(let ((anon777_Then_correct  (=> (and (not (= prevTemp@0 null)) (state ExhaleHeap@1 Mask@87)) (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 905) 904) anon784_Else_correct) (=> (= (ControlFlow 0 905) 888) anon785_Then_correct)) (=> (= (ControlFlow 0 905) 890) anon785_Else_correct)) (=> (= (ControlFlow 0 905) 884) anon783_Then_correct)) (=> (= (ControlFlow 0 905) 886) anon783_Else_correct)) (=> (= (ControlFlow 0 905) 880) anon781_Then_correct)) (=> (= (ControlFlow 0 905) 882) anon781_Else_correct)) (=> (= (ControlFlow 0 905) 876) anon779_Then_correct)) (=> (= (ControlFlow 0 905) 878) anon779_Else_correct)))))
(let ((anon777_Else_correct  (=> (and (= prevTemp@0 null) (= (ControlFlow 0 874) 873)) anon166_correct)))
(let ((anon140_correct  (=> (state ExhaleHeap@1 Mask@87) (and (=> (= (ControlFlow 0 906) 905) anon777_Then_correct) (=> (= (ControlFlow 0 906) 874) anon777_Else_correct)))))
(let ((anon775_Else_correct  (=> (and (< (segDegree ExhaleHeap@1 temp@0 minNode@0 (- (segLength ExhaleHeap@1 temp@0 minNode@0) 1)) (segDegree ExhaleHeap@1 minNode@0 null 0)) (= (ControlFlow 0 908) 906)) anon140_correct)))
(let ((anon770_Then_correct  (=> (and (not (= temp@0 minNode@0)) (state ExhaleHeap@1 Mask@87)) (and (and (and (and (and (and (=> (= (ControlFlow 0 924) 908) anon775_Else_correct) (=> (= (ControlFlow 0 924) 921) anon776_Then_correct)) (=> (= (ControlFlow 0 924) 923) anon776_Else_correct)) (=> (= (ControlFlow 0 924) 916) anon774_Then_correct)) (=> (= (ControlFlow 0 924) 918) anon774_Else_correct)) (=> (= (ControlFlow 0 924) 910) anon772_Then_correct)) (=> (= (ControlFlow 0 924) 912) anon772_Else_correct)))))
(let ((anon770_Else_correct  (=> (and (= temp@0 minNode@0) (= (ControlFlow 0 907) 906)) anon140_correct)))
(let ((anon126_correct  (=> (state ExhaleHeap@1 Mask@87) (and (=> (= (ControlFlow 0 925) 924) anon770_Then_correct) (=> (= (ControlFlow 0 925) 907) anon770_Else_correct)))))
(let ((anon768_Else_correct  (=> (and (< (treeDegree ExhaleHeap@1 prevTemp@0) (segDegree ExhaleHeap@1 minNode@0 null 0)) (= (ControlFlow 0 927) 925)) anon126_correct)))
(let ((anon765_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (= temp@0 minNode@0)) (state ExhaleHeap@1 Mask@87)) (and (and (and (and (=> (= (ControlFlow 0 937) 927) anon768_Else_correct) (=> (= (ControlFlow 0 937) 934) anon769_Then_correct)) (=> (= (ControlFlow 0 937) 936) anon769_Else_correct)) (=> (= (ControlFlow 0 937) 929) anon767_Then_correct)) (=> (= (ControlFlow 0 937) 931) anon767_Else_correct)))))
(let ((anon765_Else_correct  (=> (and (not (and (not (= prevTemp@0 null)) (= temp@0 minNode@0))) (= (ControlFlow 0 926) 925)) anon126_correct)))
(let ((anon116_correct  (=> (state ExhaleHeap@1 Mask@87) (and (=> (= (ControlFlow 0 938) 937) anon765_Then_correct) (=> (= (ControlFlow 0 938) 926) anon765_Else_correct)))))
(let ((anon763_Else_correct  (=> (and (< (treeDegree ExhaleHeap@1 prevTemp@0) (segDegree ExhaleHeap@1 temp@0 minNode@0 0)) (= (ControlFlow 0 940) 938)) anon116_correct)))
(let ((anon760_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (not (= temp@0 minNode@0))) (state ExhaleHeap@1 Mask@87)) (and (and (and (and (=> (= (ControlFlow 0 950) 940) anon763_Else_correct) (=> (= (ControlFlow 0 950) 947) anon764_Then_correct)) (=> (= (ControlFlow 0 950) 949) anon764_Else_correct)) (=> (= (ControlFlow 0 950) 942) anon762_Then_correct)) (=> (= (ControlFlow 0 950) 944) anon762_Else_correct)))))
(let ((anon760_Else_correct  (=> (and (not (and (not (= prevTemp@0 null)) (not (= temp@0 minNode@0)))) (= (ControlFlow 0 939) 938)) anon116_correct)))
(let ((anon106_correct  (=> (state ExhaleHeap@1 Mask@87) (and (=> (= (ControlFlow 0 951) 950) anon760_Then_correct) (=> (= (ControlFlow 0 951) 939) anon760_Else_correct)))))
(let ((anon758_Else_correct  (=> (and (< (segDegree ExhaleHeap@1 nodes@0 prevTemp@0 (- (segLength ExhaleHeap@1 nodes@0 prevTemp@0) 1)) (treeDegree ExhaleHeap@1 prevTemp@0)) (= (ControlFlow 0 953) 951)) anon106_correct)))
(let ((anon753_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (not (= prevTemp@0 nodes@0))) (state ExhaleHeap@1 Mask@87)) (and (and (and (and (and (and (=> (= (ControlFlow 0 968) 953) anon758_Else_correct) (=> (= (ControlFlow 0 968) 965) anon759_Then_correct)) (=> (= (ControlFlow 0 968) 967) anon759_Else_correct)) (=> (= (ControlFlow 0 968) 961) anon757_Then_correct)) (=> (= (ControlFlow 0 968) 963) anon757_Else_correct)) (=> (= (ControlFlow 0 968) 955) anon755_Then_correct)) (=> (= (ControlFlow 0 968) 957) anon755_Else_correct)))))
(let ((anon753_Else_correct  (=> (and (not (and (not (= prevTemp@0 null)) (not (= prevTemp@0 nodes@0)))) (= (ControlFlow 0 952) 951)) anon106_correct)))
(let ((anon92_correct  (=> (state ExhaleHeap@1 Mask@87) (and (=> (= (ControlFlow 0 969) 968) anon753_Then_correct) (=> (= (ControlFlow 0 969) 952) anon753_Else_correct)))))
(let ((anon752_Else_correct  (=> (= prevTemp@0 null) (=> (and (= Mask@87 Mask@84) (= (ControlFlow 0 972) 969)) anon92_correct))))
(let ((anon752_Then_correct  (=> (and (not (= prevTemp@0 null)) (= Mask@85 (MapType1Store Mask@84 null (tree prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@84 null (tree prevTemp@0))) FullPerm))))) (=> (and (and (state ExhaleHeap@1 Mask@85) (not (= prevTemp@0 null))) (and (= Mask@86 (MapType1Store Mask@85 prevTemp@0 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@85 prevTemp@0 sibling)) FullPerm)))) (state ExhaleHeap@1 Mask@86))) (and (=> (= (ControlFlow 0 970) (- 0 971)) (HasDirectPerm Mask@86 prevTemp@0 sibling)) (=> (HasDirectPerm Mask@86 prevTemp@0 sibling) (=> (= (MapType0Select ExhaleHeap@1 prevTemp@0 sibling) temp@0) (=> (and (= Mask@87 Mask@86) (= (ControlFlow 0 970) 969)) anon92_correct))))))))
(let ((anon90_correct  (=> (state ExhaleHeap@1 Mask@84) (and (=> (= (ControlFlow 0 973) 970) anon752_Then_correct) (=> (= (ControlFlow 0 973) 972) anon752_Else_correct)))))
(let ((anon750_Else_correct  (=> (sorted ExhaleHeap@1 nodes@0 prevTemp@0) (=> (and (= Mask@84 Mask@83) (= (ControlFlow 0 975) 973)) anon90_correct))))
(let ((anon749_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (= Mask@83 (MapType1Store Mask@82 null (heapseg nodes@0 prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@82 null (heapseg nodes@0 prevTemp@0))) FullPerm))))) (and (state ExhaleHeap@1 Mask@83) (state ExhaleHeap@1 Mask@83))) (and (and (=> (= (ControlFlow 0 980) 975) anon750_Else_correct) (=> (= (ControlFlow 0 980) 977) anon751_Then_correct)) (=> (= (ControlFlow 0 980) 979) anon751_Else_correct)))))
(let ((anon749_Else_correct  (=> (= prevTemp@0 null) (=> (and (= Mask@84 Mask@82) (= (ControlFlow 0 974) 973)) anon90_correct))))
(let ((anon84_correct  (=> (state ExhaleHeap@1 Mask@82) (and (=> (= (ControlFlow 0 981) 980) anon749_Then_correct) (=> (= (ControlFlow 0 981) 974) anon749_Else_correct)))))
(let ((anon748_Else_correct  (=> (and (not (= prevTemp@0 null)) (= (ControlFlow 0 983) 981)) anon84_correct)))
(let ((anon748_Then_correct  (=> (= prevTemp@0 null) (=> (and (= temp@0 nodes@0) (= (ControlFlow 0 982) 981)) anon84_correct))))
(let ((anon746_Else_correct  (=> (and (sorted ExhaleHeap@1 minNode@0 null) (state ExhaleHeap@1 Mask@82)) (and (=> (= (ControlFlow 0 984) 982) anon748_Then_correct) (=> (= (ControlFlow 0 984) 983) anon748_Else_correct)))))
(let ((anon81_correct true))
(let ((anon747_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 812) 809)) anon81_correct)))
(let ((anon747_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 810) (- 0 811)) (<= FullPerm (U_2_real (MapType1Select Mask@82 null (heapseg minNode@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@82 null (heapseg minNode@0 null)))) (=> (= (ControlFlow 0 810) 809) anon81_correct))))))
(let ((anon744_Else_correct  (=> (sorted ExhaleHeap@1 temp@0 minNode@0) (=> (and (and (state ExhaleHeap@1 Mask@15) (= Mask@82 (MapType1Store Mask@15 null (heapseg minNode@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@15 null (heapseg minNode@0 null))) FullPerm))))) (and (state ExhaleHeap@1 Mask@82) (state ExhaleHeap@1 Mask@82))) (and (and (=> (= (ControlFlow 0 985) 984) anon746_Else_correct) (=> (= (ControlFlow 0 985) 810) anon747_Then_correct)) (=> (= (ControlFlow 0 985) 812) anon747_Else_correct))))))
(let ((anon77_correct true))
(let ((anon745_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 808) 805)) anon77_correct)))
(let ((anon745_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 806) (- 0 807)) (<= FullPerm (U_2_real (MapType1Select Mask@15 null (heapseg temp@0 minNode@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@15 null (heapseg temp@0 minNode@0)))) (=> (= (ControlFlow 0 806) 805) anon77_correct))))))
(let ((anon743_Then_correct  (=> (= Mask@15 (MapType1Store Mask@14 null (heapseg temp@0 minNode@0) (real_2_U (+ (U_2_real (MapType1Select Mask@14 null (heapseg temp@0 minNode@0))) FullPerm)))) (=> (and (state ExhaleHeap@1 Mask@15) (state ExhaleHeap@1 Mask@15)) (and (and (=> (= (ControlFlow 0 986) 985) anon744_Else_correct) (=> (= (ControlFlow 0 986) 806) anon745_Then_correct)) (=> (= (ControlFlow 0 986) 808) anon745_Else_correct))))))
(let ((anon367_correct true))
(let ((anon891_Else_correct  (=> (and (= temp@0 null) (= (ControlFlow 0 565) 562)) anon367_correct)))
(let ((anon891_Then_correct  (=> (not (= temp@0 null)) (and (=> (= (ControlFlow 0 563) (- 0 564)) (= (treeParent Heap@35 temp@0) null)) (=> (= (treeParent Heap@35 temp@0) null) (=> (= (ControlFlow 0 563) 562) anon367_correct))))))
(let ((anon890_Else_correct  (=> (not (and (not (= temp@0 null)) (not (= nodes@0 temp@0)))) (and (=> (= (ControlFlow 0 568) 563) anon891_Then_correct) (=> (= (ControlFlow 0 568) 565) anon891_Else_correct)))))
(let ((anon890_Then_correct  (=> (and (not (= temp@0 null)) (not (= nodes@0 temp@0))) (and (=> (= (ControlFlow 0 566) (- 0 567)) (= (segParent Heap@35 nodes@0 temp@0) null)) (=> (= (segParent Heap@35 nodes@0 temp@0) null) (and (=> (= (ControlFlow 0 566) 563) anon891_Then_correct) (=> (= (ControlFlow 0 566) 565) anon891_Else_correct)))))))
(let ((anon889_Else_correct  (=> (= minNode@0 null) (and (=> (= (ControlFlow 0 571) 566) anon890_Then_correct) (=> (= (ControlFlow 0 571) 568) anon890_Else_correct)))))
(let ((anon889_Then_correct  (=> (not (= minNode@0 null)) (and (=> (= (ControlFlow 0 569) (- 0 570)) (= (segParent Heap@35 minNode@0 null) null)) (=> (= (segParent Heap@35 minNode@0 null) null) (and (=> (= (ControlFlow 0 569) 566) anon890_Then_correct) (=> (= (ControlFlow 0 569) 568) anon890_Else_correct)))))))
(let ((anon888_Else_correct  (=> (= temp@1 minNode@0) (and (=> (= (ControlFlow 0 574) 569) anon889_Then_correct) (=> (= (ControlFlow 0 574) 571) anon889_Else_correct)))))
(let ((anon888_Then_correct  (=> (not (= temp@1 minNode@0)) (and (=> (= (ControlFlow 0 572) (- 0 573)) (= (segParent Heap@35 temp@1 minNode@0) null)) (=> (= (segParent Heap@35 temp@1 minNode@0) null) (and (=> (= (ControlFlow 0 572) 569) anon889_Then_correct) (=> (= (ControlFlow 0 572) 571) anon889_Else_correct)))))))
(let ((anon887_Else_correct  (=> (not (= temp@0 null)) (and (=> (= (ControlFlow 0 577) 572) anon888_Then_correct) (=> (= (ControlFlow 0 577) 574) anon888_Else_correct)))))
(let ((anon887_Then_correct  (=> (= temp@0 null) (and (=> (= (ControlFlow 0 575) (- 0 576)) (= (+ (segSize Heap@35 temp@1 minNode@0) (segSize Heap@35 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (+ (segSize Heap@35 temp@1 minNode@0) (segSize Heap@35 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 575) 572) anon888_Then_correct) (=> (= (ControlFlow 0 575) 574) anon888_Else_correct)))))))
(let ((anon886_Else_correct  (=> (= temp@0 null) (and (=> (= (ControlFlow 0 580) 575) anon887_Then_correct) (=> (= (ControlFlow 0 580) 577) anon887_Else_correct)))))
(let ((anon886_Then_correct  (=> (not (= temp@0 null)) (and (=> (= (ControlFlow 0 578) (- 0 579)) (= (+ (+ (+ (segSize Heap@35 nodes@0 temp@0) (treeSize Heap@35 temp@0)) (segSize Heap@35 temp@1 minNode@0)) (segSize Heap@35 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (+ (+ (+ (segSize Heap@35 nodes@0 temp@0) (treeSize Heap@35 temp@0)) (segSize Heap@35 temp@1 minNode@0)) (segSize Heap@35 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 578) 575) anon887_Then_correct) (=> (= (ControlFlow 0 578) 577) anon887_Else_correct)))))))
(let ((anon885_Else_correct  (=> (= temp@1 minNode@0) (and (=> (= (ControlFlow 0 583) 578) anon886_Then_correct) (=> (= (ControlFlow 0 583) 580) anon886_Else_correct)))))
(let ((anon885_Then_correct  (=> (not (= temp@1 minNode@0)) (and (=> (= (ControlFlow 0 581) (- 0 582)) (< (segDegree Heap@35 temp@1 minNode@0 (- (segLength Heap@35 temp@1 minNode@0) 1)) (segDegree Heap@35 minNode@0 null 0))) (=> (< (segDegree Heap@35 temp@1 minNode@0 (- (segLength Heap@35 temp@1 minNode@0) 1)) (segDegree Heap@35 minNode@0 null 0)) (and (=> (= (ControlFlow 0 581) 578) anon886_Then_correct) (=> (= (ControlFlow 0 581) 580) anon886_Else_correct)))))))
(let ((anon884_Else_correct  (=> (not (and (not (= temp@0 null)) (= temp@1 minNode@0))) (and (=> (= (ControlFlow 0 586) 581) anon885_Then_correct) (=> (= (ControlFlow 0 586) 583) anon885_Else_correct)))))
(let ((anon884_Then_correct  (=> (and (not (= temp@0 null)) (= temp@1 minNode@0)) (and (=> (= (ControlFlow 0 584) (- 0 585)) (< (treeDegree Heap@35 temp@0) (segDegree Heap@35 minNode@0 null 0))) (=> (< (treeDegree Heap@35 temp@0) (segDegree Heap@35 minNode@0 null 0)) (and (=> (= (ControlFlow 0 584) 581) anon885_Then_correct) (=> (= (ControlFlow 0 584) 583) anon885_Else_correct)))))))
(let ((anon883_Else_correct  (=> (not (and (not (= temp@0 null)) (not (= temp@1 minNode@0)))) (and (=> (= (ControlFlow 0 589) 584) anon884_Then_correct) (=> (= (ControlFlow 0 589) 586) anon884_Else_correct)))))
(let ((anon883_Then_correct  (=> (and (not (= temp@0 null)) (not (= temp@1 minNode@0))) (and (=> (= (ControlFlow 0 587) (- 0 588)) (< (treeDegree Heap@35 temp@0) (segDegree Heap@35 temp@1 minNode@0 0))) (=> (< (treeDegree Heap@35 temp@0) (segDegree Heap@35 temp@1 minNode@0 0)) (and (=> (= (ControlFlow 0 587) 584) anon884_Then_correct) (=> (= (ControlFlow 0 587) 586) anon884_Else_correct)))))))
(let ((anon882_Else_correct  (=> (not (and (not (= temp@0 null)) (not (= temp@0 nodes@0)))) (and (=> (= (ControlFlow 0 592) 587) anon883_Then_correct) (=> (= (ControlFlow 0 592) 589) anon883_Else_correct)))))
(let ((anon882_Then_correct  (=> (and (not (= temp@0 null)) (not (= temp@0 nodes@0))) (and (=> (= (ControlFlow 0 590) (- 0 591)) (< (segDegree Heap@35 nodes@0 temp@0 (- (segLength Heap@35 nodes@0 temp@0) 1)) (treeDegree Heap@35 temp@0))) (=> (< (segDegree Heap@35 nodes@0 temp@0 (- (segLength Heap@35 nodes@0 temp@0) 1)) (treeDegree Heap@35 temp@0)) (and (=> (= (ControlFlow 0 590) 587) anon883_Then_correct) (=> (= (ControlFlow 0 590) 589) anon883_Else_correct)))))))
(let ((anon346_correct  (=> (= Mask@80 (MapType1Store Mask@79 temp@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@79 temp@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 594) (- 0 595)) (= (MapType0Select Heap@35 temp@0 sibling) temp@1)) (=> (= (MapType0Select Heap@35 temp@0 sibling) temp@1) (=> (= Mask@81 Mask@80) (and (=> (= (ControlFlow 0 594) 590) anon882_Then_correct) (=> (= (ControlFlow 0 594) 592) anon882_Else_correct))))))))
(let ((anon881_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 598) 594)) anon346_correct)))
(let ((anon881_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 596) (- 0 597)) (<= FullPerm (U_2_real (MapType1Select Mask@79 temp@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@79 temp@0 sibling))) (=> (= (ControlFlow 0 596) 594) anon346_correct))))))
(let ((anon344_correct  (=> (= Mask@79 (MapType1Store Mask@78 null (tree temp@0) (real_2_U (- (U_2_real (MapType1Select Mask@78 null (tree temp@0))) FullPerm)))) (and (=> (= (ControlFlow 0 599) 596) anon881_Then_correct) (=> (= (ControlFlow 0 599) 598) anon881_Else_correct)))))
(let ((anon880_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 602) 599)) anon344_correct)))
(let ((anon880_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 600) (- 0 601)) (<= FullPerm (U_2_real (MapType1Select Mask@78 null (tree temp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@78 null (tree temp@0)))) (=> (= (ControlFlow 0 600) 599) anon344_correct))))))
(let ((anon879_Then_correct  (=> (not (= temp@0 null)) (and (=> (= (ControlFlow 0 603) 600) anon880_Then_correct) (=> (= (ControlFlow 0 603) 602) anon880_Else_correct)))))
(let ((anon879_Else_correct  (=> (and (= temp@0 null) (= Mask@81 Mask@78)) (and (=> (= (ControlFlow 0 593) 590) anon882_Then_correct) (=> (= (ControlFlow 0 593) 592) anon882_Else_correct)))))
(let ((anon340_correct  (=> (= Mask@77 (MapType1Store Mask@76 null (heapseg nodes@0 temp@0) (real_2_U (- (U_2_real (MapType1Select Mask@76 null (heapseg nodes@0 temp@0))) FullPerm)))) (and (=> (= (ControlFlow 0 605) (- 0 606)) (sorted Heap@35 nodes@0 temp@0)) (=> (sorted Heap@35 nodes@0 temp@0) (=> (= Mask@78 Mask@77) (and (=> (= (ControlFlow 0 605) 603) anon879_Then_correct) (=> (= (ControlFlow 0 605) 593) anon879_Else_correct))))))))
(let ((anon878_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 609) 605)) anon340_correct)))
(let ((anon878_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 607) (- 0 608)) (<= FullPerm (U_2_real (MapType1Select Mask@76 null (heapseg nodes@0 temp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@76 null (heapseg nodes@0 temp@0)))) (=> (= (ControlFlow 0 607) 605) anon340_correct))))))
(let ((anon877_Then_correct  (=> (not (= temp@0 null)) (and (=> (= (ControlFlow 0 610) 607) anon878_Then_correct) (=> (= (ControlFlow 0 610) 609) anon878_Else_correct)))))
(let ((anon877_Else_correct  (=> (and (= temp@0 null) (= Mask@78 Mask@76)) (and (=> (= (ControlFlow 0 604) 603) anon879_Then_correct) (=> (= (ControlFlow 0 604) 593) anon879_Else_correct)))))
(let ((anon876_Else_correct  (=> (not (= temp@0 null)) (and (=> (= (ControlFlow 0 613) 610) anon877_Then_correct) (=> (= (ControlFlow 0 613) 604) anon877_Else_correct)))))
(let ((anon876_Then_correct  (=> (= temp@0 null) (and (=> (= (ControlFlow 0 611) (- 0 612)) (= temp@1 nodes@0)) (=> (= temp@1 nodes@0) (and (=> (= (ControlFlow 0 611) 610) anon877_Then_correct) (=> (= (ControlFlow 0 611) 604) anon877_Else_correct)))))))
(let ((anon335_correct  (=> (= Mask@76 (MapType1Store Mask@75 null (heapseg minNode@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@75 null (heapseg minNode@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 614) (- 0 615)) (sorted Heap@35 minNode@0 null)) (=> (sorted Heap@35 minNode@0 null) (and (=> (= (ControlFlow 0 614) 611) anon876_Then_correct) (=> (= (ControlFlow 0 614) 613) anon876_Else_correct)))))))
(let ((anon875_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 618) 614)) anon335_correct)))
(let ((anon875_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 616) (- 0 617)) (<= FullPerm (U_2_real (MapType1Select Mask@75 null (heapseg minNode@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@75 null (heapseg minNode@0 null)))) (=> (= (ControlFlow 0 616) 614) anon335_correct))))))
(let ((anon333_correct  (=> (= Mask@75 (MapType1Store Mask@74 null (heapseg temp@1 minNode@0) (real_2_U (- (U_2_real (MapType1Select Mask@74 null (heapseg temp@1 minNode@0))) FullPerm)))) (and (=> (= (ControlFlow 0 619) (- 0 620)) (sorted Heap@35 temp@1 minNode@0)) (=> (sorted Heap@35 temp@1 minNode@0) (and (=> (= (ControlFlow 0 619) 616) anon875_Then_correct) (=> (= (ControlFlow 0 619) 618) anon875_Else_correct)))))))
(let ((anon874_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 623) 619)) anon333_correct)))
(let ((anon874_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 621) (- 0 622)) (<= FullPerm (U_2_real (MapType1Select Mask@74 null (heapseg temp@1 minNode@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@74 null (heapseg temp@1 minNode@0)))) (=> (= (ControlFlow 0 621) 619) anon333_correct))))))
(let ((anon330_correct  (=> (and (not (= this@@66 null)) (= UnfoldingMask@31 (MapType1Store UnfoldingMask@30 this@@66 size (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@30 this@@66 size)) FullPerm))))) (=> (and (and (state Heap@@61 UnfoldingMask@31) (state Heap@@61 UnfoldingMask@31)) (and (= (U_2_int (MapType0Select Heap@@61 this@@66 size)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@31))) (and (=> (= (ControlFlow 0 625) 621) anon874_Then_correct) (=> (= (ControlFlow 0 625) 623) anon874_Else_correct))))))
(let ((anon873_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 Nodes) null) (= (ControlFlow 0 627) 625)) anon330_correct)))
(let ((anon873_Then_correct  (=> (and (and (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@30)) (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) null) (= (ControlFlow 0 626) 625))) anon330_correct)))
(let ((anon328_correct  (=> (= UnfoldingMask@28 (MapType1Store Mask@0 null (heap this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heap this@@66))) FullPerm)))) (=> (and (and (and (not (= this@@66 null)) (= UnfoldingMask@29 (MapType1Store UnfoldingMask@28 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@28 this@@66 Nodes)) FullPerm))))) (and (state Heap@@61 UnfoldingMask@29) (= UnfoldingMask@30 (MapType1Store UnfoldingMask@29 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@29 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))))) (and (and (InsidePredicate (heap this@@66) (MapType0Select Heap@@61 null (heap this@@66)) (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) (state Heap@@61 UnfoldingMask@30)) (and (state Heap@@61 UnfoldingMask@30) (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 628) 626) anon873_Then_correct) (=> (= (ControlFlow 0 628) 627) anon873_Else_correct))))))
(let ((anon872_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 631) 628)) anon328_correct)))
(let ((anon872_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 629) (- 0 630)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66)))) (=> (= (ControlFlow 0 629) 628) anon328_correct))))))
(let ((anon871_Then_correct  (=> (= temp@0 null) (=> (and (|heap#trigger| Heap@@61 (heap this@@66)) (= (MapType0Select Heap@@61 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@@61 this@@66 size))))))) (and (=> (= (ControlFlow 0 632) 629) anon872_Then_correct) (=> (= (ControlFlow 0 632) 631) anon872_Else_correct))))))
(let ((anon871_Else_correct  (=> (not (= temp@0 null)) (and (=> (= (ControlFlow 0 624) 621) anon874_Then_correct) (=> (= (ControlFlow 0 624) 623) anon874_Else_correct)))))
(let ((anon324_correct  (=> (and (not (= this@@66 null)) (= UnfoldingMask@27 (MapType1Store UnfoldingMask@26 this@@66 size (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@26 this@@66 size)) FullPerm))))) (=> (and (and (state Heap@@61 UnfoldingMask@27) (state Heap@@61 UnfoldingMask@27)) (and (= (U_2_int (MapType0Select Heap@@61 this@@66 size)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@27))) (and (=> (= (ControlFlow 0 634) 632) anon871_Then_correct) (=> (= (ControlFlow 0 634) 624) anon871_Else_correct))))))
(let ((anon870_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 Nodes) null) (= (ControlFlow 0 636) 634)) anon324_correct)))
(let ((anon870_Then_correct  (=> (and (and (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@26)) (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) null) (= (ControlFlow 0 635) 634))) anon324_correct)))
(let ((anon322_correct  (=> (= UnfoldingMask@24 (MapType1Store Mask@0 null (heap this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heap this@@66))) FullPerm)))) (=> (and (and (and (not (= this@@66 null)) (= UnfoldingMask@25 (MapType1Store UnfoldingMask@24 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@24 this@@66 Nodes)) FullPerm))))) (and (state Heap@@61 UnfoldingMask@25) (= UnfoldingMask@26 (MapType1Store UnfoldingMask@25 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@25 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))))) (and (and (InsidePredicate (heap this@@66) (MapType0Select Heap@@61 null (heap this@@66)) (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) (state Heap@@61 UnfoldingMask@26)) (and (state Heap@@61 UnfoldingMask@26) (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 637) 635) anon870_Then_correct) (=> (= (ControlFlow 0 637) 636) anon870_Else_correct))))))
(let ((anon869_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 640) 637)) anon322_correct)))
(let ((anon869_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 638) (- 0 639)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66)))) (=> (= (ControlFlow 0 638) 637) anon322_correct))))))
(let ((anon868_Then_correct  (=> (not (= temp@0 null)) (=> (and (|heap#trigger| Heap@@61 (heap this@@66)) (= (MapType0Select Heap@@61 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@@61 this@@66 size))))))) (and (=> (= (ControlFlow 0 641) 638) anon869_Then_correct) (=> (= (ControlFlow 0 641) 640) anon869_Else_correct))))))
(let ((anon868_Else_correct  (=> (= temp@0 null) (and (=> (= (ControlFlow 0 633) 632) anon871_Then_correct) (=> (= (ControlFlow 0 633) 624) anon871_Else_correct)))))
(let ((anon319_correct  (=> (and (state Heap@35 Mask@74) (state Heap@35 Mask@74)) (and (=> (= (ControlFlow 0 642) (- 0 643)) (HasDirectPerm Mask@74 temp@0 sibling)) (=> (HasDirectPerm Mask@74 temp@0 sibling) (=> (and (= temp@1 (MapType0Select Heap@35 temp@0 sibling)) (state Heap@35 Mask@74)) (and (=> (= (ControlFlow 0 642) 641) anon868_Then_correct) (=> (= (ControlFlow 0 642) 633) anon868_Else_correct))))))))
(let ((anon269_correct  (=> (state Heap@34 Mask@73) (=> (and (and (state Heap@34 Mask@73) (= Heap@35 Heap@34)) (and (= Mask@74 Mask@73) (= (ControlFlow 0 723) 642))) anon319_correct))))
(let ((anon842_Else_correct  (=> (= nodes@0 temp@0) (=> (and (= Heap@34 Heap@30) (= (ControlFlow 0 725) 723)) anon269_correct))))
(let ((anon842_Then_correct  (=> (and (and (and (not (= nodes@0 temp@0)) (forall ((o_125 T@U) (f_129 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_129))))
(let ((A@@12 (FieldTypeInv0 (type f_129))))
 (=> (and (and (= (type o_125) RefType) (= (type f_129) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@30 null (|heapseg#sm| nodes@0 temp@0)) o_125 f_129)) (U_2_bool (MapType1Select (MapType0Select Heap@30 null (|tree#sm| nodes@0)) o_125 f_129)))) (U_2_bool (MapType1Select newPMask@6 o_125 f_129)))))
 :qid |stdinbpl.17766:49|
 :skolemid |235|
 :pattern ( (MapType1Select newPMask@6 o_125 f_129))
))) (and (= Heap@31 (MapType0Store Heap@30 null (|heapseg#sm| nodes@0 temp@0) newPMask@6)) (= Heap@32 (MapType0Store Heap@31 null (|heapseg#sm| nodes@0 temp@0) (MapType1Store (MapType0Select Heap@31 null (|heapseg#sm| nodes@0 temp@0)) nodes@0 sibling (bool_2_U true)))))) (and (and (forall ((o_126 T@U) (f_130 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_130))))
(let ((A@@13 (FieldTypeInv0 (type f_130))))
 (=> (and (and (= (type o_126) RefType) (= (type f_130) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@32 null (|heapseg#sm| nodes@0 temp@0)) o_126 f_130)) (U_2_bool (MapType1Select (MapType0Select Heap@32 null (|heapseg#sm| (MapType0Select Heap@32 nodes@0 sibling) temp@0)) o_126 f_130)))) (U_2_bool (MapType1Select newPMask@7 o_126 f_130)))))
 :qid |stdinbpl.17773:49|
 :skolemid |236|
 :pattern ( (MapType1Select newPMask@7 o_126 f_130))
)) (= Heap@33 (MapType0Store Heap@32 null (|heapseg#sm| nodes@0 temp@0) newPMask@7))) (and (= Heap@34 Heap@33) (= (ControlFlow 0 724) 723)))) anon269_correct)))
(let ((anon841_Else_correct  (=> (and (HasDirectPerm Mask@73 null (heapseg nodes@0 temp@0)) (= Heap@30 Heap@13)) (and (=> (= (ControlFlow 0 727) 724) anon842_Then_correct) (=> (= (ControlFlow 0 727) 725) anon842_Else_correct)))))
(let ((anon841_Then_correct  (=> (and (and (not (HasDirectPerm Mask@73 null (heapseg nodes@0 temp@0))) (= Heap@28 (MapType0Store Heap@13 null (|heapseg#sm| nodes@0 temp@0) ZeroPMask))) (and (= Heap@29 (MapType0Store Heap@28 null (heapseg nodes@0 temp@0) freshVersion@3)) (= Heap@30 Heap@29))) (and (=> (= (ControlFlow 0 726) 724) anon842_Then_correct) (=> (= (ControlFlow 0 726) 725) anon842_Else_correct)))))
(let ((anon265_correct  (=> (= Mask@73 (MapType1Store Mask@72 null (heapseg nodes@0 temp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@72 null (heapseg nodes@0 temp@0))) FullPerm)))) (=> (and (and (state Heap@13 Mask@73) (state Heap@13 Mask@73)) (and (|heapseg#trigger| Heap@13 (heapseg nodes@0 temp@0)) (= (MapType0Select Heap@13 null (heapseg nodes@0 temp@0)) (FrameFragment (ite (not (= nodes@0 temp@0)) (CombineFrames (MapType0Select Heap@13 null (tree nodes@0)) (CombineFrames (FrameFragment (MapType0Select Heap@13 nodes@0 sibling)) (CombineFrames (MapType0Select Heap@13 null (heapseg (MapType0Select Heap@13 nodes@0 sibling) temp@0)) (FrameFragment (ite (not (= (MapType0Select Heap@13 nodes@0 sibling) temp@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 728) 726) anon841_Then_correct) (=> (= (ControlFlow 0 728) 727) anon841_Else_correct))))))
(let ((anon840_Else_correct  (=> (= (MapType0Select Heap@13 nodes@0 sibling) temp@0) (=> (and (= Mask@72 Mask@71) (= (ControlFlow 0 732) 728)) anon265_correct))))
(let ((anon840_Then_correct  (=> (not (= (MapType0Select Heap@13 nodes@0 sibling) temp@0)) (and (=> (= (ControlFlow 0 730) (- 0 731)) (= (treeParent Heap@13 nodes@0) (segParent Heap@13 (MapType0Select Heap@13 nodes@0 sibling) temp@0))) (=> (= (treeParent Heap@13 nodes@0) (segParent Heap@13 (MapType0Select Heap@13 nodes@0 sibling) temp@0)) (=> (and (= Mask@72 Mask@71) (= (ControlFlow 0 730) 728)) anon265_correct))))))
(let ((anon263_correct  (=> (and (= Mask@71 (MapType1Store Mask@70 null (heapseg (MapType0Select Heap@13 nodes@0 sibling) temp@0) (real_2_U (- (U_2_real (MapType1Select Mask@70 null (heapseg (MapType0Select Heap@13 nodes@0 sibling) temp@0))) FullPerm)))) (InsidePredicate (heapseg nodes@0 temp@0) (MapType0Select Heap@13 null (heapseg nodes@0 temp@0)) (heapseg (MapType0Select Heap@13 nodes@0 sibling) temp@0) (MapType0Select Heap@13 null (heapseg (MapType0Select Heap@13 nodes@0 sibling) temp@0)))) (and (=> (= (ControlFlow 0 733) 730) anon840_Then_correct) (=> (= (ControlFlow 0 733) 732) anon840_Else_correct)))))
(let ((anon839_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 736) 733)) anon263_correct)))
(let ((anon839_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 734) (- 0 735)) (<= FullPerm (U_2_real (MapType1Select Mask@70 null (heapseg (MapType0Select Heap@13 nodes@0 sibling) temp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@70 null (heapseg (MapType0Select Heap@13 nodes@0 sibling) temp@0)))) (=> (= (ControlFlow 0 734) 733) anon263_correct))))))
(let ((anon261_correct  (=> (= Mask@70 (MapType1Store Mask@69 nodes@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@69 nodes@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 737) 734) anon839_Then_correct) (=> (= (ControlFlow 0 737) 736) anon839_Else_correct)))))
(let ((anon838_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 740) 737)) anon261_correct)))
(let ((anon838_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 738) (- 0 739)) (<= FullPerm (U_2_real (MapType1Select Mask@69 nodes@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 nodes@0 sibling))) (=> (= (ControlFlow 0 738) 737) anon261_correct))))))
(let ((anon259_correct  (=> (and (= Mask@69 (MapType1Store Mask@51 null (tree nodes@0) (real_2_U (- (U_2_real (MapType1Select Mask@51 null (tree nodes@0))) FullPerm)))) (InsidePredicate (heapseg nodes@0 temp@0) (MapType0Select Heap@13 null (heapseg nodes@0 temp@0)) (tree nodes@0) (MapType0Select Heap@13 null (tree nodes@0)))) (and (=> (= (ControlFlow 0 741) 738) anon838_Then_correct) (=> (= (ControlFlow 0 741) 740) anon838_Else_correct)))))
(let ((anon837_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 744) 741)) anon259_correct)))
(let ((anon837_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 742) (- 0 743)) (<= FullPerm (U_2_real (MapType1Select Mask@51 null (tree nodes@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@51 null (tree nodes@0)))) (=> (= (ControlFlow 0 742) 741) anon259_correct))))))
(let ((anon836_Then_correct  (=> (not (= nodes@0 temp@0)) (and (=> (= (ControlFlow 0 745) 742) anon837_Then_correct) (=> (= (ControlFlow 0 745) 744) anon837_Else_correct)))))
(let ((anon836_Else_correct  (=> (= nodes@0 temp@0) (=> (and (= Mask@72 Mask@51) (= (ControlFlow 0 729) 728)) anon265_correct))))
(let ((anon835_Then_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 746) 745) anon836_Then_correct) (=> (= (ControlFlow 0 746) 729) anon836_Else_correct)))))
(let ((anon318_correct  (=> (state ExhaleHeap@3 Mask@68) (=> (and (and (state ExhaleHeap@3 Mask@68) (= Heap@35 ExhaleHeap@3)) (and (= Mask@74 Mask@68) (= (ControlFlow 0 644) 642))) anon319_correct))))
(let ((anon867_Else_correct  (=> (and (= prevTemp@0 temp@0) (= (ControlFlow 0 646) 644)) anon318_correct)))
(let ((anon867_Then_correct  (=> (and (and (not (= prevTemp@0 temp@0)) (state ExhaleHeap@3 Mask@68)) (and (= (segParent ExhaleHeap@3 nodes@0 temp@0) (segParent Heap@27 prevTemp@0 temp@0)) (= (ControlFlow 0 645) 644))) anon318_correct)))
(let ((anon866_Else_correct  (=> (= nodes@0 prevTemp@0) (and (=> (= (ControlFlow 0 648) 645) anon867_Then_correct) (=> (= (ControlFlow 0 648) 646) anon867_Else_correct)))))
(let ((anon866_Then_correct  (=> (not (= nodes@0 prevTemp@0)) (=> (and (state ExhaleHeap@3 Mask@68) (= (segParent ExhaleHeap@3 nodes@0 temp@0) (segParent Heap@27 nodes@0 prevTemp@0))) (and (=> (= (ControlFlow 0 647) 645) anon867_Then_correct) (=> (= (ControlFlow 0 647) 646) anon867_Else_correct))))))
(let ((anon314_correct  (=> (and (state ExhaleHeap@3 Mask@68) (= (segSize ExhaleHeap@3 nodes@0 temp@0) (+ (segSize Heap@27 nodes@0 prevTemp@0) (segSize Heap@27 prevTemp@0 temp@0)))) (and (=> (= (ControlFlow 0 649) 647) anon866_Then_correct) (=> (= (ControlFlow 0 649) 648) anon866_Else_correct)))))
(let ((anon865_Else_correct  (=> (and (not (and (validChildren Heap@27 nodes@0 prevTemp@0) (and (validChildren Heap@27 prevTemp@0 temp@0) (=> (and (< 0 (segLength Heap@27 nodes@0 prevTemp@0)) (< 0 (segLength Heap@27 prevTemp@0 temp@0))) (= (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (+ (segDegree Heap@27 prevTemp@0 temp@0 0) 1)))))) (= (ControlFlow 0 651) 649)) anon314_correct)))
(let ((anon865_Then_correct  (=> (and (and (and (validChildren Heap@27 nodes@0 prevTemp@0) (and (validChildren Heap@27 prevTemp@0 temp@0) (=> (and (< 0 (segLength Heap@27 nodes@0 prevTemp@0)) (< 0 (segLength Heap@27 prevTemp@0 temp@0))) (= (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (+ (segDegree Heap@27 prevTemp@0 temp@0 0) 1))))) (state ExhaleHeap@3 Mask@68)) (and (validChildren ExhaleHeap@3 nodes@0 temp@0) (= (ControlFlow 0 650) 649))) anon314_correct)))
(let ((anon864_Else_correct  (=> (not (and (presorted Heap@27 nodes@0 prevTemp@0) (and (presorted Heap@27 prevTemp@0 temp@0) (=> (and (< 0 (segLength Heap@27 nodes@0 prevTemp@0)) (< 0 (segLength Heap@27 prevTemp@0 temp@0))) (and (<= (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (segDegree Heap@27 prevTemp@0 temp@0 0)) (and (=> (and (<= 2 (segLength Heap@27 nodes@0 prevTemp@0)) (= (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 2)))) (< (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (segDegree Heap@27 prevTemp@0 temp@0 0))) (=> (and (<= 2 (segLength Heap@27 prevTemp@0 temp@0)) (= (segDegree Heap@27 prevTemp@0 temp@0 0) (segDegree Heap@27 prevTemp@0 temp@0 1))) (< (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (segDegree Heap@27 prevTemp@0 temp@0 0))))))))) (and (=> (= (ControlFlow 0 653) 650) anon865_Then_correct) (=> (= (ControlFlow 0 653) 651) anon865_Else_correct)))))
(let ((anon864_Then_correct  (=> (and (and (presorted Heap@27 nodes@0 prevTemp@0) (and (presorted Heap@27 prevTemp@0 temp@0) (=> (and (< 0 (segLength Heap@27 nodes@0 prevTemp@0)) (< 0 (segLength Heap@27 prevTemp@0 temp@0))) (and (<= (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (segDegree Heap@27 prevTemp@0 temp@0 0)) (and (=> (and (<= 2 (segLength Heap@27 nodes@0 prevTemp@0)) (= (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 2)))) (< (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (segDegree Heap@27 prevTemp@0 temp@0 0))) (=> (and (<= 2 (segLength Heap@27 prevTemp@0 temp@0)) (= (segDegree Heap@27 prevTemp@0 temp@0 0) (segDegree Heap@27 prevTemp@0 temp@0 1))) (< (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (segDegree Heap@27 prevTemp@0 temp@0 0)))))))) (and (state ExhaleHeap@3 Mask@68) (presorted ExhaleHeap@3 nodes@0 temp@0))) (and (=> (= (ControlFlow 0 652) 650) anon865_Then_correct) (=> (= (ControlFlow 0 652) 651) anon865_Else_correct)))))
(let ((anon863_Else_correct  (=> (not (and (sorted Heap@27 nodes@0 prevTemp@0) (and (sorted Heap@27 prevTemp@0 temp@0) (=> (and (< 0 (segLength Heap@27 nodes@0 prevTemp@0)) (< 0 (segLength Heap@27 prevTemp@0 temp@0))) (< (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (segDegree Heap@27 prevTemp@0 temp@0 0)))))) (and (=> (= (ControlFlow 0 655) 652) anon864_Then_correct) (=> (= (ControlFlow 0 655) 653) anon864_Else_correct)))))
(let ((anon863_Then_correct  (=> (and (and (sorted Heap@27 nodes@0 prevTemp@0) (and (sorted Heap@27 prevTemp@0 temp@0) (=> (and (< 0 (segLength Heap@27 nodes@0 prevTemp@0)) (< 0 (segLength Heap@27 prevTemp@0 temp@0))) (< (segDegree Heap@27 nodes@0 prevTemp@0 (- (segLength Heap@27 nodes@0 prevTemp@0) 1)) (segDegree Heap@27 prevTemp@0 temp@0 0))))) (and (state ExhaleHeap@3 Mask@68) (sorted ExhaleHeap@3 nodes@0 temp@0))) (and (=> (= (ControlFlow 0 654) 652) anon864_Then_correct) (=> (= (ControlFlow 0 654) 653) anon864_Else_correct)))))
(let ((anon862_Else_correct  (=> (and (= temp@0 null) (= Mask@68 Mask@66)) (and (=> (= (ControlFlow 0 657) 654) anon863_Then_correct) (=> (= (ControlFlow 0 657) 655) anon863_Else_correct)))))
(let ((anon862_Then_correct  (=> (and (not (= temp@0 null)) (= Mask@67 (MapType1Store Mask@66 null (tree temp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@66 null (tree temp@0))) FullPerm))))) (=> (and (and (and (state ExhaleHeap@3 Mask@67) (state ExhaleHeap@3 Mask@67)) (and (= (treeDegree ExhaleHeap@3 temp@0) (treeDegree Heap@27 temp@0)) (state ExhaleHeap@3 Mask@67))) (and (and (= (treeSize ExhaleHeap@3 temp@0) (treeSize Heap@27 temp@0)) (state ExhaleHeap@3 Mask@67)) (and (= (treeParent ExhaleHeap@3 temp@0) (treeParent Heap@27 temp@0)) (= Mask@68 Mask@67)))) (and (=> (= (ControlFlow 0 656) 654) anon863_Then_correct) (=> (= (ControlFlow 0 656) 655) anon863_Else_correct))))))
(let ((anon306_correct  (=> (IdenticalOnKnownLocations Heap@27 ExhaleHeap@3 Mask@65) (=> (and (and (and (= Mask@66 (MapType1Store Mask@65 null (heapseg nodes@0 temp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@65 null (heapseg nodes@0 temp@0))) FullPerm)))) (state ExhaleHeap@3 Mask@66)) (and (state ExhaleHeap@3 Mask@66) (= (segLength ExhaleHeap@3 nodes@0 temp@0) (+ (segLength Heap@27 nodes@0 prevTemp@0) (segLength Heap@27 prevTemp@0 temp@0))))) (and (and (state ExhaleHeap@3 Mask@66) (forall ((i_5 Int) ) (!  (=> (and (<= 0 i_5) (< i_5 (segLength Heap@27 nodes@0 prevTemp@0))) (= (segDegree ExhaleHeap@3 nodes@0 temp@0 i_5) (segDegree Heap@27 nodes@0 prevTemp@0 i_5)))
 :qid |stdinbpl.17950:42|
 :skolemid |241|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@3 null (heapseg nodes@0 temp@0)) nodes@0 temp@0 i_5))
 :pattern ( (|segDegree#frame| (MapType0Select Heap@27 null (heapseg nodes@0 prevTemp@0)) nodes@0 prevTemp@0 i_5))
))) (and (state ExhaleHeap@3 Mask@66) (forall ((i_1 Int) ) (!  (=> (and (<= (segLength Heap@27 nodes@0 prevTemp@0) i_1) (< i_1 (segLength ExhaleHeap@3 nodes@0 temp@0))) (= (segDegree ExhaleHeap@3 nodes@0 temp@0 i_1) (segDegree Heap@27 prevTemp@0 temp@0 (- i_1 (segLength Heap@27 nodes@0 prevTemp@0)))))
 :qid |stdinbpl.17955:42|
 :skolemid |242|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@3 null (heapseg nodes@0 temp@0)) nodes@0 temp@0 i_1))
))))) (and (=> (= (ControlFlow 0 658) 656) anon862_Then_correct) (=> (= (ControlFlow 0 658) 657) anon862_Else_correct))))))
(let ((anon861_Else_correct  (=> (and (not (and (not (= nodes@0 prevTemp@0)) (not (= prevTemp@0 temp@0)))) (= (ControlFlow 0 661) 658)) anon306_correct)))
(let ((anon861_Then_correct  (=> (and (not (= nodes@0 prevTemp@0)) (not (= prevTemp@0 temp@0))) (and (=> (= (ControlFlow 0 659) (- 0 660)) (= (segParent Heap@27 nodes@0 prevTemp@0) (segParent Heap@27 prevTemp@0 temp@0))) (=> (= (segParent Heap@27 nodes@0 prevTemp@0) (segParent Heap@27 prevTemp@0 temp@0)) (=> (= (ControlFlow 0 659) 658) anon306_correct))))))
(let ((anon303_correct  (=> (and (= Mask@64 (MapType1Store Mask@63 null (tree temp@0) (real_2_U (- (U_2_real (MapType1Select Mask@63 null (tree temp@0))) FullPerm)))) (= Mask@65 Mask@64)) (and (=> (= (ControlFlow 0 663) 659) anon861_Then_correct) (=> (= (ControlFlow 0 663) 661) anon861_Else_correct)))))
(let ((anon860_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 666) 663)) anon303_correct)))
(let ((anon860_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 664) (- 0 665)) (<= FullPerm (U_2_real (MapType1Select Mask@63 null (tree temp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@63 null (tree temp@0)))) (=> (= (ControlFlow 0 664) 663) anon303_correct))))))
(let ((anon859_Then_correct  (=> (not (= temp@0 null)) (and (=> (= (ControlFlow 0 667) 664) anon860_Then_correct) (=> (= (ControlFlow 0 667) 666) anon860_Else_correct)))))
(let ((anon859_Else_correct  (=> (and (= temp@0 null) (= Mask@65 Mask@63)) (and (=> (= (ControlFlow 0 662) 659) anon861_Then_correct) (=> (= (ControlFlow 0 662) 661) anon861_Else_correct)))))
(let ((anon300_correct  (=> (= Mask@63 (MapType1Store Mask@62 null (heapseg prevTemp@0 temp@0) (real_2_U (- (U_2_real (MapType1Select Mask@62 null (heapseg prevTemp@0 temp@0))) FullPerm)))) (and (=> (= (ControlFlow 0 668) 667) anon859_Then_correct) (=> (= (ControlFlow 0 668) 662) anon859_Else_correct)))))
(let ((anon858_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 671) 668)) anon300_correct)))
(let ((anon858_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 669) (- 0 670)) (<= FullPerm (U_2_real (MapType1Select Mask@62 null (heapseg prevTemp@0 temp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@62 null (heapseg prevTemp@0 temp@0)))) (=> (= (ControlFlow 0 669) 668) anon300_correct))))))
(let ((anon298_correct  (=> (= Mask@62 (MapType1Store Mask@61 null (heapseg nodes@0 prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@61 null (heapseg nodes@0 prevTemp@0))) FullPerm)))) (and (=> (= (ControlFlow 0 672) 669) anon858_Then_correct) (=> (= (ControlFlow 0 672) 671) anon858_Else_correct)))))
(let ((anon857_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 675) 672)) anon298_correct)))
(let ((anon857_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 673) (- 0 674)) (<= FullPerm (U_2_real (MapType1Select Mask@61 null (heapseg nodes@0 prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@61 null (heapseg nodes@0 prevTemp@0)))) (=> (= (ControlFlow 0 673) 672) anon298_correct))))))
(let ((anon296_correct  (=> (and (state Heap@27 Mask@61) (state Heap@27 Mask@61)) (and (=> (= (ControlFlow 0 676) 673) anon857_Then_correct) (=> (= (ControlFlow 0 676) 675) anon857_Else_correct)))))
(let ((anon856_Else_correct  (=> (= prevTemp@0 temp@0) (=> (and (= Heap@27 Heap@23) (= (ControlFlow 0 678) 676)) anon296_correct))))
(let ((anon856_Then_correct  (=> (and (and (and (not (= prevTemp@0 temp@0)) (forall ((o_129 T@U) (f_133 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_133))))
(let ((A@@14 (FieldTypeInv0 (type f_133))))
 (=> (and (and (= (type o_129) RefType) (= (type f_133) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|heapseg#sm| prevTemp@0 temp@0)) o_129 f_133)) (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|tree#sm| prevTemp@0)) o_129 f_133)))) (U_2_bool (MapType1Select newPMask@4 o_129 f_133)))))
 :qid |stdinbpl.17891:49|
 :skolemid |239|
 :pattern ( (MapType1Select newPMask@4 o_129 f_133))
))) (and (= Heap@24 (MapType0Store Heap@23 null (|heapseg#sm| prevTemp@0 temp@0) newPMask@4)) (= Heap@25 (MapType0Store Heap@24 null (|heapseg#sm| prevTemp@0 temp@0) (MapType1Store (MapType0Select Heap@24 null (|heapseg#sm| prevTemp@0 temp@0)) prevTemp@0 sibling (bool_2_U true)))))) (and (and (forall ((o_130 T@U) (f_134 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_134))))
(let ((A@@15 (FieldTypeInv0 (type f_134))))
 (=> (and (and (= (type o_130) RefType) (= (type f_134) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select Heap@25 null (|heapseg#sm| prevTemp@0 temp@0)) o_130 f_134)) (U_2_bool (MapType1Select (MapType0Select Heap@25 null (|heapseg#sm| (MapType0Select Heap@25 prevTemp@0 sibling) temp@0)) o_130 f_134)))) (U_2_bool (MapType1Select newPMask@5 o_130 f_134)))))
 :qid |stdinbpl.17898:49|
 :skolemid |240|
 :pattern ( (MapType1Select newPMask@5 o_130 f_134))
)) (= Heap@26 (MapType0Store Heap@25 null (|heapseg#sm| prevTemp@0 temp@0) newPMask@5))) (and (= Heap@27 Heap@26) (= (ControlFlow 0 677) 676)))) anon296_correct)))
(let ((anon855_Else_correct  (=> (and (HasDirectPerm Mask@61 null (heapseg prevTemp@0 temp@0)) (= Heap@23 Heap@20)) (and (=> (= (ControlFlow 0 680) 677) anon856_Then_correct) (=> (= (ControlFlow 0 680) 678) anon856_Else_correct)))))
(let ((anon855_Then_correct  (=> (and (and (not (HasDirectPerm Mask@61 null (heapseg prevTemp@0 temp@0))) (= Heap@21 (MapType0Store Heap@20 null (|heapseg#sm| prevTemp@0 temp@0) ZeroPMask))) (and (= Heap@22 (MapType0Store Heap@21 null (heapseg prevTemp@0 temp@0) freshVersion@2)) (= Heap@23 Heap@22))) (and (=> (= (ControlFlow 0 679) 677) anon856_Then_correct) (=> (= (ControlFlow 0 679) 678) anon856_Else_correct)))))
(let ((anon292_correct  (=> (= Mask@61 (MapType1Store Mask@60 null (heapseg prevTemp@0 temp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@60 null (heapseg prevTemp@0 temp@0))) FullPerm)))) (=> (and (and (state Heap@20 Mask@61) (state Heap@20 Mask@61)) (and (|heapseg#trigger| Heap@20 (heapseg prevTemp@0 temp@0)) (= (MapType0Select Heap@20 null (heapseg prevTemp@0 temp@0)) (FrameFragment (ite (not (= prevTemp@0 temp@0)) (CombineFrames (MapType0Select Heap@20 null (tree prevTemp@0)) (CombineFrames (FrameFragment (MapType0Select Heap@20 prevTemp@0 sibling)) (CombineFrames (MapType0Select Heap@20 null (heapseg (MapType0Select Heap@20 prevTemp@0 sibling) temp@0)) (FrameFragment (ite (not (= (MapType0Select Heap@20 prevTemp@0 sibling) temp@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 681) 679) anon855_Then_correct) (=> (= (ControlFlow 0 681) 680) anon855_Else_correct))))))
(let ((anon854_Else_correct  (=> (= (MapType0Select Heap@20 prevTemp@0 sibling) temp@0) (=> (and (= Mask@60 Mask@59) (= (ControlFlow 0 685) 681)) anon292_correct))))
(let ((anon854_Then_correct  (=> (not (= (MapType0Select Heap@20 prevTemp@0 sibling) temp@0)) (and (=> (= (ControlFlow 0 683) (- 0 684)) (= (treeParent Heap@20 prevTemp@0) (segParent Heap@20 (MapType0Select Heap@20 prevTemp@0 sibling) temp@0))) (=> (= (treeParent Heap@20 prevTemp@0) (segParent Heap@20 (MapType0Select Heap@20 prevTemp@0 sibling) temp@0)) (=> (and (= Mask@60 Mask@59) (= (ControlFlow 0 683) 681)) anon292_correct))))))
(let ((anon290_correct  (=> (and (= Mask@59 (MapType1Store Mask@58 null (heapseg (MapType0Select Heap@20 prevTemp@0 sibling) temp@0) (real_2_U (- (U_2_real (MapType1Select Mask@58 null (heapseg (MapType0Select Heap@20 prevTemp@0 sibling) temp@0))) FullPerm)))) (InsidePredicate (heapseg prevTemp@0 temp@0) (MapType0Select Heap@20 null (heapseg prevTemp@0 temp@0)) (heapseg (MapType0Select Heap@20 prevTemp@0 sibling) temp@0) (MapType0Select Heap@20 null (heapseg (MapType0Select Heap@20 prevTemp@0 sibling) temp@0)))) (and (=> (= (ControlFlow 0 686) 683) anon854_Then_correct) (=> (= (ControlFlow 0 686) 685) anon854_Else_correct)))))
(let ((anon853_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 689) 686)) anon290_correct)))
(let ((anon853_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 687) (- 0 688)) (<= FullPerm (U_2_real (MapType1Select Mask@58 null (heapseg (MapType0Select Heap@20 prevTemp@0 sibling) temp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@58 null (heapseg (MapType0Select Heap@20 prevTemp@0 sibling) temp@0)))) (=> (= (ControlFlow 0 687) 686) anon290_correct))))))
(let ((anon288_correct  (=> (= Mask@58 (MapType1Store Mask@57 prevTemp@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@57 prevTemp@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 690) 687) anon853_Then_correct) (=> (= (ControlFlow 0 690) 689) anon853_Else_correct)))))
(let ((anon852_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 693) 690)) anon288_correct)))
(let ((anon852_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 691) (- 0 692)) (<= FullPerm (U_2_real (MapType1Select Mask@57 prevTemp@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@57 prevTemp@0 sibling))) (=> (= (ControlFlow 0 691) 690) anon288_correct))))))
(let ((anon286_correct  (=> (and (= Mask@57 (MapType1Store Mask@56 null (tree prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@56 null (tree prevTemp@0))) FullPerm)))) (InsidePredicate (heapseg prevTemp@0 temp@0) (MapType0Select Heap@20 null (heapseg prevTemp@0 temp@0)) (tree prevTemp@0) (MapType0Select Heap@20 null (tree prevTemp@0)))) (and (=> (= (ControlFlow 0 694) 691) anon852_Then_correct) (=> (= (ControlFlow 0 694) 693) anon852_Else_correct)))))
(let ((anon851_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 697) 694)) anon286_correct)))
(let ((anon851_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 695) (- 0 696)) (<= FullPerm (U_2_real (MapType1Select Mask@56 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@56 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 695) 694) anon286_correct))))))
(let ((anon850_Then_correct  (=> (not (= prevTemp@0 temp@0)) (and (=> (= (ControlFlow 0 698) 695) anon851_Then_correct) (=> (= (ControlFlow 0 698) 697) anon851_Else_correct)))))
(let ((anon850_Else_correct  (=> (= prevTemp@0 temp@0) (=> (and (= Mask@60 Mask@56) (= (ControlFlow 0 682) 681)) anon292_correct))))
(let ((anon283_correct  (=> (and (state Heap@20 Mask@56) (state Heap@20 Mask@56)) (and (=> (= (ControlFlow 0 699) 698) anon850_Then_correct) (=> (= (ControlFlow 0 699) 682) anon850_Else_correct)))))
(let ((anon849_Else_correct  (=> (= temp@0 temp@0) (=> (and (= Heap@20 Heap@16) (= (ControlFlow 0 701) 699)) anon283_correct))))
(let ((anon849_Then_correct  (=> (and (and (and (not (= temp@0 temp@0)) (forall ((o_127 T@U) (f_131 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_131))))
(let ((A@@16 (FieldTypeInv0 (type f_131))))
 (=> (and (and (= (type o_127) RefType) (= (type f_131) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select Heap@16 null (|heapseg#sm| temp@0 temp@0)) o_127 f_131)) (U_2_bool (MapType1Select (MapType0Select Heap@16 null (|tree#sm| temp@0)) o_127 f_131)))) (U_2_bool (MapType1Select newPMask@2 o_127 f_131)))))
 :qid |stdinbpl.17829:49|
 :skolemid |237|
 :pattern ( (MapType1Select newPMask@2 o_127 f_131))
))) (and (= Heap@17 (MapType0Store Heap@16 null (|heapseg#sm| temp@0 temp@0) newPMask@2)) (= Heap@18 (MapType0Store Heap@17 null (|heapseg#sm| temp@0 temp@0) (MapType1Store (MapType0Select Heap@17 null (|heapseg#sm| temp@0 temp@0)) temp@0 sibling (bool_2_U true)))))) (and (and (forall ((o_128 T@U) (f_132 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_132))))
(let ((A@@17 (FieldTypeInv0 (type f_132))))
 (=> (and (and (= (type o_128) RefType) (= (type f_132) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select Heap@18 null (|heapseg#sm| temp@0 temp@0)) o_128 f_132)) (U_2_bool (MapType1Select (MapType0Select Heap@18 null (|heapseg#sm| (MapType0Select Heap@18 temp@0 sibling) temp@0)) o_128 f_132)))) (U_2_bool (MapType1Select newPMask@3 o_128 f_132)))))
 :qid |stdinbpl.17836:49|
 :skolemid |238|
 :pattern ( (MapType1Select newPMask@3 o_128 f_132))
)) (= Heap@19 (MapType0Store Heap@18 null (|heapseg#sm| temp@0 temp@0) newPMask@3))) (and (= Heap@20 Heap@19) (= (ControlFlow 0 700) 699)))) anon283_correct)))
(let ((anon848_Else_correct  (=> (and (HasDirectPerm Mask@56 null (heapseg temp@0 temp@0)) (= Heap@16 Heap@13)) (and (=> (= (ControlFlow 0 703) 700) anon849_Then_correct) (=> (= (ControlFlow 0 703) 701) anon849_Else_correct)))))
(let ((anon848_Then_correct  (=> (and (and (not (HasDirectPerm Mask@56 null (heapseg temp@0 temp@0))) (= Heap@14 (MapType0Store Heap@13 null (|heapseg#sm| temp@0 temp@0) ZeroPMask))) (and (= Heap@15 (MapType0Store Heap@14 null (heapseg temp@0 temp@0) freshVersion@1)) (= Heap@16 Heap@15))) (and (=> (= (ControlFlow 0 702) 700) anon849_Then_correct) (=> (= (ControlFlow 0 702) 701) anon849_Else_correct)))))
(let ((anon279_correct  (=> (= Mask@56 (MapType1Store Mask@55 null (heapseg temp@0 temp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@55 null (heapseg temp@0 temp@0))) FullPerm)))) (=> (and (and (state Heap@13 Mask@56) (state Heap@13 Mask@56)) (and (|heapseg#trigger| Heap@13 (heapseg temp@0 temp@0)) (= (MapType0Select Heap@13 null (heapseg temp@0 temp@0)) (FrameFragment (ite (not (= temp@0 temp@0)) (CombineFrames (MapType0Select Heap@13 null (tree temp@0)) (CombineFrames (FrameFragment (MapType0Select Heap@13 temp@0 sibling)) (CombineFrames (MapType0Select Heap@13 null (heapseg (MapType0Select Heap@13 temp@0 sibling) temp@0)) (FrameFragment (ite (not (= (MapType0Select Heap@13 temp@0 sibling) temp@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 704) 702) anon848_Then_correct) (=> (= (ControlFlow 0 704) 703) anon848_Else_correct))))))
(let ((anon847_Else_correct  (=> (= (MapType0Select Heap@13 temp@0 sibling) temp@0) (=> (and (= Mask@55 Mask@54) (= (ControlFlow 0 708) 704)) anon279_correct))))
(let ((anon847_Then_correct  (=> (not (= (MapType0Select Heap@13 temp@0 sibling) temp@0)) (and (=> (= (ControlFlow 0 706) (- 0 707)) (= (treeParent Heap@13 temp@0) (segParent Heap@13 (MapType0Select Heap@13 temp@0 sibling) temp@0))) (=> (= (treeParent Heap@13 temp@0) (segParent Heap@13 (MapType0Select Heap@13 temp@0 sibling) temp@0)) (=> (and (= Mask@55 Mask@54) (= (ControlFlow 0 706) 704)) anon279_correct))))))
(let ((anon277_correct  (=> (and (= Mask@54 (MapType1Store Mask@53 null (heapseg (MapType0Select Heap@13 temp@0 sibling) temp@0) (real_2_U (- (U_2_real (MapType1Select Mask@53 null (heapseg (MapType0Select Heap@13 temp@0 sibling) temp@0))) FullPerm)))) (InsidePredicate (heapseg temp@0 temp@0) (MapType0Select Heap@13 null (heapseg temp@0 temp@0)) (heapseg (MapType0Select Heap@13 temp@0 sibling) temp@0) (MapType0Select Heap@13 null (heapseg (MapType0Select Heap@13 temp@0 sibling) temp@0)))) (and (=> (= (ControlFlow 0 709) 706) anon847_Then_correct) (=> (= (ControlFlow 0 709) 708) anon847_Else_correct)))))
(let ((anon846_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 712) 709)) anon277_correct)))
(let ((anon846_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 710) (- 0 711)) (<= FullPerm (U_2_real (MapType1Select Mask@53 null (heapseg (MapType0Select Heap@13 temp@0 sibling) temp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@53 null (heapseg (MapType0Select Heap@13 temp@0 sibling) temp@0)))) (=> (= (ControlFlow 0 710) 709) anon277_correct))))))
(let ((anon275_correct  (=> (= Mask@53 (MapType1Store Mask@52 temp@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@52 temp@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 713) 710) anon846_Then_correct) (=> (= (ControlFlow 0 713) 712) anon846_Else_correct)))))
(let ((anon845_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 716) 713)) anon275_correct)))
(let ((anon845_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 714) (- 0 715)) (<= FullPerm (U_2_real (MapType1Select Mask@52 temp@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@52 temp@0 sibling))) (=> (= (ControlFlow 0 714) 713) anon275_correct))))))
(let ((anon273_correct  (=> (and (= Mask@52 (MapType1Store Mask@51 null (tree temp@0) (real_2_U (- (U_2_real (MapType1Select Mask@51 null (tree temp@0))) FullPerm)))) (InsidePredicate (heapseg temp@0 temp@0) (MapType0Select Heap@13 null (heapseg temp@0 temp@0)) (tree temp@0) (MapType0Select Heap@13 null (tree temp@0)))) (and (=> (= (ControlFlow 0 717) 714) anon845_Then_correct) (=> (= (ControlFlow 0 717) 716) anon845_Else_correct)))))
(let ((anon844_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 720) 717)) anon273_correct)))
(let ((anon844_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 718) (- 0 719)) (<= FullPerm (U_2_real (MapType1Select Mask@51 null (tree temp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@51 null (tree temp@0)))) (=> (= (ControlFlow 0 718) 717) anon273_correct))))))
(let ((anon843_Then_correct  (=> (not (= temp@0 temp@0)) (and (=> (= (ControlFlow 0 721) 718) anon844_Then_correct) (=> (= (ControlFlow 0 721) 720) anon844_Else_correct)))))
(let ((anon843_Else_correct  (=> (= temp@0 temp@0) (=> (and (= Mask@55 Mask@51) (= (ControlFlow 0 705) 704)) anon279_correct))))
(let ((anon835_Else_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 722) 721) anon843_Then_correct) (=> (= (ControlFlow 0 722) 705) anon843_Else_correct)))))
(let ((anon255_correct  (=> (and (state Heap@13 Mask@51) (state Heap@13 Mask@51)) (and (=> (= (ControlFlow 0 747) 746) anon835_Then_correct) (=> (= (ControlFlow 0 747) 722) anon835_Else_correct)))))
(let ((anon834_Else_correct  (=> (= (MapType0Select Heap@13 temp@0 sibling) minNode@0) (=> (and (= Mask@51 Mask@50) (= (ControlFlow 0 750) 747)) anon255_correct))))
(let ((anon834_Then_correct  (=> (not (= (MapType0Select Heap@13 temp@0 sibling) minNode@0)) (=> (and (and (state Heap@13 Mask@50) (= (treeParent Heap@13 temp@0) (segParent Heap@13 (MapType0Select Heap@13 temp@0 sibling) minNode@0))) (and (= Mask@51 Mask@50) (= (ControlFlow 0 749) 747))) anon255_correct))))
(let ((anon833_Then_correct  (=> (and (not (= temp@0 minNode@0)) (= Mask@48 (MapType1Store Mask@47 null (tree temp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@47 null (tree temp@0))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg temp@0 minNode@0) (MapType0Select Heap@13 null (heapseg temp@0 minNode@0)) (tree temp@0) (MapType0Select Heap@13 null (tree temp@0))) (state Heap@13 Mask@48)) (and (not (= temp@0 null)) (= Mask@49 (MapType1Store Mask@48 temp@0 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@48 temp@0 sibling)) FullPerm)))))) (and (and (state Heap@13 Mask@49) (= Mask@50 (MapType1Store Mask@49 null (heapseg (MapType0Select Heap@13 temp@0 sibling) minNode@0) (real_2_U (+ (U_2_real (MapType1Select Mask@49 null (heapseg (MapType0Select Heap@13 temp@0 sibling) minNode@0))) FullPerm))))) (and (InsidePredicate (heapseg temp@0 minNode@0) (MapType0Select Heap@13 null (heapseg temp@0 minNode@0)) (heapseg (MapType0Select Heap@13 temp@0 sibling) minNode@0) (MapType0Select Heap@13 null (heapseg (MapType0Select Heap@13 temp@0 sibling) minNode@0))) (state Heap@13 Mask@50)))) (and (=> (= (ControlFlow 0 751) 749) anon834_Then_correct) (=> (= (ControlFlow 0 751) 750) anon834_Else_correct))))))
(let ((anon833_Else_correct  (=> (= temp@0 minNode@0) (=> (and (= Mask@51 Mask@47) (= (ControlFlow 0 748) 747)) anon255_correct))))
(let ((anon832_Else_correct  (=> (and (HasDirectPerm Mask@47 null (heapseg temp@0 minNode@0)) (= Heap@13 ExhaleHeap@1)) (and (=> (= (ControlFlow 0 753) 751) anon833_Then_correct) (=> (= (ControlFlow 0 753) 748) anon833_Else_correct)))))
(let ((anon832_Then_correct  (=> (not (HasDirectPerm Mask@47 null (heapseg temp@0 minNode@0))) (=> (and (= Heap@12 (MapType0Store ExhaleHeap@1 null (heapseg temp@0 minNode@0) newVersion@2)) (= Heap@13 Heap@12)) (and (=> (= (ControlFlow 0 752) 751) anon833_Then_correct) (=> (= (ControlFlow 0 752) 748) anon833_Else_correct))))))
(let ((anon250_correct  (=> (= Mask@47 (MapType1Store Mask@46 null (heapseg temp@0 minNode@0) (real_2_U (- (U_2_real (MapType1Select Mask@46 null (heapseg temp@0 minNode@0))) FullPerm)))) (and (=> (= (ControlFlow 0 754) 752) anon832_Then_correct) (=> (= (ControlFlow 0 754) 753) anon832_Else_correct)))))
(let ((anon831_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 757) 754)) anon250_correct)))
(let ((anon831_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 755) (- 0 756)) (<= FullPerm (U_2_real (MapType1Select Mask@46 null (heapseg temp@0 minNode@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@46 null (heapseg temp@0 minNode@0)))) (=> (= (ControlFlow 0 755) 754) anon250_correct))))))
(let ((anon248_correct  (=> (and (and (not (= temp@0 minNode@0)) (state ExhaleHeap@1 Mask@46)) (and (|heapseg#trigger| ExhaleHeap@1 (heapseg temp@0 minNode@0)) (= (MapType0Select ExhaleHeap@1 null (heapseg temp@0 minNode@0)) (FrameFragment (ite (not (= temp@0 minNode@0)) (CombineFrames (MapType0Select ExhaleHeap@1 null (tree temp@0)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 temp@0 sibling)) (CombineFrames (MapType0Select ExhaleHeap@1 null (heapseg (MapType0Select ExhaleHeap@1 temp@0 sibling) minNode@0)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@1 temp@0 sibling) minNode@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 758) 755) anon831_Then_correct) (=> (= (ControlFlow 0 758) 757) anon831_Else_correct)))))
(let ((anon247_correct  (=> (not (= this@@66 null)) (=> (and (= UnfoldingMask@23 (MapType1Store UnfoldingMask@22 this@@66 size (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@22 this@@66 size)) FullPerm)))) (state Heap@@61 UnfoldingMask@23)) (=> (and (and (state Heap@@61 UnfoldingMask@23) (= (U_2_int (MapType0Select Heap@@61 this@@66 size)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (state Heap@@61 UnfoldingMask@23) (= (ControlFlow 0 760) 758))) anon248_correct)))))
(let ((anon830_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 Nodes) null) (= (ControlFlow 0 762) 760)) anon247_correct)))
(let ((anon830_Then_correct  (=> (and (and (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@22)) (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) null) (= (ControlFlow 0 761) 760))) anon247_correct)))
(let ((anon245_correct  (=> (= UnfoldingMask@20 (MapType1Store Mask@0 null (heap this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heap this@@66))) FullPerm)))) (=> (and (and (and (not (= this@@66 null)) (= UnfoldingMask@21 (MapType1Store UnfoldingMask@20 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@20 this@@66 Nodes)) FullPerm))))) (and (state Heap@@61 UnfoldingMask@21) (= UnfoldingMask@22 (MapType1Store UnfoldingMask@21 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@21 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))))) (and (and (InsidePredicate (heap this@@66) (MapType0Select Heap@@61 null (heap this@@66)) (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) (state Heap@@61 UnfoldingMask@22)) (and (state Heap@@61 UnfoldingMask@22) (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 763) 761) anon830_Then_correct) (=> (= (ControlFlow 0 763) 762) anon830_Else_correct))))))
(let ((anon829_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 766) 763)) anon245_correct)))
(let ((anon829_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 764) (- 0 765)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66)))) (=> (= (ControlFlow 0 764) 763) anon245_correct))))))
(let ((anon828_Then_correct  (=> (= prevTemp@0 null) (=> (and (|heap#trigger| Heap@@61 (heap this@@66)) (= (MapType0Select Heap@@61 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@@61 this@@66 size))))))) (and (=> (= (ControlFlow 0 767) 764) anon829_Then_correct) (=> (= (ControlFlow 0 767) 766) anon829_Else_correct))))))
(let ((anon828_Else_correct  (=> (and (not (= prevTemp@0 null)) (= (ControlFlow 0 759) 758)) anon248_correct)))
(let ((anon241_correct  (=> (and (not (= this@@66 null)) (= UnfoldingMask@19 (MapType1Store UnfoldingMask@18 this@@66 size (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@18 this@@66 size)) FullPerm))))) (=> (and (and (state Heap@@61 UnfoldingMask@19) (state Heap@@61 UnfoldingMask@19)) (and (= (U_2_int (MapType0Select Heap@@61 this@@66 size)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@19))) (and (=> (= (ControlFlow 0 769) 767) anon828_Then_correct) (=> (= (ControlFlow 0 769) 759) anon828_Else_correct))))))
(let ((anon827_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 Nodes) null) (= (ControlFlow 0 771) 769)) anon241_correct)))
(let ((anon827_Then_correct  (=> (and (and (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@18)) (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) null) (= (ControlFlow 0 770) 769))) anon241_correct)))
(let ((anon239_correct  (=> (= UnfoldingMask@16 (MapType1Store Mask@0 null (heap this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heap this@@66))) FullPerm)))) (=> (and (and (and (not (= this@@66 null)) (= UnfoldingMask@17 (MapType1Store UnfoldingMask@16 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@16 this@@66 Nodes)) FullPerm))))) (and (state Heap@@61 UnfoldingMask@17) (= UnfoldingMask@18 (MapType1Store UnfoldingMask@17 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@17 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))))) (and (and (InsidePredicate (heap this@@66) (MapType0Select Heap@@61 null (heap this@@66)) (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) (state Heap@@61 UnfoldingMask@18)) (and (state Heap@@61 UnfoldingMask@18) (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 772) 770) anon827_Then_correct) (=> (= (ControlFlow 0 772) 771) anon827_Else_correct))))))
(let ((anon826_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 775) 772)) anon239_correct)))
(let ((anon826_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 773) (- 0 774)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66)))) (=> (= (ControlFlow 0 773) 772) anon239_correct))))))
(let ((anon825_Then_correct  (=> (not (= prevTemp@0 null)) (=> (and (|heap#trigger| Heap@@61 (heap this@@66)) (= (MapType0Select Heap@@61 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@@61 this@@66 size))))))) (and (=> (= (ControlFlow 0 776) 773) anon826_Then_correct) (=> (= (ControlFlow 0 776) 775) anon826_Else_correct))))))
(let ((anon825_Else_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 768) 767) anon828_Then_correct) (=> (= (ControlFlow 0 768) 759) anon828_Else_correct)))))
(let ((anon236_correct  (=> (state ExhaleHeap@1 Mask@46) (and (=> (= (ControlFlow 0 777) 776) anon825_Then_correct) (=> (= (ControlFlow 0 777) 768) anon825_Else_correct)))))
(let ((anon824_Else_correct  (=> (and (= prevTemp@0 null) (= (ControlFlow 0 779) 777)) anon236_correct)))
(let ((anon824_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (state ExhaleHeap@1 Mask@46)) (and (= (treeParent ExhaleHeap@1 prevTemp@0) null) (= (ControlFlow 0 778) 777))) anon236_correct)))
(let ((anon823_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (not (= nodes@0 prevTemp@0)))) (and (=> (= (ControlFlow 0 781) 778) anon824_Then_correct) (=> (= (ControlFlow 0 781) 779) anon824_Else_correct)))))
(let ((anon823_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (not (= nodes@0 prevTemp@0))) (and (state ExhaleHeap@1 Mask@46) (= (segParent ExhaleHeap@1 nodes@0 prevTemp@0) null))) (and (=> (= (ControlFlow 0 780) 778) anon824_Then_correct) (=> (= (ControlFlow 0 780) 779) anon824_Else_correct)))))
(let ((anon822_Else_correct  (=> (= minNode@0 null) (and (=> (= (ControlFlow 0 783) 780) anon823_Then_correct) (=> (= (ControlFlow 0 783) 781) anon823_Else_correct)))))
(let ((anon822_Then_correct  (=> (not (= minNode@0 null)) (=> (and (state ExhaleHeap@1 Mask@46) (= (segParent ExhaleHeap@1 minNode@0 null) null)) (and (=> (= (ControlFlow 0 782) 780) anon823_Then_correct) (=> (= (ControlFlow 0 782) 781) anon823_Else_correct))))))
(let ((anon821_Else_correct  (=> (= temp@0 minNode@0) (and (=> (= (ControlFlow 0 785) 782) anon822_Then_correct) (=> (= (ControlFlow 0 785) 783) anon822_Else_correct)))))
(let ((anon821_Then_correct  (=> (not (= temp@0 minNode@0)) (=> (and (state ExhaleHeap@1 Mask@46) (= (segParent ExhaleHeap@1 temp@0 minNode@0) null)) (and (=> (= (ControlFlow 0 784) 782) anon822_Then_correct) (=> (= (ControlFlow 0 784) 783) anon822_Else_correct))))))
(let ((anon820_Else_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 787) 784) anon821_Then_correct) (=> (= (ControlFlow 0 787) 785) anon821_Else_correct)))))
(let ((anon820_Then_correct  (=> (= prevTemp@0 null) (=> (and (state ExhaleHeap@1 Mask@46) (= (+ (segSize ExhaleHeap@1 temp@0 minNode@0) (segSize ExhaleHeap@1 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 786) 784) anon821_Then_correct) (=> (= (ControlFlow 0 786) 785) anon821_Else_correct))))))
(let ((anon819_Else_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 789) 786) anon820_Then_correct) (=> (= (ControlFlow 0 789) 787) anon820_Else_correct)))))
(let ((anon819_Then_correct  (=> (not (= prevTemp@0 null)) (=> (and (state ExhaleHeap@1 Mask@46) (= (+ (+ (+ (segSize ExhaleHeap@1 nodes@0 prevTemp@0) (treeSize ExhaleHeap@1 prevTemp@0)) (segSize ExhaleHeap@1 temp@0 minNode@0)) (segSize ExhaleHeap@1 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 788) 786) anon820_Then_correct) (=> (= (ControlFlow 0 788) 787) anon820_Else_correct))))))
(let ((anon818_Else_correct  (=> (= temp@0 minNode@0) (and (=> (= (ControlFlow 0 791) 788) anon819_Then_correct) (=> (= (ControlFlow 0 791) 789) anon819_Else_correct)))))
(let ((anon818_Then_correct  (=> (not (= temp@0 minNode@0)) (=> (and (state ExhaleHeap@1 Mask@46) (< (segDegree ExhaleHeap@1 temp@0 minNode@0 (- (segLength ExhaleHeap@1 temp@0 minNode@0) 1)) (segDegree ExhaleHeap@1 minNode@0 null 0))) (and (=> (= (ControlFlow 0 790) 788) anon819_Then_correct) (=> (= (ControlFlow 0 790) 789) anon819_Else_correct))))))
(let ((anon817_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (= temp@0 minNode@0))) (and (=> (= (ControlFlow 0 793) 790) anon818_Then_correct) (=> (= (ControlFlow 0 793) 791) anon818_Else_correct)))))
(let ((anon817_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (= temp@0 minNode@0)) (and (state ExhaleHeap@1 Mask@46) (< (treeDegree ExhaleHeap@1 prevTemp@0) (segDegree ExhaleHeap@1 minNode@0 null 0)))) (and (=> (= (ControlFlow 0 792) 790) anon818_Then_correct) (=> (= (ControlFlow 0 792) 791) anon818_Else_correct)))))
(let ((anon816_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (not (= temp@0 minNode@0)))) (and (=> (= (ControlFlow 0 795) 792) anon817_Then_correct) (=> (= (ControlFlow 0 795) 793) anon817_Else_correct)))))
(let ((anon816_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (not (= temp@0 minNode@0))) (and (state ExhaleHeap@1 Mask@46) (< (treeDegree ExhaleHeap@1 prevTemp@0) (segDegree ExhaleHeap@1 temp@0 minNode@0 0)))) (and (=> (= (ControlFlow 0 794) 792) anon817_Then_correct) (=> (= (ControlFlow 0 794) 793) anon817_Else_correct)))))
(let ((anon815_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (not (= prevTemp@0 nodes@0)))) (and (=> (= (ControlFlow 0 797) 794) anon816_Then_correct) (=> (= (ControlFlow 0 797) 795) anon816_Else_correct)))))
(let ((anon815_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (not (= prevTemp@0 nodes@0))) (and (state ExhaleHeap@1 Mask@46) (< (segDegree ExhaleHeap@1 nodes@0 prevTemp@0 (- (segLength ExhaleHeap@1 nodes@0 prevTemp@0) 1)) (treeDegree ExhaleHeap@1 prevTemp@0)))) (and (=> (= (ControlFlow 0 796) 794) anon816_Then_correct) (=> (= (ControlFlow 0 796) 795) anon816_Else_correct)))))
(let ((anon814_Else_correct  (=> (and (= prevTemp@0 null) (= Mask@46 Mask@43)) (and (=> (= (ControlFlow 0 799) 796) anon815_Then_correct) (=> (= (ControlFlow 0 799) 797) anon815_Else_correct)))))
(let ((anon814_Then_correct  (=> (and (and (and (not (= prevTemp@0 null)) (= Mask@44 (MapType1Store Mask@43 null (tree prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@43 null (tree prevTemp@0))) FullPerm))))) (and (state ExhaleHeap@1 Mask@44) (not (= prevTemp@0 null)))) (and (and (= Mask@45 (MapType1Store Mask@44 prevTemp@0 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@44 prevTemp@0 sibling)) FullPerm)))) (state ExhaleHeap@1 Mask@45)) (and (= (MapType0Select ExhaleHeap@1 prevTemp@0 sibling) temp@0) (= Mask@46 Mask@45)))) (and (=> (= (ControlFlow 0 798) 796) anon815_Then_correct) (=> (= (ControlFlow 0 798) 797) anon815_Else_correct)))))
(let ((anon813_Else_correct  (=> (and (= prevTemp@0 null) (= Mask@43 Mask@17)) (and (=> (= (ControlFlow 0 801) 798) anon814_Then_correct) (=> (= (ControlFlow 0 801) 799) anon814_Else_correct)))))
(let ((anon813_Then_correct  (=> (and (not (= prevTemp@0 null)) (= Mask@42 (MapType1Store Mask@17 null (heapseg nodes@0 prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@17 null (heapseg nodes@0 prevTemp@0))) FullPerm))))) (=> (and (and (state ExhaleHeap@1 Mask@42) (state ExhaleHeap@1 Mask@42)) (and (sorted ExhaleHeap@1 nodes@0 prevTemp@0) (= Mask@43 Mask@42))) (and (=> (= (ControlFlow 0 800) 798) anon814_Then_correct) (=> (= (ControlFlow 0 800) 799) anon814_Else_correct))))))
(let ((anon812_Else_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 803) 800) anon813_Then_correct) (=> (= (ControlFlow 0 803) 801) anon813_Else_correct)))))
(let ((anon812_Then_correct  (=> (and (= prevTemp@0 null) (= temp@0 nodes@0)) (and (=> (= (ControlFlow 0 802) 800) anon813_Then_correct) (=> (= (ControlFlow 0 802) 801) anon813_Else_correct)))))
(let ((anon811_Then_correct  (=> (state ExhaleHeap@1 ZeroMask) (=> (and (and (and (= Mask@16 (MapType1Store ZeroMask null (heapseg temp@0 minNode@0) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (heapseg temp@0 minNode@0))) FullPerm)))) (state ExhaleHeap@1 Mask@16)) (and (state ExhaleHeap@1 Mask@16) (sorted ExhaleHeap@1 temp@0 minNode@0))) (and (and (= Mask@17 (MapType1Store Mask@16 null (heapseg minNode@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@16 null (heapseg minNode@0 null))) FullPerm)))) (state ExhaleHeap@1 Mask@17)) (and (state ExhaleHeap@1 Mask@17) (sorted ExhaleHeap@1 minNode@0 null)))) (and (=> (= (ControlFlow 0 804) 802) anon812_Then_correct) (=> (= (ControlFlow 0 804) 803) anon812_Else_correct))))))
(let ((anon499_correct true))
(let ((anon959_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 385) 382)) anon499_correct)))
(let ((anon959_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 383) (- 0 384)) (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@4 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@4 null)))) (=> (= (ControlFlow 0 383) 382) anon499_correct))))))
(let ((anon512_correct  (=> (and (= Mask@210 (MapType1Store Mask@131 null (heapseg temp@4 null) (real_2_U (- (U_2_real (MapType1Select Mask@131 null (heapseg temp@4 null))) FullPerm)))) (= (ControlFlow 0 376) (- 0 375))) (< 0 (segLength ExhaleHeap@30 temp@4 null)))))
(let ((anon966_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 379) 376)) anon512_correct)))
(let ((anon966_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 377) (- 0 378)) (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@4 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@4 null)))) (=> (= (ControlFlow 0 377) 376) anon512_correct))))))
(let ((anon508_correct  (=> (= Mask@211 (MapType1Store Mask@131 null (heapseg temp@3 temp@4) (real_2_U (- (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4))) FullPerm)))) (and (=> (= (ControlFlow 0 370) (- 0 371)) (<= 0 (- (segLength ExhaleHeap@30 temp@3 temp@4) 1))) (=> (<= 0 (- (segLength ExhaleHeap@30 temp@3 temp@4) 1)) (=> (= (ControlFlow 0 370) (- 0 369)) (< (- (segLength ExhaleHeap@30 temp@3 temp@4) 1) (segLength ExhaleHeap@30 temp@3 temp@4))))))))
(let ((anon964_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 374) 370)) anon508_correct)))
(let ((anon964_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 372) (- 0 373)) (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4)))) (=> (= (ControlFlow 0 372) 370) anon508_correct))))))
(let ((anon504_correct true))
(let ((anon962_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 368) 365)) anon504_correct)))
(let ((anon962_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 366) (- 0 367)) (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4)))) (=> (= (ControlFlow 0 366) 365) anon504_correct))))))
(let ((anon518_correct  (=> (and (= Mask@209 (MapType1Store Mask@131 null (heapseg temp@3 temp@4) (real_2_U (- (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4))) FullPerm)))) (= (ControlFlow 0 357) (- 0 356))) (not (= temp@3 temp@4)))))
(let ((anon969_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 360) 357)) anon518_correct)))
(let ((anon969_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 358) (- 0 359)) (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4)))) (=> (= (ControlFlow 0 358) 357) anon518_correct))))))
(let ((anon527_correct true))
(let ((anon973_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 352) 349)) anon527_correct)))
(let ((anon973_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 350) (- 0 351)) (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@4 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@4 null)))) (=> (= (ControlFlow 0 350) 349) anon527_correct))))))
(let ((anon523_correct true))
(let ((anon971_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 348) 345)) anon523_correct)))
(let ((anon971_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 346) (- 0 347)) (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4)))) (=> (= (ControlFlow 0 346) 345) anon523_correct))))))
(let ((anon972_Else_correct true))
(let ((anon520_correct  (=> (and (state ExhaleHeap@30 Mask@131) (state ExhaleHeap@30 Mask@131)) (and (and (and (and (=> (= (ControlFlow 0 353) 344) anon972_Else_correct) (=> (= (ControlFlow 0 353) 350) anon973_Then_correct)) (=> (= (ControlFlow 0 353) 352) anon973_Else_correct)) (=> (= (ControlFlow 0 353) 346) anon971_Then_correct)) (=> (= (ControlFlow 0 353) 348) anon971_Else_correct)))))
(let ((anon968_Else_correct  (=> (and (= (segParent ExhaleHeap@30 temp@3 temp@4) null) (= (ControlFlow 0 355) 353)) anon520_correct)))
(let ((anon967_Then_correct  (=> (and (not (= temp@3 temp@4)) (state ExhaleHeap@30 Mask@131)) (and (and (=> (= (ControlFlow 0 361) 355) anon968_Else_correct) (=> (= (ControlFlow 0 361) 358) anon969_Then_correct)) (=> (= (ControlFlow 0 361) 360) anon969_Else_correct)))))
(let ((anon967_Else_correct  (=> (and (= temp@3 temp@4) (= (ControlFlow 0 354) 353)) anon520_correct)))
(let ((anon514_correct  (=> (state ExhaleHeap@30 Mask@131) (and (=> (= (ControlFlow 0 362) 361) anon967_Then_correct) (=> (= (ControlFlow 0 362) 354) anon967_Else_correct)))))
(let ((anon965_Else_correct  (=> (and (= (segDegree ExhaleHeap@30 temp@3 temp@4 (- (segLength ExhaleHeap@30 temp@3 temp@4) 1)) (+ (segDegree ExhaleHeap@30 temp@4 null 0) 1)) (= (ControlFlow 0 364) 362)) anon514_correct)))
(let ((anon960_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@30 temp@3 temp@4)) (< 0 (segLength ExhaleHeap@30 temp@4 null))) (state ExhaleHeap@30 Mask@131)) (and (and (and (and (and (and (=> (= (ControlFlow 0 380) 364) anon965_Else_correct) (=> (= (ControlFlow 0 380) 377) anon966_Then_correct)) (=> (= (ControlFlow 0 380) 379) anon966_Else_correct)) (=> (= (ControlFlow 0 380) 372) anon964_Then_correct)) (=> (= (ControlFlow 0 380) 374) anon964_Else_correct)) (=> (= (ControlFlow 0 380) 366) anon962_Then_correct)) (=> (= (ControlFlow 0 380) 368) anon962_Else_correct)))))
(let ((anon960_Else_correct  (=> (and (not (and (< 0 (segLength ExhaleHeap@30 temp@3 temp@4)) (< 0 (segLength ExhaleHeap@30 temp@4 null)))) (= (ControlFlow 0 363) 362)) anon514_correct)))
(let ((anon957_Then_correct  (=> (< 0 (segLength ExhaleHeap@30 temp@3 temp@4)) (and (and (and (=> (= (ControlFlow 0 386) 380) anon960_Then_correct) (=> (= (ControlFlow 0 386) 363) anon960_Else_correct)) (=> (= (ControlFlow 0 386) 383) anon959_Then_correct)) (=> (= (ControlFlow 0 386) 385) anon959_Else_correct)))))
(let ((anon957_Else_correct  (=> (<= (segLength ExhaleHeap@30 temp@3 temp@4) 0) (and (=> (= (ControlFlow 0 381) 380) anon960_Then_correct) (=> (= (ControlFlow 0 381) 363) anon960_Else_correct)))))
(let ((anon494_correct true))
(let ((anon956_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 343) 340)) anon494_correct)))
(let ((anon956_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 341) (- 0 342)) (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4)))) (=> (= (ControlFlow 0 341) 340) anon494_correct))))))
(let ((anon953_Else_correct  (=> (and (validChildren ExhaleHeap@30 temp@4 null) (state ExhaleHeap@30 Mask@131)) (and (and (and (=> (= (ControlFlow 0 387) 386) anon957_Then_correct) (=> (= (ControlFlow 0 387) 381) anon957_Else_correct)) (=> (= (ControlFlow 0 387) 341) anon956_Then_correct)) (=> (= (ControlFlow 0 387) 343) anon956_Else_correct)))))
(let ((anon490_correct true))
(let ((anon954_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 339) 336)) anon490_correct)))
(let ((anon954_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 337) (- 0 338)) (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@4 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@4 null)))) (=> (= (ControlFlow 0 337) 336) anon490_correct))))))
(let ((anon951_Else_correct  (=> (validChildren ExhaleHeap@30 temp@3 temp@4) (=> (and (state ExhaleHeap@30 Mask@131) (state ExhaleHeap@30 Mask@131)) (and (and (=> (= (ControlFlow 0 388) 387) anon953_Else_correct) (=> (= (ControlFlow 0 388) 337) anon954_Then_correct)) (=> (= (ControlFlow 0 388) 339) anon954_Else_correct))))))
(let ((anon486_correct true))
(let ((anon952_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 335) 332)) anon486_correct)))
(let ((anon952_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 333) (- 0 334)) (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 null (heapseg temp@3 temp@4)))) (=> (= (ControlFlow 0 333) 332) anon486_correct))))))
(let ((anon950_Then_correct  (=> (= Mask@130 (MapType1Store Mask@129 null (heapseg temp@3 temp@4) (real_2_U (+ (U_2_real (MapType1Select Mask@129 null (heapseg temp@3 temp@4))) FullPerm)))) (=> (and (state ExhaleHeap@30 Mask@130) (state ExhaleHeap@30 Mask@130)) (=> (and (and (= Mask@131 (MapType1Store Mask@130 null (heapseg temp@4 null) (real_2_U (+ (U_2_real (MapType1Select Mask@130 null (heapseg temp@4 null))) FullPerm)))) (state ExhaleHeap@30 Mask@131)) (and (state ExhaleHeap@30 Mask@131) (state ExhaleHeap@30 Mask@131))) (and (and (=> (= (ControlFlow 0 389) 388) anon951_Else_correct) (=> (= (ControlFlow 0 389) 333) anon952_Then_correct)) (=> (= (ControlFlow 0 389) 335) anon952_Else_correct)))))))
(let ((anon641_correct  (=> (= (ControlFlow 0 137) (- 0 136)) (= (+ (segSize Heap@106 temp@3 temp@5) (segSize Heap@106 temp@5 null)) (- oldTreeSize@0 1)))))
(let ((anon1032_Else_correct  (=> (and (= temp@3 temp@5) (= (ControlFlow 0 140) 137)) anon641_correct)))
(let ((anon1032_Then_correct  (=> (not (= temp@3 temp@5)) (and (=> (= (ControlFlow 0 138) (- 0 139)) (= (segParent Heap@106 temp@3 temp@5) null)) (=> (= (segParent Heap@106 temp@3 temp@5) null) (=> (= (ControlFlow 0 138) 137) anon641_correct))))))
(let ((anon1031_Else_correct  (=> (not (and (< 0 (segLength Heap@106 temp@3 temp@5)) (< 0 (segLength Heap@106 temp@5 null)))) (and (=> (= (ControlFlow 0 143) 138) anon1032_Then_correct) (=> (= (ControlFlow 0 143) 140) anon1032_Else_correct)))))
(let ((anon1031_Then_correct  (=> (and (< 0 (segLength Heap@106 temp@3 temp@5)) (< 0 (segLength Heap@106 temp@5 null))) (and (=> (= (ControlFlow 0 141) (- 0 142)) (= (segDegree Heap@106 temp@3 temp@5 (- (segLength Heap@106 temp@3 temp@5) 1)) (+ (segDegree Heap@106 temp@5 null 0) 1))) (=> (= (segDegree Heap@106 temp@3 temp@5 (- (segLength Heap@106 temp@3 temp@5) 1)) (+ (segDegree Heap@106 temp@5 null 0) 1)) (and (=> (= (ControlFlow 0 141) 138) anon1032_Then_correct) (=> (= (ControlFlow 0 141) 140) anon1032_Else_correct)))))))
(let ((anon637_correct  (=> (= Mask@206 (MapType1Store Mask@205 null (heapseg temp@5 null) (real_2_U (- (U_2_real (MapType1Select Mask@205 null (heapseg temp@5 null))) FullPerm)))) (and (=> (= (ControlFlow 0 144) (- 0 146)) (validChildren Heap@106 temp@3 temp@5)) (=> (validChildren Heap@106 temp@3 temp@5) (and (=> (= (ControlFlow 0 144) (- 0 145)) (validChildren Heap@106 temp@5 null)) (=> (validChildren Heap@106 temp@5 null) (and (=> (= (ControlFlow 0 144) 141) anon1031_Then_correct) (=> (= (ControlFlow 0 144) 143) anon1031_Else_correct)))))))))
(let ((anon1030_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 149) 144)) anon637_correct)))
(let ((anon1030_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 147) (- 0 148)) (<= FullPerm (U_2_real (MapType1Select Mask@205 null (heapseg temp@5 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@205 null (heapseg temp@5 null)))) (=> (= (ControlFlow 0 147) 144) anon637_correct))))))
(let ((anon635_correct  (=> (= Mask@205 (MapType1Store Mask@204 null (heapseg temp@3 temp@5) (real_2_U (- (U_2_real (MapType1Select Mask@204 null (heapseg temp@3 temp@5))) FullPerm)))) (and (=> (= (ControlFlow 0 150) 147) anon1030_Then_correct) (=> (= (ControlFlow 0 150) 149) anon1030_Else_correct)))))
(let ((anon1029_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 153) 150)) anon635_correct)))
(let ((anon1029_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 151) (- 0 152)) (<= FullPerm (U_2_real (MapType1Select Mask@204 null (heapseg temp@3 temp@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@204 null (heapseg temp@3 temp@5)))) (=> (= (ControlFlow 0 151) 150) anon635_correct))))))
(let ((anon633_correct  (=> (and (state Heap@106 Mask@204) (state Heap@106 Mask@204)) (and (=> (= (ControlFlow 0 154) 151) anon1029_Then_correct) (=> (= (ControlFlow 0 154) 153) anon1029_Else_correct)))))
(let ((anon1028_Else_correct  (=> (= temp@5 null) (=> (and (= Heap@106 Heap@102) (= (ControlFlow 0 156) 154)) anon633_correct))))
(let ((anon1028_Then_correct  (=> (and (and (and (not (= temp@5 null)) (forall ((o_140 T@U) (f_144 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_144))))
(let ((A@@18 (FieldTypeInv0 (type f_144))))
 (=> (and (and (= (type o_140) RefType) (= (type f_144) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType1Select (MapType0Select Heap@102 null (|heapseg#sm| temp@5 null)) o_140 f_144)) (U_2_bool (MapType1Select (MapType0Select Heap@102 null (|tree#sm| temp@5)) o_140 f_144)))) (U_2_bool (MapType1Select newPMask@18 o_140 f_144)))))
 :qid |stdinbpl.19484:41|
 :skolemid |256|
 :pattern ( (MapType1Select newPMask@18 o_140 f_144))
))) (and (= Heap@103 (MapType0Store Heap@102 null (|heapseg#sm| temp@5 null) newPMask@18)) (= Heap@104 (MapType0Store Heap@103 null (|heapseg#sm| temp@5 null) (MapType1Store (MapType0Select Heap@103 null (|heapseg#sm| temp@5 null)) temp@5 sibling (bool_2_U true)))))) (and (and (forall ((o_141 T@U) (f_145 T@U) ) (! (let ((B@@18 (FieldTypeInv1 (type f_145))))
(let ((A@@19 (FieldTypeInv0 (type f_145))))
 (=> (and (and (= (type o_141) RefType) (= (type f_145) (FieldType A@@19 B@@18))) (or (U_2_bool (MapType1Select (MapType0Select Heap@104 null (|heapseg#sm| temp@5 null)) o_141 f_145)) (U_2_bool (MapType1Select (MapType0Select Heap@104 null (|heapseg#sm| (MapType0Select Heap@104 temp@5 sibling) null)) o_141 f_145)))) (U_2_bool (MapType1Select newPMask@19 o_141 f_145)))))
 :qid |stdinbpl.19491:41|
 :skolemid |257|
 :pattern ( (MapType1Select newPMask@19 o_141 f_145))
)) (= Heap@105 (MapType0Store Heap@104 null (|heapseg#sm| temp@5 null) newPMask@19))) (and (= Heap@106 Heap@105) (= (ControlFlow 0 155) 154)))) anon633_correct)))
(let ((anon1027_Else_correct  (=> (and (HasDirectPerm Mask@204 null (heapseg temp@5 null)) (= Heap@102 ExhaleHeap@35)) (and (=> (= (ControlFlow 0 158) 155) anon1028_Then_correct) (=> (= (ControlFlow 0 158) 156) anon1028_Else_correct)))))
(let ((anon1027_Then_correct  (=> (and (and (not (HasDirectPerm Mask@204 null (heapseg temp@5 null))) (= Heap@100 (MapType0Store ExhaleHeap@35 null (|heapseg#sm| temp@5 null) ZeroPMask))) (and (= Heap@101 (MapType0Store Heap@100 null (heapseg temp@5 null) freshVersion@10)) (= Heap@102 Heap@101))) (and (=> (= (ControlFlow 0 157) 155) anon1028_Then_correct) (=> (= (ControlFlow 0 157) 156) anon1028_Else_correct)))))
(let ((anon629_correct  (=> (= Mask@204 (MapType1Store Mask@203 null (heapseg temp@5 null) (real_2_U (+ (U_2_real (MapType1Select Mask@203 null (heapseg temp@5 null))) FullPerm)))) (=> (and (and (state ExhaleHeap@35 Mask@204) (state ExhaleHeap@35 Mask@204)) (and (|heapseg#trigger| ExhaleHeap@35 (heapseg temp@5 null)) (= (MapType0Select ExhaleHeap@35 null (heapseg temp@5 null)) (FrameFragment (ite (not (= temp@5 null)) (CombineFrames (MapType0Select ExhaleHeap@35 null (tree temp@5)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@35 temp@5 sibling)) (CombineFrames (MapType0Select ExhaleHeap@35 null (heapseg (MapType0Select ExhaleHeap@35 temp@5 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@35 temp@5 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 159) 157) anon1027_Then_correct) (=> (= (ControlFlow 0 159) 158) anon1027_Else_correct))))))
(let ((anon1026_Else_correct  (=> (= (MapType0Select ExhaleHeap@35 temp@5 sibling) null) (=> (and (= Mask@203 Mask@202) (= (ControlFlow 0 163) 159)) anon629_correct))))
(let ((anon1026_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@35 temp@5 sibling) null)) (and (=> (= (ControlFlow 0 161) (- 0 162)) (= (treeParent ExhaleHeap@35 temp@5) (segParent ExhaleHeap@35 (MapType0Select ExhaleHeap@35 temp@5 sibling) null))) (=> (= (treeParent ExhaleHeap@35 temp@5) (segParent ExhaleHeap@35 (MapType0Select ExhaleHeap@35 temp@5 sibling) null)) (=> (and (= Mask@203 Mask@202) (= (ControlFlow 0 161) 159)) anon629_correct))))))
(let ((anon627_correct  (=> (and (= Mask@202 (MapType1Store Mask@201 null (heapseg (MapType0Select ExhaleHeap@35 temp@5 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@201 null (heapseg (MapType0Select ExhaleHeap@35 temp@5 sibling) null))) FullPerm)))) (InsidePredicate (heapseg temp@5 null) (MapType0Select ExhaleHeap@35 null (heapseg temp@5 null)) (heapseg (MapType0Select ExhaleHeap@35 temp@5 sibling) null) (MapType0Select ExhaleHeap@35 null (heapseg (MapType0Select ExhaleHeap@35 temp@5 sibling) null)))) (and (=> (= (ControlFlow 0 164) 161) anon1026_Then_correct) (=> (= (ControlFlow 0 164) 163) anon1026_Else_correct)))))
(let ((anon1025_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 167) 164)) anon627_correct)))
(let ((anon1025_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 165) (- 0 166)) (<= FullPerm (U_2_real (MapType1Select Mask@201 null (heapseg (MapType0Select ExhaleHeap@35 temp@5 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@201 null (heapseg (MapType0Select ExhaleHeap@35 temp@5 sibling) null)))) (=> (= (ControlFlow 0 165) 164) anon627_correct))))))
(let ((anon625_correct  (=> (= Mask@201 (MapType1Store Mask@200 temp@5 sibling (real_2_U (- (U_2_real (MapType1Select Mask@200 temp@5 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 168) 165) anon1025_Then_correct) (=> (= (ControlFlow 0 168) 167) anon1025_Else_correct)))))
(let ((anon1024_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 171) 168)) anon625_correct)))
(let ((anon1024_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 169) (- 0 170)) (<= FullPerm (U_2_real (MapType1Select Mask@200 temp@5 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@200 temp@5 sibling))) (=> (= (ControlFlow 0 169) 168) anon625_correct))))))
(let ((anon623_correct  (=> (and (= Mask@200 (MapType1Store Mask@199 null (tree temp@5) (real_2_U (- (U_2_real (MapType1Select Mask@199 null (tree temp@5))) FullPerm)))) (InsidePredicate (heapseg temp@5 null) (MapType0Select ExhaleHeap@35 null (heapseg temp@5 null)) (tree temp@5) (MapType0Select ExhaleHeap@35 null (tree temp@5)))) (and (=> (= (ControlFlow 0 172) 169) anon1024_Then_correct) (=> (= (ControlFlow 0 172) 171) anon1024_Else_correct)))))
(let ((anon1023_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 175) 172)) anon623_correct)))
(let ((anon1023_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 173) (- 0 174)) (<= FullPerm (U_2_real (MapType1Select Mask@199 null (tree temp@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@199 null (tree temp@5)))) (=> (= (ControlFlow 0 173) 172) anon623_correct))))))
(let ((anon1022_Then_correct  (=> (not (= temp@5 null)) (and (=> (= (ControlFlow 0 176) 173) anon1023_Then_correct) (=> (= (ControlFlow 0 176) 175) anon1023_Else_correct)))))
(let ((anon1022_Else_correct  (=> (= temp@5 null) (=> (and (= Mask@203 Mask@199) (= (ControlFlow 0 160) 159)) anon629_correct))))
(let ((anon620_correct  (=> (and (state ExhaleHeap@35 Mask@199) (state ExhaleHeap@35 Mask@199)) (and (=> (= (ControlFlow 0 177) 176) anon1022_Then_correct) (=> (= (ControlFlow 0 177) 160) anon1022_Else_correct)))))
(let ((anon1021_Else_correct  (=> (and (= temp@4 temp@5) (= (ControlFlow 0 179) 177)) anon620_correct)))
(let ((anon1021_Then_correct  (=> (and (and (not (= temp@4 temp@5)) (state ExhaleHeap@35 Mask@199)) (and (= (segParent ExhaleHeap@35 temp@3 temp@5) (segParent Heap@99 temp@4 temp@5)) (= (ControlFlow 0 178) 177))) anon620_correct)))
(let ((anon1020_Else_correct  (=> (= temp@3 temp@4) (and (=> (= (ControlFlow 0 181) 178) anon1021_Then_correct) (=> (= (ControlFlow 0 181) 179) anon1021_Else_correct)))))
(let ((anon1020_Then_correct  (=> (not (= temp@3 temp@4)) (=> (and (state ExhaleHeap@35 Mask@199) (= (segParent ExhaleHeap@35 temp@3 temp@5) (segParent Heap@99 temp@3 temp@4))) (and (=> (= (ControlFlow 0 180) 178) anon1021_Then_correct) (=> (= (ControlFlow 0 180) 179) anon1021_Else_correct))))))
(let ((anon616_correct  (=> (and (state ExhaleHeap@35 Mask@199) (= (segSize ExhaleHeap@35 temp@3 temp@5) (+ (segSize Heap@99 temp@3 temp@4) (segSize Heap@99 temp@4 temp@5)))) (and (=> (= (ControlFlow 0 182) 180) anon1020_Then_correct) (=> (= (ControlFlow 0 182) 181) anon1020_Else_correct)))))
(let ((anon1019_Else_correct  (=> (and (not (and (validChildren Heap@99 temp@3 temp@4) (and (validChildren Heap@99 temp@4 temp@5) (=> (and (< 0 (segLength Heap@99 temp@3 temp@4)) (< 0 (segLength Heap@99 temp@4 temp@5))) (= (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (+ (segDegree Heap@99 temp@4 temp@5 0) 1)))))) (= (ControlFlow 0 184) 182)) anon616_correct)))
(let ((anon1019_Then_correct  (=> (and (and (and (validChildren Heap@99 temp@3 temp@4) (and (validChildren Heap@99 temp@4 temp@5) (=> (and (< 0 (segLength Heap@99 temp@3 temp@4)) (< 0 (segLength Heap@99 temp@4 temp@5))) (= (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (+ (segDegree Heap@99 temp@4 temp@5 0) 1))))) (state ExhaleHeap@35 Mask@199)) (and (validChildren ExhaleHeap@35 temp@3 temp@5) (= (ControlFlow 0 183) 182))) anon616_correct)))
(let ((anon1018_Else_correct  (=> (not (and (presorted Heap@99 temp@3 temp@4) (and (presorted Heap@99 temp@4 temp@5) (=> (and (< 0 (segLength Heap@99 temp@3 temp@4)) (< 0 (segLength Heap@99 temp@4 temp@5))) (and (<= (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (segDegree Heap@99 temp@4 temp@5 0)) (and (=> (and (<= 2 (segLength Heap@99 temp@3 temp@4)) (= (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 2)))) (< (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (segDegree Heap@99 temp@4 temp@5 0))) (=> (and (<= 2 (segLength Heap@99 temp@4 temp@5)) (= (segDegree Heap@99 temp@4 temp@5 0) (segDegree Heap@99 temp@4 temp@5 1))) (< (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (segDegree Heap@99 temp@4 temp@5 0))))))))) (and (=> (= (ControlFlow 0 186) 183) anon1019_Then_correct) (=> (= (ControlFlow 0 186) 184) anon1019_Else_correct)))))
(let ((anon1018_Then_correct  (=> (and (and (presorted Heap@99 temp@3 temp@4) (and (presorted Heap@99 temp@4 temp@5) (=> (and (< 0 (segLength Heap@99 temp@3 temp@4)) (< 0 (segLength Heap@99 temp@4 temp@5))) (and (<= (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (segDegree Heap@99 temp@4 temp@5 0)) (and (=> (and (<= 2 (segLength Heap@99 temp@3 temp@4)) (= (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 2)))) (< (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (segDegree Heap@99 temp@4 temp@5 0))) (=> (and (<= 2 (segLength Heap@99 temp@4 temp@5)) (= (segDegree Heap@99 temp@4 temp@5 0) (segDegree Heap@99 temp@4 temp@5 1))) (< (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (segDegree Heap@99 temp@4 temp@5 0)))))))) (and (state ExhaleHeap@35 Mask@199) (presorted ExhaleHeap@35 temp@3 temp@5))) (and (=> (= (ControlFlow 0 185) 183) anon1019_Then_correct) (=> (= (ControlFlow 0 185) 184) anon1019_Else_correct)))))
(let ((anon1017_Else_correct  (=> (not (and (sorted Heap@99 temp@3 temp@4) (and (sorted Heap@99 temp@4 temp@5) (=> (and (< 0 (segLength Heap@99 temp@3 temp@4)) (< 0 (segLength Heap@99 temp@4 temp@5))) (< (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (segDegree Heap@99 temp@4 temp@5 0)))))) (and (=> (= (ControlFlow 0 188) 185) anon1018_Then_correct) (=> (= (ControlFlow 0 188) 186) anon1018_Else_correct)))))
(let ((anon1017_Then_correct  (=> (and (and (sorted Heap@99 temp@3 temp@4) (and (sorted Heap@99 temp@4 temp@5) (=> (and (< 0 (segLength Heap@99 temp@3 temp@4)) (< 0 (segLength Heap@99 temp@4 temp@5))) (< (segDegree Heap@99 temp@3 temp@4 (- (segLength Heap@99 temp@3 temp@4) 1)) (segDegree Heap@99 temp@4 temp@5 0))))) (and (state ExhaleHeap@35 Mask@199) (sorted ExhaleHeap@35 temp@3 temp@5))) (and (=> (= (ControlFlow 0 187) 185) anon1018_Then_correct) (=> (= (ControlFlow 0 187) 186) anon1018_Else_correct)))))
(let ((anon1016_Else_correct  (=> (and (= temp@5 null) (= Mask@199 Mask@197)) (and (=> (= (ControlFlow 0 190) 187) anon1017_Then_correct) (=> (= (ControlFlow 0 190) 188) anon1017_Else_correct)))))
(let ((anon1016_Then_correct  (=> (and (not (= temp@5 null)) (= Mask@198 (MapType1Store Mask@197 null (tree temp@5) (real_2_U (+ (U_2_real (MapType1Select Mask@197 null (tree temp@5))) FullPerm))))) (=> (and (and (and (state ExhaleHeap@35 Mask@198) (state ExhaleHeap@35 Mask@198)) (and (= (treeDegree ExhaleHeap@35 temp@5) (treeDegree Heap@99 temp@5)) (state ExhaleHeap@35 Mask@198))) (and (and (= (treeSize ExhaleHeap@35 temp@5) (treeSize Heap@99 temp@5)) (state ExhaleHeap@35 Mask@198)) (and (= (treeParent ExhaleHeap@35 temp@5) (treeParent Heap@99 temp@5)) (= Mask@199 Mask@198)))) (and (=> (= (ControlFlow 0 189) 187) anon1017_Then_correct) (=> (= (ControlFlow 0 189) 188) anon1017_Else_correct))))))
(let ((anon608_correct  (=> (IdenticalOnKnownLocations Heap@99 ExhaleHeap@35 Mask@196) (=> (and (and (and (= Mask@197 (MapType1Store Mask@196 null (heapseg temp@3 temp@5) (real_2_U (+ (U_2_real (MapType1Select Mask@196 null (heapseg temp@3 temp@5))) FullPerm)))) (state ExhaleHeap@35 Mask@197)) (and (state ExhaleHeap@35 Mask@197) (= (segLength ExhaleHeap@35 temp@3 temp@5) (+ (segLength Heap@99 temp@3 temp@4) (segLength Heap@99 temp@4 temp@5))))) (and (and (state ExhaleHeap@35 Mask@197) (forall ((i_4 Int) ) (!  (=> (and (<= 0 i_4) (< i_4 (segLength Heap@99 temp@3 temp@4))) (= (segDegree ExhaleHeap@35 temp@3 temp@5 i_4) (segDegree Heap@99 temp@3 temp@4 i_4)))
 :qid |stdinbpl.19393:34|
 :skolemid |254|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@35 null (heapseg temp@3 temp@5)) temp@3 temp@5 i_4))
 :pattern ( (|segDegree#frame| (MapType0Select Heap@99 null (heapseg temp@3 temp@4)) temp@3 temp@4 i_4))
))) (and (state ExhaleHeap@35 Mask@197) (forall ((i_5_2 Int) ) (!  (=> (and (<= (segLength Heap@99 temp@3 temp@4) i_5_2) (< i_5_2 (segLength ExhaleHeap@35 temp@3 temp@5))) (= (segDegree ExhaleHeap@35 temp@3 temp@5 i_5_2) (segDegree Heap@99 temp@4 temp@5 (- i_5_2 (segLength Heap@99 temp@3 temp@4)))))
 :qid |stdinbpl.19398:34|
 :skolemid |255|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@35 null (heapseg temp@3 temp@5)) temp@3 temp@5 i_5_2))
))))) (and (=> (= (ControlFlow 0 191) 189) anon1016_Then_correct) (=> (= (ControlFlow 0 191) 190) anon1016_Else_correct))))))
(let ((anon1015_Else_correct  (=> (and (not (and (not (= temp@3 temp@4)) (not (= temp@4 temp@5)))) (= (ControlFlow 0 194) 191)) anon608_correct)))
(let ((anon1015_Then_correct  (=> (and (not (= temp@3 temp@4)) (not (= temp@4 temp@5))) (and (=> (= (ControlFlow 0 192) (- 0 193)) (= (segParent Heap@99 temp@3 temp@4) (segParent Heap@99 temp@4 temp@5))) (=> (= (segParent Heap@99 temp@3 temp@4) (segParent Heap@99 temp@4 temp@5)) (=> (= (ControlFlow 0 192) 191) anon608_correct))))))
(let ((anon605_correct  (=> (and (= Mask@195 (MapType1Store Mask@194 null (tree temp@5) (real_2_U (- (U_2_real (MapType1Select Mask@194 null (tree temp@5))) FullPerm)))) (= Mask@196 Mask@195)) (and (=> (= (ControlFlow 0 196) 192) anon1015_Then_correct) (=> (= (ControlFlow 0 196) 194) anon1015_Else_correct)))))
(let ((anon1014_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 199) 196)) anon605_correct)))
(let ((anon1014_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 197) (- 0 198)) (<= FullPerm (U_2_real (MapType1Select Mask@194 null (tree temp@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@194 null (tree temp@5)))) (=> (= (ControlFlow 0 197) 196) anon605_correct))))))
(let ((anon1013_Then_correct  (=> (not (= temp@5 null)) (and (=> (= (ControlFlow 0 200) 197) anon1014_Then_correct) (=> (= (ControlFlow 0 200) 199) anon1014_Else_correct)))))
(let ((anon1013_Else_correct  (=> (and (= temp@5 null) (= Mask@196 Mask@194)) (and (=> (= (ControlFlow 0 195) 192) anon1015_Then_correct) (=> (= (ControlFlow 0 195) 194) anon1015_Else_correct)))))
(let ((anon602_correct  (=> (= Mask@194 (MapType1Store Mask@193 null (heapseg temp@4 temp@5) (real_2_U (- (U_2_real (MapType1Select Mask@193 null (heapseg temp@4 temp@5))) FullPerm)))) (and (=> (= (ControlFlow 0 201) 200) anon1013_Then_correct) (=> (= (ControlFlow 0 201) 195) anon1013_Else_correct)))))
(let ((anon1012_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 204) 201)) anon602_correct)))
(let ((anon1012_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 202) (- 0 203)) (<= FullPerm (U_2_real (MapType1Select Mask@193 null (heapseg temp@4 temp@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@193 null (heapseg temp@4 temp@5)))) (=> (= (ControlFlow 0 202) 201) anon602_correct))))))
(let ((anon600_correct  (=> (= Mask@193 (MapType1Store Mask@192 null (heapseg temp@3 temp@4) (real_2_U (- (U_2_real (MapType1Select Mask@192 null (heapseg temp@3 temp@4))) FullPerm)))) (and (=> (= (ControlFlow 0 205) 202) anon1012_Then_correct) (=> (= (ControlFlow 0 205) 204) anon1012_Else_correct)))))
(let ((anon1011_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 208) 205)) anon600_correct)))
(let ((anon1011_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 206) (- 0 207)) (<= FullPerm (U_2_real (MapType1Select Mask@192 null (heapseg temp@3 temp@4))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@192 null (heapseg temp@3 temp@4)))) (=> (= (ControlFlow 0 206) 205) anon600_correct))))))
(let ((anon598_correct  (=> (and (state Heap@99 Mask@192) (state Heap@99 Mask@192)) (and (=> (= (ControlFlow 0 209) 206) anon1011_Then_correct) (=> (= (ControlFlow 0 209) 208) anon1011_Else_correct)))))
(let ((anon1010_Else_correct  (=> (= (MapType0Select Heap@99 temp@5 sibling) null) (=> (and (= Mask@192 Mask@191) (= (ControlFlow 0 212) 209)) anon598_correct))))
(let ((anon1010_Then_correct  (=> (not (= (MapType0Select Heap@99 temp@5 sibling) null)) (=> (and (and (state Heap@99 Mask@191) (= (treeParent Heap@99 temp@5) (segParent Heap@99 (MapType0Select Heap@99 temp@5 sibling) null))) (and (= Mask@192 Mask@191) (= (ControlFlow 0 211) 209))) anon598_correct))))
(let ((anon1009_Then_correct  (=> (and (not (= temp@5 null)) (= Mask@189 (MapType1Store Mask@188 null (tree temp@5) (real_2_U (+ (U_2_real (MapType1Select Mask@188 null (tree temp@5))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg temp@5 null) (MapType0Select Heap@99 null (heapseg temp@5 null)) (tree temp@5) (MapType0Select Heap@99 null (tree temp@5))) (state Heap@99 Mask@189)) (and (not (= temp@5 null)) (= Mask@190 (MapType1Store Mask@189 temp@5 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@189 temp@5 sibling)) FullPerm)))))) (and (and (state Heap@99 Mask@190) (= Mask@191 (MapType1Store Mask@190 null (heapseg (MapType0Select Heap@99 temp@5 sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@190 null (heapseg (MapType0Select Heap@99 temp@5 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg temp@5 null) (MapType0Select Heap@99 null (heapseg temp@5 null)) (heapseg (MapType0Select Heap@99 temp@5 sibling) null) (MapType0Select Heap@99 null (heapseg (MapType0Select Heap@99 temp@5 sibling) null))) (state Heap@99 Mask@191)))) (and (=> (= (ControlFlow 0 213) 211) anon1010_Then_correct) (=> (= (ControlFlow 0 213) 212) anon1010_Else_correct))))))
(let ((anon1009_Else_correct  (=> (= temp@5 null) (=> (and (= Mask@192 Mask@188) (= (ControlFlow 0 210) 209)) anon598_correct))))
(let ((anon1008_Else_correct  (=> (and (HasDirectPerm Mask@188 null (heapseg temp@5 null)) (= Heap@99 Heap@97)) (and (=> (= (ControlFlow 0 215) 213) anon1009_Then_correct) (=> (= (ControlFlow 0 215) 210) anon1009_Else_correct)))))
(let ((anon1008_Then_correct  (=> (not (HasDirectPerm Mask@188 null (heapseg temp@5 null))) (=> (and (= Heap@98 (MapType0Store Heap@97 null (heapseg temp@5 null) newVersion@7)) (= Heap@99 Heap@98)) (and (=> (= (ControlFlow 0 214) 213) anon1009_Then_correct) (=> (= (ControlFlow 0 214) 210) anon1009_Else_correct))))))
(let ((anon593_correct  (=> (= Mask@188 (MapType1Store Mask@187 null (heapseg temp@5 null) (real_2_U (- (U_2_real (MapType1Select Mask@187 null (heapseg temp@5 null))) FullPerm)))) (and (=> (= (ControlFlow 0 216) 214) anon1008_Then_correct) (=> (= (ControlFlow 0 216) 215) anon1008_Else_correct)))))
(let ((anon1007_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 219) 216)) anon593_correct)))
(let ((anon1007_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 217) (- 0 218)) (<= FullPerm (U_2_real (MapType1Select Mask@187 null (heapseg temp@5 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@187 null (heapseg temp@5 null)))) (=> (= (ControlFlow 0 217) 216) anon593_correct))))))
(let ((anon591_correct  (=> (and (and (state Heap@97 Mask@187) (state Heap@97 Mask@187)) (and (|heapseg#trigger| Heap@97 (heapseg temp@5 null)) (= (MapType0Select Heap@97 null (heapseg temp@5 null)) (FrameFragment (ite (not (= temp@5 null)) (CombineFrames (MapType0Select Heap@97 null (tree temp@5)) (CombineFrames (FrameFragment (MapType0Select Heap@97 temp@5 sibling)) (CombineFrames (MapType0Select Heap@97 null (heapseg (MapType0Select Heap@97 temp@5 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@97 temp@5 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 220) 217) anon1007_Then_correct) (=> (= (ControlFlow 0 220) 219) anon1007_Else_correct)))))
(let ((anon1006_Else_correct  (=> (= temp@4 temp@5) (=> (and (= Heap@97 Heap@93) (= (ControlFlow 0 222) 220)) anon591_correct))))
(let ((anon1006_Then_correct  (=> (and (and (and (not (= temp@4 temp@5)) (forall ((o_138 T@U) (f_142 T@U) ) (! (let ((B@@19 (FieldTypeInv1 (type f_142))))
(let ((A@@20 (FieldTypeInv0 (type f_142))))
 (=> (and (and (= (type o_138) RefType) (= (type f_142) (FieldType A@@20 B@@19))) (or (U_2_bool (MapType1Select (MapType0Select Heap@93 null (|heapseg#sm| temp@4 temp@5)) o_138 f_142)) (U_2_bool (MapType1Select (MapType0Select Heap@93 null (|tree#sm| temp@4)) o_138 f_142)))) (U_2_bool (MapType1Select newPMask@16 o_138 f_142)))))
 :qid |stdinbpl.19292:41|
 :skolemid |252|
 :pattern ( (MapType1Select newPMask@16 o_138 f_142))
))) (and (= Heap@94 (MapType0Store Heap@93 null (|heapseg#sm| temp@4 temp@5) newPMask@16)) (= Heap@95 (MapType0Store Heap@94 null (|heapseg#sm| temp@4 temp@5) (MapType1Store (MapType0Select Heap@94 null (|heapseg#sm| temp@4 temp@5)) temp@4 sibling (bool_2_U true)))))) (and (and (forall ((o_139 T@U) (f_143 T@U) ) (! (let ((B@@20 (FieldTypeInv1 (type f_143))))
(let ((A@@21 (FieldTypeInv0 (type f_143))))
 (=> (and (and (= (type o_139) RefType) (= (type f_143) (FieldType A@@21 B@@20))) (or (U_2_bool (MapType1Select (MapType0Select Heap@95 null (|heapseg#sm| temp@4 temp@5)) o_139 f_143)) (U_2_bool (MapType1Select (MapType0Select Heap@95 null (|heapseg#sm| (MapType0Select Heap@95 temp@4 sibling) temp@5)) o_139 f_143)))) (U_2_bool (MapType1Select newPMask@17 o_139 f_143)))))
 :qid |stdinbpl.19299:41|
 :skolemid |253|
 :pattern ( (MapType1Select newPMask@17 o_139 f_143))
)) (= Heap@96 (MapType0Store Heap@95 null (|heapseg#sm| temp@4 temp@5) newPMask@17))) (and (= Heap@97 Heap@96) (= (ControlFlow 0 221) 220)))) anon591_correct)))
(let ((anon1005_Else_correct  (=> (and (HasDirectPerm Mask@187 null (heapseg temp@4 temp@5)) (= Heap@93 Heap@90)) (and (=> (= (ControlFlow 0 224) 221) anon1006_Then_correct) (=> (= (ControlFlow 0 224) 222) anon1006_Else_correct)))))
(let ((anon1005_Then_correct  (=> (and (and (not (HasDirectPerm Mask@187 null (heapseg temp@4 temp@5))) (= Heap@91 (MapType0Store Heap@90 null (|heapseg#sm| temp@4 temp@5) ZeroPMask))) (and (= Heap@92 (MapType0Store Heap@91 null (heapseg temp@4 temp@5) freshVersion@9)) (= Heap@93 Heap@92))) (and (=> (= (ControlFlow 0 223) 221) anon1006_Then_correct) (=> (= (ControlFlow 0 223) 222) anon1006_Else_correct)))))
(let ((anon587_correct  (=> (= Mask@187 (MapType1Store Mask@186 null (heapseg temp@4 temp@5) (real_2_U (+ (U_2_real (MapType1Select Mask@186 null (heapseg temp@4 temp@5))) FullPerm)))) (=> (and (and (state Heap@90 Mask@187) (state Heap@90 Mask@187)) (and (|heapseg#trigger| Heap@90 (heapseg temp@4 temp@5)) (= (MapType0Select Heap@90 null (heapseg temp@4 temp@5)) (FrameFragment (ite (not (= temp@4 temp@5)) (CombineFrames (MapType0Select Heap@90 null (tree temp@4)) (CombineFrames (FrameFragment (MapType0Select Heap@90 temp@4 sibling)) (CombineFrames (MapType0Select Heap@90 null (heapseg (MapType0Select Heap@90 temp@4 sibling) temp@5)) (FrameFragment (ite (not (= (MapType0Select Heap@90 temp@4 sibling) temp@5)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 225) 223) anon1005_Then_correct) (=> (= (ControlFlow 0 225) 224) anon1005_Else_correct))))))
(let ((anon1004_Else_correct  (=> (= (MapType0Select Heap@90 temp@4 sibling) temp@5) (=> (and (= Mask@186 Mask@185) (= (ControlFlow 0 229) 225)) anon587_correct))))
(let ((anon1004_Then_correct  (=> (not (= (MapType0Select Heap@90 temp@4 sibling) temp@5)) (and (=> (= (ControlFlow 0 227) (- 0 228)) (= (treeParent Heap@90 temp@4) (segParent Heap@90 (MapType0Select Heap@90 temp@4 sibling) temp@5))) (=> (= (treeParent Heap@90 temp@4) (segParent Heap@90 (MapType0Select Heap@90 temp@4 sibling) temp@5)) (=> (and (= Mask@186 Mask@185) (= (ControlFlow 0 227) 225)) anon587_correct))))))
(let ((anon585_correct  (=> (and (= Mask@185 (MapType1Store Mask@184 null (heapseg (MapType0Select Heap@90 temp@4 sibling) temp@5) (real_2_U (- (U_2_real (MapType1Select Mask@184 null (heapseg (MapType0Select Heap@90 temp@4 sibling) temp@5))) FullPerm)))) (InsidePredicate (heapseg temp@4 temp@5) (MapType0Select Heap@90 null (heapseg temp@4 temp@5)) (heapseg (MapType0Select Heap@90 temp@4 sibling) temp@5) (MapType0Select Heap@90 null (heapseg (MapType0Select Heap@90 temp@4 sibling) temp@5)))) (and (=> (= (ControlFlow 0 230) 227) anon1004_Then_correct) (=> (= (ControlFlow 0 230) 229) anon1004_Else_correct)))))
(let ((anon1003_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 233) 230)) anon585_correct)))
(let ((anon1003_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 231) (- 0 232)) (<= FullPerm (U_2_real (MapType1Select Mask@184 null (heapseg (MapType0Select Heap@90 temp@4 sibling) temp@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@184 null (heapseg (MapType0Select Heap@90 temp@4 sibling) temp@5)))) (=> (= (ControlFlow 0 231) 230) anon585_correct))))))
(let ((anon583_correct  (=> (= Mask@184 (MapType1Store Mask@183 temp@4 sibling (real_2_U (- (U_2_real (MapType1Select Mask@183 temp@4 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 234) 231) anon1003_Then_correct) (=> (= (ControlFlow 0 234) 233) anon1003_Else_correct)))))
(let ((anon1002_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 237) 234)) anon583_correct)))
(let ((anon1002_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 235) (- 0 236)) (<= FullPerm (U_2_real (MapType1Select Mask@183 temp@4 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@183 temp@4 sibling))) (=> (= (ControlFlow 0 235) 234) anon583_correct))))))
(let ((anon581_correct  (=> (and (= Mask@183 (MapType1Store Mask@182 null (tree temp@4) (real_2_U (- (U_2_real (MapType1Select Mask@182 null (tree temp@4))) FullPerm)))) (InsidePredicate (heapseg temp@4 temp@5) (MapType0Select Heap@90 null (heapseg temp@4 temp@5)) (tree temp@4) (MapType0Select Heap@90 null (tree temp@4)))) (and (=> (= (ControlFlow 0 238) 235) anon1002_Then_correct) (=> (= (ControlFlow 0 238) 237) anon1002_Else_correct)))))
(let ((anon1001_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 241) 238)) anon581_correct)))
(let ((anon1001_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 239) (- 0 240)) (<= FullPerm (U_2_real (MapType1Select Mask@182 null (tree temp@4))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@182 null (tree temp@4)))) (=> (= (ControlFlow 0 239) 238) anon581_correct))))))
(let ((anon1000_Then_correct  (=> (not (= temp@4 temp@5)) (and (=> (= (ControlFlow 0 242) 239) anon1001_Then_correct) (=> (= (ControlFlow 0 242) 241) anon1001_Else_correct)))))
(let ((anon1000_Else_correct  (=> (= temp@4 temp@5) (=> (and (= Mask@186 Mask@182) (= (ControlFlow 0 226) 225)) anon587_correct))))
(let ((anon578_correct  (=> (and (state Heap@90 Mask@182) (state Heap@90 Mask@182)) (and (=> (= (ControlFlow 0 243) 242) anon1000_Then_correct) (=> (= (ControlFlow 0 243) 226) anon1000_Else_correct)))))
(let ((anon999_Else_correct  (=> (= temp@5 temp@5) (=> (and (= Heap@90 Heap@86) (= (ControlFlow 0 245) 243)) anon578_correct))))
(let ((anon999_Then_correct  (=> (and (and (and (not (= temp@5 temp@5)) (forall ((o_136 T@U) (f_140 T@U) ) (! (let ((B@@21 (FieldTypeInv1 (type f_140))))
(let ((A@@22 (FieldTypeInv0 (type f_140))))
 (=> (and (and (= (type o_136) RefType) (= (type f_140) (FieldType A@@22 B@@21))) (or (U_2_bool (MapType1Select (MapType0Select Heap@86 null (|heapseg#sm| temp@5 temp@5)) o_136 f_140)) (U_2_bool (MapType1Select (MapType0Select Heap@86 null (|tree#sm| temp@5)) o_136 f_140)))) (U_2_bool (MapType1Select newPMask@14 o_136 f_140)))))
 :qid |stdinbpl.19230:41|
 :skolemid |250|
 :pattern ( (MapType1Select newPMask@14 o_136 f_140))
))) (and (= Heap@87 (MapType0Store Heap@86 null (|heapseg#sm| temp@5 temp@5) newPMask@14)) (= Heap@88 (MapType0Store Heap@87 null (|heapseg#sm| temp@5 temp@5) (MapType1Store (MapType0Select Heap@87 null (|heapseg#sm| temp@5 temp@5)) temp@5 sibling (bool_2_U true)))))) (and (and (forall ((o_137 T@U) (f_141 T@U) ) (! (let ((B@@22 (FieldTypeInv1 (type f_141))))
(let ((A@@23 (FieldTypeInv0 (type f_141))))
 (=> (and (and (= (type o_137) RefType) (= (type f_141) (FieldType A@@23 B@@22))) (or (U_2_bool (MapType1Select (MapType0Select Heap@88 null (|heapseg#sm| temp@5 temp@5)) o_137 f_141)) (U_2_bool (MapType1Select (MapType0Select Heap@88 null (|heapseg#sm| (MapType0Select Heap@88 temp@5 sibling) temp@5)) o_137 f_141)))) (U_2_bool (MapType1Select newPMask@15 o_137 f_141)))))
 :qid |stdinbpl.19237:41|
 :skolemid |251|
 :pattern ( (MapType1Select newPMask@15 o_137 f_141))
)) (= Heap@89 (MapType0Store Heap@88 null (|heapseg#sm| temp@5 temp@5) newPMask@15))) (and (= Heap@90 Heap@89) (= (ControlFlow 0 244) 243)))) anon578_correct)))
(let ((anon998_Else_correct  (=> (and (HasDirectPerm Mask@182 null (heapseg temp@5 temp@5)) (= Heap@86 Heap@83)) (and (=> (= (ControlFlow 0 247) 244) anon999_Then_correct) (=> (= (ControlFlow 0 247) 245) anon999_Else_correct)))))
(let ((anon998_Then_correct  (=> (and (and (not (HasDirectPerm Mask@182 null (heapseg temp@5 temp@5))) (= Heap@84 (MapType0Store Heap@83 null (|heapseg#sm| temp@5 temp@5) ZeroPMask))) (and (= Heap@85 (MapType0Store Heap@84 null (heapseg temp@5 temp@5) freshVersion@8)) (= Heap@86 Heap@85))) (and (=> (= (ControlFlow 0 246) 244) anon999_Then_correct) (=> (= (ControlFlow 0 246) 245) anon999_Else_correct)))))
(let ((anon574_correct  (=> (= Mask@182 (MapType1Store Mask@181 null (heapseg temp@5 temp@5) (real_2_U (+ (U_2_real (MapType1Select Mask@181 null (heapseg temp@5 temp@5))) FullPerm)))) (=> (and (and (state Heap@83 Mask@182) (state Heap@83 Mask@182)) (and (|heapseg#trigger| Heap@83 (heapseg temp@5 temp@5)) (= (MapType0Select Heap@83 null (heapseg temp@5 temp@5)) (FrameFragment (ite (not (= temp@5 temp@5)) (CombineFrames (MapType0Select Heap@83 null (tree temp@5)) (CombineFrames (FrameFragment (MapType0Select Heap@83 temp@5 sibling)) (CombineFrames (MapType0Select Heap@83 null (heapseg (MapType0Select Heap@83 temp@5 sibling) temp@5)) (FrameFragment (ite (not (= (MapType0Select Heap@83 temp@5 sibling) temp@5)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 248) 246) anon998_Then_correct) (=> (= (ControlFlow 0 248) 247) anon998_Else_correct))))))
(let ((anon997_Else_correct  (=> (= (MapType0Select Heap@83 temp@5 sibling) temp@5) (=> (and (= Mask@181 Mask@180) (= (ControlFlow 0 252) 248)) anon574_correct))))
(let ((anon997_Then_correct  (=> (not (= (MapType0Select Heap@83 temp@5 sibling) temp@5)) (and (=> (= (ControlFlow 0 250) (- 0 251)) (= (treeParent Heap@83 temp@5) (segParent Heap@83 (MapType0Select Heap@83 temp@5 sibling) temp@5))) (=> (= (treeParent Heap@83 temp@5) (segParent Heap@83 (MapType0Select Heap@83 temp@5 sibling) temp@5)) (=> (and (= Mask@181 Mask@180) (= (ControlFlow 0 250) 248)) anon574_correct))))))
(let ((anon572_correct  (=> (and (= Mask@180 (MapType1Store Mask@179 null (heapseg (MapType0Select Heap@83 temp@5 sibling) temp@5) (real_2_U (- (U_2_real (MapType1Select Mask@179 null (heapseg (MapType0Select Heap@83 temp@5 sibling) temp@5))) FullPerm)))) (InsidePredicate (heapseg temp@5 temp@5) (MapType0Select Heap@83 null (heapseg temp@5 temp@5)) (heapseg (MapType0Select Heap@83 temp@5 sibling) temp@5) (MapType0Select Heap@83 null (heapseg (MapType0Select Heap@83 temp@5 sibling) temp@5)))) (and (=> (= (ControlFlow 0 253) 250) anon997_Then_correct) (=> (= (ControlFlow 0 253) 252) anon997_Else_correct)))))
(let ((anon996_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 256) 253)) anon572_correct)))
(let ((anon996_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 254) (- 0 255)) (<= FullPerm (U_2_real (MapType1Select Mask@179 null (heapseg (MapType0Select Heap@83 temp@5 sibling) temp@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@179 null (heapseg (MapType0Select Heap@83 temp@5 sibling) temp@5)))) (=> (= (ControlFlow 0 254) 253) anon572_correct))))))
(let ((anon570_correct  (=> (= Mask@179 (MapType1Store Mask@178 temp@5 sibling (real_2_U (- (U_2_real (MapType1Select Mask@178 temp@5 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 257) 254) anon996_Then_correct) (=> (= (ControlFlow 0 257) 256) anon996_Else_correct)))))
(let ((anon995_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 260) 257)) anon570_correct)))
(let ((anon995_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 258) (- 0 259)) (<= FullPerm (U_2_real (MapType1Select Mask@178 temp@5 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@178 temp@5 sibling))) (=> (= (ControlFlow 0 258) 257) anon570_correct))))))
(let ((anon568_correct  (=> (and (= Mask@178 (MapType1Store Mask@177 null (tree temp@5) (real_2_U (- (U_2_real (MapType1Select Mask@177 null (tree temp@5))) FullPerm)))) (InsidePredicate (heapseg temp@5 temp@5) (MapType0Select Heap@83 null (heapseg temp@5 temp@5)) (tree temp@5) (MapType0Select Heap@83 null (tree temp@5)))) (and (=> (= (ControlFlow 0 261) 258) anon995_Then_correct) (=> (= (ControlFlow 0 261) 260) anon995_Else_correct)))))
(let ((anon994_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 264) 261)) anon568_correct)))
(let ((anon994_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 262) (- 0 263)) (<= FullPerm (U_2_real (MapType1Select Mask@177 null (tree temp@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@177 null (tree temp@5)))) (=> (= (ControlFlow 0 262) 261) anon568_correct))))))
(let ((anon993_Then_correct  (=> (not (= temp@5 temp@5)) (and (=> (= (ControlFlow 0 265) 262) anon994_Then_correct) (=> (= (ControlFlow 0 265) 264) anon994_Else_correct)))))
(let ((anon993_Else_correct  (=> (= temp@5 temp@5) (=> (and (= Mask@181 Mask@177) (= (ControlFlow 0 249) 248)) anon574_correct))))
(let ((anon565_correct  (=> (= Heap@79 (MapType0Store Heap@78 null (|tree#sm| temp@4) (MapType1Store (MapType0Select Heap@78 null (|tree#sm| temp@4)) temp@4 key (bool_2_U true)))) (=> (and (and (and (= Heap@80 (MapType0Store Heap@79 null (|tree#sm| temp@4) (MapType1Store (MapType0Select Heap@79 null (|tree#sm| temp@4)) temp@4 degree (bool_2_U true)))) (= Heap@81 (MapType0Store Heap@80 null (|tree#sm| temp@4) (MapType1Store (MapType0Select Heap@80 null (|tree#sm| temp@4)) temp@4 child (bool_2_U true))))) (and (= Heap@82 (MapType0Store Heap@81 null (|tree#sm| temp@4) (MapType1Store (MapType0Select Heap@81 null (|tree#sm| temp@4)) temp@4 parent (bool_2_U true)))) (forall ((o_135 T@U) (f_139 T@U) ) (! (let ((B@@23 (FieldTypeInv1 (type f_139))))
(let ((A@@24 (FieldTypeInv0 (type f_139))))
 (=> (and (and (= (type o_135) RefType) (= (type f_139) (FieldType A@@24 B@@23))) (or (U_2_bool (MapType1Select (MapType0Select Heap@82 null (|tree#sm| temp@4)) o_135 f_139)) (U_2_bool (MapType1Select (MapType0Select Heap@82 null (|heapseg#sm| (MapType0Select Heap@82 temp@4 child) null)) o_135 f_139)))) (U_2_bool (MapType1Select newPMask@13 o_135 f_139)))))
 :qid |stdinbpl.19164:39|
 :skolemid |249|
 :pattern ( (MapType1Select newPMask@13 o_135 f_139))
)))) (and (and (= Heap@83 (MapType0Store Heap@82 null (|tree#sm| temp@4) newPMask@13)) (state Heap@83 Mask@177)) (and (state Heap@83 Mask@177) (state Heap@83 Mask@177)))) (and (=> (= (ControlFlow 0 266) (- 0 267)) (HasDirectPerm Mask@177 temp@4 sibling)) (=> (HasDirectPerm Mask@177 temp@4 sibling) (=> (and (= temp@5 (MapType0Select Heap@83 temp@4 sibling)) (state Heap@83 Mask@177)) (and (=> (= (ControlFlow 0 266) 265) anon993_Then_correct) (=> (= (ControlFlow 0 266) 249) anon993_Else_correct)))))))))
(let ((anon992_Else_correct  (=> (HasDirectPerm Mask@177 null (tree temp@4)) (=> (and (= Heap@78 Heap@75) (= (ControlFlow 0 269) 266)) anon565_correct))))
(let ((anon992_Then_correct  (=> (not (HasDirectPerm Mask@177 null (tree temp@4))) (=> (and (and (= Heap@76 (MapType0Store Heap@75 null (|tree#sm| temp@4) ZeroPMask)) (= Heap@77 (MapType0Store Heap@76 null (tree temp@4) freshVersion@7))) (and (= Heap@78 Heap@77) (= (ControlFlow 0 268) 266))) anon565_correct))))
(let ((anon563_correct  (=> (= Mask@177 (MapType1Store Mask@176 null (tree temp@4) (real_2_U (+ (U_2_real (MapType1Select Mask@176 null (tree temp@4))) FullPerm)))) (=> (and (and (state Heap@75 Mask@177) (state Heap@75 Mask@177)) (and (|tree#trigger| Heap@75 (tree temp@4)) (= (MapType0Select Heap@75 null (tree temp@4)) (CombineFrames (FrameFragment (MapType0Select Heap@75 temp@4 key)) (CombineFrames (FrameFragment (MapType0Select Heap@75 temp@4 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@75 temp@4 child)) (CombineFrames (FrameFragment (MapType0Select Heap@75 temp@4 parent)) (CombineFrames (MapType0Select Heap@75 null (heapseg (MapType0Select Heap@75 temp@4 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@75 temp@4 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@75 temp@4 child) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 270) 268) anon992_Then_correct) (=> (= (ControlFlow 0 270) 269) anon992_Else_correct))))))
(let ((anon991_Else_correct  (=> (and (= (MapType0Select Heap@75 temp@4 child) null) (= (ControlFlow 0 273) 270)) anon563_correct)))
(let ((anon991_Then_correct  (=> (not (= (MapType0Select Heap@75 temp@4 child) null)) (and (=> (= (ControlFlow 0 271) (- 0 272)) (= (segParent Heap@75 (MapType0Select Heap@75 temp@4 child) null) temp@4)) (=> (= (segParent Heap@75 (MapType0Select Heap@75 temp@4 child) null) temp@4) (=> (= (ControlFlow 0 271) 270) anon563_correct))))))
(let ((anon561_correct  (and (=> (= (ControlFlow 0 274) (- 0 275)) (validChildren Heap@75 (MapType0Select Heap@75 temp@4 child) null)) (=> (validChildren Heap@75 (MapType0Select Heap@75 temp@4 child) null) (and (=> (= (ControlFlow 0 274) 271) anon991_Then_correct) (=> (= (ControlFlow 0 274) 273) anon991_Else_correct))))))
(let ((anon990_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@75 temp@4 degree)) 0) (= (ControlFlow 0 278) 274)) anon561_correct)))
(let ((anon990_Then_correct  (=> (< 0 (U_2_int (MapType0Select Heap@75 temp@4 degree))) (and (=> (= (ControlFlow 0 276) (- 0 277)) (= (segDegree Heap@75 (MapType0Select Heap@75 temp@4 child) null 0) (- (U_2_int (MapType0Select Heap@75 temp@4 degree)) 1))) (=> (= (segDegree Heap@75 (MapType0Select Heap@75 temp@4 child) null 0) (- (U_2_int (MapType0Select Heap@75 temp@4 degree)) 1)) (=> (= (ControlFlow 0 276) 274) anon561_correct))))))
(let ((anon559_correct  (=> (and (= Mask@176 (MapType1Store Mask@175 null (heapseg (MapType0Select Heap@75 temp@4 child) null) (real_2_U (- (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select Heap@75 temp@4 child) null))) FullPerm)))) (InsidePredicate (tree temp@4) (MapType0Select Heap@75 null (tree temp@4)) (heapseg (MapType0Select Heap@75 temp@4 child) null) (MapType0Select Heap@75 null (heapseg (MapType0Select Heap@75 temp@4 child) null)))) (and (=> (= (ControlFlow 0 279) (- 0 280)) (= (U_2_int (MapType0Select Heap@75 temp@4 degree)) (segLength Heap@75 (MapType0Select Heap@75 temp@4 child) null))) (=> (= (U_2_int (MapType0Select Heap@75 temp@4 degree)) (segLength Heap@75 (MapType0Select Heap@75 temp@4 child) null)) (and (=> (= (ControlFlow 0 279) 276) anon990_Then_correct) (=> (= (ControlFlow 0 279) 278) anon990_Else_correct)))))))
(let ((anon989_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 283) 279)) anon559_correct)))
(let ((anon989_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 281) (- 0 282)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select Heap@75 temp@4 child) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select Heap@75 temp@4 child) null)))) (=> (= (ControlFlow 0 281) 279) anon559_correct))))))
(let ((anon557_correct  (=> (= Mask@175 (MapType1Store Mask@174 temp@4 parent (real_2_U (- (U_2_real (MapType1Select Mask@174 temp@4 parent)) FullPerm)))) (and (=> (= (ControlFlow 0 284) (- 0 285)) (<= 0 (U_2_int (MapType0Select Heap@75 temp@4 degree)))) (=> (<= 0 (U_2_int (MapType0Select Heap@75 temp@4 degree))) (and (=> (= (ControlFlow 0 284) 281) anon989_Then_correct) (=> (= (ControlFlow 0 284) 283) anon989_Else_correct)))))))
(let ((anon988_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 288) 284)) anon557_correct)))
(let ((anon988_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 286) (- 0 287)) (<= FullPerm (U_2_real (MapType1Select Mask@174 temp@4 parent)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@174 temp@4 parent))) (=> (= (ControlFlow 0 286) 284) anon557_correct))))))
(let ((anon555_correct  (=> (= Mask@174 (MapType1Store Mask@173 temp@4 child (real_2_U (- (U_2_real (MapType1Select Mask@173 temp@4 child)) FullPerm)))) (and (=> (= (ControlFlow 0 289) 286) anon988_Then_correct) (=> (= (ControlFlow 0 289) 288) anon988_Else_correct)))))
(let ((anon987_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 292) 289)) anon555_correct)))
(let ((anon987_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 290) (- 0 291)) (<= FullPerm (U_2_real (MapType1Select Mask@173 temp@4 child)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@173 temp@4 child))) (=> (= (ControlFlow 0 290) 289) anon555_correct))))))
(let ((anon553_correct  (=> (= Mask@173 (MapType1Store Mask@172 temp@4 degree (real_2_U (- (U_2_real (MapType1Select Mask@172 temp@4 degree)) FullPerm)))) (and (=> (= (ControlFlow 0 293) 290) anon987_Then_correct) (=> (= (ControlFlow 0 293) 292) anon987_Else_correct)))))
(let ((anon986_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 296) 293)) anon553_correct)))
(let ((anon986_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 294) (- 0 295)) (<= FullPerm (U_2_real (MapType1Select Mask@172 temp@4 degree)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@172 temp@4 degree))) (=> (= (ControlFlow 0 294) 293) anon553_correct))))))
(let ((anon551_correct  (=> (= Mask@172 (MapType1Store Mask@171 temp@4 key (real_2_U (- (U_2_real (MapType1Select Mask@171 temp@4 key)) FullPerm)))) (and (=> (= (ControlFlow 0 297) 294) anon986_Then_correct) (=> (= (ControlFlow 0 297) 296) anon986_Else_correct)))))
(let ((anon985_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 300) 297)) anon551_correct)))
(let ((anon985_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 298) (- 0 299)) (<= FullPerm (U_2_real (MapType1Select Mask@171 temp@4 key)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@171 temp@4 key))) (=> (= (ControlFlow 0 298) 297) anon551_correct))))))
(let ((anon549_correct  (=> (and (state Heap@74 Mask@171) (state Heap@74 Mask@171)) (and (=> (= (ControlFlow 0 301) (- 0 302)) (= FullPerm (U_2_real (MapType1Select Mask@171 temp@4 parent)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@171 temp@4 parent))) (=> (and (= Heap@75 (MapType0Store Heap@74 temp@4 parent null)) (state Heap@75 Mask@171)) (and (=> (= (ControlFlow 0 301) 298) anon985_Then_correct) (=> (= (ControlFlow 0 301) 300) anon985_Else_correct))))))))
(let ((anon984_Else_correct  (=> (and (= (MapType0Select Heap@74 temp@4 child) null) (= (ControlFlow 0 304) 301)) anon549_correct)))
(let ((anon984_Then_correct  (=> (and (and (not (= (MapType0Select Heap@74 temp@4 child) null)) (state Heap@74 Mask@171)) (and (= (segParent Heap@74 (MapType0Select Heap@74 temp@4 child) null) temp@4) (= (ControlFlow 0 303) 301))) anon549_correct)))
(let ((anon547_correct  (=> (and (state Heap@74 Mask@171) (validChildren Heap@74 (MapType0Select Heap@74 temp@4 child) null)) (and (=> (= (ControlFlow 0 305) 303) anon984_Then_correct) (=> (= (ControlFlow 0 305) 304) anon984_Else_correct)))))
(let ((anon983_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@74 temp@4 degree)) 0) (= (ControlFlow 0 307) 305)) anon547_correct)))
(let ((anon983_Then_correct  (=> (and (and (< 0 (U_2_int (MapType0Select Heap@74 temp@4 degree))) (state Heap@74 Mask@171)) (and (= (segDegree Heap@74 (MapType0Select Heap@74 temp@4 child) null 0) (- (U_2_int (MapType0Select Heap@74 temp@4 degree)) 1)) (= (ControlFlow 0 306) 305))) anon547_correct)))
(let ((anon545_correct  (=> (and (not (= temp@4 null)) (= Mask@167 (MapType1Store Mask@166 temp@4 key (real_2_U (+ (U_2_real (MapType1Select Mask@166 temp@4 key)) FullPerm))))) (=> (and (and (and (and (state Heap@74 Mask@167) (not (= temp@4 null))) (and (= Mask@168 (MapType1Store Mask@167 temp@4 degree (real_2_U (+ (U_2_real (MapType1Select Mask@167 temp@4 degree)) FullPerm)))) (state Heap@74 Mask@168))) (and (and (not (= temp@4 null)) (= Mask@169 (MapType1Store Mask@168 temp@4 child (real_2_U (+ (U_2_real (MapType1Select Mask@168 temp@4 child)) FullPerm))))) (and (state Heap@74 Mask@169) (not (= temp@4 null))))) (and (and (and (= Mask@170 (MapType1Store Mask@169 temp@4 parent (real_2_U (+ (U_2_real (MapType1Select Mask@169 temp@4 parent)) FullPerm)))) (state Heap@74 Mask@170)) (and (<= 0 (U_2_int (MapType0Select Heap@74 temp@4 degree))) (= Mask@171 (MapType1Store Mask@170 null (heapseg (MapType0Select Heap@74 temp@4 child) null) (real_2_U (+ (U_2_real (MapType1Select Mask@170 null (heapseg (MapType0Select Heap@74 temp@4 child) null))) FullPerm)))))) (and (and (InsidePredicate (tree temp@4) (MapType0Select Heap@74 null (tree temp@4)) (heapseg (MapType0Select Heap@74 temp@4 child) null) (MapType0Select Heap@74 null (heapseg (MapType0Select Heap@74 temp@4 child) null))) (state Heap@74 Mask@171)) (and (state Heap@74 Mask@171) (= (U_2_int (MapType0Select Heap@74 temp@4 degree)) (segLength Heap@74 (MapType0Select Heap@74 temp@4 child) null)))))) (and (=> (= (ControlFlow 0 308) 306) anon983_Then_correct) (=> (= (ControlFlow 0 308) 307) anon983_Else_correct))))))
(let ((anon982_Else_correct  (=> (HasDirectPerm Mask@166 null (tree temp@4)) (=> (and (= Heap@74 Heap@72) (= (ControlFlow 0 310) 308)) anon545_correct))))
(let ((anon982_Then_correct  (=> (and (and (not (HasDirectPerm Mask@166 null (tree temp@4))) (= Heap@73 (MapType0Store Heap@72 null (tree temp@4) newVersion@6))) (and (= Heap@74 Heap@73) (= (ControlFlow 0 309) 308))) anon545_correct)))
(let ((anon543_correct  (=> (= Mask@166 (MapType1Store Mask@165 null (tree temp@4) (real_2_U (- (U_2_real (MapType1Select Mask@165 null (tree temp@4))) FullPerm)))) (and (=> (= (ControlFlow 0 311) 309) anon982_Then_correct) (=> (= (ControlFlow 0 311) 310) anon982_Else_correct)))))
(let ((anon981_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 314) 311)) anon543_correct)))
(let ((anon981_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 312) (- 0 313)) (<= FullPerm (U_2_real (MapType1Select Mask@165 null (tree temp@4))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@165 null (tree temp@4)))) (=> (= (ControlFlow 0 312) 311) anon543_correct))))))
(let ((anon541_correct  (=> (and (and (state Heap@72 Mask@165) (state Heap@72 Mask@165)) (and (|tree#trigger| Heap@72 (tree temp@4)) (= (MapType0Select Heap@72 null (tree temp@4)) (CombineFrames (FrameFragment (MapType0Select Heap@72 temp@4 key)) (CombineFrames (FrameFragment (MapType0Select Heap@72 temp@4 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@72 temp@4 child)) (CombineFrames (FrameFragment (MapType0Select Heap@72 temp@4 parent)) (CombineFrames (MapType0Select Heap@72 null (heapseg (MapType0Select Heap@72 temp@4 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@72 temp@4 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@72 temp@4 child) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 315) 312) anon981_Then_correct) (=> (= (ControlFlow 0 315) 314) anon981_Else_correct)))))
(let ((anon980_Else_correct  (=> (= (MapType0Select Heap@72 temp@4 sibling) null) (=> (and (= Mask@165 Mask@164) (= (ControlFlow 0 318) 315)) anon541_correct))))
(let ((anon980_Then_correct  (=> (not (= (MapType0Select Heap@72 temp@4 sibling) null)) (=> (and (and (state Heap@72 Mask@164) (= (treeParent Heap@72 temp@4) (segParent Heap@72 (MapType0Select Heap@72 temp@4 sibling) null))) (and (= Mask@165 Mask@164) (= (ControlFlow 0 317) 315))) anon541_correct))))
(let ((anon979_Then_correct  (=> (and (not (= temp@4 null)) (= Mask@162 (MapType1Store Mask@161 null (tree temp@4) (real_2_U (+ (U_2_real (MapType1Select Mask@161 null (tree temp@4))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg temp@4 null) (MapType0Select Heap@72 null (heapseg temp@4 null)) (tree temp@4) (MapType0Select Heap@72 null (tree temp@4))) (state Heap@72 Mask@162)) (and (not (= temp@4 null)) (= Mask@163 (MapType1Store Mask@162 temp@4 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@162 temp@4 sibling)) FullPerm)))))) (and (and (state Heap@72 Mask@163) (= Mask@164 (MapType1Store Mask@163 null (heapseg (MapType0Select Heap@72 temp@4 sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@163 null (heapseg (MapType0Select Heap@72 temp@4 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg temp@4 null) (MapType0Select Heap@72 null (heapseg temp@4 null)) (heapseg (MapType0Select Heap@72 temp@4 sibling) null) (MapType0Select Heap@72 null (heapseg (MapType0Select Heap@72 temp@4 sibling) null))) (state Heap@72 Mask@164)))) (and (=> (= (ControlFlow 0 319) 317) anon980_Then_correct) (=> (= (ControlFlow 0 319) 318) anon980_Else_correct))))))
(let ((anon979_Else_correct  (=> (= temp@4 null) (=> (and (= Mask@165 Mask@161) (= (ControlFlow 0 316) 315)) anon541_correct))))
(let ((anon978_Else_correct  (=> (and (HasDirectPerm Mask@161 null (heapseg temp@4 null)) (= Heap@72 ExhaleHeap@30)) (and (=> (= (ControlFlow 0 321) 319) anon979_Then_correct) (=> (= (ControlFlow 0 321) 316) anon979_Else_correct)))))
(let ((anon978_Then_correct  (=> (not (HasDirectPerm Mask@161 null (heapseg temp@4 null))) (=> (and (= Heap@71 (MapType0Store ExhaleHeap@30 null (heapseg temp@4 null) newVersion@5)) (= Heap@72 Heap@71)) (and (=> (= (ControlFlow 0 320) 319) anon979_Then_correct) (=> (= (ControlFlow 0 320) 316) anon979_Else_correct))))))
(let ((anon536_correct  (=> (= Mask@161 (MapType1Store Mask@133 null (heapseg temp@4 null) (real_2_U (- (U_2_real (MapType1Select Mask@133 null (heapseg temp@4 null))) FullPerm)))) (and (=> (= (ControlFlow 0 322) 320) anon978_Then_correct) (=> (= (ControlFlow 0 322) 321) anon978_Else_correct)))))
(let ((anon977_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 325) 322)) anon536_correct)))
(let ((anon977_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 323) (- 0 324)) (<= FullPerm (U_2_real (MapType1Select Mask@133 null (heapseg temp@4 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@133 null (heapseg temp@4 null)))) (=> (= (ControlFlow 0 323) 322) anon536_correct))))))
(let ((anon534_correct  (=> (state ExhaleHeap@30 Mask@133) (=> (and (= (+ (segSize ExhaleHeap@30 temp@3 temp@4) (segSize ExhaleHeap@30 temp@4 null)) (- oldTreeSize@0 1)) (state ExhaleHeap@30 Mask@133)) (=> (and (and (not (= temp@4 null)) (state ExhaleHeap@30 Mask@133)) (and (|heapseg#trigger| ExhaleHeap@30 (heapseg temp@4 null)) (= (MapType0Select ExhaleHeap@30 null (heapseg temp@4 null)) (FrameFragment (ite (not (= temp@4 null)) (CombineFrames (MapType0Select ExhaleHeap@30 null (tree temp@4)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@30 temp@4 sibling)) (CombineFrames (MapType0Select ExhaleHeap@30 null (heapseg (MapType0Select ExhaleHeap@30 temp@4 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@30 temp@4 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 326) 323) anon977_Then_correct) (=> (= (ControlFlow 0 326) 325) anon977_Else_correct)))))))
(let ((anon976_Else_correct  (=> (and (= temp@3 temp@4) (= (ControlFlow 0 328) 326)) anon534_correct)))
(let ((anon976_Then_correct  (=> (and (and (not (= temp@3 temp@4)) (state ExhaleHeap@30 Mask@133)) (and (= (segParent ExhaleHeap@30 temp@3 temp@4) null) (= (ControlFlow 0 327) 326))) anon534_correct)))
(let ((anon975_Else_correct  (=> (not (and (< 0 (segLength ExhaleHeap@30 temp@3 temp@4)) (< 0 (segLength ExhaleHeap@30 temp@4 null)))) (and (=> (= (ControlFlow 0 330) 327) anon976_Then_correct) (=> (= (ControlFlow 0 330) 328) anon976_Else_correct)))))
(let ((anon975_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@30 temp@3 temp@4)) (< 0 (segLength ExhaleHeap@30 temp@4 null))) (and (state ExhaleHeap@30 Mask@133) (= (segDegree ExhaleHeap@30 temp@3 temp@4 (- (segLength ExhaleHeap@30 temp@3 temp@4) 1)) (+ (segDegree ExhaleHeap@30 temp@4 null 0) 1)))) (and (=> (= (ControlFlow 0 329) 327) anon976_Then_correct) (=> (= (ControlFlow 0 329) 328) anon976_Else_correct)))))
(let ((anon974_Then_correct  (=> (state ExhaleHeap@30 ZeroMask) (=> (and (and (and (= Mask@132 (MapType1Store ZeroMask null (heapseg temp@3 temp@4) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (heapseg temp@3 temp@4))) FullPerm)))) (state ExhaleHeap@30 Mask@132)) (and (= Mask@133 (MapType1Store Mask@132 null (heapseg temp@4 null) (real_2_U (+ (U_2_real (MapType1Select Mask@132 null (heapseg temp@4 null))) FullPerm)))) (state ExhaleHeap@30 Mask@133))) (and (and (state ExhaleHeap@30 Mask@133) (validChildren ExhaleHeap@30 temp@3 temp@4)) (and (state ExhaleHeap@30 Mask@133) (validChildren ExhaleHeap@30 temp@4 null)))) (and (=> (= (ControlFlow 0 331) 329) anon975_Then_correct) (=> (= (ControlFlow 0 331) 330) anon975_Else_correct))))))
(let ((anon705_correct true))
(let ((anon1062_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 9) 6)) anon705_correct)))
(let ((anon1062_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (<= FullPerm (U_2_real (MapType1Select Mask@159 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@159 null (heap this@@66)))) (=> (= (ControlFlow 0 7) 6) anon705_correct))))))
(let ((anon703_correct  (=> (and (= Heap@68 (MapType0Store Heap@67 null (|heap#sm| this@@66) (MapType1Store (MapType0Select Heap@67 null (|heap#sm| this@@66)) this@@66 Nodes (bool_2_U true)))) (forall ((o_144 T@U) (f_148 T@U) ) (! (let ((B@@24 (FieldTypeInv1 (type f_148))))
(let ((A@@25 (FieldTypeInv0 (type f_148))))
 (=> (and (and (= (type o_144) RefType) (= (type f_148) (FieldType A@@25 B@@24))) (or (U_2_bool (MapType1Select (MapType0Select Heap@68 null (|heap#sm| this@@66)) o_144 f_148)) (U_2_bool (MapType1Select (MapType0Select Heap@68 null (|heapseg#sm| (MapType0Select Heap@68 this@@66 Nodes) null)) o_144 f_148)))) (U_2_bool (MapType1Select newPMask@12 o_144 f_148)))))
 :qid |stdinbpl.19917:27|
 :skolemid |260|
 :pattern ( (MapType1Select newPMask@12 o_144 f_148))
))) (=> (and (and (= Heap@69 (MapType0Store Heap@68 null (|heap#sm| this@@66) newPMask@12)) (= Heap@70 (MapType0Store Heap@69 null (|heap#sm| this@@66) (MapType1Store (MapType0Select Heap@69 null (|heap#sm| this@@66)) this@@66 size (bool_2_U true))))) (and (state Heap@70 Mask@159) (state Heap@70 Mask@159))) (and (=> (= (ControlFlow 0 10) 7) anon1062_Then_correct) (=> (= (ControlFlow 0 10) 9) anon1062_Else_correct))))))
(let ((anon1061_Else_correct  (=> (HasDirectPerm Mask@159 null (heap this@@66)) (=> (and (= Heap@67 Heap@64) (= (ControlFlow 0 12) 10)) anon703_correct))))
(let ((anon1061_Then_correct  (=> (not (HasDirectPerm Mask@159 null (heap this@@66))) (=> (and (and (= Heap@65 (MapType0Store Heap@64 null (|heap#sm| this@@66) ZeroPMask)) (= Heap@66 (MapType0Store Heap@65 null (heap this@@66) freshVersion@6))) (and (= Heap@67 Heap@66) (= (ControlFlow 0 11) 10))) anon703_correct))))
(let ((anon701_correct  (=> (= Mask@158 (MapType1Store Mask@157 this@@66 size (real_2_U (- (U_2_real (MapType1Select Mask@157 this@@66 size)) FullPerm)))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (= (U_2_int (MapType0Select Heap@64 this@@66 size)) (segSize Heap@64 (MapType0Select Heap@64 this@@66 Nodes) null))) (=> (= (U_2_int (MapType0Select Heap@64 this@@66 size)) (segSize Heap@64 (MapType0Select Heap@64 this@@66 Nodes) null)) (=> (= Mask@159 (MapType1Store Mask@158 null (heap this@@66) (real_2_U (+ (U_2_real (MapType1Select Mask@158 null (heap this@@66))) FullPerm)))) (=> (and (and (state Heap@64 Mask@159) (state Heap@64 Mask@159)) (and (|heap#trigger| Heap@64 (heap this@@66)) (= (MapType0Select Heap@64 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@64 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@64 null (heapseg (MapType0Select Heap@64 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@64 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@64 this@@66 size)))))))) (and (=> (= (ControlFlow 0 13) 11) anon1061_Then_correct) (=> (= (ControlFlow 0 13) 12) anon1061_Else_correct)))))))))
(let ((anon1060_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 17) 13)) anon701_correct)))
(let ((anon1060_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 15) (- 0 16)) (<= FullPerm (U_2_real (MapType1Select Mask@157 this@@66 size)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@157 this@@66 size))) (=> (= (ControlFlow 0 15) 13) anon701_correct))))))
(let ((anon1059_Else_correct  (=> (= (MapType0Select Heap@64 this@@66 Nodes) null) (and (=> (= (ControlFlow 0 20) 15) anon1060_Then_correct) (=> (= (ControlFlow 0 20) 17) anon1060_Else_correct)))))
(let ((anon1059_Then_correct  (=> (not (= (MapType0Select Heap@64 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (= (segParent Heap@64 (MapType0Select Heap@64 this@@66 Nodes) null) null)) (=> (= (segParent Heap@64 (MapType0Select Heap@64 this@@66 Nodes) null) null) (and (=> (= (ControlFlow 0 18) 15) anon1060_Then_correct) (=> (= (ControlFlow 0 18) 17) anon1060_Else_correct)))))))
(let ((anon697_correct  (=> (and (= Mask@157 (MapType1Store Mask@156 null (heapseg (MapType0Select Heap@64 this@@66 Nodes) null) (real_2_U (- (U_2_real (MapType1Select Mask@156 null (heapseg (MapType0Select Heap@64 this@@66 Nodes) null))) FullPerm)))) (InsidePredicate (heap this@@66) (MapType0Select Heap@64 null (heap this@@66)) (heapseg (MapType0Select Heap@64 this@@66 Nodes) null) (MapType0Select Heap@64 null (heapseg (MapType0Select Heap@64 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (sorted Heap@64 (MapType0Select Heap@64 this@@66 Nodes) null)) (=> (sorted Heap@64 (MapType0Select Heap@64 this@@66 Nodes) null) (and (=> (= (ControlFlow 0 21) 18) anon1059_Then_correct) (=> (= (ControlFlow 0 21) 20) anon1059_Else_correct)))))))
(let ((anon1058_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 25) 21)) anon697_correct)))
(let ((anon1058_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 23) (- 0 24)) (<= FullPerm (U_2_real (MapType1Select Mask@156 null (heapseg (MapType0Select Heap@64 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@156 null (heapseg (MapType0Select Heap@64 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 23) 21) anon697_correct))))))
(let ((anon695_correct  (=> (= Mask@156 (MapType1Store Mask@155 this@@66 Nodes (real_2_U (- (U_2_real (MapType1Select Mask@155 this@@66 Nodes)) FullPerm)))) (and (=> (= (ControlFlow 0 26) 23) anon1058_Then_correct) (=> (= (ControlFlow 0 26) 25) anon1058_Else_correct)))))
(let ((anon1057_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 29) 26)) anon695_correct)))
(let ((anon1057_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 27) (- 0 28)) (<= FullPerm (U_2_real (MapType1Select Mask@155 this@@66 Nodes)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@155 this@@66 Nodes))) (=> (= (ControlFlow 0 27) 26) anon695_correct))))))
(let ((anon693_correct  (=> (state Heap@64 Mask@155) (and (=> (= (ControlFlow 0 30) 27) anon1057_Then_correct) (=> (= (ControlFlow 0 30) 29) anon1057_Else_correct)))))
(let ((anon692_correct  (=> (state Heap@63 Mask@154) (=> (and (and (state Heap@63 Mask@154) (= Mask@155 Mask@154)) (and (= Heap@64 Heap@63) (= (ControlFlow 0 32) 30))) anon693_correct))))
(let ((anon691_correct  (=> (and (and (state Heap@62 Mask@153) (= Heap@63 Heap@62)) (and (= Mask@154 Mask@153) (= (ControlFlow 0 35) 32))) anon692_correct)))
(let ((anon657_correct  (=> (IdenticalOnKnownLocations ExhaleHeap@30 ExhaleHeap@33 Mask@151) (=> (and (and (not (= r_1@1 null)) (= Mask@152 (MapType1Store Mask@151 null (heapseg r_1@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@151 null (heapseg r_1@1 null))) FullPerm))))) (and (state ExhaleHeap@33 Mask@152) (state ExhaleHeap@33 Mask@152))) (=> (and (and (and (sorted ExhaleHeap@33 r_1@1 null) (state ExhaleHeap@33 Mask@152)) (and (= (segSize ExhaleHeap@33 r_1@1 null) (+ (segSize ExhaleHeap@30 temp@3 null) (segSize ExhaleHeap@30 null null))) (state ExhaleHeap@33 Mask@152))) (and (and (= (segParent ExhaleHeap@33 r_1@1 null) (segParent ExhaleHeap@30 temp@3 null)) (state ExhaleHeap@33 Mask@152)) (and (U_2_bool (MapType0Select ExhaleHeap@33 r_1@1 $allocated)) (state ExhaleHeap@33 Mask@152)))) (and (=> (= (ControlFlow 0 105) (- 0 108)) (= FullPerm (U_2_real (MapType1Select Mask@152 this@@66 Nodes)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@152 this@@66 Nodes))) (=> (and (= Heap@60 (MapType0Store ExhaleHeap@33 this@@66 Nodes r_1@1)) (state Heap@60 Mask@152)) (and (=> (= (ControlFlow 0 105) (- 0 107)) (HasDirectPerm Mask@152 this@@66 size)) (=> (HasDirectPerm Mask@152 this@@66 size) (and (=> (= (ControlFlow 0 105) (- 0 106)) (= FullPerm (U_2_real (MapType1Select Mask@152 this@@66 size)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@152 this@@66 size))) (=> (= Heap@61 (MapType0Store Heap@60 this@@66 size (int_2_U (- (U_2_int (MapType0Select Heap@60 this@@66 size)) 1)))) (=> (and (and (state Heap@61 Mask@152) (= Heap@62 Heap@61)) (and (= Mask@153 Mask@152) (= (ControlFlow 0 105) 35))) anon691_correct))))))))))))))
(let ((anon1040_Else_correct  (=> (and (= null null) (= (ControlFlow 0 111) 105)) anon657_correct)))
(let ((anon1040_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 109) (- 0 110)) (= (segParent ExhaleHeap@30 temp@3 null) (segParent ExhaleHeap@30 null null))) (=> (= (segParent ExhaleHeap@30 temp@3 null) (segParent ExhaleHeap@30 null null)) (=> (= (ControlFlow 0 109) 105) anon657_correct))))))
(let ((anon1039_Else_correct  (=> (= null null) (and (=> (= (ControlFlow 0 114) 109) anon1040_Then_correct) (=> (= (ControlFlow 0 114) 111) anon1040_Else_correct)))))
(let ((anon1039_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 112) (- 0 113)) (< (segDegree ExhaleHeap@30 temp@3 null 0) (segDegree ExhaleHeap@30 null null 0))) (=> (< (segDegree ExhaleHeap@30 temp@3 null 0) (segDegree ExhaleHeap@30 null null 0)) (and (=> (= (ControlFlow 0 112) 109) anon1040_Then_correct) (=> (= (ControlFlow 0 112) 111) anon1040_Else_correct)))))))
(let ((anon653_correct  (=> (= Mask@151 (MapType1Store Mask@150 null (heapseg null null) (real_2_U (- (U_2_real (MapType1Select Mask@150 null (heapseg null null))) FullPerm)))) (and (=> (= (ControlFlow 0 115) (- 0 116)) (sorted ExhaleHeap@30 null null)) (=> (sorted ExhaleHeap@30 null null) (and (=> (= (ControlFlow 0 115) 112) anon1039_Then_correct) (=> (= (ControlFlow 0 115) 114) anon1039_Else_correct)))))))
(let ((anon1038_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 119) 115)) anon653_correct)))
(let ((anon1038_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 117) (- 0 118)) (<= FullPerm (U_2_real (MapType1Select Mask@150 null (heapseg null null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@150 null (heapseg null null)))) (=> (= (ControlFlow 0 117) 115) anon653_correct))))))
(let ((anon651_correct  (=> (= Mask@150 (MapType1Store Mask@135 null (heapseg temp@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@135 null (heapseg temp@3 null))) FullPerm)))) (and (=> (= (ControlFlow 0 120) (- 0 122)) (validChildren ExhaleHeap@30 temp@3 null)) (=> (validChildren ExhaleHeap@30 temp@3 null) (and (=> (= (ControlFlow 0 120) (- 0 121)) (< 0 (segLength ExhaleHeap@30 temp@3 null))) (=> (< 0 (segLength ExhaleHeap@30 temp@3 null)) (and (=> (= (ControlFlow 0 120) 117) anon1038_Then_correct) (=> (= (ControlFlow 0 120) 119) anon1038_Else_correct)))))))))
(let ((anon1037_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 125) 120)) anon651_correct)))
(let ((anon1037_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 123) (- 0 124)) (<= FullPerm (U_2_real (MapType1Select Mask@135 null (heapseg temp@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@135 null (heapseg temp@3 null)))) (=> (= (ControlFlow 0 123) 120) anon651_correct))))))
(let ((anon1036_Then_correct  (=> (and (= (MapType0Select ExhaleHeap@30 this@@66 Nodes) null) (not (= temp@3 null))) (and (=> (= (ControlFlow 0 126) 123) anon1037_Then_correct) (=> (= (ControlFlow 0 126) 125) anon1037_Else_correct)))))
(let ((anon690_correct  (=> (and (and (state Heap@59 Mask@149) (= Heap@62 Heap@59)) (and (= Mask@153 Mask@149) (= (ControlFlow 0 36) 35))) anon691_correct)))
(let ((anon689_correct  (=> (IdenticalOnKnownLocations ExhaleHeap@31 ExhaleHeap@32 Mask@146) (=> (and (not (= this@@66 null)) (= Mask@147 (MapType1Store Mask@146 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select Mask@146 this@@66 Nodes)) FullPerm))))) (=> (and (and (state ExhaleHeap@32 Mask@147) (= Mask@148 (MapType1Store Mask@147 null (heapseg (MapType0Select ExhaleHeap@32 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select Mask@147 null (heapseg (MapType0Select ExhaleHeap@32 this@@66 Nodes) null))) FullPerm))))) (and (state ExhaleHeap@32 Mask@148) (state ExhaleHeap@32 Mask@148))) (=> (and (and (and (sorted ExhaleHeap@32 (MapType0Select ExhaleHeap@32 this@@66 Nodes) null) (not (= (MapType0Select ExhaleHeap@32 this@@66 Nodes) null))) (and (state ExhaleHeap@32 Mask@148) (= (segSize ExhaleHeap@32 (MapType0Select ExhaleHeap@32 this@@66 Nodes) null) (+ (segSize ExhaleHeap@31 (MapType0Select ExhaleHeap@31 this@@66 Nodes) null) (segSize ExhaleHeap@31 r_1@0 null))))) (and (and (state ExhaleHeap@32 Mask@148) (= (segParent ExhaleHeap@32 (MapType0Select ExhaleHeap@32 this@@66 Nodes) null) (segParent ExhaleHeap@31 (MapType0Select ExhaleHeap@31 this@@66 Nodes) null))) (and (state ExhaleHeap@32 Mask@148) (state ExhaleHeap@32 Mask@148)))) (and (=> (= (ControlFlow 0 40) (- 0 42)) (HasDirectPerm Mask@148 this@@66 size)) (=> (HasDirectPerm Mask@148 this@@66 size) (and (=> (= (ControlFlow 0 40) (- 0 41)) (= FullPerm (U_2_real (MapType1Select Mask@148 this@@66 size)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@148 this@@66 size))) (=> (= Heap@58 (MapType0Store ExhaleHeap@32 this@@66 size (int_2_U (- (U_2_int (MapType0Select ExhaleHeap@32 this@@66 size)) 1)))) (=> (and (and (state Heap@58 Mask@148) (= Heap@59 Heap@58)) (and (= Mask@149 Mask@148) (= (ControlFlow 0 40) 36))) anon690_correct))))))))))))
(let ((anon1056_Else_correct  (=> (and (= r_1@0 null) (= (ControlFlow 0 45) 40)) anon689_correct)))
(let ((anon1056_Then_correct  (=> (not (= r_1@0 null)) (and (=> (= (ControlFlow 0 43) (- 0 44)) (= (segParent ExhaleHeap@31 (MapType0Select ExhaleHeap@31 this@@66 Nodes) null) (segParent ExhaleHeap@31 r_1@0 null))) (=> (= (segParent ExhaleHeap@31 (MapType0Select ExhaleHeap@31 this@@66 Nodes) null) (segParent ExhaleHeap@31 r_1@0 null)) (=> (= (ControlFlow 0 43) 40) anon689_correct))))))
(let ((anon687_correct  (=> (= Mask@146 (MapType1Store Mask@145 null (heapseg r_1@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@145 null (heapseg r_1@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 46) (- 0 47)) (sorted ExhaleHeap@31 r_1@0 null)) (=> (sorted ExhaleHeap@31 r_1@0 null) (and (=> (= (ControlFlow 0 46) 43) anon1056_Then_correct) (=> (= (ControlFlow 0 46) 45) anon1056_Else_correct)))))))
(let ((anon1055_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 50) 46)) anon687_correct)))
(let ((anon1055_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 48) (- 0 49)) (<= FullPerm (U_2_real (MapType1Select Mask@145 null (heapseg r_1@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@145 null (heapseg r_1@0 null)))) (=> (= (ControlFlow 0 48) 46) anon687_correct))))))
(let ((anon685_correct  (=> (= Mask@145 (MapType1Store Mask@144 null (heapseg (MapType0Select ExhaleHeap@31 this@@66 Nodes) null) (real_2_U (- (U_2_real (MapType1Select Mask@144 null (heapseg (MapType0Select ExhaleHeap@31 this@@66 Nodes) null))) FullPerm)))) (and (=> (= (ControlFlow 0 51) (- 0 53)) (sorted ExhaleHeap@31 (MapType0Select ExhaleHeap@31 this@@66 Nodes) null)) (=> (sorted ExhaleHeap@31 (MapType0Select ExhaleHeap@31 this@@66 Nodes) null) (and (=> (= (ControlFlow 0 51) (- 0 52)) (not (= (MapType0Select ExhaleHeap@31 this@@66 Nodes) null))) (=> (not (= (MapType0Select ExhaleHeap@31 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 51) 48) anon1055_Then_correct) (=> (= (ControlFlow 0 51) 50) anon1055_Else_correct)))))))))
(let ((anon1054_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 56) 51)) anon685_correct)))
(let ((anon1054_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 54) (- 0 55)) (<= FullPerm (U_2_real (MapType1Select Mask@144 null (heapseg (MapType0Select ExhaleHeap@31 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@144 null (heapseg (MapType0Select ExhaleHeap@31 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 54) 51) anon685_correct))))))
(let ((anon683_correct  (=> (= Mask@144 (MapType1Store Mask@143 this@@66 Nodes (real_2_U (- (U_2_real (MapType1Select Mask@143 this@@66 Nodes)) FullPerm)))) (and (=> (= (ControlFlow 0 57) 54) anon1054_Then_correct) (=> (= (ControlFlow 0 57) 56) anon1054_Else_correct)))))
(let ((anon1053_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 60) 57)) anon683_correct)))
(let ((anon1053_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 58) (- 0 59)) (<= FullPerm (U_2_real (MapType1Select Mask@143 this@@66 Nodes)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@143 this@@66 Nodes))) (=> (= (ControlFlow 0 58) 57) anon683_correct))))))
(let ((anon681_correct  (=> (IdenticalOnKnownLocations Heap@57 ExhaleHeap@31 Mask@142) (=> (and (and (not (= r_1@0 null)) (= Mask@143 (MapType1Store Mask@142 null (heapseg r_1@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@142 null (heapseg r_1@0 null))) FullPerm))))) (and (state ExhaleHeap@31 Mask@143) (state ExhaleHeap@31 Mask@143))) (=> (and (and (and (sorted ExhaleHeap@31 r_1@0 null) (state ExhaleHeap@31 Mask@143)) (and (= (segSize ExhaleHeap@31 r_1@0 null) (+ (segSize Heap@57 temp@3 null) (segSize Heap@57 null null))) (state ExhaleHeap@31 Mask@143))) (and (and (= (segParent ExhaleHeap@31 r_1@0 null) (segParent Heap@57 temp@3 null)) (state ExhaleHeap@31 Mask@143)) (and (U_2_bool (MapType0Select ExhaleHeap@31 r_1@0 $allocated)) (state ExhaleHeap@31 Mask@143)))) (and (=> (= (ControlFlow 0 61) 58) anon1053_Then_correct) (=> (= (ControlFlow 0 61) 60) anon1053_Else_correct)))))))
(let ((anon1052_Else_correct  (=> (and (= null null) (= (ControlFlow 0 64) 61)) anon681_correct)))
(let ((anon1052_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 62) (- 0 63)) (= (segParent Heap@57 temp@3 null) (segParent Heap@57 null null))) (=> (= (segParent Heap@57 temp@3 null) (segParent Heap@57 null null)) (=> (= (ControlFlow 0 62) 61) anon681_correct))))))
(let ((anon1051_Else_correct  (=> (= null null) (and (=> (= (ControlFlow 0 67) 62) anon1052_Then_correct) (=> (= (ControlFlow 0 67) 64) anon1052_Else_correct)))))
(let ((anon1051_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 65) (- 0 66)) (< (segDegree Heap@57 temp@3 null 0) (segDegree Heap@57 null null 0))) (=> (< (segDegree Heap@57 temp@3 null 0) (segDegree Heap@57 null null 0)) (and (=> (= (ControlFlow 0 65) 62) anon1052_Then_correct) (=> (= (ControlFlow 0 65) 64) anon1052_Else_correct)))))))
(let ((anon677_correct  (=> (= Mask@142 (MapType1Store Mask@141 null (heapseg null null) (real_2_U (- (U_2_real (MapType1Select Mask@141 null (heapseg null null))) FullPerm)))) (and (=> (= (ControlFlow 0 68) (- 0 69)) (sorted Heap@57 null null)) (=> (sorted Heap@57 null null) (and (=> (= (ControlFlow 0 68) 65) anon1051_Then_correct) (=> (= (ControlFlow 0 68) 67) anon1051_Else_correct)))))))
(let ((anon1050_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 72) 68)) anon677_correct)))
(let ((anon1050_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 70) (- 0 71)) (<= FullPerm (U_2_real (MapType1Select Mask@141 null (heapseg null null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@141 null (heapseg null null)))) (=> (= (ControlFlow 0 70) 68) anon677_correct))))))
(let ((anon675_correct  (=> (= Mask@141 (MapType1Store Mask@140 null (heapseg temp@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@140 null (heapseg temp@3 null))) FullPerm)))) (and (=> (= (ControlFlow 0 73) (- 0 75)) (validChildren Heap@57 temp@3 null)) (=> (validChildren Heap@57 temp@3 null) (and (=> (= (ControlFlow 0 73) (- 0 74)) (< 0 (segLength Heap@57 temp@3 null))) (=> (< 0 (segLength Heap@57 temp@3 null)) (and (=> (= (ControlFlow 0 73) 70) anon1050_Then_correct) (=> (= (ControlFlow 0 73) 72) anon1050_Else_correct)))))))))
(let ((anon1049_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 78) 73)) anon675_correct)))
(let ((anon1049_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 76) (- 0 77)) (<= FullPerm (U_2_real (MapType1Select Mask@140 null (heapseg temp@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@140 null (heapseg temp@3 null)))) (=> (= (ControlFlow 0 76) 73) anon675_correct))))))
(let ((anon673_correct  (=> (and (state Heap@57 Mask@140) (state Heap@57 Mask@140)) (and (=> (= (ControlFlow 0 79) 76) anon1049_Then_correct) (=> (= (ControlFlow 0 79) 78) anon1049_Else_correct)))))
(let ((anon1048_Else_correct  (=> (= null null) (=> (and (= Heap@57 Heap@53) (= (ControlFlow 0 81) 79)) anon673_correct))))
(let ((anon1048_Then_correct  (=> (and (and (and (not (= null null)) (forall ((o_142 T@U) (f_146 T@U) ) (! (let ((B@@25 (FieldTypeInv1 (type f_146))))
(let ((A@@26 (FieldTypeInv0 (type f_146))))
 (=> (and (and (= (type o_142) RefType) (= (type f_146) (FieldType A@@26 B@@25))) (or (U_2_bool (MapType1Select (MapType0Select Heap@53 null (|heapseg#sm| null null)) o_142 f_146)) (U_2_bool (MapType1Select (MapType0Select Heap@53 null (|tree#sm| null)) o_142 f_146)))) (U_2_bool (MapType1Select newPMask@10 o_142 f_146)))))
 :qid |stdinbpl.19720:45|
 :skolemid |258|
 :pattern ( (MapType1Select newPMask@10 o_142 f_146))
))) (and (= Heap@54 (MapType0Store Heap@53 null (|heapseg#sm| null null) newPMask@10)) (= Heap@55 (MapType0Store Heap@54 null (|heapseg#sm| null null) (MapType1Store (MapType0Select Heap@54 null (|heapseg#sm| null null)) null sibling (bool_2_U true)))))) (and (and (forall ((o_143 T@U) (f_147 T@U) ) (! (let ((B@@26 (FieldTypeInv1 (type f_147))))
(let ((A@@27 (FieldTypeInv0 (type f_147))))
 (=> (and (and (= (type o_143) RefType) (= (type f_147) (FieldType A@@27 B@@26))) (or (U_2_bool (MapType1Select (MapType0Select Heap@55 null (|heapseg#sm| null null)) o_143 f_147)) (U_2_bool (MapType1Select (MapType0Select Heap@55 null (|heapseg#sm| (MapType0Select Heap@55 null sibling) null)) o_143 f_147)))) (U_2_bool (MapType1Select newPMask@11 o_143 f_147)))))
 :qid |stdinbpl.19727:45|
 :skolemid |259|
 :pattern ( (MapType1Select newPMask@11 o_143 f_147))
)) (= Heap@56 (MapType0Store Heap@55 null (|heapseg#sm| null null) newPMask@11))) (and (= Heap@57 Heap@56) (= (ControlFlow 0 80) 79)))) anon673_correct)))
(let ((anon1047_Else_correct  (=> (and (HasDirectPerm Mask@140 null (heapseg null null)) (= Heap@53 ExhaleHeap@30)) (and (=> (= (ControlFlow 0 83) 80) anon1048_Then_correct) (=> (= (ControlFlow 0 83) 81) anon1048_Else_correct)))))
(let ((anon1047_Then_correct  (=> (and (and (not (HasDirectPerm Mask@140 null (heapseg null null))) (= Heap@51 (MapType0Store ExhaleHeap@30 null (|heapseg#sm| null null) ZeroPMask))) (and (= Heap@52 (MapType0Store Heap@51 null (heapseg null null) freshVersion@5)) (= Heap@53 Heap@52))) (and (=> (= (ControlFlow 0 82) 80) anon1048_Then_correct) (=> (= (ControlFlow 0 82) 81) anon1048_Else_correct)))))
(let ((anon669_correct  (=> (= Mask@140 (MapType1Store Mask@139 null (heapseg null null) (real_2_U (+ (U_2_real (MapType1Select Mask@139 null (heapseg null null))) FullPerm)))) (=> (and (and (state ExhaleHeap@30 Mask@140) (state ExhaleHeap@30 Mask@140)) (and (|heapseg#trigger| ExhaleHeap@30 (heapseg null null)) (= (MapType0Select ExhaleHeap@30 null (heapseg null null)) (FrameFragment (ite (not (= null null)) (CombineFrames (MapType0Select ExhaleHeap@30 null (tree null)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@30 null sibling)) (CombineFrames (MapType0Select ExhaleHeap@30 null (heapseg (MapType0Select ExhaleHeap@30 null sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@30 null sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 84) 82) anon1047_Then_correct) (=> (= (ControlFlow 0 84) 83) anon1047_Else_correct))))))
(let ((anon1046_Else_correct  (=> (= (MapType0Select ExhaleHeap@30 null sibling) null) (=> (and (= Mask@139 Mask@138) (= (ControlFlow 0 88) 84)) anon669_correct))))
(let ((anon1046_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@30 null sibling) null)) (and (=> (= (ControlFlow 0 86) (- 0 87)) (= (treeParent ExhaleHeap@30 null) (segParent ExhaleHeap@30 (MapType0Select ExhaleHeap@30 null sibling) null))) (=> (= (treeParent ExhaleHeap@30 null) (segParent ExhaleHeap@30 (MapType0Select ExhaleHeap@30 null sibling) null)) (=> (and (= Mask@139 Mask@138) (= (ControlFlow 0 86) 84)) anon669_correct))))))
(let ((anon667_correct  (=> (and (= Mask@138 (MapType1Store Mask@137 null (heapseg (MapType0Select ExhaleHeap@30 null sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@137 null (heapseg (MapType0Select ExhaleHeap@30 null sibling) null))) FullPerm)))) (InsidePredicate (heapseg null null) (MapType0Select ExhaleHeap@30 null (heapseg null null)) (heapseg (MapType0Select ExhaleHeap@30 null sibling) null) (MapType0Select ExhaleHeap@30 null (heapseg (MapType0Select ExhaleHeap@30 null sibling) null)))) (and (=> (= (ControlFlow 0 89) 86) anon1046_Then_correct) (=> (= (ControlFlow 0 89) 88) anon1046_Else_correct)))))
(let ((anon1045_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 92) 89)) anon667_correct)))
(let ((anon1045_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 90) (- 0 91)) (<= FullPerm (U_2_real (MapType1Select Mask@137 null (heapseg (MapType0Select ExhaleHeap@30 null sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@137 null (heapseg (MapType0Select ExhaleHeap@30 null sibling) null)))) (=> (= (ControlFlow 0 90) 89) anon667_correct))))))
(let ((anon665_correct  (=> (= Mask@137 (MapType1Store Mask@136 null sibling (real_2_U (- (U_2_real (MapType1Select Mask@136 null sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 93) 90) anon1045_Then_correct) (=> (= (ControlFlow 0 93) 92) anon1045_Else_correct)))))
(let ((anon1044_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 96) 93)) anon665_correct)))
(let ((anon1044_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 94) (- 0 95)) (<= FullPerm (U_2_real (MapType1Select Mask@136 null sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@136 null sibling))) (=> (= (ControlFlow 0 94) 93) anon665_correct))))))
(let ((anon663_correct  (=> (and (= Mask@136 (MapType1Store Mask@135 null (tree null) (real_2_U (- (U_2_real (MapType1Select Mask@135 null (tree null))) FullPerm)))) (InsidePredicate (heapseg null null) (MapType0Select ExhaleHeap@30 null (heapseg null null)) (tree null) (MapType0Select ExhaleHeap@30 null (tree null)))) (and (=> (= (ControlFlow 0 97) 94) anon1044_Then_correct) (=> (= (ControlFlow 0 97) 96) anon1044_Else_correct)))))
(let ((anon1043_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 100) 97)) anon663_correct)))
(let ((anon1043_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 98) (- 0 99)) (<= FullPerm (U_2_real (MapType1Select Mask@135 null (tree null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@135 null (tree null)))) (=> (= (ControlFlow 0 98) 97) anon663_correct))))))
(let ((anon1042_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 101) 98) anon1043_Then_correct) (=> (= (ControlFlow 0 101) 100) anon1043_Else_correct)))))
(let ((anon1042_Else_correct  (=> (= null null) (=> (and (= Mask@139 Mask@135) (= (ControlFlow 0 85) 84)) anon669_correct))))
(let ((anon1041_Else_correct  (=> (not (and (not (= (MapType0Select ExhaleHeap@30 this@@66 Nodes) null)) (= temp@3 null))) (and (=> (= (ControlFlow 0 102) 101) anon1042_Then_correct) (=> (= (ControlFlow 0 102) 85) anon1042_Else_correct)))))
(let ((anon1041_Then_correct  (=> (and (not (= (MapType0Select ExhaleHeap@30 this@@66 Nodes) null)) (= temp@3 null)) (and (=> (= (ControlFlow 0 37) (- 0 39)) (HasDirectPerm Mask@135 this@@66 size)) (=> (HasDirectPerm Mask@135 this@@66 size) (and (=> (= (ControlFlow 0 37) (- 0 38)) (= FullPerm (U_2_real (MapType1Select Mask@135 this@@66 size)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@135 this@@66 size))) (=> (= Heap@50 (MapType0Store ExhaleHeap@30 this@@66 size (int_2_U (- (U_2_int (MapType0Select ExhaleHeap@30 this@@66 size)) 1)))) (=> (and (and (state Heap@50 Mask@135) (= Heap@59 Heap@50)) (and (= Mask@149 Mask@135) (= (ControlFlow 0 37) 36))) anon690_correct)))))))))
(let ((anon1036_Else_correct  (=> (not (and (= (MapType0Select ExhaleHeap@30 this@@66 Nodes) null) (not (= temp@3 null)))) (and (=> (= (ControlFlow 0 103) (- 0 104)) (HasDirectPerm Mask@135 this@@66 Nodes)) (=> (HasDirectPerm Mask@135 this@@66 Nodes) (and (=> (= (ControlFlow 0 103) 37) anon1041_Then_correct) (=> (= (ControlFlow 0 103) 102) anon1041_Else_correct)))))))
(let ((anon1035_Else_correct  (=> (not (and (= (MapType0Select ExhaleHeap@30 this@@66 Nodes) null) (= temp@3 null))) (and (=> (= (ControlFlow 0 127) (- 0 128)) (HasDirectPerm Mask@135 this@@66 Nodes)) (=> (HasDirectPerm Mask@135 this@@66 Nodes) (and (=> (= (ControlFlow 0 127) 126) anon1036_Then_correct) (=> (= (ControlFlow 0 127) 103) anon1036_Else_correct)))))))
(let ((anon1035_Then_correct  (=> (and (= (MapType0Select ExhaleHeap@30 this@@66 Nodes) null) (= temp@3 null)) (and (=> (= (ControlFlow 0 33) (- 0 34)) (= FullPerm (U_2_real (MapType1Select Mask@135 this@@66 size)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@135 this@@66 size))) (=> (= Heap@49 (MapType0Store ExhaleHeap@30 this@@66 size (int_2_U 0))) (=> (and (and (state Heap@49 Mask@135) (= Heap@63 Heap@49)) (and (= Mask@154 Mask@135) (= (ControlFlow 0 33) 32))) anon692_correct)))))))
(let ((anon646_correct  (=> (and (and (state ExhaleHeap@30 Mask@135) (= (+ (segSize ExhaleHeap@30 temp@3 temp@4) (segSize ExhaleHeap@30 temp@4 null)) (- oldTreeSize@0 1))) (and (state ExhaleHeap@30 Mask@135) (state ExhaleHeap@30 Mask@135))) (and (=> (= (ControlFlow 0 129) (- 0 130)) (HasDirectPerm Mask@135 this@@66 Nodes)) (=> (HasDirectPerm Mask@135 this@@66 Nodes) (and (=> (= (ControlFlow 0 129) 33) anon1035_Then_correct) (=> (= (ControlFlow 0 129) 127) anon1035_Else_correct)))))))
(let ((anon1034_Else_correct  (=> (and (= temp@3 temp@4) (= (ControlFlow 0 132) 129)) anon646_correct)))
(let ((anon1034_Then_correct  (=> (and (and (not (= temp@3 temp@4)) (state ExhaleHeap@30 Mask@135)) (and (= (segParent ExhaleHeap@30 temp@3 temp@4) null) (= (ControlFlow 0 131) 129))) anon646_correct)))
(let ((anon1033_Else_correct  (=> (not (and (< 0 (segLength ExhaleHeap@30 temp@3 temp@4)) (< 0 (segLength ExhaleHeap@30 temp@4 null)))) (and (=> (= (ControlFlow 0 134) 131) anon1034_Then_correct) (=> (= (ControlFlow 0 134) 132) anon1034_Else_correct)))))
(let ((anon1033_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@30 temp@3 temp@4)) (< 0 (segLength ExhaleHeap@30 temp@4 null))) (and (state ExhaleHeap@30 Mask@135) (= (segDegree ExhaleHeap@30 temp@3 temp@4 (- (segLength ExhaleHeap@30 temp@3 temp@4) 1)) (+ (segDegree ExhaleHeap@30 temp@4 null 0) 1)))) (and (=> (= (ControlFlow 0 133) 131) anon1034_Then_correct) (=> (= (ControlFlow 0 133) 132) anon1034_Else_correct)))))
(let ((anon974_Else_correct  (=> (and (not (not (= temp@4 null))) (state ExhaleHeap@30 Mask@129)) (=> (and (and (and (= Mask@134 (MapType1Store Mask@129 null (heapseg temp@3 temp@4) (real_2_U (+ (U_2_real (MapType1Select Mask@129 null (heapseg temp@3 temp@4))) FullPerm)))) (state ExhaleHeap@30 Mask@134)) (and (= Mask@135 (MapType1Store Mask@134 null (heapseg temp@4 null) (real_2_U (+ (U_2_real (MapType1Select Mask@134 null (heapseg temp@4 null))) FullPerm)))) (state ExhaleHeap@30 Mask@135))) (and (and (state ExhaleHeap@30 Mask@135) (validChildren ExhaleHeap@30 temp@3 temp@4)) (and (state ExhaleHeap@30 Mask@135) (validChildren ExhaleHeap@30 temp@4 null)))) (and (=> (= (ControlFlow 0 135) 133) anon1033_Then_correct) (=> (= (ControlFlow 0 135) 134) anon1033_Else_correct))))))
(let ((anon482_correct  (and (=> (= (ControlFlow 0 390) (- 0 391)) (= (+ (segSize Heap@48 temp@3 temp@3) (segSize Heap@48 temp@3 null)) (- oldTreeSize@0 1))) (=> (= (+ (segSize Heap@48 temp@3 temp@3) (segSize Heap@48 temp@3 null)) (- oldTreeSize@0 1)) (=> (IdenticalOnKnownLocations Heap@48 ExhaleHeap@30 Mask@129) (=> (and (U_2_bool (MapType0Select ExhaleHeap@30 temp@4 $allocated)) (U_2_bool (MapType0Select ExhaleHeap@30 prevTemp@1 $allocated))) (and (and (=> (= (ControlFlow 0 390) 389) anon950_Then_correct) (=> (= (ControlFlow 0 390) 331) anon974_Then_correct)) (=> (= (ControlFlow 0 390) 135) anon974_Else_correct))))))))
(let ((anon949_Else_correct  (=> (and (= temp@3 temp@3) (= (ControlFlow 0 394) 390)) anon482_correct)))
(let ((anon949_Then_correct  (=> (not (= temp@3 temp@3)) (and (=> (= (ControlFlow 0 392) (- 0 393)) (= (segParent Heap@48 temp@3 temp@3) null)) (=> (= (segParent Heap@48 temp@3 temp@3) null) (=> (= (ControlFlow 0 392) 390) anon482_correct))))))
(let ((anon948_Else_correct  (=> (not (and (< 0 (segLength Heap@48 temp@3 temp@3)) (< 0 (segLength Heap@48 temp@3 null)))) (and (=> (= (ControlFlow 0 397) 392) anon949_Then_correct) (=> (= (ControlFlow 0 397) 394) anon949_Else_correct)))))
(let ((anon948_Then_correct  (=> (and (< 0 (segLength Heap@48 temp@3 temp@3)) (< 0 (segLength Heap@48 temp@3 null))) (and (=> (= (ControlFlow 0 395) (- 0 396)) (= (segDegree Heap@48 temp@3 temp@3 (- (segLength Heap@48 temp@3 temp@3) 1)) (+ (segDegree Heap@48 temp@3 null 0) 1))) (=> (= (segDegree Heap@48 temp@3 temp@3 (- (segLength Heap@48 temp@3 temp@3) 1)) (+ (segDegree Heap@48 temp@3 null 0) 1)) (and (=> (= (ControlFlow 0 395) 392) anon949_Then_correct) (=> (= (ControlFlow 0 395) 394) anon949_Else_correct)))))))
(let ((anon478_correct  (=> (= Mask@129 (MapType1Store Mask@128 null (heapseg temp@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@128 null (heapseg temp@3 null))) FullPerm)))) (and (=> (= (ControlFlow 0 398) (- 0 400)) (validChildren Heap@48 temp@3 temp@3)) (=> (validChildren Heap@48 temp@3 temp@3) (and (=> (= (ControlFlow 0 398) (- 0 399)) (validChildren Heap@48 temp@3 null)) (=> (validChildren Heap@48 temp@3 null) (and (=> (= (ControlFlow 0 398) 395) anon948_Then_correct) (=> (= (ControlFlow 0 398) 397) anon948_Else_correct)))))))))
(let ((anon947_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 403) 398)) anon478_correct)))
(let ((anon947_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 401) (- 0 402)) (<= FullPerm (U_2_real (MapType1Select Mask@128 null (heapseg temp@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@128 null (heapseg temp@3 null)))) (=> (= (ControlFlow 0 401) 398) anon478_correct))))))
(let ((anon476_correct  (=> (= Mask@128 (MapType1Store Mask@127 null (heapseg temp@3 temp@3) (real_2_U (- (U_2_real (MapType1Select Mask@127 null (heapseg temp@3 temp@3))) FullPerm)))) (and (=> (= (ControlFlow 0 404) 401) anon947_Then_correct) (=> (= (ControlFlow 0 404) 403) anon947_Else_correct)))))
(let ((anon946_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 407) 404)) anon476_correct)))
(let ((anon946_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 405) (- 0 406)) (<= FullPerm (U_2_real (MapType1Select Mask@127 null (heapseg temp@3 temp@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@127 null (heapseg temp@3 temp@3)))) (=> (= (ControlFlow 0 405) 404) anon476_correct))))))
(let ((anon474_correct  (=> (and (state Heap@48 Mask@127) (state Heap@48 Mask@127)) (and (=> (= (ControlFlow 0 408) 405) anon946_Then_correct) (=> (= (ControlFlow 0 408) 407) anon946_Else_correct)))))
(let ((anon945_Else_correct  (=> (= temp@3 temp@3) (=> (and (= Heap@48 Heap@44) (= (ControlFlow 0 410) 408)) anon474_correct))))
(let ((anon945_Then_correct  (=> (and (and (and (not (= temp@3 temp@3)) (forall ((o_133 T@U) (f_137 T@U) ) (! (let ((B@@27 (FieldTypeInv1 (type f_137))))
(let ((A@@28 (FieldTypeInv0 (type f_137))))
 (=> (and (and (= (type o_133) RefType) (= (type f_137) (FieldType A@@28 B@@27))) (or (U_2_bool (MapType1Select (MapType0Select Heap@44 null (|heapseg#sm| temp@3 temp@3)) o_133 f_137)) (U_2_bool (MapType1Select (MapType0Select Heap@44 null (|tree#sm| temp@3)) o_133 f_137)))) (U_2_bool (MapType1Select newPMask@8 o_133 f_137)))))
 :qid |stdinbpl.18677:33|
 :skolemid |247|
 :pattern ( (MapType1Select newPMask@8 o_133 f_137))
))) (and (= Heap@45 (MapType0Store Heap@44 null (|heapseg#sm| temp@3 temp@3) newPMask@8)) (= Heap@46 (MapType0Store Heap@45 null (|heapseg#sm| temp@3 temp@3) (MapType1Store (MapType0Select Heap@45 null (|heapseg#sm| temp@3 temp@3)) temp@3 sibling (bool_2_U true)))))) (and (and (forall ((o_134 T@U) (f_138 T@U) ) (! (let ((B@@28 (FieldTypeInv1 (type f_138))))
(let ((A@@29 (FieldTypeInv0 (type f_138))))
 (=> (and (and (= (type o_134) RefType) (= (type f_138) (FieldType A@@29 B@@28))) (or (U_2_bool (MapType1Select (MapType0Select Heap@46 null (|heapseg#sm| temp@3 temp@3)) o_134 f_138)) (U_2_bool (MapType1Select (MapType0Select Heap@46 null (|heapseg#sm| (MapType0Select Heap@46 temp@3 sibling) temp@3)) o_134 f_138)))) (U_2_bool (MapType1Select newPMask@9 o_134 f_138)))))
 :qid |stdinbpl.18684:33|
 :skolemid |248|
 :pattern ( (MapType1Select newPMask@9 o_134 f_138))
)) (= Heap@47 (MapType0Store Heap@46 null (|heapseg#sm| temp@3 temp@3) newPMask@9))) (and (= Heap@48 Heap@47) (= (ControlFlow 0 409) 408)))) anon474_correct)))
(let ((anon944_Else_correct  (=> (and (HasDirectPerm Mask@127 null (heapseg temp@3 temp@3)) (= Heap@44 Heap@41)) (and (=> (= (ControlFlow 0 412) 409) anon945_Then_correct) (=> (= (ControlFlow 0 412) 410) anon945_Else_correct)))))
(let ((anon944_Then_correct  (=> (and (and (not (HasDirectPerm Mask@127 null (heapseg temp@3 temp@3))) (= Heap@42 (MapType0Store Heap@41 null (|heapseg#sm| temp@3 temp@3) ZeroPMask))) (and (= Heap@43 (MapType0Store Heap@42 null (heapseg temp@3 temp@3) freshVersion@4)) (= Heap@44 Heap@43))) (and (=> (= (ControlFlow 0 411) 409) anon945_Then_correct) (=> (= (ControlFlow 0 411) 410) anon945_Else_correct)))))
(let ((anon470_correct  (=> (= Mask@127 (MapType1Store Mask@126 null (heapseg temp@3 temp@3) (real_2_U (+ (U_2_real (MapType1Select Mask@126 null (heapseg temp@3 temp@3))) FullPerm)))) (=> (and (and (state Heap@41 Mask@127) (state Heap@41 Mask@127)) (and (|heapseg#trigger| Heap@41 (heapseg temp@3 temp@3)) (= (MapType0Select Heap@41 null (heapseg temp@3 temp@3)) (FrameFragment (ite (not (= temp@3 temp@3)) (CombineFrames (MapType0Select Heap@41 null (tree temp@3)) (CombineFrames (FrameFragment (MapType0Select Heap@41 temp@3 sibling)) (CombineFrames (MapType0Select Heap@41 null (heapseg (MapType0Select Heap@41 temp@3 sibling) temp@3)) (FrameFragment (ite (not (= (MapType0Select Heap@41 temp@3 sibling) temp@3)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 413) 411) anon944_Then_correct) (=> (= (ControlFlow 0 413) 412) anon944_Else_correct))))))
(let ((anon943_Else_correct  (=> (= (MapType0Select Heap@41 temp@3 sibling) temp@3) (=> (and (= Mask@126 Mask@125) (= (ControlFlow 0 417) 413)) anon470_correct))))
(let ((anon943_Then_correct  (=> (not (= (MapType0Select Heap@41 temp@3 sibling) temp@3)) (and (=> (= (ControlFlow 0 415) (- 0 416)) (= (treeParent Heap@41 temp@3) (segParent Heap@41 (MapType0Select Heap@41 temp@3 sibling) temp@3))) (=> (= (treeParent Heap@41 temp@3) (segParent Heap@41 (MapType0Select Heap@41 temp@3 sibling) temp@3)) (=> (and (= Mask@126 Mask@125) (= (ControlFlow 0 415) 413)) anon470_correct))))))
(let ((anon468_correct  (=> (and (= Mask@125 (MapType1Store Mask@124 null (heapseg (MapType0Select Heap@41 temp@3 sibling) temp@3) (real_2_U (- (U_2_real (MapType1Select Mask@124 null (heapseg (MapType0Select Heap@41 temp@3 sibling) temp@3))) FullPerm)))) (InsidePredicate (heapseg temp@3 temp@3) (MapType0Select Heap@41 null (heapseg temp@3 temp@3)) (heapseg (MapType0Select Heap@41 temp@3 sibling) temp@3) (MapType0Select Heap@41 null (heapseg (MapType0Select Heap@41 temp@3 sibling) temp@3)))) (and (=> (= (ControlFlow 0 418) 415) anon943_Then_correct) (=> (= (ControlFlow 0 418) 417) anon943_Else_correct)))))
(let ((anon942_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 421) 418)) anon468_correct)))
(let ((anon942_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 419) (- 0 420)) (<= FullPerm (U_2_real (MapType1Select Mask@124 null (heapseg (MapType0Select Heap@41 temp@3 sibling) temp@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@124 null (heapseg (MapType0Select Heap@41 temp@3 sibling) temp@3)))) (=> (= (ControlFlow 0 419) 418) anon468_correct))))))
(let ((anon466_correct  (=> (= Mask@124 (MapType1Store Mask@123 temp@3 sibling (real_2_U (- (U_2_real (MapType1Select Mask@123 temp@3 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 422) 419) anon942_Then_correct) (=> (= (ControlFlow 0 422) 421) anon942_Else_correct)))))
(let ((anon941_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 425) 422)) anon466_correct)))
(let ((anon941_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 423) (- 0 424)) (<= FullPerm (U_2_real (MapType1Select Mask@123 temp@3 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@123 temp@3 sibling))) (=> (= (ControlFlow 0 423) 422) anon466_correct))))))
(let ((anon464_correct  (=> (and (= Mask@123 (MapType1Store Mask@122 null (tree temp@3) (real_2_U (- (U_2_real (MapType1Select Mask@122 null (tree temp@3))) FullPerm)))) (InsidePredicate (heapseg temp@3 temp@3) (MapType0Select Heap@41 null (heapseg temp@3 temp@3)) (tree temp@3) (MapType0Select Heap@41 null (tree temp@3)))) (and (=> (= (ControlFlow 0 426) 423) anon941_Then_correct) (=> (= (ControlFlow 0 426) 425) anon941_Else_correct)))))
(let ((anon940_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 429) 426)) anon464_correct)))
(let ((anon940_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 427) (- 0 428)) (<= FullPerm (U_2_real (MapType1Select Mask@122 null (tree temp@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@122 null (tree temp@3)))) (=> (= (ControlFlow 0 427) 426) anon464_correct))))))
(let ((anon939_Then_correct  (=> (not (= temp@3 temp@3)) (and (=> (= (ControlFlow 0 430) 427) anon940_Then_correct) (=> (= (ControlFlow 0 430) 429) anon940_Else_correct)))))
(let ((anon939_Else_correct  (=> (= temp@3 temp@3) (=> (and (= Mask@126 Mask@122) (= (ControlFlow 0 414) 413)) anon470_correct))))
(let ((anon461_correct  (=> (and (state Heap@41 Mask@122) (state Heap@41 Mask@122)) (and (=> (= (ControlFlow 0 431) (- 0 432)) (HasDirectPerm Mask@122 temp@2 child)) (=> (HasDirectPerm Mask@122 temp@2 child) (=> (= temp@3 (MapType0Select Heap@41 temp@2 child)) (=> (and (state Heap@41 Mask@122) (state Heap@41 Mask@122)) (and (=> (= (ControlFlow 0 431) 430) anon939_Then_correct) (=> (= (ControlFlow 0 431) 414) anon939_Else_correct)))))))))
(let ((anon938_Else_correct  (=> (and (= (MapType0Select Heap@41 temp@2 child) null) (= (ControlFlow 0 434) 431)) anon461_correct)))
(let ((anon938_Then_correct  (=> (and (and (not (= (MapType0Select Heap@41 temp@2 child) null)) (state Heap@41 Mask@122)) (and (= (segParent Heap@41 (MapType0Select Heap@41 temp@2 child) null) temp@2) (= (ControlFlow 0 433) 431))) anon461_correct)))
(let ((anon459_correct  (=> (and (state Heap@41 Mask@122) (validChildren Heap@41 (MapType0Select Heap@41 temp@2 child) null)) (and (=> (= (ControlFlow 0 435) 433) anon938_Then_correct) (=> (= (ControlFlow 0 435) 434) anon938_Else_correct)))))
(let ((anon937_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@41 temp@2 degree)) 0) (= (ControlFlow 0 437) 435)) anon459_correct)))
(let ((anon937_Then_correct  (=> (and (and (< 0 (U_2_int (MapType0Select Heap@41 temp@2 degree))) (state Heap@41 Mask@122)) (and (= (segDegree Heap@41 (MapType0Select Heap@41 temp@2 child) null 0) (- (U_2_int (MapType0Select Heap@41 temp@2 degree)) 1)) (= (ControlFlow 0 436) 435))) anon459_correct)))
(let ((anon457_correct  (=> (and (not (= temp@2 null)) (= Mask@118 (MapType1Store Mask@117 temp@2 key (real_2_U (+ (U_2_real (MapType1Select Mask@117 temp@2 key)) FullPerm))))) (=> (and (and (and (and (state Heap@41 Mask@118) (not (= temp@2 null))) (and (= Mask@119 (MapType1Store Mask@118 temp@2 degree (real_2_U (+ (U_2_real (MapType1Select Mask@118 temp@2 degree)) FullPerm)))) (state Heap@41 Mask@119))) (and (and (not (= temp@2 null)) (= Mask@120 (MapType1Store Mask@119 temp@2 child (real_2_U (+ (U_2_real (MapType1Select Mask@119 temp@2 child)) FullPerm))))) (and (state Heap@41 Mask@120) (not (= temp@2 null))))) (and (and (and (= Mask@121 (MapType1Store Mask@120 temp@2 parent (real_2_U (+ (U_2_real (MapType1Select Mask@120 temp@2 parent)) FullPerm)))) (state Heap@41 Mask@121)) (and (<= 0 (U_2_int (MapType0Select Heap@41 temp@2 degree))) (= Mask@122 (MapType1Store Mask@121 null (heapseg (MapType0Select Heap@41 temp@2 child) null) (real_2_U (+ (U_2_real (MapType1Select Mask@121 null (heapseg (MapType0Select Heap@41 temp@2 child) null))) FullPerm)))))) (and (and (InsidePredicate (tree temp@2) (MapType0Select Heap@41 null (tree temp@2)) (heapseg (MapType0Select Heap@41 temp@2 child) null) (MapType0Select Heap@41 null (heapseg (MapType0Select Heap@41 temp@2 child) null))) (state Heap@41 Mask@122)) (and (state Heap@41 Mask@122) (= (U_2_int (MapType0Select Heap@41 temp@2 degree)) (segLength Heap@41 (MapType0Select Heap@41 temp@2 child) null)))))) (and (=> (= (ControlFlow 0 438) 436) anon937_Then_correct) (=> (= (ControlFlow 0 438) 437) anon937_Else_correct))))))
(let ((anon936_Else_correct  (=> (HasDirectPerm Mask@117 null (tree temp@2)) (=> (and (= Heap@41 Heap@39) (= (ControlFlow 0 440) 438)) anon457_correct))))
(let ((anon936_Then_correct  (=> (and (and (not (HasDirectPerm Mask@117 null (tree temp@2))) (= Heap@40 (MapType0Store Heap@39 null (tree temp@2) newVersion@4))) (and (= Heap@41 Heap@40) (= (ControlFlow 0 439) 438))) anon457_correct)))
(let ((anon455_correct  (=> (= Mask@117 (MapType1Store Mask@116 null (tree temp@2) (real_2_U (- (U_2_real (MapType1Select Mask@116 null (tree temp@2))) FullPerm)))) (and (=> (= (ControlFlow 0 441) 439) anon936_Then_correct) (=> (= (ControlFlow 0 441) 440) anon936_Else_correct)))))
(let ((anon935_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 444) 441)) anon455_correct)))
(let ((anon935_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 442) (- 0 443)) (<= FullPerm (U_2_real (MapType1Select Mask@116 null (tree temp@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@116 null (tree temp@2)))) (=> (= (ControlFlow 0 442) 441) anon455_correct))))))
(let ((anon933_Else_correct  (=> (and (and (= oldTreeSize@0 (treeSize Heap@39 temp@2)) (state Heap@39 Mask@116)) (and (|tree#trigger| Heap@39 (tree temp@2)) (= (MapType0Select Heap@39 null (tree temp@2)) (CombineFrames (FrameFragment (MapType0Select Heap@39 temp@2 key)) (CombineFrames (FrameFragment (MapType0Select Heap@39 temp@2 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@39 temp@2 child)) (CombineFrames (FrameFragment (MapType0Select Heap@39 temp@2 parent)) (CombineFrames (MapType0Select Heap@39 null (heapseg (MapType0Select Heap@39 temp@2 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@39 temp@2 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@39 temp@2 child) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 445) 442) anon935_Then_correct) (=> (= (ControlFlow 0 445) 444) anon935_Else_correct)))))
(let ((anon710_Then_correct  (=> (= nodes@0 null) (=> (and (and (state Heap@1 Mask@4) (= Mask@155 Mask@4)) (and (= Heap@64 Heap@1) (= (ControlFlow 0 31) 30))) anon693_correct))))
(let ((anon452_correct true))
(let ((anon934_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 5) 2)) anon452_correct)))
(let ((anon934_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= FullPerm (U_2_real (MapType1Select Mask@116 null (tree temp@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@116 null (tree temp@2)))) (=> (= (ControlFlow 0 3) 2) anon452_correct))))))
(let ((anon449_correct  (=> (state Heap@39 Mask@116) (and (and (=> (= (ControlFlow 0 446) 445) anon933_Else_correct) (=> (= (ControlFlow 0 446) 3) anon934_Then_correct)) (=> (= (ControlFlow 0 446) 5) anon934_Else_correct)))))
(let ((anon24_correct  (=> (and (state Heap@37 Mask@115) (state Heap@37 Mask@115)) (and (=> (= (ControlFlow 0 1068) (- 0 1070)) (HasDirectPerm Mask@115 nodes@0 sibling)) (=> (HasDirectPerm Mask@115 nodes@0 sibling) (and (=> (= (ControlFlow 0 1068) (- 0 1069)) (= FullPerm (U_2_real (MapType1Select Mask@115 this@@66 Nodes)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@115 this@@66 Nodes))) (=> (and (= Heap@38 (MapType0Store Heap@37 this@@66 Nodes (MapType0Select Heap@37 nodes@0 sibling))) (state Heap@38 Mask@115)) (=> (and (and (= Mask@116 Mask@115) (= Heap@39 Heap@38)) (and (= temp@2 nodes@0) (= (ControlFlow 0 1068) 446))) anon449_correct)))))))))
(let ((anon718_Else_correct  (=> (= (MapType0Select Heap@37 nodes@0 sibling) null) (=> (and (= Mask@115 Mask@114) (= (ControlFlow 0 1073) 1068)) anon24_correct))))
(let ((anon718_Then_correct  (=> (not (= (MapType0Select Heap@37 nodes@0 sibling) null)) (=> (and (and (state Heap@37 Mask@114) (= (treeParent Heap@37 nodes@0) (segParent Heap@37 (MapType0Select Heap@37 nodes@0 sibling) null))) (and (= Mask@115 Mask@114) (= (ControlFlow 0 1072) 1068))) anon24_correct))))
(let ((anon717_Then_correct  (=> (and (not (= nodes@0 null)) (= Mask@112 (MapType1Store Mask@111 null (tree nodes@0) (real_2_U (+ (U_2_real (MapType1Select Mask@111 null (tree nodes@0))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg nodes@0 null) (MapType0Select Heap@37 null (heapseg nodes@0 null)) (tree nodes@0) (MapType0Select Heap@37 null (tree nodes@0))) (state Heap@37 Mask@112)) (and (not (= nodes@0 null)) (= Mask@113 (MapType1Store Mask@112 nodes@0 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@112 nodes@0 sibling)) FullPerm)))))) (and (and (state Heap@37 Mask@113) (= Mask@114 (MapType1Store Mask@113 null (heapseg (MapType0Select Heap@37 nodes@0 sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@113 null (heapseg (MapType0Select Heap@37 nodes@0 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg nodes@0 null) (MapType0Select Heap@37 null (heapseg nodes@0 null)) (heapseg (MapType0Select Heap@37 nodes@0 sibling) null) (MapType0Select Heap@37 null (heapseg (MapType0Select Heap@37 nodes@0 sibling) null))) (state Heap@37 Mask@114)))) (and (=> (= (ControlFlow 0 1074) 1072) anon718_Then_correct) (=> (= (ControlFlow 0 1074) 1073) anon718_Else_correct))))))
(let ((anon717_Else_correct  (=> (= nodes@0 null) (=> (and (= Mask@115 Mask@111) (= (ControlFlow 0 1071) 1068)) anon24_correct))))
(let ((anon716_Else_correct  (=> (and (HasDirectPerm Mask@111 null (heapseg nodes@0 null)) (= Heap@37 ExhaleHeap@0)) (and (=> (= (ControlFlow 0 1076) 1074) anon717_Then_correct) (=> (= (ControlFlow 0 1076) 1071) anon717_Else_correct)))))
(let ((anon716_Then_correct  (=> (not (HasDirectPerm Mask@111 null (heapseg nodes@0 null))) (=> (and (= Heap@36 (MapType0Store ExhaleHeap@0 null (heapseg nodes@0 null) newVersion@3)) (= Heap@37 Heap@36)) (and (=> (= (ControlFlow 0 1075) 1074) anon717_Then_correct) (=> (= (ControlFlow 0 1075) 1071) anon717_Else_correct))))))
(let ((anon19_correct  (=> (= Mask@111 (MapType1Store Mask@7 null (heapseg nodes@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@7 null (heapseg nodes@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 1077) 1075) anon716_Then_correct) (=> (= (ControlFlow 0 1077) 1076) anon716_Else_correct)))))
(let ((anon715_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1080) 1077)) anon19_correct)))
(let ((anon715_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1078) (- 0 1079)) (<= FullPerm (U_2_real (MapType1Select Mask@7 null (heapseg nodes@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@7 null (heapseg nodes@0 null)))) (=> (= (ControlFlow 0 1078) 1077) anon19_correct))))))
(let ((anon714_Then_correct  (=> (= minNode@0 nodes@0) (=> (and (|heapseg#trigger| ExhaleHeap@0 (heapseg nodes@0 null)) (= (MapType0Select ExhaleHeap@0 null (heapseg nodes@0 null)) (FrameFragment (ite (not (= nodes@0 null)) (CombineFrames (MapType0Select ExhaleHeap@0 null (tree nodes@0)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 nodes@0 sibling)) (CombineFrames (MapType0Select ExhaleHeap@0 null (heapseg (MapType0Select ExhaleHeap@0 nodes@0 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@0 nodes@0 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame)))) (and (=> (= (ControlFlow 0 1081) 1078) anon715_Then_correct) (=> (= (ControlFlow 0 1081) 1080) anon715_Else_correct))))))
(let ((anon448_correct  (=> (and (state ExhaleHeap@2 Mask@41) (state ExhaleHeap@2 Mask@41)) (=> (and (and (= Mask@116 Mask@41) (= Heap@39 ExhaleHeap@2)) (and (= temp@2 temp@0) (= (ControlFlow 0 447) 446))) anon449_correct))))
(let ((anon932_Else_correct  (=> (and (= prevTemp@0 null) (= (ControlFlow 0 449) 447)) anon448_correct)))
(let ((anon932_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (state ExhaleHeap@2 Mask@41)) (and (= (segParent ExhaleHeap@2 nodes@0 null) (segParent Heap@11 prevTemp@0 null)) (= (ControlFlow 0 448) 447))) anon448_correct)))
(let ((anon931_Else_correct  (=> (= nodes@0 prevTemp@0) (and (=> (= (ControlFlow 0 451) 448) anon932_Then_correct) (=> (= (ControlFlow 0 451) 449) anon932_Else_correct)))))
(let ((anon931_Then_correct  (=> (not (= nodes@0 prevTemp@0)) (=> (and (state ExhaleHeap@2 Mask@41) (= (segParent ExhaleHeap@2 nodes@0 null) (segParent Heap@11 nodes@0 prevTemp@0))) (and (=> (= (ControlFlow 0 450) 448) anon932_Then_correct) (=> (= (ControlFlow 0 450) 449) anon932_Else_correct))))))
(let ((anon444_correct  (=> (and (state ExhaleHeap@2 Mask@41) (= (segSize ExhaleHeap@2 nodes@0 null) (+ (segSize Heap@11 nodes@0 prevTemp@0) (segSize Heap@11 prevTemp@0 null)))) (and (=> (= (ControlFlow 0 452) 450) anon931_Then_correct) (=> (= (ControlFlow 0 452) 451) anon931_Else_correct)))))
(let ((anon930_Else_correct  (=> (and (not (and (validChildren Heap@11 nodes@0 prevTemp@0) (and (validChildren Heap@11 prevTemp@0 null) (=> (and (< 0 (segLength Heap@11 nodes@0 prevTemp@0)) (< 0 (segLength Heap@11 prevTemp@0 null))) (= (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (+ (segDegree Heap@11 prevTemp@0 null 0) 1)))))) (= (ControlFlow 0 454) 452)) anon444_correct)))
(let ((anon930_Then_correct  (=> (and (and (and (validChildren Heap@11 nodes@0 prevTemp@0) (and (validChildren Heap@11 prevTemp@0 null) (=> (and (< 0 (segLength Heap@11 nodes@0 prevTemp@0)) (< 0 (segLength Heap@11 prevTemp@0 null))) (= (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (+ (segDegree Heap@11 prevTemp@0 null 0) 1))))) (state ExhaleHeap@2 Mask@41)) (and (validChildren ExhaleHeap@2 nodes@0 null) (= (ControlFlow 0 453) 452))) anon444_correct)))
(let ((anon929_Else_correct  (=> (not (and (presorted Heap@11 nodes@0 prevTemp@0) (and (presorted Heap@11 prevTemp@0 null) (=> (and (< 0 (segLength Heap@11 nodes@0 prevTemp@0)) (< 0 (segLength Heap@11 prevTemp@0 null))) (and (<= (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (segDegree Heap@11 prevTemp@0 null 0)) (and (=> (and (<= 2 (segLength Heap@11 nodes@0 prevTemp@0)) (= (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 2)))) (< (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (segDegree Heap@11 prevTemp@0 null 0))) (=> (and (<= 2 (segLength Heap@11 prevTemp@0 null)) (= (segDegree Heap@11 prevTemp@0 null 0) (segDegree Heap@11 prevTemp@0 null 1))) (< (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (segDegree Heap@11 prevTemp@0 null 0))))))))) (and (=> (= (ControlFlow 0 456) 453) anon930_Then_correct) (=> (= (ControlFlow 0 456) 454) anon930_Else_correct)))))
(let ((anon929_Then_correct  (=> (and (and (presorted Heap@11 nodes@0 prevTemp@0) (and (presorted Heap@11 prevTemp@0 null) (=> (and (< 0 (segLength Heap@11 nodes@0 prevTemp@0)) (< 0 (segLength Heap@11 prevTemp@0 null))) (and (<= (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (segDegree Heap@11 prevTemp@0 null 0)) (and (=> (and (<= 2 (segLength Heap@11 nodes@0 prevTemp@0)) (= (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 2)))) (< (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (segDegree Heap@11 prevTemp@0 null 0))) (=> (and (<= 2 (segLength Heap@11 prevTemp@0 null)) (= (segDegree Heap@11 prevTemp@0 null 0) (segDegree Heap@11 prevTemp@0 null 1))) (< (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (segDegree Heap@11 prevTemp@0 null 0)))))))) (and (state ExhaleHeap@2 Mask@41) (presorted ExhaleHeap@2 nodes@0 null))) (and (=> (= (ControlFlow 0 455) 453) anon930_Then_correct) (=> (= (ControlFlow 0 455) 454) anon930_Else_correct)))))
(let ((anon928_Else_correct  (=> (not (and (sorted Heap@11 nodes@0 prevTemp@0) (and (sorted Heap@11 prevTemp@0 null) (=> (and (< 0 (segLength Heap@11 nodes@0 prevTemp@0)) (< 0 (segLength Heap@11 prevTemp@0 null))) (< (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (segDegree Heap@11 prevTemp@0 null 0)))))) (and (=> (= (ControlFlow 0 458) 455) anon929_Then_correct) (=> (= (ControlFlow 0 458) 456) anon929_Else_correct)))))
(let ((anon928_Then_correct  (=> (and (and (sorted Heap@11 nodes@0 prevTemp@0) (and (sorted Heap@11 prevTemp@0 null) (=> (and (< 0 (segLength Heap@11 nodes@0 prevTemp@0)) (< 0 (segLength Heap@11 prevTemp@0 null))) (< (segDegree Heap@11 nodes@0 prevTemp@0 (- (segLength Heap@11 nodes@0 prevTemp@0) 1)) (segDegree Heap@11 prevTemp@0 null 0))))) (and (state ExhaleHeap@2 Mask@41) (sorted ExhaleHeap@2 nodes@0 null))) (and (=> (= (ControlFlow 0 457) 455) anon929_Then_correct) (=> (= (ControlFlow 0 457) 456) anon929_Else_correct)))))
(let ((anon927_Else_correct  (=> (and (= null null) (= Mask@41 Mask@39)) (and (=> (= (ControlFlow 0 460) 457) anon928_Then_correct) (=> (= (ControlFlow 0 460) 458) anon928_Else_correct)))))
(let ((anon927_Then_correct  (=> (and (not (= null null)) (= Mask@40 (MapType1Store Mask@39 null (tree null) (real_2_U (+ (U_2_real (MapType1Select Mask@39 null (tree null))) FullPerm))))) (=> (and (and (and (state ExhaleHeap@2 Mask@40) (state ExhaleHeap@2 Mask@40)) (and (= (treeDegree ExhaleHeap@2 null) (treeDegree Heap@11 null)) (state ExhaleHeap@2 Mask@40))) (and (and (= (treeSize ExhaleHeap@2 null) (treeSize Heap@11 null)) (state ExhaleHeap@2 Mask@40)) (and (= (treeParent ExhaleHeap@2 null) (treeParent Heap@11 null)) (= Mask@41 Mask@40)))) (and (=> (= (ControlFlow 0 459) 457) anon928_Then_correct) (=> (= (ControlFlow 0 459) 458) anon928_Else_correct))))))
(let ((anon436_correct  (=> (IdenticalOnKnownLocations Heap@11 ExhaleHeap@2 Mask@38) (=> (and (and (and (= Mask@39 (MapType1Store Mask@38 null (heapseg nodes@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@38 null (heapseg nodes@0 null))) FullPerm)))) (state ExhaleHeap@2 Mask@39)) (and (state ExhaleHeap@2 Mask@39) (= (segLength ExhaleHeap@2 nodes@0 null) (+ (segLength Heap@11 nodes@0 prevTemp@0) (segLength Heap@11 prevTemp@0 null))))) (and (and (state ExhaleHeap@2 Mask@39) (forall ((i_2_1 Int) ) (!  (=> (and (<= 0 i_2_1) (< i_2_1 (segLength Heap@11 nodes@0 prevTemp@0))) (= (segDegree ExhaleHeap@2 nodes@0 null i_2_1) (segDegree Heap@11 nodes@0 prevTemp@0 i_2_1)))
 :qid |stdinbpl.18494:30|
 :skolemid |245|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@2 null (heapseg nodes@0 null)) nodes@0 null i_2_1))
 :pattern ( (|segDegree#frame| (MapType0Select Heap@11 null (heapseg nodes@0 prevTemp@0)) nodes@0 prevTemp@0 i_2_1))
))) (and (state ExhaleHeap@2 Mask@39) (forall ((i_3 Int) ) (!  (=> (and (<= (segLength Heap@11 nodes@0 prevTemp@0) i_3) (< i_3 (segLength ExhaleHeap@2 nodes@0 null))) (= (segDegree ExhaleHeap@2 nodes@0 null i_3) (segDegree Heap@11 prevTemp@0 null (- i_3 (segLength Heap@11 nodes@0 prevTemp@0)))))
 :qid |stdinbpl.18499:30|
 :skolemid |246|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@2 null (heapseg nodes@0 null)) nodes@0 null i_3))
))))) (and (=> (= (ControlFlow 0 461) 459) anon927_Then_correct) (=> (= (ControlFlow 0 461) 460) anon927_Else_correct))))))
(let ((anon926_Else_correct  (=> (and (not (and (not (= nodes@0 prevTemp@0)) (not (= prevTemp@0 null)))) (= (ControlFlow 0 464) 461)) anon436_correct)))
(let ((anon926_Then_correct  (=> (and (not (= nodes@0 prevTemp@0)) (not (= prevTemp@0 null))) (and (=> (= (ControlFlow 0 462) (- 0 463)) (= (segParent Heap@11 nodes@0 prevTemp@0) (segParent Heap@11 prevTemp@0 null))) (=> (= (segParent Heap@11 nodes@0 prevTemp@0) (segParent Heap@11 prevTemp@0 null)) (=> (= (ControlFlow 0 462) 461) anon436_correct))))))
(let ((anon433_correct  (=> (and (= Mask@37 (MapType1Store Mask@36 null (tree null) (real_2_U (- (U_2_real (MapType1Select Mask@36 null (tree null))) FullPerm)))) (= Mask@38 Mask@37)) (and (=> (= (ControlFlow 0 466) 462) anon926_Then_correct) (=> (= (ControlFlow 0 466) 464) anon926_Else_correct)))))
(let ((anon925_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 469) 466)) anon433_correct)))
(let ((anon925_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 467) (- 0 468)) (<= FullPerm (U_2_real (MapType1Select Mask@36 null (tree null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@36 null (tree null)))) (=> (= (ControlFlow 0 467) 466) anon433_correct))))))
(let ((anon924_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 470) 467) anon925_Then_correct) (=> (= (ControlFlow 0 470) 469) anon925_Else_correct)))))
(let ((anon924_Else_correct  (=> (and (= null null) (= Mask@38 Mask@36)) (and (=> (= (ControlFlow 0 465) 462) anon926_Then_correct) (=> (= (ControlFlow 0 465) 464) anon926_Else_correct)))))
(let ((anon430_correct  (=> (= Mask@36 (MapType1Store Mask@35 null (heapseg prevTemp@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@35 null (heapseg prevTemp@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 471) 470) anon924_Then_correct) (=> (= (ControlFlow 0 471) 465) anon924_Else_correct)))))
(let ((anon923_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 474) 471)) anon430_correct)))
(let ((anon923_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 472) (- 0 473)) (<= FullPerm (U_2_real (MapType1Select Mask@35 null (heapseg prevTemp@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@35 null (heapseg prevTemp@0 null)))) (=> (= (ControlFlow 0 472) 471) anon430_correct))))))
(let ((anon428_correct  (=> (= Mask@35 (MapType1Store Mask@34 null (heapseg nodes@0 prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@34 null (heapseg nodes@0 prevTemp@0))) FullPerm)))) (and (=> (= (ControlFlow 0 475) 472) anon923_Then_correct) (=> (= (ControlFlow 0 475) 474) anon923_Else_correct)))))
(let ((anon922_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 478) 475)) anon428_correct)))
(let ((anon922_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 476) (- 0 477)) (<= FullPerm (U_2_real (MapType1Select Mask@34 null (heapseg nodes@0 prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@34 null (heapseg nodes@0 prevTemp@0)))) (=> (= (ControlFlow 0 476) 475) anon428_correct))))))
(let ((anon426_correct  (=> (and (state Heap@11 Mask@34) (state Heap@11 Mask@34)) (and (=> (= (ControlFlow 0 479) 476) anon922_Then_correct) (=> (= (ControlFlow 0 479) 478) anon922_Else_correct)))))
(let ((anon921_Else_correct  (=> (= prevTemp@0 null) (=> (and (= Heap@11 Heap@7) (= (ControlFlow 0 481) 479)) anon426_correct))))
(let ((anon921_Then_correct  (=> (and (and (and (not (= prevTemp@0 null)) (forall ((o_131 T@U) (f_135 T@U) ) (! (let ((B@@29 (FieldTypeInv1 (type f_135))))
(let ((A@@30 (FieldTypeInv0 (type f_135))))
 (=> (and (and (= (type o_131) RefType) (= (type f_135) (FieldType A@@30 B@@29))) (or (U_2_bool (MapType1Select (MapType0Select Heap@7 null (|heapseg#sm| prevTemp@0 null)) o_131 f_135)) (U_2_bool (MapType1Select (MapType0Select Heap@7 null (|tree#sm| prevTemp@0)) o_131 f_135)))) (U_2_bool (MapType1Select newPMask@0 o_131 f_135)))))
 :qid |stdinbpl.18435:37|
 :skolemid |243|
 :pattern ( (MapType1Select newPMask@0 o_131 f_135))
))) (and (= Heap@8 (MapType0Store Heap@7 null (|heapseg#sm| prevTemp@0 null) newPMask@0)) (= Heap@9 (MapType0Store Heap@8 null (|heapseg#sm| prevTemp@0 null) (MapType1Store (MapType0Select Heap@8 null (|heapseg#sm| prevTemp@0 null)) prevTemp@0 sibling (bool_2_U true)))))) (and (and (forall ((o_132 T@U) (f_136 T@U) ) (! (let ((B@@30 (FieldTypeInv1 (type f_136))))
(let ((A@@31 (FieldTypeInv0 (type f_136))))
 (=> (and (and (= (type o_132) RefType) (= (type f_136) (FieldType A@@31 B@@30))) (or (U_2_bool (MapType1Select (MapType0Select Heap@9 null (|heapseg#sm| prevTemp@0 null)) o_132 f_136)) (U_2_bool (MapType1Select (MapType0Select Heap@9 null (|heapseg#sm| (MapType0Select Heap@9 prevTemp@0 sibling) null)) o_132 f_136)))) (U_2_bool (MapType1Select newPMask@1 o_132 f_136)))))
 :qid |stdinbpl.18442:37|
 :skolemid |244|
 :pattern ( (MapType1Select newPMask@1 o_132 f_136))
)) (= Heap@10 (MapType0Store Heap@9 null (|heapseg#sm| prevTemp@0 null) newPMask@1))) (and (= Heap@11 Heap@10) (= (ControlFlow 0 480) 479)))) anon426_correct)))
(let ((anon920_Else_correct  (=> (and (HasDirectPerm Mask@34 null (heapseg prevTemp@0 null)) (= Heap@7 Heap@4)) (and (=> (= (ControlFlow 0 483) 480) anon921_Then_correct) (=> (= (ControlFlow 0 483) 481) anon921_Else_correct)))))
(let ((anon920_Then_correct  (=> (and (and (not (HasDirectPerm Mask@34 null (heapseg prevTemp@0 null))) (= Heap@5 (MapType0Store Heap@4 null (|heapseg#sm| prevTemp@0 null) ZeroPMask))) (and (= Heap@6 (MapType0Store Heap@5 null (heapseg prevTemp@0 null) freshVersion@0)) (= Heap@7 Heap@6))) (and (=> (= (ControlFlow 0 482) 480) anon921_Then_correct) (=> (= (ControlFlow 0 482) 481) anon921_Else_correct)))))
(let ((anon422_correct  (=> (= Mask@34 (MapType1Store Mask@33 null (heapseg prevTemp@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@33 null (heapseg prevTemp@0 null))) FullPerm)))) (=> (and (and (state Heap@4 Mask@34) (state Heap@4 Mask@34)) (and (|heapseg#trigger| Heap@4 (heapseg prevTemp@0 null)) (= (MapType0Select Heap@4 null (heapseg prevTemp@0 null)) (FrameFragment (ite (not (= prevTemp@0 null)) (CombineFrames (MapType0Select Heap@4 null (tree prevTemp@0)) (CombineFrames (FrameFragment (MapType0Select Heap@4 prevTemp@0 sibling)) (CombineFrames (MapType0Select Heap@4 null (heapseg (MapType0Select Heap@4 prevTemp@0 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@4 prevTemp@0 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 484) 482) anon920_Then_correct) (=> (= (ControlFlow 0 484) 483) anon920_Else_correct))))))
(let ((anon919_Else_correct  (=> (= (MapType0Select Heap@4 prevTemp@0 sibling) null) (=> (and (= Mask@33 Mask@32) (= (ControlFlow 0 488) 484)) anon422_correct))))
(let ((anon919_Then_correct  (=> (not (= (MapType0Select Heap@4 prevTemp@0 sibling) null)) (and (=> (= (ControlFlow 0 486) (- 0 487)) (= (treeParent Heap@4 prevTemp@0) (segParent Heap@4 (MapType0Select Heap@4 prevTemp@0 sibling) null))) (=> (= (treeParent Heap@4 prevTemp@0) (segParent Heap@4 (MapType0Select Heap@4 prevTemp@0 sibling) null)) (=> (and (= Mask@33 Mask@32) (= (ControlFlow 0 486) 484)) anon422_correct))))))
(let ((anon420_correct  (=> (and (= Mask@32 (MapType1Store Mask@31 null (heapseg (MapType0Select Heap@4 prevTemp@0 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@31 null (heapseg (MapType0Select Heap@4 prevTemp@0 sibling) null))) FullPerm)))) (InsidePredicate (heapseg prevTemp@0 null) (MapType0Select Heap@4 null (heapseg prevTemp@0 null)) (heapseg (MapType0Select Heap@4 prevTemp@0 sibling) null) (MapType0Select Heap@4 null (heapseg (MapType0Select Heap@4 prevTemp@0 sibling) null)))) (and (=> (= (ControlFlow 0 489) 486) anon919_Then_correct) (=> (= (ControlFlow 0 489) 488) anon919_Else_correct)))))
(let ((anon918_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 492) 489)) anon420_correct)))
(let ((anon918_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 490) (- 0 491)) (<= FullPerm (U_2_real (MapType1Select Mask@31 null (heapseg (MapType0Select Heap@4 prevTemp@0 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@31 null (heapseg (MapType0Select Heap@4 prevTemp@0 sibling) null)))) (=> (= (ControlFlow 0 490) 489) anon420_correct))))))
(let ((anon418_correct  (=> (= Mask@31 (MapType1Store Mask@30 prevTemp@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@30 prevTemp@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 493) 490) anon918_Then_correct) (=> (= (ControlFlow 0 493) 492) anon918_Else_correct)))))
(let ((anon917_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 496) 493)) anon418_correct)))
(let ((anon917_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 494) (- 0 495)) (<= FullPerm (U_2_real (MapType1Select Mask@30 prevTemp@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@30 prevTemp@0 sibling))) (=> (= (ControlFlow 0 494) 493) anon418_correct))))))
(let ((anon416_correct  (=> (and (= Mask@30 (MapType1Store Mask@29 null (tree prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@29 null (tree prevTemp@0))) FullPerm)))) (InsidePredicate (heapseg prevTemp@0 null) (MapType0Select Heap@4 null (heapseg prevTemp@0 null)) (tree prevTemp@0) (MapType0Select Heap@4 null (tree prevTemp@0)))) (and (=> (= (ControlFlow 0 497) 494) anon917_Then_correct) (=> (= (ControlFlow 0 497) 496) anon917_Else_correct)))))
(let ((anon916_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 500) 497)) anon416_correct)))
(let ((anon916_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 498) (- 0 499)) (<= FullPerm (U_2_real (MapType1Select Mask@29 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 498) 497) anon416_correct))))))
(let ((anon915_Then_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 501) 498) anon916_Then_correct) (=> (= (ControlFlow 0 501) 500) anon916_Else_correct)))))
(let ((anon915_Else_correct  (=> (= prevTemp@0 null) (=> (and (= Mask@33 Mask@29) (= (ControlFlow 0 485) 484)) anon422_correct))))
(let ((anon413_correct  (=> (and (state Heap@3 Mask@29) (state Heap@3 Mask@29)) (and (=> (= (ControlFlow 0 502) (- 0 504)) (HasDirectPerm Mask@29 temp@0 sibling)) (=> (HasDirectPerm Mask@29 temp@0 sibling) (and (=> (= (ControlFlow 0 502) (- 0 503)) (= FullPerm (U_2_real (MapType1Select Mask@29 prevTemp@0 sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@29 prevTemp@0 sibling))) (=> (and (= Heap@4 (MapType0Store Heap@3 prevTemp@0 sibling (MapType0Select Heap@3 temp@0 sibling))) (state Heap@4 Mask@29)) (and (=> (= (ControlFlow 0 502) 501) anon915_Then_correct) (=> (= (ControlFlow 0 502) 485) anon915_Else_correct))))))))))
(let ((anon914_Else_correct  (=> (= (MapType0Select Heap@3 minNode@0 sibling) null) (=> (and (= Mask@29 Mask@28) (= (ControlFlow 0 507) 502)) anon413_correct))))
(let ((anon914_Then_correct  (=> (not (= (MapType0Select Heap@3 minNode@0 sibling) null)) (=> (and (and (state Heap@3 Mask@28) (= (treeParent Heap@3 minNode@0) (segParent Heap@3 (MapType0Select Heap@3 minNode@0 sibling) null))) (and (= Mask@29 Mask@28) (= (ControlFlow 0 506) 502))) anon413_correct))))
(let ((anon913_Then_correct  (=> (and (not (= minNode@0 null)) (= Mask@26 (MapType1Store Mask@25 null (tree minNode@0) (real_2_U (+ (U_2_real (MapType1Select Mask@25 null (tree minNode@0))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg minNode@0 null) (MapType0Select Heap@3 null (heapseg minNode@0 null)) (tree minNode@0) (MapType0Select Heap@3 null (tree minNode@0))) (state Heap@3 Mask@26)) (and (not (= minNode@0 null)) (= Mask@27 (MapType1Store Mask@26 minNode@0 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@26 minNode@0 sibling)) FullPerm)))))) (and (and (state Heap@3 Mask@27) (= Mask@28 (MapType1Store Mask@27 null (heapseg (MapType0Select Heap@3 minNode@0 sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@27 null (heapseg (MapType0Select Heap@3 minNode@0 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg minNode@0 null) (MapType0Select Heap@3 null (heapseg minNode@0 null)) (heapseg (MapType0Select Heap@3 minNode@0 sibling) null) (MapType0Select Heap@3 null (heapseg (MapType0Select Heap@3 minNode@0 sibling) null))) (state Heap@3 Mask@28)))) (and (=> (= (ControlFlow 0 508) 506) anon914_Then_correct) (=> (= (ControlFlow 0 508) 507) anon914_Else_correct))))))
(let ((anon913_Else_correct  (=> (= minNode@0 null) (=> (and (= Mask@29 Mask@25) (= (ControlFlow 0 505) 502)) anon413_correct))))
(let ((anon912_Else_correct  (=> (and (HasDirectPerm Mask@25 null (heapseg minNode@0 null)) (= Heap@3 ExhaleHeap@1)) (and (=> (= (ControlFlow 0 510) 508) anon913_Then_correct) (=> (= (ControlFlow 0 510) 505) anon913_Else_correct)))))
(let ((anon912_Then_correct  (=> (not (HasDirectPerm Mask@25 null (heapseg minNode@0 null))) (=> (and (= Heap@2 (MapType0Store ExhaleHeap@1 null (heapseg minNode@0 null) newVersion@1)) (= Heap@3 Heap@2)) (and (=> (= (ControlFlow 0 509) 508) anon913_Then_correct) (=> (= (ControlFlow 0 509) 505) anon913_Else_correct))))))
(let ((anon408_correct  (=> (= Mask@25 (MapType1Store Mask@24 null (heapseg minNode@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@24 null (heapseg minNode@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 511) 509) anon912_Then_correct) (=> (= (ControlFlow 0 511) 510) anon912_Else_correct)))))
(let ((anon911_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 514) 511)) anon408_correct)))
(let ((anon911_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 512) (- 0 513)) (<= FullPerm (U_2_real (MapType1Select Mask@24 null (heapseg minNode@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@24 null (heapseg minNode@0 null)))) (=> (= (ControlFlow 0 512) 511) anon408_correct))))))
(let ((anon406_correct  (=> (state ExhaleHeap@1 Mask@24) (=> (and (|heapseg#trigger| ExhaleHeap@1 (heapseg minNode@0 null)) (= (MapType0Select ExhaleHeap@1 null (heapseg minNode@0 null)) (FrameFragment (ite (not (= minNode@0 null)) (CombineFrames (MapType0Select ExhaleHeap@1 null (tree minNode@0)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 minNode@0 sibling)) (CombineFrames (MapType0Select ExhaleHeap@1 null (heapseg (MapType0Select ExhaleHeap@1 minNode@0 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@1 minNode@0 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame)))) (and (=> (= (ControlFlow 0 515) 512) anon911_Then_correct) (=> (= (ControlFlow 0 515) 514) anon911_Else_correct))))))
(let ((anon405_correct  (=> (not (= this@@66 null)) (=> (and (= UnfoldingMask@15 (MapType1Store UnfoldingMask@14 this@@66 size (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@14 this@@66 size)) FullPerm)))) (state Heap@@61 UnfoldingMask@15)) (=> (and (and (state Heap@@61 UnfoldingMask@15) (= (U_2_int (MapType0Select Heap@@61 this@@66 size)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (state Heap@@61 UnfoldingMask@15) (= (ControlFlow 0 517) 515))) anon406_correct)))))
(let ((anon910_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 Nodes) null) (= (ControlFlow 0 519) 517)) anon405_correct)))
(let ((anon910_Then_correct  (=> (and (and (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@14)) (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) null) (= (ControlFlow 0 518) 517))) anon405_correct)))
(let ((anon403_correct  (=> (= UnfoldingMask@12 (MapType1Store Mask@0 null (heap this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heap this@@66))) FullPerm)))) (=> (and (and (and (not (= this@@66 null)) (= UnfoldingMask@13 (MapType1Store UnfoldingMask@12 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@12 this@@66 Nodes)) FullPerm))))) (and (state Heap@@61 UnfoldingMask@13) (= UnfoldingMask@14 (MapType1Store UnfoldingMask@13 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@13 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))))) (and (and (InsidePredicate (heap this@@66) (MapType0Select Heap@@61 null (heap this@@66)) (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) (state Heap@@61 UnfoldingMask@14)) (and (state Heap@@61 UnfoldingMask@14) (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 520) 518) anon910_Then_correct) (=> (= (ControlFlow 0 520) 519) anon910_Else_correct))))))
(let ((anon909_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 523) 520)) anon403_correct)))
(let ((anon909_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 521) (- 0 522)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66)))) (=> (= (ControlFlow 0 521) 520) anon403_correct))))))
(let ((anon908_Then_correct  (=> (= prevTemp@0 null) (=> (and (|heap#trigger| Heap@@61 (heap this@@66)) (= (MapType0Select Heap@@61 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@@61 this@@66 size))))))) (and (=> (= (ControlFlow 0 524) 521) anon909_Then_correct) (=> (= (ControlFlow 0 524) 523) anon909_Else_correct))))))
(let ((anon908_Else_correct  (=> (and (not (= prevTemp@0 null)) (= (ControlFlow 0 516) 515)) anon406_correct)))
(let ((anon399_correct  (=> (and (not (= this@@66 null)) (= UnfoldingMask@11 (MapType1Store UnfoldingMask@10 this@@66 size (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@10 this@@66 size)) FullPerm))))) (=> (and (and (state Heap@@61 UnfoldingMask@11) (state Heap@@61 UnfoldingMask@11)) (and (= (U_2_int (MapType0Select Heap@@61 this@@66 size)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@11))) (and (=> (= (ControlFlow 0 526) 524) anon908_Then_correct) (=> (= (ControlFlow 0 526) 516) anon908_Else_correct))))))
(let ((anon907_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 Nodes) null) (= (ControlFlow 0 528) 526)) anon399_correct)))
(let ((anon907_Then_correct  (=> (and (and (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@10)) (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) null) (= (ControlFlow 0 527) 526))) anon399_correct)))
(let ((anon397_correct  (=> (= UnfoldingMask@8 (MapType1Store Mask@0 null (heap this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heap this@@66))) FullPerm)))) (=> (and (and (and (not (= this@@66 null)) (= UnfoldingMask@9 (MapType1Store UnfoldingMask@8 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@8 this@@66 Nodes)) FullPerm))))) (and (state Heap@@61 UnfoldingMask@9) (= UnfoldingMask@10 (MapType1Store UnfoldingMask@9 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@9 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))))) (and (and (InsidePredicate (heap this@@66) (MapType0Select Heap@@61 null (heap this@@66)) (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) (state Heap@@61 UnfoldingMask@10)) (and (state Heap@@61 UnfoldingMask@10) (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 529) 527) anon907_Then_correct) (=> (= (ControlFlow 0 529) 528) anon907_Else_correct))))))
(let ((anon906_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 532) 529)) anon397_correct)))
(let ((anon906_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 530) (- 0 531)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66)))) (=> (= (ControlFlow 0 530) 529) anon397_correct))))))
(let ((anon905_Then_correct  (=> (not (= prevTemp@0 null)) (=> (and (|heap#trigger| Heap@@61 (heap this@@66)) (= (MapType0Select Heap@@61 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@@61 this@@66 size))))))) (and (=> (= (ControlFlow 0 533) 530) anon906_Then_correct) (=> (= (ControlFlow 0 533) 532) anon906_Else_correct))))))
(let ((anon905_Else_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 525) 524) anon908_Then_correct) (=> (= (ControlFlow 0 525) 516) anon908_Else_correct)))))
(let ((anon394_correct  (=> (state ExhaleHeap@1 Mask@24) (and (=> (= (ControlFlow 0 534) 533) anon905_Then_correct) (=> (= (ControlFlow 0 534) 525) anon905_Else_correct)))))
(let ((anon904_Else_correct  (=> (and (= prevTemp@0 null) (= (ControlFlow 0 536) 534)) anon394_correct)))
(let ((anon904_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (state ExhaleHeap@1 Mask@24)) (and (= (treeParent ExhaleHeap@1 prevTemp@0) null) (= (ControlFlow 0 535) 534))) anon394_correct)))
(let ((anon903_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (not (= nodes@0 prevTemp@0)))) (and (=> (= (ControlFlow 0 538) 535) anon904_Then_correct) (=> (= (ControlFlow 0 538) 536) anon904_Else_correct)))))
(let ((anon903_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (not (= nodes@0 prevTemp@0))) (and (state ExhaleHeap@1 Mask@24) (= (segParent ExhaleHeap@1 nodes@0 prevTemp@0) null))) (and (=> (= (ControlFlow 0 537) 535) anon904_Then_correct) (=> (= (ControlFlow 0 537) 536) anon904_Else_correct)))))
(let ((anon902_Else_correct  (=> (= minNode@0 null) (and (=> (= (ControlFlow 0 540) 537) anon903_Then_correct) (=> (= (ControlFlow 0 540) 538) anon903_Else_correct)))))
(let ((anon902_Then_correct  (=> (not (= minNode@0 null)) (=> (and (state ExhaleHeap@1 Mask@24) (= (segParent ExhaleHeap@1 minNode@0 null) null)) (and (=> (= (ControlFlow 0 539) 537) anon903_Then_correct) (=> (= (ControlFlow 0 539) 538) anon903_Else_correct))))))
(let ((anon901_Else_correct  (=> (= temp@0 minNode@0) (and (=> (= (ControlFlow 0 542) 539) anon902_Then_correct) (=> (= (ControlFlow 0 542) 540) anon902_Else_correct)))))
(let ((anon901_Then_correct  (=> (not (= temp@0 minNode@0)) (=> (and (state ExhaleHeap@1 Mask@24) (= (segParent ExhaleHeap@1 temp@0 minNode@0) null)) (and (=> (= (ControlFlow 0 541) 539) anon902_Then_correct) (=> (= (ControlFlow 0 541) 540) anon902_Else_correct))))))
(let ((anon900_Else_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 544) 541) anon901_Then_correct) (=> (= (ControlFlow 0 544) 542) anon901_Else_correct)))))
(let ((anon900_Then_correct  (=> (= prevTemp@0 null) (=> (and (state ExhaleHeap@1 Mask@24) (= (+ (segSize ExhaleHeap@1 temp@0 minNode@0) (segSize ExhaleHeap@1 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 543) 541) anon901_Then_correct) (=> (= (ControlFlow 0 543) 542) anon901_Else_correct))))))
(let ((anon899_Else_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 546) 543) anon900_Then_correct) (=> (= (ControlFlow 0 546) 544) anon900_Else_correct)))))
(let ((anon899_Then_correct  (=> (not (= prevTemp@0 null)) (=> (and (state ExhaleHeap@1 Mask@24) (= (+ (+ (+ (segSize ExhaleHeap@1 nodes@0 prevTemp@0) (treeSize ExhaleHeap@1 prevTemp@0)) (segSize ExhaleHeap@1 temp@0 minNode@0)) (segSize ExhaleHeap@1 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 545) 543) anon900_Then_correct) (=> (= (ControlFlow 0 545) 544) anon900_Else_correct))))))
(let ((anon898_Else_correct  (=> (= temp@0 minNode@0) (and (=> (= (ControlFlow 0 548) 545) anon899_Then_correct) (=> (= (ControlFlow 0 548) 546) anon899_Else_correct)))))
(let ((anon898_Then_correct  (=> (not (= temp@0 minNode@0)) (=> (and (state ExhaleHeap@1 Mask@24) (< (segDegree ExhaleHeap@1 temp@0 minNode@0 (- (segLength ExhaleHeap@1 temp@0 minNode@0) 1)) (segDegree ExhaleHeap@1 minNode@0 null 0))) (and (=> (= (ControlFlow 0 547) 545) anon899_Then_correct) (=> (= (ControlFlow 0 547) 546) anon899_Else_correct))))))
(let ((anon897_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (= temp@0 minNode@0))) (and (=> (= (ControlFlow 0 550) 547) anon898_Then_correct) (=> (= (ControlFlow 0 550) 548) anon898_Else_correct)))))
(let ((anon897_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (= temp@0 minNode@0)) (and (state ExhaleHeap@1 Mask@24) (< (treeDegree ExhaleHeap@1 prevTemp@0) (segDegree ExhaleHeap@1 minNode@0 null 0)))) (and (=> (= (ControlFlow 0 549) 547) anon898_Then_correct) (=> (= (ControlFlow 0 549) 548) anon898_Else_correct)))))
(let ((anon896_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (not (= temp@0 minNode@0)))) (and (=> (= (ControlFlow 0 552) 549) anon897_Then_correct) (=> (= (ControlFlow 0 552) 550) anon897_Else_correct)))))
(let ((anon896_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (not (= temp@0 minNode@0))) (and (state ExhaleHeap@1 Mask@24) (< (treeDegree ExhaleHeap@1 prevTemp@0) (segDegree ExhaleHeap@1 temp@0 minNode@0 0)))) (and (=> (= (ControlFlow 0 551) 549) anon897_Then_correct) (=> (= (ControlFlow 0 551) 550) anon897_Else_correct)))))
(let ((anon895_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (not (= prevTemp@0 nodes@0)))) (and (=> (= (ControlFlow 0 554) 551) anon896_Then_correct) (=> (= (ControlFlow 0 554) 552) anon896_Else_correct)))))
(let ((anon895_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (not (= prevTemp@0 nodes@0))) (and (state ExhaleHeap@1 Mask@24) (< (segDegree ExhaleHeap@1 nodes@0 prevTemp@0 (- (segLength ExhaleHeap@1 nodes@0 prevTemp@0) 1)) (treeDegree ExhaleHeap@1 prevTemp@0)))) (and (=> (= (ControlFlow 0 553) 551) anon896_Then_correct) (=> (= (ControlFlow 0 553) 552) anon896_Else_correct)))))
(let ((anon894_Else_correct  (=> (and (= prevTemp@0 null) (= Mask@24 Mask@21)) (and (=> (= (ControlFlow 0 556) 553) anon895_Then_correct) (=> (= (ControlFlow 0 556) 554) anon895_Else_correct)))))
(let ((anon894_Then_correct  (=> (and (and (and (not (= prevTemp@0 null)) (= Mask@22 (MapType1Store Mask@21 null (tree prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@21 null (tree prevTemp@0))) FullPerm))))) (and (state ExhaleHeap@1 Mask@22) (not (= prevTemp@0 null)))) (and (and (= Mask@23 (MapType1Store Mask@22 prevTemp@0 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@22 prevTemp@0 sibling)) FullPerm)))) (state ExhaleHeap@1 Mask@23)) (and (= (MapType0Select ExhaleHeap@1 prevTemp@0 sibling) temp@0) (= Mask@24 Mask@23)))) (and (=> (= (ControlFlow 0 555) 553) anon895_Then_correct) (=> (= (ControlFlow 0 555) 554) anon895_Else_correct)))))
(let ((anon893_Else_correct  (=> (and (= prevTemp@0 null) (= Mask@21 Mask@19)) (and (=> (= (ControlFlow 0 558) 555) anon894_Then_correct) (=> (= (ControlFlow 0 558) 556) anon894_Else_correct)))))
(let ((anon893_Then_correct  (=> (and (not (= prevTemp@0 null)) (= Mask@20 (MapType1Store Mask@19 null (heapseg nodes@0 prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@19 null (heapseg nodes@0 prevTemp@0))) FullPerm))))) (=> (and (and (state ExhaleHeap@1 Mask@20) (state ExhaleHeap@1 Mask@20)) (and (sorted ExhaleHeap@1 nodes@0 prevTemp@0) (= Mask@21 Mask@20))) (and (=> (= (ControlFlow 0 557) 555) anon894_Then_correct) (=> (= (ControlFlow 0 557) 556) anon894_Else_correct))))))
(let ((anon892_Else_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 560) 557) anon893_Then_correct) (=> (= (ControlFlow 0 560) 558) anon893_Else_correct)))))
(let ((anon892_Then_correct  (=> (and (= prevTemp@0 null) (= temp@0 nodes@0)) (and (=> (= (ControlFlow 0 559) 557) anon893_Then_correct) (=> (= (ControlFlow 0 559) 558) anon893_Else_correct)))))
(let ((anon811_Else_correct  (=> (and (not (not (= temp@0 minNode@0))) (state ExhaleHeap@1 Mask@14)) (=> (and (and (and (= Mask@18 (MapType1Store Mask@14 null (heapseg temp@0 minNode@0) (real_2_U (+ (U_2_real (MapType1Select Mask@14 null (heapseg temp@0 minNode@0))) FullPerm)))) (state ExhaleHeap@1 Mask@18)) (and (state ExhaleHeap@1 Mask@18) (sorted ExhaleHeap@1 temp@0 minNode@0))) (and (and (= Mask@19 (MapType1Store Mask@18 null (heapseg minNode@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@18 null (heapseg minNode@0 null))) FullPerm)))) (state ExhaleHeap@1 Mask@19)) (and (state ExhaleHeap@1 Mask@19) (sorted ExhaleHeap@1 minNode@0 null)))) (and (=> (= (ControlFlow 0 561) 559) anon892_Then_correct) (=> (= (ControlFlow 0 561) 560) anon892_Else_correct))))))
(let ((anon73_correct  (=> (IdenticalOnKnownLocations ExhaleHeap@0 ExhaleHeap@1 Mask@14) (=> (and (U_2_bool (MapType0Select ExhaleHeap@1 temp@0 $allocated)) (U_2_bool (MapType0Select ExhaleHeap@1 prevTemp@0 $allocated))) (and (and (=> (= (ControlFlow 0 987) 986) anon743_Then_correct) (=> (= (ControlFlow 0 987) 804) anon811_Then_correct)) (=> (= (ControlFlow 0 987) 561) anon811_Else_correct))))))
(let ((anon742_Else_correct  (=> (and (= null null) (= (ControlFlow 0 990) 987)) anon73_correct)))
(let ((anon742_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 988) (- 0 989)) (= (treeParent ExhaleHeap@0 null) null)) (=> (= (treeParent ExhaleHeap@0 null) null) (=> (= (ControlFlow 0 988) 987) anon73_correct))))))
(let ((anon741_Else_correct  (=> (not (and (not (= null null)) (not (= nodes@0 null)))) (and (=> (= (ControlFlow 0 993) 988) anon742_Then_correct) (=> (= (ControlFlow 0 993) 990) anon742_Else_correct)))))
(let ((anon741_Then_correct  (=> (and (not (= null null)) (not (= nodes@0 null))) (and (=> (= (ControlFlow 0 991) (- 0 992)) (= (segParent ExhaleHeap@0 nodes@0 null) null)) (=> (= (segParent ExhaleHeap@0 nodes@0 null) null) (and (=> (= (ControlFlow 0 991) 988) anon742_Then_correct) (=> (= (ControlFlow 0 991) 990) anon742_Else_correct)))))))
(let ((anon740_Else_correct  (=> (= minNode@0 null) (and (=> (= (ControlFlow 0 996) 991) anon741_Then_correct) (=> (= (ControlFlow 0 996) 993) anon741_Else_correct)))))
(let ((anon740_Then_correct  (=> (not (= minNode@0 null)) (and (=> (= (ControlFlow 0 994) (- 0 995)) (= (segParent ExhaleHeap@0 minNode@0 null) null)) (=> (= (segParent ExhaleHeap@0 minNode@0 null) null) (and (=> (= (ControlFlow 0 994) 991) anon741_Then_correct) (=> (= (ControlFlow 0 994) 993) anon741_Else_correct)))))))
(let ((anon739_Else_correct  (=> (= nodes@0 minNode@0) (and (=> (= (ControlFlow 0 999) 994) anon740_Then_correct) (=> (= (ControlFlow 0 999) 996) anon740_Else_correct)))))
(let ((anon739_Then_correct  (=> (not (= nodes@0 minNode@0)) (and (=> (= (ControlFlow 0 997) (- 0 998)) (= (segParent ExhaleHeap@0 nodes@0 minNode@0) null)) (=> (= (segParent ExhaleHeap@0 nodes@0 minNode@0) null) (and (=> (= (ControlFlow 0 997) 994) anon740_Then_correct) (=> (= (ControlFlow 0 997) 996) anon740_Else_correct)))))))
(let ((anon738_Else_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 1002) 997) anon739_Then_correct) (=> (= (ControlFlow 0 1002) 999) anon739_Else_correct)))))
(let ((anon738_Then_correct  (=> (= null null) (and (=> (= (ControlFlow 0 1000) (- 0 1001)) (= (+ (segSize ExhaleHeap@0 nodes@0 minNode@0) (segSize ExhaleHeap@0 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (+ (segSize ExhaleHeap@0 nodes@0 minNode@0) (segSize ExhaleHeap@0 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 1000) 997) anon739_Then_correct) (=> (= (ControlFlow 0 1000) 999) anon739_Else_correct)))))))
(let ((anon737_Else_correct  (=> (= null null) (and (=> (= (ControlFlow 0 1005) 1000) anon738_Then_correct) (=> (= (ControlFlow 0 1005) 1002) anon738_Else_correct)))))
(let ((anon737_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 1003) (- 0 1004)) (= (+ (+ (+ (segSize ExhaleHeap@0 nodes@0 null) (treeSize ExhaleHeap@0 null)) (segSize ExhaleHeap@0 nodes@0 minNode@0)) (segSize ExhaleHeap@0 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (+ (+ (+ (segSize ExhaleHeap@0 nodes@0 null) (treeSize ExhaleHeap@0 null)) (segSize ExhaleHeap@0 nodes@0 minNode@0)) (segSize ExhaleHeap@0 minNode@0 null)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 1003) 1000) anon738_Then_correct) (=> (= (ControlFlow 0 1003) 1002) anon738_Else_correct)))))))
(let ((anon736_Else_correct  (=> (= nodes@0 minNode@0) (and (=> (= (ControlFlow 0 1008) 1003) anon737_Then_correct) (=> (= (ControlFlow 0 1008) 1005) anon737_Else_correct)))))
(let ((anon736_Then_correct  (=> (not (= nodes@0 minNode@0)) (and (=> (= (ControlFlow 0 1006) (- 0 1007)) (< (segDegree ExhaleHeap@0 nodes@0 minNode@0 (- (segLength ExhaleHeap@0 nodes@0 minNode@0) 1)) (segDegree ExhaleHeap@0 minNode@0 null 0))) (=> (< (segDegree ExhaleHeap@0 nodes@0 minNode@0 (- (segLength ExhaleHeap@0 nodes@0 minNode@0) 1)) (segDegree ExhaleHeap@0 minNode@0 null 0)) (and (=> (= (ControlFlow 0 1006) 1003) anon737_Then_correct) (=> (= (ControlFlow 0 1006) 1005) anon737_Else_correct)))))))
(let ((anon735_Else_correct  (=> (not (and (not (= null null)) (= nodes@0 minNode@0))) (and (=> (= (ControlFlow 0 1011) 1006) anon736_Then_correct) (=> (= (ControlFlow 0 1011) 1008) anon736_Else_correct)))))
(let ((anon735_Then_correct  (=> (and (not (= null null)) (= nodes@0 minNode@0)) (and (=> (= (ControlFlow 0 1009) (- 0 1010)) (< (treeDegree ExhaleHeap@0 null) (segDegree ExhaleHeap@0 minNode@0 null 0))) (=> (< (treeDegree ExhaleHeap@0 null) (segDegree ExhaleHeap@0 minNode@0 null 0)) (and (=> (= (ControlFlow 0 1009) 1006) anon736_Then_correct) (=> (= (ControlFlow 0 1009) 1008) anon736_Else_correct)))))))
(let ((anon734_Else_correct  (=> (not (and (not (= null null)) (not (= nodes@0 minNode@0)))) (and (=> (= (ControlFlow 0 1014) 1009) anon735_Then_correct) (=> (= (ControlFlow 0 1014) 1011) anon735_Else_correct)))))
(let ((anon734_Then_correct  (=> (and (not (= null null)) (not (= nodes@0 minNode@0))) (and (=> (= (ControlFlow 0 1012) (- 0 1013)) (< (treeDegree ExhaleHeap@0 null) (segDegree ExhaleHeap@0 nodes@0 minNode@0 0))) (=> (< (treeDegree ExhaleHeap@0 null) (segDegree ExhaleHeap@0 nodes@0 minNode@0 0)) (and (=> (= (ControlFlow 0 1012) 1009) anon735_Then_correct) (=> (= (ControlFlow 0 1012) 1011) anon735_Else_correct)))))))
(let ((anon733_Else_correct  (=> (not (and (not (= null null)) (not (= null nodes@0)))) (and (=> (= (ControlFlow 0 1017) 1012) anon734_Then_correct) (=> (= (ControlFlow 0 1017) 1014) anon734_Else_correct)))))
(let ((anon733_Then_correct  (=> (and (not (= null null)) (not (= null nodes@0))) (and (=> (= (ControlFlow 0 1015) (- 0 1016)) (< (segDegree ExhaleHeap@0 nodes@0 null (- (segLength ExhaleHeap@0 nodes@0 null) 1)) (treeDegree ExhaleHeap@0 null))) (=> (< (segDegree ExhaleHeap@0 nodes@0 null (- (segLength ExhaleHeap@0 nodes@0 null) 1)) (treeDegree ExhaleHeap@0 null)) (and (=> (= (ControlFlow 0 1015) 1012) anon734_Then_correct) (=> (= (ControlFlow 0 1015) 1014) anon734_Else_correct)))))))
(let ((anon52_correct  (=> (= Mask@13 (MapType1Store Mask@12 null sibling (real_2_U (- (U_2_real (MapType1Select Mask@12 null sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 1019) (- 0 1020)) (= (MapType0Select ExhaleHeap@0 null sibling) nodes@0)) (=> (= (MapType0Select ExhaleHeap@0 null sibling) nodes@0) (=> (= Mask@14 Mask@13) (and (=> (= (ControlFlow 0 1019) 1015) anon733_Then_correct) (=> (= (ControlFlow 0 1019) 1017) anon733_Else_correct))))))))
(let ((anon732_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1023) 1019)) anon52_correct)))
(let ((anon732_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1021) (- 0 1022)) (<= FullPerm (U_2_real (MapType1Select Mask@12 null sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@12 null sibling))) (=> (= (ControlFlow 0 1021) 1019) anon52_correct))))))
(let ((anon50_correct  (=> (= Mask@12 (MapType1Store Mask@11 null (tree null) (real_2_U (- (U_2_real (MapType1Select Mask@11 null (tree null))) FullPerm)))) (and (=> (= (ControlFlow 0 1024) 1021) anon732_Then_correct) (=> (= (ControlFlow 0 1024) 1023) anon732_Else_correct)))))
(let ((anon731_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1027) 1024)) anon50_correct)))
(let ((anon731_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1025) (- 0 1026)) (<= FullPerm (U_2_real (MapType1Select Mask@11 null (tree null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@11 null (tree null)))) (=> (= (ControlFlow 0 1025) 1024) anon50_correct))))))
(let ((anon730_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 1028) 1025) anon731_Then_correct) (=> (= (ControlFlow 0 1028) 1027) anon731_Else_correct)))))
(let ((anon730_Else_correct  (=> (and (= null null) (= Mask@14 Mask@11)) (and (=> (= (ControlFlow 0 1018) 1015) anon733_Then_correct) (=> (= (ControlFlow 0 1018) 1017) anon733_Else_correct)))))
(let ((anon46_correct  (=> (= Mask@10 (MapType1Store Mask@9 null (heapseg nodes@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@9 null (heapseg nodes@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 1030) (- 0 1031)) (sorted ExhaleHeap@0 nodes@0 null)) (=> (sorted ExhaleHeap@0 nodes@0 null) (=> (= Mask@11 Mask@10) (and (=> (= (ControlFlow 0 1030) 1028) anon730_Then_correct) (=> (= (ControlFlow 0 1030) 1018) anon730_Else_correct))))))))
(let ((anon729_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1034) 1030)) anon46_correct)))
(let ((anon729_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1032) (- 0 1033)) (<= FullPerm (U_2_real (MapType1Select Mask@9 null (heapseg nodes@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@9 null (heapseg nodes@0 null)))) (=> (= (ControlFlow 0 1032) 1030) anon46_correct))))))
(let ((anon728_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 1035) 1032) anon729_Then_correct) (=> (= (ControlFlow 0 1035) 1034) anon729_Else_correct)))))
(let ((anon728_Else_correct  (=> (and (= null null) (= Mask@11 Mask@9)) (and (=> (= (ControlFlow 0 1029) 1028) anon730_Then_correct) (=> (= (ControlFlow 0 1029) 1018) anon730_Else_correct)))))
(let ((anon727_Else_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 1038) 1035) anon728_Then_correct) (=> (= (ControlFlow 0 1038) 1029) anon728_Else_correct)))))
(let ((anon727_Then_correct  (=> (= null null) (and (=> (= (ControlFlow 0 1036) (- 0 1037)) (= nodes@0 nodes@0)) (=> (= nodes@0 nodes@0) (and (=> (= (ControlFlow 0 1036) 1035) anon728_Then_correct) (=> (= (ControlFlow 0 1036) 1029) anon728_Else_correct)))))))
(let ((anon41_correct  (=> (= Mask@9 (MapType1Store Mask@8 null (heapseg minNode@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@8 null (heapseg minNode@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 1039) (- 0 1040)) (sorted ExhaleHeap@0 minNode@0 null)) (=> (sorted ExhaleHeap@0 minNode@0 null) (and (=> (= (ControlFlow 0 1039) 1036) anon727_Then_correct) (=> (= (ControlFlow 0 1039) 1038) anon727_Else_correct)))))))
(let ((anon726_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1043) 1039)) anon41_correct)))
(let ((anon726_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1041) (- 0 1042)) (<= FullPerm (U_2_real (MapType1Select Mask@8 null (heapseg minNode@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@8 null (heapseg minNode@0 null)))) (=> (= (ControlFlow 0 1041) 1039) anon41_correct))))))
(let ((anon39_correct  (=> (= Mask@8 (MapType1Store Mask@7 null (heapseg nodes@0 minNode@0) (real_2_U (- (U_2_real (MapType1Select Mask@7 null (heapseg nodes@0 minNode@0))) FullPerm)))) (and (=> (= (ControlFlow 0 1044) (- 0 1045)) (sorted ExhaleHeap@0 nodes@0 minNode@0)) (=> (sorted ExhaleHeap@0 nodes@0 minNode@0) (and (=> (= (ControlFlow 0 1044) 1041) anon726_Then_correct) (=> (= (ControlFlow 0 1044) 1043) anon726_Else_correct)))))))
(let ((anon725_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1048) 1044)) anon39_correct)))
(let ((anon725_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1046) (- 0 1047)) (<= FullPerm (U_2_real (MapType1Select Mask@7 null (heapseg nodes@0 minNode@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@7 null (heapseg nodes@0 minNode@0)))) (=> (= (ControlFlow 0 1046) 1044) anon39_correct))))))
(let ((anon36_correct  (=> (and (not (= this@@66 null)) (= UnfoldingMask@7 (MapType1Store UnfoldingMask@6 this@@66 size (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@6 this@@66 size)) FullPerm))))) (=> (and (and (state Heap@@61 UnfoldingMask@7) (state Heap@@61 UnfoldingMask@7)) (and (= (U_2_int (MapType0Select Heap@@61 this@@66 size)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@7))) (and (=> (= (ControlFlow 0 1050) 1046) anon725_Then_correct) (=> (= (ControlFlow 0 1050) 1048) anon725_Else_correct))))))
(let ((anon724_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 Nodes) null) (= (ControlFlow 0 1052) 1050)) anon36_correct)))
(let ((anon724_Then_correct  (=> (and (and (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@6)) (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) null) (= (ControlFlow 0 1051) 1050))) anon36_correct)))
(let ((anon34_correct  (=> (= UnfoldingMask@4 (MapType1Store Mask@0 null (heap this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heap this@@66))) FullPerm)))) (=> (and (and (and (not (= this@@66 null)) (= UnfoldingMask@5 (MapType1Store UnfoldingMask@4 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@4 this@@66 Nodes)) FullPerm))))) (and (state Heap@@61 UnfoldingMask@5) (= UnfoldingMask@6 (MapType1Store UnfoldingMask@5 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@5 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))))) (and (and (InsidePredicate (heap this@@66) (MapType0Select Heap@@61 null (heap this@@66)) (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) (state Heap@@61 UnfoldingMask@6)) (and (state Heap@@61 UnfoldingMask@6) (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 1053) 1051) anon724_Then_correct) (=> (= (ControlFlow 0 1053) 1052) anon724_Else_correct))))))
(let ((anon723_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1056) 1053)) anon34_correct)))
(let ((anon723_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1054) (- 0 1055)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66)))) (=> (= (ControlFlow 0 1054) 1053) anon34_correct))))))
(let ((anon722_Then_correct  (=> (= null null) (=> (and (|heap#trigger| Heap@@61 (heap this@@66)) (= (MapType0Select Heap@@61 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@@61 this@@66 size))))))) (and (=> (= (ControlFlow 0 1057) 1054) anon723_Then_correct) (=> (= (ControlFlow 0 1057) 1056) anon723_Else_correct))))))
(let ((anon722_Else_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 1049) 1046) anon725_Then_correct) (=> (= (ControlFlow 0 1049) 1048) anon725_Else_correct)))))
(let ((anon30_correct  (=> (and (not (= this@@66 null)) (= UnfoldingMask@3 (MapType1Store UnfoldingMask@2 this@@66 size (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@2 this@@66 size)) FullPerm))))) (=> (and (and (state Heap@@61 UnfoldingMask@3) (state Heap@@61 UnfoldingMask@3)) (and (= (U_2_int (MapType0Select Heap@@61 this@@66 size)) (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@3))) (and (=> (= (ControlFlow 0 1059) 1057) anon722_Then_correct) (=> (= (ControlFlow 0 1059) 1049) anon722_Else_correct))))))
(let ((anon721_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 Nodes) null) (= (ControlFlow 0 1061) 1059)) anon30_correct)))
(let ((anon721_Then_correct  (=> (and (and (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (state Heap@@61 UnfoldingMask@2)) (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) null) (= (ControlFlow 0 1060) 1059))) anon30_correct)))
(let ((anon28_correct  (=> (= UnfoldingMask@0 (MapType1Store Mask@0 null (heap this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heap this@@66))) FullPerm)))) (=> (and (and (and (not (= this@@66 null)) (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 this@@66 Nodes)) FullPerm))))) (and (state Heap@@61 UnfoldingMask@1) (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))))) (and (and (InsidePredicate (heap this@@66) (MapType0Select Heap@@61 null (heap this@@66)) (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) (state Heap@@61 UnfoldingMask@2)) (and (state Heap@@61 UnfoldingMask@2) (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 1062) 1060) anon721_Then_correct) (=> (= (ControlFlow 0 1062) 1061) anon721_Else_correct))))))
(let ((anon720_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1065) 1062)) anon28_correct)))
(let ((anon720_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1063) (- 0 1064)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66)))) (=> (= (ControlFlow 0 1063) 1062) anon28_correct))))))
(let ((anon719_Then_correct  (=> (not (= null null)) (=> (and (|heap#trigger| Heap@@61 (heap this@@66)) (= (MapType0Select Heap@@61 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@@61 this@@66 size))))))) (and (=> (= (ControlFlow 0 1066) 1063) anon720_Then_correct) (=> (= (ControlFlow 0 1066) 1065) anon720_Else_correct))))))
(let ((anon719_Else_correct  (=> (= null null) (and (=> (= (ControlFlow 0 1058) 1057) anon722_Then_correct) (=> (= (ControlFlow 0 1058) 1049) anon722_Else_correct)))))
(let ((anon714_Else_correct  (=> (not (= minNode@0 nodes@0)) (and (=> (= (ControlFlow 0 1067) 1066) anon719_Then_correct) (=> (= (ControlFlow 0 1067) 1058) anon719_Else_correct)))))
(let ((anon16_correct  (=> (state ExhaleHeap@0 Mask@7) (=> (and (and (= (segParent ExhaleHeap@0 minNode@0 null) (segParent Heap@1 nodes@0 null)) (state ExhaleHeap@0 Mask@7)) (and (U_2_bool (MapType0Select ExhaleHeap@0 minNode@0 $allocated)) (state ExhaleHeap@0 Mask@7))) (and (=> (= (ControlFlow 0 1082) 1081) anon714_Then_correct) (=> (= (ControlFlow 0 1082) 1067) anon714_Else_correct))))))
(let ((anon713_Else_correct  (=> (and (= nodes@0 minNode@0) (= (ControlFlow 0 1084) 1082)) anon16_correct)))
(let ((anon713_Then_correct  (=> (and (and (not (= nodes@0 minNode@0)) (state ExhaleHeap@0 Mask@7)) (and (= (segParent ExhaleHeap@0 nodes@0 minNode@0) (segParent Heap@1 nodes@0 null)) (= (ControlFlow 0 1083) 1082))) anon16_correct)))
(let ((anon14_correct  (=> (and (state ExhaleHeap@0 Mask@7) (= (+ (segSize ExhaleHeap@0 nodes@0 minNode@0) (segSize ExhaleHeap@0 minNode@0 null)) (segSize Heap@1 nodes@0 null))) (and (=> (= (ControlFlow 0 1085) 1083) anon713_Then_correct) (=> (= (ControlFlow 0 1085) 1084) anon713_Else_correct)))))
(let ((anon712_Else_correct  (=> (and (= nodes@0 minNode@0) (= (ControlFlow 0 1087) 1085)) anon14_correct)))
(let ((anon712_Then_correct  (=> (and (and (not (= nodes@0 minNode@0)) (state ExhaleHeap@0 Mask@7)) (and (< (segDegree ExhaleHeap@0 nodes@0 minNode@0 (- (segLength ExhaleHeap@0 nodes@0 minNode@0) 1)) (segDegree ExhaleHeap@0 minNode@0 null 0)) (= (ControlFlow 0 1086) 1085))) anon14_correct)))
(let ((anon12_correct  (=> (= Mask@5 (MapType1Store Mask@4 null (heapseg nodes@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@4 null (heapseg nodes@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 1088) (- 0 1089)) (sorted Heap@1 nodes@0 null)) (=> (sorted Heap@1 nodes@0 null) (=> (and (IdenticalOnKnownLocations Heap@1 ExhaleHeap@0 Mask@5) (not (= minNode@0 null))) (=> (and (and (and (= Mask@6 (MapType1Store Mask@5 null (heapseg nodes@0 minNode@0) (real_2_U (+ (U_2_real (MapType1Select Mask@5 null (heapseg nodes@0 minNode@0))) FullPerm)))) (state ExhaleHeap@0 Mask@6)) (and (state ExhaleHeap@0 Mask@6) (sorted ExhaleHeap@0 nodes@0 minNode@0))) (and (and (= Mask@7 (MapType1Store Mask@6 null (heapseg minNode@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@6 null (heapseg minNode@0 null))) FullPerm)))) (state ExhaleHeap@0 Mask@7)) (and (state ExhaleHeap@0 Mask@7) (sorted ExhaleHeap@0 minNode@0 null)))) (and (=> (= (ControlFlow 0 1088) 1086) anon712_Then_correct) (=> (= (ControlFlow 0 1088) 1087) anon712_Else_correct)))))))))
(let ((anon711_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1092) 1088)) anon12_correct)))
(let ((anon711_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1090) (- 0 1091)) (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg nodes@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg nodes@0 null)))) (=> (= (ControlFlow 0 1090) 1088) anon12_correct))))))
(let ((anon710_Else_correct  (=> (and (and (and (not (= nodes@0 null)) (U_2_bool (MapType0Select Heap@1 temp $allocated))) (and (U_2_bool (MapType0Select Heap@1 prevTemp $allocated)) (U_2_bool (MapType0Select Heap@1 minNode $allocated)))) (and (and (U_2_bool (MapType0Select Heap@1 fakeNode $allocated)) (U_2_bool (MapType0Select Heap@1 r_1 $allocated))) (and (state Heap@1 Mask@4) (state Heap@1 Mask@4)))) (and (=> (= (ControlFlow 0 1093) (- 0 1094)) (not (= nodes@0 null))) (=> (not (= nodes@0 null)) (and (=> (= (ControlFlow 0 1093) 1090) anon711_Then_correct) (=> (= (ControlFlow 0 1093) 1092) anon711_Else_correct)))))))
(let ((anon8_correct  (=> (not (= this@@66 null)) (=> (and (= Mask@4 (MapType1Store Mask@3 this@@66 size (real_2_U (+ (U_2_real (MapType1Select Mask@3 this@@66 size)) FullPerm)))) (state Heap@1 Mask@4)) (=> (and (and (state Heap@1 Mask@4) (= (U_2_int (MapType0Select Heap@1 this@@66 size)) (segSize Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null))) (and (state Heap@1 Mask@4) (state Heap@1 Mask@4))) (and (=> (= (ControlFlow 0 1095) (- 0 1096)) (HasDirectPerm Mask@4 this@@66 Nodes)) (=> (HasDirectPerm Mask@4 this@@66 Nodes) (=> (and (= nodes@0 (MapType0Select Heap@1 this@@66 Nodes)) (state Heap@1 Mask@4)) (and (=> (= (ControlFlow 0 1095) 31) anon710_Then_correct) (=> (= (ControlFlow 0 1095) 1093) anon710_Else_correct))))))))))
(let ((anon709_Else_correct  (=> (and (= (MapType0Select Heap@1 this@@66 Nodes) null) (= (ControlFlow 0 1098) 1095)) anon8_correct)))
(let ((anon709_Then_correct  (=> (and (and (not (= (MapType0Select Heap@1 this@@66 Nodes) null)) (state Heap@1 Mask@3)) (and (= (segParent Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null) null) (= (ControlFlow 0 1097) 1095))) anon8_correct)))
(let ((anon6_correct  (=> (and (and (and (not (= this@@66 null)) (= Mask@2 (MapType1Store Mask@1 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select Mask@1 this@@66 Nodes)) FullPerm))))) (and (state Heap@1 Mask@2) (= Mask@3 (MapType1Store Mask@2 null (heapseg (MapType0Select Heap@1 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@1 this@@66 Nodes) null))) FullPerm)))))) (and (and (InsidePredicate (heap this@@66) (MapType0Select Heap@1 null (heap this@@66)) (heapseg (MapType0Select Heap@1 this@@66 Nodes) null) (MapType0Select Heap@1 null (heapseg (MapType0Select Heap@1 this@@66 Nodes) null))) (state Heap@1 Mask@3)) (and (state Heap@1 Mask@3) (sorted Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 1099) 1097) anon709_Then_correct) (=> (= (ControlFlow 0 1099) 1098) anon709_Else_correct)))))
(let ((anon708_Else_correct  (=> (HasDirectPerm Mask@1 null (heap this@@66)) (=> (and (= Heap@1 Heap@@61) (= (ControlFlow 0 1101) 1099)) anon6_correct))))
(let ((anon708_Then_correct  (=> (and (and (not (HasDirectPerm Mask@1 null (heap this@@66))) (= Heap@0 (MapType0Store Heap@@61 null (heap this@@66) newVersion@0))) (and (= Heap@1 Heap@0) (= (ControlFlow 0 1100) 1099))) anon6_correct)))
(let ((anon4_correct  (=> (= Mask@1 (MapType1Store Mask@0 null (heap this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heap this@@66))) FullPerm)))) (and (=> (= (ControlFlow 0 1102) 1100) anon708_Then_correct) (=> (= (ControlFlow 0 1102) 1101) anon708_Else_correct)))))
(let ((anon707_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1105) 1102)) anon4_correct)))
(let ((anon707_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1103) (- 0 1104)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heap this@@66)))) (=> (= (ControlFlow 0 1103) 1102) anon4_correct))))))
(let ((anon706_Else_correct  (=> (U_2_bool (MapType0Select Heap@@61 nodes $allocated)) (=> (and (|heap#trigger| Heap@@61 (heap this@@66)) (= (MapType0Select Heap@@61 null (heap this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 Nodes)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) EmptyFrame EmptyFrame)) (FrameFragment (MapType0Select Heap@@61 this@@66 size))))))) (and (=> (= (ControlFlow 0 1106) 1103) anon707_Then_correct) (=> (= (ControlFlow 0 1106) 1105) anon707_Else_correct))))))
(let ((anon706_Then_correct true))
(let ((anon0_correct  (=> (and (state Heap@@61 ZeroMask) (= AssumeFunctionsAbove (- 0 1))) (=> (and (and (U_2_bool (MapType0Select Heap@@61 this@@66 $allocated)) (= Mask@0 (MapType1Store ZeroMask null (heap this@@66) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (heap this@@66))) FullPerm))))) (and (state Heap@@61 Mask@0) (state Heap@@61 Mask@0))) (and (=> (= (ControlFlow 0 1107) 1) anon706_Then_correct) (=> (= (ControlFlow 0 1107) 1106) anon706_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 1108) 1107) anon0_correct)))
PreconditionGeneratedEntry_correct
))
(check-sat)
