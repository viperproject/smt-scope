(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun Iterator_iteratee () T@U)
(declare-fun Iterator_current () T@U)
(declare-fun Iterator_last () T@U)
(declare-fun List_sentinel () T@U)
(declare-fun Node_val () T@U)
(declare-fun Node_prev () T@U)
(declare-fun Node_next () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun wand (T@U Real T@U Real) T@U)
(declare-fun getPredWandId (T@U) Int)
(declare-fun WandType_wandType () T@T)
(declare-fun wand_1 (T@U Real T@U Real) T@U)
(declare-fun WandType_wand_1Type () T@T)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun Iterator_ready (T@U) T@U)
(declare-fun PredicateType_Iterator_readyType () T@T)
(declare-fun Iterator_readyForNext (T@U) T@U)
(declare-fun PredicateType_Iterator_readyForNextType () T@T)
(declare-fun Iterator_readyForRemove (T@U) T@U)
(declare-fun PredicateType_Iterator_readyForRemoveType () T@T)
(declare-fun List_state (T@U) T@U)
(declare-fun PredicateType_List_stateType () T@T)
(declare-fun Node_state (T@U) T@U)
(declare-fun PredicateType_Node_stateType () T@T)
(declare-fun Node_reverse (T@U) T@U)
(declare-fun PredicateType_Node_reverseType () T@T)
(declare-fun |Node_get_next'| (T@U T@U) T@U)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |Node_get_next#triggerStateless| (T@U) T@U)
(declare-fun |Node_get_prev'| (T@U T@U) T@U)
(declare-fun |Node_get_prev#triggerStateless| (T@U) T@U)
(declare-fun |Node_rev_next'| (T@U T@U) T@U)
(declare-fun |Node_rev_next#triggerStateless| (T@U) T@U)
(declare-fun |Node_rev_prev'| (T@U T@U) T@U)
(declare-fun |Node_rev_prev#triggerStateless| (T@U) T@U)
(declare-fun |Node_first'| (T@U T@U) T@U)
(declare-fun |Node_first#triggerStateless| (T@U) T@U)
(declare-fun |Iterator_ready#trigger| (T@U T@U) Bool)
(declare-fun |Iterator_ready#everUsed| (T@U) Bool)
(declare-fun |Iterator_readyForNext#trigger| (T@U T@U) Bool)
(declare-fun |Iterator_readyForNext#everUsed| (T@U) Bool)
(declare-fun |Iterator_readyForRemove#trigger| (T@U T@U) Bool)
(declare-fun |Iterator_readyForRemove#everUsed| (T@U) Bool)
(declare-fun |List_state#trigger| (T@U T@U) Bool)
(declare-fun |List_state#everUsed| (T@U) Bool)
(declare-fun |Node_state#trigger| (T@U T@U) Bool)
(declare-fun |Node_state#everUsed| (T@U) Bool)
(declare-fun |Node_reverse#trigger| (T@U T@U) Bool)
(declare-fun |Node_reverse#everUsed| (T@U) Bool)
(declare-fun Node_get_next (T@U T@U) T@U)
(declare-fun Node_get_prev (T@U T@U) T@U)
(declare-fun Node_rev_next (T@U T@U) T@U)
(declare-fun Node_rev_prev (T@U T@U) T@U)
(declare-fun Node_first (T@U T@U) T@U)
(declare-fun |Iterator_ready#sm| (T@U) T@U)
(declare-fun |Iterator_readyForNext#sm| (T@U) T@U)
(declare-fun |Iterator_readyForRemove#sm| (T@U) T@U)
(declare-fun |List_state#sm| (T@U) T@U)
(declare-fun |Node_state#sm| (T@U) T@U)
(declare-fun |Node_reverse#sm| (T@U) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun |wand#ft| (T@U Real T@U Real) T@U)
(declare-fun |wand_1#ft| (T@U Real T@U Real) T@U)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |wand#sm| (T@U Real T@U Real) T@U)
(declare-fun |wand_1#sm| (T@U Real T@U Real) T@U)
(declare-fun FullPerm () Real)
(declare-fun |Node_get_next#frame| (T@U T@U) T@U)
(declare-fun |Node_get_prev#frame| (T@U T@U) T@U)
(declare-fun |Node_rev_next#frame| (T@U T@U) T@U)
(declare-fun |Node_rev_prev#frame| (T@U T@U) T@U)
(declare-fun |Node_first#frame| (T@U T@U) T@U)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (Ctor RefType) 8)) (= (type Iterator_iteratee) (FieldType NormalFieldType RefType))) (= (type Iterator_current) (FieldType NormalFieldType RefType))) (= (type Iterator_last) (FieldType NormalFieldType RefType))) (= (type List_sentinel) (FieldType NormalFieldType RefType))) (= (type Node_val) (FieldType NormalFieldType intType))) (= (type Node_prev) (FieldType NormalFieldType RefType))) (= (type Node_next) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated Iterator_iteratee Iterator_current Iterator_last List_sentinel Node_val Node_prev Node_next)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (= (Ctor WandType_wandType) 10) (forall ((arg0@@18 T@U) (arg1@@4 Real) (arg2@@1 T@U) (arg3@@0 Real) ) (! (= (type (wand arg0@@18 arg1@@4 arg2@@1 arg3@@0)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@18 arg1@@4 arg2@@1 arg3@@0))
))))
(assert (forall ((arg1@@5 T@U) (arg2@@2 Real) (arg3@@1 T@U) (arg4 Real) ) (!  (=> (and (= (type arg1@@5) RefType) (= (type arg3@@1) RefType)) (= (getPredWandId (wand arg1@@5 arg2@@2 arg3@@1 arg4)) 6))
 :qid |stdinbpl.210:15|
 :skolemid |27|
 :pattern ( (wand arg1@@5 arg2@@2 arg3@@1 arg4))
)))
(assert  (and (= (Ctor WandType_wand_1Type) 11) (forall ((arg0@@19 T@U) (arg1@@6 Real) (arg2@@3 T@U) (arg3@@2 Real) ) (! (= (type (wand_1 arg0@@19 arg1@@6 arg2@@3 arg3@@2)) (FieldType WandType_wand_1Type intType))
 :qid |funType:wand_1|
 :pattern ( (wand_1 arg0@@19 arg1@@6 arg2@@3 arg3@@2))
))))
(assert (forall ((arg1@@7 T@U) (arg2@@4 Real) (arg3@@3 T@U) (arg4@@0 Real) ) (!  (=> (and (= (type arg1@@7) RefType) (= (type arg3@@3) RefType)) (= (getPredWandId (wand_1 arg1@@7 arg2@@4 arg3@@3 arg4@@0)) 7))
 :qid |stdinbpl.242:15|
 :skolemid |34|
 :pattern ( (wand_1 arg1@@7 arg2@@4 arg3@@3 arg4@@0))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@20 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType1Type arg0@@20 arg1@@8)) 12)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@21 T@T) (arg1@@9 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@21 arg1@@9)) arg0@@21)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@21 arg1@@9))
))) (forall ((arg0@@22 T@T) (arg1@@10 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@22 arg1@@10)) arg1@@10)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@22 arg1@@10))
))) (forall ((arg0@@23 T@U) (arg1@@11 T@U) (arg2@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@23))))
(= (type (MapType1Select arg0@@23 arg1@@11 arg2@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@23 arg1@@11 arg2@@5))
))) (forall ((arg0@@24 T@U) (arg1@@12 T@U) (arg2@@6 T@U) (arg3@@4 T@U) ) (! (let ((aVar1@@0 (type arg3@@4)))
(let ((aVar0@@0 (type arg1@@12)))
(= (type (MapType1Store arg0@@24 arg1@@12 arg2@@6 arg3@@4)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@24 arg1@@12 arg2@@6 arg3@@4))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (and (= (Ctor FrameTypeType) 13) (= (type null) RefType)) (forall ((arg0@@25 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@25))))
(= (type (PredicateMaskField arg0@@25)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@25))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@0 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@26 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@26))))
(= (type (WandMaskField arg0@@26)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@26))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_Iterator_readyType) 14) (forall ((arg0@@27 T@U) ) (! (= (type (Iterator_ready arg0@@27)) (FieldType PredicateType_Iterator_readyType FrameTypeType))
 :qid |funType:Iterator_ready|
 :pattern ( (Iterator_ready arg0@@27))
))))
(assert (forall ((this T@U) ) (!  (=> (= (type this) RefType) (IsPredicateField (Iterator_ready this)))
 :qid |stdinbpl.895:15|
 :skolemid |62|
 :pattern ( (Iterator_ready this))
)))
(assert  (and (= (Ctor PredicateType_Iterator_readyForNextType) 15) (forall ((arg0@@28 T@U) ) (! (= (type (Iterator_readyForNext arg0@@28)) (FieldType PredicateType_Iterator_readyForNextType FrameTypeType))
 :qid |funType:Iterator_readyForNext|
 :pattern ( (Iterator_readyForNext arg0@@28))
))))
(assert (forall ((this@@0 T@U) ) (!  (=> (= (type this@@0) RefType) (IsPredicateField (Iterator_readyForNext this@@0)))
 :qid |stdinbpl.1118:15|
 :skolemid |68|
 :pattern ( (Iterator_readyForNext this@@0))
)))
(assert  (and (= (Ctor PredicateType_Iterator_readyForRemoveType) 16) (forall ((arg0@@29 T@U) ) (! (= (type (Iterator_readyForRemove arg0@@29)) (FieldType PredicateType_Iterator_readyForRemoveType FrameTypeType))
 :qid |funType:Iterator_readyForRemove|
 :pattern ( (Iterator_readyForRemove arg0@@29))
))))
(assert (forall ((this@@1 T@U) ) (!  (=> (= (type this@@1) RefType) (IsPredicateField (Iterator_readyForRemove this@@1)))
 :qid |stdinbpl.1348:15|
 :skolemid |74|
 :pattern ( (Iterator_readyForRemove this@@1))
)))
(assert  (and (= (Ctor PredicateType_List_stateType) 17) (forall ((arg0@@30 T@U) ) (! (= (type (List_state arg0@@30)) (FieldType PredicateType_List_stateType FrameTypeType))
 :qid |funType:List_state|
 :pattern ( (List_state arg0@@30))
))))
(assert (forall ((this@@2 T@U) ) (!  (=> (= (type this@@2) RefType) (IsPredicateField (List_state this@@2)))
 :qid |stdinbpl.1635:15|
 :skolemid |80|
 :pattern ( (List_state this@@2))
)))
(assert  (and (= (Ctor PredicateType_Node_stateType) 18) (forall ((arg0@@31 T@U) ) (! (= (type (Node_state arg0@@31)) (FieldType PredicateType_Node_stateType FrameTypeType))
 :qid |funType:Node_state|
 :pattern ( (Node_state arg0@@31))
))))
(assert (forall ((this@@3 T@U) ) (!  (=> (= (type this@@3) RefType) (IsPredicateField (Node_state this@@3)))
 :qid |stdinbpl.1701:15|
 :skolemid |86|
 :pattern ( (Node_state this@@3))
)))
(assert  (and (= (Ctor PredicateType_Node_reverseType) 19) (forall ((arg0@@32 T@U) ) (! (= (type (Node_reverse arg0@@32)) (FieldType PredicateType_Node_reverseType FrameTypeType))
 :qid |funType:Node_reverse|
 :pattern ( (Node_reverse arg0@@32))
))))
(assert (forall ((this@@4 T@U) ) (!  (=> (= (type this@@4) RefType) (IsPredicateField (Node_reverse this@@4)))
 :qid |stdinbpl.1776:15|
 :skolemid |92|
 :pattern ( (Node_reverse this@@4))
)))
(assert  (and (forall ((arg0@@33 T@U) (arg1@@13 T@U) ) (! (= (type (|Node_get_next'| arg0@@33 arg1@@13)) RefType)
 :qid |funType:Node_get_next'|
 :pattern ( (|Node_get_next'| arg0@@33 arg1@@13))
)) (forall ((arg0@@34 T@U) ) (! (= (type (|Node_get_next#triggerStateless| arg0@@34)) RefType)
 :qid |funType:Node_get_next#triggerStateless|
 :pattern ( (|Node_get_next#triggerStateless| arg0@@34))
))))
(assert (forall ((Heap@@2 T@U) (this@@5 T@U) ) (!  (=> (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@5) RefType)) (dummyFunction (|Node_get_next#triggerStateless| this@@5)))
 :qid |stdinbpl.288:15|
 :skolemid |37|
 :pattern ( (|Node_get_next'| Heap@@2 this@@5))
)))
(assert  (and (forall ((arg0@@35 T@U) (arg1@@14 T@U) ) (! (= (type (|Node_get_prev'| arg0@@35 arg1@@14)) RefType)
 :qid |funType:Node_get_prev'|
 :pattern ( (|Node_get_prev'| arg0@@35 arg1@@14))
)) (forall ((arg0@@36 T@U) ) (! (= (type (|Node_get_prev#triggerStateless| arg0@@36)) RefType)
 :qid |funType:Node_get_prev#triggerStateless|
 :pattern ( (|Node_get_prev#triggerStateless| arg0@@36))
))))
(assert (forall ((Heap@@3 T@U) (this@@6 T@U) ) (!  (=> (and (= (type Heap@@3) (MapType0Type RefType)) (= (type this@@6) RefType)) (dummyFunction (|Node_get_prev#triggerStateless| this@@6)))
 :qid |stdinbpl.403:15|
 :skolemid |42|
 :pattern ( (|Node_get_prev'| Heap@@3 this@@6))
)))
(assert  (and (forall ((arg0@@37 T@U) (arg1@@15 T@U) ) (! (= (type (|Node_rev_next'| arg0@@37 arg1@@15)) RefType)
 :qid |funType:Node_rev_next'|
 :pattern ( (|Node_rev_next'| arg0@@37 arg1@@15))
)) (forall ((arg0@@38 T@U) ) (! (= (type (|Node_rev_next#triggerStateless| arg0@@38)) RefType)
 :qid |funType:Node_rev_next#triggerStateless|
 :pattern ( (|Node_rev_next#triggerStateless| arg0@@38))
))))
(assert (forall ((Heap@@4 T@U) (this@@7 T@U) ) (!  (=> (and (= (type Heap@@4) (MapType0Type RefType)) (= (type this@@7) RefType)) (dummyFunction (|Node_rev_next#triggerStateless| this@@7)))
 :qid |stdinbpl.518:15|
 :skolemid |47|
 :pattern ( (|Node_rev_next'| Heap@@4 this@@7))
)))
(assert  (and (forall ((arg0@@39 T@U) (arg1@@16 T@U) ) (! (= (type (|Node_rev_prev'| arg0@@39 arg1@@16)) RefType)
 :qid |funType:Node_rev_prev'|
 :pattern ( (|Node_rev_prev'| arg0@@39 arg1@@16))
)) (forall ((arg0@@40 T@U) ) (! (= (type (|Node_rev_prev#triggerStateless| arg0@@40)) RefType)
 :qid |funType:Node_rev_prev#triggerStateless|
 :pattern ( (|Node_rev_prev#triggerStateless| arg0@@40))
))))
(assert (forall ((Heap@@5 T@U) (this@@8 T@U) ) (!  (=> (and (= (type Heap@@5) (MapType0Type RefType)) (= (type this@@8) RefType)) (dummyFunction (|Node_rev_prev#triggerStateless| this@@8)))
 :qid |stdinbpl.635:15|
 :skolemid |52|
 :pattern ( (|Node_rev_prev'| Heap@@5 this@@8))
)))
(assert  (and (forall ((arg0@@41 T@U) (arg1@@17 T@U) ) (! (= (type (|Node_first'| arg0@@41 arg1@@17)) RefType)
 :qid |funType:Node_first'|
 :pattern ( (|Node_first'| arg0@@41 arg1@@17))
)) (forall ((arg0@@42 T@U) ) (! (= (type (|Node_first#triggerStateless| arg0@@42)) RefType)
 :qid |funType:Node_first#triggerStateless|
 :pattern ( (|Node_first#triggerStateless| arg0@@42))
))))
(assert (forall ((Heap@@6 T@U) (this@@9 T@U) ) (!  (=> (and (= (type Heap@@6) (MapType0Type RefType)) (= (type this@@9) RefType)) (dummyFunction (|Node_first#triggerStateless| this@@9)))
 :qid |stdinbpl.752:15|
 :skolemid |57|
 :pattern ( (|Node_first'| Heap@@6 this@@9))
)))
(assert (forall ((Heap@@7 T@U) (this@@10 T@U) ) (!  (=> (and (= (type Heap@@7) (MapType0Type RefType)) (= (type this@@10) RefType)) (|Iterator_ready#everUsed| (Iterator_ready this@@10)))
 :qid |stdinbpl.914:15|
 :skolemid |66|
 :pattern ( (|Iterator_ready#trigger| Heap@@7 (Iterator_ready this@@10)))
)))
(assert (forall ((Heap@@8 T@U) (this@@11 T@U) ) (!  (=> (and (= (type Heap@@8) (MapType0Type RefType)) (= (type this@@11) RefType)) (|Iterator_readyForNext#everUsed| (Iterator_readyForNext this@@11)))
 :qid |stdinbpl.1137:15|
 :skolemid |72|
 :pattern ( (|Iterator_readyForNext#trigger| Heap@@8 (Iterator_readyForNext this@@11)))
)))
(assert (forall ((Heap@@9 T@U) (this@@12 T@U) ) (!  (=> (and (= (type Heap@@9) (MapType0Type RefType)) (= (type this@@12) RefType)) (|Iterator_readyForRemove#everUsed| (Iterator_readyForRemove this@@12)))
 :qid |stdinbpl.1367:15|
 :skolemid |78|
 :pattern ( (|Iterator_readyForRemove#trigger| Heap@@9 (Iterator_readyForRemove this@@12)))
)))
(assert (forall ((Heap@@10 T@U) (this@@13 T@U) ) (!  (=> (and (= (type Heap@@10) (MapType0Type RefType)) (= (type this@@13) RefType)) (|List_state#everUsed| (List_state this@@13)))
 :qid |stdinbpl.1654:15|
 :skolemid |84|
 :pattern ( (|List_state#trigger| Heap@@10 (List_state this@@13)))
)))
(assert (forall ((Heap@@11 T@U) (this@@14 T@U) ) (!  (=> (and (= (type Heap@@11) (MapType0Type RefType)) (= (type this@@14) RefType)) (|Node_state#everUsed| (Node_state this@@14)))
 :qid |stdinbpl.1720:15|
 :skolemid |90|
 :pattern ( (|Node_state#trigger| Heap@@11 (Node_state this@@14)))
)))
(assert (forall ((Heap@@12 T@U) (this@@15 T@U) ) (!  (=> (and (= (type Heap@@12) (MapType0Type RefType)) (= (type this@@15) RefType)) (|Node_reverse#everUsed| (Node_reverse this@@15)))
 :qid |stdinbpl.1795:15|
 :skolemid |96|
 :pattern ( (|Node_reverse#trigger| Heap@@12 (Node_reverse this@@15)))
)))
(assert (forall ((Heap@@13 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@13) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@13 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@13 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@13 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((arg0@@43 T@U) (arg1@@18 T@U) ) (! (= (type (Node_get_next arg0@@43 arg1@@18)) RefType)
 :qid |funType:Node_get_next|
 :pattern ( (Node_get_next arg0@@43 arg1@@18))
)))
(assert (forall ((Heap@@14 T@U) (this@@16 T@U) ) (!  (=> (and (= (type Heap@@14) (MapType0Type RefType)) (= (type this@@16) RefType)) (and (= (Node_get_next Heap@@14 this@@16) (|Node_get_next'| Heap@@14 this@@16)) (dummyFunction (|Node_get_next#triggerStateless| this@@16))))
 :qid |stdinbpl.284:15|
 :skolemid |36|
 :pattern ( (Node_get_next Heap@@14 this@@16))
)))
(assert (forall ((arg0@@44 T@U) (arg1@@19 T@U) ) (! (= (type (Node_get_prev arg0@@44 arg1@@19)) RefType)
 :qid |funType:Node_get_prev|
 :pattern ( (Node_get_prev arg0@@44 arg1@@19))
)))
(assert (forall ((Heap@@15 T@U) (this@@17 T@U) ) (!  (=> (and (= (type Heap@@15) (MapType0Type RefType)) (= (type this@@17) RefType)) (and (= (Node_get_prev Heap@@15 this@@17) (|Node_get_prev'| Heap@@15 this@@17)) (dummyFunction (|Node_get_prev#triggerStateless| this@@17))))
 :qid |stdinbpl.399:15|
 :skolemid |41|
 :pattern ( (Node_get_prev Heap@@15 this@@17))
)))
(assert (forall ((arg0@@45 T@U) (arg1@@20 T@U) ) (! (= (type (Node_rev_next arg0@@45 arg1@@20)) RefType)
 :qid |funType:Node_rev_next|
 :pattern ( (Node_rev_next arg0@@45 arg1@@20))
)))
(assert (forall ((Heap@@16 T@U) (this@@18 T@U) ) (!  (=> (and (= (type Heap@@16) (MapType0Type RefType)) (= (type this@@18) RefType)) (and (= (Node_rev_next Heap@@16 this@@18) (|Node_rev_next'| Heap@@16 this@@18)) (dummyFunction (|Node_rev_next#triggerStateless| this@@18))))
 :qid |stdinbpl.514:15|
 :skolemid |46|
 :pattern ( (Node_rev_next Heap@@16 this@@18))
)))
(assert (forall ((arg0@@46 T@U) (arg1@@21 T@U) ) (! (= (type (Node_rev_prev arg0@@46 arg1@@21)) RefType)
 :qid |funType:Node_rev_prev|
 :pattern ( (Node_rev_prev arg0@@46 arg1@@21))
)))
(assert (forall ((Heap@@17 T@U) (this@@19 T@U) ) (!  (=> (and (= (type Heap@@17) (MapType0Type RefType)) (= (type this@@19) RefType)) (and (= (Node_rev_prev Heap@@17 this@@19) (|Node_rev_prev'| Heap@@17 this@@19)) (dummyFunction (|Node_rev_prev#triggerStateless| this@@19))))
 :qid |stdinbpl.631:15|
 :skolemid |51|
 :pattern ( (Node_rev_prev Heap@@17 this@@19))
)))
(assert (forall ((arg0@@47 T@U) (arg1@@22 T@U) ) (! (= (type (Node_first arg0@@47 arg1@@22)) RefType)
 :qid |funType:Node_first|
 :pattern ( (Node_first arg0@@47 arg1@@22))
)))
(assert (forall ((Heap@@18 T@U) (this@@20 T@U) ) (!  (=> (and (= (type Heap@@18) (MapType0Type RefType)) (= (type this@@20) RefType)) (and (= (Node_first Heap@@18 this@@20) (|Node_first'| Heap@@18 this@@20)) (dummyFunction (|Node_first#triggerStateless| this@@20))))
 :qid |stdinbpl.748:15|
 :skolemid |56|
 :pattern ( (Node_first Heap@@18 this@@20))
)))
(assert (forall ((this@@21 T@U) (this2 T@U) ) (!  (=> (and (and (= (type this@@21) RefType) (= (type this2) RefType)) (= (Iterator_ready this@@21) (Iterator_ready this2))) (= this@@21 this2))
 :qid |stdinbpl.905:15|
 :skolemid |64|
 :pattern ( (Iterator_ready this@@21) (Iterator_ready this2))
)))
(assert (forall ((arg0@@48 T@U) ) (! (= (type (|Iterator_ready#sm| arg0@@48)) (FieldType PredicateType_Iterator_readyType (MapType1Type RefType boolType)))
 :qid |funType:Iterator_ready#sm|
 :pattern ( (|Iterator_ready#sm| arg0@@48))
)))
(assert (forall ((this@@22 T@U) (this2@@0 T@U) ) (!  (=> (and (and (= (type this@@22) RefType) (= (type this2@@0) RefType)) (= (|Iterator_ready#sm| this@@22) (|Iterator_ready#sm| this2@@0))) (= this@@22 this2@@0))
 :qid |stdinbpl.909:15|
 :skolemid |65|
 :pattern ( (|Iterator_ready#sm| this@@22) (|Iterator_ready#sm| this2@@0))
)))
(assert (forall ((this@@23 T@U) (this2@@1 T@U) ) (!  (=> (and (and (= (type this@@23) RefType) (= (type this2@@1) RefType)) (= (Iterator_readyForNext this@@23) (Iterator_readyForNext this2@@1))) (= this@@23 this2@@1))
 :qid |stdinbpl.1128:15|
 :skolemid |70|
 :pattern ( (Iterator_readyForNext this@@23) (Iterator_readyForNext this2@@1))
)))
(assert (forall ((arg0@@49 T@U) ) (! (= (type (|Iterator_readyForNext#sm| arg0@@49)) (FieldType PredicateType_Iterator_readyForNextType (MapType1Type RefType boolType)))
 :qid |funType:Iterator_readyForNext#sm|
 :pattern ( (|Iterator_readyForNext#sm| arg0@@49))
)))
(assert (forall ((this@@24 T@U) (this2@@2 T@U) ) (!  (=> (and (and (= (type this@@24) RefType) (= (type this2@@2) RefType)) (= (|Iterator_readyForNext#sm| this@@24) (|Iterator_readyForNext#sm| this2@@2))) (= this@@24 this2@@2))
 :qid |stdinbpl.1132:15|
 :skolemid |71|
 :pattern ( (|Iterator_readyForNext#sm| this@@24) (|Iterator_readyForNext#sm| this2@@2))
)))
(assert (forall ((this@@25 T@U) (this2@@3 T@U) ) (!  (=> (and (and (= (type this@@25) RefType) (= (type this2@@3) RefType)) (= (Iterator_readyForRemove this@@25) (Iterator_readyForRemove this2@@3))) (= this@@25 this2@@3))
 :qid |stdinbpl.1358:15|
 :skolemid |76|
 :pattern ( (Iterator_readyForRemove this@@25) (Iterator_readyForRemove this2@@3))
)))
(assert (forall ((arg0@@50 T@U) ) (! (= (type (|Iterator_readyForRemove#sm| arg0@@50)) (FieldType PredicateType_Iterator_readyForRemoveType (MapType1Type RefType boolType)))
 :qid |funType:Iterator_readyForRemove#sm|
 :pattern ( (|Iterator_readyForRemove#sm| arg0@@50))
)))
(assert (forall ((this@@26 T@U) (this2@@4 T@U) ) (!  (=> (and (and (= (type this@@26) RefType) (= (type this2@@4) RefType)) (= (|Iterator_readyForRemove#sm| this@@26) (|Iterator_readyForRemove#sm| this2@@4))) (= this@@26 this2@@4))
 :qid |stdinbpl.1362:15|
 :skolemid |77|
 :pattern ( (|Iterator_readyForRemove#sm| this@@26) (|Iterator_readyForRemove#sm| this2@@4))
)))
(assert (forall ((this@@27 T@U) (this2@@5 T@U) ) (!  (=> (and (and (= (type this@@27) RefType) (= (type this2@@5) RefType)) (= (List_state this@@27) (List_state this2@@5))) (= this@@27 this2@@5))
 :qid |stdinbpl.1645:15|
 :skolemid |82|
 :pattern ( (List_state this@@27) (List_state this2@@5))
)))
(assert (forall ((arg0@@51 T@U) ) (! (= (type (|List_state#sm| arg0@@51)) (FieldType PredicateType_List_stateType (MapType1Type RefType boolType)))
 :qid |funType:List_state#sm|
 :pattern ( (|List_state#sm| arg0@@51))
)))
(assert (forall ((this@@28 T@U) (this2@@6 T@U) ) (!  (=> (and (and (= (type this@@28) RefType) (= (type this2@@6) RefType)) (= (|List_state#sm| this@@28) (|List_state#sm| this2@@6))) (= this@@28 this2@@6))
 :qid |stdinbpl.1649:15|
 :skolemid |83|
 :pattern ( (|List_state#sm| this@@28) (|List_state#sm| this2@@6))
)))
(assert (forall ((this@@29 T@U) (this2@@7 T@U) ) (!  (=> (and (and (= (type this@@29) RefType) (= (type this2@@7) RefType)) (= (Node_state this@@29) (Node_state this2@@7))) (= this@@29 this2@@7))
 :qid |stdinbpl.1711:15|
 :skolemid |88|
 :pattern ( (Node_state this@@29) (Node_state this2@@7))
)))
(assert (forall ((arg0@@52 T@U) ) (! (= (type (|Node_state#sm| arg0@@52)) (FieldType PredicateType_Node_stateType (MapType1Type RefType boolType)))
 :qid |funType:Node_state#sm|
 :pattern ( (|Node_state#sm| arg0@@52))
)))
(assert (forall ((this@@30 T@U) (this2@@8 T@U) ) (!  (=> (and (and (= (type this@@30) RefType) (= (type this2@@8) RefType)) (= (|Node_state#sm| this@@30) (|Node_state#sm| this2@@8))) (= this@@30 this2@@8))
 :qid |stdinbpl.1715:15|
 :skolemid |89|
 :pattern ( (|Node_state#sm| this@@30) (|Node_state#sm| this2@@8))
)))
(assert (forall ((this@@31 T@U) (this2@@9 T@U) ) (!  (=> (and (and (= (type this@@31) RefType) (= (type this2@@9) RefType)) (= (Node_reverse this@@31) (Node_reverse this2@@9))) (= this@@31 this2@@9))
 :qid |stdinbpl.1786:15|
 :skolemid |94|
 :pattern ( (Node_reverse this@@31) (Node_reverse this2@@9))
)))
(assert (forall ((arg0@@53 T@U) ) (! (= (type (|Node_reverse#sm| arg0@@53)) (FieldType PredicateType_Node_reverseType (MapType1Type RefType boolType)))
 :qid |funType:Node_reverse#sm|
 :pattern ( (|Node_reverse#sm| arg0@@53))
)))
(assert (forall ((this@@32 T@U) (this2@@10 T@U) ) (!  (=> (and (and (= (type this@@32) RefType) (= (type this2@@10) RefType)) (= (|Node_reverse#sm| this@@32) (|Node_reverse#sm| this2@@10))) (= this@@32 this2@@10))
 :qid |stdinbpl.1790:15|
 :skolemid |95|
 :pattern ( (|Node_reverse#sm| this@@32) (|Node_reverse#sm| this2@@10))
)))
(assert (forall ((Heap@@19 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@19) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@19 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@19 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@19 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.177:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField Iterator_iteratee)))
(assert  (not (IsWandField Iterator_iteratee)))
(assert  (not (IsPredicateField Iterator_current)))
(assert  (not (IsWandField Iterator_current)))
(assert  (not (IsPredicateField Iterator_last)))
(assert  (not (IsWandField Iterator_last)))
(assert  (not (IsPredicateField List_sentinel)))
(assert  (not (IsWandField List_sentinel)))
(assert  (not (IsPredicateField Node_val)))
(assert  (not (IsWandField Node_val)))
(assert  (not (IsPredicateField Node_prev)))
(assert  (not (IsWandField Node_prev)))
(assert  (not (IsPredicateField Node_next)))
(assert  (not (IsWandField Node_next)))
(assert (forall ((Heap@@20 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@20) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@20 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@20 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@20 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert (forall ((arg1@@23 T@U) (arg2@@7 Real) (arg3@@5 T@U) (arg4@@1 Real) ) (!  (=> (and (= (type arg1@@23) RefType) (= (type arg3@@5) RefType)) (IsWandField (wand arg1@@23 arg2@@7 arg3@@5 arg4@@1)))
 :qid |stdinbpl.190:15|
 :skolemid |22|
 :pattern ( (wand arg1@@23 arg2@@7 arg3@@5 arg4@@1))
)))
(assert (forall ((arg0@@54 T@U) (arg1@@24 Real) (arg2@@8 T@U) (arg3@@6 Real) ) (! (= (type (|wand#ft| arg0@@54 arg1@@24 arg2@@8 arg3@@6)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@54 arg1@@24 arg2@@8 arg3@@6))
)))
(assert (forall ((arg1@@25 T@U) (arg2@@9 Real) (arg3@@7 T@U) (arg4@@2 Real) ) (!  (=> (and (= (type arg1@@25) RefType) (= (type arg3@@7) RefType)) (IsWandField (|wand#ft| arg1@@25 arg2@@9 arg3@@7 arg4@@2)))
 :qid |stdinbpl.194:15|
 :skolemid |23|
 :pattern ( (|wand#ft| arg1@@25 arg2@@9 arg3@@7 arg4@@2))
)))
(assert (forall ((arg1@@26 T@U) (arg2@@10 Real) (arg3@@8 T@U) (arg4@@3 Real) ) (!  (=> (and (= (type arg1@@26) RefType) (= (type arg3@@8) RefType)) (IsWandField (wand_1 arg1@@26 arg2@@10 arg3@@8 arg4@@3)))
 :qid |stdinbpl.222:15|
 :skolemid |29|
 :pattern ( (wand_1 arg1@@26 arg2@@10 arg3@@8 arg4@@3))
)))
(assert (forall ((arg0@@55 T@U) (arg1@@27 Real) (arg2@@11 T@U) (arg3@@9 Real) ) (! (= (type (|wand_1#ft| arg0@@55 arg1@@27 arg2@@11 arg3@@9)) (FieldType WandType_wand_1Type FrameTypeType))
 :qid |funType:wand_1#ft|
 :pattern ( (|wand_1#ft| arg0@@55 arg1@@27 arg2@@11 arg3@@9))
)))
(assert (forall ((arg1@@28 T@U) (arg2@@12 Real) (arg3@@10 T@U) (arg4@@4 Real) ) (!  (=> (and (= (type arg1@@28) RefType) (= (type arg3@@10) RefType)) (IsWandField (|wand_1#ft| arg1@@28 arg2@@12 arg3@@10 arg4@@4)))
 :qid |stdinbpl.226:15|
 :skolemid |30|
 :pattern ( (|wand_1#ft| arg1@@28 arg2@@12 arg3@@10 arg4@@4))
)))
(assert  (and (forall ((arg0@@56 Real) (arg1@@29 T@U) ) (! (= (type (ConditionalFrame arg0@@56 arg1@@29)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@56 arg1@@29))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.165:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((arg1@@30 T@U) (arg2@@13 Real) (arg3@@11 T@U) (arg4@@5 Real) ) (!  (=> (and (= (type arg1@@30) RefType) (= (type arg3@@11) RefType)) (not (IsPredicateField (wand arg1@@30 arg2@@13 arg3@@11 arg4@@5))))
 :qid |stdinbpl.198:15|
 :skolemid |24|
 :pattern ( (wand arg1@@30 arg2@@13 arg3@@11 arg4@@5))
)))
(assert (forall ((arg1@@31 T@U) (arg2@@14 Real) (arg3@@12 T@U) (arg4@@6 Real) ) (!  (=> (and (= (type arg1@@31) RefType) (= (type arg3@@12) RefType)) (not (IsPredicateField (|wand#ft| arg1@@31 arg2@@14 arg3@@12 arg4@@6))))
 :qid |stdinbpl.202:15|
 :skolemid |25|
 :pattern ( (|wand#ft| arg1@@31 arg2@@14 arg3@@12 arg4@@6))
)))
(assert (forall ((arg1@@32 T@U) (arg2@@15 Real) (arg3@@13 T@U) (arg4@@7 Real) ) (!  (=> (and (= (type arg1@@32) RefType) (= (type arg3@@13) RefType)) (not (IsPredicateField (wand_1 arg1@@32 arg2@@15 arg3@@13 arg4@@7))))
 :qid |stdinbpl.230:15|
 :skolemid |31|
 :pattern ( (wand_1 arg1@@32 arg2@@15 arg3@@13 arg4@@7))
)))
(assert (forall ((arg1@@33 T@U) (arg2@@16 Real) (arg3@@14 T@U) (arg4@@8 Real) ) (!  (=> (and (= (type arg1@@33) RefType) (= (type arg3@@14) RefType)) (not (IsPredicateField (|wand_1#ft| arg1@@33 arg2@@16 arg3@@14 arg4@@8))))
 :qid |stdinbpl.234:15|
 :skolemid |32|
 :pattern ( (|wand_1#ft| arg1@@33 arg2@@16 arg3@@14 arg4@@8))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((arg0@@57 T@U) (arg1@@34 Real) (arg2@@17 T@U) (arg3@@15 Real) ) (! (= (type (|wand#sm| arg0@@57 arg1@@34 arg2@@17 arg3@@15)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@57 arg1@@34 arg2@@17 arg3@@15))
)))
(assert (forall ((arg1@@35 T@U) (arg2@@18 Real) (arg3@@16 T@U) (arg4@@9 Real) ) (!  (=> (and (= (type arg1@@35) RefType) (= (type arg3@@16) RefType)) (= (|wand#sm| arg1@@35 arg2@@18 arg3@@16 arg4@@9) (WandMaskField (|wand#ft| arg1@@35 arg2@@18 arg3@@16 arg4@@9))))
 :qid |stdinbpl.206:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand#ft| arg1@@35 arg2@@18 arg3@@16 arg4@@9)))
)))
(assert (forall ((arg0@@58 T@U) (arg1@@36 Real) (arg2@@19 T@U) (arg3@@17 Real) ) (! (= (type (|wand_1#sm| arg0@@58 arg1@@36 arg2@@19 arg3@@17)) (FieldType WandType_wand_1Type (MapType1Type RefType boolType)))
 :qid |funType:wand_1#sm|
 :pattern ( (|wand_1#sm| arg0@@58 arg1@@36 arg2@@19 arg3@@17))
)))
(assert (forall ((arg1@@37 T@U) (arg2@@20 Real) (arg3@@18 T@U) (arg4@@10 Real) ) (!  (=> (and (= (type arg1@@37) RefType) (= (type arg3@@18) RefType)) (= (|wand_1#sm| arg1@@37 arg2@@20 arg3@@18 arg4@@10) (WandMaskField (|wand_1#ft| arg1@@37 arg2@@20 arg3@@18 arg4@@10))))
 :qid |stdinbpl.238:15|
 :skolemid |33|
 :pattern ( (WandMaskField (|wand_1#ft| arg1@@37 arg2@@20 arg3@@18 arg4@@10)))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@21 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@21) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@21 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@21 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@21 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@21 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@22 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@22) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@22 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@22 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@22 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@22 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@33 T@U) ) (!  (=> (= (type this@@33) RefType) (= (getPredWandId (Iterator_ready this@@33)) 0))
 :qid |stdinbpl.899:15|
 :skolemid |63|
 :pattern ( (Iterator_ready this@@33))
)))
(assert (forall ((this@@34 T@U) ) (!  (=> (= (type this@@34) RefType) (= (getPredWandId (Iterator_readyForNext this@@34)) 1))
 :qid |stdinbpl.1122:15|
 :skolemid |69|
 :pattern ( (Iterator_readyForNext this@@34))
)))
(assert (forall ((this@@35 T@U) ) (!  (=> (= (type this@@35) RefType) (= (getPredWandId (Iterator_readyForRemove this@@35)) 2))
 :qid |stdinbpl.1352:15|
 :skolemid |75|
 :pattern ( (Iterator_readyForRemove this@@35))
)))
(assert (forall ((this@@36 T@U) ) (!  (=> (= (type this@@36) RefType) (= (getPredWandId (List_state this@@36)) 3))
 :qid |stdinbpl.1639:15|
 :skolemid |81|
 :pattern ( (List_state this@@36))
)))
(assert (forall ((this@@37 T@U) ) (!  (=> (= (type this@@37) RefType) (= (getPredWandId (Node_state this@@37)) 4))
 :qid |stdinbpl.1705:15|
 :skolemid |87|
 :pattern ( (Node_state this@@37))
)))
(assert (forall ((this@@38 T@U) ) (!  (=> (= (type this@@38) RefType) (= (getPredWandId (Node_reverse this@@38)) 5))
 :qid |stdinbpl.1780:15|
 :skolemid |93|
 :pattern ( (Node_reverse this@@38))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((arg0@@59 T@U) (arg1@@38 T@U) ) (! (= (type (|Node_get_next#frame| arg0@@59 arg1@@38)) RefType)
 :qid |funType:Node_get_next#frame|
 :pattern ( (|Node_get_next#frame| arg0@@59 arg1@@38))
)))
(assert (forall ((Heap@@23 T@U) (Mask@@9 T@U) (this@@39 T@U) ) (!  (=> (and (and (and (= (type Heap@@23) (MapType0Type RefType)) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type this@@39) RefType)) (state Heap@@23 Mask@@9)) (= (|Node_get_next'| Heap@@23 this@@39) (|Node_get_next#frame| (MapType0Select Heap@@23 null (Node_state this@@39)) this@@39)))
 :qid |stdinbpl.301:15|
 :skolemid |39|
 :pattern ( (state Heap@@23 Mask@@9) (|Node_get_next'| Heap@@23 this@@39))
)))
(assert (forall ((arg0@@60 T@U) (arg1@@39 T@U) ) (! (= (type (|Node_get_prev#frame| arg0@@60 arg1@@39)) RefType)
 :qid |funType:Node_get_prev#frame|
 :pattern ( (|Node_get_prev#frame| arg0@@60 arg1@@39))
)))
(assert (forall ((Heap@@24 T@U) (Mask@@10 T@U) (this@@40 T@U) ) (!  (=> (and (and (and (= (type Heap@@24) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type this@@40) RefType)) (state Heap@@24 Mask@@10)) (= (|Node_get_prev'| Heap@@24 this@@40) (|Node_get_prev#frame| (MapType0Select Heap@@24 null (Node_state this@@40)) this@@40)))
 :qid |stdinbpl.416:15|
 :skolemid |44|
 :pattern ( (state Heap@@24 Mask@@10) (|Node_get_prev'| Heap@@24 this@@40))
)))
(assert (forall ((arg0@@61 T@U) (arg1@@40 T@U) ) (! (= (type (|Node_rev_next#frame| arg0@@61 arg1@@40)) RefType)
 :qid |funType:Node_rev_next#frame|
 :pattern ( (|Node_rev_next#frame| arg0@@61 arg1@@40))
)))
(assert (forall ((Heap@@25 T@U) (Mask@@11 T@U) (this@@41 T@U) ) (!  (=> (and (and (and (= (type Heap@@25) (MapType0Type RefType)) (= (type Mask@@11) (MapType1Type RefType realType))) (= (type this@@41) RefType)) (state Heap@@25 Mask@@11)) (= (|Node_rev_next'| Heap@@25 this@@41) (|Node_rev_next#frame| (MapType0Select Heap@@25 null (Node_reverse this@@41)) this@@41)))
 :qid |stdinbpl.531:15|
 :skolemid |49|
 :pattern ( (state Heap@@25 Mask@@11) (|Node_rev_next'| Heap@@25 this@@41))
)))
(assert (forall ((arg0@@62 T@U) (arg1@@41 T@U) ) (! (= (type (|Node_rev_prev#frame| arg0@@62 arg1@@41)) RefType)
 :qid |funType:Node_rev_prev#frame|
 :pattern ( (|Node_rev_prev#frame| arg0@@62 arg1@@41))
)))
(assert (forall ((Heap@@26 T@U) (Mask@@12 T@U) (this@@42 T@U) ) (!  (=> (and (and (and (= (type Heap@@26) (MapType0Type RefType)) (= (type Mask@@12) (MapType1Type RefType realType))) (= (type this@@42) RefType)) (state Heap@@26 Mask@@12)) (= (|Node_rev_prev'| Heap@@26 this@@42) (|Node_rev_prev#frame| (MapType0Select Heap@@26 null (Node_reverse this@@42)) this@@42)))
 :qid |stdinbpl.648:15|
 :skolemid |54|
 :pattern ( (state Heap@@26 Mask@@12) (|Node_rev_prev'| Heap@@26 this@@42))
)))
(assert (forall ((arg0@@63 T@U) (arg1@@42 T@U) ) (! (= (type (|Node_first#frame| arg0@@63 arg1@@42)) RefType)
 :qid |funType:Node_first#frame|
 :pattern ( (|Node_first#frame| arg0@@63 arg1@@42))
)))
(assert (forall ((Heap@@27 T@U) (Mask@@13 T@U) (this@@43 T@U) ) (!  (=> (and (and (and (= (type Heap@@27) (MapType0Type RefType)) (= (type Mask@@13) (MapType1Type RefType realType))) (= (type this@@43) RefType)) (state Heap@@27 Mask@@13)) (= (|Node_first'| Heap@@27 this@@43) (|Node_first#frame| (MapType0Select Heap@@27 null (Node_reverse this@@43)) this@@43)))
 :qid |stdinbpl.765:15|
 :skolemid |59|
 :pattern ( (state Heap@@27 Mask@@13) (|Node_first'| Heap@@27 this@@43))
 :pattern ( (state Heap@@27 Mask@@13) (|Node_first#triggerStateless| this@@43) (|Node_reverse#trigger| Heap@@27 (Node_reverse this@@43)))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@28 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@28) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@28 o $allocated))) (U_2_bool (MapType0Select Heap@@28 (MapType0Select Heap@@28 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@28 o f))
)))
(assert (forall ((this@@44 T@U) ) (!  (=> (= (type this@@44) RefType) (= (PredicateMaskField (Iterator_ready this@@44)) (|Iterator_ready#sm| this@@44)))
 :qid |stdinbpl.891:15|
 :skolemid |61|
 :pattern ( (PredicateMaskField (Iterator_ready this@@44)))
)))
(assert (forall ((this@@45 T@U) ) (!  (=> (= (type this@@45) RefType) (= (PredicateMaskField (Iterator_readyForNext this@@45)) (|Iterator_readyForNext#sm| this@@45)))
 :qid |stdinbpl.1114:15|
 :skolemid |67|
 :pattern ( (PredicateMaskField (Iterator_readyForNext this@@45)))
)))
(assert (forall ((this@@46 T@U) ) (!  (=> (= (type this@@46) RefType) (= (PredicateMaskField (Iterator_readyForRemove this@@46)) (|Iterator_readyForRemove#sm| this@@46)))
 :qid |stdinbpl.1344:15|
 :skolemid |73|
 :pattern ( (PredicateMaskField (Iterator_readyForRemove this@@46)))
)))
(assert (forall ((this@@47 T@U) ) (!  (=> (= (type this@@47) RefType) (= (PredicateMaskField (List_state this@@47)) (|List_state#sm| this@@47)))
 :qid |stdinbpl.1631:15|
 :skolemid |79|
 :pattern ( (PredicateMaskField (List_state this@@47)))
)))
(assert (forall ((this@@48 T@U) ) (!  (=> (= (type this@@48) RefType) (= (PredicateMaskField (Node_state this@@48)) (|Node_state#sm| this@@48)))
 :qid |stdinbpl.1697:15|
 :skolemid |85|
 :pattern ( (PredicateMaskField (Node_state this@@48)))
)))
(assert (forall ((this@@49 T@U) ) (!  (=> (= (type this@@49) RefType) (= (PredicateMaskField (Node_reverse this@@49)) (|Node_reverse#sm| this@@49)))
 :qid |stdinbpl.1772:15|
 :skolemid |91|
 :pattern ( (PredicateMaskField (Node_reverse this@@49)))
)))
(assert (forall ((Heap@@29 T@U) (Mask@@14 T@U) (this@@50 T@U) ) (!  (=> (and (and (and (= (type Heap@@29) (MapType0Type RefType)) (= (type Mask@@14) (MapType1Type RefType realType))) (= (type this@@50) RefType)) (and (state Heap@@29 Mask@@14) (< AssumeFunctionsAbove 4))) (= (Node_first Heap@@29 this@@50) (ite (= (MapType0Select Heap@@29 this@@50 Node_prev) null) this@@50 (|Node_first'| Heap@@29 (MapType0Select Heap@@29 this@@50 Node_prev)))))
 :qid |stdinbpl.758:15|
 :skolemid |58|
 :pattern ( (state Heap@@29 Mask@@14) (Node_first Heap@@29 this@@50))
 :pattern ( (state Heap@@29 Mask@@14) (|Node_first#triggerStateless| this@@50) (|Node_reverse#trigger| Heap@@29 (Node_reverse this@@50)))
)))
(assert (forall ((Heap@@30 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@30) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@30 (MapType0Store Heap@@30 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@30 o@@0 f_3 v))
)))
(assert (forall ((Heap@@31 T@U) (Mask@@15 T@U) (this@@51 T@U) ) (!  (=> (and (and (and (= (type Heap@@31) (MapType0Type RefType)) (= (type Mask@@15) (MapType1Type RefType realType))) (= (type this@@51) RefType)) (and (state Heap@@31 Mask@@15) (< AssumeFunctionsAbove 0))) (= (Node_get_next Heap@@31 this@@51) (MapType0Select Heap@@31 this@@51 Node_next)))
 :qid |stdinbpl.294:15|
 :skolemid |38|
 :pattern ( (state Heap@@31 Mask@@15) (Node_get_next Heap@@31 this@@51))
 :pattern ( (state Heap@@31 Mask@@15) (|Node_get_next#triggerStateless| this@@51) (|Node_state#trigger| Heap@@31 (Node_state this@@51)))
)))
(assert (forall ((Heap@@32 T@U) (Mask@@16 T@U) (this@@52 T@U) ) (!  (=> (and (and (and (= (type Heap@@32) (MapType0Type RefType)) (= (type Mask@@16) (MapType1Type RefType realType))) (= (type this@@52) RefType)) (and (state Heap@@32 Mask@@16) (< AssumeFunctionsAbove 1))) (= (Node_get_prev Heap@@32 this@@52) (MapType0Select Heap@@32 this@@52 Node_prev)))
 :qid |stdinbpl.409:15|
 :skolemid |43|
 :pattern ( (state Heap@@32 Mask@@16) (Node_get_prev Heap@@32 this@@52))
 :pattern ( (state Heap@@32 Mask@@16) (|Node_get_prev#triggerStateless| this@@52) (|Node_state#trigger| Heap@@32 (Node_state this@@52)))
)))
(assert (forall ((Heap@@33 T@U) (Mask@@17 T@U) (this@@53 T@U) ) (!  (=> (and (and (and (= (type Heap@@33) (MapType0Type RefType)) (= (type Mask@@17) (MapType1Type RefType realType))) (= (type this@@53) RefType)) (and (state Heap@@33 Mask@@17) (< AssumeFunctionsAbove 2))) (= (Node_rev_next Heap@@33 this@@53) (MapType0Select Heap@@33 this@@53 Node_next)))
 :qid |stdinbpl.524:15|
 :skolemid |48|
 :pattern ( (state Heap@@33 Mask@@17) (Node_rev_next Heap@@33 this@@53))
 :pattern ( (state Heap@@33 Mask@@17) (|Node_rev_next#triggerStateless| this@@53) (|Node_reverse#trigger| Heap@@33 (Node_reverse this@@53)))
)))
(assert (forall ((Heap@@34 T@U) (Mask@@18 T@U) (this@@54 T@U) ) (!  (=> (and (and (and (= (type Heap@@34) (MapType0Type RefType)) (= (type Mask@@18) (MapType1Type RefType realType))) (= (type this@@54) RefType)) (and (state Heap@@34 Mask@@18) (< AssumeFunctionsAbove 3))) (= (Node_rev_prev Heap@@34 this@@54) (MapType0Select Heap@@34 this@@54 Node_prev)))
 :qid |stdinbpl.641:15|
 :skolemid |53|
 :pattern ( (state Heap@@34 Mask@@18) (Node_rev_prev Heap@@34 this@@54))
 :pattern ( (state Heap@@34 Mask@@18) (|Node_rev_prev#triggerStateless| this@@54) (|Node_reverse#trigger| Heap@@34 (Node_reverse this@@54)))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.172:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((arg1@@43 T@U) (arg2@@21 Real) (arg3@@19 T@U) (arg4@@11 Real) (arg1_2 T@U) (arg2_2 Real) (arg3_2 T@U) (arg4_2 Real) ) (!  (=> (and (and (and (and (= (type arg1@@43) RefType) (= (type arg3@@19) RefType)) (= (type arg1_2) RefType)) (= (type arg3_2) RefType)) (= (wand arg1@@43 arg2@@21 arg3@@19 arg4@@11) (wand arg1_2 arg2_2 arg3_2 arg4_2))) (and (= arg1@@43 arg1_2) (and (= arg2@@21 arg2_2) (and (= arg3@@19 arg3_2) (= arg4@@11 arg4_2)))))
 :qid |stdinbpl.214:15|
 :skolemid |28|
 :pattern ( (wand arg1@@43 arg2@@21 arg3@@19 arg4@@11) (wand arg1_2 arg2_2 arg3_2 arg4_2))
)))
(assert (forall ((arg1@@44 T@U) (arg2@@22 Real) (arg3@@20 T@U) (arg4@@12 Real) (arg1_2@@0 T@U) (arg2_2@@0 Real) (arg3_2@@0 T@U) (arg4_2@@0 Real) ) (!  (=> (and (and (and (and (= (type arg1@@44) RefType) (= (type arg3@@20) RefType)) (= (type arg1_2@@0) RefType)) (= (type arg3_2@@0) RefType)) (= (wand_1 arg1@@44 arg2@@22 arg3@@20 arg4@@12) (wand_1 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2@@0))) (and (= arg1@@44 arg1_2@@0) (and (= arg2@@22 arg2_2@@0) (and (= arg3@@20 arg3_2@@0) (= arg4@@12 arg4_2@@0)))))
 :qid |stdinbpl.246:15|
 :skolemid |35|
 :pattern ( (wand_1 arg1@@44 arg2@@22 arg3@@20 arg4@@12) (wand_1 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2@@0))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Heap@2 () T@U)
(declare-fun this@@55 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Heap@@35 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun Mask@0 () T@U)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun FrameFragment (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Heap@2) (MapType0Type RefType)) (= (type this@@55) RefType)) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Heap@@35) (MapType0Type RefType))) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type Heap@1) (MapType0Type RefType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (forall ((arg0@@64 T@U) (arg1@@45 T@U) ) (! (= (type (CombineFrames arg0@@64 arg1@@45)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@64 arg1@@45))
))) (forall ((arg0@@65 T@U) ) (! (= (type (FrameFragment arg0@@65)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@65))
))))
(set-info :boogie-vc-id |Node_get_next#definedness|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let ((anon6_correct true))
(let ((anon9_Else_correct  (=> (= (MapType0Select Heap@2 this@@55 Node_next) null) (=> (and (= Heap@4 Heap@2) (= (ControlFlow 0 3) 1)) anon6_correct))))
(let ((anon9_Then_correct  (=> (not (= (MapType0Select Heap@2 this@@55 Node_next) null)) (=> (and (and (forall ((o_3 T@U) (f_7 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_7))))
(let ((A@@12 (FieldTypeInv0 (type f_7))))
 (=> (and (and (= (type o_3) RefType) (= (type f_7) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@2 null (|Node_state#sm| this@@55)) o_3 f_7)) (U_2_bool (MapType1Select (MapType0Select Heap@2 null (|Node_state#sm| (MapType0Select Heap@2 this@@55 Node_next))) o_3 f_7)))) (U_2_bool (MapType1Select newPMask@0 o_3 f_7)))))
 :qid |stdinbpl.380:33|
 :skolemid |40|
 :pattern ( (MapType1Select newPMask@0 o_3 f_7))
)) (= Heap@3 (MapType0Store Heap@2 null (|Node_state#sm| this@@55) newPMask@0))) (and (= Heap@4 Heap@3) (= (ControlFlow 0 2) 1))) anon6_correct))))
(let ((anon4_correct  (=> (state Heap@@35 UnfoldingMask@5) (and (=> (= (ControlFlow 0 4) (- 0 5)) (HasDirectPerm UnfoldingMask@5 this@@55 Node_next)) (=> (HasDirectPerm UnfoldingMask@5 this@@55 Node_next) (=> (= Heap@0 (MapType0Store Heap@@35 null (|Node_state#sm| this@@55) (MapType1Store (MapType0Select Heap@@35 null (|Node_state#sm| this@@55)) this@@55 Node_val (bool_2_U true)))) (=> (and (= Heap@1 (MapType0Store Heap@0 null (|Node_state#sm| this@@55) (MapType1Store (MapType0Select Heap@0 null (|Node_state#sm| this@@55)) this@@55 Node_prev (bool_2_U true)))) (= Heap@2 (MapType0Store Heap@1 null (|Node_state#sm| this@@55) (MapType1Store (MapType0Select Heap@1 null (|Node_state#sm| this@@55)) this@@55 Node_next (bool_2_U true))))) (and (=> (= (ControlFlow 0 4) 2) anon9_Then_correct) (=> (= (ControlFlow 0 4) 3) anon9_Else_correct)))))))))
(let ((anon8_Else_correct  (=> (= (MapType0Select Heap@@35 this@@55 Node_next) null) (=> (and (= UnfoldingMask@5 UnfoldingMask@3) (= (ControlFlow 0 7) 4)) anon4_correct))))
(let ((anon8_Then_correct  (=> (and (not (= (MapType0Select Heap@@35 this@@55 Node_next) null)) (= UnfoldingMask@4 (MapType1Store UnfoldingMask@3 null (Node_state (MapType0Select Heap@@35 this@@55 Node_next)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@3 null (Node_state (MapType0Select Heap@@35 this@@55 Node_next)))) FullPerm))))) (=> (and (and (InsidePredicate (Node_state this@@55) (MapType0Select Heap@@35 null (Node_state this@@55)) (Node_state (MapType0Select Heap@@35 this@@55 Node_next)) (MapType0Select Heap@@35 null (Node_state (MapType0Select Heap@@35 this@@55 Node_next)))) (state Heap@@35 UnfoldingMask@4)) (and (= UnfoldingMask@5 UnfoldingMask@4) (= (ControlFlow 0 6) 4))) anon4_correct))))
(let ((anon2_correct  (=> (and (= UnfoldingMask@0 (MapType1Store Mask@0 null (Node_state this@@55) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (Node_state this@@55))) FullPerm)))) (not (= this@@55 null))) (=> (and (and (and (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 this@@55 Node_val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 this@@55 Node_val)) FullPerm)))) (state Heap@@35 UnfoldingMask@1)) (and (not (= this@@55 null)) (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 this@@55 Node_prev (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 this@@55 Node_prev)) FullPerm)))))) (and (and (state Heap@@35 UnfoldingMask@2) (not (= this@@55 null))) (and (= UnfoldingMask@3 (MapType1Store UnfoldingMask@2 this@@55 Node_next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@2 this@@55 Node_next)) FullPerm)))) (state Heap@@35 UnfoldingMask@3)))) (and (=> (= (ControlFlow 0 8) 6) anon8_Then_correct) (=> (= (ControlFlow 0 8) 7) anon8_Else_correct))))))
(let ((anon7_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 11) 8)) anon2_correct)))
(let ((anon7_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Node_state this@@55))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Node_state this@@55)))) (=> (= (ControlFlow 0 9) 8) anon2_correct))))))
(let ((anon0_correct  (=> (and (and (and (state Heap@@35 ZeroMask) (U_2_bool (MapType0Select Heap@@35 this@@55 $allocated))) (and (= AssumeFunctionsAbove 0) (= Mask@0 (MapType1Store ZeroMask null (Node_state this@@55) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Node_state this@@55))) FullPerm)))))) (and (and (state Heap@@35 Mask@0) (state Heap@@35 Mask@0)) (and (|Node_state#trigger| Heap@@35 (Node_state this@@55)) (= (MapType0Select Heap@@35 null (Node_state this@@55)) (CombineFrames (FrameFragment (MapType0Select Heap@@35 this@@55 Node_val)) (CombineFrames (FrameFragment (MapType0Select Heap@@35 this@@55 Node_prev)) (CombineFrames (FrameFragment (MapType0Select Heap@@35 this@@55 Node_next)) (FrameFragment (ite (not (= (MapType0Select Heap@@35 this@@55 Node_next) null)) (MapType0Select Heap@@35 null (Node_state (MapType0Select Heap@@35 this@@55 Node_next))) EmptyFrame))))))))) (and (=> (= (ControlFlow 0 12) 9) anon7_Then_correct) (=> (= (ControlFlow 0 12) 11) anon7_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 13) 12) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun Iterator_iteratee () T@U)
(declare-fun Iterator_current () T@U)
(declare-fun Iterator_last () T@U)
(declare-fun List_sentinel () T@U)
(declare-fun Node_val () T@U)
(declare-fun Node_prev () T@U)
(declare-fun Node_next () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun wand (T@U Real T@U Real) T@U)
(declare-fun getPredWandId (T@U) Int)
(declare-fun WandType_wandType () T@T)
(declare-fun wand_1 (T@U Real T@U Real) T@U)
(declare-fun WandType_wand_1Type () T@T)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun Iterator_ready (T@U) T@U)
(declare-fun PredicateType_Iterator_readyType () T@T)
(declare-fun Iterator_readyForNext (T@U) T@U)
(declare-fun PredicateType_Iterator_readyForNextType () T@T)
(declare-fun Iterator_readyForRemove (T@U) T@U)
(declare-fun PredicateType_Iterator_readyForRemoveType () T@T)
(declare-fun List_state (T@U) T@U)
(declare-fun PredicateType_List_stateType () T@T)
(declare-fun Node_state (T@U) T@U)
(declare-fun PredicateType_Node_stateType () T@T)
(declare-fun Node_reverse (T@U) T@U)
(declare-fun PredicateType_Node_reverseType () T@T)
(declare-fun |Node_get_next'| (T@U T@U) T@U)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |Node_get_next#triggerStateless| (T@U) T@U)
(declare-fun |Node_get_prev'| (T@U T@U) T@U)
(declare-fun |Node_get_prev#triggerStateless| (T@U) T@U)
(declare-fun |Node_rev_next'| (T@U T@U) T@U)
(declare-fun |Node_rev_next#triggerStateless| (T@U) T@U)
(declare-fun |Node_rev_prev'| (T@U T@U) T@U)
(declare-fun |Node_rev_prev#triggerStateless| (T@U) T@U)
(declare-fun |Node_first'| (T@U T@U) T@U)
(declare-fun |Node_first#triggerStateless| (T@U) T@U)
(declare-fun |Iterator_ready#trigger| (T@U T@U) Bool)
(declare-fun |Iterator_ready#everUsed| (T@U) Bool)
(declare-fun |Iterator_readyForNext#trigger| (T@U T@U) Bool)
(declare-fun |Iterator_readyForNext#everUsed| (T@U) Bool)
(declare-fun |Iterator_readyForRemove#trigger| (T@U T@U) Bool)
(declare-fun |Iterator_readyForRemove#everUsed| (T@U) Bool)
(declare-fun |List_state#trigger| (T@U T@U) Bool)
(declare-fun |List_state#everUsed| (T@U) Bool)
(declare-fun |Node_state#trigger| (T@U T@U) Bool)
(declare-fun |Node_state#everUsed| (T@U) Bool)
(declare-fun |Node_reverse#trigger| (T@U T@U) Bool)
(declare-fun |Node_reverse#everUsed| (T@U) Bool)
(declare-fun Node_get_next (T@U T@U) T@U)
(declare-fun Node_get_prev (T@U T@U) T@U)
(declare-fun Node_rev_next (T@U T@U) T@U)
(declare-fun Node_rev_prev (T@U T@U) T@U)
(declare-fun Node_first (T@U T@U) T@U)
(declare-fun |Iterator_ready#sm| (T@U) T@U)
(declare-fun |Iterator_readyForNext#sm| (T@U) T@U)
(declare-fun |Iterator_readyForRemove#sm| (T@U) T@U)
(declare-fun |List_state#sm| (T@U) T@U)
(declare-fun |Node_state#sm| (T@U) T@U)
(declare-fun |Node_reverse#sm| (T@U) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun |wand#ft| (T@U Real T@U Real) T@U)
(declare-fun |wand_1#ft| (T@U Real T@U Real) T@U)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |wand#sm| (T@U Real T@U Real) T@U)
(declare-fun |wand_1#sm| (T@U Real T@U Real) T@U)
(declare-fun FullPerm () Real)
(declare-fun |Node_get_next#frame| (T@U T@U) T@U)
(declare-fun |Node_get_prev#frame| (T@U T@U) T@U)
(declare-fun |Node_rev_next#frame| (T@U T@U) T@U)
(declare-fun |Node_rev_prev#frame| (T@U T@U) T@U)
(declare-fun |Node_first#frame| (T@U T@U) T@U)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (Ctor RefType) 8)) (= (type Iterator_iteratee) (FieldType NormalFieldType RefType))) (= (type Iterator_current) (FieldType NormalFieldType RefType))) (= (type Iterator_last) (FieldType NormalFieldType RefType))) (= (type List_sentinel) (FieldType NormalFieldType RefType))) (= (type Node_val) (FieldType NormalFieldType intType))) (= (type Node_prev) (FieldType NormalFieldType RefType))) (= (type Node_next) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated Iterator_iteratee Iterator_current Iterator_last List_sentinel Node_val Node_prev Node_next)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (= (Ctor WandType_wandType) 10) (forall ((arg0@@18 T@U) (arg1@@4 Real) (arg2@@1 T@U) (arg3@@0 Real) ) (! (= (type (wand arg0@@18 arg1@@4 arg2@@1 arg3@@0)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@18 arg1@@4 arg2@@1 arg3@@0))
))))
(assert (forall ((arg1@@5 T@U) (arg2@@2 Real) (arg3@@1 T@U) (arg4 Real) ) (!  (=> (and (= (type arg1@@5) RefType) (= (type arg3@@1) RefType)) (= (getPredWandId (wand arg1@@5 arg2@@2 arg3@@1 arg4)) 6))
 :qid |stdinbpl.210:15|
 :skolemid |27|
 :pattern ( (wand arg1@@5 arg2@@2 arg3@@1 arg4))
)))
(assert  (and (= (Ctor WandType_wand_1Type) 11) (forall ((arg0@@19 T@U) (arg1@@6 Real) (arg2@@3 T@U) (arg3@@2 Real) ) (! (= (type (wand_1 arg0@@19 arg1@@6 arg2@@3 arg3@@2)) (FieldType WandType_wand_1Type intType))
 :qid |funType:wand_1|
 :pattern ( (wand_1 arg0@@19 arg1@@6 arg2@@3 arg3@@2))
))))
(assert (forall ((arg1@@7 T@U) (arg2@@4 Real) (arg3@@3 T@U) (arg4@@0 Real) ) (!  (=> (and (= (type arg1@@7) RefType) (= (type arg3@@3) RefType)) (= (getPredWandId (wand_1 arg1@@7 arg2@@4 arg3@@3 arg4@@0)) 7))
 :qid |stdinbpl.242:15|
 :skolemid |34|
 :pattern ( (wand_1 arg1@@7 arg2@@4 arg3@@3 arg4@@0))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@20 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType1Type arg0@@20 arg1@@8)) 12)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@21 T@T) (arg1@@9 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@21 arg1@@9)) arg0@@21)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@21 arg1@@9))
))) (forall ((arg0@@22 T@T) (arg1@@10 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@22 arg1@@10)) arg1@@10)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@22 arg1@@10))
))) (forall ((arg0@@23 T@U) (arg1@@11 T@U) (arg2@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@23))))
(= (type (MapType1Select arg0@@23 arg1@@11 arg2@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@23 arg1@@11 arg2@@5))
))) (forall ((arg0@@24 T@U) (arg1@@12 T@U) (arg2@@6 T@U) (arg3@@4 T@U) ) (! (let ((aVar1@@0 (type arg3@@4)))
(let ((aVar0@@0 (type arg1@@12)))
(= (type (MapType1Store arg0@@24 arg1@@12 arg2@@6 arg3@@4)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@24 arg1@@12 arg2@@6 arg3@@4))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (and (= (Ctor FrameTypeType) 13) (= (type null) RefType)) (forall ((arg0@@25 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@25))))
(= (type (PredicateMaskField arg0@@25)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@25))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@0 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@26 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@26))))
(= (type (WandMaskField arg0@@26)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@26))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_Iterator_readyType) 14) (forall ((arg0@@27 T@U) ) (! (= (type (Iterator_ready arg0@@27)) (FieldType PredicateType_Iterator_readyType FrameTypeType))
 :qid |funType:Iterator_ready|
 :pattern ( (Iterator_ready arg0@@27))
))))
(assert (forall ((this T@U) ) (!  (=> (= (type this) RefType) (IsPredicateField (Iterator_ready this)))
 :qid |stdinbpl.895:15|
 :skolemid |62|
 :pattern ( (Iterator_ready this))
)))
(assert  (and (= (Ctor PredicateType_Iterator_readyForNextType) 15) (forall ((arg0@@28 T@U) ) (! (= (type (Iterator_readyForNext arg0@@28)) (FieldType PredicateType_Iterator_readyForNextType FrameTypeType))
 :qid |funType:Iterator_readyForNext|
 :pattern ( (Iterator_readyForNext arg0@@28))
))))
(assert (forall ((this@@0 T@U) ) (!  (=> (= (type this@@0) RefType) (IsPredicateField (Iterator_readyForNext this@@0)))
 :qid |stdinbpl.1118:15|
 :skolemid |68|
 :pattern ( (Iterator_readyForNext this@@0))
)))
(assert  (and (= (Ctor PredicateType_Iterator_readyForRemoveType) 16) (forall ((arg0@@29 T@U) ) (! (= (type (Iterator_readyForRemove arg0@@29)) (FieldType PredicateType_Iterator_readyForRemoveType FrameTypeType))
 :qid |funType:Iterator_readyForRemove|
 :pattern ( (Iterator_readyForRemove arg0@@29))
))))
(assert (forall ((this@@1 T@U) ) (!  (=> (= (type this@@1) RefType) (IsPredicateField (Iterator_readyForRemove this@@1)))
 :qid |stdinbpl.1348:15|
 :skolemid |74|
 :pattern ( (Iterator_readyForRemove this@@1))
)))
(assert  (and (= (Ctor PredicateType_List_stateType) 17) (forall ((arg0@@30 T@U) ) (! (= (type (List_state arg0@@30)) (FieldType PredicateType_List_stateType FrameTypeType))
 :qid |funType:List_state|
 :pattern ( (List_state arg0@@30))
))))
(assert (forall ((this@@2 T@U) ) (!  (=> (= (type this@@2) RefType) (IsPredicateField (List_state this@@2)))
 :qid |stdinbpl.1635:15|
 :skolemid |80|
 :pattern ( (List_state this@@2))
)))
(assert  (and (= (Ctor PredicateType_Node_stateType) 18) (forall ((arg0@@31 T@U) ) (! (= (type (Node_state arg0@@31)) (FieldType PredicateType_Node_stateType FrameTypeType))
 :qid |funType:Node_state|
 :pattern ( (Node_state arg0@@31))
))))
(assert (forall ((this@@3 T@U) ) (!  (=> (= (type this@@3) RefType) (IsPredicateField (Node_state this@@3)))
 :qid |stdinbpl.1701:15|
 :skolemid |86|
 :pattern ( (Node_state this@@3))
)))
(assert  (and (= (Ctor PredicateType_Node_reverseType) 19) (forall ((arg0@@32 T@U) ) (! (= (type (Node_reverse arg0@@32)) (FieldType PredicateType_Node_reverseType FrameTypeType))
 :qid |funType:Node_reverse|
 :pattern ( (Node_reverse arg0@@32))
))))
(assert (forall ((this@@4 T@U) ) (!  (=> (= (type this@@4) RefType) (IsPredicateField (Node_reverse this@@4)))
 :qid |stdinbpl.1776:15|
 :skolemid |92|
 :pattern ( (Node_reverse this@@4))
)))
(assert  (and (forall ((arg0@@33 T@U) (arg1@@13 T@U) ) (! (= (type (|Node_get_next'| arg0@@33 arg1@@13)) RefType)
 :qid |funType:Node_get_next'|
 :pattern ( (|Node_get_next'| arg0@@33 arg1@@13))
)) (forall ((arg0@@34 T@U) ) (! (= (type (|Node_get_next#triggerStateless| arg0@@34)) RefType)
 :qid |funType:Node_get_next#triggerStateless|
 :pattern ( (|Node_get_next#triggerStateless| arg0@@34))
))))
(assert (forall ((Heap@@2 T@U) (this@@5 T@U) ) (!  (=> (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@5) RefType)) (dummyFunction (|Node_get_next#triggerStateless| this@@5)))
 :qid |stdinbpl.288:15|
 :skolemid |37|
 :pattern ( (|Node_get_next'| Heap@@2 this@@5))
)))
(assert  (and (forall ((arg0@@35 T@U) (arg1@@14 T@U) ) (! (= (type (|Node_get_prev'| arg0@@35 arg1@@14)) RefType)
 :qid |funType:Node_get_prev'|
 :pattern ( (|Node_get_prev'| arg0@@35 arg1@@14))
)) (forall ((arg0@@36 T@U) ) (! (= (type (|Node_get_prev#triggerStateless| arg0@@36)) RefType)
 :qid |funType:Node_get_prev#triggerStateless|
 :pattern ( (|Node_get_prev#triggerStateless| arg0@@36))
))))
(assert (forall ((Heap@@3 T@U) (this@@6 T@U) ) (!  (=> (and (= (type Heap@@3) (MapType0Type RefType)) (= (type this@@6) RefType)) (dummyFunction (|Node_get_prev#triggerStateless| this@@6)))
 :qid |stdinbpl.403:15|
 :skolemid |42|
 :pattern ( (|Node_get_prev'| Heap@@3 this@@6))
)))
(assert  (and (forall ((arg0@@37 T@U) (arg1@@15 T@U) ) (! (= (type (|Node_rev_next'| arg0@@37 arg1@@15)) RefType)
 :qid |funType:Node_rev_next'|
 :pattern ( (|Node_rev_next'| arg0@@37 arg1@@15))
)) (forall ((arg0@@38 T@U) ) (! (= (type (|Node_rev_next#triggerStateless| arg0@@38)) RefType)
 :qid |funType:Node_rev_next#triggerStateless|
 :pattern ( (|Node_rev_next#triggerStateless| arg0@@38))
))))
(assert (forall ((Heap@@4 T@U) (this@@7 T@U) ) (!  (=> (and (= (type Heap@@4) (MapType0Type RefType)) (= (type this@@7) RefType)) (dummyFunction (|Node_rev_next#triggerStateless| this@@7)))
 :qid |stdinbpl.518:15|
 :skolemid |47|
 :pattern ( (|Node_rev_next'| Heap@@4 this@@7))
)))
(assert  (and (forall ((arg0@@39 T@U) (arg1@@16 T@U) ) (! (= (type (|Node_rev_prev'| arg0@@39 arg1@@16)) RefType)
 :qid |funType:Node_rev_prev'|
 :pattern ( (|Node_rev_prev'| arg0@@39 arg1@@16))
)) (forall ((arg0@@40 T@U) ) (! (= (type (|Node_rev_prev#triggerStateless| arg0@@40)) RefType)
 :qid |funType:Node_rev_prev#triggerStateless|
 :pattern ( (|Node_rev_prev#triggerStateless| arg0@@40))
))))
(assert (forall ((Heap@@5 T@U) (this@@8 T@U) ) (!  (=> (and (= (type Heap@@5) (MapType0Type RefType)) (= (type this@@8) RefType)) (dummyFunction (|Node_rev_prev#triggerStateless| this@@8)))
 :qid |stdinbpl.635:15|
 :skolemid |52|
 :pattern ( (|Node_rev_prev'| Heap@@5 this@@8))
)))
(assert  (and (forall ((arg0@@41 T@U) (arg1@@17 T@U) ) (! (= (type (|Node_first'| arg0@@41 arg1@@17)) RefType)
 :qid |funType:Node_first'|
 :pattern ( (|Node_first'| arg0@@41 arg1@@17))
)) (forall ((arg0@@42 T@U) ) (! (= (type (|Node_first#triggerStateless| arg0@@42)) RefType)
 :qid |funType:Node_first#triggerStateless|
 :pattern ( (|Node_first#triggerStateless| arg0@@42))
))))
(assert (forall ((Heap@@6 T@U) (this@@9 T@U) ) (!  (=> (and (= (type Heap@@6) (MapType0Type RefType)) (= (type this@@9) RefType)) (dummyFunction (|Node_first#triggerStateless| this@@9)))
 :qid |stdinbpl.752:15|
 :skolemid |57|
 :pattern ( (|Node_first'| Heap@@6 this@@9))
)))
(assert (forall ((Heap@@7 T@U) (this@@10 T@U) ) (!  (=> (and (= (type Heap@@7) (MapType0Type RefType)) (= (type this@@10) RefType)) (|Iterator_ready#everUsed| (Iterator_ready this@@10)))
 :qid |stdinbpl.914:15|
 :skolemid |66|
 :pattern ( (|Iterator_ready#trigger| Heap@@7 (Iterator_ready this@@10)))
)))
(assert (forall ((Heap@@8 T@U) (this@@11 T@U) ) (!  (=> (and (= (type Heap@@8) (MapType0Type RefType)) (= (type this@@11) RefType)) (|Iterator_readyForNext#everUsed| (Iterator_readyForNext this@@11)))
 :qid |stdinbpl.1137:15|
 :skolemid |72|
 :pattern ( (|Iterator_readyForNext#trigger| Heap@@8 (Iterator_readyForNext this@@11)))
)))
(assert (forall ((Heap@@9 T@U) (this@@12 T@U) ) (!  (=> (and (= (type Heap@@9) (MapType0Type RefType)) (= (type this@@12) RefType)) (|Iterator_readyForRemove#everUsed| (Iterator_readyForRemove this@@12)))
 :qid |stdinbpl.1367:15|
 :skolemid |78|
 :pattern ( (|Iterator_readyForRemove#trigger| Heap@@9 (Iterator_readyForRemove this@@12)))
)))
(assert (forall ((Heap@@10 T@U) (this@@13 T@U) ) (!  (=> (and (= (type Heap@@10) (MapType0Type RefType)) (= (type this@@13) RefType)) (|List_state#everUsed| (List_state this@@13)))
 :qid |stdinbpl.1654:15|
 :skolemid |84|
 :pattern ( (|List_state#trigger| Heap@@10 (List_state this@@13)))
)))
(assert (forall ((Heap@@11 T@U) (this@@14 T@U) ) (!  (=> (and (= (type Heap@@11) (MapType0Type RefType)) (= (type this@@14) RefType)) (|Node_state#everUsed| (Node_state this@@14)))
 :qid |stdinbpl.1720:15|
 :skolemid |90|
 :pattern ( (|Node_state#trigger| Heap@@11 (Node_state this@@14)))
)))
(assert (forall ((Heap@@12 T@U) (this@@15 T@U) ) (!  (=> (and (= (type Heap@@12) (MapType0Type RefType)) (= (type this@@15) RefType)) (|Node_reverse#everUsed| (Node_reverse this@@15)))
 :qid |stdinbpl.1795:15|
 :skolemid |96|
 :pattern ( (|Node_reverse#trigger| Heap@@12 (Node_reverse this@@15)))
)))
(assert (forall ((Heap@@13 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@13) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@13 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@13 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@13 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((arg0@@43 T@U) (arg1@@18 T@U) ) (! (= (type (Node_get_next arg0@@43 arg1@@18)) RefType)
 :qid |funType:Node_get_next|
 :pattern ( (Node_get_next arg0@@43 arg1@@18))
)))
(assert (forall ((Heap@@14 T@U) (this@@16 T@U) ) (!  (=> (and (= (type Heap@@14) (MapType0Type RefType)) (= (type this@@16) RefType)) (and (= (Node_get_next Heap@@14 this@@16) (|Node_get_next'| Heap@@14 this@@16)) (dummyFunction (|Node_get_next#triggerStateless| this@@16))))
 :qid |stdinbpl.284:15|
 :skolemid |36|
 :pattern ( (Node_get_next Heap@@14 this@@16))
)))
(assert (forall ((arg0@@44 T@U) (arg1@@19 T@U) ) (! (= (type (Node_get_prev arg0@@44 arg1@@19)) RefType)
 :qid |funType:Node_get_prev|
 :pattern ( (Node_get_prev arg0@@44 arg1@@19))
)))
(assert (forall ((Heap@@15 T@U) (this@@17 T@U) ) (!  (=> (and (= (type Heap@@15) (MapType0Type RefType)) (= (type this@@17) RefType)) (and (= (Node_get_prev Heap@@15 this@@17) (|Node_get_prev'| Heap@@15 this@@17)) (dummyFunction (|Node_get_prev#triggerStateless| this@@17))))
 :qid |stdinbpl.399:15|
 :skolemid |41|
 :pattern ( (Node_get_prev Heap@@15 this@@17))
)))
(assert (forall ((arg0@@45 T@U) (arg1@@20 T@U) ) (! (= (type (Node_rev_next arg0@@45 arg1@@20)) RefType)
 :qid |funType:Node_rev_next|
 :pattern ( (Node_rev_next arg0@@45 arg1@@20))
)))
(assert (forall ((Heap@@16 T@U) (this@@18 T@U) ) (!  (=> (and (= (type Heap@@16) (MapType0Type RefType)) (= (type this@@18) RefType)) (and (= (Node_rev_next Heap@@16 this@@18) (|Node_rev_next'| Heap@@16 this@@18)) (dummyFunction (|Node_rev_next#triggerStateless| this@@18))))
 :qid |stdinbpl.514:15|
 :skolemid |46|
 :pattern ( (Node_rev_next Heap@@16 this@@18))
)))
(assert (forall ((arg0@@46 T@U) (arg1@@21 T@U) ) (! (= (type (Node_rev_prev arg0@@46 arg1@@21)) RefType)
 :qid |funType:Node_rev_prev|
 :pattern ( (Node_rev_prev arg0@@46 arg1@@21))
)))
(assert (forall ((Heap@@17 T@U) (this@@19 T@U) ) (!  (=> (and (= (type Heap@@17) (MapType0Type RefType)) (= (type this@@19) RefType)) (and (= (Node_rev_prev Heap@@17 this@@19) (|Node_rev_prev'| Heap@@17 this@@19)) (dummyFunction (|Node_rev_prev#triggerStateless| this@@19))))
 :qid |stdinbpl.631:15|
 :skolemid |51|
 :pattern ( (Node_rev_prev Heap@@17 this@@19))
)))
(assert (forall ((arg0@@47 T@U) (arg1@@22 T@U) ) (! (= (type (Node_first arg0@@47 arg1@@22)) RefType)
 :qid |funType:Node_first|
 :pattern ( (Node_first arg0@@47 arg1@@22))
)))
(assert (forall ((Heap@@18 T@U) (this@@20 T@U) ) (!  (=> (and (= (type Heap@@18) (MapType0Type RefType)) (= (type this@@20) RefType)) (and (= (Node_first Heap@@18 this@@20) (|Node_first'| Heap@@18 this@@20)) (dummyFunction (|Node_first#triggerStateless| this@@20))))
 :qid |stdinbpl.748:15|
 :skolemid |56|
 :pattern ( (Node_first Heap@@18 this@@20))
)))
(assert (forall ((this@@21 T@U) (this2 T@U) ) (!  (=> (and (and (= (type this@@21) RefType) (= (type this2) RefType)) (= (Iterator_ready this@@21) (Iterator_ready this2))) (= this@@21 this2))
 :qid |stdinbpl.905:15|
 :skolemid |64|
 :pattern ( (Iterator_ready this@@21) (Iterator_ready this2))
)))
(assert (forall ((arg0@@48 T@U) ) (! (= (type (|Iterator_ready#sm| arg0@@48)) (FieldType PredicateType_Iterator_readyType (MapType1Type RefType boolType)))
 :qid |funType:Iterator_ready#sm|
 :pattern ( (|Iterator_ready#sm| arg0@@48))
)))
(assert (forall ((this@@22 T@U) (this2@@0 T@U) ) (!  (=> (and (and (= (type this@@22) RefType) (= (type this2@@0) RefType)) (= (|Iterator_ready#sm| this@@22) (|Iterator_ready#sm| this2@@0))) (= this@@22 this2@@0))
 :qid |stdinbpl.909:15|
 :skolemid |65|
 :pattern ( (|Iterator_ready#sm| this@@22) (|Iterator_ready#sm| this2@@0))
)))
(assert (forall ((this@@23 T@U) (this2@@1 T@U) ) (!  (=> (and (and (= (type this@@23) RefType) (= (type this2@@1) RefType)) (= (Iterator_readyForNext this@@23) (Iterator_readyForNext this2@@1))) (= this@@23 this2@@1))
 :qid |stdinbpl.1128:15|
 :skolemid |70|
 :pattern ( (Iterator_readyForNext this@@23) (Iterator_readyForNext this2@@1))
)))
(assert (forall ((arg0@@49 T@U) ) (! (= (type (|Iterator_readyForNext#sm| arg0@@49)) (FieldType PredicateType_Iterator_readyForNextType (MapType1Type RefType boolType)))
 :qid |funType:Iterator_readyForNext#sm|
 :pattern ( (|Iterator_readyForNext#sm| arg0@@49))
)))
(assert (forall ((this@@24 T@U) (this2@@2 T@U) ) (!  (=> (and (and (= (type this@@24) RefType) (= (type this2@@2) RefType)) (= (|Iterator_readyForNext#sm| this@@24) (|Iterator_readyForNext#sm| this2@@2))) (= this@@24 this2@@2))
 :qid |stdinbpl.1132:15|
 :skolemid |71|
 :pattern ( (|Iterator_readyForNext#sm| this@@24) (|Iterator_readyForNext#sm| this2@@2))
)))
(assert (forall ((this@@25 T@U) (this2@@3 T@U) ) (!  (=> (and (and (= (type this@@25) RefType) (= (type this2@@3) RefType)) (= (Iterator_readyForRemove this@@25) (Iterator_readyForRemove this2@@3))) (= this@@25 this2@@3))
 :qid |stdinbpl.1358:15|
 :skolemid |76|
 :pattern ( (Iterator_readyForRemove this@@25) (Iterator_readyForRemove this2@@3))
)))
(assert (forall ((arg0@@50 T@U) ) (! (= (type (|Iterator_readyForRemove#sm| arg0@@50)) (FieldType PredicateType_Iterator_readyForRemoveType (MapType1Type RefType boolType)))
 :qid |funType:Iterator_readyForRemove#sm|
 :pattern ( (|Iterator_readyForRemove#sm| arg0@@50))
)))
(assert (forall ((this@@26 T@U) (this2@@4 T@U) ) (!  (=> (and (and (= (type this@@26) RefType) (= (type this2@@4) RefType)) (= (|Iterator_readyForRemove#sm| this@@26) (|Iterator_readyForRemove#sm| this2@@4))) (= this@@26 this2@@4))
 :qid |stdinbpl.1362:15|
 :skolemid |77|
 :pattern ( (|Iterator_readyForRemove#sm| this@@26) (|Iterator_readyForRemove#sm| this2@@4))
)))
(assert (forall ((this@@27 T@U) (this2@@5 T@U) ) (!  (=> (and (and (= (type this@@27) RefType) (= (type this2@@5) RefType)) (= (List_state this@@27) (List_state this2@@5))) (= this@@27 this2@@5))
 :qid |stdinbpl.1645:15|
 :skolemid |82|
 :pattern ( (List_state this@@27) (List_state this2@@5))
)))
(assert (forall ((arg0@@51 T@U) ) (! (= (type (|List_state#sm| arg0@@51)) (FieldType PredicateType_List_stateType (MapType1Type RefType boolType)))
 :qid |funType:List_state#sm|
 :pattern ( (|List_state#sm| arg0@@51))
)))
(assert (forall ((this@@28 T@U) (this2@@6 T@U) ) (!  (=> (and (and (= (type this@@28) RefType) (= (type this2@@6) RefType)) (= (|List_state#sm| this@@28) (|List_state#sm| this2@@6))) (= this@@28 this2@@6))
 :qid |stdinbpl.1649:15|
 :skolemid |83|
 :pattern ( (|List_state#sm| this@@28) (|List_state#sm| this2@@6))
)))
(assert (forall ((this@@29 T@U) (this2@@7 T@U) ) (!  (=> (and (and (= (type this@@29) RefType) (= (type this2@@7) RefType)) (= (Node_state this@@29) (Node_state this2@@7))) (= this@@29 this2@@7))
 :qid |stdinbpl.1711:15|
 :skolemid |88|
 :pattern ( (Node_state this@@29) (Node_state this2@@7))
)))
(assert (forall ((arg0@@52 T@U) ) (! (= (type (|Node_state#sm| arg0@@52)) (FieldType PredicateType_Node_stateType (MapType1Type RefType boolType)))
 :qid |funType:Node_state#sm|
 :pattern ( (|Node_state#sm| arg0@@52))
)))
(assert (forall ((this@@30 T@U) (this2@@8 T@U) ) (!  (=> (and (and (= (type this@@30) RefType) (= (type this2@@8) RefType)) (= (|Node_state#sm| this@@30) (|Node_state#sm| this2@@8))) (= this@@30 this2@@8))
 :qid |stdinbpl.1715:15|
 :skolemid |89|
 :pattern ( (|Node_state#sm| this@@30) (|Node_state#sm| this2@@8))
)))
(assert (forall ((this@@31 T@U) (this2@@9 T@U) ) (!  (=> (and (and (= (type this@@31) RefType) (= (type this2@@9) RefType)) (= (Node_reverse this@@31) (Node_reverse this2@@9))) (= this@@31 this2@@9))
 :qid |stdinbpl.1786:15|
 :skolemid |94|
 :pattern ( (Node_reverse this@@31) (Node_reverse this2@@9))
)))
(assert (forall ((arg0@@53 T@U) ) (! (= (type (|Node_reverse#sm| arg0@@53)) (FieldType PredicateType_Node_reverseType (MapType1Type RefType boolType)))
 :qid |funType:Node_reverse#sm|
 :pattern ( (|Node_reverse#sm| arg0@@53))
)))
(assert (forall ((this@@32 T@U) (this2@@10 T@U) ) (!  (=> (and (and (= (type this@@32) RefType) (= (type this2@@10) RefType)) (= (|Node_reverse#sm| this@@32) (|Node_reverse#sm| this2@@10))) (= this@@32 this2@@10))
 :qid |stdinbpl.1790:15|
 :skolemid |95|
 :pattern ( (|Node_reverse#sm| this@@32) (|Node_reverse#sm| this2@@10))
)))
(assert (forall ((Heap@@19 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@19) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@19 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@19 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@19 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.177:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField Iterator_iteratee)))
(assert  (not (IsWandField Iterator_iteratee)))
(assert  (not (IsPredicateField Iterator_current)))
(assert  (not (IsWandField Iterator_current)))
(assert  (not (IsPredicateField Iterator_last)))
(assert  (not (IsWandField Iterator_last)))
(assert  (not (IsPredicateField List_sentinel)))
(assert  (not (IsWandField List_sentinel)))
(assert  (not (IsPredicateField Node_val)))
(assert  (not (IsWandField Node_val)))
(assert  (not (IsPredicateField Node_prev)))
(assert  (not (IsWandField Node_prev)))
(assert  (not (IsPredicateField Node_next)))
(assert  (not (IsWandField Node_next)))
(assert (forall ((Heap@@20 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@20) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@20 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@20 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@20 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert (forall ((arg1@@23 T@U) (arg2@@7 Real) (arg3@@5 T@U) (arg4@@1 Real) ) (!  (=> (and (= (type arg1@@23) RefType) (= (type arg3@@5) RefType)) (IsWandField (wand arg1@@23 arg2@@7 arg3@@5 arg4@@1)))
 :qid |stdinbpl.190:15|
 :skolemid |22|
 :pattern ( (wand arg1@@23 arg2@@7 arg3@@5 arg4@@1))
)))
(assert (forall ((arg0@@54 T@U) (arg1@@24 Real) (arg2@@8 T@U) (arg3@@6 Real) ) (! (= (type (|wand#ft| arg0@@54 arg1@@24 arg2@@8 arg3@@6)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@54 arg1@@24 arg2@@8 arg3@@6))
)))
(assert (forall ((arg1@@25 T@U) (arg2@@9 Real) (arg3@@7 T@U) (arg4@@2 Real) ) (!  (=> (and (= (type arg1@@25) RefType) (= (type arg3@@7) RefType)) (IsWandField (|wand#ft| arg1@@25 arg2@@9 arg3@@7 arg4@@2)))
 :qid |stdinbpl.194:15|
 :skolemid |23|
 :pattern ( (|wand#ft| arg1@@25 arg2@@9 arg3@@7 arg4@@2))
)))
(assert (forall ((arg1@@26 T@U) (arg2@@10 Real) (arg3@@8 T@U) (arg4@@3 Real) ) (!  (=> (and (= (type arg1@@26) RefType) (= (type arg3@@8) RefType)) (IsWandField (wand_1 arg1@@26 arg2@@10 arg3@@8 arg4@@3)))
 :qid |stdinbpl.222:15|
 :skolemid |29|
 :pattern ( (wand_1 arg1@@26 arg2@@10 arg3@@8 arg4@@3))
)))
(assert (forall ((arg0@@55 T@U) (arg1@@27 Real) (arg2@@11 T@U) (arg3@@9 Real) ) (! (= (type (|wand_1#ft| arg0@@55 arg1@@27 arg2@@11 arg3@@9)) (FieldType WandType_wand_1Type FrameTypeType))
 :qid |funType:wand_1#ft|
 :pattern ( (|wand_1#ft| arg0@@55 arg1@@27 arg2@@11 arg3@@9))
)))
(assert (forall ((arg1@@28 T@U) (arg2@@12 Real) (arg3@@10 T@U) (arg4@@4 Real) ) (!  (=> (and (= (type arg1@@28) RefType) (= (type arg3@@10) RefType)) (IsWandField (|wand_1#ft| arg1@@28 arg2@@12 arg3@@10 arg4@@4)))
 :qid |stdinbpl.226:15|
 :skolemid |30|
 :pattern ( (|wand_1#ft| arg1@@28 arg2@@12 arg3@@10 arg4@@4))
)))
(assert  (and (forall ((arg0@@56 Real) (arg1@@29 T@U) ) (! (= (type (ConditionalFrame arg0@@56 arg1@@29)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@56 arg1@@29))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.165:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((arg1@@30 T@U) (arg2@@13 Real) (arg3@@11 T@U) (arg4@@5 Real) ) (!  (=> (and (= (type arg1@@30) RefType) (= (type arg3@@11) RefType)) (not (IsPredicateField (wand arg1@@30 arg2@@13 arg3@@11 arg4@@5))))
 :qid |stdinbpl.198:15|
 :skolemid |24|
 :pattern ( (wand arg1@@30 arg2@@13 arg3@@11 arg4@@5))
)))
(assert (forall ((arg1@@31 T@U) (arg2@@14 Real) (arg3@@12 T@U) (arg4@@6 Real) ) (!  (=> (and (= (type arg1@@31) RefType) (= (type arg3@@12) RefType)) (not (IsPredicateField (|wand#ft| arg1@@31 arg2@@14 arg3@@12 arg4@@6))))
 :qid |stdinbpl.202:15|
 :skolemid |25|
 :pattern ( (|wand#ft| arg1@@31 arg2@@14 arg3@@12 arg4@@6))
)))
(assert (forall ((arg1@@32 T@U) (arg2@@15 Real) (arg3@@13 T@U) (arg4@@7 Real) ) (!  (=> (and (= (type arg1@@32) RefType) (= (type arg3@@13) RefType)) (not (IsPredicateField (wand_1 arg1@@32 arg2@@15 arg3@@13 arg4@@7))))
 :qid |stdinbpl.230:15|
 :skolemid |31|
 :pattern ( (wand_1 arg1@@32 arg2@@15 arg3@@13 arg4@@7))
)))
(assert (forall ((arg1@@33 T@U) (arg2@@16 Real) (arg3@@14 T@U) (arg4@@8 Real) ) (!  (=> (and (= (type arg1@@33) RefType) (= (type arg3@@14) RefType)) (not (IsPredicateField (|wand_1#ft| arg1@@33 arg2@@16 arg3@@14 arg4@@8))))
 :qid |stdinbpl.234:15|
 :skolemid |32|
 :pattern ( (|wand_1#ft| arg1@@33 arg2@@16 arg3@@14 arg4@@8))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((arg0@@57 T@U) (arg1@@34 Real) (arg2@@17 T@U) (arg3@@15 Real) ) (! (= (type (|wand#sm| arg0@@57 arg1@@34 arg2@@17 arg3@@15)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@57 arg1@@34 arg2@@17 arg3@@15))
)))
(assert (forall ((arg1@@35 T@U) (arg2@@18 Real) (arg3@@16 T@U) (arg4@@9 Real) ) (!  (=> (and (= (type arg1@@35) RefType) (= (type arg3@@16) RefType)) (= (|wand#sm| arg1@@35 arg2@@18 arg3@@16 arg4@@9) (WandMaskField (|wand#ft| arg1@@35 arg2@@18 arg3@@16 arg4@@9))))
 :qid |stdinbpl.206:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand#ft| arg1@@35 arg2@@18 arg3@@16 arg4@@9)))
)))
(assert (forall ((arg0@@58 T@U) (arg1@@36 Real) (arg2@@19 T@U) (arg3@@17 Real) ) (! (= (type (|wand_1#sm| arg0@@58 arg1@@36 arg2@@19 arg3@@17)) (FieldType WandType_wand_1Type (MapType1Type RefType boolType)))
 :qid |funType:wand_1#sm|
 :pattern ( (|wand_1#sm| arg0@@58 arg1@@36 arg2@@19 arg3@@17))
)))
(assert (forall ((arg1@@37 T@U) (arg2@@20 Real) (arg3@@18 T@U) (arg4@@10 Real) ) (!  (=> (and (= (type arg1@@37) RefType) (= (type arg3@@18) RefType)) (= (|wand_1#sm| arg1@@37 arg2@@20 arg3@@18 arg4@@10) (WandMaskField (|wand_1#ft| arg1@@37 arg2@@20 arg3@@18 arg4@@10))))
 :qid |stdinbpl.238:15|
 :skolemid |33|
 :pattern ( (WandMaskField (|wand_1#ft| arg1@@37 arg2@@20 arg3@@18 arg4@@10)))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@21 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@21) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@21 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@21 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@21 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@21 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@22 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@22) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@22 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@22 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@22 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@22 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@33 T@U) ) (!  (=> (= (type this@@33) RefType) (= (getPredWandId (Iterator_ready this@@33)) 0))
 :qid |stdinbpl.899:15|
 :skolemid |63|
 :pattern ( (Iterator_ready this@@33))
)))
(assert (forall ((this@@34 T@U) ) (!  (=> (= (type this@@34) RefType) (= (getPredWandId (Iterator_readyForNext this@@34)) 1))
 :qid |stdinbpl.1122:15|
 :skolemid |69|
 :pattern ( (Iterator_readyForNext this@@34))
)))
(assert (forall ((this@@35 T@U) ) (!  (=> (= (type this@@35) RefType) (= (getPredWandId (Iterator_readyForRemove this@@35)) 2))
 :qid |stdinbpl.1352:15|
 :skolemid |75|
 :pattern ( (Iterator_readyForRemove this@@35))
)))
(assert (forall ((this@@36 T@U) ) (!  (=> (= (type this@@36) RefType) (= (getPredWandId (List_state this@@36)) 3))
 :qid |stdinbpl.1639:15|
 :skolemid |81|
 :pattern ( (List_state this@@36))
)))
(assert (forall ((this@@37 T@U) ) (!  (=> (= (type this@@37) RefType) (= (getPredWandId (Node_state this@@37)) 4))
 :qid |stdinbpl.1705:15|
 :skolemid |87|
 :pattern ( (Node_state this@@37))
)))
(assert (forall ((this@@38 T@U) ) (!  (=> (= (type this@@38) RefType) (= (getPredWandId (Node_reverse this@@38)) 5))
 :qid |stdinbpl.1780:15|
 :skolemid |93|
 :pattern ( (Node_reverse this@@38))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((arg0@@59 T@U) (arg1@@38 T@U) ) (! (= (type (|Node_get_next#frame| arg0@@59 arg1@@38)) RefType)
 :qid |funType:Node_get_next#frame|
 :pattern ( (|Node_get_next#frame| arg0@@59 arg1@@38))
)))
(assert (forall ((Heap@@23 T@U) (Mask@@9 T@U) (this@@39 T@U) ) (!  (=> (and (and (and (= (type Heap@@23) (MapType0Type RefType)) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type this@@39) RefType)) (state Heap@@23 Mask@@9)) (= (|Node_get_next'| Heap@@23 this@@39) (|Node_get_next#frame| (MapType0Select Heap@@23 null (Node_state this@@39)) this@@39)))
 :qid |stdinbpl.301:15|
 :skolemid |39|
 :pattern ( (state Heap@@23 Mask@@9) (|Node_get_next'| Heap@@23 this@@39))
)))
(assert (forall ((arg0@@60 T@U) (arg1@@39 T@U) ) (! (= (type (|Node_get_prev#frame| arg0@@60 arg1@@39)) RefType)
 :qid |funType:Node_get_prev#frame|
 :pattern ( (|Node_get_prev#frame| arg0@@60 arg1@@39))
)))
(assert (forall ((Heap@@24 T@U) (Mask@@10 T@U) (this@@40 T@U) ) (!  (=> (and (and (and (= (type Heap@@24) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type this@@40) RefType)) (state Heap@@24 Mask@@10)) (= (|Node_get_prev'| Heap@@24 this@@40) (|Node_get_prev#frame| (MapType0Select Heap@@24 null (Node_state this@@40)) this@@40)))
 :qid |stdinbpl.416:15|
 :skolemid |44|
 :pattern ( (state Heap@@24 Mask@@10) (|Node_get_prev'| Heap@@24 this@@40))
)))
(assert (forall ((arg0@@61 T@U) (arg1@@40 T@U) ) (! (= (type (|Node_rev_next#frame| arg0@@61 arg1@@40)) RefType)
 :qid |funType:Node_rev_next#frame|
 :pattern ( (|Node_rev_next#frame| arg0@@61 arg1@@40))
)))
(assert (forall ((Heap@@25 T@U) (Mask@@11 T@U) (this@@41 T@U) ) (!  (=> (and (and (and (= (type Heap@@25) (MapType0Type RefType)) (= (type Mask@@11) (MapType1Type RefType realType))) (= (type this@@41) RefType)) (state Heap@@25 Mask@@11)) (= (|Node_rev_next'| Heap@@25 this@@41) (|Node_rev_next#frame| (MapType0Select Heap@@25 null (Node_reverse this@@41)) this@@41)))
 :qid |stdinbpl.531:15|
 :skolemid |49|
 :pattern ( (state Heap@@25 Mask@@11) (|Node_rev_next'| Heap@@25 this@@41))
)))
(assert (forall ((arg0@@62 T@U) (arg1@@41 T@U) ) (! (= (type (|Node_rev_prev#frame| arg0@@62 arg1@@41)) RefType)
 :qid |funType:Node_rev_prev#frame|
 :pattern ( (|Node_rev_prev#frame| arg0@@62 arg1@@41))
)))
(assert (forall ((Heap@@26 T@U) (Mask@@12 T@U) (this@@42 T@U) ) (!  (=> (and (and (and (= (type Heap@@26) (MapType0Type RefType)) (= (type Mask@@12) (MapType1Type RefType realType))) (= (type this@@42) RefType)) (state Heap@@26 Mask@@12)) (= (|Node_rev_prev'| Heap@@26 this@@42) (|Node_rev_prev#frame| (MapType0Select Heap@@26 null (Node_reverse this@@42)) this@@42)))
 :qid |stdinbpl.648:15|
 :skolemid |54|
 :pattern ( (state Heap@@26 Mask@@12) (|Node_rev_prev'| Heap@@26 this@@42))
)))
(assert (forall ((arg0@@63 T@U) (arg1@@42 T@U) ) (! (= (type (|Node_first#frame| arg0@@63 arg1@@42)) RefType)
 :qid |funType:Node_first#frame|
 :pattern ( (|Node_first#frame| arg0@@63 arg1@@42))
)))
(assert (forall ((Heap@@27 T@U) (Mask@@13 T@U) (this@@43 T@U) ) (!  (=> (and (and (and (= (type Heap@@27) (MapType0Type RefType)) (= (type Mask@@13) (MapType1Type RefType realType))) (= (type this@@43) RefType)) (state Heap@@27 Mask@@13)) (= (|Node_first'| Heap@@27 this@@43) (|Node_first#frame| (MapType0Select Heap@@27 null (Node_reverse this@@43)) this@@43)))
 :qid |stdinbpl.765:15|
 :skolemid |59|
 :pattern ( (state Heap@@27 Mask@@13) (|Node_first'| Heap@@27 this@@43))
 :pattern ( (state Heap@@27 Mask@@13) (|Node_first#triggerStateless| this@@43) (|Node_reverse#trigger| Heap@@27 (Node_reverse this@@43)))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@28 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@28) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@28 o $allocated))) (U_2_bool (MapType0Select Heap@@28 (MapType0Select Heap@@28 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@28 o f))
)))
(assert (forall ((this@@44 T@U) ) (!  (=> (= (type this@@44) RefType) (= (PredicateMaskField (Iterator_ready this@@44)) (|Iterator_ready#sm| this@@44)))
 :qid |stdinbpl.891:15|
 :skolemid |61|
 :pattern ( (PredicateMaskField (Iterator_ready this@@44)))
)))
(assert (forall ((this@@45 T@U) ) (!  (=> (= (type this@@45) RefType) (= (PredicateMaskField (Iterator_readyForNext this@@45)) (|Iterator_readyForNext#sm| this@@45)))
 :qid |stdinbpl.1114:15|
 :skolemid |67|
 :pattern ( (PredicateMaskField (Iterator_readyForNext this@@45)))
)))
(assert (forall ((this@@46 T@U) ) (!  (=> (= (type this@@46) RefType) (= (PredicateMaskField (Iterator_readyForRemove this@@46)) (|Iterator_readyForRemove#sm| this@@46)))
 :qid |stdinbpl.1344:15|
 :skolemid |73|
 :pattern ( (PredicateMaskField (Iterator_readyForRemove this@@46)))
)))
(assert (forall ((this@@47 T@U) ) (!  (=> (= (type this@@47) RefType) (= (PredicateMaskField (List_state this@@47)) (|List_state#sm| this@@47)))
 :qid |stdinbpl.1631:15|
 :skolemid |79|
 :pattern ( (PredicateMaskField (List_state this@@47)))
)))
(assert (forall ((this@@48 T@U) ) (!  (=> (= (type this@@48) RefType) (= (PredicateMaskField (Node_state this@@48)) (|Node_state#sm| this@@48)))
 :qid |stdinbpl.1697:15|
 :skolemid |85|
 :pattern ( (PredicateMaskField (Node_state this@@48)))
)))
(assert (forall ((this@@49 T@U) ) (!  (=> (= (type this@@49) RefType) (= (PredicateMaskField (Node_reverse this@@49)) (|Node_reverse#sm| this@@49)))
 :qid |stdinbpl.1772:15|
 :skolemid |91|
 :pattern ( (PredicateMaskField (Node_reverse this@@49)))
)))
(assert (forall ((Heap@@29 T@U) (Mask@@14 T@U) (this@@50 T@U) ) (!  (=> (and (and (and (= (type Heap@@29) (MapType0Type RefType)) (= (type Mask@@14) (MapType1Type RefType realType))) (= (type this@@50) RefType)) (and (state Heap@@29 Mask@@14) (< AssumeFunctionsAbove 4))) (= (Node_first Heap@@29 this@@50) (ite (= (MapType0Select Heap@@29 this@@50 Node_prev) null) this@@50 (|Node_first'| Heap@@29 (MapType0Select Heap@@29 this@@50 Node_prev)))))
 :qid |stdinbpl.758:15|
 :skolemid |58|
 :pattern ( (state Heap@@29 Mask@@14) (Node_first Heap@@29 this@@50))
 :pattern ( (state Heap@@29 Mask@@14) (|Node_first#triggerStateless| this@@50) (|Node_reverse#trigger| Heap@@29 (Node_reverse this@@50)))
)))
(assert (forall ((Heap@@30 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@30) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@30 (MapType0Store Heap@@30 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@30 o@@0 f_3 v))
)))
(assert (forall ((Heap@@31 T@U) (Mask@@15 T@U) (this@@51 T@U) ) (!  (=> (and (and (and (= (type Heap@@31) (MapType0Type RefType)) (= (type Mask@@15) (MapType1Type RefType realType))) (= (type this@@51) RefType)) (and (state Heap@@31 Mask@@15) (< AssumeFunctionsAbove 0))) (= (Node_get_next Heap@@31 this@@51) (MapType0Select Heap@@31 this@@51 Node_next)))
 :qid |stdinbpl.294:15|
 :skolemid |38|
 :pattern ( (state Heap@@31 Mask@@15) (Node_get_next Heap@@31 this@@51))
 :pattern ( (state Heap@@31 Mask@@15) (|Node_get_next#triggerStateless| this@@51) (|Node_state#trigger| Heap@@31 (Node_state this@@51)))
)))
(assert (forall ((Heap@@32 T@U) (Mask@@16 T@U) (this@@52 T@U) ) (!  (=> (and (and (and (= (type Heap@@32) (MapType0Type RefType)) (= (type Mask@@16) (MapType1Type RefType realType))) (= (type this@@52) RefType)) (and (state Heap@@32 Mask@@16) (< AssumeFunctionsAbove 1))) (= (Node_get_prev Heap@@32 this@@52) (MapType0Select Heap@@32 this@@52 Node_prev)))
 :qid |stdinbpl.409:15|
 :skolemid |43|
 :pattern ( (state Heap@@32 Mask@@16) (Node_get_prev Heap@@32 this@@52))
 :pattern ( (state Heap@@32 Mask@@16) (|Node_get_prev#triggerStateless| this@@52) (|Node_state#trigger| Heap@@32 (Node_state this@@52)))
)))
(assert (forall ((Heap@@33 T@U) (Mask@@17 T@U) (this@@53 T@U) ) (!  (=> (and (and (and (= (type Heap@@33) (MapType0Type RefType)) (= (type Mask@@17) (MapType1Type RefType realType))) (= (type this@@53) RefType)) (and (state Heap@@33 Mask@@17) (< AssumeFunctionsAbove 2))) (= (Node_rev_next Heap@@33 this@@53) (MapType0Select Heap@@33 this@@53 Node_next)))
 :qid |stdinbpl.524:15|
 :skolemid |48|
 :pattern ( (state Heap@@33 Mask@@17) (Node_rev_next Heap@@33 this@@53))
 :pattern ( (state Heap@@33 Mask@@17) (|Node_rev_next#triggerStateless| this@@53) (|Node_reverse#trigger| Heap@@33 (Node_reverse this@@53)))
)))
(assert (forall ((Heap@@34 T@U) (Mask@@18 T@U) (this@@54 T@U) ) (!  (=> (and (and (and (= (type Heap@@34) (MapType0Type RefType)) (= (type Mask@@18) (MapType1Type RefType realType))) (= (type this@@54) RefType)) (and (state Heap@@34 Mask@@18) (< AssumeFunctionsAbove 3))) (= (Node_rev_prev Heap@@34 this@@54) (MapType0Select Heap@@34 this@@54 Node_prev)))
 :qid |stdinbpl.641:15|
 :skolemid |53|
 :pattern ( (state Heap@@34 Mask@@18) (Node_rev_prev Heap@@34 this@@54))
 :pattern ( (state Heap@@34 Mask@@18) (|Node_rev_prev#triggerStateless| this@@54) (|Node_reverse#trigger| Heap@@34 (Node_reverse this@@54)))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.172:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((arg1@@43 T@U) (arg2@@21 Real) (arg3@@19 T@U) (arg4@@11 Real) (arg1_2 T@U) (arg2_2 Real) (arg3_2 T@U) (arg4_2 Real) ) (!  (=> (and (and (and (and (= (type arg1@@43) RefType) (= (type arg3@@19) RefType)) (= (type arg1_2) RefType)) (= (type arg3_2) RefType)) (= (wand arg1@@43 arg2@@21 arg3@@19 arg4@@11) (wand arg1_2 arg2_2 arg3_2 arg4_2))) (and (= arg1@@43 arg1_2) (and (= arg2@@21 arg2_2) (and (= arg3@@19 arg3_2) (= arg4@@11 arg4_2)))))
 :qid |stdinbpl.214:15|
 :skolemid |28|
 :pattern ( (wand arg1@@43 arg2@@21 arg3@@19 arg4@@11) (wand arg1_2 arg2_2 arg3_2 arg4_2))
)))
(assert (forall ((arg1@@44 T@U) (arg2@@22 Real) (arg3@@20 T@U) (arg4@@12 Real) (arg1_2@@0 T@U) (arg2_2@@0 Real) (arg3_2@@0 T@U) (arg4_2@@0 Real) ) (!  (=> (and (and (and (and (= (type arg1@@44) RefType) (= (type arg3@@20) RefType)) (= (type arg1_2@@0) RefType)) (= (type arg3_2@@0) RefType)) (= (wand_1 arg1@@44 arg2@@22 arg3@@20 arg4@@12) (wand_1 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2@@0))) (and (= arg1@@44 arg1_2@@0) (and (= arg2@@22 arg2_2@@0) (and (= arg3@@20 arg3_2@@0) (= arg4@@12 arg4_2@@0)))))
 :qid |stdinbpl.246:15|
 :skolemid |35|
 :pattern ( (wand_1 arg1@@44 arg2@@22 arg3@@20 arg4@@12) (wand_1 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2@@0))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun PostHeap@0 () T@U)
(declare-fun PostMask@0 () T@U)
(declare-fun this@@55 () T@U)
(declare-fun Result_18Mask () T@U)
(declare-fun Result_18Heap () T@U)
(declare-fun Result_28Mask () T@U)
(declare-fun Result_28Heap () T@U)
(declare-fun Mask@71 () T@U)
(declare-fun Mask@70 () T@U)
(declare-fun b_23@119 () Bool)
(declare-fun b_45@6 () Bool)
(declare-fun neededTransfer@60 () Real)
(declare-fun Used_11Mask@3 () T@U)
(declare-fun initNeededTransfer@14 () Real)
(declare-fun b_46@0 () Bool)
(declare-fun b_46@1 () Bool)
(declare-fun Result_32Heap () T@U)
(declare-fun Result_32Mask () T@U)
(declare-fun b_46@2 () Bool)
(declare-fun Ops_3Mask () T@U)
(declare-fun b_46@3 () Bool)
(declare-fun Ops_3Heap@24 () T@U)
(declare-fun Used_11Heap@0 () T@U)
(declare-fun b_46@4 () Bool)
(declare-fun b_23@120 () Bool)
(declare-fun Mask@69 () T@U)
(declare-fun Heap@59 () T@U)
(declare-fun takeTransfer@29 () Real)
(declare-fun Mask@67 () T@U)
(declare-fun Heap@57 () T@U)
(declare-fun neededTransfer@58 () Real)
(declare-fun b_45@3 () Bool)
(declare-fun Used_11Mask@1 () T@U)
(declare-fun neededTransfer@59 () Real)
(declare-fun Used_11Mask@2 () T@U)
(declare-fun b_45@4 () Bool)
(declare-fun TempMask@9 () T@U)
(declare-fun b_45@5 () Bool)
(declare-fun Mask@68 () T@U)
(declare-fun newPMask@9 () T@U)
(declare-fun Heap@58 () T@U)
(declare-fun maskTransfer@29 () Real)
(declare-fun takeTransfer@28 () Real)
(declare-fun b_45@0 () Bool)
(declare-fun neededTransfer@57 () Real)
(declare-fun Used_11Mask@0 () T@U)
(declare-fun b_45@1 () Bool)
(declare-fun TempMask@8 () T@U)
(declare-fun b_45@2 () Bool)
(declare-fun Ops_3Mask@52 () T@U)
(declare-fun Ops_3Mask@51 () T@U)
(declare-fun maskTransfer@28 () Real)
(declare-fun b_45 () Bool)
(declare-fun Ops_3Heap@23 () T@U)
(declare-fun Ops_3Mask@50 () T@U)
(declare-fun b_23@118 () Bool)
(declare-fun b_23@117 () Bool)
(declare-fun Heap@56 () T@U)
(declare-fun Mask@66 () T@U)
(declare-fun Ops_3Heap@21 () T@U)
(declare-fun newPMask@8 () T@U)
(declare-fun Ops_3Heap@22 () T@U)
(declare-fun Ops_3Heap@19 () T@U)
(declare-fun newPMask@7 () T@U)
(declare-fun Ops_3Heap@20 () T@U)
(declare-fun Ops_3Heap@13 () T@U)
(declare-fun Ops_3Heap@12 () T@U)
(declare-fun Ops_3Heap@14 () T@U)
(declare-fun Ops_3Heap@15 () T@U)
(declare-fun Ops_3Heap@16 () T@U)
(declare-fun Ops_3Heap@17 () T@U)
(declare-fun Ops_3Heap@18 () T@U)
(declare-fun Ops_3Heap@9 () T@U)
(declare-fun Ops_3Heap@10 () T@U)
(declare-fun Ops_3Heap@11 () T@U)
(declare-fun freshVersion@2 () T@U)
(declare-fun b_44@0 () Bool)
(declare-fun b_23@114 () Bool)
(declare-fun b_32@56 () Bool)
(declare-fun b_44@1 () Bool)
(declare-fun Result_31Heap () T@U)
(declare-fun Result_31Mask () T@U)
(declare-fun b_44@2 () Bool)
(declare-fun Ops_3Mask@49 () T@U)
(declare-fun Used_10Mask@37 () T@U)
(declare-fun b_44@3 () Bool)
(declare-fun Used_10Heap@0 () T@U)
(declare-fun b_44@4 () Bool)
(declare-fun b_23@115 () Bool)
(declare-fun b_23@116 () Bool)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun b_23@110 () Bool)
(declare-fun b_32@55 () Bool)
(declare-fun neededTransfer@56 () Real)
(declare-fun Used_10Mask@36 () T@U)
(declare-fun arg_9@0 () T@U)
(declare-fun initNeededTransfer@13 () Real)
(declare-fun b_43@0 () Bool)
(declare-fun b_43@1 () Bool)
(declare-fun Result_30Heap () T@U)
(declare-fun Result_30Mask () T@U)
(declare-fun b_43@2 () Bool)
(declare-fun Ops_3Mask@48 () T@U)
(declare-fun b_43@3 () Bool)
(declare-fun b_43@4 () Bool)
(declare-fun b_23@111 () Bool)
(declare-fun b_23@112 () Bool)
(declare-fun b_23@113 () Bool)
(declare-fun Heap@55 () T@U)
(declare-fun Mask@65 () T@U)
(declare-fun takeTransfer@27 () Real)
(declare-fun Mask@63 () T@U)
(declare-fun Heap@53 () T@U)
(declare-fun neededTransfer@54 () Real)
(declare-fun Used_10Mask@34 () T@U)
(declare-fun b_32@52 () Bool)
(declare-fun neededTransfer@55 () Real)
(declare-fun Used_10Mask@35 () T@U)
(declare-fun b_32@53 () Bool)
(declare-fun TempMask@7 () T@U)
(declare-fun b_32@54 () Bool)
(declare-fun Mask@64 () T@U)
(declare-fun newPMask@6 () T@U)
(declare-fun Heap@54 () T@U)
(declare-fun maskTransfer@27 () Real)
(declare-fun takeTransfer@26 () Real)
(declare-fun Ops_3Mask@46 () T@U)
(declare-fun b_32@49 () Bool)
(declare-fun Used_10Mask@32 () T@U)
(declare-fun neededTransfer@53 () Real)
(declare-fun Used_10Mask@33 () T@U)
(declare-fun b_32@50 () Bool)
(declare-fun TempMask@6 () T@U)
(declare-fun b_32@51 () Bool)
(declare-fun Ops_3Mask@47 () T@U)
(declare-fun maskTransfer@26 () Real)
(declare-fun Result_29Heap () T@U)
(declare-fun Result_29Mask () T@U)
(declare-fun b_42@0 () Bool)
(declare-fun b_23@109 () Bool)
(declare-fun b_42@1 () Bool)
(declare-fun b_42@2 () Bool)
(declare-fun b_42@3 () Bool)
(declare-fun b_42@4 () Bool)
(declare-fun b_23@106 () Bool)
(declare-fun b_32@48 () Bool)
(declare-fun b_23@107 () Bool)
(declare-fun b_23@108 () Bool)
(declare-fun Used_10Mask@31 () T@U)
(declare-fun Mask@62 () T@U)
(declare-fun Heap@52 () T@U)
(declare-fun Ops_3Mask@45 () T@U)
(declare-fun b_23@104 () Bool)
(declare-fun b_23@105 () Bool)
(declare-fun b_23@101 () Bool)
(declare-fun neededTransfer@52 () Real)
(declare-fun arg_8@0 () T@U)
(declare-fun initNeededTransfer@12 () Real)
(declare-fun b_41@0 () Bool)
(declare-fun b_41@1 () Bool)
(declare-fun b_41@2 () Bool)
(declare-fun b_41@3 () Bool)
(declare-fun b_41@4 () Bool)
(declare-fun b_23@102 () Bool)
(declare-fun b_23@103 () Bool)
(declare-fun takeTransfer@25 () Real)
(declare-fun neededTransfer@50 () Real)
(declare-fun Heap@50 () T@U)
(declare-fun b_32@45 () Bool)
(declare-fun Mask@60 () T@U)
(declare-fun Used_10Mask@29 () T@U)
(declare-fun neededTransfer@51 () Real)
(declare-fun Used_10Mask@30 () T@U)
(declare-fun b_32@46 () Bool)
(declare-fun TempMask@5 () T@U)
(declare-fun b_32@47 () Bool)
(declare-fun Mask@61 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun Heap@51 () T@U)
(declare-fun maskTransfer@25 () Real)
(declare-fun takeTransfer@24 () Real)
(declare-fun Ops_3Mask@43 () T@U)
(declare-fun Used_10Mask@27 () T@U)
(declare-fun b_32@42 () Bool)
(declare-fun neededTransfer@49 () Real)
(declare-fun Used_10Mask@28 () T@U)
(declare-fun b_32@43 () Bool)
(declare-fun TempMask@4 () T@U)
(declare-fun b_32@44 () Bool)
(declare-fun Ops_3Mask@44 () T@U)
(declare-fun maskTransfer@24 () Real)
(declare-fun Result_27Heap () T@U)
(declare-fun Result_27Mask () T@U)
(declare-fun b_40@0 () Bool)
(declare-fun b_23@100 () Bool)
(declare-fun b_40@1 () Bool)
(declare-fun b_40@2 () Bool)
(declare-fun b_40@3 () Bool)
(declare-fun b_40@4 () Bool)
(declare-fun b_23@97 () Bool)
(declare-fun Result_26Heap () T@U)
(declare-fun b_23@98 () Bool)
(declare-fun b_23@99 () Bool)
(declare-fun Result_26Mask () T@U)
(declare-fun b_23@94 () Bool)
(declare-fun neededTransfer@48 () Real)
(declare-fun rcvLocal@6 () T@U)
(declare-fun initNeededTransfer@11 () Real)
(declare-fun b_39@0 () Bool)
(declare-fun b_39@1 () Bool)
(declare-fun b_39@2 () Bool)
(declare-fun b_39@3 () Bool)
(declare-fun b_39@4 () Bool)
(declare-fun b_23@95 () Bool)
(declare-fun b_23@96 () Bool)
(declare-fun takeTransfer@23 () Real)
(declare-fun neededTransfer@46 () Real)
(declare-fun b_32@39 () Bool)
(declare-fun Mask@58 () T@U)
(declare-fun Used_10Mask@25 () T@U)
(declare-fun Heap@48 () T@U)
(declare-fun neededTransfer@47 () Real)
(declare-fun Used_10Mask@26 () T@U)
(declare-fun b_32@40 () Bool)
(declare-fun b_32@41 () Bool)
(declare-fun Mask@59 () T@U)
(declare-fun Heap@49 () T@U)
(declare-fun maskTransfer@23 () Real)
(declare-fun takeTransfer@22 () Real)
(declare-fun Used_10Mask@23 () T@U)
(declare-fun b_32@36 () Bool)
(declare-fun Ops_3Mask@41 () T@U)
(declare-fun neededTransfer@45 () Real)
(declare-fun Used_10Mask@24 () T@U)
(declare-fun b_32@37 () Bool)
(declare-fun b_32@38 () Bool)
(declare-fun Ops_3Mask@42 () T@U)
(declare-fun maskTransfer@22 () Real)
(declare-fun Result_25Heap () T@U)
(declare-fun Result_25Mask () T@U)
(declare-fun b_23@91 () Bool)
(declare-fun neededTransfer@44 () Real)
(declare-fun rcvLocal@5 () T@U)
(declare-fun initNeededTransfer@10 () Real)
(declare-fun b_38@0 () Bool)
(declare-fun b_38@1 () Bool)
(declare-fun b_38@2 () Bool)
(declare-fun b_38@3 () Bool)
(declare-fun b_38@4 () Bool)
(declare-fun b_23@92 () Bool)
(declare-fun b_23@93 () Bool)
(declare-fun takeTransfer@21 () Real)
(declare-fun Heap@46 () T@U)
(declare-fun Mask@56 () T@U)
(declare-fun neededTransfer@42 () Real)
(declare-fun b_32@33 () Bool)
(declare-fun Used_10Mask@21 () T@U)
(declare-fun neededTransfer@43 () Real)
(declare-fun Used_10Mask@22 () T@U)
(declare-fun b_32@34 () Bool)
(declare-fun b_32@35 () Bool)
(declare-fun Mask@57 () T@U)
(declare-fun Heap@47 () T@U)
(declare-fun maskTransfer@21 () Real)
(declare-fun takeTransfer@20 () Real)
(declare-fun Used_10Mask@19 () T@U)
(declare-fun Ops_3Mask@39 () T@U)
(declare-fun b_32@30 () Bool)
(declare-fun neededTransfer@41 () Real)
(declare-fun Used_10Mask@20 () T@U)
(declare-fun b_32@31 () Bool)
(declare-fun b_32@32 () Bool)
(declare-fun Ops_3Mask@40 () T@U)
(declare-fun maskTransfer@20 () Real)
(declare-fun Result_24Heap () T@U)
(declare-fun Result_24Mask () T@U)
(declare-fun b_23@88 () Bool)
(declare-fun neededTransfer@40 () Real)
(declare-fun rcvLocal@4 () T@U)
(declare-fun initNeededTransfer@9 () Real)
(declare-fun b_37@0 () Bool)
(declare-fun b_37@1 () Bool)
(declare-fun b_37@2 () Bool)
(declare-fun b_37@3 () Bool)
(declare-fun b_37@4 () Bool)
(declare-fun b_23@89 () Bool)
(declare-fun b_23@90 () Bool)
(declare-fun takeTransfer@19 () Real)
(declare-fun neededTransfer@38 () Real)
(declare-fun b_32@27 () Bool)
(declare-fun Used_10Mask@17 () T@U)
(declare-fun Mask@54 () T@U)
(declare-fun Heap@44 () T@U)
(declare-fun neededTransfer@39 () Real)
(declare-fun Used_10Mask@18 () T@U)
(declare-fun b_32@28 () Bool)
(declare-fun b_32@29 () Bool)
(declare-fun Mask@55 () T@U)
(declare-fun Heap@45 () T@U)
(declare-fun maskTransfer@19 () Real)
(declare-fun takeTransfer@18 () Real)
(declare-fun Ops_3Mask@37 () T@U)
(declare-fun Used_10Mask@15 () T@U)
(declare-fun b_32@24 () Bool)
(declare-fun neededTransfer@37 () Real)
(declare-fun Used_10Mask@16 () T@U)
(declare-fun b_32@25 () Bool)
(declare-fun b_32@26 () Bool)
(declare-fun Ops_3Mask@38 () T@U)
(declare-fun maskTransfer@18 () Real)
(declare-fun Result_23Heap () T@U)
(declare-fun Result_23Mask () T@U)
(declare-fun b_23@86 () Bool)
(declare-fun b_23@87 () Bool)
(declare-fun b_23@83 () Bool)
(declare-fun neededTransfer@36 () Real)
(declare-fun initNeededTransfer@8 () Real)
(declare-fun b_36@0 () Bool)
(declare-fun b_36@1 () Bool)
(declare-fun b_36@2 () Bool)
(declare-fun b_36@3 () Bool)
(declare-fun b_36@4 () Bool)
(declare-fun b_23@84 () Bool)
(declare-fun b_23@85 () Bool)
(declare-fun takeTransfer@17 () Real)
(declare-fun Heap@42 () T@U)
(declare-fun Mask@52 () T@U)
(declare-fun neededTransfer@34 () Real)
(declare-fun b_32@21 () Bool)
(declare-fun Used_10Mask@13 () T@U)
(declare-fun neededTransfer@35 () Real)
(declare-fun Used_10Mask@14 () T@U)
(declare-fun b_32@22 () Bool)
(declare-fun b_32@23 () Bool)
(declare-fun Mask@53 () T@U)
(declare-fun Heap@43 () T@U)
(declare-fun maskTransfer@17 () Real)
(declare-fun takeTransfer@16 () Real)
(declare-fun Used_10Mask@11 () T@U)
(declare-fun b_32@18 () Bool)
(declare-fun Ops_3Mask@35 () T@U)
(declare-fun neededTransfer@33 () Real)
(declare-fun Used_10Mask@12 () T@U)
(declare-fun b_32@19 () Bool)
(declare-fun b_32@20 () Bool)
(declare-fun Ops_3Mask@36 () T@U)
(declare-fun maskTransfer@16 () Real)
(declare-fun b_23@80 () Bool)
(declare-fun neededTransfer@32 () Real)
(declare-fun initNeededTransfer@7 () Real)
(declare-fun b_35@0 () Bool)
(declare-fun b_35@1 () Bool)
(declare-fun Result_22Heap () T@U)
(declare-fun Result_22Mask () T@U)
(declare-fun b_35@2 () Bool)
(declare-fun b_35@3 () Bool)
(declare-fun b_35@4 () Bool)
(declare-fun b_23@81 () Bool)
(declare-fun b_23@82 () Bool)
(declare-fun takeTransfer@15 () Real)
(declare-fun neededTransfer@30 () Real)
(declare-fun b_32@15 () Bool)
(declare-fun Mask@50 () T@U)
(declare-fun Heap@40 () T@U)
(declare-fun Used_10Mask@9 () T@U)
(declare-fun neededTransfer@31 () Real)
(declare-fun Used_10Mask@10 () T@U)
(declare-fun b_32@16 () Bool)
(declare-fun b_32@17 () Bool)
(declare-fun Mask@51 () T@U)
(declare-fun Heap@41 () T@U)
(declare-fun maskTransfer@15 () Real)
(declare-fun takeTransfer@14 () Real)
(declare-fun Ops_3Mask@33 () T@U)
(declare-fun Used_10Mask@7 () T@U)
(declare-fun b_32@12 () Bool)
(declare-fun neededTransfer@29 () Real)
(declare-fun Used_10Mask@8 () T@U)
(declare-fun b_32@13 () Bool)
(declare-fun b_32@14 () Bool)
(declare-fun Ops_3Mask@34 () T@U)
(declare-fun maskTransfer@14 () Real)
(declare-fun b_23@78 () Bool)
(declare-fun Result_21Heap () T@U)
(declare-fun b_23@79 () Bool)
(declare-fun Result_21Mask () T@U)
(declare-fun b_23@75 () Bool)
(declare-fun neededTransfer@28 () Real)
(declare-fun rcvLocal@3 () T@U)
(declare-fun initNeededTransfer@6 () Real)
(declare-fun b_34@0 () Bool)
(declare-fun b_34@1 () Bool)
(declare-fun b_34@2 () Bool)
(declare-fun b_34@3 () Bool)
(declare-fun b_34@4 () Bool)
(declare-fun b_23@76 () Bool)
(declare-fun b_23@77 () Bool)
(declare-fun takeTransfer@13 () Real)
(declare-fun neededTransfer@26 () Real)
(declare-fun b_32@9 () Bool)
(declare-fun Heap@38 () T@U)
(declare-fun Mask@48 () T@U)
(declare-fun Used_10Mask@5 () T@U)
(declare-fun neededTransfer@27 () Real)
(declare-fun Used_10Mask@6 () T@U)
(declare-fun b_32@10 () Bool)
(declare-fun b_32@11 () Bool)
(declare-fun Mask@49 () T@U)
(declare-fun Heap@39 () T@U)
(declare-fun maskTransfer@13 () Real)
(declare-fun takeTransfer@12 () Real)
(declare-fun Used_10Mask@3 () T@U)
(declare-fun b_32@6 () Bool)
(declare-fun Ops_3Mask@31 () T@U)
(declare-fun neededTransfer@25 () Real)
(declare-fun Used_10Mask@4 () T@U)
(declare-fun b_32@7 () Bool)
(declare-fun b_32@8 () Bool)
(declare-fun Ops_3Mask@32 () T@U)
(declare-fun maskTransfer@12 () Real)
(declare-fun Result_20Heap () T@U)
(declare-fun Result_20Mask () T@U)
(declare-fun b_23@73 () Bool)
(declare-fun b_23@74 () Bool)
(declare-fun b_23@70 () Bool)
(declare-fun neededTransfer@24 () Real)
(declare-fun initNeededTransfer@5 () Real)
(declare-fun b_33@0 () Bool)
(declare-fun b_33@1 () Bool)
(declare-fun b_33@2 () Bool)
(declare-fun b_33@3 () Bool)
(declare-fun b_33@4 () Bool)
(declare-fun b_23@71 () Bool)
(declare-fun b_23@72 () Bool)
(declare-fun takeTransfer@11 () Real)
(declare-fun Mask@46 () T@U)
(declare-fun Heap@36 () T@U)
(declare-fun neededTransfer@22 () Real)
(declare-fun b_32@3 () Bool)
(declare-fun Used_10Mask@1 () T@U)
(declare-fun neededTransfer@23 () Real)
(declare-fun Used_10Mask@2 () T@U)
(declare-fun b_32@4 () Bool)
(declare-fun b_32@5 () Bool)
(declare-fun Mask@47 () T@U)
(declare-fun Heap@37 () T@U)
(declare-fun maskTransfer@11 () Real)
(declare-fun takeTransfer@10 () Real)
(declare-fun Ops_3Mask@29 () T@U)
(declare-fun b_32@0 () Bool)
(declare-fun neededTransfer@20 () Real)
(declare-fun neededTransfer@21 () Real)
(declare-fun Used_10Mask@0 () T@U)
(declare-fun b_32@1 () Bool)
(declare-fun b_32@2 () Bool)
(declare-fun Ops_3Mask@30 () T@U)
(declare-fun maskTransfer@10 () Real)
(declare-fun b_32 () Bool)
(declare-fun Ops_3Heap@8 () T@U)
(declare-fun Ops_3Mask@28 () T@U)
(declare-fun b_23@69 () Bool)
(declare-fun b_23@68 () Bool)
(declare-fun Heap@35 () T@U)
(declare-fun Mask@45 () T@U)
(declare-fun Ops_3Heap@6 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun Ops_3Heap@7 () T@U)
(declare-fun Ops_3Heap@4 () T@U)
(declare-fun Ops_3Heap@3 () T@U)
(declare-fun Ops_3Heap@5 () T@U)
(declare-fun Ops_3Heap@0 () T@U)
(declare-fun Ops_3Heap@1 () T@U)
(declare-fun Ops_3Heap@2 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun b_31@0 () Bool)
(declare-fun b_23@65 () Bool)
(declare-fun b_26@25 () Bool)
(declare-fun b_31@1 () Bool)
(declare-fun Result_19Heap () T@U)
(declare-fun Result_19Mask () T@U)
(declare-fun b_31@2 () Bool)
(declare-fun Ops_3Mask@27 () T@U)
(declare-fun Used_9Mask@16 () T@U)
(declare-fun b_31@3 () Bool)
(declare-fun Used_9Heap@0 () T@U)
(declare-fun b_31@4 () Bool)
(declare-fun b_23@66 () Bool)
(declare-fun b_23@67 () Bool)
(declare-fun b_23@62 () Bool)
(declare-fun b_26@24 () Bool)
(declare-fun b_23@63 () Bool)
(declare-fun b_23@64 () Bool)
(declare-fun Used_9Mask@15 () T@U)
(declare-fun Ops_3Mask@26 () T@U)
(declare-fun Heap@34 () T@U)
(declare-fun Mask@44 () T@U)
(declare-fun b_23@59 () Bool)
(declare-fun neededTransfer@19 () Real)
(declare-fun arg_7@0 () T@U)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_30@0 () Bool)
(declare-fun b_30@1 () Bool)
(declare-fun b_30@2 () Bool)
(declare-fun b_30@3 () Bool)
(declare-fun b_30@4 () Bool)
(declare-fun b_23@60 () Bool)
(declare-fun b_23@61 () Bool)
(declare-fun takeTransfer@9 () Real)
(declare-fun Mask@42 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun neededTransfer@17 () Real)
(declare-fun b_26@21 () Bool)
(declare-fun Used_9Mask@13 () T@U)
(declare-fun neededTransfer@18 () Real)
(declare-fun Used_9Mask@14 () T@U)
(declare-fun b_26@22 () Bool)
(declare-fun TempMask@3 () T@U)
(declare-fun b_26@23 () Bool)
(declare-fun Mask@43 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun takeTransfer@8 () Real)
(declare-fun Used_9Mask@11 () T@U)
(declare-fun b_26@18 () Bool)
(declare-fun Ops_3Mask@24 () T@U)
(declare-fun neededTransfer@16 () Real)
(declare-fun Used_9Mask@12 () T@U)
(declare-fun b_26@19 () Bool)
(declare-fun TempMask@2 () T@U)
(declare-fun b_26@20 () Bool)
(declare-fun Ops_3Mask@25 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun Result_17Heap () T@U)
(declare-fun Result_17Mask () T@U)
(declare-fun b_23@56 () Bool)
(declare-fun neededTransfer@15 () Real)
(declare-fun rcvLocal@2 () T@U)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_29@0 () Bool)
(declare-fun b_29@1 () Bool)
(declare-fun b_29@2 () Bool)
(declare-fun b_29@3 () Bool)
(declare-fun b_29@4 () Bool)
(declare-fun b_23@57 () Bool)
(declare-fun b_23@58 () Bool)
(declare-fun takeTransfer@7 () Real)
(declare-fun neededTransfer@13 () Real)
(declare-fun b_26@15 () Bool)
(declare-fun Used_9Mask@9 () T@U)
(declare-fun Heap@30 () T@U)
(declare-fun Mask@40 () T@U)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_9Mask@10 () T@U)
(declare-fun b_26@16 () Bool)
(declare-fun b_26@17 () Bool)
(declare-fun Mask@41 () T@U)
(declare-fun Heap@31 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun takeTransfer@6 () Real)
(declare-fun Ops_3Mask@22 () T@U)
(declare-fun Used_9Mask@7 () T@U)
(declare-fun b_26@12 () Bool)
(declare-fun neededTransfer@12 () Real)
(declare-fun Used_9Mask@8 () T@U)
(declare-fun b_26@13 () Bool)
(declare-fun b_26@14 () Bool)
(declare-fun Ops_3Mask@23 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun Result_16Heap () T@U)
(declare-fun Result_16Mask () T@U)
(declare-fun b_23@53 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun rcvLocal@1 () T@U)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_28@0 () Bool)
(declare-fun b_28@1 () Bool)
(declare-fun b_28@2 () Bool)
(declare-fun b_28@3 () Bool)
(declare-fun b_28@4 () Bool)
(declare-fun b_23@54 () Bool)
(declare-fun b_23@55 () Bool)
(declare-fun takeTransfer@5 () Real)
(declare-fun neededTransfer@9 () Real)
(declare-fun Mask@38 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun b_26@9 () Bool)
(declare-fun Used_9Mask@5 () T@U)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_9Mask@6 () T@U)
(declare-fun b_26@10 () Bool)
(declare-fun b_26@11 () Bool)
(declare-fun Mask@39 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun Used_9Mask@3 () T@U)
(declare-fun b_26@6 () Bool)
(declare-fun Ops_3Mask@20 () T@U)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_9Mask@4 () T@U)
(declare-fun b_26@7 () Bool)
(declare-fun b_26@8 () Bool)
(declare-fun Ops_3Mask@21 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun Result_15Heap () T@U)
(declare-fun Result_15Mask () T@U)
(declare-fun b_23@50 () Bool)
(declare-fun neededTransfer@7 () Real)
(declare-fun rcvLocal@0 () T@U)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_27@0 () Bool)
(declare-fun b_27@1 () Bool)
(declare-fun b_27@2 () Bool)
(declare-fun b_27@3 () Bool)
(declare-fun b_27@4 () Bool)
(declare-fun b_23@51 () Bool)
(declare-fun b_23@52 () Bool)
(declare-fun takeTransfer@3 () Real)
(declare-fun neededTransfer@5 () Real)
(declare-fun Heap@26 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun b_26@3 () Bool)
(declare-fun Used_9Mask@1 () T@U)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_9Mask@2 () T@U)
(declare-fun b_26@4 () Bool)
(declare-fun b_26@5 () Bool)
(declare-fun Mask@37 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun Ops_3Mask@18 () T@U)
(declare-fun b_26@0 () Bool)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_9Mask@0 () T@U)
(declare-fun b_26@1 () Bool)
(declare-fun b_26@2 () Bool)
(declare-fun Ops_3Mask@19 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun b_26 () Bool)
(declare-fun b_23@47 () Bool)
(declare-fun b_23@46 () Bool)
(declare-fun b_23@48 () Bool)
(declare-fun Ops_3Mask@17 () T@U)
(declare-fun b_23@49 () Bool)
(declare-fun Mask@35 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun Ops_3Mask@15 () T@U)
(declare-fun b_23@39 () Bool)
(declare-fun Ops_3Mask@16 () T@U)
(declare-fun b_23@40 () Bool)
(declare-fun b_23@41 () Bool)
(declare-fun b_23@42 () Bool)
(declare-fun b_23@43 () Bool)
(declare-fun b_23@44 () Bool)
(declare-fun b_23@45 () Bool)
(declare-fun b_23@37 () Bool)
(declare-fun b_23@38 () Bool)
(declare-fun b_23@30 () Bool)
(declare-fun b_23@29 () Bool)
(declare-fun b_23@31 () Bool)
(declare-fun b_23@32 () Bool)
(declare-fun Ops_3Mask@13 () T@U)
(declare-fun Ops_3Mask@12 () T@U)
(declare-fun b_23@33 () Bool)
(declare-fun b_23@34 () Bool)
(declare-fun Ops_3Mask@14 () T@U)
(declare-fun b_23@35 () Bool)
(declare-fun b_23@36 () Bool)
(declare-fun b_23@26 () Bool)
(declare-fun Ops_3Mask@10 () T@U)
(declare-fun Ops_3Mask@11 () T@U)
(declare-fun b_23@27 () Bool)
(declare-fun b_23@28 () Bool)
(declare-fun b_23@24 () Bool)
(declare-fun b_23@25 () Bool)
(declare-fun b_23@4 () Bool)
(declare-fun b_24@6 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun Used_8Mask@3 () T@U)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_25@0 () Bool)
(declare-fun b_25@1 () Bool)
(declare-fun Result_14Heap () T@U)
(declare-fun Result_14Mask () T@U)
(declare-fun b_25@2 () Bool)
(declare-fun Ops_3Mask@3 () T@U)
(declare-fun b_25@3 () Bool)
(declare-fun Used_8Heap@0 () T@U)
(declare-fun b_25@4 () Bool)
(declare-fun b_23@5 () Bool)
(declare-fun b_23@6 () Bool)
(declare-fun b_23@7 () Bool)
(declare-fun perm@2 () Real)
(declare-fun b_23@8 () Bool)
(declare-fun Ops_3Mask@4 () T@U)
(declare-fun b_23@9 () Bool)
(declare-fun b_23@10 () Bool)
(declare-fun b_23@11 () Bool)
(declare-fun Ops_3Mask@5 () T@U)
(declare-fun b_23@12 () Bool)
(declare-fun b_23@13 () Bool)
(declare-fun b_23@14 () Bool)
(declare-fun Ops_3Mask@6 () T@U)
(declare-fun b_23@15 () Bool)
(declare-fun b_23@16 () Bool)
(declare-fun Ops_3Mask@7 () T@U)
(declare-fun b_23@17 () Bool)
(declare-fun b_23@18 () Bool)
(declare-fun b_23@19 () Bool)
(declare-fun Ops_3Mask@8 () T@U)
(declare-fun b_23@20 () Bool)
(declare-fun b_23@21 () Bool)
(declare-fun Ops_3Mask@9 () T@U)
(declare-fun b_23@22 () Bool)
(declare-fun b_23@23 () Bool)
(declare-fun takeTransfer@1 () Real)
(declare-fun Heap@23 () T@U)
(declare-fun Mask@33 () T@U)
(declare-fun neededTransfer@1 () Real)
(declare-fun b_24@3 () Bool)
(declare-fun Used_8Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_8Mask@2 () T@U)
(declare-fun b_24@4 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_24@5 () Bool)
(declare-fun Mask@34 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun Ops_3Mask@1 () T@U)
(declare-fun b_24@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_8Mask@0 () T@U)
(declare-fun b_24@1 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_24@2 () Bool)
(declare-fun Ops_3Mask@2 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_24 () Bool)
(declare-fun b_23@3 () Bool)
(declare-fun b_23@2 () Bool)
(declare-fun b_23@0 () Bool)
(declare-fun Ops_3Mask@0 () T@U)
(declare-fun b_23@1 () Bool)
(declare-fun b_23 () Bool)
(declare-fun b_22@0 () Bool)
(declare-fun b_22 () Bool)
(declare-fun Used_7Heap@0 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun Mask@32 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun Mask@30 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun Mask@28 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun Mask@25 () T@U)
(declare-fun Mask@24 () T@U)
(declare-fun Mask@23 () T@U)
(declare-fun Mask@22 () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun Mask@20 () T@U)
(declare-fun Mask@19 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun perm@1 () Real)
(declare-fun Heap@5 () T@U)
(declare-fun res@0 () Int)
(declare-fun Mask@16 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun newVersion@1 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun perm@0 () Real)
(declare-fun Mask@2 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun Heap@@35 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun Mask@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@71) (MapType1Type RefType realType)) (= (type Mask@70) (MapType1Type RefType realType))) (= (type this@@55) RefType)) (= (type Used_11Mask@3) (MapType1Type RefType realType))) (= (type Result_32Heap) (MapType0Type RefType))) (= (type Result_32Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask) (MapType1Type RefType realType))) (= (type Ops_3Heap@24) (MapType0Type RefType))) (= (type Used_11Heap@0) (MapType0Type RefType))) (= (type Mask@69) (MapType1Type RefType realType))) (= (type Heap@59) (MapType0Type RefType))) (= (type Mask@67) (MapType1Type RefType realType))) (= (type Heap@57) (MapType0Type RefType))) (= (type Used_11Mask@1) (MapType1Type RefType realType))) (= (type Used_11Mask@2) (MapType1Type RefType realType))) (= (type TempMask@9) (MapType1Type RefType realType))) (= (type Mask@68) (MapType1Type RefType realType))) (= (type newPMask@9) (MapType1Type RefType boolType))) (= (type Heap@58) (MapType0Type RefType))) (= (type Used_11Mask@0) (MapType1Type RefType realType))) (= (type TempMask@8) (MapType1Type RefType realType))) (= (type Ops_3Mask@52) (MapType1Type RefType realType))) (= (type Ops_3Mask@51) (MapType1Type RefType realType))) (= (type Ops_3Heap@9) (MapType0Type RefType))) (= (type Ops_3Mask@29) (MapType1Type RefType realType))) (= (type Heap@36) (MapType0Type RefType))) (= (type Mask@46) (MapType1Type RefType realType))) (= (type Ops_3Heap@23) (MapType0Type RefType))) (= (type Ops_3Mask@50) (MapType1Type RefType realType))) (= (type Heap@56) (MapType0Type RefType))) (= (type Mask@66) (MapType1Type RefType realType))) (= (type Ops_3Heap@21) (MapType0Type RefType))) (= (type newPMask@8) (MapType1Type RefType boolType))) (= (type Ops_3Heap@22) (MapType0Type RefType))) (= (type Ops_3Heap@19) (MapType0Type RefType))) (= (type newPMask@7) (MapType1Type RefType boolType))) (= (type Ops_3Heap@20) (MapType0Type RefType))) (= (type Ops_3Heap@13) (MapType0Type RefType))) (= (type Ops_3Heap@12) (MapType0Type RefType))) (= (type Ops_3Heap@14) (MapType0Type RefType))) (= (type Ops_3Heap@15) (MapType0Type RefType))) (= (type Ops_3Heap@16) (MapType0Type RefType))) (= (type Ops_3Heap@17) (MapType0Type RefType))) (= (type Ops_3Heap@18) (MapType0Type RefType))) (= (type Ops_3Heap@10) (MapType0Type RefType))) (= (type Ops_3Heap@11) (MapType0Type RefType))) (= (type freshVersion@2) FrameTypeType)) (= (type Result_31Heap) (MapType0Type RefType))) (= (type Result_31Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask@49) (MapType1Type RefType realType))) (= (type Used_10Mask@37) (MapType1Type RefType realType))) (= (type Used_10Heap@0) (MapType0Type RefType))) (forall ((arg0@@64 T@U) (arg1@@45 T@U) ) (! (= (type (CombineFrames arg0@@64 arg1@@45)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@64 arg1@@45))
))) (forall ((arg0@@65 T@U) ) (! (= (type (FrameFragment arg0@@65)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@65))
))) (= (type Result_29Heap) (MapType0Type RefType))) (= (type Used_10Mask@32) (MapType1Type RefType realType))) (= (type Heap@53) (MapType0Type RefType))) (= (type Mask@63) (MapType1Type RefType realType))) (= (type Ops_3Mask@46) (MapType1Type RefType realType))) (= (type Used_10Mask@36) (MapType1Type RefType realType))) (= (type arg_9@0) RefType)) (= (type Result_30Heap) (MapType0Type RefType))) (= (type Result_30Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask@48) (MapType1Type RefType realType))) (= (type Heap@55) (MapType0Type RefType))) (= (type Mask@65) (MapType1Type RefType realType))) (= (type Used_10Mask@34) (MapType1Type RefType realType))) (= (type Used_10Mask@35) (MapType1Type RefType realType))) (= (type TempMask@7) (MapType1Type RefType realType))) (= (type Mask@64) (MapType1Type RefType realType))) (= (type newPMask@6) (MapType1Type RefType boolType))) (= (type Heap@54) (MapType0Type RefType))) (= (type Used_10Mask@33) (MapType1Type RefType realType))) (= (type TempMask@6) (MapType1Type RefType realType))) (= (type Ops_3Mask@47) (MapType1Type RefType realType))) (= (type Result_29Mask) (MapType1Type RefType realType))) (= (type Result_27Heap) (MapType0Type RefType))) (= (type Used_10Mask@27) (MapType1Type RefType realType))) (= (type Mask@60) (MapType1Type RefType realType))) (= (type Heap@50) (MapType0Type RefType))) (= (type Ops_3Mask@43) (MapType1Type RefType realType))) (= (type Result_28Heap) (MapType0Type RefType))) (= (type Used_10Mask@31) (MapType1Type RefType realType))) (= (type Mask@62) (MapType1Type RefType realType))) (= (type Heap@52) (MapType0Type RefType))) (= (type Ops_3Mask@45) (MapType1Type RefType realType))) (= (type Result_28Mask) (MapType1Type RefType realType))) (= (type arg_8@0) RefType)) (= (type Used_10Mask@29) (MapType1Type RefType realType))) (= (type Used_10Mask@30) (MapType1Type RefType realType))) (= (type TempMask@5) (MapType1Type RefType realType))) (= (type Mask@61) (MapType1Type RefType realType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type Heap@51) (MapType0Type RefType))) (= (type Used_10Mask@28) (MapType1Type RefType realType))) (= (type TempMask@4) (MapType1Type RefType realType))) (= (type Ops_3Mask@44) (MapType1Type RefType realType))) (= (type Result_27Mask) (MapType1Type RefType realType))) (= (type Result_26Heap) (MapType0Type RefType))) (= (type Result_26Mask) (MapType1Type RefType realType))) (= (type rcvLocal@6) RefType)) (= (type Mask@58) (MapType1Type RefType realType))) (= (type Used_10Mask@25) (MapType1Type RefType realType))) (= (type Heap@48) (MapType0Type RefType))) (= (type Used_10Mask@26) (MapType1Type RefType realType))) (= (type Mask@59) (MapType1Type RefType realType))) (= (type Heap@49) (MapType0Type RefType))) (= (type Used_10Mask@23) (MapType1Type RefType realType))) (= (type Ops_3Mask@41) (MapType1Type RefType realType))) (= (type Used_10Mask@24) (MapType1Type RefType realType))) (= (type Ops_3Mask@42) (MapType1Type RefType realType))) (= (type Result_25Heap) (MapType0Type RefType))) (= (type Result_25Mask) (MapType1Type RefType realType))) (= (type rcvLocal@5) RefType)) (= (type Heap@46) (MapType0Type RefType))) (= (type Mask@56) (MapType1Type RefType realType))) (= (type Used_10Mask@21) (MapType1Type RefType realType))) (= (type Used_10Mask@22) (MapType1Type RefType realType))) (= (type Mask@57) (MapType1Type RefType realType))) (= (type Heap@47) (MapType0Type RefType))) (= (type Used_10Mask@19) (MapType1Type RefType realType))) (= (type Ops_3Mask@39) (MapType1Type RefType realType))) (= (type Used_10Mask@20) (MapType1Type RefType realType))) (= (type Ops_3Mask@40) (MapType1Type RefType realType))) (= (type Result_24Heap) (MapType0Type RefType))) (= (type Result_24Mask) (MapType1Type RefType realType))) (= (type rcvLocal@4) RefType)) (= (type Used_10Mask@17) (MapType1Type RefType realType))) (= (type Mask@54) (MapType1Type RefType realType))) (= (type Heap@44) (MapType0Type RefType))) (= (type Used_10Mask@18) (MapType1Type RefType realType))) (= (type Mask@55) (MapType1Type RefType realType))) (= (type Heap@45) (MapType0Type RefType))) (= (type Ops_3Mask@37) (MapType1Type RefType realType))) (= (type Used_10Mask@15) (MapType1Type RefType realType))) (= (type Used_10Mask@16) (MapType1Type RefType realType))) (= (type Ops_3Mask@38) (MapType1Type RefType realType))) (= (type Result_23Heap) (MapType0Type RefType))) (= (type Result_23Mask) (MapType1Type RefType realType))) (= (type Heap@42) (MapType0Type RefType))) (= (type Mask@52) (MapType1Type RefType realType))) (= (type Used_10Mask@13) (MapType1Type RefType realType))) (= (type Used_10Mask@14) (MapType1Type RefType realType))) (= (type Mask@53) (MapType1Type RefType realType))) (= (type Heap@43) (MapType0Type RefType))) (= (type Used_10Mask@11) (MapType1Type RefType realType))) (= (type Ops_3Mask@35) (MapType1Type RefType realType))) (= (type Used_10Mask@12) (MapType1Type RefType realType))) (= (type Ops_3Mask@36) (MapType1Type RefType realType))) (= (type Result_22Heap) (MapType0Type RefType))) (= (type Result_22Mask) (MapType1Type RefType realType))) (= (type Mask@50) (MapType1Type RefType realType))) (= (type Heap@40) (MapType0Type RefType))) (= (type Used_10Mask@9) (MapType1Type RefType realType))) (= (type Used_10Mask@10) (MapType1Type RefType realType))) (= (type Mask@51) (MapType1Type RefType realType))) (= (type Heap@41) (MapType0Type RefType))) (= (type Ops_3Mask@33) (MapType1Type RefType realType))) (= (type Used_10Mask@7) (MapType1Type RefType realType))) (= (type Used_10Mask@8) (MapType1Type RefType realType))) (= (type Ops_3Mask@34) (MapType1Type RefType realType))) (= (type Result_21Heap) (MapType0Type RefType))) (= (type Result_21Mask) (MapType1Type RefType realType))) (= (type rcvLocal@3) RefType)) (= (type Heap@38) (MapType0Type RefType))) (= (type Mask@48) (MapType1Type RefType realType))) (= (type Used_10Mask@5) (MapType1Type RefType realType))) (= (type Used_10Mask@6) (MapType1Type RefType realType))) (= (type Mask@49) (MapType1Type RefType realType))) (= (type Heap@39) (MapType0Type RefType))) (= (type Used_10Mask@3) (MapType1Type RefType realType))) (= (type Ops_3Mask@31) (MapType1Type RefType realType))) (= (type Used_10Mask@4) (MapType1Type RefType realType))) (= (type Ops_3Mask@32) (MapType1Type RefType realType))) (= (type Result_20Heap) (MapType0Type RefType))) (= (type Result_20Mask) (MapType1Type RefType realType))) (= (type Used_10Mask@1) (MapType1Type RefType realType))) (= (type Used_10Mask@2) (MapType1Type RefType realType))) (= (type Mask@47) (MapType1Type RefType realType))) (= (type Heap@37) (MapType0Type RefType))) (= (type Used_10Mask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@30) (MapType1Type RefType realType))) (= (type Ops_3Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@18) (MapType1Type RefType realType))) (= (type Heap@26) (MapType0Type RefType))) (= (type Mask@36) (MapType1Type RefType realType))) (= (type Ops_3Heap@8) (MapType0Type RefType))) (= (type Ops_3Mask@28) (MapType1Type RefType realType))) (= (type Heap@35) (MapType0Type RefType))) (= (type Mask@45) (MapType1Type RefType realType))) (= (type Ops_3Heap@6) (MapType0Type RefType))) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type Ops_3Heap@7) (MapType0Type RefType))) (= (type Ops_3Heap@4) (MapType0Type RefType))) (= (type Ops_3Heap@3) (MapType0Type RefType))) (= (type Ops_3Heap@5) (MapType0Type RefType))) (= (type Ops_3Heap@1) (MapType0Type RefType))) (= (type Ops_3Heap@2) (MapType0Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Result_19Heap) (MapType0Type RefType))) (= (type Result_19Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask@27) (MapType1Type RefType realType))) (= (type Used_9Mask@16) (MapType1Type RefType realType))) (= (type Used_9Heap@0) (MapType0Type RefType))) (= (type Result_17Heap) (MapType0Type RefType))) (= (type Used_9Mask@11) (MapType1Type RefType realType))) (= (type Ops_3Mask@24) (MapType1Type RefType realType))) (= (type Heap@32) (MapType0Type RefType))) (= (type Mask@42) (MapType1Type RefType realType))) (= (type Result_18Heap) (MapType0Type RefType))) (= (type Used_9Mask@15) (MapType1Type RefType realType))) (= (type Ops_3Mask@26) (MapType1Type RefType realType))) (= (type Heap@34) (MapType0Type RefType))) (= (type Mask@44) (MapType1Type RefType realType))) (= (type Result_18Mask) (MapType1Type RefType realType))) (= (type arg_7@0) RefType)) (= (type Used_9Mask@13) (MapType1Type RefType realType))) (= (type Used_9Mask@14) (MapType1Type RefType realType))) (= (type TempMask@3) (MapType1Type RefType realType))) (= (type Mask@43) (MapType1Type RefType realType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Heap@33) (MapType0Type RefType))) (= (type Used_9Mask@12) (MapType1Type RefType realType))) (= (type TempMask@2) (MapType1Type RefType realType))) (= (type Ops_3Mask@25) (MapType1Type RefType realType))) (= (type Result_17Mask) (MapType1Type RefType realType))) (= (type rcvLocal@2) RefType)) (= (type Used_9Mask@9) (MapType1Type RefType realType))) (= (type Heap@30) (MapType0Type RefType))) (= (type Mask@40) (MapType1Type RefType realType))) (= (type Used_9Mask@10) (MapType1Type RefType realType))) (= (type Mask@41) (MapType1Type RefType realType))) (= (type Heap@31) (MapType0Type RefType))) (= (type Ops_3Mask@22) (MapType1Type RefType realType))) (= (type Used_9Mask@7) (MapType1Type RefType realType))) (= (type Used_9Mask@8) (MapType1Type RefType realType))) (= (type Ops_3Mask@23) (MapType1Type RefType realType))) (= (type Result_16Heap) (MapType0Type RefType))) (= (type Result_16Mask) (MapType1Type RefType realType))) (= (type rcvLocal@1) RefType)) (= (type Mask@38) (MapType1Type RefType realType))) (= (type Heap@28) (MapType0Type RefType))) (= (type Used_9Mask@5) (MapType1Type RefType realType))) (= (type Used_9Mask@6) (MapType1Type RefType realType))) (= (type Mask@39) (MapType1Type RefType realType))) (= (type Heap@29) (MapType0Type RefType))) (= (type Used_9Mask@3) (MapType1Type RefType realType))) (= (type Ops_3Mask@20) (MapType1Type RefType realType))) (= (type Used_9Mask@4) (MapType1Type RefType realType))) (= (type Ops_3Mask@21) (MapType1Type RefType realType))) (= (type Result_15Heap) (MapType0Type RefType))) (= (type Result_15Mask) (MapType1Type RefType realType))) (= (type rcvLocal@0) RefType)) (= (type Used_9Mask@1) (MapType1Type RefType realType))) (= (type Used_9Mask@2) (MapType1Type RefType realType))) (= (type Mask@37) (MapType1Type RefType realType))) (= (type Heap@27) (MapType0Type RefType))) (= (type Used_9Mask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@19) (MapType1Type RefType realType))) (= (type Mask@33) (MapType1Type RefType realType))) (= (type Heap@23) (MapType0Type RefType))) (= (type Ops_3Mask@1) (MapType1Type RefType realType))) (= (type Ops_3Mask@17) (MapType1Type RefType realType))) (= (type Mask@35) (MapType1Type RefType realType))) (= (type Heap@25) (MapType0Type RefType))) (= (type Ops_3Mask@16) (MapType1Type RefType realType))) (= (type Ops_3Mask@15) (MapType1Type RefType realType))) (= (type Ops_3Mask@13) (MapType1Type RefType realType))) (= (type Ops_3Mask@12) (MapType1Type RefType realType))) (= (type Ops_3Mask@14) (MapType1Type RefType realType))) (= (type Ops_3Mask@11) (MapType1Type RefType realType))) (= (type Ops_3Mask@10) (MapType1Type RefType realType))) (= (type Used_8Mask@3) (MapType1Type RefType realType))) (= (type Result_14Heap) (MapType0Type RefType))) (= (type Result_14Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask@3) (MapType1Type RefType realType))) (= (type Used_8Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@4) (MapType1Type RefType realType))) (= (type Ops_3Mask@5) (MapType1Type RefType realType))) (= (type Ops_3Mask@6) (MapType1Type RefType realType))) (= (type Ops_3Mask@7) (MapType1Type RefType realType))) (= (type Ops_3Mask@8) (MapType1Type RefType realType))) (= (type Ops_3Mask@9) (MapType1Type RefType realType))) (= (type Used_8Mask@1) (MapType1Type RefType realType))) (= (type Used_8Mask@2) (MapType1Type RefType realType))) (= (type TempMask@1) (MapType1Type RefType realType))) (= (type Mask@34) (MapType1Type RefType realType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Heap@24) (MapType0Type RefType))) (= (type Used_8Mask@0) (MapType1Type RefType realType))) (= (type TempMask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@2) (MapType1Type RefType realType))) (= (type Ops_3Mask@0) (MapType1Type RefType realType))) (= (type Used_7Heap@0) (MapType0Type RefType))) (= (type Heap@21) (MapType0Type RefType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@22) (MapType0Type RefType))) (= (type Heap@19) (MapType0Type RefType))) (= (type Heap@18) (MapType0Type RefType))) (= (type Heap@20) (MapType0Type RefType))) (= (type Heap@16) (MapType0Type RefType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@17) (MapType0Type RefType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Heap@11) (MapType0Type RefType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Heap@13) (MapType0Type RefType))) (= (type Heap@14) (MapType0Type RefType))) (= (type Heap@15) (MapType0Type RefType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Heap@6) (MapType0Type RefType))) (= (type Heap@8) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@32) (MapType1Type RefType realType))) (= (type Mask@30) (MapType1Type RefType realType))) (= (type Mask@31) (MapType1Type RefType realType))) (= (type Mask@29) (MapType1Type RefType realType))) (= (type Mask@28) (MapType1Type RefType realType))) (= (type Mask@27) (MapType1Type RefType realType))) (= (type Mask@25) (MapType1Type RefType realType))) (= (type Mask@26) (MapType1Type RefType realType))) (= (type Mask@24) (MapType1Type RefType realType))) (= (type Mask@23) (MapType1Type RefType realType))) (= (type Mask@22) (MapType1Type RefType realType))) (= (type Mask@21) (MapType1Type RefType realType))) (= (type Mask@20) (MapType1Type RefType realType))) (= (type Mask@19) (MapType1Type RefType realType))) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Heap@4) (MapType0Type RefType))) (= (type newVersion@1) FrameTypeType)) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type Heap@@35) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type Mask@0) (MapType1Type RefType realType))) (= (type PostHeap@0) (MapType0Type RefType))) (= (type PostMask@0) (MapType1Type RefType realType))))
(set-info :boogie-vc-id Iterator_next)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 545) (let ((anon341_Else_correct true))
(let ((anon341_Then_correct true))
(let ((anon340_Then_correct  (=> (and (and (state PostHeap@0 ZeroMask) (= PostMask@0 (MapType1Store ZeroMask null (Iterator_readyForRemove this@@55) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Iterator_readyForRemove this@@55))) FullPerm))))) (and (state PostHeap@0 PostMask@0) (state PostHeap@0 PostMask@0))) (and (=> (= (ControlFlow 0 543) 541) anon341_Then_correct) (=> (= (ControlFlow 0 543) 542) anon341_Else_correct)))))
(let ((anon151_correct true))
(let ((anon419_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 293) 290)) anon151_correct)))
(let ((anon419_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 291) (- 0 292)) (<= FullPerm (U_2_real (MapType1Select Result_18Mask null (Node_reverse (MapType0Select Result_18Heap (MapType0Select Result_18Heap (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev) Node_prev)))))) (=> (<= FullPerm (U_2_real (MapType1Select Result_18Mask null (Node_reverse (MapType0Select Result_18Heap (MapType0Select Result_18Heap (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev) Node_prev))))) (=> (= (ControlFlow 0 291) 290) anon151_correct))))))
(let ((anon291_correct true))
(let ((anon494_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 82) 79)) anon291_correct)))
(let ((anon494_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 80) (- 0 81)) (<= FullPerm (U_2_real (MapType1Select Result_28Mask null (Node_reverse (MapType0Select Result_28Heap (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev)))))) (=> (<= FullPerm (U_2_real (MapType1Select Result_28Mask null (Node_reverse (MapType0Select Result_28Heap (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev))))) (=> (= (ControlFlow 0 80) 79) anon291_correct))))))
(let ((anon298_correct true))
(let ((anon498_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 67) 64)) anon298_correct)))
(let ((anon498_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 65) (- 0 66)) (<= FullPerm (U_2_real (MapType1Select Result_28Mask null (Node_reverse (MapType0Select Result_28Heap (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev)))))) (=> (<= FullPerm (U_2_real (MapType1Select Result_28Mask null (Node_reverse (MapType0Select Result_28Heap (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev))))) (=> (= (ControlFlow 0 65) 64) anon298_correct))))))
(let ((anon339_correct  (=> (and (= Mask@71 (MapType1Store Mask@70 null (Iterator_readyForRemove this@@55) (real_2_U (- (U_2_real (MapType1Select Mask@70 null (Iterator_readyForRemove this@@55))) FullPerm)))) (= (ControlFlow 0 2) (- 0 1))) (<= FullPerm (U_2_real (MapType1Select Mask@71 null (wand this@@55 FullPerm this@@55 FullPerm)))))))
(let ((anon517_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 5) 2)) anon339_correct)))
(let ((anon517_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= FullPerm (U_2_real (MapType1Select Mask@70 null (Iterator_readyForRemove this@@55))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@70 null (Iterator_readyForRemove this@@55)))) (=> (= (ControlFlow 0 3) 2) anon339_correct))))))
(let ((anon337_correct  (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> (and (and b_23@119 b_23@119) b_45@6) (and (= neededTransfer@60 0.0) (= (U_2_real (MapType1Select Used_11Mask@3 null (Iterator_ready this@@55))) initNeededTransfer@14)))) (=> (=> (and (and b_23@119 b_23@119) b_45@6) (and (= neededTransfer@60 0.0) (= (U_2_real (MapType1Select Used_11Mask@3 null (Iterator_ready this@@55))) initNeededTransfer@14))) (=> (and (= b_46@0  (and b_23@119 b_45@6)) (= b_46@1  (and b_46@0 (state Result_32Heap Result_32Mask)))) (=> (and (and (and (= b_46@2  (and b_46@1 (sumMask Result_32Mask Ops_3Mask Used_11Mask@3))) (= b_46@3  (and (and b_46@2 (IdenticalOnKnownLocations Ops_3Heap@24 Result_32Heap Ops_3Mask)) (IdenticalOnKnownLocations Used_11Heap@0 Result_32Heap Used_11Mask@3)))) (and (= b_46@4  (and b_46@3 (state Result_32Heap Result_32Mask))) (= b_23@120  (and b_23@119 b_46@4)))) (and (and (= Mask@70 (MapType1Store Mask@69 null (wand this@@55 FullPerm this@@55 FullPerm) (real_2_U (+ (U_2_real (MapType1Select Mask@69 null (wand this@@55 FullPerm this@@55 FullPerm))) FullPerm)))) (state Heap@59 Mask@70)) (and (state Heap@59 Mask@70) (state Heap@59 Mask@70)))) (and (=> (= (ControlFlow 0 6) 3) anon517_Then_correct) (=> (= (ControlFlow 0 6) 5) anon517_Else_correct))))))))
(let ((anon516_Else_correct  (=> (>= 0.0 takeTransfer@29) (=> (and (= Mask@69 Mask@67) (= Heap@59 Heap@57)) (=> (and (and (= neededTransfer@60 neededTransfer@58) (= b_45@6 b_45@3)) (and (= Used_11Mask@3 Used_11Mask@1) (= (ControlFlow 0 10) 6))) anon337_correct)))))
(let ((anon516_Then_correct  (=> (> takeTransfer@29 0.0) (=> (and (= neededTransfer@59 (- neededTransfer@58 takeTransfer@29)) (= Used_11Mask@2 (MapType1Store Used_11Mask@1 null (Iterator_ready this@@55) (real_2_U (+ (U_2_real (MapType1Select Used_11Mask@1 null (Iterator_ready this@@55))) takeTransfer@29))))) (=> (and (and (= b_45@4  (and b_45@3 (state Used_11Heap@0 Used_11Mask@2))) (= TempMask@9 (MapType1Store ZeroMask null (Iterator_ready this@@55) (real_2_U FullPerm)))) (and (= b_45@5  (and b_45@4 (IdenticalOnKnownLocations Heap@57 Used_11Heap@0 TempMask@9))) (= Mask@68 (MapType1Store Mask@67 null (Iterator_ready this@@55) (real_2_U (- (U_2_real (MapType1Select Mask@67 null (Iterator_ready this@@55))) takeTransfer@29)))))) (=> (and (and (and (forall ((o_31 T@U) (f_35 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_35))))
(let ((A@@12 (FieldTypeInv0 (type f_35))))
 (=> (and (and (= (type o_31) RefType) (= (type f_35) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@57 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) o_31 f_35)) (U_2_bool (MapType1Select (MapType0Select Heap@57 null (|Iterator_ready#sm| this@@55)) o_31 f_35)))) (U_2_bool (MapType1Select newPMask@9 o_31 f_35)))))
 :qid |stdinbpl.6312:35|
 :skolemid |120|
 :pattern ( (MapType1Select newPMask@9 o_31 f_35))
)) (= Heap@58 (MapType0Store Heap@57 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) newPMask@9))) (and (= Mask@69 Mask@68) (= Heap@59 Heap@58))) (and (and (= neededTransfer@60 neededTransfer@59) (= b_45@6 b_45@5)) (and (= Used_11Mask@3 Used_11Mask@2) (= (ControlFlow 0 9) 6)))) anon337_correct))))))
(let ((anon515_Else_correct  (=> (and (< maskTransfer@29 neededTransfer@58) (= takeTransfer@29 maskTransfer@29)) (and (=> (= (ControlFlow 0 12) 9) anon516_Then_correct) (=> (= (ControlFlow 0 12) 10) anon516_Else_correct)))))
(let ((anon515_Then_correct  (=> (and (<= neededTransfer@58 maskTransfer@29) (= takeTransfer@29 neededTransfer@58)) (and (=> (= (ControlFlow 0 11) 9) anon516_Then_correct) (=> (= (ControlFlow 0 11) 10) anon516_Else_correct)))))
(let ((anon514_Then_correct  (=> (and (and (and (and (and b_23@119 b_23@119) b_45@3) true) (> neededTransfer@58 0.0)) (= maskTransfer@29 (U_2_real (MapType1Select Mask@67 null (Iterator_ready this@@55))))) (and (=> (= (ControlFlow 0 13) 11) anon515_Then_correct) (=> (= (ControlFlow 0 13) 12) anon515_Else_correct)))))
(let ((anon514_Else_correct  (=> (not (and (and (and (and b_23@119 b_23@119) b_45@3) true) (> neededTransfer@58 0.0))) (=> (and (= Mask@69 Mask@67) (= Heap@59 Heap@57)) (=> (and (and (= neededTransfer@60 neededTransfer@58) (= b_45@6 b_45@3)) (and (= Used_11Mask@3 Used_11Mask@1) (= (ControlFlow 0 8) 6))) anon337_correct)))))
(let ((anon513_Else_correct  (=> (and (and (>= 0.0 takeTransfer@28) (= Used_11Mask@1 ZeroMask)) (and (= b_45@3 b_45@0) (= neededTransfer@58 FullPerm))) (and (=> (= (ControlFlow 0 16) 13) anon514_Then_correct) (=> (= (ControlFlow 0 16) 8) anon514_Else_correct)))))
(let ((anon513_Then_correct  (=> (and (> takeTransfer@28 0.0) (= neededTransfer@57 (- FullPerm takeTransfer@28))) (=> (and (and (and (= Used_11Mask@0 (MapType1Store ZeroMask null (Iterator_ready this@@55) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Iterator_ready this@@55))) takeTransfer@28)))) (= b_45@1  (and b_45@0 (state Used_11Heap@0 Used_11Mask@0)))) (and (= TempMask@8 (MapType1Store ZeroMask null (Iterator_ready this@@55) (real_2_U FullPerm))) (= b_45@2  (and b_45@1 (IdenticalOnKnownLocations Ops_3Heap@24 Used_11Heap@0 TempMask@8))))) (and (and (= Ops_3Mask@52 (MapType1Store Ops_3Mask@51 null (Iterator_ready this@@55) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@51 null (Iterator_ready this@@55))) takeTransfer@28)))) (= Used_11Mask@1 Used_11Mask@0)) (and (= b_45@3 b_45@2) (= neededTransfer@58 neededTransfer@57)))) (and (=> (= (ControlFlow 0 15) 13) anon514_Then_correct) (=> (= (ControlFlow 0 15) 8) anon514_Else_correct))))))
(let ((anon512_Else_correct  (=> (and (< maskTransfer@28 FullPerm) (= takeTransfer@28 maskTransfer@28)) (and (=> (= (ControlFlow 0 18) 15) anon513_Then_correct) (=> (= (ControlFlow 0 18) 16) anon513_Else_correct)))))
(let ((anon512_Then_correct  (=> (and (<= FullPerm maskTransfer@28) (= takeTransfer@28 FullPerm)) (and (=> (= (ControlFlow 0 17) 15) anon513_Then_correct) (=> (= (ControlFlow 0 17) 16) anon513_Else_correct)))))
(let ((anon511_Then_correct  (=> (and (and (and (and (and b_23@119 b_23@119) b_45@0) true) (> FullPerm 0.0)) (= maskTransfer@28 (U_2_real (MapType1Select Ops_3Mask@51 null (Iterator_ready this@@55))))) (and (=> (= (ControlFlow 0 19) 17) anon512_Then_correct) (=> (= (ControlFlow 0 19) 18) anon512_Else_correct)))))
(let ((anon511_Else_correct  (=> (and (and (not (and (and (and (and b_23@119 b_23@119) b_45@0) true) (> FullPerm 0.0))) (= Used_11Mask@1 ZeroMask)) (and (= b_45@3 b_45@0) (= neededTransfer@58 FullPerm))) (and (=> (= (ControlFlow 0 14) 13) anon514_Then_correct) (=> (= (ControlFlow 0 14) 8) anon514_Else_correct)))))
(let ((anon325_correct  (=> (and (= b_45@0  (and b_45 (state Used_11Heap@0 ZeroMask))) (= initNeededTransfer@14 (+ (U_2_real (MapType1Select ZeroMask null (Iterator_ready this@@55))) FullPerm))) (and (=> (= (ControlFlow 0 20) (- 0 21)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 20) 19) anon511_Then_correct) (=> (= (ControlFlow 0 20) 14) anon511_Else_correct)))))))
(let ((anon324_correct  (=> (and (and (and (state Ops_3Heap@23 Ops_3Mask@50) (= b_23@118  (and b_23@117 (state Ops_3Heap@23 Ops_3Mask@50)))) (and (= Ops_3Heap@24 Ops_3Heap@23) (= b_23@119 b_23@118))) (and (and (= Ops_3Mask@51 Ops_3Mask@50) (= Heap@57 Heap@56)) (and (= Mask@67 Mask@66) (= (ControlFlow 0 23) 20)))) anon325_correct)))
(let ((anon510_Else_correct  (=> (= (MapType0Select Ops_3Heap@21 (MapType0Select Ops_3Heap@21 this@@55 Iterator_current) Node_next) null) (=> (and (= Ops_3Heap@23 Ops_3Heap@21) (= (ControlFlow 0 25) 23)) anon324_correct))))
(let ((anon510_Then_correct  (=> (not (= (MapType0Select Ops_3Heap@21 (MapType0Select Ops_3Heap@21 this@@55 Iterator_current) Node_next) null)) (=> (and (and (forall ((o_30 T@U) (f_34 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_34))))
(let ((A@@13 (FieldTypeInv0 (type f_34))))
 (=> (and (and (= (type o_30) RefType) (= (type f_34) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@21 null (|Iterator_ready#sm| this@@55)) o_30 f_34)) (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@21 null (|Node_state#sm| (MapType0Select Ops_3Heap@21 (MapType0Select Ops_3Heap@21 this@@55 Iterator_current) Node_next))) o_30 f_34)))) (U_2_bool (MapType1Select newPMask@8 o_30 f_34)))))
 :qid |stdinbpl.6251:33|
 :skolemid |119|
 :pattern ( (MapType1Select newPMask@8 o_30 f_34))
)) (= Ops_3Heap@22 (MapType0Store Ops_3Heap@21 null (|Iterator_ready#sm| this@@55) newPMask@8))) (and (= Ops_3Heap@23 Ops_3Heap@22) (= (ControlFlow 0 24) 23))) anon324_correct))))
(let ((anon509_Else_correct  (=> (and (= (MapType0Select Ops_3Heap@19 (MapType0Select Ops_3Heap@19 this@@55 Iterator_current) Node_prev) null) (= Ops_3Heap@21 Ops_3Heap@19)) (and (=> (= (ControlFlow 0 27) 24) anon510_Then_correct) (=> (= (ControlFlow 0 27) 25) anon510_Else_correct)))))
(let ((anon509_Then_correct  (=> (and (and (not (= (MapType0Select Ops_3Heap@19 (MapType0Select Ops_3Heap@19 this@@55 Iterator_current) Node_prev) null)) (forall ((o_29 T@U) (f_33 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_33))))
(let ((A@@14 (FieldTypeInv0 (type f_33))))
 (=> (and (and (= (type o_29) RefType) (= (type f_33) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@19 null (|Iterator_ready#sm| this@@55)) o_29 f_33)) (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@19 null (|Node_reverse#sm| (MapType0Select Ops_3Heap@19 (MapType0Select Ops_3Heap@19 this@@55 Iterator_current) Node_prev))) o_29 f_33)))) (U_2_bool (MapType1Select newPMask@7 o_29 f_33)))))
 :qid |stdinbpl.6243:33|
 :skolemid |118|
 :pattern ( (MapType1Select newPMask@7 o_29 f_33))
))) (and (= Ops_3Heap@20 (MapType0Store Ops_3Heap@19 null (|Iterator_ready#sm| this@@55) newPMask@7)) (= Ops_3Heap@21 Ops_3Heap@20))) (and (=> (= (ControlFlow 0 26) 24) anon510_Then_correct) (=> (= (ControlFlow 0 26) 25) anon510_Else_correct)))))
(let ((anon320_correct  (=> (= Ops_3Heap@13 (MapType0Store Ops_3Heap@12 null (|Iterator_ready#sm| this@@55) (MapType1Store (MapType0Select Ops_3Heap@12 null (|Iterator_ready#sm| this@@55)) this@@55 Iterator_iteratee (bool_2_U true)))) (=> (and (= Ops_3Heap@14 (MapType0Store Ops_3Heap@13 null (|Iterator_ready#sm| this@@55) (MapType1Store (MapType0Select Ops_3Heap@13 null (|Iterator_ready#sm| this@@55)) (MapType0Select Ops_3Heap@13 this@@55 Iterator_iteratee) List_sentinel (bool_2_U true)))) (= Ops_3Heap@15 (MapType0Store Ops_3Heap@14 null (|Iterator_ready#sm| this@@55) (MapType1Store (MapType0Select Ops_3Heap@14 null (|Iterator_ready#sm| this@@55)) this@@55 Iterator_current (bool_2_U true))))) (=> (and (and (= Ops_3Heap@16 (MapType0Store Ops_3Heap@15 null (|Iterator_ready#sm| this@@55) (MapType1Store (MapType0Select Ops_3Heap@15 null (|Iterator_ready#sm| this@@55)) this@@55 Iterator_last (bool_2_U true)))) (= Ops_3Heap@17 (MapType0Store Ops_3Heap@16 null (|Iterator_ready#sm| this@@55) (MapType1Store (MapType0Select Ops_3Heap@16 null (|Iterator_ready#sm| this@@55)) (MapType0Select Ops_3Heap@16 this@@55 Iterator_current) Node_val (bool_2_U true))))) (and (= Ops_3Heap@18 (MapType0Store Ops_3Heap@17 null (|Iterator_ready#sm| this@@55) (MapType1Store (MapType0Select Ops_3Heap@17 null (|Iterator_ready#sm| this@@55)) (MapType0Select Ops_3Heap@17 this@@55 Iterator_current) Node_next (bool_2_U true)))) (= Ops_3Heap@19 (MapType0Store Ops_3Heap@18 null (|Iterator_ready#sm| this@@55) (MapType1Store (MapType0Select Ops_3Heap@18 null (|Iterator_ready#sm| this@@55)) (MapType0Select Ops_3Heap@18 this@@55 Iterator_current) Node_prev (bool_2_U true)))))) (and (=> (= (ControlFlow 0 28) 26) anon509_Then_correct) (=> (= (ControlFlow 0 28) 27) anon509_Else_correct)))))))
(let ((anon508_Else_correct  (=> (HasDirectPerm Ops_3Mask@50 null (Iterator_ready this@@55)) (=> (and (= Ops_3Heap@12 Ops_3Heap@9) (= (ControlFlow 0 30) 28)) anon320_correct))))
(let ((anon508_Then_correct  (=> (not (HasDirectPerm Ops_3Mask@50 null (Iterator_ready this@@55))) (=> (and (and (= Ops_3Heap@10 (MapType0Store Ops_3Heap@9 null (|Iterator_ready#sm| this@@55) ZeroPMask)) (= Ops_3Heap@11 (MapType0Store Ops_3Heap@10 null (Iterator_ready this@@55) freshVersion@2))) (and (= Ops_3Heap@12 Ops_3Heap@11) (= (ControlFlow 0 29) 28))) anon320_correct))))
(let ((anon318_correct  (=> (= b_44@0  (and b_23@114 b_32@56)) (=> (and (= b_44@1  (and b_44@0 (state Result_31Heap Result_31Mask))) (= b_44@2  (and b_44@1 (sumMask Result_31Mask Ops_3Mask@49 Used_10Mask@37)))) (=> (and (and (and (= b_44@3  (and (and b_44@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_31Heap Ops_3Mask@49)) (IdenticalOnKnownLocations Used_10Heap@0 Result_31Heap Used_10Mask@37))) (= b_44@4  (and b_44@3 (state Result_31Heap Result_31Mask)))) (and (= b_23@115  (and b_23@114 b_44@4)) (= Ops_3Mask@50 (MapType1Store Ops_3Mask@49 null (Iterator_ready this@@55) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@49 null (Iterator_ready this@@55))) FullPerm)))))) (and (and (= b_23@116  (and b_23@115 (state Ops_3Heap@9 Ops_3Mask@50))) (= b_23@117  (and b_23@116 (state Ops_3Heap@9 Ops_3Mask@50)))) (and (|Iterator_ready#trigger| Ops_3Heap@9 (Iterator_ready this@@55)) (= (MapType0Select Ops_3Heap@9 null (Iterator_ready this@@55)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@9 this@@55 Iterator_iteratee)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@9 (MapType0Select Ops_3Heap@9 this@@55 Iterator_iteratee) List_sentinel)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@9 this@@55 Iterator_current)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@9 this@@55 Iterator_last)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@9 (MapType0Select Ops_3Heap@9 this@@55 Iterator_current) Node_val)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@9 (MapType0Select Ops_3Heap@9 this@@55 Iterator_current) Node_next)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@9 (MapType0Select Ops_3Heap@9 this@@55 Iterator_current) Node_prev)) (CombineFrames (FrameFragment (ite (= (MapType0Select Ops_3Heap@9 (MapType0Select Ops_3Heap@9 this@@55 Iterator_current) Node_prev) null) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Ops_3Heap@9 (MapType0Select Ops_3Heap@9 this@@55 Iterator_current) Node_prev) null)) (MapType0Select Ops_3Heap@9 null (Node_reverse (MapType0Select Ops_3Heap@9 (MapType0Select Ops_3Heap@9 this@@55 Iterator_current) Node_prev))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Ops_3Heap@9 (MapType0Select Ops_3Heap@9 this@@55 Iterator_current) Node_next) null)) (MapType0Select Ops_3Heap@9 null (Node_state (MapType0Select Ops_3Heap@9 (MapType0Select Ops_3Heap@9 this@@55 Iterator_current) Node_next))) EmptyFrame))))))))))))))) (and (=> (= (ControlFlow 0 31) 29) anon508_Then_correct) (=> (= (ControlFlow 0 31) 30) anon508_Else_correct)))))))
(let ((anon317_correct  (and (=> (= (ControlFlow 0 33) (- 0 34)) (=> (and b_23@110 b_32@55) (and (= neededTransfer@56 0.0) (= (U_2_real (MapType1Select Used_10Mask@36 null (Node_state arg_9@0))) initNeededTransfer@13)))) (=> (=> (and b_23@110 b_32@55) (and (= neededTransfer@56 0.0) (= (U_2_real (MapType1Select Used_10Mask@36 null (Node_state arg_9@0))) initNeededTransfer@13))) (=> (= b_43@0  (and b_23@110 b_32@55)) (=> (and (= b_43@1  (and b_43@0 (state Result_30Heap Result_30Mask))) (= b_43@2  (and b_43@1 (sumMask Result_30Mask Ops_3Mask@48 Used_10Mask@36)))) (=> (and (and (= b_43@3  (and (and b_43@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_30Heap Ops_3Mask@48)) (IdenticalOnKnownLocations Used_10Heap@0 Result_30Heap Used_10Mask@36))) (= b_43@4  (and b_43@3 (state Result_30Heap Result_30Mask)))) (and (= b_23@111  (and b_23@110 b_43@4)) (= b_23@112  (and b_23@111 b_32@55)))) (=> (and (and (and (= b_23@113  (and b_23@112 (= Used_10Heap@0 Ops_3Heap@9))) (= b_32@56 b_32@55)) (and (= Used_10Mask@37 Used_10Mask@36) (= Heap@56 Heap@55))) (and (and (= b_23@114 b_23@113) (= Mask@66 Mask@65)) (and (= Ops_3Mask@49 Ops_3Mask@48) (= (ControlFlow 0 33) 31)))) anon318_correct))))))))
(let ((anon507_Else_correct  (=> (>= 0.0 takeTransfer@27) (=> (and (= Mask@65 Mask@63) (= Heap@55 Heap@53)) (=> (and (and (= neededTransfer@56 neededTransfer@54) (= Used_10Mask@36 Used_10Mask@34)) (and (= b_32@55 b_32@52) (= (ControlFlow 0 37) 33))) anon317_correct)))))
(let ((anon507_Then_correct  (=> (> takeTransfer@27 0.0) (=> (and (= neededTransfer@55 (- neededTransfer@54 takeTransfer@27)) (= Used_10Mask@35 (MapType1Store Used_10Mask@34 null (Node_state arg_9@0) (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@34 null (Node_state arg_9@0))) takeTransfer@27))))) (=> (and (and (= b_32@53  (and b_32@52 (state Used_10Heap@0 Used_10Mask@35))) (= TempMask@7 (MapType1Store ZeroMask null (Node_state arg_9@0) (real_2_U FullPerm)))) (and (= b_32@54  (and b_32@53 (IdenticalOnKnownLocations Heap@53 Used_10Heap@0 TempMask@7))) (= Mask@64 (MapType1Store Mask@63 null (Node_state arg_9@0) (real_2_U (- (U_2_real (MapType1Select Mask@63 null (Node_state arg_9@0))) takeTransfer@27)))))) (=> (and (and (and (forall ((o_28 T@U) (f_32 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_32))))
(let ((A@@15 (FieldTypeInv0 (type f_32))))
 (=> (and (and (= (type o_28) RefType) (= (type f_32) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select Heap@53 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) o_28 f_32)) (U_2_bool (MapType1Select (MapType0Select Heap@53 null (|Node_state#sm| (MapType0Select Heap@53 (MapType0Select Heap@53 this@@55 Iterator_current) Node_next))) o_28 f_32)))) (U_2_bool (MapType1Select newPMask@6 o_28 f_32)))))
 :qid |stdinbpl.6194:41|
 :skolemid |117|
 :pattern ( (MapType1Select newPMask@6 o_28 f_32))
)) (= Heap@54 (MapType0Store Heap@53 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) newPMask@6))) (and (= Mask@65 Mask@64) (= Heap@55 Heap@54))) (and (and (= neededTransfer@56 neededTransfer@55) (= Used_10Mask@36 Used_10Mask@35)) (and (= b_32@55 b_32@54) (= (ControlFlow 0 36) 33)))) anon317_correct))))))
(let ((anon506_Else_correct  (=> (and (< maskTransfer@27 neededTransfer@54) (= takeTransfer@27 maskTransfer@27)) (and (=> (= (ControlFlow 0 39) 36) anon507_Then_correct) (=> (= (ControlFlow 0 39) 37) anon507_Else_correct)))))
(let ((anon506_Then_correct  (=> (and (<= neededTransfer@54 maskTransfer@27) (= takeTransfer@27 neededTransfer@54)) (and (=> (= (ControlFlow 0 38) 36) anon507_Then_correct) (=> (= (ControlFlow 0 38) 37) anon507_Else_correct)))))
(let ((anon505_Then_correct  (=> (and (and (and (and b_23@110 b_32@52) true) (> neededTransfer@54 0.0)) (= maskTransfer@27 (U_2_real (MapType1Select Mask@63 null (Node_state arg_9@0))))) (and (=> (= (ControlFlow 0 40) 38) anon506_Then_correct) (=> (= (ControlFlow 0 40) 39) anon506_Else_correct)))))
(let ((anon505_Else_correct  (=> (not (and (and (and b_23@110 b_32@52) true) (> neededTransfer@54 0.0))) (=> (and (= Mask@65 Mask@63) (= Heap@55 Heap@53)) (=> (and (and (= neededTransfer@56 neededTransfer@54) (= Used_10Mask@36 Used_10Mask@34)) (and (= b_32@55 b_32@52) (= (ControlFlow 0 35) 33))) anon317_correct)))))
(let ((anon504_Else_correct  (=> (>= 0.0 takeTransfer@26) (=> (and (and (= Ops_3Mask@48 Ops_3Mask@46) (= b_32@52 b_32@49)) (and (= Used_10Mask@34 Used_10Mask@32) (= neededTransfer@54 FullPerm))) (and (=> (= (ControlFlow 0 43) 40) anon505_Then_correct) (=> (= (ControlFlow 0 43) 35) anon505_Else_correct))))))
(let ((anon504_Then_correct  (=> (> takeTransfer@26 0.0) (=> (and (= neededTransfer@53 (- FullPerm takeTransfer@26)) (= Used_10Mask@33 (MapType1Store Used_10Mask@32 null (Node_state arg_9@0) (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@32 null (Node_state arg_9@0))) takeTransfer@26))))) (=> (and (and (and (= b_32@50  (and b_32@49 (state Used_10Heap@0 Used_10Mask@33))) (= TempMask@6 (MapType1Store ZeroMask null (Node_state arg_9@0) (real_2_U FullPerm)))) (and (= b_32@51  (and b_32@50 (IdenticalOnKnownLocations Ops_3Heap@9 Used_10Heap@0 TempMask@6))) (= Ops_3Mask@47 (MapType1Store Ops_3Mask@46 null (Node_state arg_9@0) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@46 null (Node_state arg_9@0))) takeTransfer@26)))))) (and (and (= Ops_3Mask@48 Ops_3Mask@47) (= b_32@52 b_32@51)) (and (= Used_10Mask@34 Used_10Mask@33) (= neededTransfer@54 neededTransfer@53)))) (and (=> (= (ControlFlow 0 42) 40) anon505_Then_correct) (=> (= (ControlFlow 0 42) 35) anon505_Else_correct)))))))
(let ((anon503_Else_correct  (=> (and (< maskTransfer@26 FullPerm) (= takeTransfer@26 maskTransfer@26)) (and (=> (= (ControlFlow 0 45) 42) anon504_Then_correct) (=> (= (ControlFlow 0 45) 43) anon504_Else_correct)))))
(let ((anon503_Then_correct  (=> (and (<= FullPerm maskTransfer@26) (= takeTransfer@26 FullPerm)) (and (=> (= (ControlFlow 0 44) 42) anon504_Then_correct) (=> (= (ControlFlow 0 44) 43) anon504_Else_correct)))))
(let ((anon502_Then_correct  (=> (and (and (and (and b_23@110 b_32@49) true) (> FullPerm 0.0)) (= maskTransfer@26 (U_2_real (MapType1Select Ops_3Mask@46 null (Node_state arg_9@0))))) (and (=> (= (ControlFlow 0 46) 44) anon503_Then_correct) (=> (= (ControlFlow 0 46) 45) anon503_Else_correct)))))
(let ((anon502_Else_correct  (=> (not (and (and (and b_23@110 b_32@49) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@48 Ops_3Mask@46) (= b_32@52 b_32@49)) (and (= Used_10Mask@34 Used_10Mask@32) (= neededTransfer@54 FullPerm))) (and (=> (= (ControlFlow 0 41) 40) anon505_Then_correct) (=> (= (ControlFlow 0 41) 35) anon505_Else_correct))))))
(let ((anon305_correct  (=> (and (= arg_9@0 (MapType0Select Result_29Heap (MapType0Select Result_29Heap this@@55 Iterator_current) Node_next)) (= initNeededTransfer@13 (+ (U_2_real (MapType1Select Used_10Mask@32 null (Node_state arg_9@0))) FullPerm))) (and (=> (= (ControlFlow 0 47) (- 0 48)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 47) 46) anon502_Then_correct) (=> (= (ControlFlow 0 47) 41) anon502_Else_correct)))))))
(let ((anon501_Else_correct  (=> (and (not b_23@110) (= (ControlFlow 0 53) 47)) anon305_correct)))
(let ((anon501_Then_correct  (=> b_23@110 (and (=> (= (ControlFlow 0 50) (- 0 52)) (HasDirectPerm Result_29Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_29Mask this@@55 Iterator_current) (and (=> (= (ControlFlow 0 50) (- 0 51)) (HasDirectPerm Result_29Mask (MapType0Select Result_29Heap this@@55 Iterator_current) Node_next)) (=> (HasDirectPerm Result_29Mask (MapType0Select Result_29Heap this@@55 Iterator_current) Node_next) (=> (= (ControlFlow 0 50) 47) anon305_correct))))))))
(let ((anon500_Then_correct  (=> (and b_23@110 b_32@49) (and (=> (= (ControlFlow 0 54) 50) anon501_Then_correct) (=> (= (ControlFlow 0 54) 53) anon501_Else_correct)))))
(let ((anon500_Else_correct  (=> (and (not (and b_23@110 b_32@49)) (= (ControlFlow 0 49) 47)) anon305_correct)))
(let ((anon499_Then_correct  (=> (=> b_23@110 (not (= (MapType0Select Result_29Heap (MapType0Select Result_29Heap this@@55 Iterator_current) Node_next) null))) (and (=> (= (ControlFlow 0 55) 54) anon500_Then_correct) (=> (= (ControlFlow 0 55) 49) anon500_Else_correct)))))
(let ((anon499_Else_correct  (=> (and (and (and (not (=> b_23@110 (not (= (MapType0Select Result_29Heap (MapType0Select Result_29Heap this@@55 Iterator_current) Node_next) null)))) (= b_32@56 b_32@49)) (and (= Used_10Mask@37 Used_10Mask@32) (= Heap@56 Heap@53))) (and (and (= b_23@114 b_23@110) (= Mask@66 Mask@63)) (and (= Ops_3Mask@49 Ops_3Mask@46) (= (ControlFlow 0 32) 31)))) anon318_correct)))
(let ((anon301_correct  (=> (and (= b_42@0  (and b_23@109 b_32@49)) (= b_42@1  (and b_42@0 (state Result_29Heap Result_29Mask)))) (=> (and (and (= b_42@2  (and b_42@1 (sumMask Result_29Mask Ops_3Mask@46 Used_10Mask@32))) (= b_42@3  (and (and b_42@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_29Heap Ops_3Mask@46)) (IdenticalOnKnownLocations Used_10Heap@0 Result_29Heap Used_10Mask@32)))) (and (= b_42@4  (and b_42@3 (state Result_29Heap Result_29Mask))) (= b_23@110  (and b_23@109 b_42@4)))) (and (=> (= (ControlFlow 0 56) 55) anon499_Then_correct) (=> (= (ControlFlow 0 56) 32) anon499_Else_correct))))))
(let ((anon300_correct  (and (=> (= (ControlFlow 0 58) (- 0 59)) (=> (and b_23@106 b_32@48) (= (Node_rev_next Result_28Heap (MapType0Select Result_28Heap (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev)) (MapType0Select Result_28Heap this@@55 Iterator_current)))) (=> (=> (and b_23@106 b_32@48) (= (Node_rev_next Result_28Heap (MapType0Select Result_28Heap (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev)) (MapType0Select Result_28Heap this@@55 Iterator_current))) (=> (= b_23@107  (and b_23@106 b_32@48)) (=> (and (and (and (= b_23@108  (and b_23@107 (= Used_10Heap@0 Ops_3Heap@9))) (= Used_10Mask@32 Used_10Mask@31)) (and (= b_23@109 b_23@108) (= Mask@63 Mask@62))) (and (and (= b_32@49 b_32@48) (= Heap@53 Heap@52)) (and (= Ops_3Mask@46 Ops_3Mask@45) (= (ControlFlow 0 58) 56)))) anon301_correct))))))
(let ((anon497_Else_correct  (and (=> (= (ControlFlow 0 62) (- 0 63)) (HasDirectPerm Result_28Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_28Mask this@@55 Iterator_current) (=> (= (ControlFlow 0 62) 58) anon300_correct)))))
(let ((anon496_Then_correct  (=> b_23@106 (and (=> (= (ControlFlow 0 68) (- 0 70)) (HasDirectPerm Result_28Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_28Mask this@@55 Iterator_current) (and (=> (= (ControlFlow 0 68) (- 0 69)) (HasDirectPerm Result_28Mask (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev)) (=> (HasDirectPerm Result_28Mask (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev) (and (and (=> (= (ControlFlow 0 68) 62) anon497_Else_correct) (=> (= (ControlFlow 0 68) 65) anon498_Then_correct)) (=> (= (ControlFlow 0 68) 67) anon498_Else_correct)))))))))
(let ((anon496_Else_correct  (=> (and (not b_23@106) (= (ControlFlow 0 61) 58)) anon300_correct)))
(let ((anon495_Then_correct  (=> (and b_23@106 b_32@48) (and (=> (= (ControlFlow 0 71) 68) anon496_Then_correct) (=> (= (ControlFlow 0 71) 61) anon496_Else_correct)))))
(let ((anon495_Else_correct  (=> (and (not (and b_23@106 b_32@48)) (= (ControlFlow 0 60) 58)) anon300_correct)))
(let ((anon293_correct  (and (=> (= (ControlFlow 0 72) (- 0 73)) (=> (and b_23@104 b_32@48) (= (Node_first Result_28Heap (MapType0Select Result_28Heap (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev)) (MapType0Select Result_28Heap (MapType0Select Result_28Heap this@@55 Iterator_iteratee) List_sentinel)))) (=> (=> (and b_23@104 b_32@48) (= (Node_first Result_28Heap (MapType0Select Result_28Heap (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev)) (MapType0Select Result_28Heap (MapType0Select Result_28Heap this@@55 Iterator_iteratee) List_sentinel))) (=> (and (= b_23@105  (and b_23@104 b_32@48)) (= b_23@106  (and b_23@105 (= Used_10Heap@0 Ops_3Heap@9)))) (and (=> (= (ControlFlow 0 72) 71) anon495_Then_correct) (=> (= (ControlFlow 0 72) 60) anon495_Else_correct)))))))
(let ((anon493_Else_correct  (and (=> (= (ControlFlow 0 76) (- 0 78)) (HasDirectPerm Result_28Mask this@@55 Iterator_iteratee)) (=> (HasDirectPerm Result_28Mask this@@55 Iterator_iteratee) (and (=> (= (ControlFlow 0 76) (- 0 77)) (HasDirectPerm Result_28Mask (MapType0Select Result_28Heap this@@55 Iterator_iteratee) List_sentinel)) (=> (HasDirectPerm Result_28Mask (MapType0Select Result_28Heap this@@55 Iterator_iteratee) List_sentinel) (=> (= (ControlFlow 0 76) 72) anon293_correct)))))))
(let ((anon492_Then_correct  (=> b_23@104 (and (=> (= (ControlFlow 0 83) (- 0 85)) (HasDirectPerm Result_28Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_28Mask this@@55 Iterator_current) (and (=> (= (ControlFlow 0 83) (- 0 84)) (HasDirectPerm Result_28Mask (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev)) (=> (HasDirectPerm Result_28Mask (MapType0Select Result_28Heap this@@55 Iterator_current) Node_prev) (and (and (=> (= (ControlFlow 0 83) 76) anon493_Else_correct) (=> (= (ControlFlow 0 83) 80) anon494_Then_correct)) (=> (= (ControlFlow 0 83) 82) anon494_Else_correct)))))))))
(let ((anon492_Else_correct  (=> (and (not b_23@104) (= (ControlFlow 0 75) 72)) anon293_correct)))
(let ((anon491_Then_correct  (=> (and b_23@104 b_32@48) (and (=> (= (ControlFlow 0 86) 83) anon492_Then_correct) (=> (= (ControlFlow 0 86) 75) anon492_Else_correct)))))
(let ((anon491_Else_correct  (=> (and (not (and b_23@104 b_32@48)) (= (ControlFlow 0 74) 72)) anon293_correct)))
(let ((anon286_correct  (and (=> (= (ControlFlow 0 87) (- 0 88)) (=> (and b_23@101 b_32@48) (and (= neededTransfer@52 0.0) (= (U_2_real (MapType1Select Used_10Mask@31 null (Node_reverse arg_8@0))) initNeededTransfer@12)))) (=> (=> (and b_23@101 b_32@48) (and (= neededTransfer@52 0.0) (= (U_2_real (MapType1Select Used_10Mask@31 null (Node_reverse arg_8@0))) initNeededTransfer@12))) (=> (and (and (and (= b_41@0  (and b_23@101 b_32@48)) (= b_41@1  (and b_41@0 (state Result_28Heap Result_28Mask)))) (and (= b_41@2  (and b_41@1 (sumMask Result_28Mask Ops_3Mask@45 Used_10Mask@31))) (= b_41@3  (and (and b_41@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_28Heap Ops_3Mask@45)) (IdenticalOnKnownLocations Used_10Heap@0 Result_28Heap Used_10Mask@31))))) (and (and (= b_41@4  (and b_41@3 (state Result_28Heap Result_28Mask))) (= b_23@102  (and b_23@101 b_41@4))) (and (= b_23@103  (and b_23@102 b_32@48)) (= b_23@104  (and b_23@103 (= Used_10Heap@0 Ops_3Heap@9)))))) (and (=> (= (ControlFlow 0 87) 86) anon491_Then_correct) (=> (= (ControlFlow 0 87) 74) anon491_Else_correct)))))))
(let ((anon490_Else_correct  (=> (>= 0.0 takeTransfer@25) (=> (and (= neededTransfer@52 neededTransfer@50) (= Heap@52 Heap@50)) (=> (and (and (= b_32@48 b_32@45) (= Mask@62 Mask@60)) (and (= Used_10Mask@31 Used_10Mask@29) (= (ControlFlow 0 91) 87))) anon286_correct)))))
(let ((anon490_Then_correct  (=> (> takeTransfer@25 0.0) (=> (and (= neededTransfer@51 (- neededTransfer@50 takeTransfer@25)) (= Used_10Mask@30 (MapType1Store Used_10Mask@29 null (Node_reverse arg_8@0) (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@29 null (Node_reverse arg_8@0))) takeTransfer@25))))) (=> (and (and (= b_32@46  (and b_32@45 (state Used_10Heap@0 Used_10Mask@30))) (= TempMask@5 (MapType1Store ZeroMask null (Node_reverse arg_8@0) (real_2_U FullPerm)))) (and (= b_32@47  (and b_32@46 (IdenticalOnKnownLocations Heap@50 Used_10Heap@0 TempMask@5))) (= Mask@61 (MapType1Store Mask@60 null (Node_reverse arg_8@0) (real_2_U (- (U_2_real (MapType1Select Mask@60 null (Node_reverse arg_8@0))) takeTransfer@25)))))) (=> (and (and (and (forall ((o_27 T@U) (f_31 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_31))))
(let ((A@@16 (FieldTypeInv0 (type f_31))))
 (=> (and (and (= (type o_27) RefType) (= (type f_31) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select Heap@50 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) o_27 f_31)) (U_2_bool (MapType1Select (MapType0Select Heap@50 null (|Node_reverse#sm| (MapType0Select Heap@50 (MapType0Select Heap@50 this@@55 Iterator_current) Node_prev))) o_27 f_31)))) (U_2_bool (MapType1Select newPMask@5 o_27 f_31)))))
 :qid |stdinbpl.6031:41|
 :skolemid |116|
 :pattern ( (MapType1Select newPMask@5 o_27 f_31))
)) (= Heap@51 (MapType0Store Heap@50 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) newPMask@5))) (and (= neededTransfer@52 neededTransfer@51) (= Heap@52 Heap@51))) (and (and (= b_32@48 b_32@47) (= Mask@62 Mask@61)) (and (= Used_10Mask@31 Used_10Mask@30) (= (ControlFlow 0 90) 87)))) anon286_correct))))))
(let ((anon489_Else_correct  (=> (and (< maskTransfer@25 neededTransfer@50) (= takeTransfer@25 maskTransfer@25)) (and (=> (= (ControlFlow 0 93) 90) anon490_Then_correct) (=> (= (ControlFlow 0 93) 91) anon490_Else_correct)))))
(let ((anon489_Then_correct  (=> (and (<= neededTransfer@50 maskTransfer@25) (= takeTransfer@25 neededTransfer@50)) (and (=> (= (ControlFlow 0 92) 90) anon490_Then_correct) (=> (= (ControlFlow 0 92) 91) anon490_Else_correct)))))
(let ((anon488_Then_correct  (=> (and (and (and (and b_23@101 b_32@45) true) (> neededTransfer@50 0.0)) (= maskTransfer@25 (U_2_real (MapType1Select Mask@60 null (Node_reverse arg_8@0))))) (and (=> (= (ControlFlow 0 94) 92) anon489_Then_correct) (=> (= (ControlFlow 0 94) 93) anon489_Else_correct)))))
(let ((anon488_Else_correct  (=> (not (and (and (and b_23@101 b_32@45) true) (> neededTransfer@50 0.0))) (=> (and (= neededTransfer@52 neededTransfer@50) (= Heap@52 Heap@50)) (=> (and (and (= b_32@48 b_32@45) (= Mask@62 Mask@60)) (and (= Used_10Mask@31 Used_10Mask@29) (= (ControlFlow 0 89) 87))) anon286_correct)))))
(let ((anon487_Else_correct  (=> (>= 0.0 takeTransfer@24) (=> (and (and (= Ops_3Mask@45 Ops_3Mask@43) (= Used_10Mask@29 Used_10Mask@27)) (and (= b_32@45 b_32@42) (= neededTransfer@50 FullPerm))) (and (=> (= (ControlFlow 0 97) 94) anon488_Then_correct) (=> (= (ControlFlow 0 97) 89) anon488_Else_correct))))))
(let ((anon487_Then_correct  (=> (> takeTransfer@24 0.0) (=> (and (= neededTransfer@49 (- FullPerm takeTransfer@24)) (= Used_10Mask@28 (MapType1Store Used_10Mask@27 null (Node_reverse arg_8@0) (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@27 null (Node_reverse arg_8@0))) takeTransfer@24))))) (=> (and (and (and (= b_32@43  (and b_32@42 (state Used_10Heap@0 Used_10Mask@28))) (= TempMask@4 (MapType1Store ZeroMask null (Node_reverse arg_8@0) (real_2_U FullPerm)))) (and (= b_32@44  (and b_32@43 (IdenticalOnKnownLocations Ops_3Heap@9 Used_10Heap@0 TempMask@4))) (= Ops_3Mask@44 (MapType1Store Ops_3Mask@43 null (Node_reverse arg_8@0) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@43 null (Node_reverse arg_8@0))) takeTransfer@24)))))) (and (and (= Ops_3Mask@45 Ops_3Mask@44) (= Used_10Mask@29 Used_10Mask@28)) (and (= b_32@45 b_32@44) (= neededTransfer@50 neededTransfer@49)))) (and (=> (= (ControlFlow 0 96) 94) anon488_Then_correct) (=> (= (ControlFlow 0 96) 89) anon488_Else_correct)))))))
(let ((anon486_Else_correct  (=> (and (< maskTransfer@24 FullPerm) (= takeTransfer@24 maskTransfer@24)) (and (=> (= (ControlFlow 0 99) 96) anon487_Then_correct) (=> (= (ControlFlow 0 99) 97) anon487_Else_correct)))))
(let ((anon486_Then_correct  (=> (and (<= FullPerm maskTransfer@24) (= takeTransfer@24 FullPerm)) (and (=> (= (ControlFlow 0 98) 96) anon487_Then_correct) (=> (= (ControlFlow 0 98) 97) anon487_Else_correct)))))
(let ((anon485_Then_correct  (=> (and (and (and (and b_23@101 b_32@42) true) (> FullPerm 0.0)) (= maskTransfer@24 (U_2_real (MapType1Select Ops_3Mask@43 null (Node_reverse arg_8@0))))) (and (=> (= (ControlFlow 0 100) 98) anon486_Then_correct) (=> (= (ControlFlow 0 100) 99) anon486_Else_correct)))))
(let ((anon485_Else_correct  (=> (not (and (and (and b_23@101 b_32@42) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@45 Ops_3Mask@43) (= Used_10Mask@29 Used_10Mask@27)) (and (= b_32@45 b_32@42) (= neededTransfer@50 FullPerm))) (and (=> (= (ControlFlow 0 95) 94) anon488_Then_correct) (=> (= (ControlFlow 0 95) 89) anon488_Else_correct))))))
(let ((anon274_correct  (=> (and (= arg_8@0 (MapType0Select Result_27Heap (MapType0Select Result_27Heap this@@55 Iterator_current) Node_prev)) (= initNeededTransfer@12 (+ (U_2_real (MapType1Select Used_10Mask@27 null (Node_reverse arg_8@0))) FullPerm))) (and (=> (= (ControlFlow 0 101) (- 0 102)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 101) 100) anon485_Then_correct) (=> (= (ControlFlow 0 101) 95) anon485_Else_correct)))))))
(let ((anon484_Else_correct  (=> (and (not b_23@101) (= (ControlFlow 0 107) 101)) anon274_correct)))
(let ((anon484_Then_correct  (=> b_23@101 (and (=> (= (ControlFlow 0 104) (- 0 106)) (HasDirectPerm Result_27Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_27Mask this@@55 Iterator_current) (and (=> (= (ControlFlow 0 104) (- 0 105)) (HasDirectPerm Result_27Mask (MapType0Select Result_27Heap this@@55 Iterator_current) Node_prev)) (=> (HasDirectPerm Result_27Mask (MapType0Select Result_27Heap this@@55 Iterator_current) Node_prev) (=> (= (ControlFlow 0 104) 101) anon274_correct))))))))
(let ((anon483_Then_correct  (=> (and b_23@101 b_32@42) (and (=> (= (ControlFlow 0 108) 104) anon484_Then_correct) (=> (= (ControlFlow 0 108) 107) anon484_Else_correct)))))
(let ((anon483_Else_correct  (=> (and (not (and b_23@101 b_32@42)) (= (ControlFlow 0 103) 101)) anon274_correct)))
(let ((anon482_Then_correct  (=> (=> b_23@101 (not (= (MapType0Select Result_27Heap (MapType0Select Result_27Heap this@@55 Iterator_current) Node_prev) null))) (and (=> (= (ControlFlow 0 109) 108) anon483_Then_correct) (=> (= (ControlFlow 0 109) 103) anon483_Else_correct)))))
(let ((anon482_Else_correct  (=> (and (and (and (not (=> b_23@101 (not (= (MapType0Select Result_27Heap (MapType0Select Result_27Heap this@@55 Iterator_current) Node_prev) null)))) (= Used_10Mask@32 Used_10Mask@27)) (and (= b_23@109 b_23@101) (= Mask@63 Mask@60))) (and (and (= b_32@49 b_32@42) (= Heap@53 Heap@50)) (and (= Ops_3Mask@46 Ops_3Mask@43) (= (ControlFlow 0 57) 56)))) anon301_correct)))
(let ((anon270_correct  (=> (and (= b_40@0  (and b_23@100 b_32@42)) (= b_40@1  (and b_40@0 (state Result_27Heap Result_27Mask)))) (=> (and (and (= b_40@2  (and b_40@1 (sumMask Result_27Mask Ops_3Mask@43 Used_10Mask@27))) (= b_40@3  (and (and b_40@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_27Heap Ops_3Mask@43)) (IdenticalOnKnownLocations Used_10Heap@0 Result_27Heap Used_10Mask@27)))) (and (= b_40@4  (and b_40@3 (state Result_27Heap Result_27Mask))) (= b_23@101  (and b_23@100 b_40@4)))) (and (=> (= (ControlFlow 0 110) 109) anon482_Then_correct) (=> (= (ControlFlow 0 110) 57) anon482_Else_correct))))))
(let ((anon269_correct  (and (=> (= (ControlFlow 0 112) (- 0 113)) (=> (and b_23@97 b_32@42) (= (MapType0Select Result_26Heap this@@55 Iterator_current) (MapType0Select Result_26Heap (MapType0Select Result_26Heap this@@55 Iterator_iteratee) List_sentinel)))) (=> (=> (and b_23@97 b_32@42) (= (MapType0Select Result_26Heap this@@55 Iterator_current) (MapType0Select Result_26Heap (MapType0Select Result_26Heap this@@55 Iterator_iteratee) List_sentinel))) (=> (and (and (= b_23@98  (and b_23@97 b_32@42)) (= b_23@99  (and b_23@98 (= Used_10Heap@0 Ops_3Heap@9)))) (and (= b_23@100 b_23@99) (= (ControlFlow 0 112) 110))) anon270_correct)))))
(let ((anon481_Else_correct  (=> (and (not b_23@97) (= (ControlFlow 0 119) 112)) anon269_correct)))
(let ((anon481_Then_correct  (=> b_23@97 (and (=> (= (ControlFlow 0 115) (- 0 118)) (HasDirectPerm Result_26Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_26Mask this@@55 Iterator_current) (and (=> (= (ControlFlow 0 115) (- 0 117)) (HasDirectPerm Result_26Mask this@@55 Iterator_iteratee)) (=> (HasDirectPerm Result_26Mask this@@55 Iterator_iteratee) (and (=> (= (ControlFlow 0 115) (- 0 116)) (HasDirectPerm Result_26Mask (MapType0Select Result_26Heap this@@55 Iterator_iteratee) List_sentinel)) (=> (HasDirectPerm Result_26Mask (MapType0Select Result_26Heap this@@55 Iterator_iteratee) List_sentinel) (=> (= (ControlFlow 0 115) 112) anon269_correct))))))))))
(let ((anon480_Then_correct  (=> (and b_23@97 b_32@42) (and (=> (= (ControlFlow 0 120) 115) anon481_Then_correct) (=> (= (ControlFlow 0 120) 119) anon481_Else_correct)))))
(let ((anon480_Else_correct  (=> (and (not (and b_23@97 b_32@42)) (= (ControlFlow 0 114) 112)) anon269_correct)))
(let ((anon479_Then_correct  (=> (=> b_23@97 (= (MapType0Select Result_26Heap (MapType0Select Result_26Heap this@@55 Iterator_current) Node_prev) null)) (and (=> (= (ControlFlow 0 121) 120) anon480_Then_correct) (=> (= (ControlFlow 0 121) 114) anon480_Else_correct)))))
(let ((anon479_Else_correct  (=> (not (=> b_23@97 (= (MapType0Select Result_26Heap (MapType0Select Result_26Heap this@@55 Iterator_current) Node_prev) null))) (=> (and (= b_23@100 b_23@97) (= (ControlFlow 0 111) 110)) anon270_correct))))
(let ((anon265_correct  (and (=> (= (ControlFlow 0 122) (- 0 123)) (=> (and b_23@94 b_32@42) (and (= neededTransfer@48 0.0) (= (U_2_real (MapType1Select Used_10Mask@27 rcvLocal@6 Node_prev)) initNeededTransfer@11)))) (=> (=> (and b_23@94 b_32@42) (and (= neededTransfer@48 0.0) (= (U_2_real (MapType1Select Used_10Mask@27 rcvLocal@6 Node_prev)) initNeededTransfer@11))) (=> (and (and (and (= b_39@0  (and b_23@94 b_32@42)) (= b_39@1  (and b_39@0 (state Result_26Heap Result_26Mask)))) (and (= b_39@2  (and b_39@1 (sumMask Result_26Mask Ops_3Mask@43 Used_10Mask@27))) (= b_39@3  (and (and b_39@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_26Heap Ops_3Mask@43)) (IdenticalOnKnownLocations Used_10Heap@0 Result_26Heap Used_10Mask@27))))) (and (and (= b_39@4  (and b_39@3 (state Result_26Heap Result_26Mask))) (= b_23@95  (and b_23@94 b_39@4))) (and (= b_23@96  (and b_23@95 b_32@42)) (= b_23@97  (and b_23@96 (= Used_10Heap@0 Ops_3Heap@9)))))) (and (=> (= (ControlFlow 0 122) 121) anon479_Then_correct) (=> (= (ControlFlow 0 122) 111) anon479_Else_correct)))))))
(let ((anon478_Else_correct  (=> (>= 0.0 takeTransfer@23) (=> (and (= neededTransfer@48 neededTransfer@46) (= b_32@42 b_32@39)) (=> (and (and (= Mask@60 Mask@58) (= Used_10Mask@27 Used_10Mask@25)) (and (= Heap@50 Heap@48) (= (ControlFlow 0 126) 122))) anon265_correct)))))
(let ((anon478_Then_correct  (=> (> takeTransfer@23 0.0) (=> (and (and (= neededTransfer@47 (- neededTransfer@46 takeTransfer@23)) (= Used_10Mask@26 (MapType1Store Used_10Mask@25 rcvLocal@6 Node_prev (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@25 rcvLocal@6 Node_prev)) takeTransfer@23))))) (and (= b_32@40  (and b_32@39 (state Used_10Heap@0 Used_10Mask@26))) (= b_32@41  (and b_32@40 (= (MapType0Select Heap@48 rcvLocal@6 Node_prev) (MapType0Select Used_10Heap@0 rcvLocal@6 Node_prev)))))) (=> (and (and (and (= Mask@59 (MapType1Store Mask@58 rcvLocal@6 Node_prev (real_2_U (- (U_2_real (MapType1Select Mask@58 rcvLocal@6 Node_prev)) takeTransfer@23)))) (= Heap@49 (MapType0Store Heap@48 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) (MapType1Store (MapType0Select Heap@48 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) (MapType0Select Heap@48 this@@55 Iterator_current) Node_prev (bool_2_U true))))) (and (= neededTransfer@48 neededTransfer@47) (= b_32@42 b_32@41))) (and (and (= Mask@60 Mask@59) (= Used_10Mask@27 Used_10Mask@26)) (and (= Heap@50 Heap@49) (= (ControlFlow 0 125) 122)))) anon265_correct)))))
(let ((anon477_Else_correct  (=> (and (< maskTransfer@23 neededTransfer@46) (= takeTransfer@23 maskTransfer@23)) (and (=> (= (ControlFlow 0 128) 125) anon478_Then_correct) (=> (= (ControlFlow 0 128) 126) anon478_Else_correct)))))
(let ((anon477_Then_correct  (=> (and (<= neededTransfer@46 maskTransfer@23) (= takeTransfer@23 neededTransfer@46)) (and (=> (= (ControlFlow 0 127) 125) anon478_Then_correct) (=> (= (ControlFlow 0 127) 126) anon478_Else_correct)))))
(let ((anon476_Then_correct  (=> (and (and (and (and b_23@94 b_32@39) true) (> neededTransfer@46 0.0)) (= maskTransfer@23 (U_2_real (MapType1Select Mask@58 rcvLocal@6 Node_prev)))) (and (=> (= (ControlFlow 0 129) 127) anon477_Then_correct) (=> (= (ControlFlow 0 129) 128) anon477_Else_correct)))))
(let ((anon476_Else_correct  (=> (not (and (and (and b_23@94 b_32@39) true) (> neededTransfer@46 0.0))) (=> (and (= neededTransfer@48 neededTransfer@46) (= b_32@42 b_32@39)) (=> (and (and (= Mask@60 Mask@58) (= Used_10Mask@27 Used_10Mask@25)) (and (= Heap@50 Heap@48) (= (ControlFlow 0 124) 122))) anon265_correct)))))
(let ((anon475_Else_correct  (=> (>= 0.0 takeTransfer@22) (=> (and (and (= Used_10Mask@25 Used_10Mask@23) (= b_32@39 b_32@36)) (and (= neededTransfer@46 FullPerm) (= Ops_3Mask@43 Ops_3Mask@41))) (and (=> (= (ControlFlow 0 132) 129) anon476_Then_correct) (=> (= (ControlFlow 0 132) 124) anon476_Else_correct))))))
(let ((anon475_Then_correct  (=> (and (> takeTransfer@22 0.0) (= neededTransfer@45 (- FullPerm takeTransfer@22))) (=> (and (and (and (= Used_10Mask@24 (MapType1Store Used_10Mask@23 rcvLocal@6 Node_prev (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@23 rcvLocal@6 Node_prev)) takeTransfer@22)))) (= b_32@37  (and b_32@36 (state Used_10Heap@0 Used_10Mask@24)))) (and (= b_32@38  (and b_32@37 (= (MapType0Select Ops_3Heap@9 rcvLocal@6 Node_prev) (MapType0Select Used_10Heap@0 rcvLocal@6 Node_prev)))) (= Ops_3Mask@42 (MapType1Store Ops_3Mask@41 rcvLocal@6 Node_prev (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@41 rcvLocal@6 Node_prev)) takeTransfer@22)))))) (and (and (= Used_10Mask@25 Used_10Mask@24) (= b_32@39 b_32@38)) (and (= neededTransfer@46 neededTransfer@45) (= Ops_3Mask@43 Ops_3Mask@42)))) (and (=> (= (ControlFlow 0 131) 129) anon476_Then_correct) (=> (= (ControlFlow 0 131) 124) anon476_Else_correct))))))
(let ((anon474_Else_correct  (=> (and (< maskTransfer@22 FullPerm) (= takeTransfer@22 maskTransfer@22)) (and (=> (= (ControlFlow 0 134) 131) anon475_Then_correct) (=> (= (ControlFlow 0 134) 132) anon475_Else_correct)))))
(let ((anon474_Then_correct  (=> (and (<= FullPerm maskTransfer@22) (= takeTransfer@22 FullPerm)) (and (=> (= (ControlFlow 0 133) 131) anon475_Then_correct) (=> (= (ControlFlow 0 133) 132) anon475_Else_correct)))))
(let ((anon473_Then_correct  (=> (and (and (and (and b_23@94 b_32@36) true) (> FullPerm 0.0)) (= maskTransfer@22 (U_2_real (MapType1Select Ops_3Mask@41 rcvLocal@6 Node_prev)))) (and (=> (= (ControlFlow 0 135) 133) anon474_Then_correct) (=> (= (ControlFlow 0 135) 134) anon474_Else_correct)))))
(let ((anon473_Else_correct  (=> (not (and (and (and b_23@94 b_32@36) true) (> FullPerm 0.0))) (=> (and (and (= Used_10Mask@25 Used_10Mask@23) (= b_32@39 b_32@36)) (and (= neededTransfer@46 FullPerm) (= Ops_3Mask@43 Ops_3Mask@41))) (and (=> (= (ControlFlow 0 130) 129) anon476_Then_correct) (=> (= (ControlFlow 0 130) 124) anon476_Else_correct))))))
(let ((anon253_correct  (=> (and (= rcvLocal@6 (MapType0Select Result_25Heap this@@55 Iterator_current)) (= initNeededTransfer@11 (+ (U_2_real (MapType1Select Used_10Mask@23 rcvLocal@6 Node_prev)) FullPerm))) (and (=> (= (ControlFlow 0 136) (- 0 137)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 136) 135) anon473_Then_correct) (=> (= (ControlFlow 0 136) 130) anon473_Else_correct)))))))
(let ((anon472_Else_correct  (=> (and (not b_23@94) (= (ControlFlow 0 141) 136)) anon253_correct)))
(let ((anon472_Then_correct  (=> b_23@94 (and (=> (= (ControlFlow 0 139) (- 0 140)) (HasDirectPerm Result_25Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_25Mask this@@55 Iterator_current) (=> (= (ControlFlow 0 139) 136) anon253_correct))))))
(let ((anon471_Then_correct  (=> (and b_23@94 b_32@36) (and (=> (= (ControlFlow 0 142) 139) anon472_Then_correct) (=> (= (ControlFlow 0 142) 141) anon472_Else_correct)))))
(let ((anon471_Else_correct  (=> (and (not (and b_23@94 b_32@36)) (= (ControlFlow 0 138) 136)) anon253_correct)))
(let ((anon250_correct  (and (=> (= (ControlFlow 0 143) (- 0 144)) (=> (and b_23@91 b_32@36) (and (= neededTransfer@44 0.0) (= (U_2_real (MapType1Select Used_10Mask@23 rcvLocal@5 Node_next)) initNeededTransfer@10)))) (=> (=> (and b_23@91 b_32@36) (and (= neededTransfer@44 0.0) (= (U_2_real (MapType1Select Used_10Mask@23 rcvLocal@5 Node_next)) initNeededTransfer@10))) (=> (and (and (and (= b_38@0  (and b_23@91 b_32@36)) (= b_38@1  (and b_38@0 (state Result_25Heap Result_25Mask)))) (and (= b_38@2  (and b_38@1 (sumMask Result_25Mask Ops_3Mask@41 Used_10Mask@23))) (= b_38@3  (and (and b_38@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_25Heap Ops_3Mask@41)) (IdenticalOnKnownLocations Used_10Heap@0 Result_25Heap Used_10Mask@23))))) (and (and (= b_38@4  (and b_38@3 (state Result_25Heap Result_25Mask))) (= b_23@92  (and b_23@91 b_38@4))) (and (= b_23@93  (and b_23@92 b_32@36)) (= b_23@94  (and b_23@93 (= Used_10Heap@0 Ops_3Heap@9)))))) (and (=> (= (ControlFlow 0 143) 142) anon471_Then_correct) (=> (= (ControlFlow 0 143) 138) anon471_Else_correct)))))))
(let ((anon470_Else_correct  (=> (>= 0.0 takeTransfer@21) (=> (and (= Heap@48 Heap@46) (= Mask@58 Mask@56)) (=> (and (and (= neededTransfer@44 neededTransfer@42) (= b_32@36 b_32@33)) (and (= Used_10Mask@23 Used_10Mask@21) (= (ControlFlow 0 147) 143))) anon250_correct)))))
(let ((anon470_Then_correct  (=> (> takeTransfer@21 0.0) (=> (and (and (= neededTransfer@43 (- neededTransfer@42 takeTransfer@21)) (= Used_10Mask@22 (MapType1Store Used_10Mask@21 rcvLocal@5 Node_next (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@21 rcvLocal@5 Node_next)) takeTransfer@21))))) (and (= b_32@34  (and b_32@33 (state Used_10Heap@0 Used_10Mask@22))) (= b_32@35  (and b_32@34 (= (MapType0Select Heap@46 rcvLocal@5 Node_next) (MapType0Select Used_10Heap@0 rcvLocal@5 Node_next)))))) (=> (and (and (and (= Mask@57 (MapType1Store Mask@56 rcvLocal@5 Node_next (real_2_U (- (U_2_real (MapType1Select Mask@56 rcvLocal@5 Node_next)) takeTransfer@21)))) (= Heap@47 (MapType0Store Heap@46 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) (MapType1Store (MapType0Select Heap@46 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) (MapType0Select Heap@46 this@@55 Iterator_current) Node_next (bool_2_U true))))) (and (= Heap@48 Heap@47) (= Mask@58 Mask@57))) (and (and (= neededTransfer@44 neededTransfer@43) (= b_32@36 b_32@35)) (and (= Used_10Mask@23 Used_10Mask@22) (= (ControlFlow 0 146) 143)))) anon250_correct)))))
(let ((anon469_Else_correct  (=> (and (< maskTransfer@21 neededTransfer@42) (= takeTransfer@21 maskTransfer@21)) (and (=> (= (ControlFlow 0 149) 146) anon470_Then_correct) (=> (= (ControlFlow 0 149) 147) anon470_Else_correct)))))
(let ((anon469_Then_correct  (=> (and (<= neededTransfer@42 maskTransfer@21) (= takeTransfer@21 neededTransfer@42)) (and (=> (= (ControlFlow 0 148) 146) anon470_Then_correct) (=> (= (ControlFlow 0 148) 147) anon470_Else_correct)))))
(let ((anon468_Then_correct  (=> (and (and (and (and b_23@91 b_32@33) true) (> neededTransfer@42 0.0)) (= maskTransfer@21 (U_2_real (MapType1Select Mask@56 rcvLocal@5 Node_next)))) (and (=> (= (ControlFlow 0 150) 148) anon469_Then_correct) (=> (= (ControlFlow 0 150) 149) anon469_Else_correct)))))
(let ((anon468_Else_correct  (=> (not (and (and (and b_23@91 b_32@33) true) (> neededTransfer@42 0.0))) (=> (and (= Heap@48 Heap@46) (= Mask@58 Mask@56)) (=> (and (and (= neededTransfer@44 neededTransfer@42) (= b_32@36 b_32@33)) (and (= Used_10Mask@23 Used_10Mask@21) (= (ControlFlow 0 145) 143))) anon250_correct)))))
(let ((anon467_Else_correct  (=> (>= 0.0 takeTransfer@20) (=> (and (and (= Used_10Mask@21 Used_10Mask@19) (= Ops_3Mask@41 Ops_3Mask@39)) (and (= b_32@33 b_32@30) (= neededTransfer@42 FullPerm))) (and (=> (= (ControlFlow 0 153) 150) anon468_Then_correct) (=> (= (ControlFlow 0 153) 145) anon468_Else_correct))))))
(let ((anon467_Then_correct  (=> (and (> takeTransfer@20 0.0) (= neededTransfer@41 (- FullPerm takeTransfer@20))) (=> (and (and (and (= Used_10Mask@20 (MapType1Store Used_10Mask@19 rcvLocal@5 Node_next (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@19 rcvLocal@5 Node_next)) takeTransfer@20)))) (= b_32@31  (and b_32@30 (state Used_10Heap@0 Used_10Mask@20)))) (and (= b_32@32  (and b_32@31 (= (MapType0Select Ops_3Heap@9 rcvLocal@5 Node_next) (MapType0Select Used_10Heap@0 rcvLocal@5 Node_next)))) (= Ops_3Mask@40 (MapType1Store Ops_3Mask@39 rcvLocal@5 Node_next (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@39 rcvLocal@5 Node_next)) takeTransfer@20)))))) (and (and (= Used_10Mask@21 Used_10Mask@20) (= Ops_3Mask@41 Ops_3Mask@40)) (and (= b_32@33 b_32@32) (= neededTransfer@42 neededTransfer@41)))) (and (=> (= (ControlFlow 0 152) 150) anon468_Then_correct) (=> (= (ControlFlow 0 152) 145) anon468_Else_correct))))))
(let ((anon466_Else_correct  (=> (and (< maskTransfer@20 FullPerm) (= takeTransfer@20 maskTransfer@20)) (and (=> (= (ControlFlow 0 155) 152) anon467_Then_correct) (=> (= (ControlFlow 0 155) 153) anon467_Else_correct)))))
(let ((anon466_Then_correct  (=> (and (<= FullPerm maskTransfer@20) (= takeTransfer@20 FullPerm)) (and (=> (= (ControlFlow 0 154) 152) anon467_Then_correct) (=> (= (ControlFlow 0 154) 153) anon467_Else_correct)))))
(let ((anon465_Then_correct  (=> (and (and (and (and b_23@91 b_32@30) true) (> FullPerm 0.0)) (= maskTransfer@20 (U_2_real (MapType1Select Ops_3Mask@39 rcvLocal@5 Node_next)))) (and (=> (= (ControlFlow 0 156) 154) anon466_Then_correct) (=> (= (ControlFlow 0 156) 155) anon466_Else_correct)))))
(let ((anon465_Else_correct  (=> (not (and (and (and b_23@91 b_32@30) true) (> FullPerm 0.0))) (=> (and (and (= Used_10Mask@21 Used_10Mask@19) (= Ops_3Mask@41 Ops_3Mask@39)) (and (= b_32@33 b_32@30) (= neededTransfer@42 FullPerm))) (and (=> (= (ControlFlow 0 151) 150) anon468_Then_correct) (=> (= (ControlFlow 0 151) 145) anon468_Else_correct))))))
(let ((anon238_correct  (=> (and (= rcvLocal@5 (MapType0Select Result_24Heap this@@55 Iterator_current)) (= initNeededTransfer@10 (+ (U_2_real (MapType1Select Used_10Mask@19 rcvLocal@5 Node_next)) FullPerm))) (and (=> (= (ControlFlow 0 157) (- 0 158)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 157) 156) anon465_Then_correct) (=> (= (ControlFlow 0 157) 151) anon465_Else_correct)))))))
(let ((anon464_Else_correct  (=> (and (not b_23@91) (= (ControlFlow 0 162) 157)) anon238_correct)))
(let ((anon464_Then_correct  (=> b_23@91 (and (=> (= (ControlFlow 0 160) (- 0 161)) (HasDirectPerm Result_24Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_24Mask this@@55 Iterator_current) (=> (= (ControlFlow 0 160) 157) anon238_correct))))))
(let ((anon463_Then_correct  (=> (and b_23@91 b_32@30) (and (=> (= (ControlFlow 0 163) 160) anon464_Then_correct) (=> (= (ControlFlow 0 163) 162) anon464_Else_correct)))))
(let ((anon463_Else_correct  (=> (and (not (and b_23@91 b_32@30)) (= (ControlFlow 0 159) 157)) anon238_correct)))
(let ((anon235_correct  (and (=> (= (ControlFlow 0 164) (- 0 165)) (=> (and b_23@88 b_32@30) (and (= neededTransfer@40 0.0) (= (U_2_real (MapType1Select Used_10Mask@19 rcvLocal@4 Node_val)) initNeededTransfer@9)))) (=> (=> (and b_23@88 b_32@30) (and (= neededTransfer@40 0.0) (= (U_2_real (MapType1Select Used_10Mask@19 rcvLocal@4 Node_val)) initNeededTransfer@9))) (=> (and (and (and (= b_37@0  (and b_23@88 b_32@30)) (= b_37@1  (and b_37@0 (state Result_24Heap Result_24Mask)))) (and (= b_37@2  (and b_37@1 (sumMask Result_24Mask Ops_3Mask@39 Used_10Mask@19))) (= b_37@3  (and (and b_37@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_24Heap Ops_3Mask@39)) (IdenticalOnKnownLocations Used_10Heap@0 Result_24Heap Used_10Mask@19))))) (and (and (= b_37@4  (and b_37@3 (state Result_24Heap Result_24Mask))) (= b_23@89  (and b_23@88 b_37@4))) (and (= b_23@90  (and b_23@89 b_32@30)) (= b_23@91  (and b_23@90 (= Used_10Heap@0 Ops_3Heap@9)))))) (and (=> (= (ControlFlow 0 164) 163) anon463_Then_correct) (=> (= (ControlFlow 0 164) 159) anon463_Else_correct)))))))
(let ((anon462_Else_correct  (=> (>= 0.0 takeTransfer@19) (=> (and (= neededTransfer@40 neededTransfer@38) (= b_32@30 b_32@27)) (=> (and (and (= Used_10Mask@19 Used_10Mask@17) (= Mask@56 Mask@54)) (and (= Heap@46 Heap@44) (= (ControlFlow 0 168) 164))) anon235_correct)))))
(let ((anon462_Then_correct  (=> (> takeTransfer@19 0.0) (=> (and (and (= neededTransfer@39 (- neededTransfer@38 takeTransfer@19)) (= Used_10Mask@18 (MapType1Store Used_10Mask@17 rcvLocal@4 Node_val (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@17 rcvLocal@4 Node_val)) takeTransfer@19))))) (and (= b_32@28  (and b_32@27 (state Used_10Heap@0 Used_10Mask@18))) (= b_32@29  (and b_32@28 (= (U_2_int (MapType0Select Heap@44 rcvLocal@4 Node_val)) (U_2_int (MapType0Select Used_10Heap@0 rcvLocal@4 Node_val))))))) (=> (and (and (and (= Mask@55 (MapType1Store Mask@54 rcvLocal@4 Node_val (real_2_U (- (U_2_real (MapType1Select Mask@54 rcvLocal@4 Node_val)) takeTransfer@19)))) (= Heap@45 (MapType0Store Heap@44 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) (MapType1Store (MapType0Select Heap@44 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) (MapType0Select Heap@44 this@@55 Iterator_current) Node_val (bool_2_U true))))) (and (= neededTransfer@40 neededTransfer@39) (= b_32@30 b_32@29))) (and (and (= Used_10Mask@19 Used_10Mask@18) (= Mask@56 Mask@55)) (and (= Heap@46 Heap@45) (= (ControlFlow 0 167) 164)))) anon235_correct)))))
(let ((anon461_Else_correct  (=> (and (< maskTransfer@19 neededTransfer@38) (= takeTransfer@19 maskTransfer@19)) (and (=> (= (ControlFlow 0 170) 167) anon462_Then_correct) (=> (= (ControlFlow 0 170) 168) anon462_Else_correct)))))
(let ((anon461_Then_correct  (=> (and (<= neededTransfer@38 maskTransfer@19) (= takeTransfer@19 neededTransfer@38)) (and (=> (= (ControlFlow 0 169) 167) anon462_Then_correct) (=> (= (ControlFlow 0 169) 168) anon462_Else_correct)))))
(let ((anon460_Then_correct  (=> (and (and (and (and b_23@88 b_32@27) true) (> neededTransfer@38 0.0)) (= maskTransfer@19 (U_2_real (MapType1Select Mask@54 rcvLocal@4 Node_val)))) (and (=> (= (ControlFlow 0 171) 169) anon461_Then_correct) (=> (= (ControlFlow 0 171) 170) anon461_Else_correct)))))
(let ((anon460_Else_correct  (=> (not (and (and (and b_23@88 b_32@27) true) (> neededTransfer@38 0.0))) (=> (and (= neededTransfer@40 neededTransfer@38) (= b_32@30 b_32@27)) (=> (and (and (= Used_10Mask@19 Used_10Mask@17) (= Mask@56 Mask@54)) (and (= Heap@46 Heap@44) (= (ControlFlow 0 166) 164))) anon235_correct)))))
(let ((anon459_Else_correct  (=> (>= 0.0 takeTransfer@18) (=> (and (and (= Ops_3Mask@39 Ops_3Mask@37) (= Used_10Mask@17 Used_10Mask@15)) (and (= b_32@27 b_32@24) (= neededTransfer@38 FullPerm))) (and (=> (= (ControlFlow 0 174) 171) anon460_Then_correct) (=> (= (ControlFlow 0 174) 166) anon460_Else_correct))))))
(let ((anon459_Then_correct  (=> (and (> takeTransfer@18 0.0) (= neededTransfer@37 (- FullPerm takeTransfer@18))) (=> (and (and (and (= Used_10Mask@16 (MapType1Store Used_10Mask@15 rcvLocal@4 Node_val (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@15 rcvLocal@4 Node_val)) takeTransfer@18)))) (= b_32@25  (and b_32@24 (state Used_10Heap@0 Used_10Mask@16)))) (and (= b_32@26  (and b_32@25 (= (U_2_int (MapType0Select Ops_3Heap@9 rcvLocal@4 Node_val)) (U_2_int (MapType0Select Used_10Heap@0 rcvLocal@4 Node_val))))) (= Ops_3Mask@38 (MapType1Store Ops_3Mask@37 rcvLocal@4 Node_val (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@37 rcvLocal@4 Node_val)) takeTransfer@18)))))) (and (and (= Ops_3Mask@39 Ops_3Mask@38) (= Used_10Mask@17 Used_10Mask@16)) (and (= b_32@27 b_32@26) (= neededTransfer@38 neededTransfer@37)))) (and (=> (= (ControlFlow 0 173) 171) anon460_Then_correct) (=> (= (ControlFlow 0 173) 166) anon460_Else_correct))))))
(let ((anon458_Else_correct  (=> (and (< maskTransfer@18 FullPerm) (= takeTransfer@18 maskTransfer@18)) (and (=> (= (ControlFlow 0 176) 173) anon459_Then_correct) (=> (= (ControlFlow 0 176) 174) anon459_Else_correct)))))
(let ((anon458_Then_correct  (=> (and (<= FullPerm maskTransfer@18) (= takeTransfer@18 FullPerm)) (and (=> (= (ControlFlow 0 175) 173) anon459_Then_correct) (=> (= (ControlFlow 0 175) 174) anon459_Else_correct)))))
(let ((anon457_Then_correct  (=> (and (and (and (and b_23@88 b_32@24) true) (> FullPerm 0.0)) (= maskTransfer@18 (U_2_real (MapType1Select Ops_3Mask@37 rcvLocal@4 Node_val)))) (and (=> (= (ControlFlow 0 177) 175) anon458_Then_correct) (=> (= (ControlFlow 0 177) 176) anon458_Else_correct)))))
(let ((anon457_Else_correct  (=> (not (and (and (and b_23@88 b_32@24) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@39 Ops_3Mask@37) (= Used_10Mask@17 Used_10Mask@15)) (and (= b_32@27 b_32@24) (= neededTransfer@38 FullPerm))) (and (=> (= (ControlFlow 0 172) 171) anon460_Then_correct) (=> (= (ControlFlow 0 172) 166) anon460_Else_correct))))))
(let ((anon223_correct  (=> (and (= rcvLocal@4 (MapType0Select Result_23Heap this@@55 Iterator_current)) (= initNeededTransfer@9 (+ (U_2_real (MapType1Select Used_10Mask@15 rcvLocal@4 Node_val)) FullPerm))) (and (=> (= (ControlFlow 0 178) (- 0 179)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 178) 177) anon457_Then_correct) (=> (= (ControlFlow 0 178) 172) anon457_Else_correct)))))))
(let ((anon456_Else_correct  (=> (and (not b_23@88) (= (ControlFlow 0 183) 178)) anon223_correct)))
(let ((anon456_Then_correct  (=> b_23@88 (and (=> (= (ControlFlow 0 181) (- 0 182)) (HasDirectPerm Result_23Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_23Mask this@@55 Iterator_current) (=> (= (ControlFlow 0 181) 178) anon223_correct))))))
(let ((anon455_Then_correct  (=> (and b_23@88 b_32@24) (and (=> (= (ControlFlow 0 184) 181) anon456_Then_correct) (=> (= (ControlFlow 0 184) 183) anon456_Else_correct)))))
(let ((anon455_Else_correct  (=> (and (not (and b_23@88 b_32@24)) (= (ControlFlow 0 180) 178)) anon223_correct)))
(let ((anon220_correct  (and (=> (= (ControlFlow 0 185) (- 0 186)) (=> (and b_23@86 b_32@24) (not (= (MapType0Select Result_23Heap this@@55 Iterator_current) null)))) (=> (=> (and b_23@86 b_32@24) (not (= (MapType0Select Result_23Heap this@@55 Iterator_current) null))) (=> (and (= b_23@87  (and b_23@86 b_32@24)) (= b_23@88  (and b_23@87 (= Used_10Heap@0 Ops_3Heap@9)))) (and (=> (= (ControlFlow 0 185) 184) anon455_Then_correct) (=> (= (ControlFlow 0 185) 180) anon455_Else_correct)))))))
(let ((anon454_Else_correct  (=> (and (not b_23@86) (= (ControlFlow 0 190) 185)) anon220_correct)))
(let ((anon454_Then_correct  (=> b_23@86 (and (=> (= (ControlFlow 0 188) (- 0 189)) (HasDirectPerm Result_23Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_23Mask this@@55 Iterator_current) (=> (= (ControlFlow 0 188) 185) anon220_correct))))))
(let ((anon453_Then_correct  (=> (and b_23@86 b_32@24) (and (=> (= (ControlFlow 0 191) 188) anon454_Then_correct) (=> (= (ControlFlow 0 191) 190) anon454_Else_correct)))))
(let ((anon453_Else_correct  (=> (and (not (and b_23@86 b_32@24)) (= (ControlFlow 0 187) 185)) anon220_correct)))
(let ((anon217_correct  (and (=> (= (ControlFlow 0 192) (- 0 193)) (=> (and b_23@83 b_32@24) (and (= neededTransfer@36 0.0) (= (U_2_real (MapType1Select Used_10Mask@15 this@@55 Iterator_last)) initNeededTransfer@8)))) (=> (=> (and b_23@83 b_32@24) (and (= neededTransfer@36 0.0) (= (U_2_real (MapType1Select Used_10Mask@15 this@@55 Iterator_last)) initNeededTransfer@8))) (=> (and (and (and (= b_36@0  (and b_23@83 b_32@24)) (= b_36@1  (and b_36@0 (state Result_23Heap Result_23Mask)))) (and (= b_36@2  (and b_36@1 (sumMask Result_23Mask Ops_3Mask@37 Used_10Mask@15))) (= b_36@3  (and (and b_36@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_23Heap Ops_3Mask@37)) (IdenticalOnKnownLocations Used_10Heap@0 Result_23Heap Used_10Mask@15))))) (and (and (= b_36@4  (and b_36@3 (state Result_23Heap Result_23Mask))) (= b_23@84  (and b_23@83 b_36@4))) (and (= b_23@85  (and b_23@84 b_32@24)) (= b_23@86  (and b_23@85 (= Used_10Heap@0 Ops_3Heap@9)))))) (and (=> (= (ControlFlow 0 192) 191) anon453_Then_correct) (=> (= (ControlFlow 0 192) 187) anon453_Else_correct)))))))
(let ((anon452_Else_correct  (=> (>= 0.0 takeTransfer@17) (=> (and (= Heap@44 Heap@42) (= Mask@54 Mask@52)) (=> (and (and (= neededTransfer@36 neededTransfer@34) (= b_32@24 b_32@21)) (and (= Used_10Mask@15 Used_10Mask@13) (= (ControlFlow 0 196) 192))) anon217_correct)))))
(let ((anon452_Then_correct  (=> (> takeTransfer@17 0.0) (=> (and (and (= neededTransfer@35 (- neededTransfer@34 takeTransfer@17)) (= Used_10Mask@14 (MapType1Store Used_10Mask@13 this@@55 Iterator_last (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@13 this@@55 Iterator_last)) takeTransfer@17))))) (and (= b_32@22  (and b_32@21 (state Used_10Heap@0 Used_10Mask@14))) (= b_32@23  (and b_32@22 (= (MapType0Select Heap@42 this@@55 Iterator_last) (MapType0Select Used_10Heap@0 this@@55 Iterator_last)))))) (=> (and (and (and (= Mask@53 (MapType1Store Mask@52 this@@55 Iterator_last (real_2_U (- (U_2_real (MapType1Select Mask@52 this@@55 Iterator_last)) takeTransfer@17)))) (= Heap@43 (MapType0Store Heap@42 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) (MapType1Store (MapType0Select Heap@42 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) this@@55 Iterator_last (bool_2_U true))))) (and (= Heap@44 Heap@43) (= Mask@54 Mask@53))) (and (and (= neededTransfer@36 neededTransfer@35) (= b_32@24 b_32@23)) (and (= Used_10Mask@15 Used_10Mask@14) (= (ControlFlow 0 195) 192)))) anon217_correct)))))
(let ((anon451_Else_correct  (=> (and (< maskTransfer@17 neededTransfer@34) (= takeTransfer@17 maskTransfer@17)) (and (=> (= (ControlFlow 0 198) 195) anon452_Then_correct) (=> (= (ControlFlow 0 198) 196) anon452_Else_correct)))))
(let ((anon451_Then_correct  (=> (and (<= neededTransfer@34 maskTransfer@17) (= takeTransfer@17 neededTransfer@34)) (and (=> (= (ControlFlow 0 197) 195) anon452_Then_correct) (=> (= (ControlFlow 0 197) 196) anon452_Else_correct)))))
(let ((anon450_Then_correct  (=> (and (and (and (and b_23@83 b_32@21) true) (> neededTransfer@34 0.0)) (= maskTransfer@17 (U_2_real (MapType1Select Mask@52 this@@55 Iterator_last)))) (and (=> (= (ControlFlow 0 199) 197) anon451_Then_correct) (=> (= (ControlFlow 0 199) 198) anon451_Else_correct)))))
(let ((anon450_Else_correct  (=> (not (and (and (and b_23@83 b_32@21) true) (> neededTransfer@34 0.0))) (=> (and (= Heap@44 Heap@42) (= Mask@54 Mask@52)) (=> (and (and (= neededTransfer@36 neededTransfer@34) (= b_32@24 b_32@21)) (and (= Used_10Mask@15 Used_10Mask@13) (= (ControlFlow 0 194) 192))) anon217_correct)))))
(let ((anon449_Else_correct  (=> (>= 0.0 takeTransfer@16) (=> (and (and (= Used_10Mask@13 Used_10Mask@11) (= b_32@21 b_32@18)) (and (= neededTransfer@34 FullPerm) (= Ops_3Mask@37 Ops_3Mask@35))) (and (=> (= (ControlFlow 0 202) 199) anon450_Then_correct) (=> (= (ControlFlow 0 202) 194) anon450_Else_correct))))))
(let ((anon449_Then_correct  (=> (and (> takeTransfer@16 0.0) (= neededTransfer@33 (- FullPerm takeTransfer@16))) (=> (and (and (and (= Used_10Mask@12 (MapType1Store Used_10Mask@11 this@@55 Iterator_last (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@11 this@@55 Iterator_last)) takeTransfer@16)))) (= b_32@19  (and b_32@18 (state Used_10Heap@0 Used_10Mask@12)))) (and (= b_32@20  (and b_32@19 (= (MapType0Select Ops_3Heap@9 this@@55 Iterator_last) (MapType0Select Used_10Heap@0 this@@55 Iterator_last)))) (= Ops_3Mask@36 (MapType1Store Ops_3Mask@35 this@@55 Iterator_last (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@35 this@@55 Iterator_last)) takeTransfer@16)))))) (and (and (= Used_10Mask@13 Used_10Mask@12) (= b_32@21 b_32@20)) (and (= neededTransfer@34 neededTransfer@33) (= Ops_3Mask@37 Ops_3Mask@36)))) (and (=> (= (ControlFlow 0 201) 199) anon450_Then_correct) (=> (= (ControlFlow 0 201) 194) anon450_Else_correct))))))
(let ((anon448_Else_correct  (=> (and (< maskTransfer@16 FullPerm) (= takeTransfer@16 maskTransfer@16)) (and (=> (= (ControlFlow 0 204) 201) anon449_Then_correct) (=> (= (ControlFlow 0 204) 202) anon449_Else_correct)))))
(let ((anon448_Then_correct  (=> (and (<= FullPerm maskTransfer@16) (= takeTransfer@16 FullPerm)) (and (=> (= (ControlFlow 0 203) 201) anon449_Then_correct) (=> (= (ControlFlow 0 203) 202) anon449_Else_correct)))))
(let ((anon447_Then_correct  (=> (and (and (and (and b_23@83 b_32@18) true) (> FullPerm 0.0)) (= maskTransfer@16 (U_2_real (MapType1Select Ops_3Mask@35 this@@55 Iterator_last)))) (and (=> (= (ControlFlow 0 205) 203) anon448_Then_correct) (=> (= (ControlFlow 0 205) 204) anon448_Else_correct)))))
(let ((anon447_Else_correct  (=> (not (and (and (and b_23@83 b_32@18) true) (> FullPerm 0.0))) (=> (and (and (= Used_10Mask@13 Used_10Mask@11) (= b_32@21 b_32@18)) (and (= neededTransfer@34 FullPerm) (= Ops_3Mask@37 Ops_3Mask@35))) (and (=> (= (ControlFlow 0 200) 199) anon450_Then_correct) (=> (= (ControlFlow 0 200) 194) anon450_Else_correct))))))
(let ((anon205_correct  (and (=> (= (ControlFlow 0 206) (- 0 208)) (=> (and b_23@80 b_32@18) (and (= neededTransfer@32 0.0) (= (U_2_real (MapType1Select Used_10Mask@11 this@@55 Iterator_current)) initNeededTransfer@7)))) (=> (=> (and b_23@80 b_32@18) (and (= neededTransfer@32 0.0) (= (U_2_real (MapType1Select Used_10Mask@11 this@@55 Iterator_current)) initNeededTransfer@7))) (=> (= b_35@0  (and b_23@80 b_32@18)) (=> (and (and (and (= b_35@1  (and b_35@0 (state Result_22Heap Result_22Mask))) (= b_35@2  (and b_35@1 (sumMask Result_22Mask Ops_3Mask@35 Used_10Mask@11)))) (and (= b_35@3  (and (and b_35@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_22Heap Ops_3Mask@35)) (IdenticalOnKnownLocations Used_10Heap@0 Result_22Heap Used_10Mask@11))) (= b_35@4  (and b_35@3 (state Result_22Heap Result_22Mask))))) (and (and (= b_23@81  (and b_23@80 b_35@4)) (= b_23@82  (and b_23@81 b_32@18))) (and (= b_23@83  (and b_23@82 (= Used_10Heap@0 Ops_3Heap@9))) (= initNeededTransfer@8 (+ (U_2_real (MapType1Select Used_10Mask@11 this@@55 Iterator_last)) FullPerm))))) (and (=> (= (ControlFlow 0 206) (- 0 207)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 206) 205) anon447_Then_correct) (=> (= (ControlFlow 0 206) 200) anon447_Else_correct))))))))))
(let ((anon446_Else_correct  (=> (>= 0.0 takeTransfer@15) (=> (and (= neededTransfer@32 neededTransfer@30) (= b_32@18 b_32@15)) (=> (and (and (= Mask@52 Mask@50) (= Heap@42 Heap@40)) (and (= Used_10Mask@11 Used_10Mask@9) (= (ControlFlow 0 211) 206))) anon205_correct)))))
(let ((anon446_Then_correct  (=> (> takeTransfer@15 0.0) (=> (and (and (= neededTransfer@31 (- neededTransfer@30 takeTransfer@15)) (= Used_10Mask@10 (MapType1Store Used_10Mask@9 this@@55 Iterator_current (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@9 this@@55 Iterator_current)) takeTransfer@15))))) (and (= b_32@16  (and b_32@15 (state Used_10Heap@0 Used_10Mask@10))) (= b_32@17  (and b_32@16 (= (MapType0Select Heap@40 this@@55 Iterator_current) (MapType0Select Used_10Heap@0 this@@55 Iterator_current)))))) (=> (and (and (and (= Mask@51 (MapType1Store Mask@50 this@@55 Iterator_current (real_2_U (- (U_2_real (MapType1Select Mask@50 this@@55 Iterator_current)) takeTransfer@15)))) (= Heap@41 (MapType0Store Heap@40 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) (MapType1Store (MapType0Select Heap@40 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) this@@55 Iterator_current (bool_2_U true))))) (and (= neededTransfer@32 neededTransfer@31) (= b_32@18 b_32@17))) (and (and (= Mask@52 Mask@51) (= Heap@42 Heap@41)) (and (= Used_10Mask@11 Used_10Mask@10) (= (ControlFlow 0 210) 206)))) anon205_correct)))))
(let ((anon445_Else_correct  (=> (and (< maskTransfer@15 neededTransfer@30) (= takeTransfer@15 maskTransfer@15)) (and (=> (= (ControlFlow 0 213) 210) anon446_Then_correct) (=> (= (ControlFlow 0 213) 211) anon446_Else_correct)))))
(let ((anon445_Then_correct  (=> (and (<= neededTransfer@30 maskTransfer@15) (= takeTransfer@15 neededTransfer@30)) (and (=> (= (ControlFlow 0 212) 210) anon446_Then_correct) (=> (= (ControlFlow 0 212) 211) anon446_Else_correct)))))
(let ((anon444_Then_correct  (=> (and (and (and (and b_23@80 b_32@15) true) (> neededTransfer@30 0.0)) (= maskTransfer@15 (U_2_real (MapType1Select Mask@50 this@@55 Iterator_current)))) (and (=> (= (ControlFlow 0 214) 212) anon445_Then_correct) (=> (= (ControlFlow 0 214) 213) anon445_Else_correct)))))
(let ((anon444_Else_correct  (=> (not (and (and (and b_23@80 b_32@15) true) (> neededTransfer@30 0.0))) (=> (and (= neededTransfer@32 neededTransfer@30) (= b_32@18 b_32@15)) (=> (and (and (= Mask@52 Mask@50) (= Heap@42 Heap@40)) (and (= Used_10Mask@11 Used_10Mask@9) (= (ControlFlow 0 209) 206))) anon205_correct)))))
(let ((anon443_Else_correct  (=> (>= 0.0 takeTransfer@14) (=> (and (and (= Ops_3Mask@35 Ops_3Mask@33) (= Used_10Mask@9 Used_10Mask@7)) (and (= b_32@15 b_32@12) (= neededTransfer@30 FullPerm))) (and (=> (= (ControlFlow 0 217) 214) anon444_Then_correct) (=> (= (ControlFlow 0 217) 209) anon444_Else_correct))))))
(let ((anon443_Then_correct  (=> (and (> takeTransfer@14 0.0) (= neededTransfer@29 (- FullPerm takeTransfer@14))) (=> (and (and (and (= Used_10Mask@8 (MapType1Store Used_10Mask@7 this@@55 Iterator_current (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@7 this@@55 Iterator_current)) takeTransfer@14)))) (= b_32@13  (and b_32@12 (state Used_10Heap@0 Used_10Mask@8)))) (and (= b_32@14  (and b_32@13 (= (MapType0Select Ops_3Heap@9 this@@55 Iterator_current) (MapType0Select Used_10Heap@0 this@@55 Iterator_current)))) (= Ops_3Mask@34 (MapType1Store Ops_3Mask@33 this@@55 Iterator_current (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@33 this@@55 Iterator_current)) takeTransfer@14)))))) (and (and (= Ops_3Mask@35 Ops_3Mask@34) (= Used_10Mask@9 Used_10Mask@8)) (and (= b_32@15 b_32@14) (= neededTransfer@30 neededTransfer@29)))) (and (=> (= (ControlFlow 0 216) 214) anon444_Then_correct) (=> (= (ControlFlow 0 216) 209) anon444_Else_correct))))))
(let ((anon442_Else_correct  (=> (and (< maskTransfer@14 FullPerm) (= takeTransfer@14 maskTransfer@14)) (and (=> (= (ControlFlow 0 219) 216) anon443_Then_correct) (=> (= (ControlFlow 0 219) 217) anon443_Else_correct)))))
(let ((anon442_Then_correct  (=> (and (<= FullPerm maskTransfer@14) (= takeTransfer@14 FullPerm)) (and (=> (= (ControlFlow 0 218) 216) anon443_Then_correct) (=> (= (ControlFlow 0 218) 217) anon443_Else_correct)))))
(let ((anon441_Then_correct  (=> (and (and (and (and b_23@80 b_32@12) true) (> FullPerm 0.0)) (= maskTransfer@14 (U_2_real (MapType1Select Ops_3Mask@33 this@@55 Iterator_current)))) (and (=> (= (ControlFlow 0 220) 218) anon442_Then_correct) (=> (= (ControlFlow 0 220) 219) anon442_Else_correct)))))
(let ((anon441_Else_correct  (=> (not (and (and (and b_23@80 b_32@12) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@35 Ops_3Mask@33) (= Used_10Mask@9 Used_10Mask@7)) (and (= b_32@15 b_32@12) (= neededTransfer@30 FullPerm))) (and (=> (= (ControlFlow 0 215) 214) anon444_Then_correct) (=> (= (ControlFlow 0 215) 209) anon444_Else_correct))))))
(let ((anon193_correct  (and (=> (= (ControlFlow 0 221) (- 0 223)) (=> (and b_23@78 b_32@12) (not (= (MapType0Select Result_21Heap (MapType0Select Result_21Heap this@@55 Iterator_iteratee) List_sentinel) null)))) (=> (=> (and b_23@78 b_32@12) (not (= (MapType0Select Result_21Heap (MapType0Select Result_21Heap this@@55 Iterator_iteratee) List_sentinel) null))) (=> (= b_23@79  (and b_23@78 b_32@12)) (=> (and (= b_23@80  (and b_23@79 (= Used_10Heap@0 Ops_3Heap@9))) (= initNeededTransfer@7 (+ (U_2_real (MapType1Select Used_10Mask@7 this@@55 Iterator_current)) FullPerm))) (and (=> (= (ControlFlow 0 221) (- 0 222)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 221) 220) anon441_Then_correct) (=> (= (ControlFlow 0 221) 215) anon441_Else_correct))))))))))
(let ((anon440_Else_correct  (=> (and (not b_23@78) (= (ControlFlow 0 228) 221)) anon193_correct)))
(let ((anon440_Then_correct  (=> b_23@78 (and (=> (= (ControlFlow 0 225) (- 0 227)) (HasDirectPerm Result_21Mask this@@55 Iterator_iteratee)) (=> (HasDirectPerm Result_21Mask this@@55 Iterator_iteratee) (and (=> (= (ControlFlow 0 225) (- 0 226)) (HasDirectPerm Result_21Mask (MapType0Select Result_21Heap this@@55 Iterator_iteratee) List_sentinel)) (=> (HasDirectPerm Result_21Mask (MapType0Select Result_21Heap this@@55 Iterator_iteratee) List_sentinel) (=> (= (ControlFlow 0 225) 221) anon193_correct))))))))
(let ((anon439_Then_correct  (=> (and b_23@78 b_32@12) (and (=> (= (ControlFlow 0 229) 225) anon440_Then_correct) (=> (= (ControlFlow 0 229) 228) anon440_Else_correct)))))
(let ((anon439_Else_correct  (=> (and (not (and b_23@78 b_32@12)) (= (ControlFlow 0 224) 221)) anon193_correct)))
(let ((anon190_correct  (and (=> (= (ControlFlow 0 230) (- 0 231)) (=> (and b_23@75 b_32@12) (and (= neededTransfer@28 0.0) (= (U_2_real (MapType1Select Used_10Mask@7 rcvLocal@3 List_sentinel)) initNeededTransfer@6)))) (=> (=> (and b_23@75 b_32@12) (and (= neededTransfer@28 0.0) (= (U_2_real (MapType1Select Used_10Mask@7 rcvLocal@3 List_sentinel)) initNeededTransfer@6))) (=> (and (and (and (= b_34@0  (and b_23@75 b_32@12)) (= b_34@1  (and b_34@0 (state Result_21Heap Result_21Mask)))) (and (= b_34@2  (and b_34@1 (sumMask Result_21Mask Ops_3Mask@33 Used_10Mask@7))) (= b_34@3  (and (and b_34@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_21Heap Ops_3Mask@33)) (IdenticalOnKnownLocations Used_10Heap@0 Result_21Heap Used_10Mask@7))))) (and (and (= b_34@4  (and b_34@3 (state Result_21Heap Result_21Mask))) (= b_23@76  (and b_23@75 b_34@4))) (and (= b_23@77  (and b_23@76 b_32@12)) (= b_23@78  (and b_23@77 (= Used_10Heap@0 Ops_3Heap@9)))))) (and (=> (= (ControlFlow 0 230) 229) anon439_Then_correct) (=> (= (ControlFlow 0 230) 224) anon439_Else_correct)))))))
(let ((anon438_Else_correct  (=> (>= 0.0 takeTransfer@13) (=> (and (= neededTransfer@28 neededTransfer@26) (= b_32@12 b_32@9)) (=> (and (and (= Heap@40 Heap@38) (= Mask@50 Mask@48)) (and (= Used_10Mask@7 Used_10Mask@5) (= (ControlFlow 0 234) 230))) anon190_correct)))))
(let ((anon438_Then_correct  (=> (> takeTransfer@13 0.0) (=> (and (and (= neededTransfer@27 (- neededTransfer@26 takeTransfer@13)) (= Used_10Mask@6 (MapType1Store Used_10Mask@5 rcvLocal@3 List_sentinel (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@5 rcvLocal@3 List_sentinel)) takeTransfer@13))))) (and (= b_32@10  (and b_32@9 (state Used_10Heap@0 Used_10Mask@6))) (= b_32@11  (and b_32@10 (= (MapType0Select Heap@38 rcvLocal@3 List_sentinel) (MapType0Select Used_10Heap@0 rcvLocal@3 List_sentinel)))))) (=> (and (and (and (= Mask@49 (MapType1Store Mask@48 rcvLocal@3 List_sentinel (real_2_U (- (U_2_real (MapType1Select Mask@48 rcvLocal@3 List_sentinel)) takeTransfer@13)))) (= Heap@39 (MapType0Store Heap@38 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) (MapType1Store (MapType0Select Heap@38 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) (MapType0Select Heap@38 this@@55 Iterator_iteratee) List_sentinel (bool_2_U true))))) (and (= neededTransfer@28 neededTransfer@27) (= b_32@12 b_32@11))) (and (and (= Heap@40 Heap@39) (= Mask@50 Mask@49)) (and (= Used_10Mask@7 Used_10Mask@6) (= (ControlFlow 0 233) 230)))) anon190_correct)))))
(let ((anon437_Else_correct  (=> (and (< maskTransfer@13 neededTransfer@26) (= takeTransfer@13 maskTransfer@13)) (and (=> (= (ControlFlow 0 236) 233) anon438_Then_correct) (=> (= (ControlFlow 0 236) 234) anon438_Else_correct)))))
(let ((anon437_Then_correct  (=> (and (<= neededTransfer@26 maskTransfer@13) (= takeTransfer@13 neededTransfer@26)) (and (=> (= (ControlFlow 0 235) 233) anon438_Then_correct) (=> (= (ControlFlow 0 235) 234) anon438_Else_correct)))))
(let ((anon436_Then_correct  (=> (and (and (and (and b_23@75 b_32@9) true) (> neededTransfer@26 0.0)) (= maskTransfer@13 (U_2_real (MapType1Select Mask@48 rcvLocal@3 List_sentinel)))) (and (=> (= (ControlFlow 0 237) 235) anon437_Then_correct) (=> (= (ControlFlow 0 237) 236) anon437_Else_correct)))))
(let ((anon436_Else_correct  (=> (not (and (and (and b_23@75 b_32@9) true) (> neededTransfer@26 0.0))) (=> (and (= neededTransfer@28 neededTransfer@26) (= b_32@12 b_32@9)) (=> (and (and (= Heap@40 Heap@38) (= Mask@50 Mask@48)) (and (= Used_10Mask@7 Used_10Mask@5) (= (ControlFlow 0 232) 230))) anon190_correct)))))
(let ((anon435_Else_correct  (=> (>= 0.0 takeTransfer@12) (=> (and (and (= Used_10Mask@5 Used_10Mask@3) (= b_32@9 b_32@6)) (and (= neededTransfer@26 FullPerm) (= Ops_3Mask@33 Ops_3Mask@31))) (and (=> (= (ControlFlow 0 240) 237) anon436_Then_correct) (=> (= (ControlFlow 0 240) 232) anon436_Else_correct))))))
(let ((anon435_Then_correct  (=> (and (> takeTransfer@12 0.0) (= neededTransfer@25 (- FullPerm takeTransfer@12))) (=> (and (and (and (= Used_10Mask@4 (MapType1Store Used_10Mask@3 rcvLocal@3 List_sentinel (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@3 rcvLocal@3 List_sentinel)) takeTransfer@12)))) (= b_32@7  (and b_32@6 (state Used_10Heap@0 Used_10Mask@4)))) (and (= b_32@8  (and b_32@7 (= (MapType0Select Ops_3Heap@9 rcvLocal@3 List_sentinel) (MapType0Select Used_10Heap@0 rcvLocal@3 List_sentinel)))) (= Ops_3Mask@32 (MapType1Store Ops_3Mask@31 rcvLocal@3 List_sentinel (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@31 rcvLocal@3 List_sentinel)) takeTransfer@12)))))) (and (and (= Used_10Mask@5 Used_10Mask@4) (= b_32@9 b_32@8)) (and (= neededTransfer@26 neededTransfer@25) (= Ops_3Mask@33 Ops_3Mask@32)))) (and (=> (= (ControlFlow 0 239) 237) anon436_Then_correct) (=> (= (ControlFlow 0 239) 232) anon436_Else_correct))))))
(let ((anon434_Else_correct  (=> (and (< maskTransfer@12 FullPerm) (= takeTransfer@12 maskTransfer@12)) (and (=> (= (ControlFlow 0 242) 239) anon435_Then_correct) (=> (= (ControlFlow 0 242) 240) anon435_Else_correct)))))
(let ((anon434_Then_correct  (=> (and (<= FullPerm maskTransfer@12) (= takeTransfer@12 FullPerm)) (and (=> (= (ControlFlow 0 241) 239) anon435_Then_correct) (=> (= (ControlFlow 0 241) 240) anon435_Else_correct)))))
(let ((anon433_Then_correct  (=> (and (and (and (and b_23@75 b_32@6) true) (> FullPerm 0.0)) (= maskTransfer@12 (U_2_real (MapType1Select Ops_3Mask@31 rcvLocal@3 List_sentinel)))) (and (=> (= (ControlFlow 0 243) 241) anon434_Then_correct) (=> (= (ControlFlow 0 243) 242) anon434_Else_correct)))))
(let ((anon433_Else_correct  (=> (not (and (and (and b_23@75 b_32@6) true) (> FullPerm 0.0))) (=> (and (and (= Used_10Mask@5 Used_10Mask@3) (= b_32@9 b_32@6)) (and (= neededTransfer@26 FullPerm) (= Ops_3Mask@33 Ops_3Mask@31))) (and (=> (= (ControlFlow 0 238) 237) anon436_Then_correct) (=> (= (ControlFlow 0 238) 232) anon436_Else_correct))))))
(let ((anon178_correct  (=> (and (= rcvLocal@3 (MapType0Select Result_20Heap this@@55 Iterator_iteratee)) (= initNeededTransfer@6 (+ (U_2_real (MapType1Select Used_10Mask@3 rcvLocal@3 List_sentinel)) FullPerm))) (and (=> (= (ControlFlow 0 244) (- 0 245)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 244) 243) anon433_Then_correct) (=> (= (ControlFlow 0 244) 238) anon433_Else_correct)))))))
(let ((anon432_Else_correct  (=> (and (not b_23@75) (= (ControlFlow 0 249) 244)) anon178_correct)))
(let ((anon432_Then_correct  (=> b_23@75 (and (=> (= (ControlFlow 0 247) (- 0 248)) (HasDirectPerm Result_20Mask this@@55 Iterator_iteratee)) (=> (HasDirectPerm Result_20Mask this@@55 Iterator_iteratee) (=> (= (ControlFlow 0 247) 244) anon178_correct))))))
(let ((anon431_Then_correct  (=> (and b_23@75 b_32@6) (and (=> (= (ControlFlow 0 250) 247) anon432_Then_correct) (=> (= (ControlFlow 0 250) 249) anon432_Else_correct)))))
(let ((anon431_Else_correct  (=> (and (not (and b_23@75 b_32@6)) (= (ControlFlow 0 246) 244)) anon178_correct)))
(let ((anon175_correct  (and (=> (= (ControlFlow 0 251) (- 0 252)) (=> (and b_23@73 b_32@6) (not (= (MapType0Select Result_20Heap this@@55 Iterator_iteratee) null)))) (=> (=> (and b_23@73 b_32@6) (not (= (MapType0Select Result_20Heap this@@55 Iterator_iteratee) null))) (=> (and (= b_23@74  (and b_23@73 b_32@6)) (= b_23@75  (and b_23@74 (= Used_10Heap@0 Ops_3Heap@9)))) (and (=> (= (ControlFlow 0 251) 250) anon431_Then_correct) (=> (= (ControlFlow 0 251) 246) anon431_Else_correct)))))))
(let ((anon430_Else_correct  (=> (and (not b_23@73) (= (ControlFlow 0 256) 251)) anon175_correct)))
(let ((anon430_Then_correct  (=> b_23@73 (and (=> (= (ControlFlow 0 254) (- 0 255)) (HasDirectPerm Result_20Mask this@@55 Iterator_iteratee)) (=> (HasDirectPerm Result_20Mask this@@55 Iterator_iteratee) (=> (= (ControlFlow 0 254) 251) anon175_correct))))))
(let ((anon429_Then_correct  (=> (and b_23@73 b_32@6) (and (=> (= (ControlFlow 0 257) 254) anon430_Then_correct) (=> (= (ControlFlow 0 257) 256) anon430_Else_correct)))))
(let ((anon429_Else_correct  (=> (and (not (and b_23@73 b_32@6)) (= (ControlFlow 0 253) 251)) anon175_correct)))
(let ((anon172_correct  (and (=> (= (ControlFlow 0 258) (- 0 259)) (=> (and b_23@70 b_32@6) (and (= neededTransfer@24 0.0) (= (U_2_real (MapType1Select Used_10Mask@3 this@@55 Iterator_iteratee)) initNeededTransfer@5)))) (=> (=> (and b_23@70 b_32@6) (and (= neededTransfer@24 0.0) (= (U_2_real (MapType1Select Used_10Mask@3 this@@55 Iterator_iteratee)) initNeededTransfer@5))) (=> (and (and (and (= b_33@0  (and b_23@70 b_32@6)) (= b_33@1  (and b_33@0 (state Result_20Heap Result_20Mask)))) (and (= b_33@2  (and b_33@1 (sumMask Result_20Mask Ops_3Mask@31 Used_10Mask@3))) (= b_33@3  (and (and b_33@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_20Heap Ops_3Mask@31)) (IdenticalOnKnownLocations Used_10Heap@0 Result_20Heap Used_10Mask@3))))) (and (and (= b_33@4  (and b_33@3 (state Result_20Heap Result_20Mask))) (= b_23@71  (and b_23@70 b_33@4))) (and (= b_23@72  (and b_23@71 b_32@6)) (= b_23@73  (and b_23@72 (= Used_10Heap@0 Ops_3Heap@9)))))) (and (=> (= (ControlFlow 0 258) 257) anon429_Then_correct) (=> (= (ControlFlow 0 258) 253) anon429_Else_correct)))))))
(let ((anon428_Else_correct  (=> (>= 0.0 takeTransfer@11) (=> (and (= Mask@48 Mask@46) (= Heap@38 Heap@36)) (=> (and (and (= neededTransfer@24 neededTransfer@22) (= b_32@6 b_32@3)) (and (= Used_10Mask@3 Used_10Mask@1) (= (ControlFlow 0 262) 258))) anon172_correct)))))
(let ((anon428_Then_correct  (=> (> takeTransfer@11 0.0) (=> (and (and (= neededTransfer@23 (- neededTransfer@22 takeTransfer@11)) (= Used_10Mask@2 (MapType1Store Used_10Mask@1 this@@55 Iterator_iteratee (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@1 this@@55 Iterator_iteratee)) takeTransfer@11))))) (and (= b_32@4  (and b_32@3 (state Used_10Heap@0 Used_10Mask@2))) (= b_32@5  (and b_32@4 (= (MapType0Select Heap@36 this@@55 Iterator_iteratee) (MapType0Select Used_10Heap@0 this@@55 Iterator_iteratee)))))) (=> (and (and (and (= Mask@47 (MapType1Store Mask@46 this@@55 Iterator_iteratee (real_2_U (- (U_2_real (MapType1Select Mask@46 this@@55 Iterator_iteratee)) takeTransfer@11)))) (= Heap@37 (MapType0Store Heap@36 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) (MapType1Store (MapType0Select Heap@36 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) this@@55 Iterator_iteratee (bool_2_U true))))) (and (= Mask@48 Mask@47) (= Heap@38 Heap@37))) (and (and (= neededTransfer@24 neededTransfer@23) (= b_32@6 b_32@5)) (and (= Used_10Mask@3 Used_10Mask@2) (= (ControlFlow 0 261) 258)))) anon172_correct)))))
(let ((anon427_Else_correct  (=> (and (< maskTransfer@11 neededTransfer@22) (= takeTransfer@11 maskTransfer@11)) (and (=> (= (ControlFlow 0 264) 261) anon428_Then_correct) (=> (= (ControlFlow 0 264) 262) anon428_Else_correct)))))
(let ((anon427_Then_correct  (=> (and (<= neededTransfer@22 maskTransfer@11) (= takeTransfer@11 neededTransfer@22)) (and (=> (= (ControlFlow 0 263) 261) anon428_Then_correct) (=> (= (ControlFlow 0 263) 262) anon428_Else_correct)))))
(let ((anon426_Then_correct  (=> (and (and (and (and b_23@70 b_32@3) true) (> neededTransfer@22 0.0)) (= maskTransfer@11 (U_2_real (MapType1Select Mask@46 this@@55 Iterator_iteratee)))) (and (=> (= (ControlFlow 0 265) 263) anon427_Then_correct) (=> (= (ControlFlow 0 265) 264) anon427_Else_correct)))))
(let ((anon426_Else_correct  (=> (not (and (and (and b_23@70 b_32@3) true) (> neededTransfer@22 0.0))) (=> (and (= Mask@48 Mask@46) (= Heap@38 Heap@36)) (=> (and (and (= neededTransfer@24 neededTransfer@22) (= b_32@6 b_32@3)) (and (= Used_10Mask@3 Used_10Mask@1) (= (ControlFlow 0 260) 258))) anon172_correct)))))
(let ((anon425_Else_correct  (=> (>= 0.0 takeTransfer@10) (=> (and (and (= Ops_3Mask@31 Ops_3Mask@29) (= Used_10Mask@1 ZeroMask)) (and (= b_32@3 b_32@0) (= neededTransfer@22 neededTransfer@20))) (and (=> (= (ControlFlow 0 268) 265) anon426_Then_correct) (=> (= (ControlFlow 0 268) 260) anon426_Else_correct))))))
(let ((anon425_Then_correct  (=> (and (> takeTransfer@10 0.0) (= neededTransfer@21 (- neededTransfer@20 takeTransfer@10))) (=> (and (and (and (= Used_10Mask@0 (MapType1Store ZeroMask this@@55 Iterator_iteratee (real_2_U (+ (U_2_real (MapType1Select ZeroMask this@@55 Iterator_iteratee)) takeTransfer@10)))) (= b_32@1  (and b_32@0 (state Used_10Heap@0 Used_10Mask@0)))) (and (= b_32@2  (and b_32@1 (= (MapType0Select Ops_3Heap@9 this@@55 Iterator_iteratee) (MapType0Select Used_10Heap@0 this@@55 Iterator_iteratee)))) (= Ops_3Mask@30 (MapType1Store Ops_3Mask@29 this@@55 Iterator_iteratee (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@29 this@@55 Iterator_iteratee)) takeTransfer@10)))))) (and (and (= Ops_3Mask@31 Ops_3Mask@30) (= Used_10Mask@1 Used_10Mask@0)) (and (= b_32@3 b_32@2) (= neededTransfer@22 neededTransfer@21)))) (and (=> (= (ControlFlow 0 267) 265) anon426_Then_correct) (=> (= (ControlFlow 0 267) 260) anon426_Else_correct))))))
(let ((anon424_Else_correct  (=> (and (< maskTransfer@10 neededTransfer@20) (= takeTransfer@10 maskTransfer@10)) (and (=> (= (ControlFlow 0 270) 267) anon425_Then_correct) (=> (= (ControlFlow 0 270) 268) anon425_Else_correct)))))
(let ((anon424_Then_correct  (=> (and (<= neededTransfer@20 maskTransfer@10) (= takeTransfer@10 neededTransfer@20)) (and (=> (= (ControlFlow 0 269) 267) anon425_Then_correct) (=> (= (ControlFlow 0 269) 268) anon425_Else_correct)))))
(let ((anon423_Then_correct  (=> (and (and (and (and b_23@70 b_32@0) true) (> neededTransfer@20 0.0)) (= maskTransfer@10 (U_2_real (MapType1Select Ops_3Mask@29 this@@55 Iterator_iteratee)))) (and (=> (= (ControlFlow 0 271) 269) anon424_Then_correct) (=> (= (ControlFlow 0 271) 270) anon424_Else_correct)))))
(let ((anon423_Else_correct  (=> (not (and (and (and b_23@70 b_32@0) true) (> neededTransfer@20 0.0))) (=> (and (and (= Ops_3Mask@31 Ops_3Mask@29) (= Used_10Mask@1 ZeroMask)) (and (= b_32@3 b_32@0) (= neededTransfer@22 neededTransfer@20))) (and (=> (= (ControlFlow 0 266) 265) anon426_Then_correct) (=> (= (ControlFlow 0 266) 260) anon426_Else_correct))))))
(let ((anon422_Then_correct  (=> (and (and b_23@70 (= b_32@0  (and b_32 (state Used_10Heap@0 ZeroMask)))) (and (= neededTransfer@20 (/ (to_real 1) (to_real 2))) (= initNeededTransfer@5 (+ (U_2_real (MapType1Select ZeroMask this@@55 Iterator_iteratee)) neededTransfer@20)))) (and (=> (= (ControlFlow 0 272) (- 0 273)) (>= neededTransfer@20 0.0)) (=> (>= neededTransfer@20 0.0) (and (=> (= (ControlFlow 0 272) 271) anon423_Then_correct) (=> (= (ControlFlow 0 272) 266) anon423_Else_correct)))))))
(let ((anon422_Else_correct  (=> (not b_23@70) (=> (and (= Ops_3Heap@24 Ops_3Heap@9) (= b_23@119 b_23@70)) (=> (and (and (= Ops_3Mask@51 Ops_3Mask@29) (= Heap@57 Heap@36)) (and (= Mask@67 Mask@46) (= (ControlFlow 0 22) 20))) anon325_correct)))))
(let ((anon158_correct  (=> (state Ops_3Heap@8 Ops_3Mask@28) (=> (and (= b_23@69  (and b_23@68 (state Ops_3Heap@8 Ops_3Mask@28))) (= Ops_3Heap@9 Ops_3Heap@8)) (=> (and (and (= Ops_3Mask@29 Ops_3Mask@28) (= Heap@36 Heap@35)) (and (= Mask@46 Mask@45) (= b_23@70 b_23@69))) (and (=> (= (ControlFlow 0 275) 272) anon422_Then_correct) (=> (= (ControlFlow 0 275) 22) anon422_Else_correct)))))))
(let ((anon421_Else_correct  (=> (= (MapType0Select Ops_3Heap@6 (MapType0Select Ops_3Heap@6 (MapType0Select Ops_3Heap@6 this@@55 Iterator_current) Node_prev) Node_prev) null) (=> (and (= Ops_3Heap@8 Ops_3Heap@6) (= (ControlFlow 0 277) 275)) anon158_correct))))
(let ((anon421_Then_correct  (=> (not (= (MapType0Select Ops_3Heap@6 (MapType0Select Ops_3Heap@6 (MapType0Select Ops_3Heap@6 this@@55 Iterator_current) Node_prev) Node_prev) null)) (=> (and (and (forall ((o_26 T@U) (f_30 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_30))))
(let ((A@@17 (FieldTypeInv0 (type f_30))))
 (=> (and (and (= (type o_26) RefType) (= (type f_30) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@6 null (|Node_reverse#sm| (MapType0Select Ops_3Heap@6 (MapType0Select Ops_3Heap@6 this@@55 Iterator_current) Node_prev))) o_26 f_30)) (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@6 null (|Node_reverse#sm| (MapType0Select Ops_3Heap@6 (MapType0Select Ops_3Heap@6 (MapType0Select Ops_3Heap@6 this@@55 Iterator_current) Node_prev) Node_prev))) o_26 f_30)))) (U_2_bool (MapType1Select newPMask@4 o_26 f_30)))))
 :qid |stdinbpl.5429:33|
 :skolemid |115|
 :pattern ( (MapType1Select newPMask@4 o_26 f_30))
)) (= Ops_3Heap@7 (MapType0Store Ops_3Heap@6 null (|Node_reverse#sm| (MapType0Select Ops_3Heap@6 (MapType0Select Ops_3Heap@6 this@@55 Iterator_current) Node_prev)) newPMask@4))) (and (= Ops_3Heap@8 Ops_3Heap@7) (= (ControlFlow 0 276) 275))) anon158_correct))))
(let ((anon156_correct  (=> (= Ops_3Heap@4 (MapType0Store Ops_3Heap@3 null (|Node_reverse#sm| (MapType0Select Ops_3Heap@3 (MapType0Select Ops_3Heap@3 this@@55 Iterator_current) Node_prev)) (MapType1Store (MapType0Select Ops_3Heap@3 null (|Node_reverse#sm| (MapType0Select Ops_3Heap@3 (MapType0Select Ops_3Heap@3 this@@55 Iterator_current) Node_prev))) (MapType0Select Ops_3Heap@3 (MapType0Select Ops_3Heap@3 this@@55 Iterator_current) Node_prev) Node_val (bool_2_U true)))) (=> (and (= Ops_3Heap@5 (MapType0Store Ops_3Heap@4 null (|Node_reverse#sm| (MapType0Select Ops_3Heap@4 (MapType0Select Ops_3Heap@4 this@@55 Iterator_current) Node_prev)) (MapType1Store (MapType0Select Ops_3Heap@4 null (|Node_reverse#sm| (MapType0Select Ops_3Heap@4 (MapType0Select Ops_3Heap@4 this@@55 Iterator_current) Node_prev))) (MapType0Select Ops_3Heap@4 (MapType0Select Ops_3Heap@4 this@@55 Iterator_current) Node_prev) Node_prev (bool_2_U true)))) (= Ops_3Heap@6 (MapType0Store Ops_3Heap@5 null (|Node_reverse#sm| (MapType0Select Ops_3Heap@5 (MapType0Select Ops_3Heap@5 this@@55 Iterator_current) Node_prev)) (MapType1Store (MapType0Select Ops_3Heap@5 null (|Node_reverse#sm| (MapType0Select Ops_3Heap@5 (MapType0Select Ops_3Heap@5 this@@55 Iterator_current) Node_prev))) (MapType0Select Ops_3Heap@5 (MapType0Select Ops_3Heap@5 this@@55 Iterator_current) Node_prev) Node_next (bool_2_U true))))) (and (=> (= (ControlFlow 0 278) 276) anon421_Then_correct) (=> (= (ControlFlow 0 278) 277) anon421_Else_correct))))))
(let ((anon420_Else_correct  (=> (HasDirectPerm Ops_3Mask@28 null (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev))) (=> (and (= Ops_3Heap@3 Ops_3Heap@0) (= (ControlFlow 0 280) 278)) anon156_correct))))
(let ((anon420_Then_correct  (=> (not (HasDirectPerm Ops_3Mask@28 null (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev)))) (=> (and (and (= Ops_3Heap@1 (MapType0Store Ops_3Heap@0 null (|Node_reverse#sm| (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev)) ZeroPMask)) (= Ops_3Heap@2 (MapType0Store Ops_3Heap@1 null (Node_reverse (MapType0Select Ops_3Heap@1 (MapType0Select Ops_3Heap@1 this@@55 Iterator_current) Node_prev)) freshVersion@1))) (and (= Ops_3Heap@3 Ops_3Heap@2) (= (ControlFlow 0 279) 278))) anon156_correct))))
(let ((anon154_correct  (=> (= b_31@0  (and b_23@65 b_26@25)) (=> (and (= b_31@1  (and b_31@0 (state Result_19Heap Result_19Mask))) (= b_31@2  (and b_31@1 (sumMask Result_19Mask Ops_3Mask@27 Used_9Mask@16)))) (=> (and (and (and (= b_31@3  (and (and b_31@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_19Heap Ops_3Mask@27)) (IdenticalOnKnownLocations Used_9Heap@0 Result_19Heap Used_9Mask@16))) (= b_31@4  (and b_31@3 (state Result_19Heap Result_19Mask)))) (and (= b_23@66  (and b_23@65 b_31@4)) (= Ops_3Mask@28 (MapType1Store Ops_3Mask@27 null (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev)) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@27 null (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev)))) FullPerm)))))) (and (and (= b_23@67  (and b_23@66 (state Ops_3Heap@0 Ops_3Mask@28))) (= b_23@68  (and b_23@67 (state Ops_3Heap@0 Ops_3Mask@28)))) (and (|Node_reverse#trigger| Ops_3Heap@0 (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev))) (= (MapType0Select Ops_3Heap@0 null (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev))) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 (MapType0Select Result_19Heap (MapType0Select Result_19Heap this@@55 Iterator_current) Node_prev) Node_val)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 (MapType0Select Result_19Heap (MapType0Select Result_19Heap this@@55 Iterator_current) Node_prev) Node_prev)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 (MapType0Select Result_19Heap (MapType0Select Result_19Heap this@@55 Iterator_current) Node_prev) Node_next)) (FrameFragment (ite (not (= (MapType0Select Ops_3Heap@0 (MapType0Select Result_19Heap (MapType0Select Result_19Heap this@@55 Iterator_current) Node_prev) Node_prev) null)) (MapType0Select Ops_3Heap@0 null (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Result_19Heap (MapType0Select Result_19Heap this@@55 Iterator_current) Node_prev) Node_prev))) EmptyFrame))))))))) (and (=> (= (ControlFlow 0 281) 279) anon420_Then_correct) (=> (= (ControlFlow 0 281) 280) anon420_Else_correct)))))))
(let ((anon153_correct  (and (=> (= (ControlFlow 0 283) (- 0 284)) (=> (and b_23@62 b_26@24) (= (Node_rev_next Result_18Heap (MapType0Select Result_18Heap (MapType0Select Result_18Heap (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev) Node_prev)) (MapType0Select Result_18Heap (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev)))) (=> (=> (and b_23@62 b_26@24) (= (Node_rev_next Result_18Heap (MapType0Select Result_18Heap (MapType0Select Result_18Heap (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev) Node_prev)) (MapType0Select Result_18Heap (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev))) (=> (= b_23@63  (and b_23@62 b_26@24)) (=> (and (and (and (= b_23@64  (and b_23@63 (= Used_9Heap@0 Ops_3Heap@0))) (= b_23@65 b_23@64)) (and (= Used_9Mask@16 Used_9Mask@15) (= b_26@25 b_26@24))) (and (and (= Ops_3Mask@27 Ops_3Mask@26) (= Heap@35 Heap@34)) (and (= Mask@45 Mask@44) (= (ControlFlow 0 283) 281)))) anon154_correct))))))
(let ((anon418_Else_correct  (and (=> (= (ControlFlow 0 287) (- 0 289)) (HasDirectPerm Result_18Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_18Mask this@@55 Iterator_current) (and (=> (= (ControlFlow 0 287) (- 0 288)) (HasDirectPerm Result_18Mask (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev)) (=> (HasDirectPerm Result_18Mask (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev) (=> (= (ControlFlow 0 287) 283) anon153_correct)))))))
(let ((anon417_Then_correct  (=> b_23@62 (and (=> (= (ControlFlow 0 294) (- 0 297)) (HasDirectPerm Result_18Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_18Mask this@@55 Iterator_current) (and (=> (= (ControlFlow 0 294) (- 0 296)) (HasDirectPerm Result_18Mask (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev)) (=> (HasDirectPerm Result_18Mask (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev) (and (=> (= (ControlFlow 0 294) (- 0 295)) (HasDirectPerm Result_18Mask (MapType0Select Result_18Heap (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev) Node_prev)) (=> (HasDirectPerm Result_18Mask (MapType0Select Result_18Heap (MapType0Select Result_18Heap this@@55 Iterator_current) Node_prev) Node_prev) (and (and (=> (= (ControlFlow 0 294) 287) anon418_Else_correct) (=> (= (ControlFlow 0 294) 291) anon419_Then_correct)) (=> (= (ControlFlow 0 294) 293) anon419_Else_correct)))))))))))
(let ((anon417_Else_correct  (=> (and (not b_23@62) (= (ControlFlow 0 286) 283)) anon153_correct)))
(let ((anon416_Then_correct  (=> (and b_23@62 b_26@24) (and (=> (= (ControlFlow 0 298) 294) anon417_Then_correct) (=> (= (ControlFlow 0 298) 286) anon417_Else_correct)))))
(let ((anon416_Else_correct  (=> (and (not (and b_23@62 b_26@24)) (= (ControlFlow 0 285) 283)) anon153_correct)))
(let ((anon146_correct  (and (=> (= (ControlFlow 0 299) (- 0 300)) (=> (and b_23@59 b_26@24) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_9Mask@15 null (Node_reverse arg_7@0))) initNeededTransfer@4)))) (=> (=> (and b_23@59 b_26@24) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_9Mask@15 null (Node_reverse arg_7@0))) initNeededTransfer@4))) (=> (and (and (and (= b_30@0  (and b_23@59 b_26@24)) (= b_30@1  (and b_30@0 (state Result_18Heap Result_18Mask)))) (and (= b_30@2  (and b_30@1 (sumMask Result_18Mask Ops_3Mask@26 Used_9Mask@15))) (= b_30@3  (and (and b_30@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_18Heap Ops_3Mask@26)) (IdenticalOnKnownLocations Used_9Heap@0 Result_18Heap Used_9Mask@15))))) (and (and (= b_30@4  (and b_30@3 (state Result_18Heap Result_18Mask))) (= b_23@60  (and b_23@59 b_30@4))) (and (= b_23@61  (and b_23@60 b_26@24)) (= b_23@62  (and b_23@61 (= Used_9Heap@0 Ops_3Heap@0)))))) (and (=> (= (ControlFlow 0 299) 298) anon416_Then_correct) (=> (= (ControlFlow 0 299) 285) anon416_Else_correct)))))))
(let ((anon415_Else_correct  (=> (>= 0.0 takeTransfer@9) (=> (and (= Mask@44 Mask@42) (= Heap@34 Heap@32)) (=> (and (and (= neededTransfer@19 neededTransfer@17) (= b_26@24 b_26@21)) (and (= Used_9Mask@15 Used_9Mask@13) (= (ControlFlow 0 303) 299))) anon146_correct)))))
(let ((anon415_Then_correct  (=> (> takeTransfer@9 0.0) (=> (and (= neededTransfer@18 (- neededTransfer@17 takeTransfer@9)) (= Used_9Mask@14 (MapType1Store Used_9Mask@13 null (Node_reverse arg_7@0) (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@13 null (Node_reverse arg_7@0))) takeTransfer@9))))) (=> (and (and (= b_26@22  (and b_26@21 (state Used_9Heap@0 Used_9Mask@14))) (= TempMask@3 (MapType1Store ZeroMask null (Node_reverse arg_7@0) (real_2_U FullPerm)))) (and (= b_26@23  (and b_26@22 (IdenticalOnKnownLocations Heap@32 Used_9Heap@0 TempMask@3))) (= Mask@43 (MapType1Store Mask@42 null (Node_reverse arg_7@0) (real_2_U (- (U_2_real (MapType1Select Mask@42 null (Node_reverse arg_7@0))) takeTransfer@9)))))) (=> (and (and (and (forall ((o_25 T@U) (f_29 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_29))))
(let ((A@@18 (FieldTypeInv0 (type f_29))))
 (=> (and (and (= (type o_25) RefType) (= (type f_29) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType1Select (MapType0Select Heap@32 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) o_25 f_29)) (U_2_bool (MapType1Select (MapType0Select Heap@32 null (|Node_reverse#sm| (MapType0Select Heap@32 (MapType0Select Heap@32 (MapType0Select Heap@32 this@@55 Iterator_current) Node_prev) Node_prev))) o_25 f_29)))) (U_2_bool (MapType1Select newPMask@3 o_25 f_29)))))
 :qid |stdinbpl.5344:41|
 :skolemid |114|
 :pattern ( (MapType1Select newPMask@3 o_25 f_29))
)) (= Heap@33 (MapType0Store Heap@32 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) newPMask@3))) (and (= Mask@44 Mask@43) (= Heap@34 Heap@33))) (and (and (= neededTransfer@19 neededTransfer@18) (= b_26@24 b_26@23)) (and (= Used_9Mask@15 Used_9Mask@14) (= (ControlFlow 0 302) 299)))) anon146_correct))))))
(let ((anon414_Else_correct  (=> (and (< maskTransfer@9 neededTransfer@17) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 305) 302) anon415_Then_correct) (=> (= (ControlFlow 0 305) 303) anon415_Else_correct)))))
(let ((anon414_Then_correct  (=> (and (<= neededTransfer@17 maskTransfer@9) (= takeTransfer@9 neededTransfer@17)) (and (=> (= (ControlFlow 0 304) 302) anon415_Then_correct) (=> (= (ControlFlow 0 304) 303) anon415_Else_correct)))))
(let ((anon413_Then_correct  (=> (and (and (and (and b_23@59 b_26@21) true) (> neededTransfer@17 0.0)) (= maskTransfer@9 (U_2_real (MapType1Select Mask@42 null (Node_reverse arg_7@0))))) (and (=> (= (ControlFlow 0 306) 304) anon414_Then_correct) (=> (= (ControlFlow 0 306) 305) anon414_Else_correct)))))
(let ((anon413_Else_correct  (=> (not (and (and (and b_23@59 b_26@21) true) (> neededTransfer@17 0.0))) (=> (and (= Mask@44 Mask@42) (= Heap@34 Heap@32)) (=> (and (and (= neededTransfer@19 neededTransfer@17) (= b_26@24 b_26@21)) (and (= Used_9Mask@15 Used_9Mask@13) (= (ControlFlow 0 301) 299))) anon146_correct)))))
(let ((anon412_Else_correct  (=> (>= 0.0 takeTransfer@8) (=> (and (and (= Used_9Mask@13 Used_9Mask@11) (= b_26@21 b_26@18)) (and (= neededTransfer@17 FullPerm) (= Ops_3Mask@26 Ops_3Mask@24))) (and (=> (= (ControlFlow 0 309) 306) anon413_Then_correct) (=> (= (ControlFlow 0 309) 301) anon413_Else_correct))))))
(let ((anon412_Then_correct  (=> (> takeTransfer@8 0.0) (=> (and (= neededTransfer@16 (- FullPerm takeTransfer@8)) (= Used_9Mask@12 (MapType1Store Used_9Mask@11 null (Node_reverse arg_7@0) (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@11 null (Node_reverse arg_7@0))) takeTransfer@8))))) (=> (and (and (and (= b_26@19  (and b_26@18 (state Used_9Heap@0 Used_9Mask@12))) (= TempMask@2 (MapType1Store ZeroMask null (Node_reverse arg_7@0) (real_2_U FullPerm)))) (and (= b_26@20  (and b_26@19 (IdenticalOnKnownLocations Ops_3Heap@0 Used_9Heap@0 TempMask@2))) (= Ops_3Mask@25 (MapType1Store Ops_3Mask@24 null (Node_reverse arg_7@0) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@24 null (Node_reverse arg_7@0))) takeTransfer@8)))))) (and (and (= Used_9Mask@13 Used_9Mask@12) (= b_26@21 b_26@20)) (and (= neededTransfer@17 neededTransfer@16) (= Ops_3Mask@26 Ops_3Mask@25)))) (and (=> (= (ControlFlow 0 308) 306) anon413_Then_correct) (=> (= (ControlFlow 0 308) 301) anon413_Else_correct)))))))
(let ((anon411_Else_correct  (=> (and (< maskTransfer@8 FullPerm) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 311) 308) anon412_Then_correct) (=> (= (ControlFlow 0 311) 309) anon412_Else_correct)))))
(let ((anon411_Then_correct  (=> (and (<= FullPerm maskTransfer@8) (= takeTransfer@8 FullPerm)) (and (=> (= (ControlFlow 0 310) 308) anon412_Then_correct) (=> (= (ControlFlow 0 310) 309) anon412_Else_correct)))))
(let ((anon410_Then_correct  (=> (and (and (and (and b_23@59 b_26@18) true) (> FullPerm 0.0)) (= maskTransfer@8 (U_2_real (MapType1Select Ops_3Mask@24 null (Node_reverse arg_7@0))))) (and (=> (= (ControlFlow 0 312) 310) anon411_Then_correct) (=> (= (ControlFlow 0 312) 311) anon411_Else_correct)))))
(let ((anon410_Else_correct  (=> (not (and (and (and b_23@59 b_26@18) true) (> FullPerm 0.0))) (=> (and (and (= Used_9Mask@13 Used_9Mask@11) (= b_26@21 b_26@18)) (and (= neededTransfer@17 FullPerm) (= Ops_3Mask@26 Ops_3Mask@24))) (and (=> (= (ControlFlow 0 307) 306) anon413_Then_correct) (=> (= (ControlFlow 0 307) 301) anon413_Else_correct))))))
(let ((anon134_correct  (=> (and (= arg_7@0 (MapType0Select Result_17Heap (MapType0Select Result_17Heap (MapType0Select Result_17Heap this@@55 Iterator_current) Node_prev) Node_prev)) (= initNeededTransfer@4 (+ (U_2_real (MapType1Select Used_9Mask@11 null (Node_reverse arg_7@0))) FullPerm))) (and (=> (= (ControlFlow 0 313) (- 0 314)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 313) 312) anon410_Then_correct) (=> (= (ControlFlow 0 313) 307) anon410_Else_correct)))))))
(let ((anon409_Else_correct  (=> (and (not b_23@59) (= (ControlFlow 0 320) 313)) anon134_correct)))
(let ((anon409_Then_correct  (=> b_23@59 (and (=> (= (ControlFlow 0 316) (- 0 319)) (HasDirectPerm Result_17Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_17Mask this@@55 Iterator_current) (and (=> (= (ControlFlow 0 316) (- 0 318)) (HasDirectPerm Result_17Mask (MapType0Select Result_17Heap this@@55 Iterator_current) Node_prev)) (=> (HasDirectPerm Result_17Mask (MapType0Select Result_17Heap this@@55 Iterator_current) Node_prev) (and (=> (= (ControlFlow 0 316) (- 0 317)) (HasDirectPerm Result_17Mask (MapType0Select Result_17Heap (MapType0Select Result_17Heap this@@55 Iterator_current) Node_prev) Node_prev)) (=> (HasDirectPerm Result_17Mask (MapType0Select Result_17Heap (MapType0Select Result_17Heap this@@55 Iterator_current) Node_prev) Node_prev) (=> (= (ControlFlow 0 316) 313) anon134_correct))))))))))
(let ((anon408_Then_correct  (=> (and b_23@59 b_26@18) (and (=> (= (ControlFlow 0 321) 316) anon409_Then_correct) (=> (= (ControlFlow 0 321) 320) anon409_Else_correct)))))
(let ((anon408_Else_correct  (=> (and (not (and b_23@59 b_26@18)) (= (ControlFlow 0 315) 313)) anon134_correct)))
(let ((anon407_Then_correct  (=> (=> b_23@59 (not (= (MapType0Select Result_17Heap (MapType0Select Result_17Heap (MapType0Select Result_17Heap this@@55 Iterator_current) Node_prev) Node_prev) null))) (and (=> (= (ControlFlow 0 322) 321) anon408_Then_correct) (=> (= (ControlFlow 0 322) 315) anon408_Else_correct)))))
(let ((anon407_Else_correct  (=> (and (and (and (not (=> b_23@59 (not (= (MapType0Select Result_17Heap (MapType0Select Result_17Heap (MapType0Select Result_17Heap this@@55 Iterator_current) Node_prev) Node_prev) null)))) (= b_23@65 b_23@59)) (and (= Used_9Mask@16 Used_9Mask@11) (= b_26@25 b_26@18))) (and (and (= Ops_3Mask@27 Ops_3Mask@24) (= Heap@35 Heap@32)) (and (= Mask@45 Mask@42) (= (ControlFlow 0 282) 281)))) anon154_correct)))
(let ((anon130_correct  (and (=> (= (ControlFlow 0 323) (- 0 324)) (=> (and b_23@56 b_26@18) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_9Mask@11 rcvLocal@2 Node_next)) initNeededTransfer@3)))) (=> (=> (and b_23@56 b_26@18) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_9Mask@11 rcvLocal@2 Node_next)) initNeededTransfer@3))) (=> (and (and (and (= b_29@0  (and b_23@56 b_26@18)) (= b_29@1  (and b_29@0 (state Result_17Heap Result_17Mask)))) (and (= b_29@2  (and b_29@1 (sumMask Result_17Mask Ops_3Mask@24 Used_9Mask@11))) (= b_29@3  (and (and b_29@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_17Heap Ops_3Mask@24)) (IdenticalOnKnownLocations Used_9Heap@0 Result_17Heap Used_9Mask@11))))) (and (and (= b_29@4  (and b_29@3 (state Result_17Heap Result_17Mask))) (= b_23@57  (and b_23@56 b_29@4))) (and (= b_23@58  (and b_23@57 b_26@18)) (= b_23@59  (and b_23@58 (= Used_9Heap@0 Ops_3Heap@0)))))) (and (=> (= (ControlFlow 0 323) 322) anon407_Then_correct) (=> (= (ControlFlow 0 323) 282) anon407_Else_correct)))))))
(let ((anon406_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (= neededTransfer@15 neededTransfer@13) (= b_26@18 b_26@15)) (=> (and (and (= Used_9Mask@11 Used_9Mask@9) (= Heap@32 Heap@30)) (and (= Mask@42 Mask@40) (= (ControlFlow 0 327) 323))) anon130_correct)))))
(let ((anon406_Then_correct  (=> (> takeTransfer@7 0.0) (=> (and (and (= neededTransfer@14 (- neededTransfer@13 takeTransfer@7)) (= Used_9Mask@10 (MapType1Store Used_9Mask@9 rcvLocal@2 Node_next (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@9 rcvLocal@2 Node_next)) takeTransfer@7))))) (and (= b_26@16  (and b_26@15 (state Used_9Heap@0 Used_9Mask@10))) (= b_26@17  (and b_26@16 (= (MapType0Select Heap@30 rcvLocal@2 Node_next) (MapType0Select Used_9Heap@0 rcvLocal@2 Node_next)))))) (=> (and (and (and (= Mask@41 (MapType1Store Mask@40 rcvLocal@2 Node_next (real_2_U (- (U_2_real (MapType1Select Mask@40 rcvLocal@2 Node_next)) takeTransfer@7)))) (= Heap@31 (MapType0Store Heap@30 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) (MapType1Store (MapType0Select Heap@30 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) (MapType0Select Heap@30 (MapType0Select Heap@30 this@@55 Iterator_current) Node_prev) Node_next (bool_2_U true))))) (and (= neededTransfer@15 neededTransfer@14) (= b_26@18 b_26@17))) (and (and (= Used_9Mask@11 Used_9Mask@10) (= Heap@32 Heap@31)) (and (= Mask@42 Mask@41) (= (ControlFlow 0 326) 323)))) anon130_correct)))))
(let ((anon405_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@13) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 329) 326) anon406_Then_correct) (=> (= (ControlFlow 0 329) 327) anon406_Else_correct)))))
(let ((anon405_Then_correct  (=> (and (<= neededTransfer@13 maskTransfer@7) (= takeTransfer@7 neededTransfer@13)) (and (=> (= (ControlFlow 0 328) 326) anon406_Then_correct) (=> (= (ControlFlow 0 328) 327) anon406_Else_correct)))))
(let ((anon404_Then_correct  (=> (and (and (and (and b_23@56 b_26@15) true) (> neededTransfer@13 0.0)) (= maskTransfer@7 (U_2_real (MapType1Select Mask@40 rcvLocal@2 Node_next)))) (and (=> (= (ControlFlow 0 330) 328) anon405_Then_correct) (=> (= (ControlFlow 0 330) 329) anon405_Else_correct)))))
(let ((anon404_Else_correct  (=> (not (and (and (and b_23@56 b_26@15) true) (> neededTransfer@13 0.0))) (=> (and (= neededTransfer@15 neededTransfer@13) (= b_26@18 b_26@15)) (=> (and (and (= Used_9Mask@11 Used_9Mask@9) (= Heap@32 Heap@30)) (and (= Mask@42 Mask@40) (= (ControlFlow 0 325) 323))) anon130_correct)))))
(let ((anon403_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (and (= Ops_3Mask@24 Ops_3Mask@22) (= Used_9Mask@9 Used_9Mask@7)) (and (= b_26@15 b_26@12) (= neededTransfer@13 FullPerm))) (and (=> (= (ControlFlow 0 333) 330) anon404_Then_correct) (=> (= (ControlFlow 0 333) 325) anon404_Else_correct))))))
(let ((anon403_Then_correct  (=> (and (> takeTransfer@6 0.0) (= neededTransfer@12 (- FullPerm takeTransfer@6))) (=> (and (and (and (= Used_9Mask@8 (MapType1Store Used_9Mask@7 rcvLocal@2 Node_next (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@7 rcvLocal@2 Node_next)) takeTransfer@6)))) (= b_26@13  (and b_26@12 (state Used_9Heap@0 Used_9Mask@8)))) (and (= b_26@14  (and b_26@13 (= (MapType0Select Ops_3Heap@0 rcvLocal@2 Node_next) (MapType0Select Used_9Heap@0 rcvLocal@2 Node_next)))) (= Ops_3Mask@23 (MapType1Store Ops_3Mask@22 rcvLocal@2 Node_next (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@22 rcvLocal@2 Node_next)) takeTransfer@6)))))) (and (and (= Ops_3Mask@24 Ops_3Mask@23) (= Used_9Mask@9 Used_9Mask@8)) (and (= b_26@15 b_26@14) (= neededTransfer@13 neededTransfer@12)))) (and (=> (= (ControlFlow 0 332) 330) anon404_Then_correct) (=> (= (ControlFlow 0 332) 325) anon404_Else_correct))))))
(let ((anon402_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 335) 332) anon403_Then_correct) (=> (= (ControlFlow 0 335) 333) anon403_Else_correct)))))
(let ((anon402_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 334) 332) anon403_Then_correct) (=> (= (ControlFlow 0 334) 333) anon403_Else_correct)))))
(let ((anon401_Then_correct  (=> (and (and (and (and b_23@56 b_26@12) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType1Select Ops_3Mask@22 rcvLocal@2 Node_next)))) (and (=> (= (ControlFlow 0 336) 334) anon402_Then_correct) (=> (= (ControlFlow 0 336) 335) anon402_Else_correct)))))
(let ((anon401_Else_correct  (=> (not (and (and (and b_23@56 b_26@12) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@24 Ops_3Mask@22) (= Used_9Mask@9 Used_9Mask@7)) (and (= b_26@15 b_26@12) (= neededTransfer@13 FullPerm))) (and (=> (= (ControlFlow 0 331) 330) anon404_Then_correct) (=> (= (ControlFlow 0 331) 325) anon404_Else_correct))))))
(let ((anon118_correct  (=> (and (= rcvLocal@2 (MapType0Select Result_16Heap (MapType0Select Result_16Heap this@@55 Iterator_current) Node_prev)) (= initNeededTransfer@3 (+ (U_2_real (MapType1Select Used_9Mask@7 rcvLocal@2 Node_next)) FullPerm))) (and (=> (= (ControlFlow 0 337) (- 0 338)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 337) 336) anon401_Then_correct) (=> (= (ControlFlow 0 337) 331) anon401_Else_correct)))))))
(let ((anon400_Else_correct  (=> (and (not b_23@56) (= (ControlFlow 0 343) 337)) anon118_correct)))
(let ((anon400_Then_correct  (=> b_23@56 (and (=> (= (ControlFlow 0 340) (- 0 342)) (HasDirectPerm Result_16Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_16Mask this@@55 Iterator_current) (and (=> (= (ControlFlow 0 340) (- 0 341)) (HasDirectPerm Result_16Mask (MapType0Select Result_16Heap this@@55 Iterator_current) Node_prev)) (=> (HasDirectPerm Result_16Mask (MapType0Select Result_16Heap this@@55 Iterator_current) Node_prev) (=> (= (ControlFlow 0 340) 337) anon118_correct))))))))
(let ((anon399_Then_correct  (=> (and b_23@56 b_26@12) (and (=> (= (ControlFlow 0 344) 340) anon400_Then_correct) (=> (= (ControlFlow 0 344) 343) anon400_Else_correct)))))
(let ((anon399_Else_correct  (=> (and (not (and b_23@56 b_26@12)) (= (ControlFlow 0 339) 337)) anon118_correct)))
(let ((anon115_correct  (and (=> (= (ControlFlow 0 345) (- 0 346)) (=> (and b_23@53 b_26@12) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_9Mask@7 rcvLocal@1 Node_prev)) initNeededTransfer@2)))) (=> (=> (and b_23@53 b_26@12) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_9Mask@7 rcvLocal@1 Node_prev)) initNeededTransfer@2))) (=> (and (and (and (= b_28@0  (and b_23@53 b_26@12)) (= b_28@1  (and b_28@0 (state Result_16Heap Result_16Mask)))) (and (= b_28@2  (and b_28@1 (sumMask Result_16Mask Ops_3Mask@22 Used_9Mask@7))) (= b_28@3  (and (and b_28@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_16Heap Ops_3Mask@22)) (IdenticalOnKnownLocations Used_9Heap@0 Result_16Heap Used_9Mask@7))))) (and (and (= b_28@4  (and b_28@3 (state Result_16Heap Result_16Mask))) (= b_23@54  (and b_23@53 b_28@4))) (and (= b_23@55  (and b_23@54 b_26@12)) (= b_23@56  (and b_23@55 (= Used_9Heap@0 Ops_3Heap@0)))))) (and (=> (= (ControlFlow 0 345) 344) anon399_Then_correct) (=> (= (ControlFlow 0 345) 339) anon399_Else_correct)))))))
(let ((anon398_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (= neededTransfer@11 neededTransfer@9) (= Mask@40 Mask@38)) (=> (and (and (= Heap@30 Heap@28) (= b_26@12 b_26@9)) (and (= Used_9Mask@7 Used_9Mask@5) (= (ControlFlow 0 349) 345))) anon115_correct)))))
(let ((anon398_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (and (= neededTransfer@10 (- neededTransfer@9 takeTransfer@5)) (= Used_9Mask@6 (MapType1Store Used_9Mask@5 rcvLocal@1 Node_prev (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@5 rcvLocal@1 Node_prev)) takeTransfer@5))))) (and (= b_26@10  (and b_26@9 (state Used_9Heap@0 Used_9Mask@6))) (= b_26@11  (and b_26@10 (= (MapType0Select Heap@28 rcvLocal@1 Node_prev) (MapType0Select Used_9Heap@0 rcvLocal@1 Node_prev)))))) (=> (and (and (and (= Mask@39 (MapType1Store Mask@38 rcvLocal@1 Node_prev (real_2_U (- (U_2_real (MapType1Select Mask@38 rcvLocal@1 Node_prev)) takeTransfer@5)))) (= Heap@29 (MapType0Store Heap@28 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) (MapType1Store (MapType0Select Heap@28 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) (MapType0Select Heap@28 (MapType0Select Heap@28 this@@55 Iterator_current) Node_prev) Node_prev (bool_2_U true))))) (and (= neededTransfer@11 neededTransfer@10) (= Mask@40 Mask@39))) (and (and (= Heap@30 Heap@29) (= b_26@12 b_26@11)) (and (= Used_9Mask@7 Used_9Mask@6) (= (ControlFlow 0 348) 345)))) anon115_correct)))))
(let ((anon397_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@9) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 351) 348) anon398_Then_correct) (=> (= (ControlFlow 0 351) 349) anon398_Else_correct)))))
(let ((anon397_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@5) (= takeTransfer@5 neededTransfer@9)) (and (=> (= (ControlFlow 0 350) 348) anon398_Then_correct) (=> (= (ControlFlow 0 350) 349) anon398_Else_correct)))))
(let ((anon396_Then_correct  (=> (and (and (and (and b_23@53 b_26@9) true) (> neededTransfer@9 0.0)) (= maskTransfer@5 (U_2_real (MapType1Select Mask@38 rcvLocal@1 Node_prev)))) (and (=> (= (ControlFlow 0 352) 350) anon397_Then_correct) (=> (= (ControlFlow 0 352) 351) anon397_Else_correct)))))
(let ((anon396_Else_correct  (=> (not (and (and (and b_23@53 b_26@9) true) (> neededTransfer@9 0.0))) (=> (and (= neededTransfer@11 neededTransfer@9) (= Mask@40 Mask@38)) (=> (and (and (= Heap@30 Heap@28) (= b_26@12 b_26@9)) (and (= Used_9Mask@7 Used_9Mask@5) (= (ControlFlow 0 347) 345))) anon115_correct)))))
(let ((anon395_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (and (= Used_9Mask@5 Used_9Mask@3) (= b_26@9 b_26@6)) (and (= neededTransfer@9 FullPerm) (= Ops_3Mask@22 Ops_3Mask@20))) (and (=> (= (ControlFlow 0 355) 352) anon396_Then_correct) (=> (= (ControlFlow 0 355) 347) anon396_Else_correct))))))
(let ((anon395_Then_correct  (=> (and (> takeTransfer@4 0.0) (= neededTransfer@8 (- FullPerm takeTransfer@4))) (=> (and (and (and (= Used_9Mask@4 (MapType1Store Used_9Mask@3 rcvLocal@1 Node_prev (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@3 rcvLocal@1 Node_prev)) takeTransfer@4)))) (= b_26@7  (and b_26@6 (state Used_9Heap@0 Used_9Mask@4)))) (and (= b_26@8  (and b_26@7 (= (MapType0Select Ops_3Heap@0 rcvLocal@1 Node_prev) (MapType0Select Used_9Heap@0 rcvLocal@1 Node_prev)))) (= Ops_3Mask@21 (MapType1Store Ops_3Mask@20 rcvLocal@1 Node_prev (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@20 rcvLocal@1 Node_prev)) takeTransfer@4)))))) (and (and (= Used_9Mask@5 Used_9Mask@4) (= b_26@9 b_26@8)) (and (= neededTransfer@9 neededTransfer@8) (= Ops_3Mask@22 Ops_3Mask@21)))) (and (=> (= (ControlFlow 0 354) 352) anon396_Then_correct) (=> (= (ControlFlow 0 354) 347) anon396_Else_correct))))))
(let ((anon394_Else_correct  (=> (and (< maskTransfer@4 FullPerm) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 357) 354) anon395_Then_correct) (=> (= (ControlFlow 0 357) 355) anon395_Else_correct)))))
(let ((anon394_Then_correct  (=> (and (<= FullPerm maskTransfer@4) (= takeTransfer@4 FullPerm)) (and (=> (= (ControlFlow 0 356) 354) anon395_Then_correct) (=> (= (ControlFlow 0 356) 355) anon395_Else_correct)))))
(let ((anon393_Then_correct  (=> (and (and (and (and b_23@53 b_26@6) true) (> FullPerm 0.0)) (= maskTransfer@4 (U_2_real (MapType1Select Ops_3Mask@20 rcvLocal@1 Node_prev)))) (and (=> (= (ControlFlow 0 358) 356) anon394_Then_correct) (=> (= (ControlFlow 0 358) 357) anon394_Else_correct)))))
(let ((anon393_Else_correct  (=> (not (and (and (and b_23@53 b_26@6) true) (> FullPerm 0.0))) (=> (and (and (= Used_9Mask@5 Used_9Mask@3) (= b_26@9 b_26@6)) (and (= neededTransfer@9 FullPerm) (= Ops_3Mask@22 Ops_3Mask@20))) (and (=> (= (ControlFlow 0 353) 352) anon396_Then_correct) (=> (= (ControlFlow 0 353) 347) anon396_Else_correct))))))
(let ((anon103_correct  (=> (and (= rcvLocal@1 (MapType0Select Result_15Heap (MapType0Select Result_15Heap this@@55 Iterator_current) Node_prev)) (= initNeededTransfer@2 (+ (U_2_real (MapType1Select Used_9Mask@3 rcvLocal@1 Node_prev)) FullPerm))) (and (=> (= (ControlFlow 0 359) (- 0 360)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 359) 358) anon393_Then_correct) (=> (= (ControlFlow 0 359) 353) anon393_Else_correct)))))))
(let ((anon392_Else_correct  (=> (and (not b_23@53) (= (ControlFlow 0 365) 359)) anon103_correct)))
(let ((anon392_Then_correct  (=> b_23@53 (and (=> (= (ControlFlow 0 362) (- 0 364)) (HasDirectPerm Result_15Mask this@@55 Iterator_current)) (=> (HasDirectPerm Result_15Mask this@@55 Iterator_current) (and (=> (= (ControlFlow 0 362) (- 0 363)) (HasDirectPerm Result_15Mask (MapType0Select Result_15Heap this@@55 Iterator_current) Node_prev)) (=> (HasDirectPerm Result_15Mask (MapType0Select Result_15Heap this@@55 Iterator_current) Node_prev) (=> (= (ControlFlow 0 362) 359) anon103_correct))))))))
(let ((anon391_Then_correct  (=> (and b_23@53 b_26@6) (and (=> (= (ControlFlow 0 366) 362) anon392_Then_correct) (=> (= (ControlFlow 0 366) 365) anon392_Else_correct)))))
(let ((anon391_Else_correct  (=> (and (not (and b_23@53 b_26@6)) (= (ControlFlow 0 361) 359)) anon103_correct)))
(let ((anon100_correct  (and (=> (= (ControlFlow 0 367) (- 0 368)) (=> (and b_23@50 b_26@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_9Mask@3 rcvLocal@0 Node_val)) initNeededTransfer@1)))) (=> (=> (and b_23@50 b_26@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_9Mask@3 rcvLocal@0 Node_val)) initNeededTransfer@1))) (=> (and (and (and (= b_27@0  (and b_23@50 b_26@6)) (= b_27@1  (and b_27@0 (state Result_15Heap Result_15Mask)))) (and (= b_27@2  (and b_27@1 (sumMask Result_15Mask Ops_3Mask@20 Used_9Mask@3))) (= b_27@3  (and (and b_27@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_15Heap Ops_3Mask@20)) (IdenticalOnKnownLocations Used_9Heap@0 Result_15Heap Used_9Mask@3))))) (and (and (= b_27@4  (and b_27@3 (state Result_15Heap Result_15Mask))) (= b_23@51  (and b_23@50 b_27@4))) (and (= b_23@52  (and b_23@51 b_26@6)) (= b_23@53  (and b_23@52 (= Used_9Heap@0 Ops_3Heap@0)))))) (and (=> (= (ControlFlow 0 367) 366) anon391_Then_correct) (=> (= (ControlFlow 0 367) 361) anon391_Else_correct)))))))
(let ((anon390_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (= neededTransfer@7 neededTransfer@5) (= Heap@28 Heap@26)) (=> (and (and (= Mask@38 Mask@36) (= b_26@6 b_26@3)) (and (= Used_9Mask@3 Used_9Mask@1) (= (ControlFlow 0 371) 367))) anon100_correct)))))
(let ((anon390_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (and (= neededTransfer@6 (- neededTransfer@5 takeTransfer@3)) (= Used_9Mask@2 (MapType1Store Used_9Mask@1 rcvLocal@0 Node_val (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@1 rcvLocal@0 Node_val)) takeTransfer@3))))) (and (= b_26@4  (and b_26@3 (state Used_9Heap@0 Used_9Mask@2))) (= b_26@5  (and b_26@4 (= (U_2_int (MapType0Select Heap@26 rcvLocal@0 Node_val)) (U_2_int (MapType0Select Used_9Heap@0 rcvLocal@0 Node_val))))))) (=> (and (and (and (= Mask@37 (MapType1Store Mask@36 rcvLocal@0 Node_val (real_2_U (- (U_2_real (MapType1Select Mask@36 rcvLocal@0 Node_val)) takeTransfer@3)))) (= Heap@27 (MapType0Store Heap@26 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) (MapType1Store (MapType0Select Heap@26 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) (MapType0Select Heap@26 (MapType0Select Heap@26 this@@55 Iterator_current) Node_prev) Node_val (bool_2_U true))))) (and (= neededTransfer@7 neededTransfer@6) (= Heap@28 Heap@27))) (and (and (= Mask@38 Mask@37) (= b_26@6 b_26@5)) (and (= Used_9Mask@3 Used_9Mask@2) (= (ControlFlow 0 370) 367)))) anon100_correct)))))
(let ((anon389_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@5) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 373) 370) anon390_Then_correct) (=> (= (ControlFlow 0 373) 371) anon390_Else_correct)))))
(let ((anon389_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@3) (= takeTransfer@3 neededTransfer@5)) (and (=> (= (ControlFlow 0 372) 370) anon390_Then_correct) (=> (= (ControlFlow 0 372) 371) anon390_Else_correct)))))
(let ((anon388_Then_correct  (=> (and (and (and (and b_23@50 b_26@3) true) (> neededTransfer@5 0.0)) (= maskTransfer@3 (U_2_real (MapType1Select Mask@36 rcvLocal@0 Node_val)))) (and (=> (= (ControlFlow 0 374) 372) anon389_Then_correct) (=> (= (ControlFlow 0 374) 373) anon389_Else_correct)))))
(let ((anon388_Else_correct  (=> (not (and (and (and b_23@50 b_26@3) true) (> neededTransfer@5 0.0))) (=> (and (= neededTransfer@7 neededTransfer@5) (= Heap@28 Heap@26)) (=> (and (and (= Mask@38 Mask@36) (= b_26@6 b_26@3)) (and (= Used_9Mask@3 Used_9Mask@1) (= (ControlFlow 0 369) 367))) anon100_correct)))))
(let ((anon387_Else_correct  (=> (>= 0.0 takeTransfer@2) (=> (and (and (= Ops_3Mask@20 Ops_3Mask@18) (= Used_9Mask@1 ZeroMask)) (and (= b_26@3 b_26@0) (= neededTransfer@5 FullPerm))) (and (=> (= (ControlFlow 0 377) 374) anon388_Then_correct) (=> (= (ControlFlow 0 377) 369) anon388_Else_correct))))))
(let ((anon387_Then_correct  (=> (and (> takeTransfer@2 0.0) (= neededTransfer@4 (- FullPerm takeTransfer@2))) (=> (and (and (and (= Used_9Mask@0 (MapType1Store ZeroMask rcvLocal@0 Node_val (real_2_U (+ (U_2_real (MapType1Select ZeroMask rcvLocal@0 Node_val)) takeTransfer@2)))) (= b_26@1  (and b_26@0 (state Used_9Heap@0 Used_9Mask@0)))) (and (= b_26@2  (and b_26@1 (= (U_2_int (MapType0Select Ops_3Heap@0 rcvLocal@0 Node_val)) (U_2_int (MapType0Select Used_9Heap@0 rcvLocal@0 Node_val))))) (= Ops_3Mask@19 (MapType1Store Ops_3Mask@18 rcvLocal@0 Node_val (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@18 rcvLocal@0 Node_val)) takeTransfer@2)))))) (and (and (= Ops_3Mask@20 Ops_3Mask@19) (= Used_9Mask@1 Used_9Mask@0)) (and (= b_26@3 b_26@2) (= neededTransfer@5 neededTransfer@4)))) (and (=> (= (ControlFlow 0 376) 374) anon388_Then_correct) (=> (= (ControlFlow 0 376) 369) anon388_Else_correct))))))
(let ((anon386_Else_correct  (=> (and (< maskTransfer@2 FullPerm) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 379) 376) anon387_Then_correct) (=> (= (ControlFlow 0 379) 377) anon387_Else_correct)))))
(let ((anon386_Then_correct  (=> (and (<= FullPerm maskTransfer@2) (= takeTransfer@2 FullPerm)) (and (=> (= (ControlFlow 0 378) 376) anon387_Then_correct) (=> (= (ControlFlow 0 378) 377) anon387_Else_correct)))))
(let ((anon385_Then_correct  (=> (and (and (and (and b_23@50 b_26@0) true) (> FullPerm 0.0)) (= maskTransfer@2 (U_2_real (MapType1Select Ops_3Mask@18 rcvLocal@0 Node_val)))) (and (=> (= (ControlFlow 0 380) 378) anon386_Then_correct) (=> (= (ControlFlow 0 380) 379) anon386_Else_correct)))))
(let ((anon385_Else_correct  (=> (not (and (and (and b_23@50 b_26@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@20 Ops_3Mask@18) (= Used_9Mask@1 ZeroMask)) (and (= b_26@3 b_26@0) (= neededTransfer@5 FullPerm))) (and (=> (= (ControlFlow 0 375) 374) anon388_Then_correct) (=> (= (ControlFlow 0 375) 369) anon388_Else_correct))))))
(let ((anon88_correct  (=> (and (= rcvLocal@0 (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev)) (= initNeededTransfer@1 (+ (U_2_real (MapType1Select ZeroMask rcvLocal@0 Node_val)) FullPerm))) (and (=> (= (ControlFlow 0 381) (- 0 382)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 381) 380) anon385_Then_correct) (=> (= (ControlFlow 0 381) 375) anon385_Else_correct)))))))
(let ((anon384_Else_correct  (=> (and (not b_23@50) (= (ControlFlow 0 387) 381)) anon88_correct)))
(let ((anon384_Then_correct  (=> b_23@50 (and (=> (= (ControlFlow 0 384) (- 0 386)) (HasDirectPerm Ops_3Mask@18 this@@55 Iterator_current)) (=> (HasDirectPerm Ops_3Mask@18 this@@55 Iterator_current) (and (=> (= (ControlFlow 0 384) (- 0 385)) (HasDirectPerm Ops_3Mask@18 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev)) (=> (HasDirectPerm Ops_3Mask@18 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev) (=> (= (ControlFlow 0 384) 381) anon88_correct))))))))
(let ((anon383_Then_correct  (=> (and b_23@50 b_26@0) (and (=> (= (ControlFlow 0 388) 384) anon384_Then_correct) (=> (= (ControlFlow 0 388) 387) anon384_Else_correct)))))
(let ((anon383_Else_correct  (=> (and (not (and b_23@50 b_26@0)) (= (ControlFlow 0 383) 381)) anon88_correct)))
(let ((anon85_correct  (=> (= b_26@0  (and b_26 (state Used_9Heap@0 ZeroMask))) (and (=> (= (ControlFlow 0 389) 388) anon383_Then_correct) (=> (= (ControlFlow 0 389) 383) anon383_Else_correct)))))
(let ((anon382_Else_correct  (=> (and (not b_23@50) (= (ControlFlow 0 393) 389)) anon85_correct)))
(let ((anon382_Then_correct  (=> b_23@50 (and (=> (= (ControlFlow 0 390) (- 0 392)) (HasDirectPerm Ops_3Mask@18 this@@55 Iterator_current)) (=> (HasDirectPerm Ops_3Mask@18 this@@55 Iterator_current) (and (=> (= (ControlFlow 0 390) (- 0 391)) (HasDirectPerm Ops_3Mask@18 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev)) (=> (HasDirectPerm Ops_3Mask@18 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev) (=> (= (ControlFlow 0 390) 389) anon85_correct))))))))
(let ((anon381_Then_correct  (=> b_23@50 (and (=> (= (ControlFlow 0 394) 390) anon382_Then_correct) (=> (= (ControlFlow 0 394) 393) anon382_Else_correct)))))
(let ((anon381_Else_correct  (=> (and (not b_23@50) (= Ops_3Heap@9 Ops_3Heap@0)) (=> (and (and (= Ops_3Mask@29 Ops_3Mask@18) (= Heap@36 Heap@26)) (and (= Mask@46 Mask@36) (= b_23@70 b_23@50))) (and (=> (= (ControlFlow 0 274) 272) anon422_Then_correct) (=> (= (ControlFlow 0 274) 22) anon422_Else_correct))))))
(let ((anon81_correct  (=> (= b_23@47  (and b_23@46 (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_next) (MapType0Select Ops_3Heap@0 this@@55 Iterator_current)))) (=> (and (= b_23@48  (and b_23@47 (state Ops_3Heap@0 Ops_3Mask@17))) (= b_23@49  (and b_23@48 (state Ops_3Heap@0 Ops_3Mask@17)))) (=> (and (and (= Mask@36 Mask@35) (= Heap@26 Heap@25)) (and (= b_23@50 b_23@49) (= Ops_3Mask@18 Ops_3Mask@17))) (and (=> (= (ControlFlow 0 396) 394) anon381_Then_correct) (=> (= (ControlFlow 0 396) 274) anon381_Else_correct)))))))
(let ((anon380_Else_correct  (=> (and (and (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev) null) (= Ops_3Mask@17 Ops_3Mask@15)) (and (= b_23@46 b_23@39) (= (ControlFlow 0 398) 396))) anon81_correct)))
(let ((anon380_Then_correct  (=> (not (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev) null)) (=> (and (= Ops_3Mask@16 (MapType1Store Ops_3Mask@15 null (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev)) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@15 null (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev)))) FullPerm)))) (= b_23@40  (and b_23@39 (InsidePredicate (Iterator_readyForRemove this@@55) (MapType0Select Ops_3Heap@0 null (Iterator_readyForRemove this@@55)) (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev)) (MapType0Select Ops_3Heap@0 null (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev))))))) (=> (and (and (and (= b_23@41  (and b_23@40 (state Ops_3Heap@0 Ops_3Mask@16))) (= b_23@42  (and b_23@41 (state Ops_3Heap@0 Ops_3Mask@16)))) (and (= b_23@43  (and b_23@42 (= (Node_first Ops_3Heap@0 (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev)) (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_iteratee) List_sentinel)))) (= b_23@44  (and b_23@43 (state Ops_3Heap@0 Ops_3Mask@16))))) (and (and (= b_23@45  (and b_23@44 (= (Node_rev_next Ops_3Heap@0 (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev)) (MapType0Select Ops_3Heap@0 this@@55 Iterator_last)))) (= Ops_3Mask@17 Ops_3Mask@16)) (and (= b_23@46 b_23@45) (= (ControlFlow 0 397) 396)))) anon81_correct)))))
(let ((anon379_Else_correct  (=> (and (not (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev) null)) (= b_23@39 b_23@37)) (and (=> (= (ControlFlow 0 400) 397) anon380_Then_correct) (=> (= (ControlFlow 0 400) 398) anon380_Else_correct)))))
(let ((anon379_Then_correct  (=> (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev) null) (=> (and (= b_23@38  (and b_23@37 (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_iteratee) List_sentinel)))) (= b_23@39 b_23@38)) (and (=> (= (ControlFlow 0 399) 397) anon380_Then_correct) (=> (= (ControlFlow 0 399) 398) anon380_Else_correct))))))
(let ((anon77_correct  (=> (= b_23@30  (and b_23@29 (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev) (MapType0Select Ops_3Heap@0 this@@55 Iterator_last)))) (=> (and (= b_23@31  (and b_23@30 (not (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) null)))) (= b_23@32  (and b_23@31 (not (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) null))))) (=> (and (and (and (= Ops_3Mask@13 (MapType1Store Ops_3Mask@12 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_val (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@12 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_val)) FullPerm)))) (= b_23@33  (and b_23@32 (state Ops_3Heap@0 Ops_3Mask@13)))) (and (= b_23@34  (and b_23@33 (not (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) null)))) (= Ops_3Mask@14 (MapType1Store Ops_3Mask@13 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_next (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@13 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_next)) FullPerm)))))) (and (and (= b_23@35  (and b_23@34 (state Ops_3Heap@0 Ops_3Mask@14))) (= b_23@36  (and b_23@35 (not (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) null))))) (and (= Ops_3Mask@15 (MapType1Store Ops_3Mask@14 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@14 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev)) FullPerm)))) (= b_23@37  (and b_23@36 (state Ops_3Heap@0 Ops_3Mask@15)))))) (and (=> (= (ControlFlow 0 401) 399) anon379_Then_correct) (=> (= (ControlFlow 0 401) 400) anon379_Else_correct)))))))
(let ((anon378_Else_correct  (=> (and (and (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_next) null) (= b_23@29 b_23@26)) (and (= Ops_3Mask@12 Ops_3Mask@10) (= (ControlFlow 0 403) 401))) anon77_correct)))
(let ((anon378_Then_correct  (=> (not (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_next) null)) (=> (and (= Ops_3Mask@11 (MapType1Store Ops_3Mask@10 null (Node_state (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_next)) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@10 null (Node_state (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_next)))) FullPerm)))) (= b_23@27  (and b_23@26 (InsidePredicate (Iterator_readyForRemove this@@55) (MapType0Select Ops_3Heap@0 null (Iterator_readyForRemove this@@55)) (Node_state (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_next)) (MapType0Select Ops_3Heap@0 null (Node_state (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_next))))))) (=> (and (and (= b_23@28  (and b_23@27 (state Ops_3Heap@0 Ops_3Mask@11))) (= b_23@29 b_23@28)) (and (= Ops_3Mask@12 Ops_3Mask@11) (= (ControlFlow 0 402) 401))) anon77_correct)))))
(let ((anon377_Else_correct  (=> (and (not (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev) null)) (= b_23@26 b_23@24)) (and (=> (= (ControlFlow 0 405) 402) anon378_Then_correct) (=> (= (ControlFlow 0 405) 403) anon378_Else_correct)))))
(let ((anon377_Then_correct  (=> (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev) null) (=> (and (= b_23@25  (and b_23@24 (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_iteratee) List_sentinel)))) (= b_23@26 b_23@25)) (and (=> (= (ControlFlow 0 404) 402) anon378_Then_correct) (=> (= (ControlFlow 0 404) 403) anon378_Else_correct))))))
(let ((anon73_correct  (and (=> (= (ControlFlow 0 406) (- 0 408)) (=> (and b_23@4 b_24@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_8Mask@3 null (Iterator_readyForRemove this@@55))) initNeededTransfer@0)))) (=> (=> (and b_23@4 b_24@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_8Mask@3 null (Iterator_readyForRemove this@@55))) initNeededTransfer@0))) (=> (= b_25@0  (and b_23@4 b_24@6)) (=> (and (and (and (= b_25@1  (and b_25@0 (state Result_14Heap Result_14Mask))) (= b_25@2  (and b_25@1 (sumMask Result_14Mask Ops_3Mask@3 Used_8Mask@3)))) (and (= b_25@3  (and (and b_25@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_14Heap Ops_3Mask@3)) (IdenticalOnKnownLocations Used_8Heap@0 Result_14Heap Used_8Mask@3))) (= b_25@4  (and b_25@3 (state Result_14Heap Result_14Mask))))) (and (and (= b_23@5  (and b_23@4 b_25@4)) (= b_23@6  (and b_23@5 b_24@6))) (and (= b_23@7  (and b_23@6 (= Used_8Heap@0 Ops_3Heap@0))) (= perm@2 (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 406) (- 0 407)) (>= perm@2 NoPerm)) (=> (>= perm@2 NoPerm) (=> (and (and (and (= b_23@8  (and b_23@7 (=> (> perm@2 NoPerm) (not (= this@@55 null))))) (= Ops_3Mask@4 (MapType1Store Ops_3Mask@3 this@@55 Iterator_iteratee (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@3 this@@55 Iterator_iteratee)) perm@2))))) (and (= b_23@9  (and b_23@8 (state Ops_3Heap@0 Ops_3Mask@4))) (= b_23@10  (and b_23@9 (not (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_iteratee) null)))))) (and (and (= b_23@11  (and b_23@10 (not (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_iteratee) null)))) (= Ops_3Mask@5 (MapType1Store Ops_3Mask@4 (MapType0Select Ops_3Heap@0 this@@55 Iterator_iteratee) List_sentinel (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@4 (MapType0Select Ops_3Heap@0 this@@55 Iterator_iteratee) List_sentinel)) FullPerm))))) (and (= b_23@12  (and b_23@11 (state Ops_3Heap@0 Ops_3Mask@5))) (= b_23@13  (and b_23@12 (not (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_iteratee) List_sentinel) null))))))) (=> (and (and (and (and (= b_23@14  (and b_23@13 (not (= this@@55 null)))) (= Ops_3Mask@6 (MapType1Store Ops_3Mask@5 this@@55 Iterator_current (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@5 this@@55 Iterator_current)) FullPerm))))) (and (= b_23@15  (and b_23@14 (state Ops_3Heap@0 Ops_3Mask@6))) (= b_23@16  (and b_23@15 (not (= this@@55 null)))))) (and (and (= Ops_3Mask@7 (MapType1Store Ops_3Mask@6 this@@55 Iterator_last (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@6 this@@55 Iterator_last)) FullPerm)))) (= b_23@17  (and b_23@16 (state Ops_3Heap@0 Ops_3Mask@7)))) (and (= b_23@18  (and b_23@17 (not (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) null)))) (= b_23@19  (and b_23@18 (not (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) null))))))) (and (and (and (= Ops_3Mask@8 (MapType1Store Ops_3Mask@7 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_val (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@7 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_val)) FullPerm)))) (= b_23@20  (and b_23@19 (state Ops_3Heap@0 Ops_3Mask@8)))) (and (= b_23@21  (and b_23@20 (not (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) null)))) (= Ops_3Mask@9 (MapType1Store Ops_3Mask@8 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_next (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@8 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_next)) FullPerm)))))) (and (and (= b_23@22  (and b_23@21 (state Ops_3Heap@0 Ops_3Mask@9))) (= b_23@23  (and b_23@22 (not (= (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) null))))) (and (= Ops_3Mask@10 (MapType1Store Ops_3Mask@9 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@9 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev)) FullPerm)))) (= b_23@24  (and b_23@23 (state Ops_3Heap@0 Ops_3Mask@10))))))) (and (=> (= (ControlFlow 0 406) 404) anon377_Then_correct) (=> (= (ControlFlow 0 406) 405) anon377_Else_correct))))))))))))
(let ((anon376_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Heap@25 Heap@23) (= Mask@35 Mask@33)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_24@6 b_24@3)) (and (= Used_8Mask@3 Used_8Mask@1) (= (ControlFlow 0 411) 406))) anon73_correct)))))
(let ((anon376_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1)) (= Used_8Mask@2 (MapType1Store Used_8Mask@1 null (Iterator_readyForRemove this@@55) (real_2_U (+ (U_2_real (MapType1Select Used_8Mask@1 null (Iterator_readyForRemove this@@55))) takeTransfer@1))))) (=> (and (and (= b_24@4  (and b_24@3 (state Used_8Heap@0 Used_8Mask@2))) (= TempMask@1 (MapType1Store ZeroMask null (Iterator_readyForRemove this@@55) (real_2_U FullPerm)))) (and (= b_24@5  (and b_24@4 (IdenticalOnKnownLocations Heap@23 Used_8Heap@0 TempMask@1))) (= Mask@34 (MapType1Store Mask@33 null (Iterator_readyForRemove this@@55) (real_2_U (- (U_2_real (MapType1Select Mask@33 null (Iterator_readyForRemove this@@55))) takeTransfer@1)))))) (=> (and (and (and (forall ((o_24 T@U) (f_28 T@U) ) (! (let ((B@@18 (FieldTypeInv1 (type f_28))))
(let ((A@@19 (FieldTypeInv0 (type f_28))))
 (=> (and (and (= (type o_24) RefType) (= (type f_28) (FieldType A@@19 B@@18))) (or (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm)) o_24 f_28)) (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|Iterator_readyForRemove#sm| this@@55)) o_24 f_28)))) (U_2_bool (MapType1Select newPMask@2 o_24 f_28)))))
 :qid |stdinbpl.4951:39|
 :skolemid |113|
 :pattern ( (MapType1Select newPMask@2 o_24 f_28))
)) (= Heap@24 (MapType0Store Heap@23 null (|wand#sm| this@@55 FullPerm this@@55 FullPerm) newPMask@2))) (and (= Heap@25 Heap@24) (= Mask@35 Mask@34))) (and (and (= neededTransfer@3 neededTransfer@2) (= b_24@6 b_24@5)) (and (= Used_8Mask@3 Used_8Mask@2) (= (ControlFlow 0 410) 406)))) anon73_correct))))))
(let ((anon375_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 413) 410) anon376_Then_correct) (=> (= (ControlFlow 0 413) 411) anon376_Else_correct)))))
(let ((anon375_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 412) 410) anon376_Then_correct) (=> (= (ControlFlow 0 412) 411) anon376_Else_correct)))))
(let ((anon374_Then_correct  (=> (and (and (and (and b_23@4 b_24@3) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType1Select Mask@33 null (Iterator_readyForRemove this@@55))))) (and (=> (= (ControlFlow 0 414) 412) anon375_Then_correct) (=> (= (ControlFlow 0 414) 413) anon375_Else_correct)))))
(let ((anon374_Else_correct  (=> (not (and (and (and b_23@4 b_24@3) true) (> neededTransfer@1 0.0))) (=> (and (= Heap@25 Heap@23) (= Mask@35 Mask@33)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_24@6 b_24@3)) (and (= Used_8Mask@3 Used_8Mask@1) (= (ControlFlow 0 409) 406))) anon73_correct)))))
(let ((anon373_Else_correct  (=> (>= 0.0 takeTransfer@0) (=> (and (and (= Ops_3Mask@3 Ops_3Mask@1) (= Used_8Mask@1 ZeroMask)) (and (= b_24@3 b_24@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 417) 414) anon374_Then_correct) (=> (= (ControlFlow 0 417) 409) anon374_Else_correct))))))
(let ((anon373_Then_correct  (=> (> takeTransfer@0 0.0) (=> (and (= neededTransfer@0 (- FullPerm takeTransfer@0)) (= Used_8Mask@0 (MapType1Store ZeroMask null (Iterator_readyForRemove this@@55) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Iterator_readyForRemove this@@55))) takeTransfer@0))))) (=> (and (and (and (= b_24@1  (and b_24@0 (state Used_8Heap@0 Used_8Mask@0))) (= TempMask@0 (MapType1Store ZeroMask null (Iterator_readyForRemove this@@55) (real_2_U FullPerm)))) (and (= b_24@2  (and b_24@1 (IdenticalOnKnownLocations Ops_3Heap@0 Used_8Heap@0 TempMask@0))) (= Ops_3Mask@2 (MapType1Store Ops_3Mask@1 null (Iterator_readyForRemove this@@55) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@1 null (Iterator_readyForRemove this@@55))) takeTransfer@0)))))) (and (and (= Ops_3Mask@3 Ops_3Mask@2) (= Used_8Mask@1 Used_8Mask@0)) (and (= b_24@3 b_24@2) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 416) 414) anon374_Then_correct) (=> (= (ControlFlow 0 416) 409) anon374_Else_correct)))))))
(let ((anon372_Else_correct  (=> (and (< maskTransfer@0 FullPerm) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 419) 416) anon373_Then_correct) (=> (= (ControlFlow 0 419) 417) anon373_Else_correct)))))
(let ((anon372_Then_correct  (=> (and (<= FullPerm maskTransfer@0) (= takeTransfer@0 FullPerm)) (and (=> (= (ControlFlow 0 418) 416) anon373_Then_correct) (=> (= (ControlFlow 0 418) 417) anon373_Else_correct)))))
(let ((anon371_Then_correct  (=> (and (and (and (and b_23@4 b_24@0) true) (> FullPerm 0.0)) (= maskTransfer@0 (U_2_real (MapType1Select Ops_3Mask@1 null (Iterator_readyForRemove this@@55))))) (and (=> (= (ControlFlow 0 420) 418) anon372_Then_correct) (=> (= (ControlFlow 0 420) 419) anon372_Else_correct)))))
(let ((anon371_Else_correct  (=> (not (and (and (and b_23@4 b_24@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@3 Ops_3Mask@1) (= Used_8Mask@1 ZeroMask)) (and (= b_24@3 b_24@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 415) 414) anon374_Then_correct) (=> (= (ControlFlow 0 415) 409) anon374_Else_correct))))))
(let ((anon370_Then_correct  (=> b_23@4 (=> (and (and (|Iterator_readyForRemove#trigger| Ops_3Heap@0 (Iterator_readyForRemove this@@55)) (= (MapType0Select Ops_3Heap@0 null (Iterator_readyForRemove this@@55)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 this@@55 Iterator_iteratee)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_iteratee) List_sentinel)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 this@@55 Iterator_current)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 this@@55 Iterator_last)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_val)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_next)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev)) (CombineFrames (FrameFragment (ite (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_prev) null) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_next) null)) (MapType0Select Ops_3Heap@0 null (Node_state (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_current) Node_next))) EmptyFrame)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_val)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_next)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev)) (CombineFrames (FrameFragment (ite (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev) null) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev) null)) (MapType0Select Ops_3Heap@0 null (Node_reverse (MapType0Select Ops_3Heap@0 (MapType0Select Ops_3Heap@0 this@@55 Iterator_last) Node_prev))) EmptyFrame))))))))))))))))) (and (= b_24@0  (and b_24 (state Used_8Heap@0 ZeroMask))) (= initNeededTransfer@0 (+ (U_2_real (MapType1Select ZeroMask null (Iterator_readyForRemove this@@55))) FullPerm)))) (and (=> (= (ControlFlow 0 421) (- 0 422)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 421) 420) anon371_Then_correct) (=> (= (ControlFlow 0 421) 415) anon371_Else_correct))))))))
(let ((anon370_Else_correct  (=> (not b_23@4) (=> (and (and (= Mask@36 Mask@33) (= Heap@26 Heap@23)) (and (= b_23@50 b_23@4) (= Ops_3Mask@18 Ops_3Mask@1))) (and (=> (= (ControlFlow 0 395) 394) anon381_Then_correct) (=> (= (ControlFlow 0 395) 274) anon381_Else_correct))))))
(let ((anon60_correct  (=> (and (= b_23@3  (and b_23@2 (state Ops_3Heap@0 Ops_3Mask@1))) (= b_23@4  (and b_23@3 (state Ops_3Heap@0 Ops_3Mask@1)))) (and (=> (= (ControlFlow 0 423) 421) anon370_Then_correct) (=> (= (ControlFlow 0 423) 395) anon370_Else_correct)))))
(let ((anon369_Else_correct  (=> (and (and (not b_23@0) (= Ops_3Mask@1 ZeroMask)) (and (= b_23@2 b_23@0) (= (ControlFlow 0 425) 423))) anon60_correct)))
(let ((anon369_Then_correct  (=> (and b_23@0 (= Ops_3Mask@0 (MapType1Store ZeroMask null (Iterator_readyForRemove this@@55) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Iterator_readyForRemove this@@55))) FullPerm))))) (=> (and (and (= b_23@1  (and b_23@0 (state Ops_3Heap@0 Ops_3Mask@0))) (= Ops_3Mask@1 Ops_3Mask@0)) (and (= b_23@2 b_23@1) (= (ControlFlow 0 424) 423))) anon60_correct))))
(let ((anon58_correct  (=> (and (and (state Heap@23 Mask@33) (state Heap@23 Mask@33)) (and (= b_23@0  (and b_23 (state Ops_3Heap@0 ZeroMask))) (= b_22@0  (and b_22 (state Used_7Heap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 426) 424) anon369_Then_correct) (=> (= (ControlFlow 0 426) 425) anon369_Else_correct)))))
(let ((anon368_Else_correct  (=> (= (MapType0Select Heap@21 (MapType0Select Heap@21 this@@55 Iterator_last) Node_prev) null) (=> (and (= Heap@23 Heap@21) (= (ControlFlow 0 428) 426)) anon58_correct))))
(let ((anon368_Then_correct  (=> (not (= (MapType0Select Heap@21 (MapType0Select Heap@21 this@@55 Iterator_last) Node_prev) null)) (=> (and (and (forall ((o_23 T@U) (f_27 T@U) ) (! (let ((B@@19 (FieldTypeInv1 (type f_27))))
(let ((A@@20 (FieldTypeInv0 (type f_27))))
 (=> (and (and (= (type o_23) RefType) (= (type f_27) (FieldType A@@20 B@@19))) (or (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|Iterator_readyForRemove#sm| this@@55)) o_23 f_27)) (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|Node_reverse#sm| (MapType0Select Heap@21 (MapType0Select Heap@21 this@@55 Iterator_last) Node_prev))) o_23 f_27)))) (U_2_bool (MapType1Select newPMask@1 o_23 f_27)))))
 :qid |stdinbpl.4857:29|
 :skolemid |112|
 :pattern ( (MapType1Select newPMask@1 o_23 f_27))
)) (= Heap@22 (MapType0Store Heap@21 null (|Iterator_readyForRemove#sm| this@@55) newPMask@1))) (and (= Heap@23 Heap@22) (= (ControlFlow 0 427) 426))) anon58_correct))))
(let ((anon56_correct  (=> (= Heap@19 (MapType0Store Heap@18 null (|Iterator_readyForRemove#sm| this@@55) (MapType1Store (MapType0Select Heap@18 null (|Iterator_readyForRemove#sm| this@@55)) (MapType0Select Heap@18 this@@55 Iterator_last) Node_val (bool_2_U true)))) (=> (and (= Heap@20 (MapType0Store Heap@19 null (|Iterator_readyForRemove#sm| this@@55) (MapType1Store (MapType0Select Heap@19 null (|Iterator_readyForRemove#sm| this@@55)) (MapType0Select Heap@19 this@@55 Iterator_last) Node_next (bool_2_U true)))) (= Heap@21 (MapType0Store Heap@20 null (|Iterator_readyForRemove#sm| this@@55) (MapType1Store (MapType0Select Heap@20 null (|Iterator_readyForRemove#sm| this@@55)) (MapType0Select Heap@20 this@@55 Iterator_last) Node_prev (bool_2_U true))))) (and (=> (= (ControlFlow 0 429) 427) anon368_Then_correct) (=> (= (ControlFlow 0 429) 428) anon368_Else_correct))))))
(let ((anon367_Else_correct  (=> (= (MapType0Select Heap@16 (MapType0Select Heap@16 this@@55 Iterator_current) Node_next) null) (=> (and (= Heap@18 Heap@16) (= (ControlFlow 0 431) 429)) anon56_correct))))
(let ((anon367_Then_correct  (=> (not (= (MapType0Select Heap@16 (MapType0Select Heap@16 this@@55 Iterator_current) Node_next) null)) (=> (and (and (forall ((o_22 T@U) (f_26 T@U) ) (! (let ((B@@20 (FieldTypeInv1 (type f_26))))
(let ((A@@21 (FieldTypeInv0 (type f_26))))
 (=> (and (and (= (type o_22) RefType) (= (type f_26) (FieldType A@@21 B@@20))) (or (U_2_bool (MapType1Select (MapType0Select Heap@16 null (|Iterator_readyForRemove#sm| this@@55)) o_22 f_26)) (U_2_bool (MapType1Select (MapType0Select Heap@16 null (|Node_state#sm| (MapType0Select Heap@16 (MapType0Select Heap@16 this@@55 Iterator_current) Node_next))) o_22 f_26)))) (U_2_bool (MapType1Select newPMask@0 o_22 f_26)))))
 :qid |stdinbpl.4846:29|
 :skolemid |111|
 :pattern ( (MapType1Select newPMask@0 o_22 f_26))
)) (= Heap@17 (MapType0Store Heap@16 null (|Iterator_readyForRemove#sm| this@@55) newPMask@0))) (and (= Heap@18 Heap@17) (= (ControlFlow 0 430) 429))) anon56_correct))))
(let ((anon54_correct  (=> (= Heap@10 (MapType0Store Heap@9 null (|Iterator_readyForRemove#sm| this@@55) (MapType1Store (MapType0Select Heap@9 null (|Iterator_readyForRemove#sm| this@@55)) this@@55 Iterator_iteratee (bool_2_U true)))) (=> (and (= Heap@11 (MapType0Store Heap@10 null (|Iterator_readyForRemove#sm| this@@55) (MapType1Store (MapType0Select Heap@10 null (|Iterator_readyForRemove#sm| this@@55)) (MapType0Select Heap@10 this@@55 Iterator_iteratee) List_sentinel (bool_2_U true)))) (= Heap@12 (MapType0Store Heap@11 null (|Iterator_readyForRemove#sm| this@@55) (MapType1Store (MapType0Select Heap@11 null (|Iterator_readyForRemove#sm| this@@55)) this@@55 Iterator_current (bool_2_U true))))) (=> (and (and (= Heap@13 (MapType0Store Heap@12 null (|Iterator_readyForRemove#sm| this@@55) (MapType1Store (MapType0Select Heap@12 null (|Iterator_readyForRemove#sm| this@@55)) this@@55 Iterator_last (bool_2_U true)))) (= Heap@14 (MapType0Store Heap@13 null (|Iterator_readyForRemove#sm| this@@55) (MapType1Store (MapType0Select Heap@13 null (|Iterator_readyForRemove#sm| this@@55)) (MapType0Select Heap@13 this@@55 Iterator_current) Node_val (bool_2_U true))))) (and (= Heap@15 (MapType0Store Heap@14 null (|Iterator_readyForRemove#sm| this@@55) (MapType1Store (MapType0Select Heap@14 null (|Iterator_readyForRemove#sm| this@@55)) (MapType0Select Heap@14 this@@55 Iterator_current) Node_next (bool_2_U true)))) (= Heap@16 (MapType0Store Heap@15 null (|Iterator_readyForRemove#sm| this@@55) (MapType1Store (MapType0Select Heap@15 null (|Iterator_readyForRemove#sm| this@@55)) (MapType0Select Heap@15 this@@55 Iterator_current) Node_prev (bool_2_U true)))))) (and (=> (= (ControlFlow 0 432) 430) anon367_Then_correct) (=> (= (ControlFlow 0 432) 431) anon367_Else_correct)))))))
(let ((anon366_Else_correct  (=> (HasDirectPerm Mask@33 null (Iterator_readyForRemove this@@55)) (=> (and (= Heap@9 Heap@6) (= (ControlFlow 0 434) 432)) anon54_correct))))
(let ((anon366_Then_correct  (=> (not (HasDirectPerm Mask@33 null (Iterator_readyForRemove this@@55))) (=> (and (and (= Heap@7 (MapType0Store Heap@6 null (|Iterator_readyForRemove#sm| this@@55) ZeroPMask)) (= Heap@8 (MapType0Store Heap@7 null (Iterator_readyForRemove this@@55) freshVersion@0))) (and (= Heap@9 Heap@8) (= (ControlFlow 0 433) 432))) anon54_correct))))
(let ((anon52_correct  (and (=> (= (ControlFlow 0 435) (- 0 436)) (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_next) (MapType0Select Heap@6 this@@55 Iterator_current))) (=> (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_next) (MapType0Select Heap@6 this@@55 Iterator_current)) (=> (= Mask@33 (MapType1Store Mask@32 null (Iterator_readyForRemove this@@55) (real_2_U (+ (U_2_real (MapType1Select Mask@32 null (Iterator_readyForRemove this@@55))) FullPerm)))) (=> (and (and (state Heap@6 Mask@33) (state Heap@6 Mask@33)) (and (|Iterator_readyForRemove#trigger| Heap@6 (Iterator_readyForRemove this@@55)) (= (MapType0Select Heap@6 null (Iterator_readyForRemove this@@55)) (CombineFrames (FrameFragment (MapType0Select Heap@6 this@@55 Iterator_iteratee)) (CombineFrames (FrameFragment (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel)) (CombineFrames (FrameFragment (MapType0Select Heap@6 this@@55 Iterator_current)) (CombineFrames (FrameFragment (MapType0Select Heap@6 this@@55 Iterator_last)) (CombineFrames (FrameFragment (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_val)) (CombineFrames (FrameFragment (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next)) (CombineFrames (FrameFragment (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_prev)) (CombineFrames (FrameFragment (ite (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_prev) null) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next) null)) (MapType0Select Heap@6 null (Node_state (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next))) EmptyFrame)) (CombineFrames (FrameFragment (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_val)) (CombineFrames (FrameFragment (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_next)) (CombineFrames (FrameFragment (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev)) (CombineFrames (FrameFragment (ite (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev) null) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev) null)) (MapType0Select Heap@6 null (Node_reverse (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev))) EmptyFrame)))))))))))))))))) (and (=> (= (ControlFlow 0 435) 433) anon366_Then_correct) (=> (= (ControlFlow 0 435) 434) anon366_Else_correct))))))))
(let ((anon51_correct  (=> (and (= Mask@31 (MapType1Store Mask@30 null (Node_reverse (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev)) (real_2_U (- (U_2_real (MapType1Select Mask@30 null (Node_reverse (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev)))) FullPerm)))) (InsidePredicate (Iterator_readyForRemove this@@55) (MapType0Select Heap@6 null (Iterator_readyForRemove this@@55)) (Node_reverse (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev)) (MapType0Select Heap@6 null (Node_reverse (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev))))) (and (=> (= (ControlFlow 0 438) (- 0 440)) (= (Node_first Heap@6 (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev)) (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel))) (=> (= (Node_first Heap@6 (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev)) (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel)) (and (=> (= (ControlFlow 0 438) (- 0 439)) (= (Node_rev_next Heap@6 (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev)) (MapType0Select Heap@6 this@@55 Iterator_last))) (=> (= (Node_rev_next Heap@6 (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev)) (MapType0Select Heap@6 this@@55 Iterator_last)) (=> (and (= Mask@32 Mask@31) (= (ControlFlow 0 438) 435)) anon52_correct))))))))
(let ((anon365_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 443) 438)) anon51_correct)))
(let ((anon365_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 441) (- 0 442)) (<= FullPerm (U_2_real (MapType1Select Mask@30 null (Node_reverse (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@30 null (Node_reverse (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev))))) (=> (= (ControlFlow 0 441) 438) anon51_correct))))))
(let ((anon364_Then_correct  (=> (not (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev) null)) (and (=> (= (ControlFlow 0 444) 441) anon365_Then_correct) (=> (= (ControlFlow 0 444) 443) anon365_Else_correct)))))
(let ((anon364_Else_correct  (=> (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev) null) (=> (and (= Mask@32 Mask@30) (= (ControlFlow 0 437) 435)) anon52_correct))))
(let ((anon363_Else_correct  (=> (not (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev) null)) (and (=> (= (ControlFlow 0 447) 444) anon364_Then_correct) (=> (= (ControlFlow 0 447) 437) anon364_Else_correct)))))
(let ((anon363_Then_correct  (=> (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev) null) (and (=> (= (ControlFlow 0 445) (- 0 446)) (= (MapType0Select Heap@6 this@@55 Iterator_last) (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel))) (=> (= (MapType0Select Heap@6 this@@55 Iterator_last) (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel)) (and (=> (= (ControlFlow 0 445) 444) anon364_Then_correct) (=> (= (ControlFlow 0 445) 437) anon364_Else_correct)))))))
(let ((anon46_correct  (=> (= Mask@30 (MapType1Store Mask@29 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev (real_2_U (- (U_2_real (MapType1Select Mask@29 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev)) FullPerm)))) (and (=> (= (ControlFlow 0 448) 445) anon363_Then_correct) (=> (= (ControlFlow 0 448) 447) anon363_Else_correct)))))
(let ((anon362_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 451) 448)) anon46_correct)))
(let ((anon362_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 449) (- 0 450)) (<= FullPerm (U_2_real (MapType1Select Mask@29 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 (MapType0Select Heap@6 this@@55 Iterator_last) Node_prev))) (=> (= (ControlFlow 0 449) 448) anon46_correct))))))
(let ((anon44_correct  (=> (= Mask@29 (MapType1Store Mask@28 (MapType0Select Heap@6 this@@55 Iterator_last) Node_next (real_2_U (- (U_2_real (MapType1Select Mask@28 (MapType0Select Heap@6 this@@55 Iterator_last) Node_next)) FullPerm)))) (and (=> (= (ControlFlow 0 452) 449) anon362_Then_correct) (=> (= (ControlFlow 0 452) 451) anon362_Else_correct)))))
(let ((anon361_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 455) 452)) anon44_correct)))
(let ((anon361_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 453) (- 0 454)) (<= FullPerm (U_2_real (MapType1Select Mask@28 (MapType0Select Heap@6 this@@55 Iterator_last) Node_next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@28 (MapType0Select Heap@6 this@@55 Iterator_last) Node_next))) (=> (= (ControlFlow 0 453) 452) anon44_correct))))))
(let ((anon42_correct  (=> (= Mask@28 (MapType1Store Mask@27 (MapType0Select Heap@6 this@@55 Iterator_last) Node_val (real_2_U (- (U_2_real (MapType1Select Mask@27 (MapType0Select Heap@6 this@@55 Iterator_last) Node_val)) FullPerm)))) (and (=> (= (ControlFlow 0 456) 453) anon361_Then_correct) (=> (= (ControlFlow 0 456) 455) anon361_Else_correct)))))
(let ((anon360_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 459) 456)) anon42_correct)))
(let ((anon360_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 457) (- 0 458)) (<= FullPerm (U_2_real (MapType1Select Mask@27 (MapType0Select Heap@6 this@@55 Iterator_last) Node_val)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@27 (MapType0Select Heap@6 this@@55 Iterator_last) Node_val))) (=> (= (ControlFlow 0 457) 456) anon42_correct))))))
(let ((anon40_correct  (and (=> (= (ControlFlow 0 460) (- 0 462)) (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_prev) (MapType0Select Heap@6 this@@55 Iterator_last))) (=> (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_prev) (MapType0Select Heap@6 this@@55 Iterator_last)) (and (=> (= (ControlFlow 0 460) (- 0 461)) (not (= (MapType0Select Heap@6 this@@55 Iterator_last) null))) (=> (not (= (MapType0Select Heap@6 this@@55 Iterator_last) null)) (and (=> (= (ControlFlow 0 460) 457) anon360_Then_correct) (=> (= (ControlFlow 0 460) 459) anon360_Else_correct))))))))
(let ((anon39_correct  (=> (and (and (= Mask@26 (MapType1Store Mask@25 null (Node_state (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next)) (real_2_U (- (U_2_real (MapType1Select Mask@25 null (Node_state (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next)))) FullPerm)))) (InsidePredicate (Iterator_readyForRemove this@@55) (MapType0Select Heap@6 null (Iterator_readyForRemove this@@55)) (Node_state (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next)) (MapType0Select Heap@6 null (Node_state (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next))))) (and (= Mask@27 Mask@26) (= (ControlFlow 0 464) 460))) anon40_correct)))
(let ((anon359_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 467) 464)) anon39_correct)))
(let ((anon359_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 465) (- 0 466)) (<= FullPerm (U_2_real (MapType1Select Mask@25 null (Node_state (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@25 null (Node_state (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next))))) (=> (= (ControlFlow 0 465) 464) anon39_correct))))))
(let ((anon358_Then_correct  (=> (not (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next) null)) (and (=> (= (ControlFlow 0 468) 465) anon359_Then_correct) (=> (= (ControlFlow 0 468) 467) anon359_Else_correct)))))
(let ((anon358_Else_correct  (=> (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next) null) (=> (and (= Mask@27 Mask@25) (= (ControlFlow 0 463) 460)) anon40_correct))))
(let ((anon357_Else_correct  (=> (not (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_prev) null)) (and (=> (= (ControlFlow 0 471) 468) anon358_Then_correct) (=> (= (ControlFlow 0 471) 463) anon358_Else_correct)))))
(let ((anon357_Then_correct  (=> (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_current) Node_prev) null) (and (=> (= (ControlFlow 0 469) (- 0 470)) (= (MapType0Select Heap@6 this@@55 Iterator_current) (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel))) (=> (= (MapType0Select Heap@6 this@@55 Iterator_current) (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel)) (and (=> (= (ControlFlow 0 469) 468) anon358_Then_correct) (=> (= (ControlFlow 0 469) 463) anon358_Else_correct)))))))
(let ((anon34_correct  (=> (= Mask@25 (MapType1Store Mask@24 (MapType0Select Heap@6 this@@55 Iterator_current) Node_prev (real_2_U (- (U_2_real (MapType1Select Mask@24 (MapType0Select Heap@6 this@@55 Iterator_current) Node_prev)) FullPerm)))) (and (=> (= (ControlFlow 0 472) 469) anon357_Then_correct) (=> (= (ControlFlow 0 472) 471) anon357_Else_correct)))))
(let ((anon356_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 475) 472)) anon34_correct)))
(let ((anon356_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 473) (- 0 474)) (<= FullPerm (U_2_real (MapType1Select Mask@24 (MapType0Select Heap@6 this@@55 Iterator_current) Node_prev)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@24 (MapType0Select Heap@6 this@@55 Iterator_current) Node_prev))) (=> (= (ControlFlow 0 473) 472) anon34_correct))))))
(let ((anon32_correct  (=> (= Mask@24 (MapType1Store Mask@23 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next (real_2_U (- (U_2_real (MapType1Select Mask@23 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next)) FullPerm)))) (and (=> (= (ControlFlow 0 476) 473) anon356_Then_correct) (=> (= (ControlFlow 0 476) 475) anon356_Else_correct)))))
(let ((anon355_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 479) 476)) anon32_correct)))
(let ((anon355_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 477) (- 0 478)) (<= FullPerm (U_2_real (MapType1Select Mask@23 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@23 (MapType0Select Heap@6 this@@55 Iterator_current) Node_next))) (=> (= (ControlFlow 0 477) 476) anon32_correct))))))
(let ((anon30_correct  (=> (= Mask@23 (MapType1Store Mask@22 (MapType0Select Heap@6 this@@55 Iterator_current) Node_val (real_2_U (- (U_2_real (MapType1Select Mask@22 (MapType0Select Heap@6 this@@55 Iterator_current) Node_val)) FullPerm)))) (and (=> (= (ControlFlow 0 480) 477) anon355_Then_correct) (=> (= (ControlFlow 0 480) 479) anon355_Else_correct)))))
(let ((anon354_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 483) 480)) anon30_correct)))
(let ((anon354_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 481) (- 0 482)) (<= FullPerm (U_2_real (MapType1Select Mask@22 (MapType0Select Heap@6 this@@55 Iterator_current) Node_val)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@22 (MapType0Select Heap@6 this@@55 Iterator_current) Node_val))) (=> (= (ControlFlow 0 481) 480) anon30_correct))))))
(let ((anon28_correct  (=> (= Mask@22 (MapType1Store Mask@21 this@@55 Iterator_last (real_2_U (- (U_2_real (MapType1Select Mask@21 this@@55 Iterator_last)) FullPerm)))) (and (=> (= (ControlFlow 0 484) (- 0 485)) (not (= (MapType0Select Heap@6 this@@55 Iterator_current) null))) (=> (not (= (MapType0Select Heap@6 this@@55 Iterator_current) null)) (and (=> (= (ControlFlow 0 484) 481) anon354_Then_correct) (=> (= (ControlFlow 0 484) 483) anon354_Else_correct)))))))
(let ((anon353_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 488) 484)) anon28_correct)))
(let ((anon353_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 486) (- 0 487)) (<= FullPerm (U_2_real (MapType1Select Mask@21 this@@55 Iterator_last)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@21 this@@55 Iterator_last))) (=> (= (ControlFlow 0 486) 484) anon28_correct))))))
(let ((anon26_correct  (=> (= Mask@21 (MapType1Store Mask@20 this@@55 Iterator_current (real_2_U (- (U_2_real (MapType1Select Mask@20 this@@55 Iterator_current)) FullPerm)))) (and (=> (= (ControlFlow 0 489) 486) anon353_Then_correct) (=> (= (ControlFlow 0 489) 488) anon353_Else_correct)))))
(let ((anon352_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 492) 489)) anon26_correct)))
(let ((anon352_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 490) (- 0 491)) (<= FullPerm (U_2_real (MapType1Select Mask@20 this@@55 Iterator_current)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@20 this@@55 Iterator_current))) (=> (= (ControlFlow 0 490) 489) anon26_correct))))))
(let ((anon24_correct  (=> (= Mask@20 (MapType1Store Mask@19 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel (real_2_U (- (U_2_real (MapType1Select Mask@19 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel)) FullPerm)))) (and (=> (= (ControlFlow 0 493) (- 0 494)) (not (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel) null))) (=> (not (= (MapType0Select Heap@6 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel) null)) (and (=> (= (ControlFlow 0 493) 490) anon352_Then_correct) (=> (= (ControlFlow 0 493) 492) anon352_Else_correct)))))))
(let ((anon351_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 497) 493)) anon24_correct)))
(let ((anon351_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 495) (- 0 496)) (<= FullPerm (U_2_real (MapType1Select Mask@19 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@19 (MapType0Select Heap@6 this@@55 Iterator_iteratee) List_sentinel))) (=> (= (ControlFlow 0 495) 493) anon24_correct))))))
(let ((anon22_correct  (=> (= Mask@19 (MapType1Store Mask@18 this@@55 Iterator_iteratee (real_2_U (- (U_2_real (MapType1Select Mask@18 this@@55 Iterator_iteratee)) perm@1)))) (and (=> (= (ControlFlow 0 498) (- 0 499)) (not (= (MapType0Select Heap@6 this@@55 Iterator_iteratee) null))) (=> (not (= (MapType0Select Heap@6 this@@55 Iterator_iteratee) null)) (and (=> (= (ControlFlow 0 498) 495) anon351_Then_correct) (=> (= (ControlFlow 0 498) 497) anon351_Else_correct)))))))
(let ((anon350_Else_correct  (=> (and (= perm@1 NoPerm) (= (ControlFlow 0 502) 498)) anon22_correct)))
(let ((anon350_Then_correct  (=> (not (= perm@1 NoPerm)) (and (=> (= (ControlFlow 0 500) (- 0 501)) (<= perm@1 (U_2_real (MapType1Select Mask@18 this@@55 Iterator_iteratee)))) (=> (<= perm@1 (U_2_real (MapType1Select Mask@18 this@@55 Iterator_iteratee))) (=> (= (ControlFlow 0 500) 498) anon22_correct))))))
(let ((anon20_correct  (=> (and (state Heap@5 Mask@18) (state Heap@5 Mask@18)) (and (=> (= (ControlFlow 0 503) (- 0 509)) (HasDirectPerm Mask@18 this@@55 Iterator_current)) (=> (HasDirectPerm Mask@18 this@@55 Iterator_current) (and (=> (= (ControlFlow 0 503) (- 0 508)) (HasDirectPerm Mask@18 (MapType0Select Heap@5 this@@55 Iterator_current) Node_val)) (=> (HasDirectPerm Mask@18 (MapType0Select Heap@5 this@@55 Iterator_current) Node_val) (=> (and (= res@0 (U_2_int (MapType0Select Heap@5 (MapType0Select Heap@5 this@@55 Iterator_current) Node_val))) (state Heap@5 Mask@18)) (and (=> (= (ControlFlow 0 503) (- 0 507)) (HasDirectPerm Mask@18 this@@55 Iterator_current)) (=> (HasDirectPerm Mask@18 this@@55 Iterator_current) (and (=> (= (ControlFlow 0 503) (- 0 506)) (HasDirectPerm Mask@18 this@@55 Iterator_last)) (=> (HasDirectPerm Mask@18 this@@55 Iterator_last) (and (=> (= (ControlFlow 0 503) (- 0 505)) (= FullPerm (U_2_real (MapType1Select Mask@18 (MapType0Select Heap@5 this@@55 Iterator_current) Node_prev)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@18 (MapType0Select Heap@5 this@@55 Iterator_current) Node_prev))) (=> (= Heap@6 (MapType0Store Heap@5 (MapType0Select Heap@5 this@@55 Iterator_current) Node_prev (MapType0Select Heap@5 this@@55 Iterator_last))) (=> (and (state Heap@6 Mask@18) (= perm@1 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 503) (- 0 504)) (>= perm@1 NoPerm)) (=> (>= perm@1 NoPerm) (and (=> (= (ControlFlow 0 503) 500) anon350_Then_correct) (=> (= (ControlFlow 0 503) 502) anon350_Else_correct))))))))))))))))))))
(let ((anon349_Else_correct  (=> (= (MapType0Select Heap@5 (MapType0Select Heap@5 this@@55 Iterator_current) Node_next) null) (=> (and (= Mask@18 Mask@16) (= (ControlFlow 0 511) 503)) anon20_correct))))
(let ((anon349_Then_correct  (=> (and (not (= (MapType0Select Heap@5 (MapType0Select Heap@5 this@@55 Iterator_current) Node_next) null)) (= Mask@17 (MapType1Store Mask@16 null (Node_state (MapType0Select Heap@5 (MapType0Select Heap@5 this@@55 Iterator_current) Node_next)) (real_2_U (+ (U_2_real (MapType1Select Mask@16 null (Node_state (MapType0Select Heap@5 (MapType0Select Heap@5 this@@55 Iterator_current) Node_next)))) FullPerm))))) (=> (and (and (InsidePredicate (Node_state (MapType0Select Heap@5 this@@55 Iterator_current)) (MapType0Select Heap@5 null (Node_state (MapType0Select Heap@5 this@@55 Iterator_current))) (Node_state (MapType0Select Heap@5 (MapType0Select Heap@5 this@@55 Iterator_current) Node_next)) (MapType0Select Heap@5 null (Node_state (MapType0Select Heap@5 (MapType0Select Heap@5 this@@55 Iterator_current) Node_next)))) (state Heap@5 Mask@17)) (and (= Mask@18 Mask@17) (= (ControlFlow 0 510) 503))) anon20_correct))))
(let ((anon18_correct  (=> (not (= (MapType0Select Heap@5 this@@55 Iterator_current) null)) (=> (and (and (and (= Mask@14 (MapType1Store Mask@13 (MapType0Select Heap@5 this@@55 Iterator_current) Node_val (real_2_U (+ (U_2_real (MapType1Select Mask@13 (MapType0Select Heap@5 this@@55 Iterator_current) Node_val)) FullPerm)))) (state Heap@5 Mask@14)) (and (not (= (MapType0Select Heap@5 this@@55 Iterator_current) null)) (= Mask@15 (MapType1Store Mask@14 (MapType0Select Heap@5 this@@55 Iterator_current) Node_prev (real_2_U (+ (U_2_real (MapType1Select Mask@14 (MapType0Select Heap@5 this@@55 Iterator_current) Node_prev)) FullPerm)))))) (and (and (state Heap@5 Mask@15) (not (= (MapType0Select Heap@5 this@@55 Iterator_current) null))) (and (= Mask@16 (MapType1Store Mask@15 (MapType0Select Heap@5 this@@55 Iterator_current) Node_next (real_2_U (+ (U_2_real (MapType1Select Mask@15 (MapType0Select Heap@5 this@@55 Iterator_current) Node_next)) FullPerm)))) (state Heap@5 Mask@16)))) (and (=> (= (ControlFlow 0 512) 510) anon349_Then_correct) (=> (= (ControlFlow 0 512) 511) anon349_Else_correct))))))
(let ((anon348_Else_correct  (=> (HasDirectPerm Mask@13 null (Node_state (MapType0Select Heap@3 this@@55 Iterator_current))) (=> (and (= Heap@5 Heap@3) (= (ControlFlow 0 514) 512)) anon18_correct))))
(let ((anon348_Then_correct  (=> (and (and (not (HasDirectPerm Mask@13 null (Node_state (MapType0Select Heap@3 this@@55 Iterator_current)))) (= Heap@4 (MapType0Store Heap@3 null (Node_state (MapType0Select Heap@3 this@@55 Iterator_current)) newVersion@1))) (and (= Heap@5 Heap@4) (= (ControlFlow 0 513) 512))) anon18_correct)))
(let ((anon16_correct  (=> (= Mask@13 (MapType1Store Mask@12 null (Node_state (MapType0Select Heap@3 this@@55 Iterator_current)) (real_2_U (- (U_2_real (MapType1Select Mask@12 null (Node_state (MapType0Select Heap@3 this@@55 Iterator_current)))) FullPerm)))) (and (=> (= (ControlFlow 0 515) 513) anon348_Then_correct) (=> (= (ControlFlow 0 515) 514) anon348_Else_correct)))))
(let ((anon347_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 518) 515)) anon16_correct)))
(let ((anon347_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 516) (- 0 517)) (<= FullPerm (U_2_real (MapType1Select Mask@12 null (Node_state (MapType0Select Heap@3 this@@55 Iterator_current)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@12 null (Node_state (MapType0Select Heap@3 this@@55 Iterator_current))))) (=> (= (ControlFlow 0 516) 515) anon16_correct))))))
(let ((anon14_correct  (=> (not (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_next) null)) (=> (and (state Heap@1 Mask@12) (state Heap@1 Mask@12)) (and (=> (= (ControlFlow 0 519) (- 0 525)) (HasDirectPerm Mask@12 this@@55 Iterator_current)) (=> (HasDirectPerm Mask@12 this@@55 Iterator_current) (and (=> (= (ControlFlow 0 519) (- 0 524)) (= FullPerm (U_2_real (MapType1Select Mask@12 this@@55 Iterator_last)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@12 this@@55 Iterator_last))) (=> (and (= Heap@2 (MapType0Store Heap@1 this@@55 Iterator_last (MapType0Select Heap@1 this@@55 Iterator_current))) (state Heap@2 Mask@12)) (and (=> (= (ControlFlow 0 519) (- 0 523)) (HasDirectPerm Mask@12 this@@55 Iterator_current)) (=> (HasDirectPerm Mask@12 this@@55 Iterator_current) (and (=> (= (ControlFlow 0 519) (- 0 522)) (HasDirectPerm Mask@12 (MapType0Select Heap@2 this@@55 Iterator_current) Node_next)) (=> (HasDirectPerm Mask@12 (MapType0Select Heap@2 this@@55 Iterator_current) Node_next) (and (=> (= (ControlFlow 0 519) (- 0 521)) (= FullPerm (U_2_real (MapType1Select Mask@12 this@@55 Iterator_current)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@12 this@@55 Iterator_current))) (=> (and (= Heap@3 (MapType0Store Heap@2 this@@55 Iterator_current (MapType0Select Heap@2 (MapType0Select Heap@2 this@@55 Iterator_current) Node_next))) (state Heap@3 Mask@12)) (and (=> (= (ControlFlow 0 519) (- 0 520)) (HasDirectPerm Mask@12 this@@55 Iterator_current)) (=> (HasDirectPerm Mask@12 this@@55 Iterator_current) (=> (and (|Node_state#trigger| Heap@3 (Node_state (MapType0Select Heap@3 this@@55 Iterator_current))) (= (MapType0Select Heap@3 null (Node_state (MapType0Select Heap@3 this@@55 Iterator_current))) (CombineFrames (FrameFragment (MapType0Select Heap@3 (MapType0Select Heap@3 this@@55 Iterator_current) Node_val)) (CombineFrames (FrameFragment (MapType0Select Heap@3 (MapType0Select Heap@3 this@@55 Iterator_current) Node_prev)) (CombineFrames (FrameFragment (MapType0Select Heap@3 (MapType0Select Heap@3 this@@55 Iterator_current) Node_next)) (FrameFragment (ite (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@55 Iterator_current) Node_next) null)) (MapType0Select Heap@3 null (Node_state (MapType0Select Heap@3 (MapType0Select Heap@3 this@@55 Iterator_current) Node_next))) EmptyFrame))))))) (and (=> (= (ControlFlow 0 519) 516) anon347_Then_correct) (=> (= (ControlFlow 0 519) 518) anon347_Else_correct)))))))))))))))))))))
(let ((anon346_Else_correct  (=> (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_next) null) (=> (and (= Mask@12 Mask@10) (= (ControlFlow 0 527) 519)) anon14_correct))))
(let ((anon346_Then_correct  (=> (and (not (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_next) null)) (= Mask@11 (MapType1Store Mask@10 null (Node_state (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_next)) (real_2_U (+ (U_2_real (MapType1Select Mask@10 null (Node_state (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_next)))) FullPerm))))) (=> (and (and (InsidePredicate (Iterator_readyForNext this@@55) (MapType0Select Heap@1 null (Iterator_readyForNext this@@55)) (Node_state (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_next)) (MapType0Select Heap@1 null (Node_state (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_next)))) (state Heap@1 Mask@11)) (and (= Mask@12 Mask@11) (= (ControlFlow 0 526) 519))) anon14_correct))))
(let ((anon345_Else_correct  (=> (and (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev) null) (= Mask@10 Mask@8)) (and (=> (= (ControlFlow 0 529) 526) anon346_Then_correct) (=> (= (ControlFlow 0 529) 527) anon346_Else_correct)))))
(let ((anon345_Then_correct  (=> (not (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev) null)) (=> (and (and (and (= Mask@9 (MapType1Store Mask@8 null (Node_reverse (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev)) (real_2_U (+ (U_2_real (MapType1Select Mask@8 null (Node_reverse (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev)))) FullPerm)))) (InsidePredicate (Iterator_readyForNext this@@55) (MapType0Select Heap@1 null (Iterator_readyForNext this@@55)) (Node_reverse (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev)) (MapType0Select Heap@1 null (Node_reverse (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev))))) (and (state Heap@1 Mask@9) (state Heap@1 Mask@9))) (and (and (= (Node_first Heap@1 (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev)) (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_iteratee) List_sentinel)) (state Heap@1 Mask@9)) (and (= (Node_rev_next Heap@1 (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev)) (MapType0Select Heap@1 this@@55 Iterator_current)) (= Mask@10 Mask@9)))) (and (=> (= (ControlFlow 0 528) 526) anon346_Then_correct) (=> (= (ControlFlow 0 528) 527) anon346_Else_correct))))))
(let ((anon344_Else_correct  (=> (not (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev) null)) (and (=> (= (ControlFlow 0 531) 528) anon345_Then_correct) (=> (= (ControlFlow 0 531) 529) anon345_Else_correct)))))
(let ((anon344_Then_correct  (=> (and (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev) null) (= (MapType0Select Heap@1 this@@55 Iterator_current) (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_iteratee) List_sentinel))) (and (=> (= (ControlFlow 0 530) 528) anon345_Then_correct) (=> (= (ControlFlow 0 530) 529) anon345_Else_correct)))))
(let ((anon8_correct  (=> (= perm@0 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 532) (- 0 533)) (>= perm@0 NoPerm)) (=> (>= perm@0 NoPerm) (=> (and (and (and (=> (> perm@0 NoPerm) (not (= this@@55 null))) (= Mask@2 (MapType1Store Mask@1 this@@55 Iterator_iteratee (real_2_U (+ (U_2_real (MapType1Select Mask@1 this@@55 Iterator_iteratee)) perm@0))))) (and (state Heap@1 Mask@2) (not (= (MapType0Select Heap@1 this@@55 Iterator_iteratee) null)))) (and (and (not (= (MapType0Select Heap@1 this@@55 Iterator_iteratee) null)) (= Mask@3 (MapType1Store Mask@2 (MapType0Select Heap@1 this@@55 Iterator_iteratee) List_sentinel (real_2_U (+ (U_2_real (MapType1Select Mask@2 (MapType0Select Heap@1 this@@55 Iterator_iteratee) List_sentinel)) FullPerm))))) (and (state Heap@1 Mask@3) (not (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@55 Iterator_iteratee) List_sentinel) null))))) (=> (and (and (and (and (not (= this@@55 null)) (= Mask@4 (MapType1Store Mask@3 this@@55 Iterator_current (real_2_U (+ (U_2_real (MapType1Select Mask@3 this@@55 Iterator_current)) FullPerm))))) (and (state Heap@1 Mask@4) (not (= this@@55 null)))) (and (and (= Mask@5 (MapType1Store Mask@4 this@@55 Iterator_last (real_2_U (+ (U_2_real (MapType1Select Mask@4 this@@55 Iterator_last)) FullPerm)))) (state Heap@1 Mask@5)) (and (not (= (MapType0Select Heap@1 this@@55 Iterator_current) null)) (not (= (MapType0Select Heap@1 this@@55 Iterator_current) null))))) (and (and (and (= Mask@6 (MapType1Store Mask@5 (MapType0Select Heap@1 this@@55 Iterator_current) Node_val (real_2_U (+ (U_2_real (MapType1Select Mask@5 (MapType0Select Heap@1 this@@55 Iterator_current) Node_val)) FullPerm)))) (state Heap@1 Mask@6)) (and (not (= (MapType0Select Heap@1 this@@55 Iterator_current) null)) (= Mask@7 (MapType1Store Mask@6 (MapType0Select Heap@1 this@@55 Iterator_current) Node_next (real_2_U (+ (U_2_real (MapType1Select Mask@6 (MapType0Select Heap@1 this@@55 Iterator_current) Node_next)) FullPerm)))))) (and (and (state Heap@1 Mask@7) (not (= (MapType0Select Heap@1 this@@55 Iterator_current) null))) (and (= Mask@8 (MapType1Store Mask@7 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev (real_2_U (+ (U_2_real (MapType1Select Mask@7 (MapType0Select Heap@1 this@@55 Iterator_current) Node_prev)) FullPerm)))) (state Heap@1 Mask@8))))) (and (=> (= (ControlFlow 0 532) 530) anon344_Then_correct) (=> (= (ControlFlow 0 532) 531) anon344_Else_correct)))))))))
(let ((anon343_Else_correct  (=> (HasDirectPerm Mask@1 null (Iterator_readyForNext this@@55)) (=> (and (= Heap@1 Heap@@35) (= (ControlFlow 0 535) 532)) anon8_correct))))
(let ((anon343_Then_correct  (=> (and (and (not (HasDirectPerm Mask@1 null (Iterator_readyForNext this@@55))) (= Heap@0 (MapType0Store Heap@@35 null (Iterator_readyForNext this@@55) newVersion@0))) (and (= Heap@1 Heap@0) (= (ControlFlow 0 534) 532))) anon8_correct)))
(let ((anon6_correct  (=> (= Mask@1 (MapType1Store Mask@0 null (Iterator_readyForNext this@@55) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (Iterator_readyForNext this@@55))) FullPerm)))) (and (=> (= (ControlFlow 0 536) 534) anon343_Then_correct) (=> (= (ControlFlow 0 536) 535) anon343_Else_correct)))))
(let ((anon342_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 539) 536)) anon6_correct)))
(let ((anon342_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 537) (- 0 538)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Iterator_readyForNext this@@55))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (Iterator_readyForNext this@@55)))) (=> (= (ControlFlow 0 537) 536) anon6_correct))))))
(let ((anon340_Else_correct  (=> (and (|Iterator_readyForNext#trigger| Heap@@35 (Iterator_readyForNext this@@55)) (= (MapType0Select Heap@@35 null (Iterator_readyForNext this@@55)) (CombineFrames (FrameFragment (MapType0Select Heap@@35 this@@55 Iterator_iteratee)) (CombineFrames (FrameFragment (MapType0Select Heap@@35 (MapType0Select Heap@@35 this@@55 Iterator_iteratee) List_sentinel)) (CombineFrames (FrameFragment (MapType0Select Heap@@35 this@@55 Iterator_current)) (CombineFrames (FrameFragment (MapType0Select Heap@@35 this@@55 Iterator_last)) (CombineFrames (FrameFragment (MapType0Select Heap@@35 (MapType0Select Heap@@35 this@@55 Iterator_current) Node_val)) (CombineFrames (FrameFragment (MapType0Select Heap@@35 (MapType0Select Heap@@35 this@@55 Iterator_current) Node_next)) (CombineFrames (FrameFragment (MapType0Select Heap@@35 (MapType0Select Heap@@35 this@@55 Iterator_current) Node_prev)) (CombineFrames (FrameFragment (ite (= (MapType0Select Heap@@35 (MapType0Select Heap@@35 this@@55 Iterator_current) Node_prev) null) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@35 (MapType0Select Heap@@35 this@@55 Iterator_current) Node_prev) null)) (MapType0Select Heap@@35 null (Node_reverse (MapType0Select Heap@@35 (MapType0Select Heap@@35 this@@55 Iterator_current) Node_prev))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@@35 (MapType0Select Heap@@35 this@@55 Iterator_current) Node_next) null)) (MapType0Select Heap@@35 null (Node_state (MapType0Select Heap@@35 (MapType0Select Heap@@35 this@@55 Iterator_current) Node_next))) EmptyFrame))))))))))))) (and (=> (= (ControlFlow 0 540) 537) anon342_Then_correct) (=> (= (ControlFlow 0 540) 539) anon342_Else_correct)))))
(let ((anon0_correct  (=> (and (state Heap@@35 ZeroMask) (= AssumeFunctionsAbove (- 0 1))) (=> (and (and (U_2_bool (MapType0Select Heap@@35 this@@55 $allocated)) (= Mask@0 (MapType1Store ZeroMask null (Iterator_readyForNext this@@55) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (Iterator_readyForNext this@@55))) FullPerm))))) (and (state Heap@@35 Mask@0) (state Heap@@35 Mask@0))) (and (=> (= (ControlFlow 0 544) 543) anon340_Then_correct) (=> (= (ControlFlow 0 544) 540) anon340_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 545) 544) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
