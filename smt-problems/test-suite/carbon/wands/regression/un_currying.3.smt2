(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun RefType () T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun wand (Real Real Real) T@U)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandType_wandType () T@T)
(declare-fun |wand#ft| (Real Real Real) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun wand_2 (Real Real Real) T@U)
(declare-fun WandType_wand_2Type () T@T)
(declare-fun |wand_2#ft| (Real Real Real) T@U)
(declare-fun getPredWandId (T@U) Int)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun wand_3 (Bool Real) T@U)
(declare-fun WandType_wand_3Type () T@T)
(declare-fun |wand_3#ft| (Bool Real) T@U)
(declare-fun wand_4 (Bool Bool) T@U)
(declare-fun WandType_wand_4Type () T@T)
(declare-fun |wand_4#ft| (Bool Bool) T@U)
(declare-fun wand_1 (Real Real) T@U)
(declare-fun WandType_wand_1Type () T@T)
(declare-fun |wand_1#ft| (Real Real) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun P () T@U)
(declare-fun PredicateType_PType () T@T)
(declare-fun Q () T@U)
(declare-fun PredicateType_QType () T@T)
(declare-fun R () T@U)
(declare-fun PredicateType_RType () T@T)
(declare-fun |wand#sm| (Real Real Real) T@U)
(declare-fun |wand_2#sm| (Real Real Real) T@U)
(declare-fun $allocated () T@U)
(declare-fun NormalFieldType () T@T)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun FullPerm () Real)
(declare-fun |P#trigger| (T@U T@U) Bool)
(declare-fun |P#everUsed| (T@U) Bool)
(declare-fun |Q#trigger| (T@U T@U) Bool)
(declare-fun |Q#everUsed| (T@U) Bool)
(declare-fun |R#trigger| (T@U T@U) Bool)
(declare-fun |R#everUsed| (T@U) Bool)
(declare-fun |wand_3#sm| (Bool Real) T@U)
(declare-fun |wand_4#sm| (Bool Bool) T@U)
(declare-fun |wand_1#sm| (Real Real) T@U)
(declare-fun |P#sm| () T@U)
(declare-fun |Q#sm| () T@U)
(declare-fun |R#sm| () T@U)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) ) (! (= (Ctor (MapType0Type arg0@@11)) 6)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@12 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@12)) arg0@@12)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@12))
))) (forall ((arg0@@13 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@13 arg1)) 7)
 :qid |ctor:FieldType|
))) (forall ((arg0@@14 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@14 arg1@@0)) arg0@@14)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@14 arg1@@0))
))) (forall ((arg0@@15 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@15 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@15 arg1@@1))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (Ctor RefType) 8)))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 9)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (= (Ctor WandType_wandType) 10) (forall ((arg0@@23 Real) (arg1@@9 Real) (arg2@@3 Real) ) (! (= (type (wand arg0@@23 arg1@@9 arg2@@3)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@23 arg1@@9 arg2@@3))
))))
(assert (forall ((arg1@@10 Real) (arg2@@4 Real) (arg3@@1 Real) ) (! (IsWandField (wand arg1@@10 arg2@@4 arg3@@1))
 :qid |stdinbpl.215:15|
 :skolemid |29|
 :pattern ( (wand arg1@@10 arg2@@4 arg3@@1))
)))
(assert  (and (= (Ctor FrameTypeType) 11) (forall ((arg0@@24 Real) (arg1@@11 Real) (arg2@@5 Real) ) (! (= (type (|wand#ft| arg0@@24 arg1@@11 arg2@@5)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@24 arg1@@11 arg2@@5))
))))
(assert (forall ((arg1@@12 Real) (arg2@@6 Real) (arg3@@2 Real) ) (! (IsWandField (|wand#ft| arg1@@12 arg2@@6 arg3@@2))
 :qid |stdinbpl.219:15|
 :skolemid |30|
 :pattern ( (|wand#ft| arg1@@12 arg2@@6 arg3@@2))
)))
(assert  (and (= (Ctor WandType_wand_2Type) 12) (forall ((arg0@@25 Real) (arg1@@13 Real) (arg2@@7 Real) ) (! (= (type (wand_2 arg0@@25 arg1@@13 arg2@@7)) (FieldType WandType_wand_2Type intType))
 :qid |funType:wand_2|
 :pattern ( (wand_2 arg0@@25 arg1@@13 arg2@@7))
))))
(assert (forall ((arg1@@14 Real) (arg2@@8 Real) (arg3@@3 Real) ) (! (IsWandField (wand_2 arg1@@14 arg2@@8 arg3@@3))
 :qid |stdinbpl.247:15|
 :skolemid |36|
 :pattern ( (wand_2 arg1@@14 arg2@@8 arg3@@3))
)))
(assert (forall ((arg0@@26 Real) (arg1@@15 Real) (arg2@@9 Real) ) (! (= (type (|wand_2#ft| arg0@@26 arg1@@15 arg2@@9)) (FieldType WandType_wand_2Type FrameTypeType))
 :qid |funType:wand_2#ft|
 :pattern ( (|wand_2#ft| arg0@@26 arg1@@15 arg2@@9))
)))
(assert (forall ((arg1@@16 Real) (arg2@@10 Real) (arg3@@4 Real) ) (! (IsWandField (|wand_2#ft| arg1@@16 arg2@@10 arg3@@4))
 :qid |stdinbpl.251:15|
 :skolemid |37|
 :pattern ( (|wand_2#ft| arg1@@16 arg2@@10 arg3@@4))
)))
(assert (forall ((arg1@@17 Real) (arg2@@11 Real) (arg3@@5 Real) ) (! (= (getPredWandId (wand arg1@@17 arg2@@11 arg3@@5)) 4)
 :qid |stdinbpl.235:15|
 :skolemid |34|
 :pattern ( (wand arg1@@17 arg2@@11 arg3@@5))
)))
(assert (forall ((arg1@@18 Real) (arg2@@12 Real) (arg3@@6 Real) ) (! (= (getPredWandId (wand_2 arg1@@18 arg2@@12 arg3@@6)) 5)
 :qid |stdinbpl.267:15|
 :skolemid |41|
 :pattern ( (wand_2 arg1@@18 arg2@@12 arg3@@6))
)))
(assert (forall ((arg1@@19 Real) (arg2@@13 Real) (arg3@@7 Real) ) (!  (not (IsPredicateField (wand arg1@@19 arg2@@13 arg3@@7)))
 :qid |stdinbpl.223:15|
 :skolemid |31|
 :pattern ( (wand arg1@@19 arg2@@13 arg3@@7))
)))
(assert (forall ((arg1@@20 Real) (arg2@@14 Real) (arg3@@8 Real) ) (!  (not (IsPredicateField (|wand#ft| arg1@@20 arg2@@14 arg3@@8)))
 :qid |stdinbpl.227:15|
 :skolemid |32|
 :pattern ( (|wand#ft| arg1@@20 arg2@@14 arg3@@8))
)))
(assert (forall ((arg1@@21 Real) (arg2@@15 Real) (arg3@@9 Real) ) (!  (not (IsPredicateField (wand_2 arg1@@21 arg2@@15 arg3@@9)))
 :qid |stdinbpl.255:15|
 :skolemid |38|
 :pattern ( (wand_2 arg1@@21 arg2@@15 arg3@@9))
)))
(assert (forall ((arg1@@22 Real) (arg2@@16 Real) (arg3@@10 Real) ) (!  (not (IsPredicateField (|wand_2#ft| arg1@@22 arg2@@16 arg3@@10)))
 :qid |stdinbpl.259:15|
 :skolemid |39|
 :pattern ( (|wand_2#ft| arg1@@22 arg2@@16 arg3@@10))
)))
(assert  (and (= (Ctor WandType_wand_3Type) 13) (forall ((arg0@@27 Bool) (arg1@@23 Real) ) (! (= (type (wand_3 arg0@@27 arg1@@23)) (FieldType WandType_wand_3Type intType))
 :qid |funType:wand_3|
 :pattern ( (wand_3 arg0@@27 arg1@@23))
))))
(assert (forall ((arg1@@24 Bool) (arg2@@17 Real) ) (! (IsWandField (wand_3 arg1@@24 arg2@@17))
 :qid |stdinbpl.183:15|
 :skolemid |22|
 :pattern ( (wand_3 arg1@@24 arg2@@17))
)))
(assert (forall ((arg0@@28 Bool) (arg1@@25 Real) ) (! (= (type (|wand_3#ft| arg0@@28 arg1@@25)) (FieldType WandType_wand_3Type FrameTypeType))
 :qid |funType:wand_3#ft|
 :pattern ( (|wand_3#ft| arg0@@28 arg1@@25))
)))
(assert (forall ((arg1@@26 Bool) (arg2@@18 Real) ) (! (IsWandField (|wand_3#ft| arg1@@26 arg2@@18))
 :qid |stdinbpl.187:15|
 :skolemid |23|
 :pattern ( (|wand_3#ft| arg1@@26 arg2@@18))
)))
(assert  (and (= (Ctor WandType_wand_4Type) 14) (forall ((arg0@@29 Bool) (arg1@@27 Bool) ) (! (= (type (wand_4 arg0@@29 arg1@@27)) (FieldType WandType_wand_4Type intType))
 :qid |funType:wand_4|
 :pattern ( (wand_4 arg0@@29 arg1@@27))
))))
(assert (forall ((arg1@@28 Bool) (arg2@@19 Bool) ) (! (IsWandField (wand_4 arg1@@28 arg2@@19))
 :qid |stdinbpl.279:15|
 :skolemid |43|
 :pattern ( (wand_4 arg1@@28 arg2@@19))
)))
(assert (forall ((arg0@@30 Bool) (arg1@@29 Bool) ) (! (= (type (|wand_4#ft| arg0@@30 arg1@@29)) (FieldType WandType_wand_4Type FrameTypeType))
 :qid |funType:wand_4#ft|
 :pattern ( (|wand_4#ft| arg0@@30 arg1@@29))
)))
(assert (forall ((arg1@@30 Bool) (arg2@@20 Bool) ) (! (IsWandField (|wand_4#ft| arg1@@30 arg2@@20))
 :qid |stdinbpl.283:15|
 :skolemid |44|
 :pattern ( (|wand_4#ft| arg1@@30 arg2@@20))
)))
(assert  (and (= (Ctor WandType_wand_1Type) 15) (forall ((arg0@@31 Real) (arg1@@31 Real) ) (! (= (type (wand_1 arg0@@31 arg1@@31)) (FieldType WandType_wand_1Type intType))
 :qid |funType:wand_1|
 :pattern ( (wand_1 arg0@@31 arg1@@31))
))))
(assert (forall ((arg1@@32 Real) (arg2@@21 Real) ) (! (IsWandField (wand_1 arg1@@32 arg2@@21))
 :qid |stdinbpl.311:15|
 :skolemid |50|
 :pattern ( (wand_1 arg1@@32 arg2@@21))
)))
(assert (forall ((arg0@@32 Real) (arg1@@33 Real) ) (! (= (type (|wand_1#ft| arg0@@32 arg1@@33)) (FieldType WandType_wand_1Type FrameTypeType))
 :qid |funType:wand_1#ft|
 :pattern ( (|wand_1#ft| arg0@@32 arg1@@33))
)))
(assert (forall ((arg1@@34 Real) (arg2@@22 Real) ) (! (IsWandField (|wand_1#ft| arg1@@34 arg2@@22))
 :qid |stdinbpl.315:15|
 :skolemid |51|
 :pattern ( (|wand_1#ft| arg1@@34 arg2@@22))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@33 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@33))))
(= (type (PredicateMaskField arg0@@33)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@33))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@0 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@34 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@34))))
(= (type (WandMaskField arg0@@34)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@34))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_PType) 16) (= (type P) (FieldType PredicateType_PType FrameTypeType))))
(assert (IsPredicateField P))
(assert  (and (= (Ctor PredicateType_QType) 17) (= (type Q) (FieldType PredicateType_QType FrameTypeType))))
(assert (IsPredicateField Q))
(assert  (and (= (Ctor PredicateType_RType) 18) (= (type R) (FieldType PredicateType_RType FrameTypeType))))
(assert (IsPredicateField R))
(assert (forall ((arg1@@35 Bool) (arg2@@23 Real) ) (!  (not (IsPredicateField (wand_3 arg1@@35 arg2@@23)))
 :qid |stdinbpl.191:15|
 :skolemid |24|
 :pattern ( (wand_3 arg1@@35 arg2@@23))
)))
(assert (forall ((arg1@@36 Bool) (arg2@@24 Real) ) (!  (not (IsPredicateField (|wand_3#ft| arg1@@36 arg2@@24)))
 :qid |stdinbpl.195:15|
 :skolemid |25|
 :pattern ( (|wand_3#ft| arg1@@36 arg2@@24))
)))
(assert (forall ((arg1@@37 Bool) (arg2@@25 Bool) ) (!  (not (IsPredicateField (wand_4 arg1@@37 arg2@@25)))
 :qid |stdinbpl.287:15|
 :skolemid |45|
 :pattern ( (wand_4 arg1@@37 arg2@@25))
)))
(assert (forall ((arg1@@38 Bool) (arg2@@26 Bool) ) (!  (not (IsPredicateField (|wand_4#ft| arg1@@38 arg2@@26)))
 :qid |stdinbpl.291:15|
 :skolemid |46|
 :pattern ( (|wand_4#ft| arg1@@38 arg2@@26))
)))
(assert (forall ((arg1@@39 Real) (arg2@@27 Real) ) (!  (not (IsPredicateField (wand_1 arg1@@39 arg2@@27)))
 :qid |stdinbpl.319:15|
 :skolemid |52|
 :pattern ( (wand_1 arg1@@39 arg2@@27))
)))
(assert (forall ((arg1@@40 Real) (arg2@@28 Real) ) (!  (not (IsPredicateField (|wand_1#ft| arg1@@40 arg2@@28)))
 :qid |stdinbpl.323:15|
 :skolemid |53|
 :pattern ( (|wand_1#ft| arg1@@40 arg2@@28))
)))
(assert (= (getPredWandId P) 0))
(assert (= (getPredWandId Q) 1))
(assert (= (getPredWandId R) 2))
(assert (forall ((arg0@@35 Real) (arg1@@41 Real) (arg2@@29 Real) ) (! (= (type (|wand#sm| arg0@@35 arg1@@41 arg2@@29)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@35 arg1@@41 arg2@@29))
)))
(assert (forall ((arg1@@42 Real) (arg2@@30 Real) (arg3@@11 Real) ) (! (= (|wand#sm| arg1@@42 arg2@@30 arg3@@11) (WandMaskField (|wand#ft| arg1@@42 arg2@@30 arg3@@11)))
 :qid |stdinbpl.231:15|
 :skolemid |33|
 :pattern ( (WandMaskField (|wand#ft| arg1@@42 arg2@@30 arg3@@11)))
)))
(assert (forall ((arg0@@36 Real) (arg1@@43 Real) (arg2@@31 Real) ) (! (= (type (|wand_2#sm| arg0@@36 arg1@@43 arg2@@31)) (FieldType WandType_wand_2Type (MapType1Type RefType boolType)))
 :qid |funType:wand_2#sm|
 :pattern ( (|wand_2#sm| arg0@@36 arg1@@43 arg2@@31))
)))
(assert (forall ((arg1@@44 Real) (arg2@@32 Real) (arg3@@12 Real) ) (! (= (|wand_2#sm| arg1@@44 arg2@@32 arg3@@12) (WandMaskField (|wand_2#ft| arg1@@44 arg2@@32 arg3@@12)))
 :qid |stdinbpl.263:15|
 :skolemid |40|
 :pattern ( (WandMaskField (|wand_2#ft| arg1@@44 arg2@@32 arg3@@12)))
)))
(assert  (and (= (Ctor NormalFieldType) 19) (= (type $allocated) (FieldType NormalFieldType boolType))))
(assert (forall ((Heap@@2 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@2 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((arg1@@45 Real) (arg2@@33 Real) (arg3@@13 Real) (arg1_2 Real) (arg2_2 Real) (arg3_2 Real) ) (!  (=> (= (wand arg1@@45 arg2@@33 arg3@@13) (wand arg1_2 arg2_2 arg3_2)) (and (= arg1@@45 arg1_2) (and (= arg2@@33 arg2_2) (= arg3@@13 arg3_2))))
 :qid |stdinbpl.239:15|
 :skolemid |35|
 :pattern ( (wand arg1@@45 arg2@@33 arg3@@13) (wand arg1_2 arg2_2 arg3_2))
)))
(assert (forall ((arg1@@46 Real) (arg2@@34 Real) (arg3@@14 Real) (arg1_2@@0 Real) (arg2_2@@0 Real) (arg3_2@@0 Real) ) (!  (=> (= (wand_2 arg1@@46 arg2@@34 arg3@@14) (wand_2 arg1_2@@0 arg2_2@@0 arg3_2@@0)) (and (= arg1@@46 arg1_2@@0) (and (= arg2@@34 arg2_2@@0) (= arg3@@14 arg3_2@@0))))
 :qid |stdinbpl.271:15|
 :skolemid |42|
 :pattern ( (wand_2 arg1@@46 arg2@@34 arg3@@14) (wand_2 arg1_2@@0 arg2_2@@0 arg3_2@@0))
)))
(assert (forall ((arg1@@47 Real) (arg2@@35 Real) (arg1_2@@1 Real) (arg2_2@@1 Real) ) (!  (=> (= (wand_1 arg1@@47 arg2@@35) (wand_1 arg1_2@@1 arg2_2@@1)) (and (= arg1@@47 arg1_2@@1) (= arg2@@35 arg2_2@@1)))
 :qid |stdinbpl.335:15|
 :skolemid |56|
 :pattern ( (wand_1 arg1@@47 arg2@@35) (wand_1 arg1_2@@1 arg2_2@@1))
)))
(assert (forall ((Heap@@3 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@3 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.170:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@4 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@37 Real) (arg1@@48 T@U) ) (! (= (type (ConditionalFrame arg0@@37 arg1@@48)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@37 arg1@@48))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.158:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((arg1@@49 Bool) (arg2@@36 Bool) (arg1_2@@2 Bool) (arg2_2@@2 Bool) ) (!  (=> (= (wand_4 arg1@@49 arg2@@36) (wand_4 arg1_2@@2 arg2_2@@2)) (and (= arg1@@49 arg1_2@@2) (= arg2@@36 arg2_2@@2)))
 :qid |stdinbpl.303:15|
 :skolemid |49|
 :pattern ( (wand_4 arg1@@49 arg2@@36) (wand_4 arg1_2@@2 arg2_2@@2))
)))
(assert (forall ((arg1@@50 Bool) (arg2@@37 Real) ) (! (= (getPredWandId (wand_3 arg1@@50 arg2@@37)) 3)
 :qid |stdinbpl.203:15|
 :skolemid |27|
 :pattern ( (wand_3 arg1@@50 arg2@@37))
)))
(assert (forall ((arg1@@51 Bool) (arg2@@38 Bool) ) (! (= (getPredWandId (wand_4 arg1@@51 arg2@@38)) 6)
 :qid |stdinbpl.299:15|
 :skolemid |48|
 :pattern ( (wand_4 arg1@@51 arg2@@38))
)))
(assert (forall ((arg1@@52 Real) (arg2@@39 Real) ) (! (= (getPredWandId (wand_1 arg1@@52 arg2@@39)) 7)
 :qid |stdinbpl.331:15|
 :skolemid |55|
 :pattern ( (wand_1 arg1@@52 arg2@@39))
)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@5 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@5 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@6 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@6 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@7 T@U) ) (!  (=> (= (type Heap@@7) (MapType0Type RefType)) (|P#everUsed| P))
 :qid |stdinbpl.353:15|
 :skolemid |57|
 :pattern ( (|P#trigger| Heap@@7 P))
)))
(assert (forall ((Heap@@8 T@U) ) (!  (=> (= (type Heap@@8) (MapType0Type RefType)) (|Q#everUsed| Q))
 :qid |stdinbpl.383:15|
 :skolemid |58|
 :pattern ( (|Q#trigger| Heap@@8 Q))
)))
(assert (forall ((Heap@@9 T@U) ) (!  (=> (= (type Heap@@9) (MapType0Type RefType)) (|R#everUsed| R))
 :qid |stdinbpl.413:15|
 :skolemid |59|
 :pattern ( (|R#trigger| Heap@@9 R))
)))
(assert (forall ((arg1@@53 Bool) (arg2@@40 Real) (arg1_2@@3 Bool) (arg2_2@@3 Real) ) (!  (=> (= (wand_3 arg1@@53 arg2@@40) (wand_3 arg1_2@@3 arg2_2@@3)) (and (= arg1@@53 arg1_2@@3) (= arg2@@40 arg2_2@@3)))
 :qid |stdinbpl.207:15|
 :skolemid |28|
 :pattern ( (wand_3 arg1@@53 arg2@@40) (wand_3 arg1_2@@3 arg2_2@@3))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@10 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@10) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@10 o $allocated))) (U_2_bool (MapType0Select Heap@@10 (MapType0Select Heap@@10 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@10 o f))
)))
(assert (forall ((arg0@@38 Bool) (arg1@@54 Real) ) (! (= (type (|wand_3#sm| arg0@@38 arg1@@54)) (FieldType WandType_wand_3Type (MapType1Type RefType boolType)))
 :qid |funType:wand_3#sm|
 :pattern ( (|wand_3#sm| arg0@@38 arg1@@54))
)))
(assert (forall ((arg1@@55 Bool) (arg2@@41 Real) ) (! (= (|wand_3#sm| arg1@@55 arg2@@41) (WandMaskField (|wand_3#ft| arg1@@55 arg2@@41)))
 :qid |stdinbpl.199:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand_3#ft| arg1@@55 arg2@@41)))
)))
(assert (forall ((arg0@@39 Bool) (arg1@@56 Bool) ) (! (= (type (|wand_4#sm| arg0@@39 arg1@@56)) (FieldType WandType_wand_4Type (MapType1Type RefType boolType)))
 :qid |funType:wand_4#sm|
 :pattern ( (|wand_4#sm| arg0@@39 arg1@@56))
)))
(assert (forall ((arg1@@57 Bool) (arg2@@42 Bool) ) (! (= (|wand_4#sm| arg1@@57 arg2@@42) (WandMaskField (|wand_4#ft| arg1@@57 arg2@@42)))
 :qid |stdinbpl.295:15|
 :skolemid |47|
 :pattern ( (WandMaskField (|wand_4#ft| arg1@@57 arg2@@42)))
)))
(assert (forall ((arg0@@40 Real) (arg1@@58 Real) ) (! (= (type (|wand_1#sm| arg0@@40 arg1@@58)) (FieldType WandType_wand_1Type (MapType1Type RefType boolType)))
 :qid |funType:wand_1#sm|
 :pattern ( (|wand_1#sm| arg0@@40 arg1@@58))
)))
(assert (forall ((arg1@@59 Real) (arg2@@43 Real) ) (! (= (|wand_1#sm| arg1@@59 arg2@@43) (WandMaskField (|wand_1#ft| arg1@@59 arg2@@43)))
 :qid |stdinbpl.327:15|
 :skolemid |54|
 :pattern ( (WandMaskField (|wand_1#ft| arg1@@59 arg2@@43)))
)))
(assert (= (type |P#sm|) (FieldType PredicateType_PType (MapType1Type RefType boolType))))
(assert (= (PredicateMaskField P) |P#sm|))
(assert (= (type |Q#sm|) (FieldType PredicateType_QType (MapType1Type RefType boolType))))
(assert (= (PredicateMaskField Q) |Q#sm|))
(assert (= (type |R#sm|) (FieldType PredicateType_RType (MapType1Type RefType boolType))))
(assert (= (PredicateMaskField R) |R#sm|))
(assert (forall ((Heap@@11 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@11 (MapType0Store Heap@@11 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@11 o@@0 f_3 v))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.165:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun WandDefLHSMask@5 () T@U)
(declare-fun WandDefLHSHeap@3 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun b_13@8 () Bool)
(declare-fun b_23@4 () Bool)
(declare-fun neededTransfer@27 () Real)
(declare-fun Used_11Mask@3 () T@U)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_24@0 () Bool)
(declare-fun b_24@1 () Bool)
(declare-fun Result_9Heap () T@U)
(declare-fun Result_9Mask () T@U)
(declare-fun b_24@2 () Bool)
(declare-fun Ops_3Mask () T@U)
(declare-fun b_24@3 () Bool)
(declare-fun Ops_3Heap () T@U)
(declare-fun Used_11Heap@0 () T@U)
(declare-fun b_24@4 () Bool)
(declare-fun b_13@9 () Bool)
(declare-fun Mask@12 () T@U)
(declare-fun takeTransfer@13 () Real)
(declare-fun Mask@10 () T@U)
(declare-fun neededTransfer@25 () Real)
(declare-fun b_23@2 () Bool)
(declare-fun Used_11Mask@1 () T@U)
(declare-fun neededTransfer@26 () Real)
(declare-fun Used_11Mask@2 () T@U)
(declare-fun b_23@3 () Bool)
(declare-fun Mask@11 () T@U)
(declare-fun maskTransfer@13 () Real)
(declare-fun takeTransfer@12 () Real)
(declare-fun b_23@0 () Bool)
(declare-fun neededTransfer@24 () Real)
(declare-fun Used_11Mask@0 () T@U)
(declare-fun b_23@1 () Bool)
(declare-fun Ops_3Mask@13 () T@U)
(declare-fun Ops_3Mask@12 () T@U)
(declare-fun maskTransfer@12 () Real)
(declare-fun b_23 () Bool)
(declare-fun b_15@20 () Bool)
(declare-fun b_13@4 () Bool)
(declare-fun b_21@9 () Bool)
(declare-fun neededTransfer@23 () Real)
(declare-fun Used_10Mask@5 () T@U)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_22@0 () Bool)
(declare-fun b_22@1 () Bool)
(declare-fun Result_8Heap () T@U)
(declare-fun Result_8Mask () T@U)
(declare-fun b_22@2 () Bool)
(declare-fun Ops_5Mask () T@U)
(declare-fun b_22@3 () Bool)
(declare-fun Ops_5Heap@1 () T@U)
(declare-fun Used_10Heap@0 () T@U)
(declare-fun b_22@4 () Bool)
(declare-fun b_15@21 () Bool)
(declare-fun Ops_3Mask@11 () T@U)
(declare-fun Ops_3Mask@10 () T@U)
(declare-fun b_13@5 () Bool)
(declare-fun Ops_3Heap@7 () T@U)
(declare-fun b_13@6 () Bool)
(declare-fun b_13@7 () Bool)
(declare-fun Mask@9 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun takeTransfer@11 () Real)
(declare-fun Heap@4 () T@U)
(declare-fun Used_10Mask@3 () T@U)
(declare-fun b_21@6 () Bool)
(declare-fun Mask@7 () T@U)
(declare-fun neededTransfer@21 () Real)
(declare-fun neededTransfer@22 () Real)
(declare-fun Used_10Mask@4 () T@U)
(declare-fun b_21@7 () Bool)
(declare-fun TempMask@8 () T@U)
(declare-fun b_21@8 () Bool)
(declare-fun Mask@8 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun maskTransfer@11 () Real)
(declare-fun takeTransfer@10 () Real)
(declare-fun Ops_3Mask@8 () T@U)
(declare-fun Ops_3Heap@5 () T@U)
(declare-fun neededTransfer@19 () Real)
(declare-fun b_21@3 () Bool)
(declare-fun Used_10Mask@1 () T@U)
(declare-fun neededTransfer@20 () Real)
(declare-fun Used_10Mask@2 () T@U)
(declare-fun b_21@4 () Bool)
(declare-fun TempMask@7 () T@U)
(declare-fun b_21@5 () Bool)
(declare-fun Ops_3Mask@9 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun Ops_3Heap@6 () T@U)
(declare-fun maskTransfer@10 () Real)
(declare-fun takeTransfer@9 () Real)
(declare-fun b_21@0 () Bool)
(declare-fun neededTransfer@18 () Real)
(declare-fun Used_10Mask@0 () T@U)
(declare-fun b_21@1 () Bool)
(declare-fun TempMask@6 () T@U)
(declare-fun b_21@2 () Bool)
(declare-fun Ops_5Mask@10 () T@U)
(declare-fun Ops_5Mask@9 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun b_21 () Bool)
(declare-fun b_15@11 () Bool)
(declare-fun b_18@18 () Bool)
(declare-fun neededTransfer@17 () Real)
(declare-fun Used_9Mask@11 () T@U)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_20@0 () Bool)
(declare-fun b_20@1 () Bool)
(declare-fun Result_7Heap () T@U)
(declare-fun Result_7Mask () T@U)
(declare-fun b_20@2 () Bool)
(declare-fun Ops_5Mask@7 () T@U)
(declare-fun b_20@3 () Bool)
(declare-fun Ops_5Heap@0 () T@U)
(declare-fun Used_9Heap@0 () T@U)
(declare-fun b_20@4 () Bool)
(declare-fun b_15@12 () Bool)
(declare-fun b_15@13 () Bool)
(declare-fun b_15@14 () Bool)
(declare-fun b_15@15 () Bool)
(declare-fun Ops_5Mask@8 () T@U)
(declare-fun b_15@16 () Bool)
(declare-fun b_15@17 () Bool)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun b_15@18 () Bool)
(declare-fun b_15@19 () Bool)
(declare-fun Heap@3 () T@U)
(declare-fun Ops_3Heap@4 () T@U)
(declare-fun Ops_3Mask@7 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun takeTransfer@8 () Real)
(declare-fun b_18@15 () Bool)
(declare-fun Mask@4 () T@U)
(declare-fun Used_9Mask@9 () T@U)
(declare-fun neededTransfer@15 () Real)
(declare-fun Heap@1 () T@U)
(declare-fun neededTransfer@16 () Real)
(declare-fun Used_9Mask@10 () T@U)
(declare-fun b_18@16 () Bool)
(declare-fun TempMask@5 () T@U)
(declare-fun b_18@17 () Bool)
(declare-fun Mask@5 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun takeTransfer@7 () Real)
(declare-fun neededTransfer@13 () Real)
(declare-fun Ops_3Mask@5 () T@U)
(declare-fun Ops_3Heap@2 () T@U)
(declare-fun Used_9Mask@7 () T@U)
(declare-fun b_18@12 () Bool)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_9Mask@8 () T@U)
(declare-fun b_18@13 () Bool)
(declare-fun TempMask@4 () T@U)
(declare-fun b_18@14 () Bool)
(declare-fun Ops_3Mask@6 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Ops_3Heap@3 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun takeTransfer@6 () Real)
(declare-fun b_18@9 () Bool)
(declare-fun Used_9Mask@5 () T@U)
(declare-fun Ops_5Mask@5 () T@U)
(declare-fun neededTransfer@12 () Real)
(declare-fun Used_9Mask@6 () T@U)
(declare-fun b_18@10 () Bool)
(declare-fun TempMask@3 () T@U)
(declare-fun b_18@11 () Bool)
(declare-fun Ops_5Mask@6 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun b_15@8 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_19@0 () Bool)
(declare-fun b_19@1 () Bool)
(declare-fun Result_6Heap () T@U)
(declare-fun Result_6Mask () T@U)
(declare-fun b_19@2 () Bool)
(declare-fun b_19@3 () Bool)
(declare-fun b_19@4 () Bool)
(declare-fun b_15@9 () Bool)
(declare-fun b_15@10 () Bool)
(declare-fun takeTransfer@5 () Real)
(declare-fun neededTransfer@9 () Real)
(declare-fun Used_9Mask@3 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun b_18@6 () Bool)
(declare-fun Heap@@12 () T@U)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_9Mask@4 () T@U)
(declare-fun b_18@7 () Bool)
(declare-fun TempMask@2 () T@U)
(declare-fun b_18@8 () Bool)
(declare-fun Mask@3 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun b_18@3 () Bool)
(declare-fun Ops_3Heap@0 () T@U)
(declare-fun Ops_3Mask@3 () T@U)
(declare-fun Used_9Mask@1 () T@U)
(declare-fun neededTransfer@7 () Real)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_9Mask@2 () T@U)
(declare-fun b_18@4 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_18@5 () Bool)
(declare-fun Ops_3Mask@4 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Ops_3Heap@1 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun takeTransfer@3 () Real)
(declare-fun Ops_5Mask@3 () T@U)
(declare-fun b_18@0 () Bool)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_9Mask@0 () T@U)
(declare-fun b_18@1 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_18@2 () Bool)
(declare-fun Ops_5Mask@4 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun b_15@4 () Bool)
(declare-fun b_16@6 () Bool)
(declare-fun neededTransfer@5 () Real)
(declare-fun Used_8Mask@5 () T@U)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_17@0 () Bool)
(declare-fun b_17@1 () Bool)
(declare-fun Result_5Heap () T@U)
(declare-fun Result_5Mask () T@U)
(declare-fun b_17@2 () Bool)
(declare-fun b_17@3 () Bool)
(declare-fun Used_8Heap@0 () T@U)
(declare-fun b_17@4 () Bool)
(declare-fun b_15@5 () Bool)
(declare-fun b_15@6 () Bool)
(declare-fun b_15@7 () Bool)
(declare-fun b_18 () Bool)
(declare-fun takeTransfer@2 () Real)
(declare-fun Mask@0 () T@U)
(declare-fun Used_8Mask@3 () T@U)
(declare-fun b_16@4 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_8Mask@4 () T@U)
(declare-fun b_16@5 () Bool)
(declare-fun Mask@1 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun takeTransfer@1 () Real)
(declare-fun Ops_3Mask@1 () T@U)
(declare-fun neededTransfer@1 () Real)
(declare-fun b_16@2 () Bool)
(declare-fun Used_8Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_8Mask@2 () T@U)
(declare-fun b_16@3 () Bool)
(declare-fun Ops_3Mask@2 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun Ops_5Mask@1 () T@U)
(declare-fun b_16@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_8Mask@0 () T@U)
(declare-fun b_16@1 () Bool)
(declare-fun Ops_5Mask@2 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_16 () Bool)
(declare-fun b_15@3 () Bool)
(declare-fun b_15@2 () Bool)
(declare-fun b_15@0 () Bool)
(declare-fun Ops_5Mask@0 () T@U)
(declare-fun b_15@1 () Bool)
(declare-fun b_15 () Bool)
(declare-fun b_14@0 () Bool)
(declare-fun b_14 () Bool)
(declare-fun Used_7Heap@0 () T@U)
(declare-fun b_13@3 () Bool)
(declare-fun b_13@2 () Bool)
(declare-fun b_13@0 () Bool)
(declare-fun Ops_3Mask@0 () T@U)
(declare-fun b_13@1 () Bool)
(declare-fun b_13 () Bool)
(declare-fun b_12@0 () Bool)
(declare-fun b_12 () Bool)
(declare-fun Used_6Heap@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@13) (MapType1Type RefType realType)) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Heap@7) (MapType0Type RefType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type WandDefLHSMask@5) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@3) (MapType0Type RefType))) (= (type Used_11Mask@3) (MapType1Type RefType realType))) (= (type Result_9Heap) (MapType0Type RefType))) (= (type Result_9Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask) (MapType1Type RefType realType))) (= (type Ops_3Heap) (MapType0Type RefType))) (= (type Used_11Heap@0) (MapType0Type RefType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Used_11Mask@1) (MapType1Type RefType realType))) (= (type Used_11Mask@2) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Used_11Mask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@13) (MapType1Type RefType realType))) (= (type Ops_3Mask@12) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type Heap@@12) (MapType0Type RefType))) (= (type Ops_3Mask@1) (MapType1Type RefType realType))) (= (type Used_10Mask@5) (MapType1Type RefType realType))) (= (type Result_8Heap) (MapType0Type RefType))) (= (type Result_8Mask) (MapType1Type RefType realType))) (= (type Ops_5Mask) (MapType1Type RefType realType))) (= (type Ops_5Heap@1) (MapType0Type RefType))) (= (type Used_10Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@11) (MapType1Type RefType realType))) (= (type Ops_3Mask@10) (MapType1Type RefType realType))) (= (type Ops_3Heap@7) (MapType0Type RefType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Heap@6) (MapType0Type RefType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Used_10Mask@3) (MapType1Type RefType realType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Used_10Mask@4) (MapType1Type RefType realType))) (= (type TempMask@8) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Ops_3Mask@8) (MapType1Type RefType realType))) (= (type Ops_3Heap@5) (MapType0Type RefType))) (= (type Used_10Mask@1) (MapType1Type RefType realType))) (= (type Used_10Mask@2) (MapType1Type RefType realType))) (= (type TempMask@7) (MapType1Type RefType realType))) (= (type Ops_3Mask@9) (MapType1Type RefType realType))) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type Ops_3Heap@6) (MapType0Type RefType))) (= (type Used_10Mask@0) (MapType1Type RefType realType))) (= (type TempMask@6) (MapType1Type RefType realType))) (= (type Ops_5Mask@10) (MapType1Type RefType realType))) (= (type Ops_5Mask@9) (MapType1Type RefType realType))) (= (type Ops_5Heap@0) (MapType0Type RefType))) (= (type Ops_5Mask@1) (MapType1Type RefType realType))) (= (type Ops_3Heap@0) (MapType0Type RefType))) (= (type Used_9Mask@11) (MapType1Type RefType realType))) (= (type Result_7Heap) (MapType0Type RefType))) (= (type Result_7Mask) (MapType1Type RefType realType))) (= (type Ops_5Mask@7) (MapType1Type RefType realType))) (= (type Used_9Heap@0) (MapType0Type RefType))) (= (type Ops_5Mask@8) (MapType1Type RefType realType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Ops_3Heap@4) (MapType0Type RefType))) (= (type Ops_3Mask@7) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Used_9Mask@9) (MapType1Type RefType realType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Used_9Mask@10) (MapType1Type RefType realType))) (= (type TempMask@5) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Ops_3Mask@5) (MapType1Type RefType realType))) (= (type Ops_3Heap@2) (MapType0Type RefType))) (= (type Used_9Mask@7) (MapType1Type RefType realType))) (= (type Used_9Mask@8) (MapType1Type RefType realType))) (= (type TempMask@4) (MapType1Type RefType realType))) (= (type Ops_3Mask@6) (MapType1Type RefType realType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Ops_3Heap@3) (MapType0Type RefType))) (= (type Used_9Mask@5) (MapType1Type RefType realType))) (= (type Ops_5Mask@5) (MapType1Type RefType realType))) (= (type Used_9Mask@6) (MapType1Type RefType realType))) (= (type TempMask@3) (MapType1Type RefType realType))) (= (type Ops_5Mask@6) (MapType1Type RefType realType))) (= (type Result_6Heap) (MapType0Type RefType))) (= (type Result_6Mask) (MapType1Type RefType realType))) (= (type Used_9Mask@3) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Used_9Mask@4) (MapType1Type RefType realType))) (= (type TempMask@2) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@3) (MapType1Type RefType realType))) (= (type Used_9Mask@1) (MapType1Type RefType realType))) (= (type Used_9Mask@2) (MapType1Type RefType realType))) (= (type TempMask@1) (MapType1Type RefType realType))) (= (type Ops_3Mask@4) (MapType1Type RefType realType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Ops_3Heap@1) (MapType0Type RefType))) (= (type Ops_5Mask@3) (MapType1Type RefType realType))) (= (type Used_9Mask@0) (MapType1Type RefType realType))) (= (type TempMask@0) (MapType1Type RefType realType))) (= (type Ops_5Mask@4) (MapType1Type RefType realType))) (= (type Used_8Mask@5) (MapType1Type RefType realType))) (= (type Result_5Heap) (MapType0Type RefType))) (= (type Result_5Mask) (MapType1Type RefType realType))) (= (type Used_8Heap@0) (MapType0Type RefType))) (= (type Used_8Mask@3) (MapType1Type RefType realType))) (= (type Used_8Mask@4) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Used_8Mask@1) (MapType1Type RefType realType))) (= (type Used_8Mask@2) (MapType1Type RefType realType))) (= (type Ops_3Mask@2) (MapType1Type RefType realType))) (= (type Used_8Mask@0) (MapType1Type RefType realType))) (= (type Ops_5Mask@2) (MapType1Type RefType realType))) (= (type Ops_5Mask@0) (MapType1Type RefType realType))) (= (type Used_7Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@0) (MapType1Type RefType realType))) (= (type Used_6Heap@0) (MapType0Type RefType))))
(set-info :boogie-vc-id curry)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 133) (let ((anon114_Then_correct true))
(let ((anon153_Then_correct true))
(let ((anon161_Else_correct true))
(let ((anon161_Then_correct true))
(let ((anon160_Then_correct  (=> (and (and (= WandDefLHSMask@5 (MapType1Store ZeroMask null P (real_2_U (+ (U_2_real (MapType1Select ZeroMask null P)) FullPerm)))) (state WandDefLHSHeap@3 WandDefLHSMask@5)) (and (state WandDefLHSHeap@3 WandDefLHSMask@5) (state WandDefLHSHeap@3 WandDefLHSMask@5))) (and (=> (= (ControlFlow 0 7) 5) anon161_Then_correct) (=> (= (ControlFlow 0 7) 6) anon161_Else_correct)))))
(let ((anon160_Else_correct  (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= FullPerm (U_2_real (MapType1Select Mask@13 null (wand FullPerm FullPerm FullPerm))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@13 null (wand FullPerm FullPerm FullPerm)))) (=> (and (and (= Mask@14 (MapType1Store Mask@13 null (wand FullPerm FullPerm FullPerm) (real_2_U (- (U_2_real (MapType1Select Mask@13 null (wand FullPerm FullPerm FullPerm))) FullPerm)))) (IdenticalOnKnownLocations Heap@7 ExhaleHeap@1 Mask@14)) (and (state ExhaleHeap@1 Mask@14) (= (ControlFlow 0 3) (- 0 2)))) false)))))
(let ((anon102_correct  (and (=> (= (ControlFlow 0 8) (- 0 9)) (=> (and (and b_13@8 b_13@8) b_23@4) (and (= neededTransfer@27 0.0) (= (U_2_real (MapType1Select Used_11Mask@3 null (wand_1 FullPerm FullPerm))) initNeededTransfer@4)))) (=> (=> (and (and b_13@8 b_13@8) b_23@4) (and (= neededTransfer@27 0.0) (= (U_2_real (MapType1Select Used_11Mask@3 null (wand_1 FullPerm FullPerm))) initNeededTransfer@4))) (=> (and (= b_24@0  (and b_13@8 b_23@4)) (= b_24@1  (and b_24@0 (state Result_9Heap Result_9Mask)))) (=> (and (and (and (= b_24@2  (and b_24@1 (sumMask Result_9Mask Ops_3Mask Used_11Mask@3))) (= b_24@3  (and (and b_24@2 (IdenticalOnKnownLocations Ops_3Heap Result_9Heap Ops_3Mask)) (IdenticalOnKnownLocations Used_11Heap@0 Result_9Heap Used_11Mask@3)))) (and (= b_24@4  (and b_24@3 (state Result_9Heap Result_9Mask))) (= b_13@9  (and b_13@8 b_24@4)))) (and (and (= Mask@13 (MapType1Store Mask@12 null (wand FullPerm FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select Mask@12 null (wand FullPerm FullPerm FullPerm))) FullPerm)))) (state Heap@7 Mask@13)) (and (state Heap@7 Mask@13) (state Heap@7 Mask@13)))) (and (=> (= (ControlFlow 0 8) 7) anon160_Then_correct) (=> (= (ControlFlow 0 8) 3) anon160_Else_correct))))))))
(let ((anon159_Else_correct  (=> (and (>= 0.0 takeTransfer@13) (= Mask@12 Mask@10)) (=> (and (and (= neededTransfer@27 neededTransfer@25) (= b_23@4 b_23@2)) (and (= Used_11Mask@3 Used_11Mask@1) (= (ControlFlow 0 12) 8))) anon102_correct))))
(let ((anon159_Then_correct  (=> (and (> takeTransfer@13 0.0) (= neededTransfer@26 (- neededTransfer@25 takeTransfer@13))) (=> (and (and (and (= Used_11Mask@2 (MapType1Store Used_11Mask@1 null (wand_1 FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select Used_11Mask@1 null (wand_1 FullPerm FullPerm))) takeTransfer@13)))) (= b_23@3  (and b_23@2 (state Used_11Heap@0 Used_11Mask@2)))) (and (= Mask@11 (MapType1Store Mask@10 null (wand_1 FullPerm FullPerm) (real_2_U (- (U_2_real (MapType1Select Mask@10 null (wand_1 FullPerm FullPerm))) takeTransfer@13)))) (= Mask@12 Mask@11))) (and (and (= neededTransfer@27 neededTransfer@26) (= b_23@4 b_23@3)) (and (= Used_11Mask@3 Used_11Mask@2) (= (ControlFlow 0 11) 8)))) anon102_correct))))
(let ((anon158_Else_correct  (=> (and (< maskTransfer@13 neededTransfer@25) (= takeTransfer@13 maskTransfer@13)) (and (=> (= (ControlFlow 0 14) 11) anon159_Then_correct) (=> (= (ControlFlow 0 14) 12) anon159_Else_correct)))))
(let ((anon158_Then_correct  (=> (and (<= neededTransfer@25 maskTransfer@13) (= takeTransfer@13 neededTransfer@25)) (and (=> (= (ControlFlow 0 13) 11) anon159_Then_correct) (=> (= (ControlFlow 0 13) 12) anon159_Else_correct)))))
(let ((anon157_Then_correct  (=> (and (and (and (and (and b_13@8 b_13@8) b_23@2) true) (> neededTransfer@25 0.0)) (= maskTransfer@13 (U_2_real (MapType1Select Mask@10 null (wand_1 FullPerm FullPerm))))) (and (=> (= (ControlFlow 0 15) 13) anon158_Then_correct) (=> (= (ControlFlow 0 15) 14) anon158_Else_correct)))))
(let ((anon157_Else_correct  (=> (and (not (and (and (and (and b_13@8 b_13@8) b_23@2) true) (> neededTransfer@25 0.0))) (= Mask@12 Mask@10)) (=> (and (and (= neededTransfer@27 neededTransfer@25) (= b_23@4 b_23@2)) (and (= Used_11Mask@3 Used_11Mask@1) (= (ControlFlow 0 10) 8))) anon102_correct))))
(let ((anon156_Else_correct  (=> (and (and (>= 0.0 takeTransfer@12) (= Used_11Mask@1 ZeroMask)) (and (= b_23@2 b_23@0) (= neededTransfer@25 1.0))) (and (=> (= (ControlFlow 0 18) 15) anon157_Then_correct) (=> (= (ControlFlow 0 18) 10) anon157_Else_correct)))))
(let ((anon156_Then_correct  (=> (and (and (and (> takeTransfer@12 0.0) (= neededTransfer@24 (- 1.0 takeTransfer@12))) (and (= Used_11Mask@0 (MapType1Store ZeroMask null (wand_1 FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (wand_1 FullPerm FullPerm))) takeTransfer@12)))) (= b_23@1  (and b_23@0 (state Used_11Heap@0 Used_11Mask@0))))) (and (and (= Ops_3Mask@13 (MapType1Store Ops_3Mask@12 null (wand_1 FullPerm FullPerm) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@12 null (wand_1 FullPerm FullPerm))) takeTransfer@12)))) (= Used_11Mask@1 Used_11Mask@0)) (and (= b_23@2 b_23@1) (= neededTransfer@25 neededTransfer@24)))) (and (=> (= (ControlFlow 0 17) 15) anon157_Then_correct) (=> (= (ControlFlow 0 17) 10) anon157_Else_correct)))))
(let ((anon155_Else_correct  (=> (and (< maskTransfer@12 1.0) (= takeTransfer@12 maskTransfer@12)) (and (=> (= (ControlFlow 0 20) 17) anon156_Then_correct) (=> (= (ControlFlow 0 20) 18) anon156_Else_correct)))))
(let ((anon155_Then_correct  (=> (and (<= 1.0 maskTransfer@12) (= takeTransfer@12 1.0)) (and (=> (= (ControlFlow 0 19) 17) anon156_Then_correct) (=> (= (ControlFlow 0 19) 18) anon156_Else_correct)))))
(let ((anon154_Then_correct  (=> (and (and (and (and (and b_13@8 b_13@8) b_23@0) true) (> 1.0 0.0)) (= maskTransfer@12 (U_2_real (MapType1Select Ops_3Mask@12 null (wand_1 FullPerm FullPerm))))) (and (=> (= (ControlFlow 0 21) 19) anon155_Then_correct) (=> (= (ControlFlow 0 21) 20) anon155_Else_correct)))))
(let ((anon154_Else_correct  (=> (and (and (not (and (and (and (and b_13@8 b_13@8) b_23@0) true) (> 1.0 0.0))) (= Used_11Mask@1 ZeroMask)) (and (= b_23@2 b_23@0) (= neededTransfer@25 1.0))) (and (=> (= (ControlFlow 0 16) 15) anon157_Then_correct) (=> (= (ControlFlow 0 16) 10) anon157_Else_correct)))))
(let ((anon90_correct  (=> (= initNeededTransfer@4 (+ (U_2_real (MapType1Select ZeroMask null (wand_1 FullPerm FullPerm))) 1.0)) (and (=> (= (ControlFlow 0 22) (- 0 23)) (>= 1.0 0.0)) (=> (>= 1.0 0.0) (and (=> (= (ControlFlow 0 22) 21) anon154_Then_correct) (=> (= (ControlFlow 0 22) 16) anon154_Else_correct)))))))
(let ((anon152_Then_correct  (=> b_13@8 (and (=> (= (ControlFlow 0 27) 26) anon153_Then_correct) (=> (= (ControlFlow 0 27) 22) anon90_correct)))))
(let ((anon152_Else_correct  (=> (and (not b_13@8) (= (ControlFlow 0 25) 22)) anon90_correct)))
(let ((anon151_Then_correct  (=> (and (and b_13@8 b_13@8) b_23@0) (and (=> (= (ControlFlow 0 28) 27) anon152_Then_correct) (=> (= (ControlFlow 0 28) 25) anon152_Else_correct)))))
(let ((anon151_Else_correct  (=> (and (not (and (and b_13@8 b_13@8) b_23@0)) (= (ControlFlow 0 24) 22)) anon90_correct)))
(let ((anon86_correct  (=> (= b_23@0  (and b_23 (state Used_11Heap@0 ZeroMask))) (and (=> (= (ControlFlow 0 29) 28) anon151_Then_correct) (=> (= (ControlFlow 0 29) 24) anon151_Else_correct)))))
(let ((anon85_correct  (and (=> (= (ControlFlow 0 31) (- 0 32)) (=> (and (and b_15@20 (and b_15@20 b_13@4)) b_21@9) (and (= neededTransfer@23 0.0) (= (U_2_real (MapType1Select Used_10Mask@5 null R)) initNeededTransfer@3)))) (=> (=> (and (and b_15@20 (and b_15@20 b_13@4)) b_21@9) (and (= neededTransfer@23 0.0) (= (U_2_real (MapType1Select Used_10Mask@5 null R)) initNeededTransfer@3))) (=> (= b_22@0  (and b_15@20 b_21@9)) (=> (and (= b_22@1  (and b_22@0 (state Result_8Heap Result_8Mask))) (= b_22@2  (and b_22@1 (sumMask Result_8Mask Ops_5Mask Used_10Mask@5)))) (=> (and (and (= b_22@3  (and (and b_22@2 (IdenticalOnKnownLocations Ops_5Heap@1 Result_8Heap Ops_5Mask)) (IdenticalOnKnownLocations Used_10Heap@0 Result_8Heap Used_10Mask@5))) (= b_22@4  (and b_22@3 (state Result_8Heap Result_8Mask)))) (and (= b_15@21  (and b_15@20 b_22@4)) (= Ops_3Mask@11 (MapType1Store Ops_3Mask@10 null (wand_1 FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@10 null (wand_1 FullPerm FullPerm))) FullPerm)))))) (=> (and (and (and (= b_13@5  (and b_13@4 (state Ops_3Heap@7 Ops_3Mask@11))) (= b_13@6  (and b_13@5 (state Ops_3Heap@7 Ops_3Mask@11)))) (and (= b_13@7  (and b_13@6 (state Ops_3Heap@7 Ops_3Mask@11))) (= b_13@8 b_13@7))) (and (and (= Mask@10 Mask@9) (= Heap@7 Heap@6)) (and (= Ops_3Mask@12 Ops_3Mask@11) (= (ControlFlow 0 31) 29)))) anon86_correct))))))))
(let ((anon150_Else_correct  (=> (>= 0.0 takeTransfer@11) (=> (and (= Heap@6 Heap@4) (= Used_10Mask@5 Used_10Mask@3)) (=> (and (and (= b_21@9 b_21@6) (= Mask@9 Mask@7)) (and (= neededTransfer@23 neededTransfer@21) (= (ControlFlow 0 35) 31))) anon85_correct)))))
(let ((anon150_Then_correct  (=> (> takeTransfer@11 0.0) (=> (and (= neededTransfer@22 (- neededTransfer@21 takeTransfer@11)) (= Used_10Mask@4 (MapType1Store Used_10Mask@3 null R (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@3 null R)) takeTransfer@11))))) (=> (and (and (= b_21@7  (and b_21@6 (state Used_10Heap@0 Used_10Mask@4))) (= TempMask@8 (MapType1Store ZeroMask null R (real_2_U FullPerm)))) (and (= b_21@8  (and b_21@7 (IdenticalOnKnownLocations Heap@4 Used_10Heap@0 TempMask@8))) (= Mask@8 (MapType1Store Mask@7 null R (real_2_U (- (U_2_real (MapType1Select Mask@7 null R)) takeTransfer@11)))))) (=> (and (and (and (forall ((o_11 T@U) (f_15 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_15))))
(let ((A@@12 (FieldTypeInv0 (type f_15))))
 (=> (and (and (= (type o_11) RefType) (= (type f_15) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@4 null (|wand_1#sm| FullPerm FullPerm)) o_11 f_15)) (U_2_bool (MapType1Select (MapType0Select Heap@4 null |R#sm|) o_11 f_15)))) (U_2_bool (MapType1Select newPMask@5 o_11 f_15)))))
 :qid |stdinbpl.1683:39|
 :skolemid |68|
 :pattern ( (MapType1Select newPMask@5 o_11 f_15))
)) (= Heap@5 (MapType0Store Heap@4 null (|wand_1#sm| FullPerm FullPerm) newPMask@5))) (and (= Heap@6 Heap@5) (= Used_10Mask@5 Used_10Mask@4))) (and (and (= b_21@9 b_21@8) (= Mask@9 Mask@8)) (and (= neededTransfer@23 neededTransfer@22) (= (ControlFlow 0 34) 31)))) anon85_correct))))))
(let ((anon149_Else_correct  (=> (and (< maskTransfer@11 neededTransfer@21) (= takeTransfer@11 maskTransfer@11)) (and (=> (= (ControlFlow 0 37) 34) anon150_Then_correct) (=> (= (ControlFlow 0 37) 35) anon150_Else_correct)))))
(let ((anon149_Then_correct  (=> (and (<= neededTransfer@21 maskTransfer@11) (= takeTransfer@11 neededTransfer@21)) (and (=> (= (ControlFlow 0 36) 34) anon150_Then_correct) (=> (= (ControlFlow 0 36) 35) anon150_Else_correct)))))
(let ((anon148_Then_correct  (=> (and (and (and (and (and b_15@20 (and b_15@20 b_13@4)) b_21@6) true) (> neededTransfer@21 0.0)) (= maskTransfer@11 (U_2_real (MapType1Select Mask@7 null R)))) (and (=> (= (ControlFlow 0 38) 36) anon149_Then_correct) (=> (= (ControlFlow 0 38) 37) anon149_Else_correct)))))
(let ((anon148_Else_correct  (=> (not (and (and (and (and b_15@20 (and b_15@20 b_13@4)) b_21@6) true) (> neededTransfer@21 0.0))) (=> (and (= Heap@6 Heap@4) (= Used_10Mask@5 Used_10Mask@3)) (=> (and (and (= b_21@9 b_21@6) (= Mask@9 Mask@7)) (and (= neededTransfer@23 neededTransfer@21) (= (ControlFlow 0 33) 31))) anon85_correct)))))
(let ((anon147_Else_correct  (=> (and (>= 0.0 takeTransfer@10) (= Ops_3Mask@10 Ops_3Mask@8)) (=> (and (and (= Ops_3Heap@7 Ops_3Heap@5) (= neededTransfer@21 neededTransfer@19)) (and (= b_21@6 b_21@3) (= Used_10Mask@3 Used_10Mask@1))) (and (=> (= (ControlFlow 0 41) 38) anon148_Then_correct) (=> (= (ControlFlow 0 41) 33) anon148_Else_correct))))))
(let ((anon147_Then_correct  (=> (and (> takeTransfer@10 0.0) (= neededTransfer@20 (- neededTransfer@19 takeTransfer@10))) (=> (and (and (= Used_10Mask@2 (MapType1Store Used_10Mask@1 null R (real_2_U (+ (U_2_real (MapType1Select Used_10Mask@1 null R)) takeTransfer@10)))) (= b_21@4  (and b_21@3 (state Used_10Heap@0 Used_10Mask@2)))) (and (= TempMask@7 (MapType1Store ZeroMask null R (real_2_U FullPerm))) (= b_21@5  (and b_21@4 (IdenticalOnKnownLocations Ops_3Heap@5 Used_10Heap@0 TempMask@7))))) (=> (and (and (and (= Ops_3Mask@9 (MapType1Store Ops_3Mask@8 null R (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@8 null R)) takeTransfer@10)))) (forall ((o_10 T@U) (f_14 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_14))))
(let ((A@@13 (FieldTypeInv0 (type f_14))))
 (=> (and (and (= (type o_10) RefType) (= (type f_14) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@5 null (|wand_1#sm| FullPerm FullPerm)) o_10 f_14)) (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@5 null |R#sm|) o_10 f_14)))) (U_2_bool (MapType1Select newPMask@4 o_10 f_14)))))
 :qid |stdinbpl.1656:39|
 :skolemid |67|
 :pattern ( (MapType1Select newPMask@4 o_10 f_14))
))) (and (= Ops_3Heap@6 (MapType0Store Ops_3Heap@5 null (|wand_1#sm| FullPerm FullPerm) newPMask@4)) (= Ops_3Mask@10 Ops_3Mask@9))) (and (and (= Ops_3Heap@7 Ops_3Heap@6) (= neededTransfer@21 neededTransfer@20)) (and (= b_21@6 b_21@5) (= Used_10Mask@3 Used_10Mask@2)))) (and (=> (= (ControlFlow 0 40) 38) anon148_Then_correct) (=> (= (ControlFlow 0 40) 33) anon148_Else_correct)))))))
(let ((anon146_Else_correct  (=> (and (< maskTransfer@10 neededTransfer@19) (= takeTransfer@10 maskTransfer@10)) (and (=> (= (ControlFlow 0 43) 40) anon147_Then_correct) (=> (= (ControlFlow 0 43) 41) anon147_Else_correct)))))
(let ((anon146_Then_correct  (=> (and (<= neededTransfer@19 maskTransfer@10) (= takeTransfer@10 neededTransfer@19)) (and (=> (= (ControlFlow 0 42) 40) anon147_Then_correct) (=> (= (ControlFlow 0 42) 41) anon147_Else_correct)))))
(let ((anon145_Then_correct  (=> (and (and (and (and (and b_15@20 (and b_15@20 b_13@4)) b_21@3) true) (> neededTransfer@19 0.0)) (= maskTransfer@10 (U_2_real (MapType1Select Ops_3Mask@8 null R)))) (and (=> (= (ControlFlow 0 44) 42) anon146_Then_correct) (=> (= (ControlFlow 0 44) 43) anon146_Else_correct)))))
(let ((anon145_Else_correct  (=> (and (not (and (and (and (and b_15@20 (and b_15@20 b_13@4)) b_21@3) true) (> neededTransfer@19 0.0))) (= Ops_3Mask@10 Ops_3Mask@8)) (=> (and (and (= Ops_3Heap@7 Ops_3Heap@5) (= neededTransfer@21 neededTransfer@19)) (and (= b_21@6 b_21@3) (= Used_10Mask@3 Used_10Mask@1))) (and (=> (= (ControlFlow 0 39) 38) anon148_Then_correct) (=> (= (ControlFlow 0 39) 33) anon148_Else_correct))))))
(let ((anon144_Else_correct  (=> (and (and (>= 0.0 takeTransfer@9) (= Used_10Mask@1 ZeroMask)) (and (= b_21@3 b_21@0) (= neededTransfer@19 FullPerm))) (and (=> (= (ControlFlow 0 47) 44) anon145_Then_correct) (=> (= (ControlFlow 0 47) 39) anon145_Else_correct)))))
(let ((anon144_Then_correct  (=> (and (> takeTransfer@9 0.0) (= neededTransfer@18 (- FullPerm takeTransfer@9))) (=> (and (and (and (= Used_10Mask@0 (MapType1Store ZeroMask null R (real_2_U (+ (U_2_real (MapType1Select ZeroMask null R)) takeTransfer@9)))) (= b_21@1  (and b_21@0 (state Used_10Heap@0 Used_10Mask@0)))) (and (= TempMask@6 (MapType1Store ZeroMask null R (real_2_U FullPerm))) (= b_21@2  (and b_21@1 (IdenticalOnKnownLocations Ops_5Heap@1 Used_10Heap@0 TempMask@6))))) (and (and (= Ops_5Mask@10 (MapType1Store Ops_5Mask@9 null R (real_2_U (- (U_2_real (MapType1Select Ops_5Mask@9 null R)) takeTransfer@9)))) (= Used_10Mask@1 Used_10Mask@0)) (and (= b_21@3 b_21@2) (= neededTransfer@19 neededTransfer@18)))) (and (=> (= (ControlFlow 0 46) 44) anon145_Then_correct) (=> (= (ControlFlow 0 46) 39) anon145_Else_correct))))))
(let ((anon143_Else_correct  (=> (and (< maskTransfer@9 FullPerm) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 49) 46) anon144_Then_correct) (=> (= (ControlFlow 0 49) 47) anon144_Else_correct)))))
(let ((anon143_Then_correct  (=> (and (<= FullPerm maskTransfer@9) (= takeTransfer@9 FullPerm)) (and (=> (= (ControlFlow 0 48) 46) anon144_Then_correct) (=> (= (ControlFlow 0 48) 47) anon144_Else_correct)))))
(let ((anon142_Then_correct  (=> (and (and (and (and (and b_15@20 (and b_15@20 b_13@4)) b_21@0) true) (> FullPerm 0.0)) (= maskTransfer@9 (U_2_real (MapType1Select Ops_5Mask@9 null R)))) (and (=> (= (ControlFlow 0 50) 48) anon143_Then_correct) (=> (= (ControlFlow 0 50) 49) anon143_Else_correct)))))
(let ((anon142_Else_correct  (=> (and (and (not (and (and (and (and b_15@20 (and b_15@20 b_13@4)) b_21@0) true) (> FullPerm 0.0))) (= Used_10Mask@1 ZeroMask)) (and (= b_21@3 b_21@0) (= neededTransfer@19 FullPerm))) (and (=> (= (ControlFlow 0 45) 44) anon145_Then_correct) (=> (= (ControlFlow 0 45) 39) anon145_Else_correct)))))
(let ((anon67_correct  (=> (and (= b_21@0  (and b_21 (state Used_10Heap@0 ZeroMask))) (= initNeededTransfer@3 (+ (U_2_real (MapType1Select ZeroMask null R)) FullPerm))) (and (=> (= (ControlFlow 0 51) (- 0 52)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 51) 50) anon142_Then_correct) (=> (= (ControlFlow 0 51) 45) anon142_Else_correct)))))))
(let ((anon66_correct  (and (=> (= (ControlFlow 0 54) (- 0 55)) (=> (and b_15@11 b_18@18) (and (= neededTransfer@17 0.0) (= (U_2_real (MapType1Select Used_9Mask@11 null Q)) initNeededTransfer@2)))) (=> (=> (and b_15@11 b_18@18) (and (= neededTransfer@17 0.0) (= (U_2_real (MapType1Select Used_9Mask@11 null Q)) initNeededTransfer@2))) (=> (= b_20@0  (and b_15@11 b_18@18)) (=> (and (= b_20@1  (and b_20@0 (state Result_7Heap Result_7Mask))) (= b_20@2  (and b_20@1 (sumMask Result_7Mask Ops_5Mask@7 Used_9Mask@11)))) (=> (and (and (= b_20@3  (and (and b_20@2 (IdenticalOnKnownLocations Ops_5Heap@0 Result_7Heap Ops_5Mask@7)) (IdenticalOnKnownLocations Used_9Heap@0 Result_7Heap Used_9Mask@11))) (= b_20@4  (and b_20@3 (state Result_7Heap Result_7Mask)))) (and (= b_15@12  (and b_15@11 b_20@4)) (= b_15@13  (and b_15@12 b_18@18)))) (=> (and (and (and (and (= b_15@14  (and b_15@13 (= Used_9Heap@0 Ops_5Heap@0))) (= b_15@15  (and b_15@14 (state Ops_5Heap@0 Ops_5Mask@7)))) (and (= Ops_5Mask@8 (MapType1Store Ops_5Mask@7 null R (real_2_U (+ (U_2_real (MapType1Select Ops_5Mask@7 null R)) FullPerm)))) (= b_15@16  (and b_15@15 (state Ops_5Heap@0 Ops_5Mask@8))))) (and (and (= b_15@17  (and b_15@16 (state Ops_5Heap@0 Ops_5Mask@8))) (IdenticalOnKnownLocations Ops_5Heap@0 ExhaleHeap@0 Ops_5Mask@8)) (and (= b_15@18  (and b_15@17 (state ExhaleHeap@0 Ops_5Mask@8))) (= b_15@19  (and b_15@18 (state ExhaleHeap@0 Ops_5Mask@8)))))) (and (and (and (= Heap@4 Heap@3) (= Ops_5Heap@1 ExhaleHeap@0)) (and (= b_15@20 b_15@19) (= Ops_5Mask@9 Ops_5Mask@8))) (and (and (= Ops_3Heap@5 Ops_3Heap@4) (= Ops_3Mask@8 Ops_3Mask@7)) (and (= Mask@7 Mask@6) (= (ControlFlow 0 54) 51))))) anon67_correct))))))))
(let ((anon141_Else_correct  (=> (>= 0.0 takeTransfer@8) (=> (and (= b_18@18 b_18@15) (= Mask@6 Mask@4)) (=> (and (and (= Used_9Mask@11 Used_9Mask@9) (= neededTransfer@17 neededTransfer@15)) (and (= Heap@3 Heap@1) (= (ControlFlow 0 58) 54))) anon66_correct)))))
(let ((anon141_Then_correct  (=> (> takeTransfer@8 0.0) (=> (and (= neededTransfer@16 (- neededTransfer@15 takeTransfer@8)) (= Used_9Mask@10 (MapType1Store Used_9Mask@9 null Q (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@9 null Q)) takeTransfer@8))))) (=> (and (and (= b_18@16  (and b_18@15 (state Used_9Heap@0 Used_9Mask@10))) (= TempMask@5 (MapType1Store ZeroMask null Q (real_2_U FullPerm)))) (and (= b_18@17  (and b_18@16 (IdenticalOnKnownLocations Heap@1 Used_9Heap@0 TempMask@5))) (= Mask@5 (MapType1Store Mask@4 null Q (real_2_U (- (U_2_real (MapType1Select Mask@4 null Q)) takeTransfer@8)))))) (=> (and (and (and (forall ((o_9 T@U) (f_13 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_13))))
(let ((A@@14 (FieldTypeInv0 (type f_13))))
 (=> (and (and (= (type o_9) RefType) (= (type f_13) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select Heap@1 null (|wand_1#sm| FullPerm FullPerm)) o_9 f_13)) (U_2_bool (MapType1Select (MapType0Select Heap@1 null |Q#sm|) o_9 f_13)))) (U_2_bool (MapType1Select newPMask@3 o_9 f_13)))))
 :qid |stdinbpl.1572:45|
 :skolemid |66|
 :pattern ( (MapType1Select newPMask@3 o_9 f_13))
)) (= Heap@2 (MapType0Store Heap@1 null (|wand_1#sm| FullPerm FullPerm) newPMask@3))) (and (= b_18@18 b_18@17) (= Mask@6 Mask@5))) (and (and (= Used_9Mask@11 Used_9Mask@10) (= neededTransfer@17 neededTransfer@16)) (and (= Heap@3 Heap@2) (= (ControlFlow 0 57) 54)))) anon66_correct))))))
(let ((anon140_Else_correct  (=> (and (< maskTransfer@8 neededTransfer@15) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 60) 57) anon141_Then_correct) (=> (= (ControlFlow 0 60) 58) anon141_Else_correct)))))
(let ((anon140_Then_correct  (=> (and (<= neededTransfer@15 maskTransfer@8) (= takeTransfer@8 neededTransfer@15)) (and (=> (= (ControlFlow 0 59) 57) anon141_Then_correct) (=> (= (ControlFlow 0 59) 58) anon141_Else_correct)))))
(let ((anon139_Then_correct  (=> (and (and (and (and b_15@11 b_18@15) true) (> neededTransfer@15 0.0)) (= maskTransfer@8 (U_2_real (MapType1Select Mask@4 null Q)))) (and (=> (= (ControlFlow 0 61) 59) anon140_Then_correct) (=> (= (ControlFlow 0 61) 60) anon140_Else_correct)))))
(let ((anon139_Else_correct  (=> (not (and (and (and b_15@11 b_18@15) true) (> neededTransfer@15 0.0))) (=> (and (= b_18@18 b_18@15) (= Mask@6 Mask@4)) (=> (and (and (= Used_9Mask@11 Used_9Mask@9) (= neededTransfer@17 neededTransfer@15)) (and (= Heap@3 Heap@1) (= (ControlFlow 0 56) 54))) anon66_correct)))))
(let ((anon138_Else_correct  (=> (and (>= 0.0 takeTransfer@7) (= neededTransfer@15 neededTransfer@13)) (=> (and (and (= Ops_3Mask@7 Ops_3Mask@5) (= Ops_3Heap@4 Ops_3Heap@2)) (and (= Used_9Mask@9 Used_9Mask@7) (= b_18@15 b_18@12))) (and (=> (= (ControlFlow 0 64) 61) anon139_Then_correct) (=> (= (ControlFlow 0 64) 56) anon139_Else_correct))))))
(let ((anon138_Then_correct  (=> (and (> takeTransfer@7 0.0) (= neededTransfer@14 (- neededTransfer@13 takeTransfer@7))) (=> (and (and (= Used_9Mask@8 (MapType1Store Used_9Mask@7 null Q (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@7 null Q)) takeTransfer@7)))) (= b_18@13  (and b_18@12 (state Used_9Heap@0 Used_9Mask@8)))) (and (= TempMask@4 (MapType1Store ZeroMask null Q (real_2_U FullPerm))) (= b_18@14  (and b_18@13 (IdenticalOnKnownLocations Ops_3Heap@2 Used_9Heap@0 TempMask@4))))) (=> (and (and (and (= Ops_3Mask@6 (MapType1Store Ops_3Mask@5 null Q (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@5 null Q)) takeTransfer@7)))) (forall ((o_8 T@U) (f_12 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_12))))
(let ((A@@15 (FieldTypeInv0 (type f_12))))
 (=> (and (and (= (type o_8) RefType) (= (type f_12) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@2 null (|wand_1#sm| FullPerm FullPerm)) o_8 f_12)) (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@2 null |Q#sm|) o_8 f_12)))) (U_2_bool (MapType1Select newPMask@2 o_8 f_12)))))
 :qid |stdinbpl.1545:45|
 :skolemid |65|
 :pattern ( (MapType1Select newPMask@2 o_8 f_12))
))) (and (= Ops_3Heap@3 (MapType0Store Ops_3Heap@2 null (|wand_1#sm| FullPerm FullPerm) newPMask@2)) (= neededTransfer@15 neededTransfer@14))) (and (and (= Ops_3Mask@7 Ops_3Mask@6) (= Ops_3Heap@4 Ops_3Heap@3)) (and (= Used_9Mask@9 Used_9Mask@8) (= b_18@15 b_18@14)))) (and (=> (= (ControlFlow 0 63) 61) anon139_Then_correct) (=> (= (ControlFlow 0 63) 56) anon139_Else_correct)))))))
(let ((anon137_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@13) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 66) 63) anon138_Then_correct) (=> (= (ControlFlow 0 66) 64) anon138_Else_correct)))))
(let ((anon137_Then_correct  (=> (and (<= neededTransfer@13 maskTransfer@7) (= takeTransfer@7 neededTransfer@13)) (and (=> (= (ControlFlow 0 65) 63) anon138_Then_correct) (=> (= (ControlFlow 0 65) 64) anon138_Else_correct)))))
(let ((anon136_Then_correct  (=> (and (and (and (and b_15@11 b_18@12) true) (> neededTransfer@13 0.0)) (= maskTransfer@7 (U_2_real (MapType1Select Ops_3Mask@5 null Q)))) (and (=> (= (ControlFlow 0 67) 65) anon137_Then_correct) (=> (= (ControlFlow 0 67) 66) anon137_Else_correct)))))
(let ((anon136_Else_correct  (=> (and (not (and (and (and b_15@11 b_18@12) true) (> neededTransfer@13 0.0))) (= neededTransfer@15 neededTransfer@13)) (=> (and (and (= Ops_3Mask@7 Ops_3Mask@5) (= Ops_3Heap@4 Ops_3Heap@2)) (and (= Used_9Mask@9 Used_9Mask@7) (= b_18@15 b_18@12))) (and (=> (= (ControlFlow 0 62) 61) anon139_Then_correct) (=> (= (ControlFlow 0 62) 56) anon139_Else_correct))))))
(let ((anon135_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (and (= b_18@12 b_18@9) (= Used_9Mask@7 Used_9Mask@5)) (and (= Ops_5Mask@7 Ops_5Mask@5) (= neededTransfer@13 FullPerm))) (and (=> (= (ControlFlow 0 70) 67) anon136_Then_correct) (=> (= (ControlFlow 0 70) 62) anon136_Else_correct))))))
(let ((anon135_Then_correct  (=> (> takeTransfer@6 0.0) (=> (and (= neededTransfer@12 (- FullPerm takeTransfer@6)) (= Used_9Mask@6 (MapType1Store Used_9Mask@5 null Q (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@5 null Q)) takeTransfer@6))))) (=> (and (and (and (= b_18@10  (and b_18@9 (state Used_9Heap@0 Used_9Mask@6))) (= TempMask@3 (MapType1Store ZeroMask null Q (real_2_U FullPerm)))) (and (= b_18@11  (and b_18@10 (IdenticalOnKnownLocations Ops_5Heap@0 Used_9Heap@0 TempMask@3))) (= Ops_5Mask@6 (MapType1Store Ops_5Mask@5 null Q (real_2_U (- (U_2_real (MapType1Select Ops_5Mask@5 null Q)) takeTransfer@6)))))) (and (and (= b_18@12 b_18@11) (= Used_9Mask@7 Used_9Mask@6)) (and (= Ops_5Mask@7 Ops_5Mask@6) (= neededTransfer@13 neededTransfer@12)))) (and (=> (= (ControlFlow 0 69) 67) anon136_Then_correct) (=> (= (ControlFlow 0 69) 62) anon136_Else_correct)))))))
(let ((anon134_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 72) 69) anon135_Then_correct) (=> (= (ControlFlow 0 72) 70) anon135_Else_correct)))))
(let ((anon134_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 71) 69) anon135_Then_correct) (=> (= (ControlFlow 0 71) 70) anon135_Else_correct)))))
(let ((anon133_Then_correct  (=> (and (and (and (and b_15@11 b_18@9) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType1Select Ops_5Mask@5 null Q)))) (and (=> (= (ControlFlow 0 73) 71) anon134_Then_correct) (=> (= (ControlFlow 0 73) 72) anon134_Else_correct)))))
(let ((anon133_Else_correct  (=> (not (and (and (and b_15@11 b_18@9) true) (> FullPerm 0.0))) (=> (and (and (= b_18@12 b_18@9) (= Used_9Mask@7 Used_9Mask@5)) (and (= Ops_5Mask@7 Ops_5Mask@5) (= neededTransfer@13 FullPerm))) (and (=> (= (ControlFlow 0 68) 67) anon136_Then_correct) (=> (= (ControlFlow 0 68) 62) anon136_Else_correct))))))
(let ((anon48_correct  (and (=> (= (ControlFlow 0 74) (- 0 76)) (=> (and b_15@8 b_18@9) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_9Mask@5 null P)) initNeededTransfer@1)))) (=> (=> (and b_15@8 b_18@9) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_9Mask@5 null P)) initNeededTransfer@1))) (=> (= b_19@0  (and b_15@8 b_18@9)) (=> (and (and (and (= b_19@1  (and b_19@0 (state Result_6Heap Result_6Mask))) (= b_19@2  (and b_19@1 (sumMask Result_6Mask Ops_5Mask@5 Used_9Mask@5)))) (and (= b_19@3  (and (and b_19@2 (IdenticalOnKnownLocations Ops_5Heap@0 Result_6Heap Ops_5Mask@5)) (IdenticalOnKnownLocations Used_9Heap@0 Result_6Heap Used_9Mask@5))) (= b_19@4  (and b_19@3 (state Result_6Heap Result_6Mask))))) (and (and (= b_15@9  (and b_15@8 b_19@4)) (= b_15@10  (and b_15@9 b_18@9))) (and (= b_15@11  (and b_15@10 (= Used_9Heap@0 Ops_5Heap@0))) (= initNeededTransfer@2 (+ (U_2_real (MapType1Select Used_9Mask@5 null Q)) FullPerm))))) (and (=> (= (ControlFlow 0 74) (- 0 75)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 74) 73) anon133_Then_correct) (=> (= (ControlFlow 0 74) 68) anon133_Else_correct))))))))))
(let ((anon132_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (= neededTransfer@11 neededTransfer@9) (= Used_9Mask@5 Used_9Mask@3)) (=> (and (and (= Mask@4 Mask@2) (= b_18@9 b_18@6)) (and (= Heap@1 Heap@@12) (= (ControlFlow 0 79) 74))) anon48_correct)))))
(let ((anon132_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (= neededTransfer@10 (- neededTransfer@9 takeTransfer@5)) (= Used_9Mask@4 (MapType1Store Used_9Mask@3 null P (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@3 null P)) takeTransfer@5))))) (=> (and (and (= b_18@7  (and b_18@6 (state Used_9Heap@0 Used_9Mask@4))) (= TempMask@2 (MapType1Store ZeroMask null P (real_2_U FullPerm)))) (and (= b_18@8  (and b_18@7 (IdenticalOnKnownLocations Heap@@12 Used_9Heap@0 TempMask@2))) (= Mask@3 (MapType1Store Mask@2 null P (real_2_U (- (U_2_real (MapType1Select Mask@2 null P)) takeTransfer@5)))))) (=> (and (and (and (forall ((o_7 T@U) (f_11 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_11))))
(let ((A@@16 (FieldTypeInv0 (type f_11))))
 (=> (and (and (= (type o_7) RefType) (= (type f_11) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select Heap@@12 null (|wand_1#sm| FullPerm FullPerm)) o_7 f_11)) (U_2_bool (MapType1Select (MapType0Select Heap@@12 null |P#sm|) o_7 f_11)))) (U_2_bool (MapType1Select newPMask@1 o_7 f_11)))))
 :qid |stdinbpl.1479:45|
 :skolemid |64|
 :pattern ( (MapType1Select newPMask@1 o_7 f_11))
)) (= Heap@0 (MapType0Store Heap@@12 null (|wand_1#sm| FullPerm FullPerm) newPMask@1))) (and (= neededTransfer@11 neededTransfer@10) (= Used_9Mask@5 Used_9Mask@4))) (and (and (= Mask@4 Mask@3) (= b_18@9 b_18@8)) (and (= Heap@1 Heap@0) (= (ControlFlow 0 78) 74)))) anon48_correct))))))
(let ((anon131_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@9) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 81) 78) anon132_Then_correct) (=> (= (ControlFlow 0 81) 79) anon132_Else_correct)))))
(let ((anon131_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@5) (= takeTransfer@5 neededTransfer@9)) (and (=> (= (ControlFlow 0 80) 78) anon132_Then_correct) (=> (= (ControlFlow 0 80) 79) anon132_Else_correct)))))
(let ((anon130_Then_correct  (=> (and (and (and (and b_15@8 b_18@6) true) (> neededTransfer@9 0.0)) (= maskTransfer@5 (U_2_real (MapType1Select Mask@2 null P)))) (and (=> (= (ControlFlow 0 82) 80) anon131_Then_correct) (=> (= (ControlFlow 0 82) 81) anon131_Else_correct)))))
(let ((anon130_Else_correct  (=> (not (and (and (and b_15@8 b_18@6) true) (> neededTransfer@9 0.0))) (=> (and (= neededTransfer@11 neededTransfer@9) (= Used_9Mask@5 Used_9Mask@3)) (=> (and (and (= Mask@4 Mask@2) (= b_18@9 b_18@6)) (and (= Heap@1 Heap@@12) (= (ControlFlow 0 77) 74))) anon48_correct)))))
(let ((anon129_Else_correct  (=> (and (>= 0.0 takeTransfer@4) (= b_18@6 b_18@3)) (=> (and (and (= Ops_3Heap@2 Ops_3Heap@0) (= Ops_3Mask@5 Ops_3Mask@3)) (and (= Used_9Mask@3 Used_9Mask@1) (= neededTransfer@9 neededTransfer@7))) (and (=> (= (ControlFlow 0 85) 82) anon130_Then_correct) (=> (= (ControlFlow 0 85) 77) anon130_Else_correct))))))
(let ((anon129_Then_correct  (=> (and (> takeTransfer@4 0.0) (= neededTransfer@8 (- neededTransfer@7 takeTransfer@4))) (=> (and (and (= Used_9Mask@2 (MapType1Store Used_9Mask@1 null P (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@1 null P)) takeTransfer@4)))) (= b_18@4  (and b_18@3 (state Used_9Heap@0 Used_9Mask@2)))) (and (= TempMask@1 (MapType1Store ZeroMask null P (real_2_U FullPerm))) (= b_18@5  (and b_18@4 (IdenticalOnKnownLocations Ops_3Heap@0 Used_9Heap@0 TempMask@1))))) (=> (and (and (and (= Ops_3Mask@4 (MapType1Store Ops_3Mask@3 null P (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@3 null P)) takeTransfer@4)))) (forall ((o_6 T@U) (f_10 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_10))))
(let ((A@@17 (FieldTypeInv0 (type f_10))))
 (=> (and (and (= (type o_6) RefType) (= (type f_10) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@0 null (|wand_1#sm| FullPerm FullPerm)) o_6 f_10)) (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@0 null |P#sm|) o_6 f_10)))) (U_2_bool (MapType1Select newPMask@0 o_6 f_10)))))
 :qid |stdinbpl.1452:45|
 :skolemid |63|
 :pattern ( (MapType1Select newPMask@0 o_6 f_10))
))) (and (= Ops_3Heap@1 (MapType0Store Ops_3Heap@0 null (|wand_1#sm| FullPerm FullPerm) newPMask@0)) (= b_18@6 b_18@5))) (and (and (= Ops_3Heap@2 Ops_3Heap@1) (= Ops_3Mask@5 Ops_3Mask@4)) (and (= Used_9Mask@3 Used_9Mask@2) (= neededTransfer@9 neededTransfer@8)))) (and (=> (= (ControlFlow 0 84) 82) anon130_Then_correct) (=> (= (ControlFlow 0 84) 77) anon130_Else_correct)))))))
(let ((anon128_Else_correct  (=> (and (< maskTransfer@4 neededTransfer@7) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 87) 84) anon129_Then_correct) (=> (= (ControlFlow 0 87) 85) anon129_Else_correct)))))
(let ((anon128_Then_correct  (=> (and (<= neededTransfer@7 maskTransfer@4) (= takeTransfer@4 neededTransfer@7)) (and (=> (= (ControlFlow 0 86) 84) anon129_Then_correct) (=> (= (ControlFlow 0 86) 85) anon129_Else_correct)))))
(let ((anon127_Then_correct  (=> (and (and (and (and b_15@8 b_18@3) true) (> neededTransfer@7 0.0)) (= maskTransfer@4 (U_2_real (MapType1Select Ops_3Mask@3 null P)))) (and (=> (= (ControlFlow 0 88) 86) anon128_Then_correct) (=> (= (ControlFlow 0 88) 87) anon128_Else_correct)))))
(let ((anon127_Else_correct  (=> (and (not (and (and (and b_15@8 b_18@3) true) (> neededTransfer@7 0.0))) (= b_18@6 b_18@3)) (=> (and (and (= Ops_3Heap@2 Ops_3Heap@0) (= Ops_3Mask@5 Ops_3Mask@3)) (and (= Used_9Mask@3 Used_9Mask@1) (= neededTransfer@9 neededTransfer@7))) (and (=> (= (ControlFlow 0 83) 82) anon130_Then_correct) (=> (= (ControlFlow 0 83) 77) anon130_Else_correct))))))
(let ((anon126_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (and (= neededTransfer@7 FullPerm) (= Ops_5Mask@5 Ops_5Mask@3)) (and (= Used_9Mask@1 ZeroMask) (= b_18@3 b_18@0))) (and (=> (= (ControlFlow 0 91) 88) anon127_Then_correct) (=> (= (ControlFlow 0 91) 83) anon127_Else_correct))))))
(let ((anon126_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (= neededTransfer@6 (- FullPerm takeTransfer@3)) (= Used_9Mask@0 (MapType1Store ZeroMask null P (real_2_U (+ (U_2_real (MapType1Select ZeroMask null P)) takeTransfer@3))))) (=> (and (and (and (= b_18@1  (and b_18@0 (state Used_9Heap@0 Used_9Mask@0))) (= TempMask@0 (MapType1Store ZeroMask null P (real_2_U FullPerm)))) (and (= b_18@2  (and b_18@1 (IdenticalOnKnownLocations Ops_5Heap@0 Used_9Heap@0 TempMask@0))) (= Ops_5Mask@4 (MapType1Store Ops_5Mask@3 null P (real_2_U (- (U_2_real (MapType1Select Ops_5Mask@3 null P)) takeTransfer@3)))))) (and (and (= neededTransfer@7 neededTransfer@6) (= Ops_5Mask@5 Ops_5Mask@4)) (and (= Used_9Mask@1 Used_9Mask@0) (= b_18@3 b_18@2)))) (and (=> (= (ControlFlow 0 90) 88) anon127_Then_correct) (=> (= (ControlFlow 0 90) 83) anon127_Else_correct)))))))
(let ((anon125_Else_correct  (=> (and (< maskTransfer@3 FullPerm) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 93) 90) anon126_Then_correct) (=> (= (ControlFlow 0 93) 91) anon126_Else_correct)))))
(let ((anon125_Then_correct  (=> (and (<= FullPerm maskTransfer@3) (= takeTransfer@3 FullPerm)) (and (=> (= (ControlFlow 0 92) 90) anon126_Then_correct) (=> (= (ControlFlow 0 92) 91) anon126_Else_correct)))))
(let ((anon124_Then_correct  (=> (and (and (and (and b_15@8 b_18@0) true) (> FullPerm 0.0)) (= maskTransfer@3 (U_2_real (MapType1Select Ops_5Mask@3 null P)))) (and (=> (= (ControlFlow 0 94) 92) anon125_Then_correct) (=> (= (ControlFlow 0 94) 93) anon125_Else_correct)))))
(let ((anon124_Else_correct  (=> (not (and (and (and b_15@8 b_18@0) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@7 FullPerm) (= Ops_5Mask@5 Ops_5Mask@3)) (and (= Used_9Mask@1 ZeroMask) (= b_18@3 b_18@0))) (and (=> (= (ControlFlow 0 89) 88) anon127_Then_correct) (=> (= (ControlFlow 0 89) 83) anon127_Else_correct))))))
(let ((anon30_correct  (and (=> (= (ControlFlow 0 95) (- 0 97)) (=> (and b_15@4 b_16@6) (and (= neededTransfer@5 0.0) (= (U_2_real (MapType1Select Used_8Mask@5 null (wand_2 FullPerm FullPerm FullPerm))) initNeededTransfer@0)))) (=> (=> (and b_15@4 b_16@6) (and (= neededTransfer@5 0.0) (= (U_2_real (MapType1Select Used_8Mask@5 null (wand_2 FullPerm FullPerm FullPerm))) initNeededTransfer@0))) (=> (= b_17@0  (and b_15@4 b_16@6)) (=> (and (= b_17@1  (and b_17@0 (state Result_5Heap Result_5Mask))) (= b_17@2  (and b_17@1 (sumMask Result_5Mask Ops_5Mask@3 Used_8Mask@5)))) (=> (and (and (and (= b_17@3  (and (and b_17@2 (IdenticalOnKnownLocations Ops_5Heap@0 Result_5Heap Ops_5Mask@3)) (IdenticalOnKnownLocations Used_8Heap@0 Result_5Heap Used_8Mask@5))) (= b_17@4  (and b_17@3 (state Result_5Heap Result_5Mask)))) (and (= b_15@5  (and b_15@4 b_17@4)) (= b_15@6  (and b_15@5 b_16@6)))) (and (and (= b_15@7  (and b_15@6 (= Used_8Heap@0 Ops_5Heap@0))) (= b_15@8  (and b_15@7 (state Ops_5Heap@0 Ops_5Mask@3)))) (and (= b_18@0  (and b_18 (state Used_9Heap@0 ZeroMask))) (= initNeededTransfer@1 (+ (U_2_real (MapType1Select ZeroMask null P)) FullPerm))))) (and (=> (= (ControlFlow 0 95) (- 0 96)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 95) 94) anon124_Then_correct) (=> (= (ControlFlow 0 95) 89) anon124_Else_correct)))))))))))
(let ((anon123_Else_correct  (=> (and (>= 0.0 takeTransfer@2) (= Mask@2 Mask@0)) (=> (and (and (= Used_8Mask@5 Used_8Mask@3) (= b_16@6 b_16@4)) (and (= neededTransfer@5 neededTransfer@3) (= (ControlFlow 0 100) 95))) anon30_correct))))
(let ((anon123_Then_correct  (=> (and (> takeTransfer@2 0.0) (= neededTransfer@4 (- neededTransfer@3 takeTransfer@2))) (=> (and (and (and (= Used_8Mask@4 (MapType1Store Used_8Mask@3 null (wand_2 FullPerm FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select Used_8Mask@3 null (wand_2 FullPerm FullPerm FullPerm))) takeTransfer@2)))) (= b_16@5  (and b_16@4 (state Used_8Heap@0 Used_8Mask@4)))) (and (= Mask@1 (MapType1Store Mask@0 null (wand_2 FullPerm FullPerm FullPerm) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (wand_2 FullPerm FullPerm FullPerm))) takeTransfer@2)))) (= Mask@2 Mask@1))) (and (and (= Used_8Mask@5 Used_8Mask@4) (= b_16@6 b_16@5)) (and (= neededTransfer@5 neededTransfer@4) (= (ControlFlow 0 99) 95)))) anon30_correct))))
(let ((anon122_Else_correct  (=> (and (< maskTransfer@2 neededTransfer@3) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 102) 99) anon123_Then_correct) (=> (= (ControlFlow 0 102) 100) anon123_Else_correct)))))
(let ((anon122_Then_correct  (=> (and (<= neededTransfer@3 maskTransfer@2) (= takeTransfer@2 neededTransfer@3)) (and (=> (= (ControlFlow 0 101) 99) anon123_Then_correct) (=> (= (ControlFlow 0 101) 100) anon123_Else_correct)))))
(let ((anon121_Then_correct  (=> (and (and (and (and b_15@4 b_16@4) true) (> neededTransfer@3 0.0)) (= maskTransfer@2 (U_2_real (MapType1Select Mask@0 null (wand_2 FullPerm FullPerm FullPerm))))) (and (=> (= (ControlFlow 0 103) 101) anon122_Then_correct) (=> (= (ControlFlow 0 103) 102) anon122_Else_correct)))))
(let ((anon121_Else_correct  (=> (and (not (and (and (and b_15@4 b_16@4) true) (> neededTransfer@3 0.0))) (= Mask@2 Mask@0)) (=> (and (and (= Used_8Mask@5 Used_8Mask@3) (= b_16@6 b_16@4)) (and (= neededTransfer@5 neededTransfer@3) (= (ControlFlow 0 98) 95))) anon30_correct))))
(let ((anon120_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (and (= Ops_3Mask@3 Ops_3Mask@1) (= neededTransfer@3 neededTransfer@1)) (and (= b_16@4 b_16@2) (= Used_8Mask@3 Used_8Mask@1))) (and (=> (= (ControlFlow 0 106) 103) anon121_Then_correct) (=> (= (ControlFlow 0 106) 98) anon121_Else_correct))))))
(let ((anon120_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (and (and (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1)) (= Used_8Mask@2 (MapType1Store Used_8Mask@1 null (wand_2 FullPerm FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select Used_8Mask@1 null (wand_2 FullPerm FullPerm FullPerm))) takeTransfer@1))))) (and (= b_16@3  (and b_16@2 (state Used_8Heap@0 Used_8Mask@2))) (= Ops_3Mask@2 (MapType1Store Ops_3Mask@1 null (wand_2 FullPerm FullPerm FullPerm) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@1 null (wand_2 FullPerm FullPerm FullPerm))) takeTransfer@1)))))) (and (and (= Ops_3Mask@3 Ops_3Mask@2) (= neededTransfer@3 neededTransfer@2)) (and (= b_16@4 b_16@3) (= Used_8Mask@3 Used_8Mask@2)))) (and (=> (= (ControlFlow 0 105) 103) anon121_Then_correct) (=> (= (ControlFlow 0 105) 98) anon121_Else_correct))))))
(let ((anon119_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 108) 105) anon120_Then_correct) (=> (= (ControlFlow 0 108) 106) anon120_Else_correct)))))
(let ((anon119_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 107) 105) anon120_Then_correct) (=> (= (ControlFlow 0 107) 106) anon120_Else_correct)))))
(let ((anon118_Then_correct  (=> (and (and (and (and b_15@4 b_16@2) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType1Select Ops_3Mask@1 null (wand_2 FullPerm FullPerm FullPerm))))) (and (=> (= (ControlFlow 0 109) 107) anon119_Then_correct) (=> (= (ControlFlow 0 109) 108) anon119_Else_correct)))))
(let ((anon118_Else_correct  (=> (not (and (and (and b_15@4 b_16@2) true) (> neededTransfer@1 0.0))) (=> (and (and (= Ops_3Mask@3 Ops_3Mask@1) (= neededTransfer@3 neededTransfer@1)) (and (= b_16@4 b_16@2) (= Used_8Mask@3 Used_8Mask@1))) (and (=> (= (ControlFlow 0 104) 103) anon121_Then_correct) (=> (= (ControlFlow 0 104) 98) anon121_Else_correct))))))
(let ((anon117_Else_correct  (=> (>= 0.0 takeTransfer@0) (=> (and (and (= Ops_5Mask@3 Ops_5Mask@1) (= Used_8Mask@1 ZeroMask)) (and (= b_16@2 b_16@0) (= neededTransfer@1 1.0))) (and (=> (= (ControlFlow 0 112) 109) anon118_Then_correct) (=> (= (ControlFlow 0 112) 104) anon118_Else_correct))))))
(let ((anon117_Then_correct  (=> (> takeTransfer@0 0.0) (=> (and (and (and (= neededTransfer@0 (- 1.0 takeTransfer@0)) (= Used_8Mask@0 (MapType1Store ZeroMask null (wand_2 FullPerm FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (wand_2 FullPerm FullPerm FullPerm))) takeTransfer@0))))) (and (= b_16@1  (and b_16@0 (state Used_8Heap@0 Used_8Mask@0))) (= Ops_5Mask@2 (MapType1Store Ops_5Mask@1 null (wand_2 FullPerm FullPerm FullPerm) (real_2_U (- (U_2_real (MapType1Select Ops_5Mask@1 null (wand_2 FullPerm FullPerm FullPerm))) takeTransfer@0)))))) (and (and (= Ops_5Mask@3 Ops_5Mask@2) (= Used_8Mask@1 Used_8Mask@0)) (and (= b_16@2 b_16@1) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 111) 109) anon118_Then_correct) (=> (= (ControlFlow 0 111) 104) anon118_Else_correct))))))
(let ((anon116_Else_correct  (=> (and (< maskTransfer@0 1.0) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 114) 111) anon117_Then_correct) (=> (= (ControlFlow 0 114) 112) anon117_Else_correct)))))
(let ((anon116_Then_correct  (=> (and (<= 1.0 maskTransfer@0) (= takeTransfer@0 1.0)) (and (=> (= (ControlFlow 0 113) 111) anon117_Then_correct) (=> (= (ControlFlow 0 113) 112) anon117_Else_correct)))))
(let ((anon115_Then_correct  (=> (and (and (and (and b_15@4 b_16@0) true) (> 1.0 0.0)) (= maskTransfer@0 (U_2_real (MapType1Select Ops_5Mask@1 null (wand_2 FullPerm FullPerm FullPerm))))) (and (=> (= (ControlFlow 0 115) 113) anon116_Then_correct) (=> (= (ControlFlow 0 115) 114) anon116_Else_correct)))))
(let ((anon115_Else_correct  (=> (not (and (and (and b_15@4 b_16@0) true) (> 1.0 0.0))) (=> (and (and (= Ops_5Mask@3 Ops_5Mask@1) (= Used_8Mask@1 ZeroMask)) (and (= b_16@2 b_16@0) (= neededTransfer@1 1.0))) (and (=> (= (ControlFlow 0 110) 109) anon118_Then_correct) (=> (= (ControlFlow 0 110) 104) anon118_Else_correct))))))
(let ((anon12_correct  (=> (= initNeededTransfer@0 (+ (U_2_real (MapType1Select ZeroMask null (wand_2 FullPerm FullPerm FullPerm))) 1.0)) (and (=> (= (ControlFlow 0 116) (- 0 117)) (>= 1.0 0.0)) (=> (>= 1.0 0.0) (and (=> (= (ControlFlow 0 116) 115) anon115_Then_correct) (=> (= (ControlFlow 0 116) 110) anon115_Else_correct)))))))
(let ((anon113_Then_correct  (=> b_15@4 (and (=> (= (ControlFlow 0 121) 120) anon114_Then_correct) (=> (= (ControlFlow 0 121) 116) anon12_correct)))))
(let ((anon113_Else_correct  (=> (and (not b_15@4) (= (ControlFlow 0 119) 116)) anon12_correct)))
(let ((anon112_Then_correct  (=> (and b_15@4 b_16@0) (and (=> (= (ControlFlow 0 122) 121) anon113_Then_correct) (=> (= (ControlFlow 0 122) 119) anon113_Else_correct)))))
(let ((anon112_Else_correct  (=> (and (not (and b_15@4 b_16@0)) (= (ControlFlow 0 118) 116)) anon12_correct)))
(let ((anon111_Then_correct  (=> (and (and b_15@4 b_13@4) (= b_16@0  (and b_16 (state Used_8Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 123) 122) anon112_Then_correct) (=> (= (ControlFlow 0 123) 118) anon112_Else_correct)))))
(let ((anon111_Else_correct  (=> (not (and b_15@4 b_13@4)) (=> (and (and (and (= Heap@4 Heap@@12) (= Ops_5Heap@1 Ops_5Heap@0)) (and (= b_15@20 b_15@4) (= Ops_5Mask@9 Ops_5Mask@1))) (and (and (= Ops_3Heap@5 Ops_3Heap@0) (= Ops_3Mask@8 Ops_3Mask@1)) (and (= Mask@7 Mask@0) (= (ControlFlow 0 53) 51)))) anon67_correct))))
(let ((anon7_correct  (=> (and (= b_15@3  (and b_15@2 (state Ops_5Heap@0 Ops_5Mask@1))) (= b_15@4  (and b_15@3 (state Ops_5Heap@0 Ops_5Mask@1)))) (and (=> (= (ControlFlow 0 124) 123) anon111_Then_correct) (=> (= (ControlFlow 0 124) 53) anon111_Else_correct)))))
(let ((anon110_Else_correct  (=> (and (and (not b_15@0) (= Ops_5Mask@1 ZeroMask)) (and (= b_15@2 b_15@0) (= (ControlFlow 0 126) 124))) anon7_correct)))
(let ((anon110_Then_correct  (=> (and b_15@0 (= Ops_5Mask@0 (MapType1Store ZeroMask null Q (real_2_U (+ (U_2_real (MapType1Select ZeroMask null Q)) FullPerm))))) (=> (and (and (= b_15@1  (and b_15@0 (state Ops_5Heap@0 Ops_5Mask@0))) (= Ops_5Mask@1 Ops_5Mask@0)) (and (= b_15@2 b_15@1) (= (ControlFlow 0 125) 124))) anon7_correct))))
(let ((anon109_Then_correct  (=> b_13@4 (=> (and (= b_15@0  (and b_15 (state Ops_5Heap@0 ZeroMask))) (= b_14@0  (and b_14 (state Used_7Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 127) 125) anon110_Then_correct) (=> (= (ControlFlow 0 127) 126) anon110_Else_correct))))))
(let ((anon109_Else_correct  (=> (and (not b_13@4) (= b_13@8 b_13@4)) (=> (and (and (= Mask@10 Mask@0) (= Heap@7 Heap@@12)) (and (= Ops_3Mask@12 Ops_3Mask@1) (= (ControlFlow 0 30) 29))) anon86_correct))))
(let ((anon4_correct  (=> (and (= b_13@3  (and b_13@2 (state Ops_3Heap@0 Ops_3Mask@1))) (= b_13@4  (and b_13@3 (state Ops_3Heap@0 Ops_3Mask@1)))) (and (=> (= (ControlFlow 0 128) 127) anon109_Then_correct) (=> (= (ControlFlow 0 128) 30) anon109_Else_correct)))))
(let ((anon108_Else_correct  (=> (and (and (not b_13@0) (= Ops_3Mask@1 ZeroMask)) (and (= b_13@2 b_13@0) (= (ControlFlow 0 130) 128))) anon4_correct)))
(let ((anon108_Then_correct  (=> (and b_13@0 (= Ops_3Mask@0 (MapType1Store ZeroMask null P (real_2_U (+ (U_2_real (MapType1Select ZeroMask null P)) FullPerm))))) (=> (and (and (= b_13@1  (and b_13@0 (state Ops_3Heap@0 Ops_3Mask@0))) (= Ops_3Mask@1 Ops_3Mask@0)) (and (= b_13@2 b_13@1) (= (ControlFlow 0 129) 128))) anon4_correct))))
(let ((anon107_Else_correct  (=> (and (= Mask@0 (MapType1Store ZeroMask null (wand_2 FullPerm FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (wand_2 FullPerm FullPerm FullPerm))) FullPerm)))) (state Heap@@12 Mask@0)) (=> (and (and (state Heap@@12 Mask@0) (state Heap@@12 Mask@0)) (and (= b_13@0  (and b_13 (state Ops_3Heap@0 ZeroMask))) (= b_12@0  (and b_12 (state Used_6Heap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 131) 129) anon108_Then_correct) (=> (= (ControlFlow 0 131) 130) anon108_Else_correct))))))
(let ((anon107_Then_correct true))
(let ((anon0_correct  (=> (state Heap@@12 ZeroMask) (and (=> (= (ControlFlow 0 132) 1) anon107_Then_correct) (=> (= (ControlFlow 0 132) 131) anon107_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 133) 132) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
