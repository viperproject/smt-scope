(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun r_1 () T@U)
(declare-fun Foo__v1 () T@U)
(declare-fun Foo__v2 () T@U)
(declare-fun Int__v () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun |wand_1#ft| (T@U Real T@U Real T@U Real T@U Int) T@U)
(declare-fun |wand_1#sm| (T@U Real T@U Real T@U Real T@U Int) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun WandType_wand_1Type () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType1Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun GoodMask (T@U) Bool)
(declare-fun wand (Bool Bool) T@U)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandType_wandType () T@T)
(declare-fun |wand#ft| (Bool Bool) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun valid2 (T@U) T@U)
(declare-fun PredicateType_valid2Type () T@T)
(declare-fun valid__Foo (T@U) T@U)
(declare-fun PredicateType_valid__FooType () T@T)
(declare-fun |valid2#trigger| (T@U T@U) Bool)
(declare-fun |valid2#everUsed| (T@U) Bool)
(declare-fun |valid__Foo#trigger| (T@U T@U) Bool)
(declare-fun |valid__Foo#everUsed| (T@U) Bool)
(declare-fun |valid2#sm| (T@U) T@U)
(declare-fun |valid__Foo#sm| (T@U) T@U)
(declare-fun wand_1 (T@U Real T@U Real T@U Real T@U Int) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun getPredWandId (T@U) Int)
(declare-fun FullPerm () Real)
(declare-fun |wand#sm| (Bool Bool) T@U)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type r_1) (FieldType NormalFieldType boolType))) (= (Ctor RefType) 8)) (= (type Foo__v1) (FieldType NormalFieldType RefType))) (= (type Foo__v2) (FieldType NormalFieldType RefType))) (= (type Int__v) (FieldType NormalFieldType intType))))
(assert (distinct $allocated r_1 Foo__v1 Foo__v2 Int__v)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@14 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType0Type arg0@@14 arg1@@2)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) (arg1@@3 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15 arg1@@3)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15 arg1@@3))
))) (forall ((arg0@@16 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@16 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType0TypeInv1|
 :pattern ( (MapType0Type arg0@@16 arg1@@4))
))) (forall ((arg0@@17 T@U) (arg1@@5 T@U) (arg2 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@17))))
(= (type (MapType0Select arg0@@17 arg1@@5 arg2)) aVar1))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@17 arg1@@5 arg2))
))) (forall ((arg0@@18 T@U) (arg1@@6 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar1@@0 (type arg3)))
(let ((aVar0 (type arg1@@6)))
(= (type (MapType0Store arg0@@18 arg1@@6 arg2@@0 arg3)) (MapType0Type aVar0 aVar1@@0))))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@18 arg1@@6 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m))))
 (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (forall ((arg0@@19 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@19))))
(= (type (WandMaskField arg0@@19)) (FieldType A (MapType0Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@19))
))) (= (Ctor WandType_wand_1Type) 10)) (= (Ctor FrameTypeType) 11)) (forall ((arg0@@20 T@U) (arg1@@7 Real) (arg2@@1 T@U) (arg3@@0 Real) (arg4 T@U) (arg5 Real) (arg6 T@U) (arg7 Int) ) (! (= (type (|wand_1#ft| arg0@@20 arg1@@7 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7)) (FieldType WandType_wand_1Type FrameTypeType))
 :qid |funType:wand_1#ft|
 :pattern ( (|wand_1#ft| arg0@@20 arg1@@7 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7))
))) (forall ((arg0@@21 T@U) (arg1@@8 Real) (arg2@@2 T@U) (arg3@@1 Real) (arg4@@0 T@U) (arg5@@0 Real) (arg6@@0 T@U) (arg7@@0 Int) ) (! (= (type (|wand_1#sm| arg0@@21 arg1@@8 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0)) (FieldType WandType_wand_1Type (MapType0Type RefType boolType)))
 :qid |funType:wand_1#sm|
 :pattern ( (|wand_1#sm| arg0@@21 arg1@@8 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0))
))))
(assert (forall ((arg1@@9 T@U) (arg2@@3 Real) (arg3@@2 T@U) (arg4@@1 Real) (arg5@@1 T@U) (arg6@@1 Real) (arg7@@1 T@U) (arg8 Int) ) (!  (=> (and (and (and (= (type arg1@@9) RefType) (= (type arg3@@2) RefType)) (= (type arg5@@1) RefType)) (= (type arg7@@1) RefType)) (= (|wand_1#sm| arg1@@9 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8) (WandMaskField (|wand_1#ft| arg1@@9 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8))))
 :qid |stdinbpl.231:15|
 :skolemid |33|
 :pattern ( (WandMaskField (|wand_1#ft| arg1@@9 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8)))
)))
(assert  (and (and (and (and (and (forall ((arg0@@22 T@T) ) (! (= (Ctor (MapType1Type arg0@@22)) 12)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@23 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@23)) arg0@@23)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@23))
))) (forall ((arg0@@24 T@U) (arg1@@10 T@U) (arg2@@4 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2@@4))))
(= (type (MapType1Select arg0@@24 arg1@@10 arg2@@4)) B))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@24 arg1@@10 arg2@@4))
))) (forall ((arg0@@25 T@U) (arg1@@11 T@U) (arg2@@5 T@U) (arg3@@3 T@U) ) (! (let ((aVar0@@0 (type arg1@@11)))
(= (type (MapType1Store arg0@@25 arg1@@11 arg2@@5 arg3@@3)) (MapType1Type aVar0@@0)))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@25 arg1@@11 arg2@@5 arg3@@3))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1@@3))))
 (=> (= (type val@@3) B@@0) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType1Type RefType)) (= (type Heap1) (MapType1Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType1Type RefType)) (= (type Mask) (MapType0Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType1Type RefType)) (= (type Heap1@@0) (MapType1Type RefType))) (= (type Heap2) (MapType1Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (= (Ctor WandType_wandType) 13) (forall ((arg0@@26 Bool) (arg1@@12 Bool) ) (! (= (type (wand arg0@@26 arg1@@12)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@26 arg1@@12))
))))
(assert (forall ((arg1@@13 Bool) (arg2@@6 Bool) ) (! (IsWandField (wand arg1@@13 arg2@@6))
 :qid |stdinbpl.183:15|
 :skolemid |22|
 :pattern ( (wand arg1@@13 arg2@@6))
)))
(assert (forall ((arg0@@27 Bool) (arg1@@14 Bool) ) (! (= (type (|wand#ft| arg0@@27 arg1@@14)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@27 arg1@@14))
)))
(assert (forall ((arg1@@15 Bool) (arg2@@7 Bool) ) (! (IsWandField (|wand#ft| arg1@@15 arg2@@7))
 :qid |stdinbpl.187:15|
 :skolemid |23|
 :pattern ( (|wand#ft| arg1@@15 arg2@@7))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@28 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@28))))
(= (type (PredicateMaskField arg0@@28)) (FieldType A@@0 (MapType0Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@28))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType1Type RefType)) (= (type ExhaleHeap) (MapType1Type RefType))) (= (type Mask@@0) (MapType0Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType1Select Heap@@0 null (PredicateMaskField pm_f)) (MapType1Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType1Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType1Type RefType)) (= (type ExhaleHeap@@0) (MapType1Type RefType))) (= (type Mask@@1) (MapType0Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType1Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType1Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType1Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert (forall ((arg1@@16 Bool) (arg2@@8 Bool) ) (!  (not (IsPredicateField (wand arg1@@16 arg2@@8)))
 :qid |stdinbpl.191:15|
 :skolemid |24|
 :pattern ( (wand arg1@@16 arg2@@8))
)))
(assert (forall ((arg1@@17 Bool) (arg2@@9 Bool) ) (!  (not (IsPredicateField (|wand#ft| arg1@@17 arg2@@9)))
 :qid |stdinbpl.195:15|
 :skolemid |25|
 :pattern ( (|wand#ft| arg1@@17 arg2@@9))
)))
(assert  (and (= (Ctor PredicateType_valid2Type) 14) (forall ((arg0@@29 T@U) ) (! (= (type (valid2 arg0@@29)) (FieldType PredicateType_valid2Type FrameTypeType))
 :qid |funType:valid2|
 :pattern ( (valid2 arg0@@29))
))))
(assert (forall ((self T@U) ) (!  (=> (= (type self) RefType) (IsPredicateField (valid2 self)))
 :qid |stdinbpl.272:15|
 :skolemid |37|
 :pattern ( (valid2 self))
)))
(assert  (and (= (Ctor PredicateType_valid__FooType) 15) (forall ((arg0@@30 T@U) ) (! (= (type (valid__Foo arg0@@30)) (FieldType PredicateType_valid__FooType FrameTypeType))
 :qid |funType:valid__Foo|
 :pattern ( (valid__Foo arg0@@30))
))))
(assert (forall ((self@@0 T@U) ) (!  (=> (= (type self@@0) RefType) (IsPredicateField (valid__Foo self@@0)))
 :qid |stdinbpl.325:15|
 :skolemid |43|
 :pattern ( (valid__Foo self@@0))
)))
(assert (forall ((Heap@@2 T@U) (self@@1 T@U) ) (!  (=> (and (= (type Heap@@2) (MapType1Type RefType)) (= (type self@@1) RefType)) (|valid2#everUsed| (valid2 self@@1)))
 :qid |stdinbpl.291:15|
 :skolemid |41|
 :pattern ( (|valid2#trigger| Heap@@2 (valid2 self@@1)))
)))
(assert (forall ((Heap@@3 T@U) (self@@2 T@U) ) (!  (=> (and (= (type Heap@@3) (MapType1Type RefType)) (= (type self@@2) RefType)) (|valid__Foo#everUsed| (valid__Foo self@@2)))
 :qid |stdinbpl.344:15|
 :skolemid |47|
 :pattern ( (|valid__Foo#trigger| Heap@@3 (valid__Foo self@@2)))
)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@4) (MapType1Type RefType)) (= (type ExhaleHeap@@1) (MapType1Type RefType))) (= (type Mask@@2) (MapType0Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType1Select Heap@@4 o_1 $allocated))) (U_2_bool (MapType1Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@1 Mask@@2) (MapType1Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((self@@3 T@U) (self2 T@U) ) (!  (=> (and (and (= (type self@@3) RefType) (= (type self2) RefType)) (= (valid2 self@@3) (valid2 self2))) (= self@@3 self2))
 :qid |stdinbpl.282:15|
 :skolemid |39|
 :pattern ( (valid2 self@@3) (valid2 self2))
)))
(assert (forall ((arg0@@31 T@U) ) (! (= (type (|valid2#sm| arg0@@31)) (FieldType PredicateType_valid2Type (MapType0Type RefType boolType)))
 :qid |funType:valid2#sm|
 :pattern ( (|valid2#sm| arg0@@31))
)))
(assert (forall ((self@@4 T@U) (self2@@0 T@U) ) (!  (=> (and (and (= (type self@@4) RefType) (= (type self2@@0) RefType)) (= (|valid2#sm| self@@4) (|valid2#sm| self2@@0))) (= self@@4 self2@@0))
 :qid |stdinbpl.286:15|
 :skolemid |40|
 :pattern ( (|valid2#sm| self@@4) (|valid2#sm| self2@@0))
)))
(assert (forall ((self@@5 T@U) (self2@@1 T@U) ) (!  (=> (and (and (= (type self@@5) RefType) (= (type self2@@1) RefType)) (= (valid__Foo self@@5) (valid__Foo self2@@1))) (= self@@5 self2@@1))
 :qid |stdinbpl.335:15|
 :skolemid |45|
 :pattern ( (valid__Foo self@@5) (valid__Foo self2@@1))
)))
(assert (forall ((arg0@@32 T@U) ) (! (= (type (|valid__Foo#sm| arg0@@32)) (FieldType PredicateType_valid__FooType (MapType0Type RefType boolType)))
 :qid |funType:valid__Foo#sm|
 :pattern ( (|valid__Foo#sm| arg0@@32))
)))
(assert (forall ((self@@6 T@U) (self2@@2 T@U) ) (!  (=> (and (and (= (type self@@6) RefType) (= (type self2@@2) RefType)) (= (|valid__Foo#sm| self@@6) (|valid__Foo#sm| self2@@2))) (= self@@6 self2@@2))
 :qid |stdinbpl.339:15|
 :skolemid |46|
 :pattern ( (|valid__Foo#sm| self@@6) (|valid__Foo#sm| self2@@2))
)))
(assert (forall ((arg0@@33 T@U) (arg1@@18 Real) (arg2@@10 T@U) (arg3@@4 Real) (arg4@@2 T@U) (arg5@@2 Real) (arg6@@2 T@U) (arg7@@2 Int) ) (! (= (type (wand_1 arg0@@33 arg1@@18 arg2@@10 arg3@@4 arg4@@2 arg5@@2 arg6@@2 arg7@@2)) (FieldType WandType_wand_1Type intType))
 :qid |funType:wand_1|
 :pattern ( (wand_1 arg0@@33 arg1@@18 arg2@@10 arg3@@4 arg4@@2 arg5@@2 arg6@@2 arg7@@2))
)))
(assert (forall ((arg1@@19 T@U) (arg2@@11 Real) (arg3@@5 T@U) (arg4@@3 Real) (arg5@@3 T@U) (arg6@@3 Real) (arg7@@3 T@U) (arg8@@0 Int) ) (!  (=> (and (and (and (= (type arg1@@19) RefType) (= (type arg3@@5) RefType)) (= (type arg5@@3) RefType)) (= (type arg7@@3) RefType)) (IsWandField (wand_1 arg1@@19 arg2@@11 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@0)))
 :qid |stdinbpl.215:15|
 :skolemid |29|
 :pattern ( (wand_1 arg1@@19 arg2@@11 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@0))
)))
(assert (forall ((arg1@@20 T@U) (arg2@@12 Real) (arg3@@6 T@U) (arg4@@4 Real) (arg5@@4 T@U) (arg6@@4 Real) (arg7@@4 T@U) (arg8@@1 Int) ) (!  (=> (and (and (and (= (type arg1@@20) RefType) (= (type arg3@@6) RefType)) (= (type arg5@@4) RefType)) (= (type arg7@@4) RefType)) (IsWandField (|wand_1#ft| arg1@@20 arg2@@12 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@1)))
 :qid |stdinbpl.219:15|
 :skolemid |30|
 :pattern ( (|wand_1#ft| arg1@@20 arg2@@12 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@1))
)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@5) (MapType1Type RefType)) (= (type ExhaleHeap@@2) (MapType1Type RefType))) (= (type Mask@@3) (MapType0Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType1Select Heap@@5 o_1@@0 f_2) (MapType1Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@2 Mask@@3) (MapType1Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((arg1@@21 T@U) (arg2@@13 Real) (arg3@@7 T@U) (arg4@@5 Real) (arg5@@5 T@U) (arg6@@5 Real) (arg7@@5 T@U) (arg8@@2 Int) ) (!  (=> (and (and (and (= (type arg1@@21) RefType) (= (type arg3@@7) RefType)) (= (type arg5@@5) RefType)) (= (type arg7@@5) RefType)) (not (IsPredicateField (wand_1 arg1@@21 arg2@@13 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@2))))
 :qid |stdinbpl.223:15|
 :skolemid |31|
 :pattern ( (wand_1 arg1@@21 arg2@@13 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@2))
)))
(assert (forall ((arg1@@22 T@U) (arg2@@14 Real) (arg3@@8 T@U) (arg4@@6 Real) (arg5@@6 T@U) (arg6@@6 Real) (arg7@@6 T@U) (arg8@@3 Int) ) (!  (=> (and (and (and (= (type arg1@@22) RefType) (= (type arg3@@8) RefType)) (= (type arg5@@6) RefType)) (= (type arg7@@6) RefType)) (not (IsPredicateField (|wand_1#ft| arg1@@22 arg2@@14 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@3))))
 :qid |stdinbpl.227:15|
 :skolemid |32|
 :pattern ( (|wand_1#ft| arg1@@22 arg2@@14 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@3))
)))
(assert  (and (= (type dummyHeap) (MapType1Type RefType)) (= (type ZeroMask) (MapType0Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.170:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField r_1)))
(assert  (not (IsWandField r_1)))
(assert  (not (IsPredicateField Foo__v1)))
(assert  (not (IsWandField Foo__v1)))
(assert  (not (IsPredicateField Foo__v2)))
(assert  (not (IsWandField Foo__v2)))
(assert  (not (IsPredicateField Int__v)))
(assert  (not (IsWandField Int__v)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@6) (MapType1Type RefType)) (= (type ExhaleHeap@@3) (MapType1Type RefType))) (= (type Mask@@4) (MapType0Type RefType realType))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@6 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType0Type RefType realType)) (= (type SummandMask1) (MapType0Type RefType realType))) (= (type SummandMask2) (MapType0Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType0Select ResultMask o_2 f_4)) (+ (U_2_real (MapType0Select SummandMask1 o_2 f_4)) (U_2_real (MapType0Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@34 Real) (arg1@@23 T@U) ) (! (= (type (ConditionalFrame arg0@@34 arg1@@23)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@34 arg1@@23))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.158:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType0Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType0Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType0Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType0Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((arg1@@24 T@U) (arg2@@15 Real) (arg3@@9 T@U) (arg4@@7 Real) (arg5@@7 T@U) (arg6@@7 Real) (arg7@@7 T@U) (arg8@@4 Int) (arg1_2 T@U) (arg2_2 Real) (arg3_2 T@U) (arg4_2 Real) (arg5_2 T@U) (arg6_2 Real) (arg7_2 T@U) (arg8_2 Int) ) (!  (=> (and (and (and (and (and (and (and (and (= (type arg1@@24) RefType) (= (type arg3@@9) RefType)) (= (type arg5@@7) RefType)) (= (type arg7@@7) RefType)) (= (type arg1_2) RefType)) (= (type arg3_2) RefType)) (= (type arg5_2) RefType)) (= (type arg7_2) RefType)) (= (wand_1 arg1@@24 arg2@@15 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@4) (wand_1 arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2))) (and (= arg1@@24 arg1_2) (and (= arg2@@15 arg2_2) (and (= arg3@@9 arg3_2) (and (= arg4@@7 arg4_2) (and (= arg5@@7 arg5_2) (and (= arg6@@7 arg6_2) (and (= arg7@@7 arg7_2) (= arg8@@4 arg8_2)))))))))
 :qid |stdinbpl.239:15|
 :skolemid |35|
 :pattern ( (wand_1 arg1@@24 arg2@@15 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@4) (wand_1 arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2))
)))
(assert (forall ((arg1@@25 Bool) (arg2@@16 Bool) (arg1_2@@0 Bool) (arg2_2@@0 Bool) ) (!  (=> (= (wand arg1@@25 arg2@@16) (wand arg1_2@@0 arg2_2@@0)) (and (= arg1@@25 arg1_2@@0) (= arg2@@16 arg2_2@@0)))
 :qid |stdinbpl.207:15|
 :skolemid |28|
 :pattern ( (wand arg1@@25 arg2@@16) (wand arg1_2@@0 arg2_2@@0))
)))
(assert (forall ((arg1@@26 T@U) (arg2@@17 Real) (arg3@@10 T@U) (arg4@@8 Real) (arg5@@8 T@U) (arg6@@8 Real) (arg7@@8 T@U) (arg8@@5 Int) ) (!  (=> (and (and (and (= (type arg1@@26) RefType) (= (type arg3@@10) RefType)) (= (type arg5@@8) RefType)) (= (type arg7@@8) RefType)) (= (getPredWandId (wand_1 arg1@@26 arg2@@17 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@5)) 3))
 :qid |stdinbpl.235:15|
 :skolemid |34|
 :pattern ( (wand_1 arg1@@26 arg2@@17 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@5))
)))
(assert (forall ((arg1@@27 Bool) (arg2@@18 Bool) ) (! (= (getPredWandId (wand arg1@@27 arg2@@18)) 2)
 :qid |stdinbpl.203:15|
 :skolemid |27|
 :pattern ( (wand arg1@@27 arg2@@18))
)))
(assert (forall ((Heap@@7 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@7) (MapType1Type RefType)) (= (type ExhaleHeap@@4) (MapType1Type RefType))) (= (type Mask@@6) (MapType0Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType0Select (MapType1Select Heap@@7 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType1Select Heap@@7 o2 f_2@@0) (MapType1Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType1Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@8 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@8) (MapType1Type RefType)) (= (type ExhaleHeap@@5) (MapType1Type RefType))) (= (type Mask@@7) (MapType0Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType0Select (MapType1Select Heap@@8 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType1Select Heap@@8 o2@@0 f_2@@1) (MapType1Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType1Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((self@@7 T@U) ) (!  (=> (= (type self@@7) RefType) (= (getPredWandId (valid2 self@@7)) 0))
 :qid |stdinbpl.276:15|
 :skolemid |38|
 :pattern ( (valid2 self@@7))
)))
(assert (forall ((self@@8 T@U) ) (!  (=> (= (type self@@8) RefType) (= (getPredWandId (valid__Foo self@@8)) 1))
 :qid |stdinbpl.329:15|
 :skolemid |44|
 :pattern ( (valid__Foo self@@8))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType0Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType0Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType0Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType0Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@9 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@9) (MapType1Type RefType))) (U_2_bool (MapType1Select Heap@@9 o $allocated))) (U_2_bool (MapType1Select Heap@@9 (MapType1Select Heap@@9 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType1Select Heap@@9 o f))
)))
(assert (forall ((arg0@@35 Bool) (arg1@@28 Bool) ) (! (= (type (|wand#sm| arg0@@35 arg1@@28)) (FieldType WandType_wandType (MapType0Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@35 arg1@@28))
)))
(assert (forall ((arg1@@29 Bool) (arg2@@19 Bool) ) (! (= (|wand#sm| arg1@@29 arg2@@19) (WandMaskField (|wand#ft| arg1@@29 arg2@@19)))
 :qid |stdinbpl.199:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand#ft| arg1@@29 arg2@@19)))
)))
(assert (forall ((self@@9 T@U) ) (!  (=> (= (type self@@9) RefType) (= (PredicateMaskField (valid2 self@@9)) (|valid2#sm| self@@9)))
 :qid |stdinbpl.268:15|
 :skolemid |36|
 :pattern ( (PredicateMaskField (valid2 self@@9)))
)))
(assert (forall ((self@@10 T@U) ) (!  (=> (= (type self@@10) RefType) (= (PredicateMaskField (valid__Foo self@@10)) (|valid__Foo#sm| self@@10)))
 :qid |stdinbpl.321:15|
 :skolemid |42|
 :pattern ( (PredicateMaskField (valid__Foo self@@10)))
)))
(assert (forall ((Heap@@10 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@10) (MapType1Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@10 (MapType1Store Heap@@10 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType1Store Heap@@10 o@@0 f_3 v))
)))
(assert (= (type ZeroPMask) (MapType0Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType0Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType0Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.165:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun UnfoldingMask@15 () T@U)
(declare-fun Mask@0 () T@U)
(declare-fun x$1 () T@U)
(declare-fun perm@15 () Real)
(declare-fun perm@16 () Real)
(declare-fun rd$1 () Real)
(declare-fun UnfoldingMask@16 () T@U)
(declare-fun Heap@@11 () T@U)
(declare-fun perm@17 () Real)
(declare-fun UnfoldingMask@17 () T@U)
(declare-fun perm@18 () Real)
(declare-fun UnfoldingMask@18 () T@U)
(declare-fun perm@19 () Real)
(declare-fun UnfoldingMask@19 () T@U)
(declare-fun UnfoldingMask@10 () T@U)
(declare-fun WandDefRHSMask@0 () T@U)
(declare-fun perm@10 () Real)
(declare-fun perm@11 () Real)
(declare-fun UnfoldingMask@11 () T@U)
(declare-fun WandDefRHSHeap@0 () T@U)
(declare-fun perm@12 () Real)
(declare-fun UnfoldingMask@12 () T@U)
(declare-fun perm@13 () Real)
(declare-fun UnfoldingMask@13 () T@U)
(declare-fun perm@14 () Real)
(declare-fun UnfoldingMask@14 () T@U)
(declare-fun WandDefRHSHeap@1 () T@U)
(declare-fun WandDefRHSHeap@2 () T@U)
(declare-fun WandDefRHSHeap@3 () T@U)
(declare-fun WandDefRHSHeap@4 () T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun res$1 () T@U)
(declare-fun WandDefLHSMask@0 () T@U)
(declare-fun WandDefLHSHeap@0 () T@U)
(declare-fun PostHeap@0 () T@U)
(declare-fun PostMask@0 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun res$1@0 () T@U)
(declare-fun b_4@22 () Bool)
(declare-fun b_10@6 () Bool)
(declare-fun Result_4Heap@8 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun perm@5 () Real)
(declare-fun perm@6 () Real)
(declare-fun UnfoldingMask@6 () T@U)
(declare-fun perm@7 () Real)
(declare-fun UnfoldingMask@7 () T@U)
(declare-fun perm@8 () Real)
(declare-fun UnfoldingMask@8 () T@U)
(declare-fun perm@9 () Real)
(declare-fun UnfoldingMask@9 () T@U)
(declare-fun Result_4Heap@4 () T@U)
(declare-fun Result_4Heap@3 () T@U)
(declare-fun Result_4Heap@5 () T@U)
(declare-fun Result_4Heap@6 () T@U)
(declare-fun Result_4Heap@7 () T@U)
(declare-fun Result_4Mask () T@U)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun perm@0 () Real)
(declare-fun perm@1 () Real)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun Result_4Heap () T@U)
(declare-fun perm@2 () Real)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun perm@3 () Real)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun perm@4 () Real)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun Result_4Heap@0 () T@U)
(declare-fun Result_4Heap@1 () T@U)
(declare-fun Result_4Heap@2 () T@U)
(declare-fun b_4@21 () Bool)
(declare-fun neededTransfer@19 () Real)
(declare-fun Used_4Mask@3 () T@U)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_11@0 () Bool)
(declare-fun b_11@1 () Bool)
(declare-fun b_11@2 () Bool)
(declare-fun Ops_3Mask@13 () T@U)
(declare-fun b_11@3 () Bool)
(declare-fun Ops_3Heap@8 () T@U)
(declare-fun Used_4Heap@0 () T@U)
(declare-fun b_11@4 () Bool)
(declare-fun takeTransfer@9 () Real)
(declare-fun Heap@10 () T@U)
(declare-fun neededTransfer@17 () Real)
(declare-fun Mask@14 () T@U)
(declare-fun b_10@3 () Bool)
(declare-fun Used_4Mask@1 () T@U)
(declare-fun neededTransfer@18 () Real)
(declare-fun Used_4Mask@2 () T@U)
(declare-fun b_10@4 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_10@5 () Bool)
(declare-fun Mask@15 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun takeTransfer@8 () Real)
(declare-fun Ops_3Mask@11 () T@U)
(declare-fun b_10@0 () Bool)
(declare-fun neededTransfer@16 () Real)
(declare-fun Used_4Mask@0 () T@U)
(declare-fun b_10@1 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_10@2 () Bool)
(declare-fun Ops_3Mask@12 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun b_10 () Bool)
(declare-fun Ops_3Heap@4 () T@U)
(declare-fun Ops_3Heap@3 () T@U)
(declare-fun Ops_3Heap@5 () T@U)
(declare-fun Ops_3Heap@6 () T@U)
(declare-fun Ops_3Heap@7 () T@U)
(declare-fun Ops_3Mask@10 () T@U)
(declare-fun b_4@20 () Bool)
(declare-fun b_4@19 () Bool)
(declare-fun Mask@13 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun Ops_3Heap@0 () T@U)
(declare-fun Ops_3Heap@1 () T@U)
(declare-fun Ops_3Heap@2 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun b_4@14 () Bool)
(declare-fun b_5@24 () Bool)
(declare-fun neededTransfer@15 () Real)
(declare-fun Used_3Mask@15 () T@U)
(declare-fun rcvLocal@1 () T@U)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_9@0 () Bool)
(declare-fun b_9@1 () Bool)
(declare-fun Result_3Heap () T@U)
(declare-fun Result_3Mask () T@U)
(declare-fun b_9@2 () Bool)
(declare-fun Ops_3Mask@9 () T@U)
(declare-fun b_9@3 () Bool)
(declare-fun Used_3Heap@0 () T@U)
(declare-fun b_9@4 () Bool)
(declare-fun b_4@15 () Bool)
(declare-fun b_4@16 () Bool)
(declare-fun b_4@17 () Bool)
(declare-fun b_4@18 () Bool)
(declare-fun takeTransfer@7 () Real)
(declare-fun Heap@7 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun neededTransfer@13 () Real)
(declare-fun b_5@21 () Bool)
(declare-fun Used_3Mask@13 () T@U)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_3Mask@14 () T@U)
(declare-fun b_5@22 () Bool)
(declare-fun b_5@23 () Bool)
(declare-fun Mask@12 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun takeTransfer@6 () Real)
(declare-fun Used_3Mask@11 () T@U)
(declare-fun b_5@18 () Bool)
(declare-fun Ops_3Mask@7 () T@U)
(declare-fun neededTransfer@12 () Real)
(declare-fun Used_3Mask@12 () T@U)
(declare-fun b_5@19 () Bool)
(declare-fun b_5@20 () Bool)
(declare-fun Ops_3Mask@8 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun Result_2Heap () T@U)
(declare-fun Result_2Mask () T@U)
(declare-fun b_4@11 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_8@0 () Bool)
(declare-fun b_8@1 () Bool)
(declare-fun b_8@2 () Bool)
(declare-fun b_8@3 () Bool)
(declare-fun b_8@4 () Bool)
(declare-fun b_4@12 () Bool)
(declare-fun b_4@13 () Bool)
(declare-fun takeTransfer@5 () Real)
(declare-fun neededTransfer@9 () Real)
(declare-fun b_5@15 () Bool)
(declare-fun Mask@9 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun Used_3Mask@9 () T@U)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_3Mask@10 () T@U)
(declare-fun b_5@16 () Bool)
(declare-fun b_5@17 () Bool)
(declare-fun Mask@10 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun Ops_3Mask@5 () T@U)
(declare-fun Used_3Mask@7 () T@U)
(declare-fun b_5@12 () Bool)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_3Mask@8 () T@U)
(declare-fun b_5@13 () Bool)
(declare-fun b_5@14 () Bool)
(declare-fun Ops_3Mask@6 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun b_4@8 () Bool)
(declare-fun neededTransfer@7 () Real)
(declare-fun rcvLocal@0 () T@U)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_7@0 () Bool)
(declare-fun b_7@1 () Bool)
(declare-fun Result_1Heap () T@U)
(declare-fun Result_1Mask () T@U)
(declare-fun b_7@2 () Bool)
(declare-fun b_7@3 () Bool)
(declare-fun b_7@4 () Bool)
(declare-fun b_4@9 () Bool)
(declare-fun b_4@10 () Bool)
(declare-fun takeTransfer@3 () Real)
(declare-fun neededTransfer@5 () Real)
(declare-fun b_5@9 () Bool)
(declare-fun Heap@3 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun Used_3Mask@5 () T@U)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_3Mask@6 () T@U)
(declare-fun b_5@10 () Bool)
(declare-fun b_5@11 () Bool)
(declare-fun Mask@8 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun Used_3Mask@3 () T@U)
(declare-fun b_5@6 () Bool)
(declare-fun Ops_3Mask@3 () T@U)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_3Mask@4 () T@U)
(declare-fun b_5@7 () Bool)
(declare-fun b_5@8 () Bool)
(declare-fun Ops_3Mask@4 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun ResultHeap () T@U)
(declare-fun ResultMask@@0 () T@U)
(declare-fun b_4@5 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_6@0 () Bool)
(declare-fun b_6@1 () Bool)
(declare-fun b_6@2 () Bool)
(declare-fun b_6@3 () Bool)
(declare-fun b_6@4 () Bool)
(declare-fun b_4@6 () Bool)
(declare-fun b_4@7 () Bool)
(declare-fun takeTransfer@1 () Real)
(declare-fun Mask@5 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun neededTransfer@1 () Real)
(declare-fun b_5@3 () Bool)
(declare-fun Used_3Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_3Mask@2 () T@U)
(declare-fun b_5@4 () Bool)
(declare-fun b_5@5 () Bool)
(declare-fun Mask@6 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun Ops_3Mask@1 () T@U)
(declare-fun b_5@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_3Mask@0 () T@U)
(declare-fun b_5@1 () Bool)
(declare-fun b_5@2 () Bool)
(declare-fun Ops_3Mask@2 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_5 () Bool)
(declare-fun b_4@4 () Bool)
(declare-fun b_4@3 () Bool)
(declare-fun b_4@0 () Bool)
(declare-fun b_4@1 () Bool)
(declare-fun Ops_3Mask@0 () T@U)
(declare-fun b_4@2 () Bool)
(declare-fun Mask@2 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun b_4 () Bool)
(declare-fun b_3@0 () Bool)
(declare-fun b_3 () Bool)
(declare-fun Used_2Heap@0 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@18) (MapType0Type RefType realType)) (= (type Mask@17) (MapType0Type RefType realType))) (= (type res$1@0) RefType)) (= (type x$1) RefType)) (= (type Heap@@11) (MapType1Type RefType))) (= (type Result_4Heap@8) (MapType1Type RefType))) (= (type Mask@16) (MapType0Type RefType realType))) (= (type Heap@12) (MapType1Type RefType))) (= (type Result_4Heap) (MapType1Type RefType))) (= (type UnfoldingMask@5) (MapType0Type RefType realType))) (= (type Mask@0) (MapType0Type RefType realType))) (= (type UnfoldingMask@6) (MapType0Type RefType realType))) (= (type UnfoldingMask@7) (MapType0Type RefType realType))) (= (type UnfoldingMask@8) (MapType0Type RefType realType))) (= (type UnfoldingMask@9) (MapType0Type RefType realType))) (= (type Result_4Heap@4) (MapType1Type RefType))) (= (type Result_4Heap@3) (MapType1Type RefType))) (= (type Result_4Heap@5) (MapType1Type RefType))) (= (type Result_4Heap@6) (MapType1Type RefType))) (= (type Result_4Heap@7) (MapType1Type RefType))) (= (type Result_4Mask) (MapType0Type RefType realType))) (= (type UnfoldingMask@0) (MapType0Type RefType realType))) (= (type UnfoldingMask@1) (MapType0Type RefType realType))) (= (type UnfoldingMask@2) (MapType0Type RefType realType))) (= (type UnfoldingMask@3) (MapType0Type RefType realType))) (= (type UnfoldingMask@4) (MapType0Type RefType realType))) (= (type Result_4Heap@0) (MapType1Type RefType))) (= (type Result_4Heap@1) (MapType1Type RefType))) (= (type Result_4Heap@2) (MapType1Type RefType))) (forall ((arg0@@36 T@U) (arg1@@30 T@U) ) (! (= (type (CombineFrames arg0@@36 arg1@@30)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@36 arg1@@30))
))) (forall ((arg0@@37 T@U) ) (! (= (type (FrameFragment arg0@@37)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@37))
))) (= (type Used_4Mask@3) (MapType0Type RefType realType))) (= (type Ops_3Mask@13) (MapType0Type RefType realType))) (= (type Ops_3Heap@8) (MapType1Type RefType))) (= (type Used_4Heap@0) (MapType1Type RefType))) (= (type Heap@10) (MapType1Type RefType))) (= (type Mask@14) (MapType0Type RefType realType))) (= (type Used_4Mask@1) (MapType0Type RefType realType))) (= (type Used_4Mask@2) (MapType0Type RefType realType))) (= (type TempMask@1) (MapType0Type RefType realType))) (= (type Mask@15) (MapType0Type RefType realType))) (= (type newPMask@0) (MapType0Type RefType boolType))) (= (type Heap@11) (MapType1Type RefType))) (= (type Ops_3Mask@11) (MapType0Type RefType realType))) (= (type Used_4Mask@0) (MapType0Type RefType realType))) (= (type TempMask@0) (MapType0Type RefType realType))) (= (type Ops_3Mask@12) (MapType0Type RefType realType))) (= (type Ops_3Mask@1) (MapType0Type RefType realType))) (= (type Ops_3Heap@0) (MapType1Type RefType))) (= (type Mask@5) (MapType0Type RefType realType))) (= (type Heap@1) (MapType1Type RefType))) (= (type Ops_3Heap@4) (MapType1Type RefType))) (= (type Ops_3Heap@3) (MapType1Type RefType))) (= (type Ops_3Heap@5) (MapType1Type RefType))) (= (type Ops_3Heap@6) (MapType1Type RefType))) (= (type Ops_3Heap@7) (MapType1Type RefType))) (= (type Ops_3Mask@10) (MapType0Type RefType realType))) (= (type Mask@13) (MapType0Type RefType realType))) (= (type Heap@9) (MapType1Type RefType))) (= (type Ops_3Heap@1) (MapType1Type RefType))) (= (type Ops_3Heap@2) (MapType1Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Used_3Mask@15) (MapType0Type RefType realType))) (= (type rcvLocal@1) RefType)) (= (type Result_3Heap) (MapType1Type RefType))) (= (type Result_3Mask) (MapType0Type RefType realType))) (= (type Ops_3Mask@9) (MapType0Type RefType realType))) (= (type Used_3Heap@0) (MapType1Type RefType))) (= (type Heap@7) (MapType1Type RefType))) (= (type Mask@11) (MapType0Type RefType realType))) (= (type Used_3Mask@13) (MapType0Type RefType realType))) (= (type Used_3Mask@14) (MapType0Type RefType realType))) (= (type Mask@12) (MapType0Type RefType realType))) (= (type Heap@8) (MapType1Type RefType))) (= (type Used_3Mask@11) (MapType0Type RefType realType))) (= (type Ops_3Mask@7) (MapType0Type RefType realType))) (= (type Used_3Mask@12) (MapType0Type RefType realType))) (= (type Ops_3Mask@8) (MapType0Type RefType realType))) (= (type Result_2Heap) (MapType1Type RefType))) (= (type Result_2Mask) (MapType0Type RefType realType))) (= (type Mask@9) (MapType0Type RefType realType))) (= (type Heap@5) (MapType1Type RefType))) (= (type Used_3Mask@9) (MapType0Type RefType realType))) (= (type Used_3Mask@10) (MapType0Type RefType realType))) (= (type Mask@10) (MapType0Type RefType realType))) (= (type Heap@6) (MapType1Type RefType))) (= (type Ops_3Mask@5) (MapType0Type RefType realType))) (= (type Used_3Mask@7) (MapType0Type RefType realType))) (= (type Used_3Mask@8) (MapType0Type RefType realType))) (= (type Ops_3Mask@6) (MapType0Type RefType realType))) (= (type rcvLocal@0) RefType)) (= (type Result_1Heap) (MapType1Type RefType))) (= (type Result_1Mask) (MapType0Type RefType realType))) (= (type Heap@3) (MapType1Type RefType))) (= (type Mask@7) (MapType0Type RefType realType))) (= (type Used_3Mask@5) (MapType0Type RefType realType))) (= (type Used_3Mask@6) (MapType0Type RefType realType))) (= (type Mask@8) (MapType0Type RefType realType))) (= (type Heap@4) (MapType1Type RefType))) (= (type Used_3Mask@3) (MapType0Type RefType realType))) (= (type Ops_3Mask@3) (MapType0Type RefType realType))) (= (type Used_3Mask@4) (MapType0Type RefType realType))) (= (type Ops_3Mask@4) (MapType0Type RefType realType))) (= (type ResultHeap) (MapType1Type RefType))) (= (type ResultMask@@0) (MapType0Type RefType realType))) (= (type Used_3Mask@1) (MapType0Type RefType realType))) (= (type Used_3Mask@2) (MapType0Type RefType realType))) (= (type Mask@6) (MapType0Type RefType realType))) (= (type Heap@2) (MapType1Type RefType))) (= (type Used_3Mask@0) (MapType0Type RefType realType))) (= (type Ops_3Mask@2) (MapType0Type RefType realType))) (= (type Ops_3Mask@0) (MapType0Type RefType realType))) (= (type Mask@2) (MapType0Type RefType realType))) (= (type Mask@1) (MapType0Type RefType realType))) (= (type Mask@3) (MapType0Type RefType realType))) (= (type Mask@4) (MapType0Type RefType realType))) (= (type Used_2Heap@0) (MapType1Type RefType))) (= (type Heap@0) (MapType1Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type UnfoldingMask@15) (MapType0Type RefType realType))) (= (type UnfoldingMask@16) (MapType0Type RefType realType))) (= (type UnfoldingMask@17) (MapType0Type RefType realType))) (= (type UnfoldingMask@18) (MapType0Type RefType realType))) (= (type UnfoldingMask@19) (MapType0Type RefType realType))) (= (type UnfoldingMask@10) (MapType0Type RefType realType))) (= (type WandDefRHSMask@0) (MapType0Type RefType realType))) (= (type UnfoldingMask@11) (MapType0Type RefType realType))) (= (type WandDefRHSHeap@0) (MapType1Type RefType))) (= (type UnfoldingMask@12) (MapType0Type RefType realType))) (= (type UnfoldingMask@13) (MapType0Type RefType realType))) (= (type UnfoldingMask@14) (MapType0Type RefType realType))) (= (type WandDefRHSHeap@1) (MapType1Type RefType))) (= (type WandDefRHSHeap@2) (MapType1Type RefType))) (= (type WandDefRHSHeap@3) (MapType1Type RefType))) (= (type WandDefRHSHeap@4) (MapType1Type RefType))) (= (type res$1) RefType)) (= (type WandDefLHSMask@0) (MapType0Type RefType realType))) (= (type WandDefLHSHeap@0) (MapType1Type RefType))) (= (type PostHeap@0) (MapType1Type RefType))) (= (type PostMask@0) (MapType0Type RefType realType))))
(set-info :boogie-vc-id test4)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 169) (let ((anon6_correct  (=> (and (= UnfoldingMask@15 (MapType0Store Mask@0 null (valid__Foo x$1) (real_2_U (- (U_2_real (MapType0Select Mask@0 null (valid__Foo x$1))) perm@15)))) (= perm@16 (* FullPerm (/ rd$1 (to_real 2))))) (and (=> (= (ControlFlow 0 143) (- 0 148)) (>= perm@16 NoPerm)) (=> (>= perm@16 NoPerm) (=> (and (and (=> (> perm@16 NoPerm) (not (= x$1 null))) (= UnfoldingMask@16 (MapType0Store UnfoldingMask@15 x$1 Foo__v1 (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@15 x$1 Foo__v1)) perm@16))))) (and (state Heap@@11 UnfoldingMask@16) (= perm@17 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 143) (- 0 147)) (>= perm@17 NoPerm)) (=> (>= perm@17 NoPerm) (=> (and (and (=> (> perm@17 NoPerm) (not (= (MapType1Select Heap@@11 x$1 Foo__v1) null))) (= UnfoldingMask@17 (MapType0Store UnfoldingMask@16 (MapType1Select Heap@@11 x$1 Foo__v1) Int__v (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@16 (MapType1Select Heap@@11 x$1 Foo__v1) Int__v)) perm@17))))) (and (state Heap@@11 UnfoldingMask@17) (= perm@18 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 143) (- 0 146)) (>= perm@18 NoPerm)) (=> (>= perm@18 NoPerm) (=> (and (and (=> (> perm@18 NoPerm) (not (= x$1 null))) (= UnfoldingMask@18 (MapType0Store UnfoldingMask@17 x$1 Foo__v2 (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@17 x$1 Foo__v2)) perm@18))))) (and (state Heap@@11 UnfoldingMask@18) (= perm@19 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 143) (- 0 145)) (>= perm@19 NoPerm)) (=> (>= perm@19 NoPerm) (=> (and (and (=> (> perm@19 NoPerm) (not (= (MapType1Select Heap@@11 x$1 Foo__v2) null))) (= UnfoldingMask@19 (MapType0Store UnfoldingMask@18 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@18 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)) perm@19))))) (and (state Heap@@11 UnfoldingMask@19) (state Heap@@11 UnfoldingMask@19))) (and (=> (= (ControlFlow 0 143) (- 0 144)) (HasDirectPerm UnfoldingMask@19 x$1 Foo__v2)) (=> (HasDirectPerm UnfoldingMask@19 x$1 Foo__v2) (=> (= (ControlFlow 0 143) (- 0 142)) (HasDirectPerm UnfoldingMask@19 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)))))))))))))))))))
(let ((anon97_Else_correct  (=> (and (= perm@15 NoPerm) (= (ControlFlow 0 151) 143)) anon6_correct)))
(let ((anon97_Then_correct  (=> (not (= perm@15 NoPerm)) (and (=> (= (ControlFlow 0 149) (- 0 150)) (<= perm@15 (U_2_real (MapType0Select Mask@0 null (valid__Foo x$1))))) (=> (<= perm@15 (U_2_real (MapType0Select Mask@0 null (valid__Foo x$1)))) (=> (= (ControlFlow 0 149) 143) anon6_correct))))))
(let ((anon4_correct  (=> (and (= UnfoldingMask@10 (MapType0Store WandDefRHSMask@0 null (valid__Foo x$1) (real_2_U (- (U_2_real (MapType0Select WandDefRHSMask@0 null (valid__Foo x$1))) perm@10)))) (= perm@11 (* FullPerm (/ rd$1 (to_real 2))))) (and (=> (= (ControlFlow 0 152) (- 0 160)) (>= perm@11 NoPerm)) (=> (>= perm@11 NoPerm) (=> (and (and (=> (> perm@11 NoPerm) (not (= x$1 null))) (= UnfoldingMask@11 (MapType0Store UnfoldingMask@10 x$1 Foo__v1 (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@10 x$1 Foo__v1)) perm@11))))) (and (state WandDefRHSHeap@0 UnfoldingMask@11) (= perm@12 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 152) (- 0 159)) (>= perm@12 NoPerm)) (=> (>= perm@12 NoPerm) (=> (and (and (=> (> perm@12 NoPerm) (not (= (MapType1Select WandDefRHSHeap@0 x$1 Foo__v1) null))) (= UnfoldingMask@12 (MapType0Store UnfoldingMask@11 (MapType1Select WandDefRHSHeap@0 x$1 Foo__v1) Int__v (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@11 (MapType1Select WandDefRHSHeap@0 x$1 Foo__v1) Int__v)) perm@12))))) (and (state WandDefRHSHeap@0 UnfoldingMask@12) (= perm@13 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 152) (- 0 158)) (>= perm@13 NoPerm)) (=> (>= perm@13 NoPerm) (=> (and (and (=> (> perm@13 NoPerm) (not (= x$1 null))) (= UnfoldingMask@13 (MapType0Store UnfoldingMask@12 x$1 Foo__v2 (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@12 x$1 Foo__v2)) perm@13))))) (and (state WandDefRHSHeap@0 UnfoldingMask@13) (= perm@14 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 152) (- 0 157)) (>= perm@14 NoPerm)) (=> (>= perm@14 NoPerm) (=> (and (and (=> (> perm@14 NoPerm) (not (= (MapType1Select WandDefRHSHeap@0 x$1 Foo__v2) null))) (= UnfoldingMask@14 (MapType0Store UnfoldingMask@13 (MapType1Select WandDefRHSHeap@0 x$1 Foo__v2) Int__v (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@13 (MapType1Select WandDefRHSHeap@0 x$1 Foo__v2) Int__v)) perm@14))))) (and (state WandDefRHSHeap@0 UnfoldingMask@14) (state WandDefRHSHeap@0 UnfoldingMask@14))) (and (=> (= (ControlFlow 0 152) (- 0 156)) (HasDirectPerm UnfoldingMask@14 x$1 Foo__v2)) (=> (HasDirectPerm UnfoldingMask@14 x$1 Foo__v2) (and (=> (= (ControlFlow 0 152) (- 0 155)) (HasDirectPerm UnfoldingMask@14 (MapType1Select WandDefRHSHeap@0 x$1 Foo__v2) Int__v)) (=> (HasDirectPerm UnfoldingMask@14 (MapType1Select WandDefRHSHeap@0 x$1 Foo__v2) Int__v) (=> (= WandDefRHSHeap@1 (MapType1Store WandDefRHSHeap@0 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select WandDefRHSHeap@0 null (|valid__Foo#sm| x$1)) x$1 Foo__v1 (bool_2_U true)))) (=> (and (and (= WandDefRHSHeap@2 (MapType1Store WandDefRHSHeap@1 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select WandDefRHSHeap@1 null (|valid__Foo#sm| x$1)) (MapType1Select WandDefRHSHeap@1 x$1 Foo__v1) Int__v (bool_2_U true)))) (= WandDefRHSHeap@3 (MapType1Store WandDefRHSHeap@2 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select WandDefRHSHeap@2 null (|valid__Foo#sm| x$1)) x$1 Foo__v2 (bool_2_U true))))) (and (= WandDefRHSHeap@4 (MapType1Store WandDefRHSHeap@3 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select WandDefRHSHeap@3 null (|valid__Foo#sm| x$1)) (MapType1Select WandDefRHSHeap@3 x$1 Foo__v2) Int__v (bool_2_U true)))) (state WandDefRHSHeap@4 WandDefRHSMask@0))) (and (=> (= (ControlFlow 0 152) (- 0 154)) (> rd$1 NoPerm)) (=> (> rd$1 NoPerm) (=> (|valid__Foo#trigger| Heap@@11 (valid__Foo x$1)) (=> (and (= (MapType1Select Heap@@11 null (valid__Foo x$1)) (CombineFrames (FrameFragment (MapType1Select Heap@@11 x$1 Foo__v1)) (CombineFrames (FrameFragment (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v1) Int__v)) (CombineFrames (FrameFragment (MapType1Select Heap@@11 x$1 Foo__v2)) (FrameFragment (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)))))) (= perm@15 (/ rd$1 (to_real 2)))) (and (=> (= (ControlFlow 0 152) (- 0 153)) (>= perm@15 NoPerm)) (=> (>= perm@15 NoPerm) (and (=> (= (ControlFlow 0 152) 149) anon97_Then_correct) (=> (= (ControlFlow 0 152) 151) anon97_Else_correct)))))))))))))))))))))))))))))
(let ((anon96_Else_correct  (=> (and (= perm@10 NoPerm) (= (ControlFlow 0 163) 152)) anon4_correct)))
(let ((anon96_Then_correct  (=> (not (= perm@10 NoPerm)) (and (=> (= (ControlFlow 0 161) (- 0 162)) (<= perm@10 (U_2_real (MapType0Select WandDefRHSMask@0 null (valid__Foo x$1))))) (=> (<= perm@10 (U_2_real (MapType0Select WandDefRHSMask@0 null (valid__Foo x$1)))) (=> (= (ControlFlow 0 161) 152) anon4_correct))))))
(let ((anon95_Then_correct  (=> (not (= res$1 null)) (=> (and (= WandDefLHSMask@0 (MapType0Store ZeroMask res$1 Int__v (real_2_U (+ (U_2_real (MapType0Select ZeroMask res$1 Int__v)) FullPerm)))) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (=> (and (and (state WandDefLHSHeap@0 WandDefLHSMask@0) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (and (= WandDefRHSMask@0 (MapType0Store ZeroMask null (valid__Foo x$1) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (valid__Foo x$1))) FullPerm)))) (state WandDefRHSHeap@0 WandDefRHSMask@0))) (and (=> (= (ControlFlow 0 164) (- 0 166)) (> rd$1 NoPerm)) (=> (> rd$1 NoPerm) (=> (|valid__Foo#trigger| WandDefRHSHeap@0 (valid__Foo x$1)) (=> (and (= (MapType1Select WandDefRHSHeap@0 null (valid__Foo x$1)) (CombineFrames (FrameFragment (MapType1Select WandDefRHSHeap@0 x$1 Foo__v1)) (CombineFrames (FrameFragment (MapType1Select WandDefRHSHeap@0 (MapType1Select WandDefRHSHeap@0 x$1 Foo__v1) Int__v)) (CombineFrames (FrameFragment (MapType1Select WandDefRHSHeap@0 x$1 Foo__v2)) (FrameFragment (MapType1Select WandDefRHSHeap@0 (MapType1Select WandDefRHSHeap@0 x$1 Foo__v2) Int__v)))))) (= perm@10 (/ rd$1 (to_real 2)))) (and (=> (= (ControlFlow 0 164) (- 0 165)) (>= perm@10 NoPerm)) (=> (>= perm@10 NoPerm) (and (=> (= (ControlFlow 0 164) 161) anon96_Then_correct) (=> (= (ControlFlow 0 164) 163) anon96_Else_correct)))))))))))))
(let ((anon95_Else_correct true))
(let ((anon94_Then_correct  (=> (state PostHeap@0 ZeroMask) (=> (and (and (not (= res$1 null)) (= PostMask@0 (MapType0Store ZeroMask res$1 Int__v (real_2_U (+ (U_2_real (MapType0Select ZeroMask res$1 Int__v)) FullPerm))))) (and (state PostHeap@0 PostMask@0) (state PostHeap@0 PostMask@0))) (and (=> (= (ControlFlow 0 167) 164) anon95_Then_correct) (=> (= (ControlFlow 0 167) 141) anon95_Else_correct))))))
(let ((anon93_correct  (=> (and (= Mask@18 (MapType0Store Mask@17 res$1@0 Int__v (real_2_U (- (U_2_real (MapType0Select Mask@17 res$1@0 Int__v)) FullPerm)))) (= (ControlFlow 0 2) (- 0 1))) (<= FullPerm (U_2_real (MapType0Select Mask@18 null (wand_1 res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)))))))))
(let ((anon141_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 5) 2)) anon93_correct)))
(let ((anon141_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= FullPerm (U_2_real (MapType0Select Mask@17 res$1@0 Int__v)))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@17 res$1@0 Int__v))) (=> (= (ControlFlow 0 3) 2) anon93_correct))))))
(let ((anon91_correct  (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> (and (and b_4@22 b_4@22) b_10@6) (= (U_2_int (MapType1Select Result_4Heap@8 (MapType1Select Result_4Heap@8 x$1 Foo__v2) Int__v)) (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v))))) (=> (=> (and (and b_4@22 b_4@22) b_10@6) (= (U_2_int (MapType1Select Result_4Heap@8 (MapType1Select Result_4Heap@8 x$1 Foo__v2) Int__v)) (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)))) (=> (and (and (= Mask@17 (MapType0Store Mask@16 null (wand_1 res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v))) (real_2_U (+ (U_2_real (MapType0Select Mask@16 null (wand_1 res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v))))) FullPerm)))) (state Heap@12 Mask@17)) (and (state Heap@12 Mask@17) (state Heap@12 Mask@17))) (and (=> (= (ControlFlow 0 6) 3) anon141_Then_correct) (=> (= (ControlFlow 0 6) 5) anon141_Else_correct)))))))
(let ((anon90_correct  (=> (and (= UnfoldingMask@5 (MapType0Store Mask@0 null (valid__Foo x$1) (real_2_U (- (U_2_real (MapType0Select Mask@0 null (valid__Foo x$1))) perm@5)))) (= perm@6 (* FullPerm (/ rd$1 (to_real 2))))) (and (=> (= (ControlFlow 0 10) (- 0 16)) (>= perm@6 NoPerm)) (=> (>= perm@6 NoPerm) (=> (and (and (=> (> perm@6 NoPerm) (not (= x$1 null))) (= UnfoldingMask@6 (MapType0Store UnfoldingMask@5 x$1 Foo__v1 (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@5 x$1 Foo__v1)) perm@6))))) (and (state Heap@@11 UnfoldingMask@6) (= perm@7 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 10) (- 0 15)) (>= perm@7 NoPerm)) (=> (>= perm@7 NoPerm) (=> (and (and (=> (> perm@7 NoPerm) (not (= (MapType1Select Heap@@11 x$1 Foo__v1) null))) (= UnfoldingMask@7 (MapType0Store UnfoldingMask@6 (MapType1Select Heap@@11 x$1 Foo__v1) Int__v (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@6 (MapType1Select Heap@@11 x$1 Foo__v1) Int__v)) perm@7))))) (and (state Heap@@11 UnfoldingMask@7) (= perm@8 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 10) (- 0 14)) (>= perm@8 NoPerm)) (=> (>= perm@8 NoPerm) (=> (and (and (=> (> perm@8 NoPerm) (not (= x$1 null))) (= UnfoldingMask@8 (MapType0Store UnfoldingMask@7 x$1 Foo__v2 (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@7 x$1 Foo__v2)) perm@8))))) (and (state Heap@@11 UnfoldingMask@8) (= perm@9 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 10) (- 0 13)) (>= perm@9 NoPerm)) (=> (>= perm@9 NoPerm) (=> (and (and (=> (> perm@9 NoPerm) (not (= (MapType1Select Heap@@11 x$1 Foo__v2) null))) (= UnfoldingMask@9 (MapType0Store UnfoldingMask@8 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@8 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)) perm@9))))) (and (state Heap@@11 UnfoldingMask@9) (state Heap@@11 UnfoldingMask@9))) (and (=> (= (ControlFlow 0 10) (- 0 12)) (HasDirectPerm UnfoldingMask@9 x$1 Foo__v2)) (=> (HasDirectPerm UnfoldingMask@9 x$1 Foo__v2) (and (=> (= (ControlFlow 0 10) (- 0 11)) (HasDirectPerm UnfoldingMask@9 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)) (=> (HasDirectPerm UnfoldingMask@9 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v) (=> (= Result_4Heap@4 (MapType1Store Result_4Heap@3 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Result_4Heap@3 null (|valid__Foo#sm| x$1)) x$1 Foo__v1 (bool_2_U true)))) (=> (and (= Result_4Heap@5 (MapType1Store Result_4Heap@4 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Result_4Heap@4 null (|valid__Foo#sm| x$1)) (MapType1Select Result_4Heap@4 x$1 Foo__v1) Int__v (bool_2_U true)))) (= Result_4Heap@6 (MapType1Store Result_4Heap@5 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Result_4Heap@5 null (|valid__Foo#sm| x$1)) x$1 Foo__v2 (bool_2_U true))))) (=> (and (and (= Result_4Heap@7 (MapType1Store Result_4Heap@6 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Result_4Heap@6 null (|valid__Foo#sm| x$1)) (MapType1Select Result_4Heap@6 x$1 Foo__v2) Int__v (bool_2_U true)))) (state Result_4Heap@7 Result_4Mask)) (and (= Result_4Heap@8 Result_4Heap@7) (= (ControlFlow 0 10) 6))) anon91_correct))))))))))))))))))))))
(let ((anon140_Else_correct  (=> (and (= perm@5 NoPerm) (= (ControlFlow 0 19) 10)) anon90_correct)))
(let ((anon140_Then_correct  (=> (not (= perm@5 NoPerm)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (<= perm@5 (U_2_real (MapType0Select Mask@0 null (valid__Foo x$1))))) (=> (<= perm@5 (U_2_real (MapType0Select Mask@0 null (valid__Foo x$1)))) (=> (= (ControlFlow 0 17) 10) anon90_correct))))))
(let ((anon88_correct  (=> (and (= UnfoldingMask@0 (MapType0Store Result_4Mask null (valid__Foo x$1) (real_2_U (- (U_2_real (MapType0Select Result_4Mask null (valid__Foo x$1))) perm@0)))) (= perm@1 (* FullPerm (/ rd$1 (to_real 2))))) (and (=> (= (ControlFlow 0 20) (- 0 28)) (>= perm@1 NoPerm)) (=> (>= perm@1 NoPerm) (=> (and (and (=> (> perm@1 NoPerm) (not (= x$1 null))) (= UnfoldingMask@1 (MapType0Store UnfoldingMask@0 x$1 Foo__v1 (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@0 x$1 Foo__v1)) perm@1))))) (and (state Result_4Heap UnfoldingMask@1) (= perm@2 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 20) (- 0 27)) (>= perm@2 NoPerm)) (=> (>= perm@2 NoPerm) (=> (and (and (=> (> perm@2 NoPerm) (not (= (MapType1Select Result_4Heap x$1 Foo__v1) null))) (= UnfoldingMask@2 (MapType0Store UnfoldingMask@1 (MapType1Select Result_4Heap x$1 Foo__v1) Int__v (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@1 (MapType1Select Result_4Heap x$1 Foo__v1) Int__v)) perm@2))))) (and (state Result_4Heap UnfoldingMask@2) (= perm@3 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 20) (- 0 26)) (>= perm@3 NoPerm)) (=> (>= perm@3 NoPerm) (=> (and (and (=> (> perm@3 NoPerm) (not (= x$1 null))) (= UnfoldingMask@3 (MapType0Store UnfoldingMask@2 x$1 Foo__v2 (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@2 x$1 Foo__v2)) perm@3))))) (and (state Result_4Heap UnfoldingMask@3) (= perm@4 (* FullPerm (/ rd$1 (to_real 2)))))) (and (=> (= (ControlFlow 0 20) (- 0 25)) (>= perm@4 NoPerm)) (=> (>= perm@4 NoPerm) (=> (and (and (=> (> perm@4 NoPerm) (not (= (MapType1Select Result_4Heap x$1 Foo__v2) null))) (= UnfoldingMask@4 (MapType0Store UnfoldingMask@3 (MapType1Select Result_4Heap x$1 Foo__v2) Int__v (real_2_U (+ (U_2_real (MapType0Select UnfoldingMask@3 (MapType1Select Result_4Heap x$1 Foo__v2) Int__v)) perm@4))))) (and (state Result_4Heap UnfoldingMask@4) (state Result_4Heap UnfoldingMask@4))) (and (=> (= (ControlFlow 0 20) (- 0 24)) (HasDirectPerm UnfoldingMask@4 x$1 Foo__v2)) (=> (HasDirectPerm UnfoldingMask@4 x$1 Foo__v2) (and (=> (= (ControlFlow 0 20) (- 0 23)) (HasDirectPerm UnfoldingMask@4 (MapType1Select Result_4Heap x$1 Foo__v2) Int__v)) (=> (HasDirectPerm UnfoldingMask@4 (MapType1Select Result_4Heap x$1 Foo__v2) Int__v) (=> (= Result_4Heap@0 (MapType1Store Result_4Heap null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Result_4Heap null (|valid__Foo#sm| x$1)) x$1 Foo__v1 (bool_2_U true)))) (=> (and (and (= Result_4Heap@1 (MapType1Store Result_4Heap@0 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Result_4Heap@0 null (|valid__Foo#sm| x$1)) (MapType1Select Result_4Heap@0 x$1 Foo__v1) Int__v (bool_2_U true)))) (= Result_4Heap@2 (MapType1Store Result_4Heap@1 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Result_4Heap@1 null (|valid__Foo#sm| x$1)) x$1 Foo__v2 (bool_2_U true))))) (and (= Result_4Heap@3 (MapType1Store Result_4Heap@2 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Result_4Heap@2 null (|valid__Foo#sm| x$1)) (MapType1Select Result_4Heap@2 x$1 Foo__v2) Int__v (bool_2_U true)))) (state Result_4Heap@3 Result_4Mask))) (and (=> (= (ControlFlow 0 20) (- 0 22)) (> rd$1 NoPerm)) (=> (> rd$1 NoPerm) (=> (|valid__Foo#trigger| Heap@@11 (valid__Foo x$1)) (=> (and (= (MapType1Select Heap@@11 null (valid__Foo x$1)) (CombineFrames (FrameFragment (MapType1Select Heap@@11 x$1 Foo__v1)) (CombineFrames (FrameFragment (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v1) Int__v)) (CombineFrames (FrameFragment (MapType1Select Heap@@11 x$1 Foo__v2)) (FrameFragment (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)))))) (= perm@5 (/ rd$1 (to_real 2)))) (and (=> (= (ControlFlow 0 20) (- 0 21)) (>= perm@5 NoPerm)) (=> (>= perm@5 NoPerm) (and (=> (= (ControlFlow 0 20) 17) anon140_Then_correct) (=> (= (ControlFlow 0 20) 19) anon140_Else_correct)))))))))))))))))))))))))))))
(let ((anon139_Else_correct  (=> (and (= perm@0 NoPerm) (= (ControlFlow 0 31) 20)) anon88_correct)))
(let ((anon139_Then_correct  (=> (not (= perm@0 NoPerm)) (and (=> (= (ControlFlow 0 29) (- 0 30)) (<= perm@0 (U_2_real (MapType0Select Result_4Mask null (valid__Foo x$1))))) (=> (<= perm@0 (U_2_real (MapType0Select Result_4Mask null (valid__Foo x$1)))) (=> (= (ControlFlow 0 29) 20) anon88_correct))))))
(let ((anon138_Then_correct  (=> b_4@22 (and (=> (= (ControlFlow 0 32) (- 0 34)) (> rd$1 NoPerm)) (=> (> rd$1 NoPerm) (=> (|valid__Foo#trigger| Result_4Heap (valid__Foo x$1)) (=> (and (= (MapType1Select Result_4Heap null (valid__Foo x$1)) (CombineFrames (FrameFragment (MapType1Select Result_4Heap x$1 Foo__v1)) (CombineFrames (FrameFragment (MapType1Select Result_4Heap (MapType1Select Result_4Heap x$1 Foo__v1) Int__v)) (CombineFrames (FrameFragment (MapType1Select Result_4Heap x$1 Foo__v2)) (FrameFragment (MapType1Select Result_4Heap (MapType1Select Result_4Heap x$1 Foo__v2) Int__v)))))) (= perm@0 (/ rd$1 (to_real 2)))) (and (=> (= (ControlFlow 0 32) (- 0 33)) (>= perm@0 NoPerm)) (=> (>= perm@0 NoPerm) (and (=> (= (ControlFlow 0 32) 29) anon139_Then_correct) (=> (= (ControlFlow 0 32) 31) anon139_Else_correct)))))))))))
(let ((anon138_Else_correct  (=> (not b_4@22) (=> (and (= Result_4Heap@8 Result_4Heap) (= (ControlFlow 0 9) 6)) anon91_correct))))
(let ((anon137_Then_correct  (=> (and (and b_4@22 b_4@22) b_10@6) (and (=> (= (ControlFlow 0 35) 32) anon138_Then_correct) (=> (= (ControlFlow 0 35) 9) anon138_Else_correct)))))
(let ((anon137_Else_correct  (=> (not (and (and b_4@22 b_4@22) b_10@6)) (=> (and (= Result_4Heap@8 Result_4Heap) (= (ControlFlow 0 8) 6)) anon91_correct))))
(let ((anon84_correct  (and (=> (= (ControlFlow 0 36) (- 0 37)) (=> (and (and b_4@21 b_4@21) b_10@6) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType0Select Used_4Mask@3 null (valid__Foo x$1))) initNeededTransfer@4)))) (=> (=> (and (and b_4@21 b_4@21) b_10@6) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType0Select Used_4Mask@3 null (valid__Foo x$1))) initNeededTransfer@4))) (=> (and (= b_11@0  (and b_4@21 b_10@6)) (= b_11@1  (and b_11@0 (state Result_4Heap Result_4Mask)))) (=> (and (and (= b_11@2  (and b_11@1 (sumMask Result_4Mask Ops_3Mask@13 Used_4Mask@3))) (= b_11@3  (and (and b_11@2 (IdenticalOnKnownLocations Ops_3Heap@8 Result_4Heap Ops_3Mask@13)) (IdenticalOnKnownLocations Used_4Heap@0 Result_4Heap Used_4Mask@3)))) (and (= b_11@4  (and b_11@3 (state Result_4Heap Result_4Mask))) (= b_4@22  (and b_4@21 b_11@4)))) (and (=> (= (ControlFlow 0 36) 35) anon137_Then_correct) (=> (= (ControlFlow 0 36) 8) anon137_Else_correct))))))))
(let ((anon136_Else_correct  (=> (>= 0.0 takeTransfer@9) (=> (and (= Heap@12 Heap@10) (= neededTransfer@19 neededTransfer@17)) (=> (and (and (= Mask@16 Mask@14) (= b_10@6 b_10@3)) (and (= Used_4Mask@3 Used_4Mask@1) (= (ControlFlow 0 40) 36))) anon84_correct)))))
(let ((anon136_Then_correct  (=> (> takeTransfer@9 0.0) (=> (and (= neededTransfer@18 (- neededTransfer@17 takeTransfer@9)) (= Used_4Mask@2 (MapType0Store Used_4Mask@1 null (valid__Foo x$1) (real_2_U (+ (U_2_real (MapType0Select Used_4Mask@1 null (valid__Foo x$1))) takeTransfer@9))))) (=> (and (and (= b_10@4  (and b_10@3 (state Used_4Heap@0 Used_4Mask@2))) (= TempMask@1 (MapType0Store ZeroMask null (valid__Foo x$1) (real_2_U FullPerm)))) (and (= b_10@5  (and b_10@4 (IdenticalOnKnownLocations Heap@10 Used_4Heap@0 TempMask@1))) (= Mask@15 (MapType0Store Mask@14 null (valid__Foo x$1) (real_2_U (- (U_2_real (MapType0Select Mask@14 null (valid__Foo x$1))) takeTransfer@9)))))) (=> (and (and (and (forall ((o_3 T@U) (f_7 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_7))))
(let ((A@@12 (FieldTypeInv0 (type f_7))))
 (=> (and (and (= (type o_3) RefType) (= (type f_7) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType0Select (MapType1Select Heap@10 null (|wand_1#sm| res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)))) o_3 f_7)) (U_2_bool (MapType0Select (MapType1Select Heap@10 null (|valid__Foo#sm| x$1)) o_3 f_7)))) (U_2_bool (MapType0Select newPMask@0 o_3 f_7)))))
 :qid |stdinbpl.1247:35|
 :skolemid |48|
 :pattern ( (MapType0Select newPMask@0 o_3 f_7))
)) (= Heap@11 (MapType1Store Heap@10 null (|wand_1#sm| res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v))) newPMask@0))) (and (= Heap@12 Heap@11) (= neededTransfer@19 neededTransfer@18))) (and (and (= Mask@16 Mask@15) (= b_10@6 b_10@5)) (and (= Used_4Mask@3 Used_4Mask@2) (= (ControlFlow 0 39) 36)))) anon84_correct))))))
(let ((anon135_Else_correct  (=> (and (< maskTransfer@9 neededTransfer@17) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 42) 39) anon136_Then_correct) (=> (= (ControlFlow 0 42) 40) anon136_Else_correct)))))
(let ((anon135_Then_correct  (=> (and (<= neededTransfer@17 maskTransfer@9) (= takeTransfer@9 neededTransfer@17)) (and (=> (= (ControlFlow 0 41) 39) anon136_Then_correct) (=> (= (ControlFlow 0 41) 40) anon136_Else_correct)))))
(let ((anon134_Then_correct  (=> (and (and (and (and (and b_4@21 b_4@21) b_10@3) true) (> neededTransfer@17 0.0)) (= maskTransfer@9 (U_2_real (MapType0Select Mask@14 null (valid__Foo x$1))))) (and (=> (= (ControlFlow 0 43) 41) anon135_Then_correct) (=> (= (ControlFlow 0 43) 42) anon135_Else_correct)))))
(let ((anon134_Else_correct  (=> (not (and (and (and (and b_4@21 b_4@21) b_10@3) true) (> neededTransfer@17 0.0))) (=> (and (= Heap@12 Heap@10) (= neededTransfer@19 neededTransfer@17)) (=> (and (and (= Mask@16 Mask@14) (= b_10@6 b_10@3)) (and (= Used_4Mask@3 Used_4Mask@1) (= (ControlFlow 0 38) 36))) anon84_correct)))))
(let ((anon133_Else_correct  (=> (>= 0.0 takeTransfer@8) (=> (and (and (= Ops_3Mask@13 Ops_3Mask@11) (= Used_4Mask@1 ZeroMask)) (and (= b_10@3 b_10@0) (= neededTransfer@17 FullPerm))) (and (=> (= (ControlFlow 0 46) 43) anon134_Then_correct) (=> (= (ControlFlow 0 46) 38) anon134_Else_correct))))))
(let ((anon133_Then_correct  (=> (> takeTransfer@8 0.0) (=> (and (= neededTransfer@16 (- FullPerm takeTransfer@8)) (= Used_4Mask@0 (MapType0Store ZeroMask null (valid__Foo x$1) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (valid__Foo x$1))) takeTransfer@8))))) (=> (and (and (and (= b_10@1  (and b_10@0 (state Used_4Heap@0 Used_4Mask@0))) (= TempMask@0 (MapType0Store ZeroMask null (valid__Foo x$1) (real_2_U FullPerm)))) (and (= b_10@2  (and b_10@1 (IdenticalOnKnownLocations Ops_3Heap@8 Used_4Heap@0 TempMask@0))) (= Ops_3Mask@12 (MapType0Store Ops_3Mask@11 null (valid__Foo x$1) (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@11 null (valid__Foo x$1))) takeTransfer@8)))))) (and (and (= Ops_3Mask@13 Ops_3Mask@12) (= Used_4Mask@1 Used_4Mask@0)) (and (= b_10@3 b_10@2) (= neededTransfer@17 neededTransfer@16)))) (and (=> (= (ControlFlow 0 45) 43) anon134_Then_correct) (=> (= (ControlFlow 0 45) 38) anon134_Else_correct)))))))
(let ((anon132_Else_correct  (=> (and (< maskTransfer@8 FullPerm) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 48) 45) anon133_Then_correct) (=> (= (ControlFlow 0 48) 46) anon133_Else_correct)))))
(let ((anon132_Then_correct  (=> (and (<= FullPerm maskTransfer@8) (= takeTransfer@8 FullPerm)) (and (=> (= (ControlFlow 0 47) 45) anon133_Then_correct) (=> (= (ControlFlow 0 47) 46) anon133_Else_correct)))))
(let ((anon131_Then_correct  (=> (and (and (and (and (and b_4@21 b_4@21) b_10@0) true) (> FullPerm 0.0)) (= maskTransfer@8 (U_2_real (MapType0Select Ops_3Mask@11 null (valid__Foo x$1))))) (and (=> (= (ControlFlow 0 49) 47) anon132_Then_correct) (=> (= (ControlFlow 0 49) 48) anon132_Else_correct)))))
(let ((anon131_Else_correct  (=> (not (and (and (and (and b_4@21 b_4@21) b_10@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@13 Ops_3Mask@11) (= Used_4Mask@1 ZeroMask)) (and (= b_10@3 b_10@0) (= neededTransfer@17 FullPerm))) (and (=> (= (ControlFlow 0 44) 43) anon134_Then_correct) (=> (= (ControlFlow 0 44) 38) anon134_Else_correct))))))
(let ((anon72_correct  (=> (and (= b_10@0  (and b_10 (state Used_4Heap@0 ZeroMask))) (= initNeededTransfer@4 (+ (U_2_real (MapType0Select ZeroMask null (valid__Foo x$1))) FullPerm))) (and (=> (= (ControlFlow 0 50) (- 0 51)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 50) 49) anon131_Then_correct) (=> (= (ControlFlow 0 50) 44) anon131_Else_correct)))))))
(let ((anon71_correct  (=> (and (and (= Ops_3Heap@4 (MapType1Store Ops_3Heap@3 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Ops_3Heap@3 null (|valid__Foo#sm| x$1)) x$1 Foo__v1 (bool_2_U true)))) (= Ops_3Heap@5 (MapType1Store Ops_3Heap@4 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Ops_3Heap@4 null (|valid__Foo#sm| x$1)) (MapType1Select Ops_3Heap@4 x$1 Foo__v1) Int__v (bool_2_U true))))) (and (= Ops_3Heap@6 (MapType1Store Ops_3Heap@5 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Ops_3Heap@5 null (|valid__Foo#sm| x$1)) x$1 Foo__v2 (bool_2_U true)))) (= Ops_3Heap@7 (MapType1Store Ops_3Heap@6 null (|valid__Foo#sm| x$1) (MapType0Store (MapType1Select Ops_3Heap@6 null (|valid__Foo#sm| x$1)) (MapType1Select Ops_3Heap@6 x$1 Foo__v2) Int__v (bool_2_U true)))))) (=> (and (and (and (state Ops_3Heap@7 Ops_3Mask@10) (= b_4@20  (and b_4@19 (state Ops_3Heap@7 Ops_3Mask@10)))) (and (= Ops_3Mask@11 Ops_3Mask@10) (= Ops_3Heap@8 Ops_3Heap@7))) (and (and (= b_4@21 b_4@20) (= Mask@14 Mask@13)) (and (= Heap@10 Heap@9) (= (ControlFlow 0 53) 50)))) anon72_correct))))
(let ((anon130_Else_correct  (=> (HasDirectPerm Ops_3Mask@10 null (valid__Foo x$1)) (=> (and (= Ops_3Heap@3 Ops_3Heap@0) (= (ControlFlow 0 55) 53)) anon71_correct))))
(let ((anon130_Then_correct  (=> (not (HasDirectPerm Ops_3Mask@10 null (valid__Foo x$1))) (=> (and (and (= Ops_3Heap@1 (MapType1Store Ops_3Heap@0 null (|valid__Foo#sm| x$1) ZeroPMask)) (= Ops_3Heap@2 (MapType1Store Ops_3Heap@1 null (valid__Foo x$1) freshVersion@0))) (and (= Ops_3Heap@3 Ops_3Heap@2) (= (ControlFlow 0 54) 53))) anon71_correct))))
(let ((anon69_correct  (and (=> (= (ControlFlow 0 56) (- 0 57)) (=> (and b_4@14 b_5@24) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType0Select Used_3Mask@15 rcvLocal@1 Int__v)) initNeededTransfer@3)))) (=> (=> (and b_4@14 b_5@24) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType0Select Used_3Mask@15 rcvLocal@1 Int__v)) initNeededTransfer@3))) (=> (= b_9@0  (and b_4@14 b_5@24)) (=> (and (and (= b_9@1  (and b_9@0 (state Result_3Heap Result_3Mask))) (= b_9@2  (and b_9@1 (sumMask Result_3Mask Ops_3Mask@9 Used_3Mask@15)))) (and (= b_9@3  (and (and b_9@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_3Heap Ops_3Mask@9)) (IdenticalOnKnownLocations Used_3Heap@0 Result_3Heap Used_3Mask@15))) (= b_9@4  (and b_9@3 (state Result_3Heap Result_3Mask))))) (=> (and (and (and (= b_4@15  (and b_4@14 b_9@4)) (= b_4@16  (and b_4@15 b_5@24))) (and (= b_4@17  (and b_4@16 (= Used_3Heap@0 Ops_3Heap@0))) (= Ops_3Mask@10 (MapType0Store Ops_3Mask@9 null (valid__Foo x$1) (real_2_U (+ (U_2_real (MapType0Select Ops_3Mask@9 null (valid__Foo x$1))) FullPerm)))))) (and (and (= b_4@18  (and b_4@17 (state Ops_3Heap@0 Ops_3Mask@10))) (= b_4@19  (and b_4@18 (state Ops_3Heap@0 Ops_3Mask@10)))) (and (|valid__Foo#trigger| Ops_3Heap@0 (valid__Foo x$1)) (= (MapType1Select Ops_3Heap@0 null (valid__Foo x$1)) (CombineFrames (FrameFragment (MapType1Select Ops_3Heap@0 x$1 Foo__v1)) (CombineFrames (FrameFragment (MapType1Select Ops_3Heap@0 (MapType1Select Ops_3Heap@0 x$1 Foo__v1) Int__v)) (CombineFrames (FrameFragment (MapType1Select Ops_3Heap@0 x$1 Foo__v2)) (FrameFragment (MapType1Select Ops_3Heap@0 (MapType1Select Ops_3Heap@0 x$1 Foo__v2) Int__v))))))))) (and (=> (= (ControlFlow 0 56) 54) anon130_Then_correct) (=> (= (ControlFlow 0 56) 55) anon130_Else_correct)))))))))
(let ((anon129_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (= Heap@9 Heap@7) (= Mask@13 Mask@11)) (=> (and (and (= neededTransfer@15 neededTransfer@13) (= b_5@24 b_5@21)) (and (= Used_3Mask@15 Used_3Mask@13) (= (ControlFlow 0 60) 56))) anon69_correct)))))
(let ((anon129_Then_correct  (=> (> takeTransfer@7 0.0) (=> (and (and (= neededTransfer@14 (- neededTransfer@13 takeTransfer@7)) (= Used_3Mask@14 (MapType0Store Used_3Mask@13 rcvLocal@1 Int__v (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@13 rcvLocal@1 Int__v)) takeTransfer@7))))) (and (= b_5@22  (and b_5@21 (state Used_3Heap@0 Used_3Mask@14))) (= b_5@23  (and b_5@22 (= (U_2_int (MapType1Select Heap@7 rcvLocal@1 Int__v)) (U_2_int (MapType1Select Used_3Heap@0 rcvLocal@1 Int__v))))))) (=> (and (and (and (= Mask@12 (MapType0Store Mask@11 rcvLocal@1 Int__v (real_2_U (- (U_2_real (MapType0Select Mask@11 rcvLocal@1 Int__v)) takeTransfer@7)))) (= Heap@8 (MapType1Store Heap@7 null (|wand_1#sm| res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v))) (MapType0Store (MapType1Select Heap@7 null (|wand_1#sm| res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)))) (MapType1Select Heap@7 x$1 Foo__v2) Int__v (bool_2_U true))))) (and (= Heap@9 Heap@8) (= Mask@13 Mask@12))) (and (and (= neededTransfer@15 neededTransfer@14) (= b_5@24 b_5@23)) (and (= Used_3Mask@15 Used_3Mask@14) (= (ControlFlow 0 59) 56)))) anon69_correct)))))
(let ((anon128_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@13) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 62) 59) anon129_Then_correct) (=> (= (ControlFlow 0 62) 60) anon129_Else_correct)))))
(let ((anon128_Then_correct  (=> (and (<= neededTransfer@13 maskTransfer@7) (= takeTransfer@7 neededTransfer@13)) (and (=> (= (ControlFlow 0 61) 59) anon129_Then_correct) (=> (= (ControlFlow 0 61) 60) anon129_Else_correct)))))
(let ((anon127_Then_correct  (=> (and (and (and (and b_4@14 b_5@21) true) (> neededTransfer@13 0.0)) (= maskTransfer@7 (U_2_real (MapType0Select Mask@11 rcvLocal@1 Int__v)))) (and (=> (= (ControlFlow 0 63) 61) anon128_Then_correct) (=> (= (ControlFlow 0 63) 62) anon128_Else_correct)))))
(let ((anon127_Else_correct  (=> (not (and (and (and b_4@14 b_5@21) true) (> neededTransfer@13 0.0))) (=> (and (= Heap@9 Heap@7) (= Mask@13 Mask@11)) (=> (and (and (= neededTransfer@15 neededTransfer@13) (= b_5@24 b_5@21)) (and (= Used_3Mask@15 Used_3Mask@13) (= (ControlFlow 0 58) 56))) anon69_correct)))))
(let ((anon126_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (and (= Used_3Mask@13 Used_3Mask@11) (= b_5@21 b_5@18)) (and (= neededTransfer@13 FullPerm) (= Ops_3Mask@9 Ops_3Mask@7))) (and (=> (= (ControlFlow 0 66) 63) anon127_Then_correct) (=> (= (ControlFlow 0 66) 58) anon127_Else_correct))))))
(let ((anon126_Then_correct  (=> (and (> takeTransfer@6 0.0) (= neededTransfer@12 (- FullPerm takeTransfer@6))) (=> (and (and (and (= Used_3Mask@12 (MapType0Store Used_3Mask@11 rcvLocal@1 Int__v (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@11 rcvLocal@1 Int__v)) takeTransfer@6)))) (= b_5@19  (and b_5@18 (state Used_3Heap@0 Used_3Mask@12)))) (and (= b_5@20  (and b_5@19 (= (U_2_int (MapType1Select Ops_3Heap@0 rcvLocal@1 Int__v)) (U_2_int (MapType1Select Used_3Heap@0 rcvLocal@1 Int__v))))) (= Ops_3Mask@8 (MapType0Store Ops_3Mask@7 rcvLocal@1 Int__v (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@7 rcvLocal@1 Int__v)) takeTransfer@6)))))) (and (and (= Used_3Mask@13 Used_3Mask@12) (= b_5@21 b_5@20)) (and (= neededTransfer@13 neededTransfer@12) (= Ops_3Mask@9 Ops_3Mask@8)))) (and (=> (= (ControlFlow 0 65) 63) anon127_Then_correct) (=> (= (ControlFlow 0 65) 58) anon127_Else_correct))))))
(let ((anon125_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 68) 65) anon126_Then_correct) (=> (= (ControlFlow 0 68) 66) anon126_Else_correct)))))
(let ((anon125_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 67) 65) anon126_Then_correct) (=> (= (ControlFlow 0 67) 66) anon126_Else_correct)))))
(let ((anon124_Then_correct  (=> (and (and (and (and b_4@14 b_5@18) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType0Select Ops_3Mask@7 rcvLocal@1 Int__v)))) (and (=> (= (ControlFlow 0 69) 67) anon125_Then_correct) (=> (= (ControlFlow 0 69) 68) anon125_Else_correct)))))
(let ((anon124_Else_correct  (=> (not (and (and (and b_4@14 b_5@18) true) (> FullPerm 0.0))) (=> (and (and (= Used_3Mask@13 Used_3Mask@11) (= b_5@21 b_5@18)) (and (= neededTransfer@13 FullPerm) (= Ops_3Mask@9 Ops_3Mask@7))) (and (=> (= (ControlFlow 0 64) 63) anon127_Then_correct) (=> (= (ControlFlow 0 64) 58) anon127_Else_correct))))))
(let ((anon57_correct  (=> (and (= rcvLocal@1 (MapType1Select Result_2Heap x$1 Foo__v2)) (= initNeededTransfer@3 (+ (U_2_real (MapType0Select Used_3Mask@11 rcvLocal@1 Int__v)) FullPerm))) (and (=> (= (ControlFlow 0 70) (- 0 71)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 70) 69) anon124_Then_correct) (=> (= (ControlFlow 0 70) 64) anon124_Else_correct)))))))
(let ((anon123_Else_correct  (=> (and (not b_4@14) (= (ControlFlow 0 75) 70)) anon57_correct)))
(let ((anon123_Then_correct  (=> b_4@14 (and (=> (= (ControlFlow 0 73) (- 0 74)) (HasDirectPerm Result_2Mask x$1 Foo__v2)) (=> (HasDirectPerm Result_2Mask x$1 Foo__v2) (=> (= (ControlFlow 0 73) 70) anon57_correct))))))
(let ((anon122_Then_correct  (=> (and b_4@14 b_5@18) (and (=> (= (ControlFlow 0 76) 73) anon123_Then_correct) (=> (= (ControlFlow 0 76) 75) anon123_Else_correct)))))
(let ((anon122_Else_correct  (=> (and (not (and b_4@14 b_5@18)) (= (ControlFlow 0 72) 70)) anon57_correct)))
(let ((anon54_correct  (and (=> (= (ControlFlow 0 77) (- 0 78)) (=> (and b_4@11 b_5@18) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType0Select Used_3Mask@11 x$1 Foo__v2)) initNeededTransfer@2)))) (=> (=> (and b_4@11 b_5@18) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType0Select Used_3Mask@11 x$1 Foo__v2)) initNeededTransfer@2))) (=> (and (and (and (= b_8@0  (and b_4@11 b_5@18)) (= b_8@1  (and b_8@0 (state Result_2Heap Result_2Mask)))) (and (= b_8@2  (and b_8@1 (sumMask Result_2Mask Ops_3Mask@7 Used_3Mask@11))) (= b_8@3  (and (and b_8@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_2Heap Ops_3Mask@7)) (IdenticalOnKnownLocations Used_3Heap@0 Result_2Heap Used_3Mask@11))))) (and (and (= b_8@4  (and b_8@3 (state Result_2Heap Result_2Mask))) (= b_4@12  (and b_4@11 b_8@4))) (and (= b_4@13  (and b_4@12 b_5@18)) (= b_4@14  (and b_4@13 (= Used_3Heap@0 Ops_3Heap@0)))))) (and (=> (= (ControlFlow 0 77) 76) anon122_Then_correct) (=> (= (ControlFlow 0 77) 72) anon122_Else_correct)))))))
(let ((anon121_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (= neededTransfer@11 neededTransfer@9) (= b_5@18 b_5@15)) (=> (and (and (= Mask@11 Mask@9) (= Heap@7 Heap@5)) (and (= Used_3Mask@11 Used_3Mask@9) (= (ControlFlow 0 81) 77))) anon54_correct)))))
(let ((anon121_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (and (= neededTransfer@10 (- neededTransfer@9 takeTransfer@5)) (= Used_3Mask@10 (MapType0Store Used_3Mask@9 x$1 Foo__v2 (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@9 x$1 Foo__v2)) takeTransfer@5))))) (and (= b_5@16  (and b_5@15 (state Used_3Heap@0 Used_3Mask@10))) (= b_5@17  (and b_5@16 (= (MapType1Select Heap@5 x$1 Foo__v2) (MapType1Select Used_3Heap@0 x$1 Foo__v2)))))) (=> (and (and (and (= Mask@10 (MapType0Store Mask@9 x$1 Foo__v2 (real_2_U (- (U_2_real (MapType0Select Mask@9 x$1 Foo__v2)) takeTransfer@5)))) (= Heap@6 (MapType1Store Heap@5 null (|wand_1#sm| res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v))) (MapType0Store (MapType1Select Heap@5 null (|wand_1#sm| res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)))) x$1 Foo__v2 (bool_2_U true))))) (and (= neededTransfer@11 neededTransfer@10) (= b_5@18 b_5@17))) (and (and (= Mask@11 Mask@10) (= Heap@7 Heap@6)) (and (= Used_3Mask@11 Used_3Mask@10) (= (ControlFlow 0 80) 77)))) anon54_correct)))))
(let ((anon120_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@9) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 83) 80) anon121_Then_correct) (=> (= (ControlFlow 0 83) 81) anon121_Else_correct)))))
(let ((anon120_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@5) (= takeTransfer@5 neededTransfer@9)) (and (=> (= (ControlFlow 0 82) 80) anon121_Then_correct) (=> (= (ControlFlow 0 82) 81) anon121_Else_correct)))))
(let ((anon119_Then_correct  (=> (and (and (and (and b_4@11 b_5@15) true) (> neededTransfer@9 0.0)) (= maskTransfer@5 (U_2_real (MapType0Select Mask@9 x$1 Foo__v2)))) (and (=> (= (ControlFlow 0 84) 82) anon120_Then_correct) (=> (= (ControlFlow 0 84) 83) anon120_Else_correct)))))
(let ((anon119_Else_correct  (=> (not (and (and (and b_4@11 b_5@15) true) (> neededTransfer@9 0.0))) (=> (and (= neededTransfer@11 neededTransfer@9) (= b_5@18 b_5@15)) (=> (and (and (= Mask@11 Mask@9) (= Heap@7 Heap@5)) (and (= Used_3Mask@11 Used_3Mask@9) (= (ControlFlow 0 79) 77))) anon54_correct)))))
(let ((anon118_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (and (= Ops_3Mask@7 Ops_3Mask@5) (= Used_3Mask@9 Used_3Mask@7)) (and (= b_5@15 b_5@12) (= neededTransfer@9 FullPerm))) (and (=> (= (ControlFlow 0 87) 84) anon119_Then_correct) (=> (= (ControlFlow 0 87) 79) anon119_Else_correct))))))
(let ((anon118_Then_correct  (=> (and (> takeTransfer@4 0.0) (= neededTransfer@8 (- FullPerm takeTransfer@4))) (=> (and (and (and (= Used_3Mask@8 (MapType0Store Used_3Mask@7 x$1 Foo__v2 (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@7 x$1 Foo__v2)) takeTransfer@4)))) (= b_5@13  (and b_5@12 (state Used_3Heap@0 Used_3Mask@8)))) (and (= b_5@14  (and b_5@13 (= (MapType1Select Ops_3Heap@0 x$1 Foo__v2) (MapType1Select Used_3Heap@0 x$1 Foo__v2)))) (= Ops_3Mask@6 (MapType0Store Ops_3Mask@5 x$1 Foo__v2 (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@5 x$1 Foo__v2)) takeTransfer@4)))))) (and (and (= Ops_3Mask@7 Ops_3Mask@6) (= Used_3Mask@9 Used_3Mask@8)) (and (= b_5@15 b_5@14) (= neededTransfer@9 neededTransfer@8)))) (and (=> (= (ControlFlow 0 86) 84) anon119_Then_correct) (=> (= (ControlFlow 0 86) 79) anon119_Else_correct))))))
(let ((anon117_Else_correct  (=> (and (< maskTransfer@4 FullPerm) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 89) 86) anon118_Then_correct) (=> (= (ControlFlow 0 89) 87) anon118_Else_correct)))))
(let ((anon117_Then_correct  (=> (and (<= FullPerm maskTransfer@4) (= takeTransfer@4 FullPerm)) (and (=> (= (ControlFlow 0 88) 86) anon118_Then_correct) (=> (= (ControlFlow 0 88) 87) anon118_Else_correct)))))
(let ((anon116_Then_correct  (=> (and (and (and (and b_4@11 b_5@12) true) (> FullPerm 0.0)) (= maskTransfer@4 (U_2_real (MapType0Select Ops_3Mask@5 x$1 Foo__v2)))) (and (=> (= (ControlFlow 0 90) 88) anon117_Then_correct) (=> (= (ControlFlow 0 90) 89) anon117_Else_correct)))))
(let ((anon116_Else_correct  (=> (not (and (and (and b_4@11 b_5@12) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@7 Ops_3Mask@5) (= Used_3Mask@9 Used_3Mask@7)) (and (= b_5@15 b_5@12) (= neededTransfer@9 FullPerm))) (and (=> (= (ControlFlow 0 85) 84) anon119_Then_correct) (=> (= (ControlFlow 0 85) 79) anon119_Else_correct))))))
(let ((anon42_correct  (and (=> (= (ControlFlow 0 91) (- 0 93)) (=> (and b_4@8 b_5@12) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType0Select Used_3Mask@7 rcvLocal@0 Int__v)) initNeededTransfer@1)))) (=> (=> (and b_4@8 b_5@12) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType0Select Used_3Mask@7 rcvLocal@0 Int__v)) initNeededTransfer@1))) (=> (= b_7@0  (and b_4@8 b_5@12)) (=> (and (and (and (= b_7@1  (and b_7@0 (state Result_1Heap Result_1Mask))) (= b_7@2  (and b_7@1 (sumMask Result_1Mask Ops_3Mask@5 Used_3Mask@7)))) (and (= b_7@3  (and (and b_7@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_1Heap Ops_3Mask@5)) (IdenticalOnKnownLocations Used_3Heap@0 Result_1Heap Used_3Mask@7))) (= b_7@4  (and b_7@3 (state Result_1Heap Result_1Mask))))) (and (and (= b_4@9  (and b_4@8 b_7@4)) (= b_4@10  (and b_4@9 b_5@12))) (and (= b_4@11  (and b_4@10 (= Used_3Heap@0 Ops_3Heap@0))) (= initNeededTransfer@2 (+ (U_2_real (MapType0Select Used_3Mask@7 x$1 Foo__v2)) FullPerm))))) (and (=> (= (ControlFlow 0 91) (- 0 92)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 91) 90) anon116_Then_correct) (=> (= (ControlFlow 0 91) 85) anon116_Else_correct))))))))))
(let ((anon115_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (= neededTransfer@7 neededTransfer@5) (= b_5@12 b_5@9)) (=> (and (and (= Heap@5 Heap@3) (= Mask@9 Mask@7)) (and (= Used_3Mask@7 Used_3Mask@5) (= (ControlFlow 0 96) 91))) anon42_correct)))))
(let ((anon115_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (and (= neededTransfer@6 (- neededTransfer@5 takeTransfer@3)) (= Used_3Mask@6 (MapType0Store Used_3Mask@5 rcvLocal@0 Int__v (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@5 rcvLocal@0 Int__v)) takeTransfer@3))))) (and (= b_5@10  (and b_5@9 (state Used_3Heap@0 Used_3Mask@6))) (= b_5@11  (and b_5@10 (= (U_2_int (MapType1Select Heap@3 rcvLocal@0 Int__v)) (U_2_int (MapType1Select Used_3Heap@0 rcvLocal@0 Int__v))))))) (=> (and (and (and (= Mask@8 (MapType0Store Mask@7 rcvLocal@0 Int__v (real_2_U (- (U_2_real (MapType0Select Mask@7 rcvLocal@0 Int__v)) takeTransfer@3)))) (= Heap@4 (MapType1Store Heap@3 null (|wand_1#sm| res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v))) (MapType0Store (MapType1Select Heap@3 null (|wand_1#sm| res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)))) (MapType1Select Heap@3 x$1 Foo__v1) Int__v (bool_2_U true))))) (and (= neededTransfer@7 neededTransfer@6) (= b_5@12 b_5@11))) (and (and (= Heap@5 Heap@4) (= Mask@9 Mask@8)) (and (= Used_3Mask@7 Used_3Mask@6) (= (ControlFlow 0 95) 91)))) anon42_correct)))))
(let ((anon114_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@5) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 98) 95) anon115_Then_correct) (=> (= (ControlFlow 0 98) 96) anon115_Else_correct)))))
(let ((anon114_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@3) (= takeTransfer@3 neededTransfer@5)) (and (=> (= (ControlFlow 0 97) 95) anon115_Then_correct) (=> (= (ControlFlow 0 97) 96) anon115_Else_correct)))))
(let ((anon113_Then_correct  (=> (and (and (and (and b_4@8 b_5@9) true) (> neededTransfer@5 0.0)) (= maskTransfer@3 (U_2_real (MapType0Select Mask@7 rcvLocal@0 Int__v)))) (and (=> (= (ControlFlow 0 99) 97) anon114_Then_correct) (=> (= (ControlFlow 0 99) 98) anon114_Else_correct)))))
(let ((anon113_Else_correct  (=> (not (and (and (and b_4@8 b_5@9) true) (> neededTransfer@5 0.0))) (=> (and (= neededTransfer@7 neededTransfer@5) (= b_5@12 b_5@9)) (=> (and (and (= Heap@5 Heap@3) (= Mask@9 Mask@7)) (and (= Used_3Mask@7 Used_3Mask@5) (= (ControlFlow 0 94) 91))) anon42_correct)))))
(let ((anon112_Else_correct  (=> (>= 0.0 takeTransfer@2) (=> (and (and (= Used_3Mask@5 Used_3Mask@3) (= b_5@9 b_5@6)) (and (= neededTransfer@5 FullPerm) (= Ops_3Mask@5 Ops_3Mask@3))) (and (=> (= (ControlFlow 0 102) 99) anon113_Then_correct) (=> (= (ControlFlow 0 102) 94) anon113_Else_correct))))))
(let ((anon112_Then_correct  (=> (and (> takeTransfer@2 0.0) (= neededTransfer@4 (- FullPerm takeTransfer@2))) (=> (and (and (and (= Used_3Mask@4 (MapType0Store Used_3Mask@3 rcvLocal@0 Int__v (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@3 rcvLocal@0 Int__v)) takeTransfer@2)))) (= b_5@7  (and b_5@6 (state Used_3Heap@0 Used_3Mask@4)))) (and (= b_5@8  (and b_5@7 (= (U_2_int (MapType1Select Ops_3Heap@0 rcvLocal@0 Int__v)) (U_2_int (MapType1Select Used_3Heap@0 rcvLocal@0 Int__v))))) (= Ops_3Mask@4 (MapType0Store Ops_3Mask@3 rcvLocal@0 Int__v (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@3 rcvLocal@0 Int__v)) takeTransfer@2)))))) (and (and (= Used_3Mask@5 Used_3Mask@4) (= b_5@9 b_5@8)) (and (= neededTransfer@5 neededTransfer@4) (= Ops_3Mask@5 Ops_3Mask@4)))) (and (=> (= (ControlFlow 0 101) 99) anon113_Then_correct) (=> (= (ControlFlow 0 101) 94) anon113_Else_correct))))))
(let ((anon111_Else_correct  (=> (and (< maskTransfer@2 FullPerm) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 104) 101) anon112_Then_correct) (=> (= (ControlFlow 0 104) 102) anon112_Else_correct)))))
(let ((anon111_Then_correct  (=> (and (<= FullPerm maskTransfer@2) (= takeTransfer@2 FullPerm)) (and (=> (= (ControlFlow 0 103) 101) anon112_Then_correct) (=> (= (ControlFlow 0 103) 102) anon112_Else_correct)))))
(let ((anon110_Then_correct  (=> (and (and (and (and b_4@8 b_5@6) true) (> FullPerm 0.0)) (= maskTransfer@2 (U_2_real (MapType0Select Ops_3Mask@3 rcvLocal@0 Int__v)))) (and (=> (= (ControlFlow 0 105) 103) anon111_Then_correct) (=> (= (ControlFlow 0 105) 104) anon111_Else_correct)))))
(let ((anon110_Else_correct  (=> (not (and (and (and b_4@8 b_5@6) true) (> FullPerm 0.0))) (=> (and (and (= Used_3Mask@5 Used_3Mask@3) (= b_5@9 b_5@6)) (and (= neededTransfer@5 FullPerm) (= Ops_3Mask@5 Ops_3Mask@3))) (and (=> (= (ControlFlow 0 100) 99) anon113_Then_correct) (=> (= (ControlFlow 0 100) 94) anon113_Else_correct))))))
(let ((anon30_correct  (=> (and (= rcvLocal@0 (MapType1Select ResultHeap x$1 Foo__v1)) (= initNeededTransfer@1 (+ (U_2_real (MapType0Select Used_3Mask@3 rcvLocal@0 Int__v)) FullPerm))) (and (=> (= (ControlFlow 0 106) (- 0 107)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 106) 105) anon110_Then_correct) (=> (= (ControlFlow 0 106) 100) anon110_Else_correct)))))))
(let ((anon109_Else_correct  (=> (and (not b_4@8) (= (ControlFlow 0 111) 106)) anon30_correct)))
(let ((anon109_Then_correct  (=> b_4@8 (and (=> (= (ControlFlow 0 109) (- 0 110)) (HasDirectPerm ResultMask@@0 x$1 Foo__v1)) (=> (HasDirectPerm ResultMask@@0 x$1 Foo__v1) (=> (= (ControlFlow 0 109) 106) anon30_correct))))))
(let ((anon108_Then_correct  (=> (and b_4@8 b_5@6) (and (=> (= (ControlFlow 0 112) 109) anon109_Then_correct) (=> (= (ControlFlow 0 112) 111) anon109_Else_correct)))))
(let ((anon108_Else_correct  (=> (and (not (and b_4@8 b_5@6)) (= (ControlFlow 0 108) 106)) anon30_correct)))
(let ((anon27_correct  (and (=> (= (ControlFlow 0 113) (- 0 114)) (=> (and b_4@5 b_5@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType0Select Used_3Mask@3 x$1 Foo__v1)) initNeededTransfer@0)))) (=> (=> (and b_4@5 b_5@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType0Select Used_3Mask@3 x$1 Foo__v1)) initNeededTransfer@0))) (=> (and (and (and (= b_6@0  (and b_4@5 b_5@6)) (= b_6@1  (and b_6@0 (state ResultHeap ResultMask@@0)))) (and (= b_6@2  (and b_6@1 (sumMask ResultMask@@0 Ops_3Mask@3 Used_3Mask@3))) (= b_6@3  (and (and b_6@2 (IdenticalOnKnownLocations Ops_3Heap@0 ResultHeap Ops_3Mask@3)) (IdenticalOnKnownLocations Used_3Heap@0 ResultHeap Used_3Mask@3))))) (and (and (= b_6@4  (and b_6@3 (state ResultHeap ResultMask@@0))) (= b_4@6  (and b_4@5 b_6@4))) (and (= b_4@7  (and b_4@6 b_5@6)) (= b_4@8  (and b_4@7 (= Used_3Heap@0 Ops_3Heap@0)))))) (and (=> (= (ControlFlow 0 113) 112) anon108_Then_correct) (=> (= (ControlFlow 0 113) 108) anon108_Else_correct)))))))
(let ((anon107_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Mask@7 Mask@5) (= Heap@3 Heap@1)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_5@6 b_5@3)) (and (= Used_3Mask@3 Used_3Mask@1) (= (ControlFlow 0 117) 113))) anon27_correct)))))
(let ((anon107_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (and (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1)) (= Used_3Mask@2 (MapType0Store Used_3Mask@1 x$1 Foo__v1 (real_2_U (+ (U_2_real (MapType0Select Used_3Mask@1 x$1 Foo__v1)) takeTransfer@1))))) (and (= b_5@4  (and b_5@3 (state Used_3Heap@0 Used_3Mask@2))) (= b_5@5  (and b_5@4 (= (MapType1Select Heap@1 x$1 Foo__v1) (MapType1Select Used_3Heap@0 x$1 Foo__v1)))))) (=> (and (and (and (= Mask@6 (MapType0Store Mask@5 x$1 Foo__v1 (real_2_U (- (U_2_real (MapType0Select Mask@5 x$1 Foo__v1)) takeTransfer@1)))) (= Heap@2 (MapType1Store Heap@1 null (|wand_1#sm| res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v))) (MapType0Store (MapType1Select Heap@1 null (|wand_1#sm| res$1@0 FullPerm x$1 FullPerm x$1 (/ rd$1 (to_real 2)) x$1 (U_2_int (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v)))) x$1 Foo__v1 (bool_2_U true))))) (and (= Mask@7 Mask@6) (= Heap@3 Heap@2))) (and (and (= neededTransfer@3 neededTransfer@2) (= b_5@6 b_5@5)) (and (= Used_3Mask@3 Used_3Mask@2) (= (ControlFlow 0 116) 113)))) anon27_correct)))))
(let ((anon106_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 119) 116) anon107_Then_correct) (=> (= (ControlFlow 0 119) 117) anon107_Else_correct)))))
(let ((anon106_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 118) 116) anon107_Then_correct) (=> (= (ControlFlow 0 118) 117) anon107_Else_correct)))))
(let ((anon105_Then_correct  (=> (and (and (and (and b_4@5 b_5@3) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType0Select Mask@5 x$1 Foo__v1)))) (and (=> (= (ControlFlow 0 120) 118) anon106_Then_correct) (=> (= (ControlFlow 0 120) 119) anon106_Else_correct)))))
(let ((anon105_Else_correct  (=> (not (and (and (and b_4@5 b_5@3) true) (> neededTransfer@1 0.0))) (=> (and (= Mask@7 Mask@5) (= Heap@3 Heap@1)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_5@6 b_5@3)) (and (= Used_3Mask@3 Used_3Mask@1) (= (ControlFlow 0 115) 113))) anon27_correct)))))
(let ((anon104_Else_correct  (=> (>= 0.0 takeTransfer@0) (=> (and (and (= Ops_3Mask@3 Ops_3Mask@1) (= Used_3Mask@1 ZeroMask)) (and (= b_5@3 b_5@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 123) 120) anon105_Then_correct) (=> (= (ControlFlow 0 123) 115) anon105_Else_correct))))))
(let ((anon104_Then_correct  (=> (and (> takeTransfer@0 0.0) (= neededTransfer@0 (- FullPerm takeTransfer@0))) (=> (and (and (and (= Used_3Mask@0 (MapType0Store ZeroMask x$1 Foo__v1 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x$1 Foo__v1)) takeTransfer@0)))) (= b_5@1  (and b_5@0 (state Used_3Heap@0 Used_3Mask@0)))) (and (= b_5@2  (and b_5@1 (= (MapType1Select Ops_3Heap@0 x$1 Foo__v1) (MapType1Select Used_3Heap@0 x$1 Foo__v1)))) (= Ops_3Mask@2 (MapType0Store Ops_3Mask@1 x$1 Foo__v1 (real_2_U (- (U_2_real (MapType0Select Ops_3Mask@1 x$1 Foo__v1)) takeTransfer@0)))))) (and (and (= Ops_3Mask@3 Ops_3Mask@2) (= Used_3Mask@1 Used_3Mask@0)) (and (= b_5@3 b_5@2) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 122) 120) anon105_Then_correct) (=> (= (ControlFlow 0 122) 115) anon105_Else_correct))))))
(let ((anon103_Else_correct  (=> (and (< maskTransfer@0 FullPerm) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 125) 122) anon104_Then_correct) (=> (= (ControlFlow 0 125) 123) anon104_Else_correct)))))
(let ((anon103_Then_correct  (=> (and (<= FullPerm maskTransfer@0) (= takeTransfer@0 FullPerm)) (and (=> (= (ControlFlow 0 124) 122) anon104_Then_correct) (=> (= (ControlFlow 0 124) 123) anon104_Else_correct)))))
(let ((anon102_Then_correct  (=> (and (and (and (and b_4@5 b_5@0) true) (> FullPerm 0.0)) (= maskTransfer@0 (U_2_real (MapType0Select Ops_3Mask@1 x$1 Foo__v1)))) (and (=> (= (ControlFlow 0 126) 124) anon103_Then_correct) (=> (= (ControlFlow 0 126) 125) anon103_Else_correct)))))
(let ((anon102_Else_correct  (=> (not (and (and (and b_4@5 b_5@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@3 Ops_3Mask@1) (= Used_3Mask@1 ZeroMask)) (and (= b_5@3 b_5@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 121) 120) anon105_Then_correct) (=> (= (ControlFlow 0 121) 115) anon105_Else_correct))))))
(let ((anon101_Then_correct  (=> b_4@5 (=> (and (= b_5@0  (and b_5 (state Used_3Heap@0 ZeroMask))) (= initNeededTransfer@0 (+ (U_2_real (MapType0Select ZeroMask x$1 Foo__v1)) FullPerm))) (and (=> (= (ControlFlow 0 127) (- 0 128)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 127) 126) anon102_Then_correct) (=> (= (ControlFlow 0 127) 121) anon102_Else_correct))))))))
(let ((anon101_Else_correct  (=> (not b_4@5) (=> (and (= Ops_3Mask@11 Ops_3Mask@1) (= Ops_3Heap@8 Ops_3Heap@0)) (=> (and (and (= b_4@21 b_4@5) (= Mask@14 Mask@5)) (and (= Heap@10 Heap@1) (= (ControlFlow 0 52) 50))) anon72_correct)))))
(let ((anon14_correct  (=> (and (= b_4@4  (and b_4@3 (state Ops_3Heap@0 Ops_3Mask@1))) (= b_4@5  (and b_4@4 (state Ops_3Heap@0 Ops_3Mask@1)))) (and (=> (= (ControlFlow 0 129) 127) anon101_Then_correct) (=> (= (ControlFlow 0 129) 52) anon101_Else_correct)))))
(let ((anon100_Else_correct  (=> (and (and (not b_4@0) (= Ops_3Mask@1 ZeroMask)) (and (= b_4@3 b_4@0) (= (ControlFlow 0 131) 129))) anon14_correct)))
(let ((anon100_Then_correct  (=> b_4@0 (=> (and (= b_4@1  (and b_4@0 (not (= res$1@0 null)))) (= Ops_3Mask@0 (MapType0Store ZeroMask res$1@0 Int__v (real_2_U (+ (U_2_real (MapType0Select ZeroMask res$1@0 Int__v)) FullPerm))))) (=> (and (and (= b_4@2  (and b_4@1 (state Ops_3Heap@0 Ops_3Mask@0))) (= Ops_3Mask@1 Ops_3Mask@0)) (and (= b_4@3 b_4@2) (= (ControlFlow 0 130) 129))) anon14_correct)))))
(let ((anon12_correct  (=> (and (not (= x$1 null)) (= Mask@2 (MapType0Store Mask@1 x$1 Foo__v1 (real_2_U (+ (U_2_real (MapType0Select Mask@1 x$1 Foo__v1)) FullPerm))))) (=> (and (and (state Heap@1 Mask@2) (not (= (MapType1Select Heap@1 x$1 Foo__v1) null))) (and (= Mask@3 (MapType0Store Mask@2 (MapType1Select Heap@1 x$1 Foo__v1) Int__v (real_2_U (+ (U_2_real (MapType0Select Mask@2 (MapType1Select Heap@1 x$1 Foo__v1) Int__v)) FullPerm)))) (state Heap@1 Mask@3))) (=> (and (and (and (not (= x$1 null)) (= Mask@4 (MapType0Store Mask@3 x$1 Foo__v2 (real_2_U (+ (U_2_real (MapType0Select Mask@3 x$1 Foo__v2)) FullPerm))))) (and (state Heap@1 Mask@4) (not (= (MapType1Select Heap@1 x$1 Foo__v2) null)))) (and (and (= Mask@5 (MapType0Store Mask@4 (MapType1Select Heap@1 x$1 Foo__v2) Int__v (real_2_U (+ (U_2_real (MapType0Select Mask@4 (MapType1Select Heap@1 x$1 Foo__v2) Int__v)) FullPerm)))) (state Heap@1 Mask@5)) (and (state Heap@1 Mask@5) (state Heap@1 Mask@5)))) (and (=> (= (ControlFlow 0 132) (- 0 133)) (HasDirectPerm Mask@5 x$1 Foo__v1)) (=> (HasDirectPerm Mask@5 x$1 Foo__v1) (=> (and (and (= res$1@0 (MapType1Select Heap@1 x$1 Foo__v1)) (state Heap@1 Mask@5)) (and (= b_4@0  (and b_4 (state Ops_3Heap@0 ZeroMask))) (= b_3@0  (and b_3 (state Used_2Heap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 132) 130) anon100_Then_correct) (=> (= (ControlFlow 0 132) 131) anon100_Else_correct))))))))))
(let ((anon99_Else_correct  (=> (HasDirectPerm Mask@1 null (valid__Foo x$1)) (=> (and (= Heap@1 Heap@@11) (= (ControlFlow 0 135) 132)) anon12_correct))))
(let ((anon99_Then_correct  (=> (and (and (not (HasDirectPerm Mask@1 null (valid__Foo x$1))) (= Heap@0 (MapType1Store Heap@@11 null (valid__Foo x$1) newVersion@0))) (and (= Heap@1 Heap@0) (= (ControlFlow 0 134) 132))) anon12_correct)))
(let ((anon10_correct  (=> (= Mask@1 (MapType0Store Mask@0 null (valid__Foo x$1) (real_2_U (- (U_2_real (MapType0Select Mask@0 null (valid__Foo x$1))) FullPerm)))) (and (=> (= (ControlFlow 0 136) 134) anon99_Then_correct) (=> (= (ControlFlow 0 136) 135) anon99_Else_correct)))))
(let ((anon98_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 139) 136)) anon10_correct)))
(let ((anon98_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 137) (- 0 138)) (<= FullPerm (U_2_real (MapType0Select Mask@0 null (valid__Foo x$1))))) (=> (<= FullPerm (U_2_real (MapType0Select Mask@0 null (valid__Foo x$1)))) (=> (= (ControlFlow 0 137) 136) anon10_correct))))))
(let ((anon94_Else_correct  (=> (and (|valid__Foo#trigger| Heap@@11 (valid__Foo x$1)) (= (MapType1Select Heap@@11 null (valid__Foo x$1)) (CombineFrames (FrameFragment (MapType1Select Heap@@11 x$1 Foo__v1)) (CombineFrames (FrameFragment (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v1) Int__v)) (CombineFrames (FrameFragment (MapType1Select Heap@@11 x$1 Foo__v2)) (FrameFragment (MapType1Select Heap@@11 (MapType1Select Heap@@11 x$1 Foo__v2) Int__v))))))) (and (=> (= (ControlFlow 0 140) 137) anon98_Then_correct) (=> (= (ControlFlow 0 140) 139) anon98_Else_correct)))))
(let ((anon0_correct  (=> (and (and (and (state Heap@@11 ZeroMask) (U_2_bool (MapType1Select Heap@@11 x$1 $allocated))) (and (< NoPerm rd$1) (< rd$1 FullPerm))) (and (and (state Heap@@11 ZeroMask) (= Mask@0 (MapType0Store ZeroMask null (valid__Foo x$1) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (valid__Foo x$1))) FullPerm))))) (and (state Heap@@11 Mask@0) (state Heap@@11 Mask@0)))) (and (=> (= (ControlFlow 0 168) 167) anon94_Then_correct) (=> (= (ControlFlow 0 168) 140) anon94_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 169) 168) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
